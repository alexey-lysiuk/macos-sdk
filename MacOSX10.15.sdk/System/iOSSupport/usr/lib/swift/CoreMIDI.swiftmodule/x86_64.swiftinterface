// swift-interface-format-version: 1.0
// swift-tools-version: Apple Swift version 5.1 effective-4.1.50 (swiftlang-1100.8.32.26 clang-1100.0.18.2)
// swift-module-flags: -target x86_64-apple-ios13.0-macabi -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftCoreMIDI -swift-version 4 -O -enforce-exclusivity=unchecked -module-name CoreMIDI
@_exported import CoreMIDI
import Foundation
import Swift
@available(OSX 10.15, iOS 13.0, *)
public struct UnsafeMutableMIDIPacketPointer {
  public init(_ p: UnsafeMutablePointer<MIDIPacket>)
  public init?(_ p: UnsafeMutablePointer<MIDIPacket>?)
  public var count: Int {
    get
    nonmutating set(newValue)
  }
  public var timeStamp: Int {
    get
    nonmutating set(newValue)
  }
}
@available(OSX 10.15, iOS 13.0, *)
extension UnsafeMutableMIDIPacketPointer : MutableCollection, RandomAccessCollection {
  @available(OSX 10.15, iOS 13.0, *)
  public typealias Element = UInt8
  @available(OSX 10.15, iOS 13.0, *)
  public typealias Index = Int
  @available(OSX 10.15, iOS 13.0, *)
  public typealias Indices = Range<Int>
  @available(OSX 10.15, iOS 13.0, *)
  public var startIndex: Int {
    get
  }
  @available(OSX 10.15, iOS 13.0, *)
  public var endIndex: Int {
    get
  }
  @available(OSX 10.15, iOS 13.0, *)
  public subscript(index: Index) -> Element {
    get
    nonmutating set(newValue)
  }
  public typealias SubSequence = Swift.Slice<CoreMIDI.UnsafeMutableMIDIPacketPointer>
  public typealias Iterator = CoreMIDI.MIDIPacket.ByteSequence.Iterator
}
extension MIDIPacket {
  @available(OSX 10.15, iOS 13.0, *)
  public struct ByteSequence : Sequence {
    public func makeIterator() -> MIDIPacket.ByteSequence.Iterator
    public var count: Int {
      get
    }
    public struct Iterator : IteratorProtocol {
      public init(_ s: MIDIPacket.ByteSequence)
      mutating public func next() -> UInt8?
      public typealias Element = Swift.UInt8
    }
    public typealias Element = Swift.UInt8
  }
  @available(OSX 10.15, iOS 13.0, *)
  public struct ByteCollection : RandomAccessCollection {
    public typealias Element = UInt8
    public typealias Index = Int
    public typealias Indices = Range<Int>
    public init(_ p: UnsafePointer<MIDIPacket>)
    public init?(_ p: UnsafePointer<MIDIPacket>?)
    public var count: Int {
      get
    }
    public var startIndex: Int {
      get
    }
    public var endIndex: Int {
      get
    }
    public subscript(index: Index) -> Element {
      get
    }
    public typealias SubSequence = Swift.Slice<CoreMIDI.MIDIPacket.ByteCollection>
    public typealias Iterator = Swift.IndexingIterator<CoreMIDI.MIDIPacket.ByteCollection>
  }
}
@available(OSX 10.15, iOS 13.0, *)
extension UnsafeMutableMIDIPacketPointer : Sequence {
  @available(OSX 10.15, iOS 13.0, *)
  public func makeIterator() -> MIDIPacket.ByteSequence.Iterator
}
extension UnsafePointer where Pointee == CoreMIDI.MIDIPacket {
  @available(OSX 10.15, iOS 13.0, *)
  public func sequence() -> MIDIPacket.ByteSequence
  @available(OSX 10.15, iOS 13.0, *)
  public func bytes() -> MIDIPacket.ByteCollection
}
extension MIDIPacket {
  @available(OSX 10.15, iOS 13.0, *)
  public class Builder {
    public var capacity: Int {
      get
      }
    public init(maximumNumberMIDIBytes: Int)
    @objc deinit
    public var count: Int {
      get
    }
    public var timeStamp: Int {
      get
      set(newValue)
    }
    public func append(_ midiBytes: UInt8...)
    public func withUnsafePointer<Result>(_ body: (UnsafePointer<MIDIPacket>) -> Result) -> Result
    public func withUnsafeMutableMIDIPacketPointer<Result>(_ body: (inout UnsafeMutableMIDIPacketPointer) -> Result) -> Result
  }
}
extension UnsafePointer where Pointee == CoreMIDI.MIDIPacketList {
  @available(OSX 10.15, iOS 13.0, *)
  public func unsafeSequence() -> MIDIPacketList.UnsafeSequence
}
extension MIDIPacketList {
  @available(OSX 10.15, iOS 13.0, *)
  public static func sizeInBytes(pktList: UnsafePointer<MIDIPacketList>) -> Int
  @available(OSX 10.15, iOS 13.0, *)
  public struct UnsafeSequence : Sequence {
    public func makeIterator() -> MIDIPacketList.UnsafeSequence.Iterator
    public var count: Int {
      get
    }
    public struct Iterator : IteratorProtocol {
      public init(_ s: MIDIPacketList.UnsafeSequence)
      mutating public func next() -> UnsafePointer<MIDIPacket>?
      public typealias Element = Swift.UnsafePointer<CoreMIDI.MIDIPacket>
    }
    public typealias Element = Swift.UnsafePointer<CoreMIDI.MIDIPacket>
  }
}
@available(OSX 10.15, iOS 13.0, *)
public struct UnsafeMutableMIDIPacketListPointer : Sequence {
  public var listSizeInBytes: Int {
    get
    }
  public var lastPacket: UnsafeMutablePointer<MIDIPacket>? {
    get
    }
  public init(_ p: UnsafeMutablePointer<MIDIPacketList>, byteSize: Int)
  public init?(_ p: UnsafeMutablePointer<MIDIPacketList>?, byteSize: Int)
  public var count: Int {
    get
  }
  mutating public func clear()
  @discardableResult
  mutating public func append(timestamp: MIDITimeStamp, data: [UInt8]) -> UnsafePointer<MIDIPacket>?
  public func makeIterator() -> MIDIPacketList.UnsafeSequence.Iterator
  public typealias Element = Swift.UnsafePointer<CoreMIDI.MIDIPacket>
  public typealias Iterator = CoreMIDI.MIDIPacketList.UnsafeSequence.Iterator
}
extension MIDIPacketList {
  @available(OSX 10.15, iOS 13.0, *)
  public class Builder {
    public init(byteSize: Int)
    @objc deinit
    @discardableResult
    public func append(timestamp: MIDITimeStamp, data: [UInt8]) -> UnsafePointer<MIDIPacket>?
    public func clear()
    public var count: Int {
      get
    }
    public func withUnsafePointer<Result>(_ body: (UnsafePointer<MIDIPacketList>) -> Result) -> Result
    public func withUnsafeMutableMIDIPacketListPointer<Result>(_ body: (inout UnsafeMutableMIDIPacketListPointer) -> Result) -> Result
  }
}
