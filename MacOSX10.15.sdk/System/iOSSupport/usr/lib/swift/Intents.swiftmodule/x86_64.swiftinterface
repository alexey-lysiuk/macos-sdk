// swift-interface-format-version: 1.0
// swift-tools-version: Apple Swift version 5.1 effective-4.1.50 (swiftlang-1100.8.32.26 clang-1100.0.18.2)
// swift-module-flags: -target x86_64-apple-ios13.0-macabi -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftIntents -swift-version 4 -O -enforce-exclusivity=unchecked -module-name Intents
import Foundation
@_exported import Intents
import Swift
@available(iOS 10.0, watchOS 3.2, *)
extension INBooleanResolutionResult {
  @nonobjc public static func confirmationRequired(with valueToConfirm: Bool?) -> Self
}
@available(iOS 11.0, watchOS 4.0, *)
extension INCallRecord {
  @available(iOS 13.0, watchOS 6.0, *)
  @nonobjc convenience public init(identifier: String, dateCreated: Date? = nil, caller: INPerson? = nil, callRecordType: INCallRecordType = .unknown, callCapability: INCallCapability = .unknown, callDuration: Double? = nil, unseen: Bool? = nil, numberOfCalls: Int? = nil)
  @available(iOS, obsoleted: 13.0)
  @available(watchOS, obsoleted: 6.0)
  @nonobjc convenience public init(identifier: String, dateCreated: Date? = nil, caller: INPerson? = nil, callRecordType: INCallRecordType, callCapability: INCallCapability, callDuration: Double? = nil, unseen: Bool? = nil)
  @nonobjc final public var callDuration: Double? {
    get
  }
  @nonobjc final public var unseen: Bool? {
    get
  }
  @available(iOS 13.0, watchOS 6.0, *)
  @nonobjc final public var numberOfCalls: Int? {
    get
  }
}
@available(iOS 10.0, watchOS 3.2, *)
extension INDoubleResolutionResult {
  @nonobjc public static func confirmationRequired(with valueToConfirm: Double?) -> Self
}
@available(iOS 10.3, watchOS 3.2, *)
extension INGetCarLockStatusIntentResponse {
  @nonobjc final public var locked: Bool? {
    get
    set(newLocked)
  }
}
@available(iOS 10.3, watchOS 3.2, *)
extension INGetCarPowerLevelStatusIntentResponse {
  @nonobjc final public var fuelPercentRemaining: Float? {
    get
    set(newPercent)
  }
  @nonobjc final public var chargePercentRemaining: Float? {
    get
    set(newPercent)
  }
  @available(iOS 12.0, watchOS 5.0, *)
  @nonobjc final public var charging: Bool? {
    get
    set(newCharging)
  }
  @available(iOS 12.0, watchOS 5.0, *)
  @nonobjc final public var minutesToFull: Int? {
    get
    set(newMinutesToFull)
  }
}
@available(iOS 10.0, watchOS 3.2, *)
extension INIntegerResolutionResult {
  @nonobjc public static func confirmationRequired(with valueToConfirm: Int?) -> Self
}
public protocol _INIntentSetImageKeyPath {
}
extension _INIntentSetImageKeyPath {
  @available(iOS 12.0, watchOS 5.0, *)
  public func setImage<Value>(_ image: INImage?, forParameterNamed parameterName: KeyPath<Self, Value>)
  @available(iOS 12.0, watchOS 5.0, *)
  public func image<Value>(forParameterNamed parameterName: KeyPath<Self, Value>) -> INImage?
}
@available(iOS 10.0, watchOS 3.2, *)
extension INIntent : _INIntentSetImageKeyPath {
}
@available(iOS 11.0, watchOS 4.0, *)
extension INNotebookItemTypeResolutionResult {
  @nonobjc public static func disambiguation(with notebookItemTypesToDisambiguate: [INNotebookItemType]) -> Self
}
@available(iOS 13.0, watchOS 6.0, *)
public enum INMediaDestination : ReferenceConvertible {
  public typealias ReferenceType = INMediaDestinationReference
  case library
  case playlist(String)
}
@available(iOS 13.0, watchOS 6.0, *)
extension INMediaDestination {
  public var playlistName: String? {
    get
  }
}
@available(iOS 13.0, watchOS 6.0, *)
extension INMediaDestination : CustomStringConvertible {
  public var description: String {
    get
  }
}
@available(iOS 13.0, watchOS 6.0, *)
extension INMediaDestination : CustomDebugStringConvertible {
  public var debugDescription: String {
    get
  }
}
@available(iOS 13.0, watchOS 6.0, *)
extension INMediaDestination : Hashable {
  public func hash(into hasher: inout Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, watchOS 6.0, *)
extension INMediaDestination : Equatable {
  public static func == (a: Intents.INMediaDestination, b: Intents.INMediaDestination) -> Swift.Bool
}
@available(iOS 13.0, watchOS 6.0, *)
extension INMediaDestination : _ObjectiveCBridgeable {
  @_semantics("convertToObjectiveC") public func _bridgeToObjectiveC() -> INMediaDestinationReference
  public static func _forceBridgeFromObjectiveC(_ source: INMediaDestinationReference, result: inout INMediaDestination?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: INMediaDestinationReference, result: inout INMediaDestination?) -> Bool
  @_effects(readonly) public static func _unconditionallyBridgeFromObjectiveC(_ source: INMediaDestinationReference?) -> INMediaDestination
  public typealias _ObjectiveCType = Intents.INMediaDestinationReference
}
@available(iOS 13.0, watchOS 6.0, *)
extension INMediaSearch {
  @nonobjc convenience public init(mediaType: INMediaItemType = .unknown, sortOrder: INMediaSortOrder = .unknown, mediaName: String? = nil, artistName: String? = nil, albumName: String? = nil, genreNames: [String]? = nil, moodNames: [String]? = nil, activityNames: [String]? = nil, releaseDate: INDateComponentsRange? = nil, reference: INMediaReference = .unknown, mediaIdentifier: String? = nil)
}
@available(iOS 11.0, *)
extension INParameter {
  @nonobjc convenience public init?<Root, Value>(keyPath: KeyPath<Root, Value>)
}
@available(iOS 12.0, watchOS 5.0, *)
extension INPlayMediaIntent {
  @available(iOS, introduced: 12.0, obsoleted: 13.0)
  @available(watchOS, introduced: 5.0, obsoleted: 6.0)
  @nonobjc convenience public init(mediaItems: [INMediaItem]? = nil, mediaContainer: INMediaItem? = nil, playShuffled: Bool? = nil, playbackRepeatMode: INPlaybackRepeatMode = .unknown, resumePlayback: Bool? = nil)
  @available(iOS 13.0, watchOS 6.0, *)
  @nonobjc convenience public init(mediaItems: [INMediaItem]? = nil, mediaContainer: INMediaItem? = nil, playShuffled: Bool? = nil, playbackRepeatMode: INPlaybackRepeatMode = .unknown, resumePlayback: Bool? = nil, playbackQueueLocation: INPlaybackQueueLocation = .unknown, playbackSpeed: Double? = nil, mediaSearch: INMediaSearch? = nil)
  @nonobjc final public var playShuffled: Bool? {
    get
  }
  @nonobjc final public var resumePlayback: Bool? {
    get
  }
  @available(iOS 13.0, watchOS 6.0, *)
  @nonobjc final public var playbackSpeed: Double? {
    get
  }
}
@available(iOS 10.0, watchOS 3.2, *)
extension INRequestRideIntent {
  @nonobjc convenience public init(pickupLocation: CLPlacemark? = nil, dropOffLocation: CLPlacemark? = nil, rideOptionName: INSpeakableString? = nil, partySize: Int? = nil, paymentMethod: INPaymentMethod? = nil, scheduledPickupTime: INDateComponentsRange? = nil)
  @nonobjc final public var partySize: Int? {
    get
  }
}
@available(iOS 10.0, watchOS 3.2, *)
extension INRideOption {
  @available(iOS 10.0, watchOS 3.2, *)
  @available(swift, obsoleted: 4)
  @nonobjc public var usesMeteredFare: NSNumber? {
    get
    set(newUsesMeteredFare)
  }
  @available(swift 4.0)
  @available(iOS 10.0, watchOS 3.2, *)
  @nonobjc public var usesMeteredFare: Bool? {
    get
    set(newUsesMeteredFare)
  }
}
@available(iOS 10.0, *)
extension INSaveProfileInCarIntent {
  @nonobjc convenience public init(profileNumber: Int? = nil, profileLabel: String? = nil)
  @nonobjc final public var profileNumber: Int? {
    get
  }
}
@available(iOS 10.0, watchOS 3.2, *)
extension INSearchCallHistoryIntent {
  @available(iOS 11.0, watchOS 4.0, *)
  @nonobjc convenience public init(dateCreated: INDateComponentsRange? = nil, recipient: INPerson? = nil, callCapabilities: INCallCapabilityOptions, callTypes: INCallRecordTypeOptions, unseen: Bool? = nil)
  @available(iOS 11.0, watchOS 4.0, *)
  @nonobjc final public var unseen: Bool? {
    get
  }
}
@available(iOS 10.0, watchOS 3.2, *)
extension INSearchForPhotosIntentResponse {
  @nonobjc final public var searchResultsCount: Int? {
    get
    set
  }
}
@available(iOS 10.3, watchOS 3.2, *)
extension INSetCarLockStatusIntent {
  @nonobjc convenience public init(locked: Bool?, carName: INSpeakableString?)
  @nonobjc final public var locked: Bool? {
    get
  }
}
@available(iOS 10.0, *)
extension INSetClimateSettingsInCarIntent {
  @available(iOS 12.0, *)
  @nonobjc convenience public init(enableFan: Bool? = nil, enableAirConditioner: Bool? = nil, enableClimateControl: Bool? = nil, enableAutoMode: Bool? = nil, airCirculationMode: INCarAirCirculationMode = .unknown, fanSpeedIndex: Int? = nil, fanSpeedPercentage: Double? = nil, relativeFanSpeedSetting: INRelativeSetting = .unknown, temperature: Measurement<UnitTemperature>? = nil, relativeTemperatureSetting: INRelativeSetting = .unknown, climateZone: INCarSeat = .unknown, carName: INSpeakableString? = nil)
  @available(iOS, obsoleted: 12.0)
  @nonobjc convenience public init(enableFan: Bool? = nil, enableAirConditioner: Bool? = nil, enableClimateControl: Bool? = nil, enableAutoMode: Bool? = nil, airCirculationMode: INCarAirCirculationMode = .unknown, fanSpeedIndex: Int? = nil, fanSpeedPercentage: Double? = nil, relativeFanSpeedSetting: INRelativeSetting = .unknown, temperature: Measurement<UnitTemperature>? = nil, relativeTemperatureSetting: INRelativeSetting = .unknown, climateZone: INCarSeat = .unknown)
  @nonobjc final public var enableFan: Bool? {
    get
  }
  @nonobjc final public var enableAirConditioner: Bool? {
    get
  }
  @nonobjc final public var enableClimateControl: Bool? {
    get
  }
  @nonobjc final public var enableAutoMode: Bool? {
    get
  }
  @nonobjc final public var fanSpeedIndex: Int? {
    get
  }
  @nonobjc final public var fanSpeedPercentage: Double? {
    get
  }
}
@available(iOS 10.0, *)
extension INSetDefrosterSettingsInCarIntent {
  @available(iOS 12.0, *)
  @nonobjc convenience public init(enable: Bool? = nil, defroster: INCarDefroster = .unknown, carName: INSpeakableString? = nil)
  @available(iOS, obsoleted: 12.0)
  @nonobjc convenience public init(enable: Bool? = nil, defroster: INCarDefroster = .unknown)
  @nonobjc final public var enable: Bool? {
    get
  }
}
@available(iOS 10.0, *)
@nonobjc extension INSetProfileInCarIntent {
  @available(iOS 12.0, *)
  convenience public init(profileNumber: Int? = nil, profileName: String? = nil, isDefaultProfile: Bool? = nil, carName: INSpeakableString? = nil)
  @available(iOS, introduced: 11.0, obsoleted: 12.0)
  convenience public init(profileNumber: Int? = nil, profileName: String? = nil, isDefaultProfile: Bool? = nil)
  @available(iOS, deprecated: 11.0, renamed: "init(profileNumber:profileName:isDefaultProfile:)")
  convenience public init(defaultProfile: Int?)
  @available(iOS, deprecated: 11.0, renamed: "init(profileNumber:profileName:isDefaultProfile:)")
  convenience public init(profileLabel: String?)
  @available(iOS, deprecated: 11.0, renamed: "init(profileNumber:profileName:isDefaultProfile:)")
  convenience public init(profileLabel: String?, defaultProfile: Int?)
  @available(iOS, deprecated: 11.0, renamed: "init(profileNumber:profileName:isDefaultProfile:)")
  convenience public init(profileLabel: String?, isDefaultProfile: Bool?)
  @available(iOS, deprecated: 11.0, renamed: "init(profileNumber:profileName:isDefaultProfile:)")
  convenience public init(profileName: String?, defaultProfile: Int?)
  @available(iOS, deprecated: 11.0, renamed: "init(profileNumber:profileName:isDefaultProfile:)")
  convenience public init(profileNumber: Int?, defaultProfile: Int?)
  @available(iOS, deprecated: 11.0, renamed: "init(profileNumber:profileName:isDefaultProfile:)")
  convenience public init(profileNumber: Int?, profileLabel: String?)
  @available(iOS, deprecated: 11.0, renamed: "init(profileNumber:profileName:isDefaultProfile:)")
  convenience public init(profileNumber: Int?, profileLabel: String?, defaultProfile: Int?)
  @available(iOS, deprecated: 11.0, renamed: "init(profileNumber:profileName:isDefaultProfile:)")
  convenience public init(profileNumber: Int?, profileLabel: String?, isDefaultProfile: Bool?)
  @available(iOS, deprecated: 11.0, renamed: "init(profileNumber:profileName:isDefaultProfile:)")
  convenience public init(profileNumber: Int?, profileName: String?, defaultProfile: Int?)
  @available(iOS 10.0, *)
  public var isDefaultProfile: Bool? {
    get
  }
  @available(swift, deprecated: 3.2, obsoleted: 4.0, message: "Please use isDefaultProfile instead")
  public var defaultProfile: Int? {
    get
  }
  @available(iOS 10.0, *)
  final public var profileNumber: Int? {
    get
  }
}
@available(iOS 10.0, *)
extension INSetRadioStationIntent {
  @nonobjc convenience public init(radioType: INRadioType = .unknown, frequency: Double? = nil, stationName: String? = nil, channel: String? = nil, presetNumber: Int? = nil)
  @nonobjc final public var frequency: Double? {
    get
  }
  @nonobjc final public var presetNumber: Int? {
    get
  }
}
@available(iOS 10.0, *)
extension INSetSeatSettingsInCarIntent {
  @available(iOS 12.0, *)
  @nonobjc convenience public init(enableHeating: Bool? = nil, enableCooling: Bool? = nil, enableMassage: Bool? = nil, seat: INCarSeat = .unknown, level: Int? = nil, relativeLevel: INRelativeSetting = .unknown, carName: INSpeakableString? = nil)
  @available(iOS, obsoleted: 12.0)
  @nonobjc convenience public init(enableHeating: Bool? = nil, enableCooling: Bool? = nil, enableMassage: Bool? = nil, seat: INCarSeat = .unknown, level: Int? = nil, relativeLevel: INRelativeSetting = .unknown)
  @nonobjc final public var enableHeating: Bool? {
    get
  }
  @nonobjc final public var enableCooling: Bool? {
    get
  }
  @nonobjc final public var enableMassage: Bool? {
    get
  }
  @nonobjc final public var level: Int? {
    get
  }
}
@available(iOS 12.0, watchOS 5.0, *)
public enum INShortcut : ReferenceConvertible {
  public typealias ReferenceType = INShortcutReference
  case intent(INIntent)
  case userActivity(NSUserActivity)
}
@available(iOS 12.0, watchOS 5.0, *)
extension INShortcut {
  public init?(intent: INIntent)
  public init(userActivity: NSUserActivity)
}
@available(iOS 12.0, watchOS 5.0, *)
extension INShortcut {
  public var intent: INIntent? {
    get
  }
  public var userActivity: NSUserActivity? {
    get
  }
}
@available(iOS 12.0, watchOS 5.0, *)
extension INShortcut : CustomStringConvertible {
  public var description: String {
    get
  }
}
@available(iOS 12.0, watchOS 5.0, *)
extension INShortcut : CustomDebugStringConvertible {
  public var debugDescription: String {
    get
  }
}
@available(iOS 12.0, watchOS 5.0, *)
extension INShortcut : Hashable {
  public func hash(into hasher: inout Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 12.0, watchOS 5.0, *)
extension INShortcut : Equatable {
  public static func == (a: Intents.INShortcut, b: Intents.INShortcut) -> Swift.Bool
}
@available(iOS 12.0, watchOS 5.0, *)
extension INShortcut : _ObjectiveCBridgeable {
  @_semantics("convertToObjectiveC") public func _bridgeToObjectiveC() -> INShortcutReference
  public static func _forceBridgeFromObjectiveC(_ source: INShortcutReference, result: inout INShortcut?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: INShortcutReference, result: inout INShortcut?) -> Bool
  @_effects(readonly) public static func _unconditionallyBridgeFromObjectiveC(_ source: INShortcutReference?) -> INShortcut
  public typealias _ObjectiveCType = Intents.INShortcutReference
}
@available(iOS 10.0, watchOS 3.2, *)
extension INStartPhotoPlaybackIntentResponse {
  @nonobjc final public var searchResultsCount: Int? {
    get
    set
  }
}
@available(iOS 10.0, watchOS 3.2, *)
extension INStartWorkoutIntent {
  @nonobjc convenience public init(workoutName: INSpeakableString? = nil, goalValue: Double? = nil, workoutGoalUnitType: INWorkoutGoalUnitType = .unknown, workoutLocationType: INWorkoutLocationType = .unknown, isOpenEnded: Bool? = nil)
  @nonobjc final public var goalValue: Double? {
    get
  }
  @nonobjc final public var isOpenEnded: Bool? {
    get
  }
}
@available(iOS 13.0, watchOS 6.0, *)
extension INDeleteTasksIntent {
  @nonobjc convenience public init(taskList: INTaskList? = nil, tasks: [INTask]? = nil, all: Bool? = nil)
  @nonobjc final public var all: Bool? {
    get
  }
}
@available(iOS 13.0, watchOS 6.0, *)
extension INSnoozeTasksIntent {
  @nonobjc convenience public init(tasks: [INTask]? = nil, nextTriggerTime: INDateComponentsRange? = nil, all: Bool? = nil)
  @nonobjc final public var all: Bool? {
    get
  }
}
@available(iOS 13.0, watchOS 6.0, *)
extension INLodgingReservation {
  @nonobjc convenience public init(itemReference: INSpeakableString? = nil, reservationNumber: String? = nil, bookingTime: Date? = nil, reservationStatus: INReservationStatus = .unknown, reservationHolderName: String? = nil, actions: [INReservationAction]? = nil, lodgingBusinessLocation: CLPlacemark? = nil, reservationDuration: INDateComponentsRange? = nil, numberOfAdults: Int? = nil, numberOfChildren: Int? = nil)
  @nonobjc final public var numberOfAdults: Int? {
    get
  }
  @nonobjc final public var numberOfChildren: Int? {
    get
  }
}
@available(iOS 13.0, watchOS 6.0, *)
extension INRestaurantReservation {
  @nonobjc convenience public init(itemReference: INSpeakableString? = nil, reservationNumber: String? = nil, bookingTime: Date? = nil, reservationStatus: INReservationStatus = .unknown, reservationHolderName: String? = nil, actions: [INReservationAction]? = nil, reservationDuration: INDateComponentsRange? = nil, partySize: Int? = nil, restaurantLocation: CLPlacemark? = nil)
  @nonobjc final public var partySize: Int? {
    get
  }
}
extension NSString {
  @available(OSX 10.14, iOS 12.0, watchOS 5.0, *)
  public class func deferredLocalizedIntentsString(with format: String, _ args: CVarArg...) -> NSString
  @available(OSX 10.14, iOS 12.0, watchOS 5.0, *)
  public class func deferredLocalizedIntentsString(with format: String, table: String, _ args: CVarArg...) -> NSString
  @available(OSX 10.14, iOS 12.0, watchOS 5.0, *)
  public class func deferredLocalizedIntentsString(with format: String, table: String, arguments: CVaListPointer) -> NSString
}
@available(iOS 13.0, watchOS 6.0, *)
extension INMediaUserContext {
  @available(iOS 13.0, watchOS 6.0, *)
  @nonobjc final public var numberOfLibraryItems: Int? {
    get
    set
  }
}
