// swift-interface-format-version: 1.0
// swift-tools-version: Apple Swift version 5.1 effective-4.1.50 (swiftlang-1100.8.32.26 clang-1100.0.18.2)
// swift-module-flags: -target x86_64-apple-ios13.0-macabi -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftos -swift-version 4 -O -enforce-exclusivity=unchecked -module-name os
import Swift
import _SwiftOSOverlayShims
@_exported import os.log
@_exported import os
@_exported import os
@_exported import os
@_exported import os
@_exported import os.signpost
@available(OSX 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
public func os_log(_ type: OSLogType, dso: UnsafeRawPointer = #dsohandle, log: OSLog = .default, _ message: StaticString, _ args: CVarArg...)
@available(OSX 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
public func os_log(_ message: StaticString, dso: UnsafeRawPointer? = #dsohandle, log: OSLog = .default, type: OSLogType = .default, _ args: CVarArg...)
extension OSLogType {
  @available(OSX 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
  public static let `default`: os.OSLogType
  @available(OSX 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
  public static let info: os.OSLogType
  @available(OSX 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
  public static let debug: os.OSLogType
  @available(OSX 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
  public static let error: os.OSLogType
  @available(OSX 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
  public static let fault: os.OSLogType
}
extension OSLog {
  @available(OSX 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
  public static let disabled: os.OSLog
  @available(OSX 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
  public static let `default`: os.OSLog
  @available(OSX 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
  convenience public init(subsystem: String, category: String)
}
@available(*, unavailable, renamed: "OSLogType.default")
public var OS_LOG_TYPE_DEFAULT: OSLogType {
  get
}
@available(*, unavailable, renamed: "OSLogType.info")
public var OS_LOG_TYPE_INFO: OSLogType {
  get
}
@available(*, unavailable, renamed: "OSLogType.debug")
public var OS_LOG_TYPE_DEBUG: OSLogType {
  get
}
@available(*, unavailable, renamed: "OSLogType.error")
public var OS_LOG_TYPE_ERROR: OSLogType {
  get
}
@available(*, unavailable, renamed: "OSLogType.fault")
public var OS_LOG_TYPE_FAULT: OSLogType {
  get
}
@available(OSX 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
public func os_signpost(_ type: OSSignpostType, dso: UnsafeRawPointer = #dsohandle, log: OSLog, name: StaticString, signpostID: OSSignpostID = .exclusive)
@available(OSX 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
public func os_signpost(_ type: OSSignpostType, dso: UnsafeRawPointer = #dsohandle, log: OSLog, name: StaticString, signpostID: OSSignpostID = .exclusive, _ format: StaticString, _ arguments: CVarArg...)
@available(OSX 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
extension OSSignpostType {
  public static let event: os.OSSignpostType
  public static let begin: os.OSSignpostType
  public static let end: os.OSSignpostType
}
@available(OSX 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
public struct OSSignpostID {
  public let rawValue: os_signpost_id_t
  public static let exclusive: os.OSSignpostID
  public static let invalid: os.OSSignpostID
  public static let null: os.OSSignpostID
  public init(log: OSLog)
  public init(log: OSLog, object: AnyObject)
  public init(_ value: UInt64)
}
@available(OSX 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
extension OSSignpostID : Comparable {
  public static func < (a: OSSignpostID, b: OSSignpostID) -> Bool
  public static func == (a: OSSignpostID, b: OSSignpostID) -> Bool
}
@available(OSX 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
extension OSLog {
  public struct Category {
    public let rawValue: String
    public static let pointsOfInterest: os.OSLog.Category
  }
  convenience public init(subsystem: String, category: Category)
  public var signpostsEnabled: Bool {
    get
  }
}
@available(OSX 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
extension OSLog.Category {
  public static let dynamicTracing: os.OSLog.Category
  public static let dynamicStackTracing: os.OSLog.Category
}
