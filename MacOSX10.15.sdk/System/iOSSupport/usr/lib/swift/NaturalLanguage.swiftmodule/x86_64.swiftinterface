// swift-interface-format-version: 1.0
// swift-tools-version: Apple Swift version 5.1 effective-4.1.50 (swiftlang-1100.8.32.26 clang-1100.0.18.2)
// swift-module-flags: -target x86_64-apple-ios13.0-macabi -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftNaturalLanguage -swift-version 4 -O -enforce-exclusivity=unchecked -module-name NaturalLanguage
import Foundation
@_exported import NaturalLanguage
import Swift
@available(OSX 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
extension NLEmbedding {
  @nonobjc public func distance(between firstString: String, and secondString: String, distanceType: NLDistanceType = .cosine) -> NLDistance
  @nonobjc public func enumerateNeighbors(for string: String, maximumCount maxCount: Int, distanceType: NLDistanceType = .cosine, using block: (String, NLDistance) -> Bool)
  @nonobjc public func neighbors(for string: String, maximumCount maxCount: Int, distanceType: NLDistanceType = .cosine) -> [(String, NLDistance)]
  @nonobjc public func enumerateNeighbors(for vector: [Double], maximumCount maxCount: Int, distanceType: NLDistanceType = .cosine, using block: (String, NLDistance) -> Bool)
  @nonobjc public func neighbors(for vector: [Double], maximumCount maxCount: Int, distanceType: NLDistanceType = .cosine) -> [(String, NLDistance)]
  @nonobjc public func vector(for string: String) -> [Double]?
  @nonobjc public class func write(_ dictionary: [String : [Double]], language: NLLanguage?, revision: Int, to url: URL) throws
}
@available(OSX 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
extension NLLanguageRecognizer {
  @nonobjc public var languageHints: [NLLanguage : Double] {
    get
    set(newHints)
  }
  @nonobjc public func languageHypotheses(withMaximum maxHypotheses: Int) -> [NLLanguage : Double]
}
@available(OSX 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
extension NLTagger {
  @nonobjc public func tokenRange(at index: String.Index, unit: NLTokenUnit) -> Range<String.Index>
  @nonobjc public func tag(at index: String.Index, unit: NLTokenUnit, scheme: NLTagScheme) -> (NLTag?, Range<String.Index>)
  @nonobjc public func enumerateTags(in range: Range<String.Index>, unit: NLTokenUnit, scheme: NLTagScheme, options: NLTagger.Options = [], using block: (NLTag?, Range<String.Index>) -> Bool)
  @nonobjc public func tags(in range: Range<String.Index>, unit: NLTokenUnit, scheme: NLTagScheme, options: NLTagger.Options = []) -> [(NLTag?, Range<String.Index>)]
  @nonobjc public func setLanguage(_ language: NLLanguage, range: Range<String.Index>)
  @nonobjc public func setOrthography(_ orthography: NSOrthography, range: Range<String.Index>)
}
@available(OSX 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
extension NLTokenizer {
  @nonobjc public func tokenRange(at index: String.Index) -> Range<String.Index>
  @nonobjc public func enumerateTokens(in range: Range<String.Index>, using block: (Range<String.Index>, NLTokenizer.Attributes) -> Bool)
  @nonobjc public func tokens(for range: Range<String.Index>) -> [Range<String.Index>]
}
