// swift-interface-format-version: 1.0
// swift-tools-version: Apple Swift version 5.1 (swiftlang-1100.8.32.26 clang-1100.0.18.2)
// swift-module-flags: -target x86_64-apple-ios13.0-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Osize -module-name SwiftUI
import Combine
import CoreFoundation
import CoreGraphics
import CoreText
import Darwin
import Foundation
import Swift
@_exported import SwiftUI
import os.log
import os
import os.signpost
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ButtonGesture {
  public var action: () -> Void
  public var pressingAction: ((Bool) -> Void)?
  public init(action: @escaping () -> Void, pressing: ((Bool) -> Void)? = nil)
  public static func _makeGesture(gesture: _GraphValue<_ButtonGesture>, inputs: _GestureInputs) -> _GestureOutputs<Void>
  public typealias Value = ()
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func _buttonAction(_ action: @escaping () -> Void, pressing: ((Bool) -> Void)? = nil) -> _AutoResultView<Self>
}
@available(iOS 13.0, OSX 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol DatePickerStyle {
  associatedtype Body : SwiftUI.View
  func body(configuration: DatePicker<Label>) -> Body
  typealias Label = DatePickerStyleLabel
}
@available(iOS 13.0, OSX 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DatePickerStyleLabel : View {
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension DatePickerStyle {
  public typealias Member = StaticMember<Self>
}
@available(iOS 13.0, OSX 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  public func datePickerStyle<S>(_ style: S.Member) -> Modified<_DatePickerStyleModifier<S>> where S : SwiftUI.DatePickerStyle
}
@available(iOS 13.0, OSX 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _DatePickerStyleModifier<Style> : _MultiViewModifier, ViewModifier where Style : SwiftUI.DatePickerStyle {
  public typealias Body = Swift.Never
}
public enum __App {
}
extension __App {
  public static func run<V>(_ rootView: V) -> Never where V : SwiftUI.View
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _TestApp {
  public init()
  public func run() -> Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func _trait<V>(_ key: _ViewTraitKey<V>, _ value: V) -> Modified<_TraitWritingModifier<V>>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ViewTraitKey<Value> : Hashable {
  public static func == <T>(lhs: _ViewTraitKey<Value>, rhs: _ViewTraitKey<T>) -> Bool
  public func hash(into hasher: inout Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _TraitWritingModifier<Value> {
  public let key: _ViewTraitKey<Value>
  public let value: Value
  @inlinable public init(key: _ViewTraitKey<Value>, value: Value) {
        self.key = key
        self.value = value
    }
  public static func _makeView(modifier: _GraphValue<_TraitWritingModifier>, inputs: _ViewInputs, body: @escaping (_Graph, _ViewInputs) -> _ViewOutputs) -> _ViewOutputs
  public static func _makeViewList(modifier: _GraphValue<_TraitWritingModifier>, inputs: _ViewListInputs, body: @escaping (_Graph, _ViewListInputs) -> _ViewListOutputs) -> _ViewListOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct LongPressGesture {
  public var minimumDuration: Double
  public var maximumDistance: Length
  public init(minimumDuration: Double = 0.5, maximumDistance: Length = 10)
  public static func _makeGesture(gesture: _GraphValue<LongPressGesture>, inputs: _GestureInputs) -> _GestureOutputs<Bool>
  public typealias Value = Swift.Bool
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func longPressAction(minimumDuration: Double = 0.5, maximumDistance: Length = 10, _ action: @escaping () -> Void, pressing: ((Bool) -> Void)? = nil) -> _AutoResultView<Self>
}
extension Bool {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _BenchmarkHost {
  func _renderForTest(interval: Double)
  func _performScrollTest(startOffset: Length, iterations: Int, delta: Length, length: Length, completion: (() -> Void)?)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _Benchmark : SwiftUI._Test {
  func measure(host: _BenchmarkHost) -> [Double]
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _BenchmarkHost {
  public func _performScrollTest(startOffset: Length, iterations: Int, delta: Length, length: Length, completion: (() -> Void)?)
  public func measureAction(action: () -> Void) -> Double
  public func measureRender(interval: Double = 1.0 / 60.0) -> Double
  public func measureRenders(seconds: Double) -> [Double]
  public func measureRenders(duration: Double) -> [Double]
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _TestApp {
  public func runBenchmarks(_ benchmarks: [_Benchmark]) -> Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct EdgeInsets : Equatable {
  public var top: Length
  public var leading: Length
  public var bottom: Length
  public var trailing: Length
  public init(top: Length, leading: Length, bottom: Length, trailing: Length)
  public init()
  public static func == (a: SwiftUI.EdgeInsets, b: SwiftUI.EdgeInsets) -> Swift.Bool
}
extension EdgeInsets {
  @usableFromInline
  internal init(_all: Length)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension EdgeInsets : Animatable, _VectorMath {
  public typealias AnimatableData = AnimatablePair<Length, AnimatablePair<Length, AnimatablePair<Length, Length>>>
  public var animatableData: AnimatableData {
    @inlinable get {
            return .init(top, .init(leading, .init(bottom, trailing)))
        }
    @inlinable set {
            let top = newValue[].0
            let leading = newValue[].1[].0
            let (bottom, trailing) = newValue[].1[].1[]
            self = .init(
                top: top, leading: leading, bottom: bottom, trailing: trailing)
        }
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol GeometryEffect : SwiftUI.Animatable, SwiftUI._MultiViewModifier where Self.Body == Swift.Never {
  func effectValue(size: CGSize) -> ProjectionTransform
  static var _affectsLayout: Bool { get }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension GeometryEffect {
  public static var _affectsLayout: Bool {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension GeometryEffect {
  public static func _makeView(modifier: _GraphValue<Self>, inputs: _ViewInputs, body: @escaping (_Graph, _ViewInputs) -> _ViewOutputs) -> _ViewOutputs
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func itemProvider(_ action: Optional<() -> NSItemProvider?>) -> Modified<_TraitWritingModifier<Optional<() -> NSItemProvider?>>>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Toggle<Label> : __LegacyView where Label : SwiftUI.View {
  public init(isOn: Binding<Bool>, @SwiftUI.ViewBuilder label: () -> Label)
  public var body: _View {
    get
  }
  public typealias Body = SwiftUI._AutoViewWrapper
}
@_fixed_layout public struct _Velocity<Value> : Equatable where Value : Swift.Equatable {
  public var valuePerSecond: Value
  @inlinable public init(valuePerSecond: Value) {
        self.valuePerSecond = valuePerSecond
    }
  public static func == (a: SwiftUI._Velocity<Value>, b: SwiftUI._Velocity<Value>) -> Swift.Bool
}
extension _Velocity : Comparable where Value : Swift.Comparable {
  public static func < (lhs: _Velocity, rhs: _Velocity) -> Bool
}
extension _Velocity : Animatable where Value : SwiftUI.Animatable {
  public typealias AnimatableData = Value.AnimatableData
  public var animatableData: AnimatableData {
    @inlinable get { return valuePerSecond.animatableData }
    @inlinable set { valuePerSecond.animatableData = newValue }
  }
}
extension _Velocity : AdditiveArithmetic where Value : Swift.AdditiveArithmetic {
  @inlinable public init() {
        self.init(valuePerSecond: .zero)
    }
  @inlinable public static var zero: _Velocity {
    get {
        return .init(valuePerSecond: .zero)
    }
  }
  @inlinable public static func += (lhs: inout _Velocity, rhs: _Velocity) {
        lhs.valuePerSecond += rhs.valuePerSecond
    }
  @inlinable public static func -= (lhs: inout _Velocity, rhs: _Velocity) {
        lhs.valuePerSecond -= rhs.valuePerSecond
    }
  @inlinable public static func + (lhs: _Velocity, rhs: _Velocity) -> _Velocity {
        var r = lhs; r += rhs; return r
    }
  @inlinable public static func - (lhs: _Velocity, rhs: _Velocity) -> _Velocity {
        var r = lhs; r -= rhs; return r
    }
}
extension _Velocity : VectorArithmetic where Value : SwiftUI.VectorArithmetic {
  @inlinable mutating public func scale(by rhs: Double) {
        valuePerSecond.scale(by: rhs)
    }
  @inlinable public var magnitudeSquared: Double {
    get {
        return valuePerSecond.magnitudeSquared
    }
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension DynamicViewContent where Self.Data.Index : Swift.Hashable {
  public func onDelete(perform action: Optional<(IndexSet) -> Void>) -> Modified<_TraitWritingModifier<Optional<(IndexSet) -> Void>>>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func deleteDisabled(_ isDisabled: Bool) -> Modified<_TraitWritingModifier<Bool>>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _EnvironmentReaderView<Content> where Content : SwiftUI.View {
  public let content: (EnvironmentValues) -> Content
  @inlinable public init(_ content: @escaping (EnvironmentValues) -> Content) {
        self.content = content
    }
  public func body(environment: EnvironmentValues) -> Content
  public typealias Body = Swift.Never
}
@available(OSX 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _HoverRegionModifier : _MultiViewModifier {
  public static func _makeView(modifier: _GraphValue<_HoverRegionModifier>, inputs: _ViewInputs, body: @escaping (_Graph, _ViewInputs) -> _ViewOutputs) -> _ViewOutputs
  public typealias Body = Swift.Never
}
@available(OSX 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  public func onHover(perform action: @escaping (Bool) -> Void) -> Modified<_HoverRegionModifier>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Color : Hashable, CustomStringConvertible {
  public func hash(into hasher: inout Hasher)
  public static func == (lhs: Color, rhs: Color) -> Bool
  public var description: String {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Color {
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Animation {
  public static func fluidSpring(stiffness: Double = 100, dampingFraction: Double = 1, blendDuration: Double = 0, timestep: Double = 1.0 / 300.0, idleThreshold: Double = 0.5) -> Animation
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Image {
  public init(_ name: String, bundle: Bundle? = nil)
  public init(_ name: String, bundle: Bundle? = nil, label: Text)
  public init(decorative name: String, bundle: Bundle? = nil)
  public static var _mainNamedBundle: Bundle?
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol SelectionManager {
  associatedtype SelectionValue : Swift.Hashable
  mutating func select(_ value: SelectionValue)
  mutating func deselect(_ value: SelectionValue)
  func isSelected(_ value: SelectionValue) -> Bool
  var allowsMultipleSelection: Bool { get }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension SelectionManager {
  public var allowsMultipleSelection: Bool {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Set : SelectionManager {
  public typealias SelectionValue = Element
  mutating public func select(_ value: Element)
  mutating public func deselect(_ value: Element)
  public func isSelected(_ value: Element) -> Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Never : SelectionManager {
  public typealias SelectionValue = Never
  mutating public func select(_ value: Never)
  mutating public func deselect(_ value: Never)
  public func isSelected(_ value: Never) -> Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Optional : SelectionManager where Wrapped : Swift.Hashable {
  public typealias SelectionValue = Wrapped
  mutating public func select(_ value: Wrapped)
  mutating public func deselect(_ value: Wrapped)
  public func isSelected(_ value: Wrapped) -> Bool
  public var allowsMultipleSelection: Bool {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Text : Equatable {
  public init(verbatim content: String)
  @_disfavoredOverload public init<S>(_ content: S) where S : Swift.StringProtocol
  public init(_ key: LocalizedStringKey, tableName: String? = nil, bundle: Bundle? = nil, comment: StaticString? = nil)
  public func resolve(into result: inout _Resolved, in environment: EnvironmentValues)
  public static func == (a: SwiftUI.Text, b: SwiftUI.Text) -> Swift.Bool
}
public struct LocalizedStringKey : Equatable, ExpressibleByStringInterpolation {
  public init(_ value: String)
  public init(stringLiteral value: String)
  public init(stringInterpolation: StringInterpolation)
  public struct StringInterpolation : StringInterpolationProtocol {
    public init(literalCapacity: Int, interpolationCount: Int)
    mutating public func appendLiteral(_ literal: String)
    mutating public func appendInterpolation(_ string: String)
    mutating public func appendInterpolation<Subject>(_ subject: Subject, formatter: Formatter? = nil) where Subject : Foundation.ReferenceConvertible
    mutating public func appendInterpolation<Subject>(_ subject: Subject, formatter: Formatter? = nil) where Subject : ObjectiveC.NSObject
    mutating public func appendInterpolation<T>(_ value: T) where T : SwiftUI._FormatSpecifiable
    mutating public func appendInterpolation<T>(_ value: T, specifier: String) where T : SwiftUI._FormatSpecifiable
    public typealias StringLiteralType = Swift.String
  }
  public static func == (a: SwiftUI.LocalizedStringKey, b: SwiftUI.LocalizedStringKey) -> Swift.Bool
  public typealias StringLiteralType = Swift.String
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
public protocol _FormatSpecifiable : Swift.Equatable {
  associatedtype Arg : Swift.CVarArg
  var arg: Arg { get }
  var specifier: String { get }
}
extension Int : _FormatSpecifiable {
  public var arg: Int64 {
    get
  }
  public var specifier: String {
    get
  }
  public typealias Arg = Swift.Int64
}
extension Int8 : _FormatSpecifiable {
  public var arg: Int32 {
    get
  }
  public var specifier: String {
    get
  }
  public typealias Arg = Swift.Int32
}
extension Int16 : _FormatSpecifiable {
  public var arg: Int32 {
    get
  }
  public var specifier: String {
    get
  }
  public typealias Arg = Swift.Int32
}
extension Int32 : _FormatSpecifiable {
  public var arg: Int32 {
    get
  }
  public var specifier: String {
    get
  }
  public typealias Arg = Swift.Int32
}
extension Int64 : _FormatSpecifiable {
  public var arg: Int64 {
    get
  }
  public var specifier: String {
    get
  }
  public typealias Arg = Swift.Int64
}
extension UInt : _FormatSpecifiable {
  public var arg: UInt64 {
    get
  }
  public var specifier: String {
    get
  }
  public typealias Arg = Swift.UInt64
}
extension UInt8 : _FormatSpecifiable {
  public var arg: UInt32 {
    get
  }
  public var specifier: String {
    get
  }
  public typealias Arg = Swift.UInt32
}
extension UInt16 : _FormatSpecifiable {
  public var arg: UInt32 {
    get
  }
  public var specifier: String {
    get
  }
  public typealias Arg = Swift.UInt32
}
extension UInt32 : _FormatSpecifiable {
  public var arg: UInt32 {
    get
  }
  public var specifier: String {
    get
  }
  public typealias Arg = Swift.UInt32
}
extension UInt64 : _FormatSpecifiable {
  public var arg: UInt64 {
    get
  }
  public var specifier: String {
    get
  }
  public typealias Arg = Swift.UInt64
}
extension Float : _FormatSpecifiable {
  public var arg: Float {
    get
  }
  public var specifier: String {
    get
  }
  public typealias Arg = Swift.Float
}
extension Double : _FormatSpecifiable {
  public var arg: Double {
    get
  }
  public var specifier: String {
    get
  }
  public typealias Arg = Swift.Double
}
extension CGFloat : _FormatSpecifiable {
  public var arg: CGFloat {
    get
  }
  public var specifier: String {
    get
  }
  public typealias Arg = CoreGraphics.CGFloat
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Text {
  public static func + (lhs: Text, rhs: Text) -> Text
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension DynamicViewContent {
  public func onMove(perform action: Optional<(IndexSet, Int) -> Void>) -> Modified<_TraitWritingModifier<Optional<(IndexSet, Int) -> Void>>>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func moveDisabled(_ isDisabled: Bool) -> Modified<_TraitWritingModifier<Bool>>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct TrimmedShape<S> : Shape where S : SwiftUI.Shape {
  public var shape: S
  public var startFraction: CGFloat
  public var endFraction: CGFloat
  @inlinable public init(shape: S, startFraction: CGFloat = 0, endFraction: CGFloat = 1) {
        self.shape = shape
        self.startFraction = startFraction
        self.endFraction = endFraction
    }
  public func path(in rect: CGRect) -> Path
  public typealias AnimatableData = AnimatablePair<S.AnimatableData, AnimatablePair<CGFloat, CGFloat>>
  public var animatableData: AnimatableData {
    get
    set
  }
  public typealias Body = SwiftUI.ShapeView<SwiftUI.TrimmedShape<S>, SwiftUI.ForegroundStyle>
  public static func == (a: SwiftUI.TrimmedShape<S>, b: SwiftUI.TrimmedShape<S>) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Shape {
  @inlinable public func trim(from startFraction: CGFloat = 0, to endFraction: CGFloat = 1) -> TrimmedShape<Self> {
        return TrimmedShape(shape: self, startFraction: startFraction,
            endFraction: endFraction)
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Optional : Combine.Publisher where Wrapped : Combine.Publisher {
  public typealias Output = Wrapped.Output
  public typealias Failure = Wrapped.Failure
  public func receive<S>(subscriber: S) where S : Combine.Subscriber, Wrapped.Failure == S.Failure, Wrapped.Output == S.Input
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Font : Hashable {
  public func hash(into hasher: inout Hasher)
  public static func == (lhs: Font, rhs: Font) -> Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public enum ContentSizeCategory : Equatable, Hashable {
  case extraSmall
  case small
  case medium
  case large
  case extraLarge
  case extraExtraLarge
  case extraExtraExtraLarge
  case accessibilityMedium
  case accessibilityLarge
  case accessibilityExtraLarge
  case accessibilityExtraExtraLarge
  case accessibilityExtraExtraExtraLarge
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.ContentSizeCategory, b: SwiftUI.ContentSizeCategory) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension EnvironmentValues {
  public var sizeCategory: ContentSizeCategory {
    get
    set
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Never {
  public typealias Body = Never
  public var body: Never {
    get
  }
}
extension ClosedRange {
  @inlinable internal init(bounds a: Bound, _ b: Bound) {
        self = Swift.min(a, b)...Swift.max(a, b)
    }
}
public struct AccessibilityActionType : Equatable {
  public static let `default`: SwiftUI.AccessibilityActionType
  public static let escape: SwiftUI.AccessibilityActionType
  public static let magicTap: SwiftUI.AccessibilityActionType
  public init(named name: Text)
  public static func == (a: SwiftUI.AccessibilityActionType, b: SwiftUI.AccessibilityActionType) -> Swift.Bool
}
extension View {
  public func accessibilityAction(_ actionType: AccessibilityActionType = .default, _ handler: @escaping () -> Void) -> Modified<AccessibilityModifier>
  public func accessibilityAction(named name: Text, _ handler: @escaping () -> Void) -> Modified<AccessibilityModifier>
}
extension _ModifiedContent where Modifier == SwiftUI.AccessibilityModifier {
  public func accessibilityAction(_ actionType: AccessibilityActionType = .default, _ handler: @escaping () -> Void) -> _ModifiedContent
  public func accessibilityAction(named name: Text, _ handler: @escaping () -> Void) -> _ModifiedContent
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct ImagePaint {
  public var image: Image
  public var sourceRect: CGRect
  public var scale: Length
  public init(image: Image, sourceRect: CGRect = CGRect(x: 0, y: 0, width: 1, height: 1), scale: Length = 1)
}
extension WritableKeyPath {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct EmptyView {
  @inlinable public init() {}
  public static func _makeView(view: _GraphValue<EmptyView>, inputs: _ViewInputs) -> _ViewOutputs
  public static func _makeViewList(view: _GraphValue<EmptyView>, inputs: _ViewListInputs) -> _ViewListOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _DataViewProtocol : SwiftUI._UnaryView where Self.Body == Swift.Never {
  associatedtype Source : SwiftUI._DataSource
  func initDataSource() -> Source
  associatedtype DataBody : SwiftUI.View
  func body(data: Source.Data) -> DataBody
  func updateDataSource(_ dataSource: inout Source)
  func transactionForDataChange(oldData: Source.Data, newData: Source.Data) -> Transaction
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _DataViewProtocol {
  public func updateDataSource(_ dataSource: inout Source)
  public func transactionForDataChange(oldData: Source.Data, newData: Source.Data) -> Transaction
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _DataViewProtocol {
  public static func _makeView(view: _GraphValue<Self>, inputs: _ViewInputs) -> _ViewOutputs
  public var body: Never {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension StaticMember where Base : SwiftUI.ListStyle {
  public static var `default`: DefaultListStyle.Member {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct DefaultListStyle : ListStyle {
  public func _body<Selection>(configuration: _ListContainer<Selection>, children: _VariadicView.Children) -> _AutoResultView<DefaultListStyle> where Selection : SwiftUI.SelectionManager
  public typealias _Body = SwiftUI._AutoResultView<SwiftUI.DefaultListStyle>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public static func _makeView(view: _GraphValue<Self>, inputs: _ViewInputs) -> _ViewOutputs
  public static func _makeViewList(view: _GraphValue<Self>, inputs: _ViewListInputs) -> _ViewListOutputs
}
public protocol _AnimatableView : SwiftUI.Animatable, SwiftUI.View {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _AnimatableView {
  public static func _makeView(view: _GraphValue<Self>, inputs: _ViewInputs) -> _ViewOutputs
  public static func _makeViewList(view: _GraphValue<Self>, inputs: _ViewListInputs) -> _ViewListOutputs
}
public protocol Identifiable {
  associatedtype ID : Swift.Hashable
  var id: ID { get }
  associatedtype IdentifiedValue = Self
  var identifiedValue: IdentifiedValue { get }
}
extension Identifiable where Self == Self.IdentifiedValue {
  public var identifiedValue: Self {
    get
  }
}
extension Identifiable where Self : AnyObject {
  public var id: ObjectIdentifier {
    get
  }
}
extension Int : Identifiable {
  public var id: Int {
    get
  }
  public typealias ID = Swift.Int
  public typealias IdentifiedValue = Swift.Int
}
public struct IdentifierValuePair<ID, Value> : Identifiable where ID : Swift.Hashable {
  public let id: ID
  public let value: Value
  public init(id: ID, value: Value)
  public var identifiedValue: Value {
    get
  }
  public typealias IdentifiedValue = Value
}
extension Collection {
  public func identified<ID>(by getID: KeyPath<Element, ID>) -> IdentifierValuePairs<Self, ID> where ID : Swift.Hashable
}
public struct IdentifierValuePairs<Base, ID> : Collection where Base : Swift.Collection, ID : Swift.Hashable {
  public typealias Index = Base.Index
  public typealias Element = IdentifierValuePair<ID, Base.Element>
  public var startIndex: Index {
    get
  }
  public var endIndex: Index {
    get
  }
  public func index(after i: Index) -> Index
  public func formIndex(after i: inout Index)
  public subscript(position: Index) -> Element {
    get
  }
  public typealias Iterator = Swift.IndexingIterator<SwiftUI.IdentifierValuePairs<Base, ID>>
  public typealias SubSequence = Swift.Slice<SwiftUI.IdentifierValuePairs<Base, ID>>
  public typealias Indices = Swift.DefaultIndices<SwiftUI.IdentifierValuePairs<Base, ID>>
}
extension IdentifierValuePairs : BidirectionalCollection where Base : Swift.BidirectionalCollection {
  public func index(before i: Index) -> Index
  public func formIndex(before i: inout Index)
}
extension IdentifierValuePairs : RandomAccessCollection where Base : Swift.RandomAccessCollection {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct SubscriptionView<PublisherType, Content> : _UnaryView where PublisherType : Combine.Publisher, Content : SwiftUI.View, PublisherType.Failure == Swift.Never {
  public static func _makeView(view: _GraphValue<SubscriptionView>, inputs: _ViewInputs) -> _ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func onReceive<P>(_ publisher: P, perform action: @escaping (P.Output) -> Void) -> SubscriptionView<P, Self> where P : Combine.Publisher, P.Failure == Swift.Never
  public func onReceive<P>(_ publisher: P, perform action: @escaping () -> Void) -> SubscriptionView<P, Self> where P : Combine.Publisher, P.Failure == Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ViewTest {
  public typealias Touch = (location: CGPoint, globalLocation: CGPoint?, timestamp: Date)
  public func sendTouchSequence(_ touches: [Touch])
  public func measureTouchSequence(host: _BenchmarkHost, _ touches: [Touch]) -> [Double]
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Gesture {
  @inlinable public func sequenced<Other>(before other: Other) -> SequenceGesture<Self, Other> where Other : SwiftUI.Gesture {
        return SequenceGesture(self, other)
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct SequenceGesture<First, Second> where First : SwiftUI.Gesture, Second : SwiftUI.Gesture {
  @_frozen public enum Value {
    case first(First.Value)
    case second(First.Value, Second.Value?)
  }
  public var first: First
  public var second: Second
  @inlinable public init(_ first: First, _ second: Second) {
        (self.first, self.second) = (first, second)
    }
  public static func _makeGesture(gesture: _GraphValue<SequenceGesture>, inputs: _GestureInputs) -> _GestureOutputs<Value>
  public typealias Body = Swift.Never
}
extension SequenceGesture.Value : Equatable where First.Value : Swift.Equatable, Second.Value : Swift.Equatable {
  public static func == (a: SwiftUI.SequenceGesture<First, Second>.Value, b: SwiftUI.SequenceGesture<First, Second>.Value) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct OffsetShape<S> : Shape where S : SwiftUI.Shape {
  public var shape: S
  public var offset: CGSize
  @inlinable public init(shape: S, offset: CGSize) {
        self.shape = shape
        self.offset = offset
    }
  public func path(in rect: CGRect) -> Path
  public typealias AnimatableData = AnimatablePair<S.AnimatableData, CGSize.AnimatableData>
  public var animatableData: AnimatableData {
    get
    set
  }
  public typealias Body = SwiftUI.ShapeView<SwiftUI.OffsetShape<S>, SwiftUI.ForegroundStyle>
  public static func == (a: SwiftUI.OffsetShape<S>, b: SwiftUI.OffsetShape<S>) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct ScaledShape<S> : Shape where S : SwiftUI.Shape {
  public var shape: S
  public var scale: CGSize
  public var anchor: UnitPoint
  @inlinable public init(shape: S, scale: CGSize, anchor: UnitPoint = .center) {
        self.shape = shape
        self.scale = scale
        self.anchor = anchor
    }
  public func path(in rect: CGRect) -> Path
  public typealias AnimatableData = AnimatablePair<S.AnimatableData, AnimatablePair<CGSize.AnimatableData, UnitPoint.AnimatableData>>
  public var animatableData: AnimatableData {
    get
    set
  }
  public typealias Body = SwiftUI.ShapeView<SwiftUI.ScaledShape<S>, SwiftUI.ForegroundStyle>
  public static func == (a: SwiftUI.ScaledShape<S>, b: SwiftUI.ScaledShape<S>) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct RotatedShape<S> : Shape where S : SwiftUI.Shape {
  public var shape: S
  public var angle: Angle
  public var anchor: UnitPoint
  @inlinable public init(shape: S, angle: Angle, anchor: UnitPoint = .center) {
        self.shape = shape
        self.angle = angle
        self.anchor = anchor
    }
  public func path(in rect: CGRect) -> Path
  public typealias AnimatableData = AnimatablePair<S.AnimatableData, AnimatablePair<Angle.AnimatableData, UnitPoint.AnimatableData>>
  public var animatableData: AnimatableData {
    get
    set
  }
  public typealias Body = SwiftUI.ShapeView<SwiftUI.RotatedShape<S>, SwiftUI.ForegroundStyle>
  public static func == (a: SwiftUI.RotatedShape<S>, b: SwiftUI.RotatedShape<S>) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct TransformedShape<S> : Shape where S : SwiftUI.Shape {
  public var shape: S
  public var transform: CGAffineTransform
  @inlinable public init(shape: S, transform: CGAffineTransform) {
        self.shape = shape
        self.transform = transform
    }
  public func path(in rect: CGRect) -> Path
  public typealias AnimatableData = S.AnimatableData
  public var animatableData: AnimatableData {
    get
    set
  }
  public typealias Body = SwiftUI.ShapeView<SwiftUI.TransformedShape<S>, SwiftUI.ForegroundStyle>
  public static func == (a: SwiftUI.TransformedShape<S>, b: SwiftUI.TransformedShape<S>) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Shape {
  @inlinable public func offset(_ offset: CGSize) -> OffsetShape<Self> {
        return OffsetShape(shape: self, offset: offset)
    }
  @inlinable public func offset(_ offset: CGPoint) -> OffsetShape<Self> {
        return OffsetShape(
            shape: self, offset: CGSize(width: offset.x, height: offset.y))
    }
  @inlinable public func offset(x: Length = 0, y: Length = 0) -> OffsetShape<Self> {
        return OffsetShape(shape: self, offset: .init(width: x, height: y))
    }
  @inlinable public func scale(x: CGFloat = 1, y: CGFloat = 1, anchor: UnitPoint = .center) -> ScaledShape<Self> {
        return ScaledShape(shape: self,
            scale: CGSize(width: x, height: y), anchor: anchor)
    }
  @inlinable public func scale(_ scale: CGFloat, anchor: UnitPoint = .center) -> ScaledShape<Self> {
        return self.scale(x: scale, y: scale, anchor: anchor)
    }
  @inlinable public func rotation(_ angle: Angle, anchor: UnitPoint = .center) -> RotatedShape<Self> {
        return RotatedShape(shape: self, angle: angle, anchor: anchor)
    }
  @inlinable public func transform(_ transform: CGAffineTransform) -> TransformedShape<Self> {
        return TransformedShape(shape: self, transform: transform)
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct Rectangle : Shape {
  public func path(in rect: CGRect) -> Path
  @inlinable public init() {}
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = SwiftUI.ShapeView<SwiftUI.Rectangle, SwiftUI.ForegroundStyle>
  public static func == (a: SwiftUI.Rectangle, b: SwiftUI.Rectangle) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct RoundedRectangle : Shape {
  public var cornerSize: CGSize
  public var style: RoundedCornerStyle
  @inlinable public init(cornerSize: CGSize, style: RoundedCornerStyle = .circular) {
        self.cornerSize = cornerSize
        self.style = style
    }
  @inlinable public init(cornerRadius: Length, style: RoundedCornerStyle = .circular) {
        let cornerSize = CGSize(width: cornerRadius, height: cornerRadius)
        self.init(cornerSize: cornerSize, style: style)
    }
  public func path(in rect: CGRect) -> Path
  public var animatableData: CGSize.AnimatableData {
    get
    set
  }
  public typealias AnimatableData = CoreGraphics.CGSize.AnimatableData
  public typealias Body = SwiftUI.ShapeView<SwiftUI.RoundedRectangle, SwiftUI.ForegroundStyle>
  public static func == (a: SwiftUI.RoundedRectangle, b: SwiftUI.RoundedRectangle) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct Capsule : Shape {
  public var style: RoundedCornerStyle
  @inlinable public init(style: RoundedCornerStyle = .circular) {
        self.style = style
    }
  public func path(in r: CGRect) -> Path
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = SwiftUI.ShapeView<SwiftUI.Capsule, SwiftUI.ForegroundStyle>
  public static func == (a: SwiftUI.Capsule, b: SwiftUI.Capsule) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct Ellipse : Shape {
  public func path(in rect: CGRect) -> Path
  @inlinable public init() {}
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = SwiftUI.ShapeView<SwiftUI.Ellipse, SwiftUI.ForegroundStyle>
  public static func == (a: SwiftUI.Ellipse, b: SwiftUI.Ellipse) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct Circle : Shape {
  public func path(in rect: CGRect) -> Path
  @inlinable public init() {}
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = SwiftUI.ShapeView<SwiftUI.Circle, SwiftUI.ForegroundStyle>
  public static func == (a: SwiftUI.Circle, b: SwiftUI.Circle) -> Swift.Bool
}
extension _UIHostingView {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol ViewModifier {
  static func _makeView(modifier: _GraphValue<Self>, inputs: _ViewInputs, body: @escaping (_Graph, _ViewInputs) -> _ViewOutputs) -> _ViewOutputs
  static func _makeViewList(modifier: _GraphValue<Self>, inputs: _ViewListInputs, body: @escaping (_Graph, _ViewListInputs) -> _ViewListOutputs) -> _ViewListOutputs
  associatedtype Body : SwiftUI.View
  func body(content: Content) -> Body
  typealias Content = _ViewModifier_Content<Self>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewModifier where Self.Body == Swift.Never {
  public func body(content: Content) -> Body
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _UnaryViewModifier : SwiftUI.ViewModifier {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _UnaryViewModifier {
  public static func _makeViewList(modifier: _GraphValue<Self>, inputs: _ViewListInputs, body: @escaping (_Graph, _ViewListInputs) -> _ViewListOutputs) -> _ViewListOutputs
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _MultiViewModifier : SwiftUI.ViewModifier {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _MultiViewModifier {
  public static func _makeViewList(modifier: _GraphValue<Self>, inputs: _ViewListInputs, body: @escaping (_Graph, _ViewListInputs) -> _ViewListOutputs) -> _ViewListOutputs
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _ViewInputsModifier : SwiftUI.ViewModifier where Self.Body == Swift.Never {
  static func _makeViewInputs(modifier: _GraphValue<Self>, inputs: inout _ViewInputs)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ViewInputsModifier {
  public static func _makeView(modifier: _GraphValue<Self>, inputs: _ViewInputs, body: @escaping (_Graph, _ViewInputs) -> _ViewOutputs) -> _ViewOutputs
  public static func _makeViewList(modifier: _GraphValue<Self>, inputs: _ViewListInputs, body: @escaping (_Graph, _ViewListInputs) -> _ViewListOutputs) -> _ViewListOutputs
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct EmptyModifier {
  public static let identity: SwiftUI.EmptyModifier
  @inlinable public init() {}
  public static func _makeView(modifier: _GraphValue<EmptyModifier>, inputs: _ViewInputs, body: @escaping (_Graph, _ViewInputs) -> _ViewOutputs) -> _ViewOutputs
  public static func _makeViewList(modifier: _GraphValue<EmptyModifier>, inputs: _ViewListInputs, body: @escaping (_Graph, _ViewListInputs) -> _ViewListOutputs) -> _ViewListOutputs
  public func body(content: Content) -> Never
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public typealias Modified<T> = _ModifiedContent<Self, T> where T : SwiftUI.ViewModifier
  @inlinable public func modifier<T>(_ modifier: T) -> Modified<T> where T : SwiftUI.ViewModifier {
        return .init(content: self, modifier: modifier)
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _ModifiedContent<Content, Modifier> {
  public var content: Content
  public var modifier: Modifier
  @inlinable public init(content: Content, modifier: Modifier) {
        self.content = content
        self.modifier = modifier
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ModifiedContent : Equatable where Content : Swift.Equatable, Modifier : Swift.Equatable {
  public static func == (a: SwiftUI._ModifiedContent<Content, Modifier>, b: SwiftUI._ModifiedContent<Content, Modifier>) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ModifiedContent : _View where Content : SwiftUI.View, Modifier : SwiftUI.ViewModifier {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ModifiedContent : View where Content : SwiftUI.View, Modifier : SwiftUI.ViewModifier {
  public typealias Body = Never
  public static func _makeView(view: _GraphValue<_ModifiedContent>, inputs: _ViewInputs) -> _ViewOutputs
  public static func _makeViewList(view: _GraphValue<_ModifiedContent>, inputs: _ViewListInputs) -> _ViewListOutputs
  public var body: Body {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ModifiedContent : ViewModifier where Content : SwiftUI.ViewModifier, Modifier : SwiftUI.ViewModifier {
  public static func _makeView(modifier: _GraphValue<_ModifiedContent>, inputs: _ViewInputs, body: @escaping (_Graph, _ViewInputs) -> _ViewOutputs) -> _ViewOutputs
  public static func _makeViewList(modifier: _GraphValue<_ModifiedContent>, inputs: _ViewListInputs, body: @escaping (_Graph, _ViewListInputs) -> _ViewListOutputs) -> _ViewListOutputs
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewModifier {
  public typealias _Modified<T> = _ModifiedContent<Self, T> where T : SwiftUI.ViewModifier
  @inlinable public func _modifier<T>(_ modifier: T) -> _Modified<T> where T : SwiftUI.ViewModifier {
        return .init(content: self, modifier: modifier)
    }
}
extension _ModifiedContent {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, *)
@available(watchOS, unavailable)
public struct NavigationView<Root> : __LegacyView where Root : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder root: () -> Root)
  public var body: _View {
    get
  }
  public typealias Body = SwiftUI._AutoViewWrapper
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout @propertyDelegate public struct State<Value> : DynamicViewProperty, BindingConvertible {
  @usableFromInline
  internal var _value: Value
  @usableFromInline
  internal var _location: AnyObject?
  public init(initialValue value: Value)
  public var value: Value {
    get
    nonmutating set
  }
  public var binding: Binding<Value> {
    get
  }
  public var delegateValue: Binding<Value> {
    get
  }
  public var storageValue: Binding<Value> {
    get
  }
  public static func _makeLink<V>(in buffer: inout _DynamicViewPropertyBuffer, container: _GraphValue<V>, linkOffset: Int, inputs: inout _ViewInputs)
  public static var _isUnary: Bool {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension State where Value : Swift.ExpressibleByNilLiteral {
  @inlinable public init() {
        self.init(initialValue: nil)
    }
}
@available(OSX 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension StaticMember where Base : SwiftUI.ListStyle {
  public static var sidebar: SidebarListStyle.Member {
    get
  }
}
@available(OSX 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct SidebarListStyle : ListStyle {
  public func _body<Selection>(configuration: _ListContainer<Selection>, children: _VariadicView.Children) -> _AutoResultView<SidebarListStyle> where Selection : SwiftUI.SelectionManager
  public typealias _Body = SwiftUI._AutoResultView<SwiftUI.SidebarListStyle>
}
public typealias __GridSpacing = __GridLayout.Spacing
public struct __GridLayout {
  public struct Spacing {
    public var min: Length
    public var max: Length?
    public init(min: Length = 0, max: Length? = nil)
    public init(fixed: Length)
  }
  public enum FillDirection {
    case horizontal, vertical
    public static func == (a: SwiftUI.__GridLayout.FillDirection, b: SwiftUI.__GridLayout.FillDirection) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var itemSize: CGSize
  public var itemSpacing: Spacing
  public var lineSpacing: Spacing
  public var fillDirection: FillDirection
  public init(itemSize: CGSize, itemSpacing: Length = 0, lineSpacing: Length = 0, fillDirection: FillDirection = .horizontal)
  public init(itemSize: CGSize, itemSpacing: Spacing, lineSpacing: Spacing, fillDirection: FillDirection = .horizontal)
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol DynamicViewContent : SwiftUI.View {
  associatedtype Data : Swift.Collection
  var data: Data { get }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension ForEach : DynamicViewContent {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ModifiedContent : DynamicViewContent where Content : SwiftUI.DynamicViewContent, Modifier : SwiftUI.ViewModifier {
  public var data: Content.Data {
    get
  }
  public typealias Data = Content.Data
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _OverlayLayout {
  public init(contentIndex: Int? = nil)
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _OverlayLayout {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _ScrollableLayoutView<Data, Layout> : _UnaryView where Data : Swift.RandomAccessCollection, Layout : SwiftUI._ScrollableLayout, Data.Element : SwiftUI.View, Data.Index : Swift.Hashable {
  public var data: (Data, Int)
  public var layout: Layout
  @inlinable internal init(data: Data, layout: Layout) {
        // FIXME: calling data.count in unspecialized code later is
        // crazy slow -- like 30% of the time of our simplest scrolling
        // benchmark -- how is that even possible!?
        self.data = (data, data.count)
        self.layout = layout
    }
  public static func _makeView(view: _GraphValue<_ScrollableLayoutView>, inputs: _ViewInputs) -> _ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ScrollableLayoutView : _ScrollableContentProvider {
  public var scrollableContent: _ScrollableLayoutView {
    get
  }
  public func decelerationTarget(contentOffset: CGPoint, originalContentOffset: CGPoint, velocity: _Velocity<CGSize>, size: CGSize) -> CGPoint?
  public typealias ScrollableContent = SwiftUI._ScrollableLayoutView<Data, Layout>
  public typealias Root = SwiftUI._DelayedPreferenceView<SwiftUI._ContainedScrollViewKey, SwiftUI._ModifiedContent<SwiftUI._ScrollView<SwiftUI._ScrollableLayoutView<Data, Layout>>.Main, SwiftUI._OverlayModifier<SwiftUI._PreferenceReadingView<SwiftUI._ContainedScrollViewKey, SwiftUI._ScrollOverlayView>>>>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, *)
@available(watchOS, unavailable)
public struct RotationGesture : Gesture {
  public var minimumAngleDelta: Angle
  public init(minimumAngleDelta: Angle = .degrees(1))
  public static func _makeGesture(gesture: _GraphValue<RotationGesture>, inputs: _GestureInputs) -> _GestureOutputs<Angle>
  public typealias Value = SwiftUI.Angle
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension EnvironmentValues {
  public var undoManager: UndoManager? {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public typealias Length = CGFloat
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _AllowsHitTestingModifier : _MultiViewModifier, Equatable {
  public var allowsHitTesting: Bool
  @inlinable public init(allowsHitTesting: Bool) {
        self.allowsHitTesting = allowsHitTesting
    }
  public static func _makeView(modifier: _GraphValue<_AllowsHitTestingModifier>, inputs: _ViewInputs, body: @escaping (_Graph, _ViewInputs) -> _ViewOutputs) -> _ViewOutputs
  public typealias Body = Swift.Never
  public static func == (a: SwiftUI._AllowsHitTestingModifier, b: SwiftUI._AllowsHitTestingModifier) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func allowsHitTesting(_ enabled: Bool) -> Modified<_AllowsHitTestingModifier> {
        return modifier(_AllowsHitTestingModifier(allowsHitTesting: enabled))
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _AppearanceActionModifier : _MultiViewModifier {
  public var appear: (() -> Void)?
  public var disappear: (() -> Void)?
  public init(appear: (() -> Void)? = nil, disappear: (() -> Void)? = nil)
  public static func _makeView(modifier: _GraphValue<_AppearanceActionModifier>, inputs: _ViewInputs, body: @escaping (_Graph, _ViewInputs) -> _ViewOutputs) -> _ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func onAppear(perform action: (() -> Void)? = nil) -> Modified<_AppearanceActionModifier>
  public func onDisappear(perform action: (() -> Void)? = nil) -> Modified<_AppearanceActionModifier>
}
extension String {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension StaticMember where Base : SwiftUI.ToggleStyle {
  public static var `switch`: SwitchToggleStyle.Member {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct SwitchToggleStyle : ToggleStyle {
  public func body(configuration: Toggle<Label>) -> Body
  public struct Body : __LegacyView {
    public var body: _View {
      get
    }
    public typealias Body = SwiftUI._AutoViewWrapper
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct ProjectionTransform {
  public var m11: CGFloat = 1.0, m12: CGFloat = 0.0, m13: CGFloat = 0.0
  public var m21: CGFloat = 0.0, m22: CGFloat = 1.0, m23: CGFloat = 0.0
  public var m31: CGFloat = 0.0, m32: CGFloat = 0.0, m33: CGFloat = 1.0
  @inlinable public init() {}
  @inlinable public init(_ m: CGAffineTransform) {
        m11 = m.a
        m12 = m.b
        m21 = m.c
        m22 = m.d
        m31 = m.tx
        m32 = m.ty
    }
  @inlinable public init(_ m: CATransform3D) {
        m11 = m.m11
        m12 = m.m12
        m13 = m.m14
        m21 = m.m21
        m22 = m.m22
        m23 = m.m24
        m31 = m.m41
        m32 = m.m42
        m33 = m.m44
    }
  @inlinable public var isIdentity: Bool {
    get {
        return self == ProjectionTransform()
    }
  }
  @inlinable public var isAffine: Bool {
    get {
        return m13 == 0 && m23 == 0 && m33 == 1
    }
  }
  mutating public func invert() -> Bool
  public func inverted() -> ProjectionTransform
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension ProjectionTransform : Equatable {
  public static func == (a: SwiftUI.ProjectionTransform, b: SwiftUI.ProjectionTransform) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension ProjectionTransform {
  @inlinable public func concatenating(_ rhs: ProjectionTransform) -> ProjectionTransform {
        var m = ProjectionTransform()
        m.m11 = m11 * rhs.m11 + m12 * rhs.m21 + m13 * rhs.m31
        m.m12 = m11 * rhs.m12 + m12 * rhs.m22 + m13 * rhs.m32
        m.m13 = m11 * rhs.m13 + m12 * rhs.m23 + m13 * rhs.m33
        m.m21 = m21 * rhs.m11 + m22 * rhs.m21 + m23 * rhs.m31
        m.m22 = m21 * rhs.m12 + m22 * rhs.m22 + m23 * rhs.m32
        m.m23 = m21 * rhs.m13 + m22 * rhs.m23 + m23 * rhs.m33
        m.m31 = m31 * rhs.m11 + m32 * rhs.m21 + m33 * rhs.m31
        m.m32 = m31 * rhs.m12 + m32 * rhs.m22 + m33 * rhs.m32
        m.m33 = m31 * rhs.m13 + m32 * rhs.m23 + m33 * rhs.m33
        return m
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension CGPoint {
  public func applying(_ m: ProjectionTransform) -> CGPoint
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Gesture {
  @inlinable public func simultaneously<Other>(with other: Other) -> SimultaneousGesture<Self, Other> where Other : SwiftUI.Gesture {
        return SimultaneousGesture(self, other)
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct SimultaneousGesture<First, Second> where First : SwiftUI.Gesture, Second : SwiftUI.Gesture {
  @_fixed_layout public struct Value {
    public var first: First.Value?
    public var second: Second.Value?
  }
  public var first: First
  public var second: Second
  @inlinable public init(_ first: First, _ second: Second) {
        (self.first, self.second) = (first, second)
    }
  public static func _makeGesture(gesture: _GraphValue<SimultaneousGesture>, inputs: _GestureInputs) -> _GestureOutputs<Value>
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension SimultaneousGesture.Value : Equatable where First.Value : Swift.Equatable, Second.Value : Swift.Equatable {
  public static func == (a: SwiftUI.SimultaneousGesture<First, Second>.Value, b: SwiftUI.SimultaneousGesture<First, Second>.Value) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension SimultaneousGesture.Value : Hashable where First.Value : Swift.Hashable, Second.Value : Swift.Hashable {
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Color {
  public enum RGBColorSpace {
    case sRGB
    case sRGBLinear
    case displayP3
    public static func == (a: SwiftUI.Color.RGBColorSpace, b: SwiftUI.Color.RGBColorSpace) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public init(_ colorSpace: RGBColorSpace = .sRGB, red: Double, green: Double, blue: Double, opacity: Double = 1)
  public init(_ colorSpace: RGBColorSpace = .sRGB, white: Double, opacity: Double = 1)
  public init(hue: Double, saturation: Double, brightness: Double, opacity: Double = 1)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct EquatableView<Content> : _UnaryView where Content : Swift.Equatable, Content : SwiftUI.View {
  public var content: Content
  @inlinable public init(content: Content) {
        self.content = content
    }
  public static func _makeView(view: _GraphValue<EquatableView>, inputs: _ViewInputs) -> _ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View where Self : Swift.Equatable {
  @inlinable public func equatable() -> EquatableView<Self> {
        return EquatableView(content: self)
    }
}
public struct __BedtimeTickLabelsLayout {
  public init(center: CGPoint, radius: Length)
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
extension Color {
  public static var _background: Color {
    get
  }
}
extension View {
  public func _addingBackgroundGroup() -> Modified<_EnvironmentKeyTransformModifier<Int>>
  public func _addingBackgroundLayer() -> Modified<_EnvironmentKeyTransformModifier<Int>>
}
public struct __ViewRemovalLayout {
  public init(showsBothRows: Bool)
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, tvOS 13.0, *)
@available(OSX, unavailable)
@available(watchOS, unavailable)
public struct EditButton : __LegacyView {
  public init()
  public var body: _View {
    get
  }
  public typealias Body = SwiftUI._AutoViewWrapper
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct SizedShape<S> : Shape where S : SwiftUI.Shape {
  public var shape: S
  public var size: CGSize
  @inlinable public init(shape: S, size: CGSize) {
        self.shape = shape
        self.size = size
    }
  public func path(in rect: CGRect) -> Path
  public typealias AnimatableData = AnimatablePair<S.AnimatableData, CGSize.AnimatableData>
  public var animatableData: AnimatableData {
    get
    set
  }
  public typealias Body = SwiftUI.ShapeView<SwiftUI.SizedShape<S>, SwiftUI.ForegroundStyle>
  public static func == (a: SwiftUI.SizedShape<S>, b: SwiftUI.SizedShape<S>) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Shape {
  @inlinable public func size(_ size: CGSize) -> SizedShape<Self> {
        return .init(shape: self, size: size)
    }
  @inlinable public func size(width: Length, height: Length) -> SizedShape<Self> {
        return size(.init(width: width, height: height))
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _DataProviderView : SwiftUI._UnaryView where Self.Body == Swift.Never {
  associatedtype Provider : SwiftUI._DataProvider
  func initDataProvider() -> Provider
  associatedtype DataBody : SwiftUI.View
  func body(data: Provider.Data) -> DataBody
  func updateDataProvider(_ dataProvider: inout Provider)
  func needsUpdateForDataChange(oldData: Provider.Data, newData: Provider.Data) -> Bool
  func transactionForDataChange(oldData: Provider.Data, newData: Provider.Data) -> Transaction
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _DataProviderView where Self.Provider.Data : Swift.Equatable {
  public func needsUpdateForDataChange(oldData: Provider.Data, newData: Provider.Data) -> Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _DataProviderView {
  public func updateDataProvider(_ dataProvider: inout Provider)
  public func needsUpdateForDataChange(oldData: Provider.Data, newData: Provider.Data) -> Bool
  public func transactionForDataChange(oldData: Provider.Data, newData: Provider.Data) -> Transaction
  public static func _makeView(view: _GraphValue<Self>, inputs: _ViewInputs) -> _ViewOutputs
  public var body: Never {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol AnimatableModifier : SwiftUI.Animatable, SwiftUI.ViewModifier {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension AnimatableModifier {
  public static func _makeView(modifier: _GraphValue<Self>, inputs: _ViewInputs, body: @escaping (_Graph, _ViewInputs) -> _ViewOutputs) -> _ViewOutputs
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func gesture<T>(_ gesture: T, including mask: GestureMask = .all) -> _AutoResultView<Self> where T : SwiftUI.Gesture
  public func highPriorityGesture<T>(_ gesture: T, including mask: GestureMask = .all) -> _AutoResultView<Self> where T : SwiftUI.Gesture
  public func simultaneousGesture<T>(_ gesture: T, including mask: GestureMask = .all) -> _AutoResultView<Self> where T : SwiftUI.Gesture
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct GestureMask : OptionSet {
  public let rawValue: UInt32
  public init(rawValue: UInt32)
  public static let none: SwiftUI.GestureMask
  public static let gesture: SwiftUI.GestureMask
  public static let subviews: SwiftUI.GestureMask
  public static let all: SwiftUI.GestureMask
  public typealias Element = SwiftUI.GestureMask
  public typealias ArrayLiteralElement = SwiftUI.GestureMask
  public typealias RawValue = Swift.UInt32
}
@available(OSX 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Gesture {
  public func modifiers(_ modifiers: EventModifiers) -> _ModifiersGesture<Self>
}
@available(OSX 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _ModifiersGesture<Content> : Gesture where Content : SwiftUI.Gesture {
  public static func _makeGesture(gesture: _GraphValue<_ModifiersGesture>, inputs: _GestureInputs) -> _GestureOutputs<Content.Value>
  public typealias Value = Content.Value
  public typealias Body = Swift.Never
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(OSX, unavailable)
@available(tvOS, unavailable)
extension _ViewTraitKey {
  public static var _linkedGroup: _ViewTraitKey<Bool> {
    get
  }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(OSX, unavailable)
@available(tvOS, unavailable)
extension View {
  public func _listLinkedGroup() -> Modified<_TraitWritingModifier<Bool>>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct OnInsertConfiguration {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension DynamicViewContent {
  public func onInsert(of acceptedTypeIdentifiers: [String], perform action: @escaping (Data.Index, [NSItemProvider]) -> Void) -> Modified<_TraitWritingModifier<OnInsertConfiguration?>>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public enum LayoutDirection : Equatable, Hashable {
  case leftToRight
  case rightToLeft
  public static func == (a: SwiftUI.LayoutDirection, b: SwiftUI.LayoutDirection) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension EnvironmentValues {
  public var layoutDirection: LayoutDirection {
    get
    set
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Transaction {
  public init(animation: Animation?)
  public var animation: Animation? {
    get
    set
  }
  public var disablesAnimations: Bool {
    get
    set
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func transformAnchorPreference<A, K>(key _: K.Type = K.self, value: Anchor<A>.Source, transform: @escaping (inout K.Value, Anchor<A>) -> Void) -> Modified<_AnchorTransformModifier<A, K>> where A : Swift.Equatable, K : SwiftUI.PreferenceKey {
        return modifier(.init(anchor: value, transform: transform))
    }
}
@_fixed_layout public struct _AnchorTransformModifier<AnchorValue, Key> : _MultiViewModifier where AnchorValue : Swift.Equatable, Key : SwiftUI.PreferenceKey {
  public var anchor: Anchor<AnchorValue>.Source
  public var transform: (inout Key.Value, Anchor<AnchorValue>) -> Void
  @inlinable public init(anchor: Anchor<AnchorValue>.Source, transform: @escaping (inout Key.Value, Anchor<AnchorValue>) -> Void) {
        self.anchor = anchor
        self.transform = transform
    }
  public static func _makeView(modifier: _GraphValue<_AnchorTransformModifier>, inputs: _ViewInputs, body: @escaping (_Graph, _ViewInputs) -> _ViewOutputs) -> _ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _BackgroundModifier<Background> where Background : SwiftUI.View {
  public let secondaryLayer: Background
  public let alignment: Alignment
  @inlinable public init(background: Background, alignment: Alignment = .center) {
        self.secondaryLayer = background
        self.alignment = alignment
    }
  public static func _makeView(modifier: _GraphValue<_BackgroundModifier>, inputs: _ViewInputs, body: @escaping (_Graph, _ViewInputs) -> _ViewOutputs) -> _ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _BackgroundModifier : Equatable where Background : Swift.Equatable {
  public static func == (a: SwiftUI._BackgroundModifier<Background>, b: SwiftUI._BackgroundModifier<Background>) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func background<Background>(_ background: Background, alignment: Alignment = .center) -> Modified<_BackgroundModifier<Background>> where Background : SwiftUI.View {
        return modifier(
            _BackgroundModifier(background: background, alignment: alignment))
    }
  @inlinable public func background<S>(_ content: S, cornerRadius: Length) -> Modified<_BackgroundModifier<RoundedRectangle.Filled<S>>> where S : SwiftUI.ShapeStyle {
        let bg = RoundedRectangle(cornerRadius: cornerRadius).fill(content)
        return background(bg)
    }
  @inlinable public func background<S>(_ content: S.Member, cornerRadius: Length) -> Modified<_BackgroundModifier<RoundedRectangle.Filled<S>>> where S : SwiftUI.ShapeStyle {
        let bg = RoundedRectangle(cornerRadius: cornerRadius).fill(content.base)
        return background(bg)
    }
  @inlinable public func background<S>(_ content: S.Member) -> Modified<_BackgroundModifier<Rectangle.Filled<S>>> where S : SwiftUI.ShapeStyle {
        let bg = Rectangle().fill(content.base)
        return background(bg)
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _OverlayModifier<Overlay> where Overlay : SwiftUI.View {
  public let secondaryLayer: Overlay
  public let alignment: Alignment
  @inlinable public init(overlay: Overlay, alignment: Alignment = .center) {
        self.secondaryLayer = overlay
        self.alignment = alignment
    }
  public static func _makeView(modifier: _GraphValue<_OverlayModifier>, inputs: _ViewInputs, body: @escaping (_Graph, _ViewInputs) -> _ViewOutputs) -> _ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _OverlayModifier : Equatable where Overlay : Swift.Equatable {
  public static func == (a: SwiftUI._OverlayModifier<Overlay>, b: SwiftUI._OverlayModifier<Overlay>) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func overlay<Overlay>(_ overlay: Overlay, alignment: Alignment = .center) -> Modified<_OverlayModifier<Overlay>> where Overlay : SwiftUI.View {
        return modifier(.init(overlay: overlay, alignment: alignment))
    }
  @inlinable public func border<S>(_ content: S, width: Length = 1) -> Modified<_OverlayModifier<Rectangle.InsetShape.Stroked.Filled<S>>> where S : SwiftUI.ShapeStyle {
        return overlay(Rectangle().strokeBorder(content, lineWidth: width))
    }
  @inlinable public func border<S>(_ content: S, width: Length = 1, cornerRadius: Length) -> Modified<_OverlayModifier<RoundedRectangle.InsetShape.Stroked.Filled<S>>> where S : SwiftUI.ShapeStyle {
        return overlay(RoundedRectangle(cornerRadius: cornerRadius)
            .strokeBorder(content, lineWidth: width))
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct SecureField : __LegacyView {
  public init(_ text: Binding<String>, placeholder: Text? = nil, onCommit: @escaping () -> Void = {})
  public var body: _View {
    get
  }
  public typealias Body = SwiftUI._AutoViewWrapper
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _RelativeLayoutTraitsLayout {
  public var widthProportion: Length?
  public var heightProportion: Length?
  @inlinable public init(width: Length? = nil, height: Length? = nil) {
        self.widthProportion = width
        self.heightProportion = height
    }
  public typealias Body = Swift.Never
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func relativeWidth(_ proportion: Length) -> Modified<_RelativeLayoutTraitsLayout> {
        return modifier(_RelativeLayoutTraitsLayout(width: proportion))
    }
  @inlinable public func relativeHeight(_ proportion: Length) -> Modified<_RelativeLayoutTraitsLayout> {
        return modifier(_RelativeLayoutTraitsLayout(height: proportion))
    }
  @inlinable public func relativeSize(width: Length, height: Length) -> Modified<_RelativeLayoutTraitsLayout> {
        return modifier(
            _RelativeLayoutTraitsLayout(width: width, height: height))
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public enum ContentMode {
  case fit
  case fill
  public static func == (a: SwiftUI.ContentMode, b: SwiftUI.ContentMode) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _AspectRatioLayout {
  public var aspectRatio: Length?
  public var contentMode: ContentMode
  @inlinable public init(aspectRatio: Length? = nil, contentMode: ContentMode) {
        self.aspectRatio = aspectRatio
        self.contentMode = contentMode
    }
  public typealias Body = Swift.Never
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func aspectRatio(_ aspectRatio: Length? = nil, contentMode: ContentMode) -> Modified<_AspectRatioLayout> {
        return modifier(_AspectRatioLayout(
            aspectRatio: aspectRatio, contentMode: contentMode))
    }
  @inlinable public func aspectRatio(_ aspectRatio: CGSize, contentMode: ContentMode) -> Modified<_AspectRatioLayout> {
        return self.aspectRatio(
            aspectRatio.width / aspectRatio.height, contentMode: contentMode)
    }
  @inlinable public func scaledToFit() -> Modified<_AspectRatioLayout> {
        return aspectRatio(contentMode: .fit)
    }
  @inlinable public func scaledToFill() -> Modified<_AspectRatioLayout> {
        return aspectRatio(contentMode: .fill)
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _ScrollableLayout : SwiftUI.Animatable {
  associatedtype StateType = Swift.Void
  static func initialState() -> StateType
  func update(state: inout StateType, proxy: inout _ScrollableLayoutProxy)
  associatedtype ItemModifier : SwiftUI.ViewModifier = SwiftUI.EmptyModifier
  func modifier(for item: _ScrollableLayoutItem, layout: _ScrollLayout, state: StateType) -> ItemModifier
  func decelerationTarget(contentOffset: CGPoint, originalContentOffset: CGPoint, velocity: _Velocity<CGSize>, size: CGSize) -> CGPoint?
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ScrollableLayout where Self.StateType : SwiftUI._StateProtocol {
  public static func initialState() -> StateType
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ScrollableLayout where Self.StateType == Swift.Void {
  public static func initialState() -> StateType
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ScrollableLayout where Self.ItemModifier == SwiftUI.EmptyModifier {
  public func modifier(for item: _ScrollableLayoutItem, layout: _ScrollLayout, state: StateType) -> ItemModifier
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ScrollableLayout {
  public func decelerationTarget(contentOffset: CGPoint, originalContentOffset: CGPoint, velocity: _Velocity<CGSize>, size: CGSize) -> CGPoint?
  public subscript<T>(data: T) -> _ScrollView<_ScrollableLayoutView<T, Self>> where T : Swift.RandomAccessCollection, T.Element : SwiftUI.View, T.Index : Swift.Hashable {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ScrollableLayout where Self : Swift.RandomAccessCollection, Self.Element : SwiftUI.View, Self.Index : Swift.Hashable {
  public subscript() -> _ScrollView<_ScrollableLayoutView<Self, Self>> {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollableLayoutProxy : RandomAccessCollection {
  public let size: CGSize
  public let visibleRect: CGRect
  public let count: Int
  public var visibleItems: [SwiftUI._ScrollableLayoutItem]
  public var contentSize: CoreGraphics.CGSize
  public var validRect: CoreGraphics.CGRect
  public var startIndex: Int {
    get
  }
  public var endIndex: Int {
    get
  }
  public subscript(index: Int) -> AnyHashable {
    get
  }
  mutating public func size(of identifier: AnyHashable, in size: CGSize, validatingContent: Bool = true) -> CGSize
  mutating public func size(at index: Int, in size: CGSize, validatingContent: Bool = true) -> CGSize
  mutating public func removeSize(of identifier: AnyHashable)
  mutating public func removeAllSizes()
  public typealias Element = Swift.AnyHashable
  public typealias Index = Swift.Int
  public typealias SubSequence = Swift.Slice<SwiftUI._ScrollableLayoutProxy>
  public typealias Indices = Swift.Range<Swift.Int>
  public typealias Iterator = Swift.IndexingIterator<SwiftUI._ScrollableLayoutProxy>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollableLayoutItem : Equatable {
  public var id: AnyHashable
  public var proposedSize: CGSize {
    get
  }
  public var anchor: UnitPoint {
    get
  }
  public var anchorPosition: CGPoint {
    get
  }
  public init(id: AnyHashable, proposedSize: CGSize, anchoring anchor: UnitPoint = .topLeading, at position: CGPoint)
  public static func == (a: SwiftUI._ScrollableLayoutItem, b: SwiftUI._ScrollableLayoutItem) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _FixedSizeLayout {
  @inlinable public init(horizontal: Bool, vertical: Bool) {
        self.horizontal = horizontal
        self.vertical = vertical
    }
  @usableFromInline
  internal var horizontal: Bool
  @usableFromInline
  internal var vertical: Bool
}
extension _FixedSizeLayout {
  public typealias Body = Swift.Never
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func fixedSize(horizontal: Bool, vertical: Bool) -> Modified<_FixedSizeLayout>
  public func fixedSize() -> Modified<_FixedSizeLayout>
}
@_fixed_layout public struct ForegroundStyle {
  @inlinable public init() {}
}
extension View {
  public func foregroundColor(_ color: Color?) -> Modified<_EnvironmentKeyWritingModifier<Color?>>
}
public struct __FourUpLayout {
  public init()
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public enum _VariadicView {
  public typealias Root = _VariadicView_Root
  public typealias ViewRoot = _VariadicView_ViewRoot
  public typealias Children = _VariadicView_Children
  public typealias UnaryViewRoot = _VariadicView_UnaryViewRoot
  public typealias MultiViewRoot = _VariadicView_MultiViewRoot
  @_fixed_layout public struct Tree<Root, Content> where Root : SwiftUI._VariadicView_Root {
    public var root: Root
    public var content: Content
    @inlinable internal init(root: Root, content: Content) {
            self.root = root
            self.content = content
        }
    @inlinable public init(_ root: Root, @SwiftUI.ViewBuilder content: () -> Content) {
            self.root = root
            self.content = content()
        }
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _VariadicView_Root {
  static var _viewListOptions: Int { get }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _VariadicView_Root {
  public static var _viewListOptions: Int {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _VariadicView_ViewRoot : SwiftUI._VariadicView_Root {
  static func _makeView(root: _GraphValue<Self>, inputs: _ViewInputs, body: (_Graph, _ViewInputs) -> _ViewListOutputs) -> _ViewOutputs
  static func _makeViewList(root: _GraphValue<Self>, inputs: _ViewListInputs, body: @escaping (_Graph, _ViewListInputs) -> _ViewListOutputs) -> _ViewListOutputs
  associatedtype Body : SwiftUI.View
  func body(children: _VariadicView.Children) -> Body
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _VariadicView_ViewRoot where Self.Body == Swift.Never {
  public func body(children: _VariadicView.Children) -> Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _VariadicView_UnaryViewRoot : SwiftUI._VariadicView_ViewRoot {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _VariadicView_UnaryViewRoot {
  public static func _makeViewList(root: _GraphValue<Self>, inputs: _ViewListInputs, body: @escaping (_Graph, _ViewListInputs) -> _ViewListOutputs) -> _ViewListOutputs
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _VariadicView_MultiViewRoot : SwiftUI._VariadicView_ViewRoot {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _VariadicView_MultiViewRoot {
  public static func _makeView(root: _GraphValue<Self>, inputs: _ViewInputs, body: (_Graph, _ViewInputs) -> _ViewListOutputs) -> _ViewOutputs
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _VariadicView_Children {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _VariadicView_ViewRoot {
  public static func _makeView(root: _GraphValue<Self>, inputs: _ViewInputs, body: (_Graph, _ViewInputs) -> _ViewListOutputs) -> _ViewOutputs
  public static func _makeViewList(root: _GraphValue<Self>, inputs: _ViewListInputs, body: @escaping (_Graph, _ViewListInputs) -> _ViewListOutputs) -> _ViewListOutputs
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _VariadicView.Tree : _View where Root : SwiftUI._VariadicView_ViewRoot, Content : SwiftUI.View {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _VariadicView.Tree : View where Root : SwiftUI._VariadicView_ViewRoot, Content : SwiftUI.View {
  public typealias Body = Never
  public static func _makeView(view: _GraphValue<_VariadicView.Tree<Root, Content>>, inputs: _ViewInputs) -> _ViewOutputs
  public static func _makeViewList(view: _GraphValue<_VariadicView.Tree<Root, Content>>, inputs: _ViewListInputs) -> _ViewListOutputs
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _VariadicView.Tree where Root : SwiftUI._VariadicView_ViewRoot, Content : SwiftUI.View {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _VariadicView.Tree : _UnaryView where Root : SwiftUI._VariadicView_ViewRoot, Content : SwiftUI.View {
}
public struct Stepper<Label> : __LegacyView where Label : SwiftUI.View {
  public init(onIncrement: (() -> Void)?, onDecrement: (() -> Void)?, onEditingChanged: @escaping (Bool) -> Void = { _ in }, @SwiftUI.ViewBuilder label: () -> Label)
  public var body: _View {
    get
  }
  public typealias Body = SwiftUI._AutoViewWrapper
}
extension Stepper {
  public init<V>(value: Binding<V>, step: V.Stride = 1, onEditingChanged: @escaping (Bool) -> Void = { _ in }, @SwiftUI.ViewBuilder label: () -> Label) where V : Swift.Strideable
  public init<V>(value: Binding<V>, in bounds: ClosedRange<V>, step: V.Stride = 1, onEditingChanged: @escaping (Bool) -> Void = { _ in }, @SwiftUI.ViewBuilder label: () -> Label) where V : Swift.Strideable
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension EnvironmentValues {
  public var defaultMinListRowHeight: Length {
    get
    set
  }
  public var defaultMinListHeaderHeight: Length? {
    get
    set
  }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(OSX, unavailable)
@available(tvOS, unavailable)
extension EnvironmentValues {
  public var _plainListSectionSpacing: Length? {
    get
    set
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _SizeLimitLayout {
  public let _width: ClosedRange<Length>
  public let _height: ClosedRange<Length>
  @inlinable internal init(width: ClosedRange<Length>, height: ClosedRange<Length>) {
        _width = width
        _height = height
    }
  @inlinable public init(minWidth: Length? = nil, maxWidth: Length? = nil, minHeight: Length? = nil, maxHeight: Length? = nil) {
        _width = .init(bounds: minWidth ?? 0, maxWidth ?? .infinity)
        _height = .init(bounds: minHeight ?? 0, maxHeight ?? .infinity)
    }
  public typealias Body = Swift.Never
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Text {
  public struct _Resolved {
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct UnitPoint : Hashable {
  public var x: CGFloat
  public var y: CGFloat
  @inlinable public init() {
        self.init(x: 0, y: 0)
    }
  @inlinable public init(x: CGFloat, y: CGFloat) {
        self.x = x
        self.y = y
    }
  public static let zero: SwiftUI.UnitPoint
  public static let center: SwiftUI.UnitPoint
  public static let leading: SwiftUI.UnitPoint
  public static let trailing: SwiftUI.UnitPoint
  public static let top: SwiftUI.UnitPoint
  public static let bottom: SwiftUI.UnitPoint
  public static let topLeading: SwiftUI.UnitPoint
  public static let topTrailing: SwiftUI.UnitPoint
  public static let bottomLeading: SwiftUI.UnitPoint
  public static let bottomTrailing: SwiftUI.UnitPoint
  public static func == (a: SwiftUI.UnitPoint, b: SwiftUI.UnitPoint) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension UnitPoint : Animatable {
  public typealias AnimatableData = AnimatablePair<CGFloat, CGFloat>
  public var animatableData: AnimatableData {
    @inlinable get { return .init(x, y) }
    @inlinable set { (x, y) = newValue[] }
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _ViewTest : SwiftUI._Test {
  associatedtype RootView : SwiftUI.View
  func initRootView() -> RootView
  func initSize() -> CGSize
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ViewTest {
  public func setUpTest()
  public func tearDownTest()
  public var rootView: RootView {
    get
  }
  public func viewForIdentifier<V>(_ identifier: AnyHashable, _ type: V.Type = V.self) -> V? where V : SwiftUI.View
  public func stateForIdentifier<I, S, V>(_ id: I, type _: S.Type = S.self, in _: V.Type = V.self) -> Binding<S>? where I : Swift.Hashable, V : SwiftUI.View
  public func render(seconds: Double = 1.0 / 60.0)
  public func initSize() -> CGSize
  public func setSize(_ size: CGSize)
  public func setEnvironment(_ environment: EnvironmentValues)
  public func resetEvents()
  public func loop()
  public func turnRunloop()
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ViewTest {
  public func rootState<S>(type _: S.Type = S.self) -> Binding<S>
  public func rootState<S, V>(type _: S.Type = S.self, in _: V.Type) -> Binding<S> where V : SwiftUI.View
}
public protocol PickerStyle {
  associatedtype _Body : SwiftUI.View
  func _body<SelectionValue>(configuration: Configuration<SelectionValue>) -> _Body where SelectionValue : Swift.Hashable
  typealias Configuration<S> = _PickerStyleConfiguration<S> where S : Swift.Hashable
}
public struct _PickerStyleConfiguration<SelectionValue> where SelectionValue : Swift.Hashable {
  public struct Label {
    public typealias Body = Swift.Never
  }
  public var label: Label
  public var selection: Binding<SelectionValue>
  public var children: _VariadicView.Children
}
extension View {
  public func pickerStyle<S>(_ style: S.Member) -> Modified<_PickerStyleWriter<S>> where S : SwiftUI.PickerStyle
}
public struct _PickerStyleWriter<Style> : _ViewInputsModifier where Style : SwiftUI.PickerStyle {
  public static func _makeViewInputs(modifier: _GraphValue<_PickerStyleWriter>, inputs: inout _ViewInputs)
  public typealias Body = Swift.Never
}
extension PickerStyle {
  public typealias Member = StaticMember<Self>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _PaddingLayout {
  public var edges: Edge.Set
  public var insets: EdgeInsets?
  @inlinable public init(edges: Edge.Set = .all, insets: EdgeInsets?) {
        self.edges = edges
        self.insets = insets
    }
  public typealias Body = Swift.Never
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func padding(_ insets: EdgeInsets) -> Modified<_PaddingLayout> {
        return modifier(_PaddingLayout(insets: insets))
    }
  @inlinable public func padding(_ edges: Edge.Set = .all, _ length: Length? = nil) -> Modified<_PaddingLayout> {
        let insets = length.map { EdgeInsets(_all: $0) }
        return modifier(_PaddingLayout(edges: edges, insets: insets))
    }
  @inlinable public func padding(_ length: Length) -> Modified<_PaddingLayout> {
        return padding(.all, length)
    }
}
extension View {
  @inlinable public func layout<T>(_ layout: T) -> Modified<T> where T : SwiftUI.ViewModifier {
        return modifier(layout)
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct AnchoredShapeStyle<S> : ShapeStyle where S : SwiftUI.ShapeStyle {
  public var style: S
  public var bounds: CGRect
  @inlinable internal init(style: S, bounds: CGRect) {
        self.style = style
        self.bounds = bounds
    }
  public static func _makeView<T>(view: _GraphValue<ShapeView<T, AnchoredShapeStyle>>, inputs: _ViewInputs) -> _ViewOutputs where T : SwiftUI.Shape
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension ShapeStyle {
  @inlinable public func `in`(_ rect: CGRect) -> AnchoredShapeStyle<Self> {
        return .init(style: self, bounds: rect)
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_frozen public enum HAlignment {
  case leading
  case center
  case trailing
  public static func == (a: SwiftUI.HAlignment, b: SwiftUI.HAlignment) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_frozen public enum VAlignment {
  case top
  case center
  case bottom
  public static func == (a: SwiftUI.VAlignment, b: SwiftUI.VAlignment) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _AlignmentLayout {
  public var horizontal: HAlignment?
  public var vertical: VAlignment?
  @inlinable public init(horizontal: HAlignment? = nil, vertical: VAlignment? = nil) {
        self.horizontal = horizontal
        self.vertical = vertical
    }
  public typealias Body = Swift.Never
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _OffsetEffect : GeometryEffect, Equatable {
  public var offset: CGSize
  @inlinable public init(offset: CGSize) {
        self.offset = offset
    }
  public func effectValue(size: CGSize) -> ProjectionTransform
  public var animatableData: CGSize.AnimatableData {
    get
    set
  }
  public static func _makeView(modifier: _GraphValue<_OffsetEffect>, inputs: _ViewInputs, body: @escaping (_Graph, _ViewInputs) -> _ViewOutputs) -> _ViewOutputs
  public typealias Body = Swift.Never
  public typealias AnimatableData = CoreGraphics.CGSize.AnimatableData
  public static func == (a: SwiftUI._OffsetEffect, b: SwiftUI._OffsetEffect) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func offset(_ offset: CGSize) -> Modified<_OffsetEffect> {
        return modifier(_OffsetEffect(offset: offset))
    }
  @inlinable public func offset(x: Length = 0, y: Length = 0) -> Modified<_OffsetEffect> {
        return offset(CGSize(width: x, height: y))
    }
}
extension _OffsetEffect {
  @inlinable internal static var identity: _OffsetEffect {
    get {
        return self.init(offset: CGSize())
    }
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension AnyTransition {
  public static func offset(_ offset: CGSize) -> AnyTransition
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _AlignmentWritingModifier : _MultiViewModifier {
  public static func _makeView(modifier: _GraphValue<_AlignmentWritingModifier>, inputs: _ViewInputs, body: @escaping (_Graph, _ViewInputs) -> _ViewOutputs) -> _ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func alignmentGuide(_ g: HorizontalAlignment, computeValue: @escaping (ViewDimensions) -> Length) -> Modified<_AlignmentWritingModifier>
  public func alignmentGuide(_ g: VerticalAlignment, computeValue: @escaping (ViewDimensions) -> Length) -> Modified<_AlignmentWritingModifier>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct EventModifiers : OptionSet {
  public let rawValue: Int
  public init(rawValue: Int)
  public static let capsLock: SwiftUI.EventModifiers
  public static let shift: SwiftUI.EventModifiers
  public static let control: SwiftUI.EventModifiers
  public static let option: SwiftUI.EventModifiers
  public static let command: SwiftUI.EventModifiers
  public static let numericPad: SwiftUI.EventModifiers
  public static let function: SwiftUI.EventModifiers
  public static let all: EventModifiers
  public typealias RawValue = Swift.Int
  public typealias Element = SwiftUI.EventModifiers
  public typealias ArrayLiteralElement = SwiftUI.EventModifiers
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ViewOutputs {
}
extension View {
  @available(OSX 10.15, *)
  public func __switchToggleStyle() -> _AutoResultView<Self>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _PositionLayout {
  public var position: CGPoint
  @inlinable public init(position: CGPoint) {
        self.position = position
    }
  public typealias Body = Swift.Never
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func position(_ position: CGPoint) -> Modified<_PositionLayout> {
        return modifier(_PositionLayout(position: position))
    }
  @inlinable public func position(x: Length = 0, y: Length = 0) -> Modified<_PositionLayout> {
        return position(CGPoint(x: x, y: y))
    }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(OSX, unavailable)
@available(tvOS, unavailable)
extension View {
  public func listRowPlatterColor(_ color: Color?) -> Modified<_TraitWritingModifier<Color?>>
}
public func __previewThunksHaveFinishedLoading()
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _SafeAreaIgnoringLayout {
  public var edges: Edge.Set
  @inlinable public init(edges: Edge.Set = .all) {
        self.edges = edges
    }
  public typealias Body = Swift.Never
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func edgesIgnoringSafeArea(_ edges: Edge.Set) -> Modified<_SafeAreaIgnoringLayout> {
        return modifier(_SafeAreaIgnoringLayout(edges: edges))
    }
}
@available(iOS 13.0, OSX 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension StaticMember where Base : SwiftUI.TextFieldStyle {
  public static var roundedBorder: RoundedBorderTextFieldStyle.Member {
    get
  }
}
@available(iOS 13.0, OSX 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct RoundedBorderTextFieldStyle : TextFieldStyle {
  public func _body(configuration: TextField) -> _AutoResultView<RoundedBorderTextFieldStyle>
  public typealias _Body = SwiftUI._AutoResultView<SwiftUI.RoundedBorderTextFieldStyle>
}
public struct __IconLayout {
  public init(columnCount: Int = 4, rowCount: Int? = nil, openFolderIndex: Int? = nil, openFolderScale: Length = 1.0, iconScale: Length = 1.0)
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _EnvironmentKeyWritingModifier<Value> : _ViewInputsModifier {
  public var keyPath: WritableKeyPath<EnvironmentValues, Value>
  public var value: Value
  @inlinable public init(keyPath: WritableKeyPath<EnvironmentValues, Value>, value: Value) {
        self.keyPath = keyPath
        self.value = value
    }
  public static func _makeViewInputs(modifier: _GraphValue<_EnvironmentKeyWritingModifier>, inputs: inout _ViewInputs)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func environment<V>(_ keyPath: WritableKeyPath<EnvironmentValues, V>, _ value: V) -> Modified<_EnvironmentKeyWritingModifier<V>> {
        return modifier(_EnvironmentKeyWritingModifier(
            keyPath: keyPath, value: value))
    }
}
@available(OSX 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct PasteButton : __LegacyView {
  public init(supportedTypes: [String], onTrigger: @escaping ([NSItemProvider]) -> Void)
  public init<Payload>(supportedTypes: [String], validator: @escaping ([NSItemProvider]) -> Payload?, onTrigger: @escaping (Payload) -> Void)
  public var body: _View {
    get
  }
  public typealias Body = SwiftUI._AutoViewWrapper
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Image : Equatable {
  public static func == (lhs: Image, rhs: Image) -> Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Image {
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func zIndex(_ value: Double) -> Modified<_TraitWritingModifier<Double>>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct DragGesture {
  public struct Value : Equatable {
    public var time: Date
    public var location: CGPoint
    public var startLocation: CGPoint
    public var translation: CGSize {
      get
    }
    public var predictedEndLocation: CGPoint {
      get
    }
    public var predictedEndTranslation: CGSize {
      get
    }
    public static func == (a: SwiftUI.DragGesture.Value, b: SwiftUI.DragGesture.Value) -> Swift.Bool
  }
  public var minimumDistance: Length
  public var coordinateSpace: CoordinateSpace
  public init(minimumDistance: Length = 10, coordinateSpace: CoordinateSpace = .local)
  public static func _makeGesture(gesture: _GraphValue<DragGesture>, inputs: _GestureInputs) -> _GestureOutputs<Value>
  public typealias Body = Swift.Never
}
extension StaticMember where Base : SwiftUI.ToggleStyle {
  @available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
  public static var `default`: DefaultToggleStyle.Member {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct DefaultToggleStyle : ToggleStyle {
  public func body(configuration: Toggle<Label>) -> Body
  public struct Body : __LegacyView {
    public var body: _View {
      get
    }
    public typealias Body = SwiftUI._AutoViewWrapper
  }
}
public struct Slider : __LegacyView {
  public var body: _View {
    get
  }
  public typealias Body = SwiftUI._AutoViewWrapper
}
extension Slider {
  public init<V>(value: Binding<V>, from minValue: V = 0.0, through maxValue: V = 1.0, onEditingChanged: @escaping (Bool) -> Void = { _ in }) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
  public init<V>(value: Binding<V>, from minValue: V, through maxValue: V, by stride: V.Stride, onEditingChanged: @escaping (Bool) -> Void = { _ in }) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _TransformEffect : GeometryEffect, Equatable {
  public var transform: CGAffineTransform
  @inlinable public init(transform: CGAffineTransform) {
        self.transform = transform
    }
  public func effectValue(size: CGSize) -> ProjectionTransform
  public typealias Body = Swift.Never
  public static func == (a: SwiftUI._TransformEffect, b: SwiftUI._TransformEffect) -> Swift.Bool
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func transformEffect(_ transform: CGAffineTransform) -> Modified<_TransformEffect> {
        return modifier(_TransformEffect(transform: transform))
    }
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(OSX, unavailable)
public struct ActionSheet {
  public init(title: Text, message: Text? = nil, buttons: [ActionSheet.Button] = [.cancel()])
  public typealias Button = Alert.Button
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(OSX, unavailable)
extension View {
  public func presentation(_ actionSheet: ActionSheet?) -> _AutoResultView<Self>
}
extension Color {
  @available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
  public static var accentColor: Color {
    get
  }
}
extension View {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  @available(OSX, unavailable)
  public func accentColor(_ accentColor: Color?) -> Modified<_EnvironmentKeyWritingModifier<Color?>>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension EnvironmentValues {
  public var isEnabled: Bool {
    get
    set
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func disabled(_ disabled: Bool) -> Modified<_EnvironmentKeyTransformModifier<Bool>>
}
@available(iOS 13.0, tvOS 13.0, *)
@available(OSX, unavailable)
@available(watchOS, unavailable)
extension StaticMember where Base : SwiftUI.ListStyle {
  public static var grouped: GroupedListStyle.Member {
    get
  }
  public static func _insetGrouped(sectionInset: EdgeInsets) -> GroupedListStyle.Member
}
@available(iOS 13.0, tvOS 13.0, *)
@available(OSX, unavailable)
@available(watchOS, unavailable)
public struct GroupedListStyle : ListStyle {
  public func _body<Selection>(configuration: _ListContainer<Selection>, children: _VariadicView.Children) -> _AutoResultView<GroupedListStyle> where Selection : SwiftUI.SelectionManager
  public typealias _Body = SwiftUI._AutoResultView<SwiftUI.GroupedListStyle>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Image {
  public func renderingMode(_ renderingMode: TemplateRenderingMode?) -> Image
}
extension Color {
  public static let clear: SwiftUI.Color
  public static let black: SwiftUI.Color
  public static let white: SwiftUI.Color
  public static let gray: SwiftUI.Color
  public static let red: SwiftUI.Color
  public static let green: SwiftUI.Color
  public static let blue: SwiftUI.Color
  public static let orange: SwiftUI.Color
  public static let yellow: SwiftUI.Color
  public static let pink: SwiftUI.Color
  public static let purple: SwiftUI.Color
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _RotationEffect : GeometryEffect, Equatable {
  public var angle: Angle
  public var anchor: UnitPoint
  @inlinable public init(angle: Angle, anchor: UnitPoint = .center) {
        self.angle = angle
        self.anchor = anchor
    }
  public func effectValue(size: CGSize) -> ProjectionTransform
  public typealias AnimatableData = AnimatablePair<Angle.AnimatableData, UnitPoint.AnimatableData>
  public var animatableData: AnimatableData {
    get
    set
  }
  public typealias Body = Swift.Never
  public static func == (a: SwiftUI._RotationEffect, b: SwiftUI._RotationEffect) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func rotationEffect(_ angle: Angle, anchor: UnitPoint = .center) -> Modified<_RotationEffect> {
        return modifier(_RotationEffect(angle: angle, anchor: anchor))
    }
}
extension EnvironmentValues {
  @available(iOS, unavailable)
  @available(OSX, unavailable)
  @available(tvOS, unavailable)
  public var defaultWheelPickerItemHeight: Length {
    get
    set
  }
}
extension View {
  @available(iOS, unavailable)
  @available(OSX, unavailable)
  @available(tvOS, unavailable)
  public func defaultWheelPickerItemHeight(_ height: Length) -> Modified<_EnvironmentKeyWritingModifier<Length>>
}
@available(OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@available(iOS, unavailable)
extension View {
  public func focusable(_ isFocusable: Bool, onFocusChange: @escaping (_ isFocused: Bool) -> Void = { _ in }) -> Modified<_FocusableModifier>
}
@available(OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@available(iOS, unavailable)
public struct _FocusableModifier : _MultiViewModifier {
  public static func _makeView(modifier: _GraphValue<_FocusableModifier>, inputs: _ViewInputs, body: @escaping (_Graph, _ViewInputs) -> _ViewOutputs) -> _ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _ScaleEffect : GeometryEffect, Equatable {
  public var scale: CGSize
  public var anchor: UnitPoint
  @inlinable public init(scale: CGSize, anchor: UnitPoint = .center) {
        self.scale = scale
        self.anchor = anchor
    }
  public func effectValue(size: CGSize) -> ProjectionTransform
  public typealias AnimatableData = AnimatablePair<CGSize.AnimatableData, UnitPoint.AnimatableData>
  public var animatableData: AnimatableData {
    get
    set
  }
  public typealias Body = Swift.Never
  public static func == (a: SwiftUI._ScaleEffect, b: SwiftUI._ScaleEffect) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func scaleEffect(_ scale: CGSize, anchor: UnitPoint = .center) -> Modified<_ScaleEffect> {
        return modifier(_ScaleEffect(scale: scale, anchor: anchor))
    }
  @inlinable public func scaleEffect(_ s: Length, anchor: UnitPoint = .center) -> Modified<_ScaleEffect> {
        return scaleEffect(CGSize(width: s, height: s), anchor: anchor)
    }
  @inlinable public func scaleEffect(x: Length = 0.0, y: Length = 0.0, anchor: UnitPoint = .center) -> Modified<_ScaleEffect> {
        return scaleEffect(CGSize(width: x, height: y), anchor: anchor)
    }
}
extension _ScaleEffect {
  @inlinable internal static var identity: _ScaleEffect {
    get {
        return self.init(scale: CGSize(width: 1, height: 1))
    }
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension AnyTransition {
  public static func scale(scale: Length = 0.0, anchor: UnitPoint = .center) -> AnyTransition
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _BlurEffect : Equatable {
  public var radius: Length
  public var isOpaque: Bool
  @inlinable public init(radius: Length, opaque: Bool) {
        self.radius = radius
        self.isOpaque = opaque
    }
  public var animatableData: Length {
    get
    set
  }
  public typealias Body = Swift.Never
  public typealias AnimatableData = SwiftUI.Length
  public static func == (a: SwiftUI._BlurEffect, b: SwiftUI._BlurEffect) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func blur(radius: Length, opaque: Bool = false) -> Modified<_BlurEffect> {
        return modifier(_BlurEffect(radius: radius, opaque: opaque))
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _BrightnessEffect : Equatable {
  public var amount: Double
  @inlinable public init(amount: Double) {
        self.amount = amount
    }
  public var animatableData: Double {
    get
    set
  }
  public typealias Body = Swift.Never
  public static func == (a: SwiftUI._BrightnessEffect, b: SwiftUI._BrightnessEffect) -> Swift.Bool
  public typealias AnimatableData = Swift.Double
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func brightness(_ amount: Double) -> Modified<_BrightnessEffect> {
        return modifier(_BrightnessEffect(amount: amount))
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _ColorInvertEffect : Equatable {
  @inlinable public init() {}
  public typealias Body = Swift.Never
  public static func == (a: SwiftUI._ColorInvertEffect, b: SwiftUI._ColorInvertEffect) -> Swift.Bool
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func colorInvert() -> Modified<_ColorInvertEffect> {
        return modifier(_ColorInvertEffect())
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol AlignmentID {
  static func defaultValue(in context: ViewDimensions) -> Length
  static func _combineExplicit(childValue: Length, _ n: Int, into parentValue: inout Length?)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension AlignmentID {
  public static func _combineExplicit(childValue: Length, _ n: Int, into parentValue: inout Length?)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct HorizontalAlignment {
  public init(_ id: AlignmentID.Type)
  public static func == (a: SwiftUI.HorizontalAlignment, b: SwiftUI.HorizontalAlignment) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct VerticalAlignment {
  public init(_ id: AlignmentID.Type)
  public static func == (a: SwiftUI.VerticalAlignment, b: SwiftUI.VerticalAlignment) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension HorizontalAlignment {
  public static let leading: SwiftUI.HorizontalAlignment
  public static let center: SwiftUI.HorizontalAlignment
  public static let trailing: SwiftUI.HorizontalAlignment
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension VerticalAlignment {
  public static let top: SwiftUI.VerticalAlignment
  public static let center: SwiftUI.VerticalAlignment
  public static let bottom: SwiftUI.VerticalAlignment
  public static let firstTextBaseline: SwiftUI.VerticalAlignment
  public static let lastTextBaseline: SwiftUI.VerticalAlignment
}
extension HorizontalAlignment {
}
extension VerticalAlignment {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _ColorMultiplyEffect : EnvironmentalModifier, Equatable {
  public var color: Color
  @inlinable public init(color: Color) {
        self.color = color
    }
  public func resolve(in environment: EnvironmentValues) -> _Resolved
  public struct _Resolved {
    public typealias AnimatableData = AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>
    public var animatableData: AnimatableData {
      get
      set
    }
    public typealias Body = Swift.Never
  }
  public typealias ResolvedModifier = SwiftUI._ColorMultiplyEffect._Resolved
  public typealias Body = Swift.Never
  public static func == (a: SwiftUI._ColorMultiplyEffect, b: SwiftUI._ColorMultiplyEffect) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func colorMultiply(_ color: Color) -> Modified<_ColorMultiplyEffect> {
        return modifier(_ColorMultiplyEffect(color: color))
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _ContrastEffect : Equatable {
  public var amount: Double
  @inlinable public init(amount: Double) {
        self.amount = amount
    }
  public var animatableData: Double {
    get
    set
  }
  public typealias Body = Swift.Never
  public static func == (a: SwiftUI._ContrastEffect, b: SwiftUI._ContrastEffect) -> Swift.Bool
  public typealias AnimatableData = Swift.Double
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func contrast(_ amount: Double) -> Modified<_ContrastEffect> {
        return modifier(_ContrastEffect(amount: amount))
    }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(OSX, unavailable)
@available(tvOS, unavailable)
public enum DigitalCrownRotationalSensitivity {
  case low
  case medium
  case high
  public static func == (a: SwiftUI.DigitalCrownRotationalSensitivity, b: SwiftUI.DigitalCrownRotationalSensitivity) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(OSX, unavailable)
@available(tvOS, unavailable)
extension View {
  public func digitalCrownRotation<V>(_ binding: Binding<V>, from minValue: V, through maxValue: V, by stride: V.Stride? = nil, sensitivity: DigitalCrownRotationalSensitivity = .high, continuous: Bool = false, hapticFeedbackEnabled: Bool = true) -> Modified<_HiddenModifier> where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
  public func digitalCrownRotation<Value>(_ binding: Binding<Value>) -> Modified<_HiddenModifier> where Value : Swift.BinaryFloatingPoint
  public func _digitalCrownRotation<V>(_ binding: Binding<V>, configuration: _DigitalCrownConfiguration) -> Modified<_HiddenModifier> where V : Swift.BinaryFloatingPoint
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _GrayscaleEffect : Equatable {
  public var amount: Double
  @inlinable public init(amount: Double) {
        self.amount = amount
    }
  public var animatableData: Double {
    get
    set
  }
  public typealias Body = Swift.Never
  public static func == (a: SwiftUI._GrayscaleEffect, b: SwiftUI._GrayscaleEffect) -> Swift.Bool
  public typealias AnimatableData = Swift.Double
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func grayscale(_ amount: Double) -> Modified<_GrayscaleEffect> {
        return modifier(_GrayscaleEffect(amount: amount))
    }
}
@objc public class PlatformViewCoordinator : NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _HueRotationEffect : Equatable {
  public var angle: Angle
  @inlinable public init(angle: Angle) {
        self.angle = angle
    }
  public var animatableData: Angle.AnimatableData {
    get
    set
  }
  public typealias Body = Swift.Never
  public static func == (a: SwiftUI._HueRotationEffect, b: SwiftUI._HueRotationEffect) -> Swift.Bool
  public typealias AnimatableData = SwiftUI.Angle.AnimatableData
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func hueRotation(_ angle: Angle) -> Modified<_HueRotationEffect> {
        return modifier(_HueRotationEffect(angle: angle))
    }
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(OSX, unavailable)
public struct PreferredColorSchemeKey : PreferenceKey {
  public typealias Value = ColorScheme?
  public static func reduce(value: inout Value, nextValue: () -> Value)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @available(OSX, unavailable)
  public func preferredColorScheme(_ colorScheme: ColorScheme?) -> Modified<_PreferenceWritingModifier<PreferredColorSchemeKey>>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _LuminanceToAlphaEffect : Equatable {
  @inlinable public init() {}
  public typealias Body = Swift.Never
  public static func == (a: SwiftUI._LuminanceToAlphaEffect, b: SwiftUI._LuminanceToAlphaEffect) -> Swift.Bool
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func luminanceToAlpha() -> Modified<_LuminanceToAlphaEffect> {
        return modifier(_LuminanceToAlphaEffect())
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _SaturationEffect : Equatable {
  public var amount: Double
  @inlinable public init(amount: Double) {
        self.amount = amount
    }
  public var animatableData: Double {
    get
    set
  }
  public typealias Body = Swift.Never
  public typealias AnimatableData = Swift.Double
  public static func == (a: SwiftUI._SaturationEffect, b: SwiftUI._SaturationEffect) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func saturation(_ amount: Double) -> Modified<_SaturationEffect> {
        return modifier(_SaturationEffect(amount: amount))
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func transition(_ t: AnyTransition) -> Modified<_TraitWritingModifier<AnyTransition>>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _OpacityEffect : Equatable {
  public var opacity: Double
  @inlinable public init(opacity: Double) {
        self.opacity = opacity
    }
  public var animatableData: Double {
    get
    set
  }
  public static func _makeView(modifier: _GraphValue<_OpacityEffect>, inputs: _ViewInputs, body: @escaping (_Graph, _ViewInputs) -> _ViewOutputs) -> _ViewOutputs
  public typealias Body = Swift.Never
  public typealias AnimatableData = Swift.Double
  public static func == (a: SwiftUI._OpacityEffect, b: SwiftUI._OpacityEffect) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func opacity(_ opacity: Double) -> Modified<_OpacityEffect> {
        return modifier(_OpacityEffect(opacity: opacity))
    }
}
extension _OpacityEffect {
  @inlinable internal static var identity: _OpacityEffect {
    get {
        return self.init(opacity: 1)
    }
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension AnyTransition {
  public static let opacity: SwiftUI.AnyTransition
}
extension View {
  public func tabItemLabel<V>(_ item: V) -> Modified<_TraitWritingModifier<AnyView?>> where V : SwiftUI.View
}
extension StaticMember where Base : SwiftUI.PickerStyle {
  @available(OSX, unavailable)
  @available(tvOS, unavailable)
  public static var wheel: _WheelPickerStyle.Member {
    get
  }
}
@available(OSX, unavailable)
@available(tvOS, unavailable)
public struct _WheelPickerStyle : PickerStyle {
  public func _body<SelectionValue>(configuration: Configuration<SelectionValue>) -> _AutoResultView<_WheelPickerStyle> where SelectionValue : Swift.Hashable
  public typealias _Body = SwiftUI._AutoResultView<SwiftUI._WheelPickerStyle>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _AnimationModifier<Value> : _MultiViewModifier where Value : Swift.Equatable {
  public var animation: Animation?
  public var value: Value
  @inlinable public init(animation: Animation?, value: Value) {
        self.animation = animation
        self.value = value
    }
  public static func _makeView(modifier: _GraphValue<_AnimationModifier>, inputs: _ViewInputs, body: @escaping (_Graph, _ViewInputs) -> _ViewOutputs) -> _ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _AnimationModifier : Equatable {
  public static func == (a: SwiftUI._AnimationModifier<Value>, b: SwiftUI._AnimationModifier<Value>) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func animation<V>(_ animation: Animation?, value: V) -> Modified<_AnimationModifier<V>> where V : Swift.Equatable {
        return modifier(_AnimationModifier(animation: animation, value: value))
    }
}
public struct __Random : Equatable {
  public var seed: UInt32
  public init(seed: UInt32 = 0)
  mutating public func next() -> Double
  mutating public func next(_ mean: Double, range: Double) -> Double
  mutating public func normal() -> Double
  mutating public func normal(_ mean: Double, range: Double) -> Double
  mutating public func nextColor(mean: Double = 0.75, range: Double = 0.5) -> Color
  public static func == (a: SwiftUI.__Random, b: SwiftUI.__Random) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func tag<V>(_ tag: V) -> _AutoResultView<Self> where V : Swift.Hashable
}
public struct __ResizableImagesExampleLayout {
  public init()
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _BlendModeEffect : Equatable {
  public var blendMode: BlendMode
  @inlinable public init(blendMode: BlendMode) {
        self.blendMode = blendMode
    }
  public typealias Body = Swift.Never
  public static func == (a: SwiftUI._BlendModeEffect, b: SwiftUI._BlendModeEffect) -> Swift.Bool
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func blendMode(_ blendMode: BlendMode) -> Modified<_BlendModeEffect> {
        return modifier(_BlendModeEffect(blendMode: blendMode))
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func listRowBackground<V>(_ view: V?) -> Modified<_TraitWritingModifier<AnyView?>> where V : SwiftUI.View
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public enum ColorRenderingMode {
  case nonLinear
  case linear
  case extendedLinear
  public static func == (a: SwiftUI.ColorRenderingMode, b: SwiftUI.ColorRenderingMode) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _DrawingGroupEffect : _MultiViewModifier, Equatable {
  public var isOpaque: Bool {
    get
    set
  }
  public var colorMode: ColorRenderingMode {
    get
    set
  }
  public init(opaque: Bool = false, colorMode: ColorRenderingMode = .nonLinear)
  public static func _makeView(modifier: _GraphValue<_DrawingGroupEffect>, inputs: _ViewInputs, body: @escaping (_Graph, _ViewInputs) -> _ViewOutputs) -> _ViewOutputs
  public typealias Body = Swift.Never
  public static func == (a: SwiftUI._DrawingGroupEffect, b: SwiftUI._DrawingGroupEffect) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func drawingGroup(opaque: Bool = false, colorMode: ColorRenderingMode = .nonLinear) -> Modified<_DrawingGroupEffect>
}
@available(OSX 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct GroupBox<Label, Content> : __LegacyView where Label : SwiftUI.View, Content : SwiftUI.View {
  public init(label: Label, @SwiftUI.ViewBuilder content: () -> Content)
  public var body: _View {
    get
  }
  public typealias Body = SwiftUI._AutoViewWrapper
}
@available(OSX 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension GroupBox where Label == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder content: () -> Content)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct TextField : __LegacyView {
  public init(_ text: Binding<String>, placeholder: Text? = nil, onEditingChanged: @escaping (Bool) -> Void = { _ in }, onCommit: @escaping () -> Void = {})
  public init<T>(_ binding: Binding<T>, placeholder: Text? = nil, formatter: Formatter, onEditingChanged: @escaping (Bool) -> Void = { _ in }, onCommit: @escaping () -> Void = {})
  public var body: _View {
    get
  }
  public typealias Body = SwiftUI._AutoViewWrapper
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct AnyGesture<Value> {
  public init<T>(_ gesture: T) where Value == T.Value, T : SwiftUI.Gesture
  public static func _makeGesture(gesture: _GraphValue<AnyGesture>, inputs: _GestureInputs) -> _GestureOutputs<Value>
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _CompositingGroupEffect : Equatable {
  @inlinable public init() {}
  public typealias Body = Swift.Never
  public static func == (a: SwiftUI._CompositingGroupEffect, b: SwiftUI._CompositingGroupEffect) -> Swift.Bool
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func compositingGroup() -> Modified<_CompositingGroupEffect> {
        return modifier(_CompositingGroupEffect())
    }
}
public func __designTimeSelection<T>(_ instance: T, _ identifier: String) -> T
public func __designTimeSelection<T>(_ instance: T, _ identifier: String) -> _ModifiedContent<T, _IdentifiedModifier<__DesignTimeSelectionIdentifier>> where T : SwiftUI.View
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _DataProvider {
  associatedtype Data
  var data: Data { get }
  associatedtype Token
  mutating func addObserver(_ observer: _DataProviderObserver) -> Token
  mutating func removeObserver(token: Token)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _DataProviderObserver {
  func dataWillChange()
  func dataDidChange()
}
extension State {
}
extension Environment {
}
extension Binding {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _PreviewProvider {
  static var _previews: _View { get }
  static var _platform: PreviewPlatform? { get }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol PreviewProvider : SwiftUI._PreviewProvider {
  associatedtype Previews : SwiftUI.View
  static var previews: Previews { get }
  static var platform: PreviewPlatform? { get }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension PreviewProvider {
  public static var platform: PreviewPlatform? {
    get
  }
  public static var _previews: _View {
    get
  }
  public static var _platform: PreviewPlatform? {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public enum PreviewPlatform {
  case iOS
  case macOS
  case tvOS
  case watchOS
  public static func == (a: SwiftUI.PreviewPlatform, b: SwiftUI.PreviewPlatform) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public enum PreviewLayout {
  case device
  case sizeThatFits
  case fixed(width: Length, height: Length)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct PreviewDevice : RawRepresentable, ExpressibleByStringLiteral {
  public let rawValue: String
  public init(rawValue: String)
  public init(stringLiteral: String)
  public typealias RawValue = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func previewDevice(_ value: PreviewDevice?) -> Modified<_TraitWritingModifier<PreviewDevice?>>
  public func previewLayout(_ value: PreviewLayout) -> Modified<_TraitWritingModifier<PreviewLayout>>
  public func previewDisplayName(_ value: String?) -> Modified<_TraitWritingModifier<String?>>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _PreviewProvider {
  public static var _allPreviews: [_Preview] {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _Preview {
  public let id: Int
  public let contentType: String
  public var content: AnyView {
    get
  }
  public var displayName: String? {
    get
  }
  public var device: PreviewDevice? {
    get
  }
  public var layout: PreviewLayout {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func anchorPreference<A, K>(key _: K.Type = K.self, value: Anchor<A>.Source, transform: @escaping (Anchor<A>) -> K.Value) -> Modified<_AnchorWritingModifier<A, K>> where A : Swift.Equatable, K : SwiftUI.PreferenceKey {
        return modifier(.init(anchor: value, transform: transform))
    }
}
@_fixed_layout public struct _AnchorWritingModifier<AnchorValue, Key> : _MultiViewModifier where AnchorValue : Swift.Equatable, Key : SwiftUI.PreferenceKey {
  public var anchor: Anchor<AnchorValue>.Source
  public var transform: (Anchor<AnchorValue>) -> Key.Value
  @inlinable public init(anchor: Anchor<AnchorValue>.Source, transform: @escaping (Anchor<AnchorValue>) -> Key.Value) {
        self.anchor = anchor
        self.transform = transform
    }
  public static func _makeView(modifier: _GraphValue<_AnchorWritingModifier>, inputs: _ViewInputs, body: @escaping (_Graph, _ViewInputs) -> _ViewOutputs) -> _ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _ClipEffect<ClipShape> : Equatable where ClipShape : SwiftUI.Shape {
  public var shape: ClipShape
  public var style: FillStyle
  @inlinable public init(shape: ClipShape, style: FillStyle = FillStyle()) {
        self.shape = shape
        self.style = style
    }
  public var animatableData: ClipShape.AnimatableData {
    get
    set
  }
  public typealias Body = Swift.Never
  public typealias AnimatableData = ClipShape.AnimatableData
  public static func == (a: SwiftUI._ClipEffect<ClipShape>, b: SwiftUI._ClipEffect<ClipShape>) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func clipShape<S>(_ shape: S, style: FillStyle = FillStyle()) -> Modified<_ClipEffect<S>> where S : SwiftUI.Shape {
        return modifier(_ClipEffect(shape: shape, style: style))
    }
  @inlinable public func clipped(antialiased: Bool = false) -> Modified<_ClipEffect<Rectangle>> {
        return clipShape(Rectangle(),
            style: FillStyle(antialiased: antialiased))
    }
  @inlinable public func cornerRadius(_ radius: Length, antialiased: Bool = true) -> Modified<_ClipEffect<RoundedRectangle>> {
        return clipShape(RoundedRectangle(cornerRadius: radius),
            style: FillStyle(antialiased: antialiased))
    }
}
extension View {
  public func sliderStyle(_ style: AnySliderStyle) -> Modified<_EnvironmentKeyWritingModifier<AnySliderStyle>>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _ShadowEffect : EnvironmentalModifier, Equatable {
  public var color: Color
  public var radius: Length
  public var offset: CGSize
  @inlinable public init(color: Color, radius: Length, offset: CGSize) {
        self.color = color
        self.radius = radius
        self.offset = offset
    }
  public func resolve(in environment: EnvironmentValues) -> _Resolved
  public struct _Resolved {
    public typealias AnimatableData = AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<Length, CGSize.AnimatableData>>
    public var animatableData: AnimatableData {
      get
      set
    }
    public typealias Body = Swift.Never
  }
  public typealias ResolvedModifier = SwiftUI._ShadowEffect._Resolved
  public typealias Body = Swift.Never
  public static func == (a: SwiftUI._ShadowEffect, b: SwiftUI._ShadowEffect) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func shadow(color: Color = Color(.sRGBLinear, white: 0, opacity: 0.33), radius: Length, x: Length = 0, y: Length = 0) -> Modified<_ShadowEffect> {
        return modifier(
            _ShadowEffect(
                color: color,
                radius: radius,
                offset: CGSize(width: x, height: y)
        ))
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _DataSource {
  associatedtype Data
  func currentData(_ updateCallback: @escaping () -> Void) -> Data
  mutating func startObserving(_ updateCallback: @escaping () -> Void)
  mutating func stopObserving()
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _DataSource {
  mutating public func startObserving(_ updateCallback: @escaping () -> Void)
  mutating public func stopObserving()
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _Test {
  func setUpTest()
  func tearDownTest()
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _Test {
  public func setUpTest()
  public func tearDownTest()
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Animation {
  public static let `default`: SwiftUI.Animation
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _ScrollableContentProvider {
  associatedtype ScrollableContent : SwiftUI.View
  var scrollableContent: ScrollableContent { get }
  associatedtype Root : SwiftUI.View
  func root(scrollView: _ScrollView<Self>.Main) -> Root
  func decelerationTarget(contentOffset: CGPoint, originalContentOffset: CGPoint, velocity: _Velocity<CGSize>, size: CGSize) -> CGPoint?
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ScrollableContentProvider {
  public func decelerationTarget(contentOffset: CGPoint, originalContentOffset: CGPoint, velocity: _Velocity<CGSize>, size: CGSize) -> CGPoint?
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _ScrollViewGestureProvider {
  func scrollableDirections(proxy: _ScrollViewProxy) -> _EventDirections
  func gestureMask(proxy: _ScrollViewProxy) -> GestureMask
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ScrollViewGestureProvider {
  public func defaultScrollableDirections(proxy: _ScrollViewProxy) -> _EventDirections
  public func defaultGestureMask(proxy: _ScrollViewProxy) -> GestureMask
  public func scrollableDirections(proxy: _ScrollViewProxy) -> _EventDirections
  public func gestureMask(proxy: _ScrollViewProxy) -> GestureMask
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollLayout : Equatable {
  public var contentOffset: CGPoint
  public var size: CGSize
  public var visibleRect: CGRect
  public init(contentOffset: CGPoint, size: CGSize, visibleRect: CGRect)
  public static func == (a: SwiftUI._ScrollLayout, b: SwiftUI._ScrollLayout) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollViewConfig {
  public static let decelerationRateNormal: Swift.Double
  public static let decelerationRateFast: Swift.Double
  public enum ContentOffset {
    case initially(CGPoint)
    case binding(Binding<CGPoint>)
  }
  public var contentOffset: ContentOffset
  public var contentInsets: SwiftUI.EdgeInsets
  public var decelerationRate: Swift.Double
  public var alwaysBounceVertical: Swift.Bool
  public var alwaysBounceHorizontal: Swift.Bool
  public var gestureProvider: _ScrollViewGestureProvider
  public var stopDraggingImmediately: Swift.Bool
  public var isScrollEnabled: Swift.Bool
  public var showsHorizontalIndicator: Swift.Bool
  public var showsVerticalIndicator: Swift.Bool
  public var indicatorInsets: SwiftUI.EdgeInsets
  public init()
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollView<Provider> : View where Provider : SwiftUI._ScrollableContentProvider {
  public var contentProvider: Provider
  public var config: _ScrollViewConfig
  public init(contentProvider: Provider, config: _ScrollViewConfig = _ScrollViewConfig())
  public var body: GeometryReader<Provider.Root.Modified<_ClipEffect<Rectangle>>.Modified<_PaddingLayout>> {
    get
  }
  public struct Main : _UnaryView {
    public typealias Body = Swift.Never
  }
  public typealias Body = SwiftUI.GeometryReader<SwiftUI._ModifiedContent<SwiftUI._ModifiedContent<Provider.Root, SwiftUI._ClipEffect<SwiftUI.Rectangle>>, SwiftUI._PaddingLayout>>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func _scrollable(stretchChildrenToMaxHeight: Bool = false, horizontal: HAlignment? = .center, vertical: VAlignment? = .center) -> _ScrollView<_AligningContentProvider<Self>>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _AligningContentProvider<Content> : _ScrollableContentProvider where Content : SwiftUI.View {
  public var content: Content
  public var horizontal: HAlignment?
  public var vertical: VAlignment?
  public init(content: Content, horizontal: HAlignment? = nil, vertical: VAlignment? = nil)
  public var scrollableContent: Content.Modified<AligningContentProviderLayout> {
    get
  }
  public struct AligningContentProviderLayout {
    public typealias Body = Swift.Never
    public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  }
  public typealias ScrollableContent = SwiftUI._ModifiedContent<Content, SwiftUI._AligningContentProvider<Content>.AligningContentProviderLayout>
  public typealias Root = SwiftUI._DelayedPreferenceView<SwiftUI._ContainedScrollViewKey, SwiftUI._ModifiedContent<SwiftUI._ScrollView<SwiftUI._AligningContentProvider<Content>>.Main, SwiftUI._OverlayModifier<SwiftUI._PreferenceReadingView<SwiftUI._ContainedScrollViewKey, SwiftUI._ScrollOverlayView>>>>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension StaticMember where Base : SwiftUI.ListStyle {
  public static var plain: PlainListStyle.Member {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct PlainListStyle : ListStyle {
  public func _body<Selection>(configuration: _ListContainer<Selection>, children: _VariadicView.Children) -> _AutoResultView<PlainListStyle> where Selection : SwiftUI.SelectionManager
  public typealias _Body = SwiftUI._AutoResultView<SwiftUI.PlainListStyle>
}
extension CGPoint {
}
extension CGRect {
}
extension Array where Element == CoreGraphics.CGPoint {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol ToggleStyle {
  associatedtype Body : SwiftUI.View
  func body(configuration: Toggle<Label>) -> Body
  typealias Label = ToggleStyleLabel
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct ToggleStyleLabel : View {
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension ToggleStyle {
  public typealias Member = StaticMember<Self>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func toggleStyle<S>(_ style: S.Member) -> Modified<_ToggleStyleModifier<S>> where S : SwiftUI.ToggleStyle
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ToggleStyleModifier<Style> where Style : SwiftUI.ToggleStyle {
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _PagingViewConfig : Equatable {
  public enum Direction {
    case vertical
    case horizontal
    public static func == (a: SwiftUI._PagingViewConfig.Direction, b: SwiftUI._PagingViewConfig.Direction) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var direction: Direction
  public var size: Length?
  public var margin: Length
  public var spacing: Length
  public var constrainedDeceleration: Bool
  public init(direction: Direction = .horizontal, size: Length? = nil, margin: Length = 0, spacing: Length = 0, constrainedDeceleration: Bool = true)
  public static func == (a: SwiftUI._PagingViewConfig, b: SwiftUI._PagingViewConfig) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _PagingView<Views> : __LegacyView where Views : Swift.RandomAccessCollection, Views.Element : SwiftUI.View, Views.Index : Swift.Hashable {
  public var views: Views
  public var page: Binding<Views.Index>?
  public var config: _PagingViewConfig
  public var scrollViewConfig: _ScrollViewConfig
  public init(config: _PagingViewConfig = _PagingViewConfig(), page: Binding<Views.Index>? = nil, views: Views)
  public init(direction: _PagingViewConfig.Direction, page: Binding<Views.Index>? = nil, views: Views)
  public var body: _View {
    get
  }
  public typealias Body = SwiftUI._AutoViewWrapper
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Image {
  public enum TemplateRenderingMode {
    case template
    case original
    public static func == (a: SwiftUI.Image.TemplateRenderingMode, b: SwiftUI.Image.TemplateRenderingMode) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  @available(OSX, unavailable)
  public enum Scale {
    case small
    case medium
    case large
    public static func == (a: SwiftUI.Image.Scale, b: SwiftUI.Image.Scale) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
}
@available(iOS 13.0, *)
@available(OSX, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum UserInterfaceSizeClass : Hashable {
  case compact
  case regular
  public static func == (a: SwiftUI.UserInterfaceSizeClass, b: SwiftUI.UserInterfaceSizeClass) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public enum ColorScheme {
  case light
  case dark
  public static func == (a: SwiftUI.ColorScheme, b: SwiftUI.ColorScheme) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public enum ColorSchemeContrast {
  case standard
  case increased
  public static func == (a: SwiftUI.ColorSchemeContrast, b: SwiftUI.ColorSchemeContrast) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum ControlActiveState : Equatable {
  case key
  case active
  case inactive
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.ControlActiveState, b: SwiftUI.ControlActiveState) -> Swift.Bool
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(OSX, unavailable)
@available(tvOS, unavailable)
public enum _DeviceVariant : Equatable {
  case compact
  case regular
  case h394
  case h448
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI._DeviceVariant, b: SwiftUI._DeviceVariant) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func colorScheme(_ colorScheme: ColorScheme) -> Modified<_EnvironmentKeyWritingModifier<ColorScheme>>
  @available(OSX, unavailable)
  public func imageScale(_ scale: Image.Scale) -> Modified<_EnvironmentKeyWritingModifier<Image.Scale>>
  public func font(_ font: Font?) -> Modified<_EnvironmentKeyWritingModifier<Font?>>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension EnvironmentValues {
  public var font: Font? {
    get
    set
  }
  public var displayScale: Length {
    get
    set
  }
  @available(OSX, unavailable)
  public var imageScale: Image.Scale {
    get
    set
  }
  public var pixelLength: Length {
    get
  }
  public var locale: Locale {
    get
    set
  }
  public var calendar: Calendar {
    get
    set
  }
  public var timeZone: TimeZone {
    get
    set
  }
  public var colorScheme: ColorScheme {
    get
    set
  }
  public var colorSchemeContrast: ColorSchemeContrast {
    get
  }
}
@available(iOS 13.0, *)
@available(OSX, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension EnvironmentValues {
  public var horizontalSizeClass: UserInterfaceSizeClass? {
    get
    set
  }
  public var verticalSizeClass: UserInterfaceSizeClass? {
    get
    set
  }
}
@available(OSX 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension EnvironmentValues {
  public var controlActiveState: ControlActiveState {
    get
    set
  }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(OSX, unavailable)
@available(tvOS, unavailable)
extension EnvironmentValues {
  public var _deviceVariant: _DeviceVariant {
    get
    set
  }
}
extension StaticMember where Base : SwiftUI.PickerStyle {
  public static var `default`: _DefaultPickerStyle.Member {
    get
  }
}
public struct _DefaultPickerStyle : PickerStyle {
  public func _body<SelectionValue>(configuration: Configuration<SelectionValue>) -> AnyView where SelectionValue : Swift.Hashable
  public typealias _Body = SwiftUI.AnyView
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _FrameLayout {
  internal let width: Length?
  internal let height: Length?
  internal let alignment: Alignment
  @usableFromInline
  internal init(width: Length?, height: Length?, alignment: Alignment)
  public typealias Body = Swift.Never
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func frame(width: Length? = nil, height: Length? = nil, alignment: Alignment = .center) -> Modified<_FrameLayout> {
        return layout(
            _FrameLayout(width: width, height: height, alignment: alignment))
    }
  @available(*, deprecated, message: "Please pass one or more parameters.")
  @inlinable public func frame() -> Modified<_FrameLayout> {
        return frame(width: nil, height: nil, alignment: .center)
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _FlexFrameLayout {
  internal let minWidth: Length?
  internal let idealWidth: Length?
  internal let maxWidth: Length?
  internal let minHeight: Length?
  internal let idealHeight: Length?
  internal let maxHeight: Length?
  internal let alignment: Alignment
  @usableFromInline
  internal init(minWidth: Length? = nil, idealWidth: Length? = nil, maxWidth: Length? = nil, minHeight: Length? = nil, idealHeight: Length? = nil, maxHeight: Length? = nil, alignment: Alignment)
  public typealias Body = Swift.Never
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func frame(minWidth: Length? = nil, idealWidth: Length? = nil, maxWidth: Length? = nil, minHeight: Length? = nil, idealHeight: Length? = nil, maxHeight: Length? = nil, alignment: Alignment = .center) -> Modified<_FlexFrameLayout> {
        func areInIncreasingOrder(
            _ min: Length?, _ ideal: Length?, _ max: Length?
        ) -> Bool {
            let min = min ?? -.infinity
            let ideal = ideal ?? min
            let max = max ?? ideal
            return min <= ideal && ideal <= max
        }

        if !areInIncreasingOrder(minWidth, idealWidth, maxWidth)
            || !areInIncreasingOrder(minHeight, idealHeight, maxHeight)
        {
            os_log(
                .fault, log: Log.runtimeIssuesLog,
                "Contradictory frame constraints specified.")
        }

        return layout(
            _FlexFrameLayout(
                minWidth: minWidth,
                idealWidth: idealWidth, maxWidth: maxWidth,
                minHeight: minHeight,
                idealHeight: idealHeight, maxHeight: maxHeight,
                alignment: alignment))
    }
}
public struct AccessibilityModifier {
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public enum Edge : Int8, CaseIterable {
  case top, leading, bottom, trailing
  public struct Set : OptionSet {
    public typealias Element = Set
    public let rawValue: Int8
    public init(rawValue: Int8)
    public static let top: SwiftUI.Edge.Set
    public static let leading: SwiftUI.Edge.Set
    public static let bottom: SwiftUI.Edge.Set
    public static let trailing: SwiftUI.Edge.Set
    public static let all: Set
    public static let horizontal: Set
    public static let vertical: Set
    public init(_ e: Edge)
    public typealias ArrayLiteralElement = SwiftUI.Edge.Set.Element
    public typealias RawValue = Swift.Int8
  }
  public typealias RawValue = Swift.Int8
  public init?(rawValue: Swift.Int8)
  public var rawValue: Swift.Int8 {
    get
  }
  public typealias AllCases = [SwiftUI.Edge]
  public static var allCases: [SwiftUI.Edge] {
    get
  }
}
extension Edge.Set {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Command : Hashable {
  public init(_ selector: Selector)
  public static let delete: SwiftUI.Command
  public static let cut: SwiftUI.Command
  public static let copy: SwiftUI.Command
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.Command, b: SwiftUI.Command) -> Swift.Bool
}
extension StaticMember where Base : SwiftUI.PickerStyle {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static var popUpButton: _PopUpButtonPickerStyle.Member {
    get
  }
}
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _PopUpButtonPickerStyle : PickerStyle {
  public func _body<SelectionValue>(configuration: Configuration<SelectionValue>) -> _AutoResultView<_PopUpButtonPickerStyle> where SelectionValue : Swift.Hashable
  public typealias _Body = SwiftUI._AutoResultView<SwiftUI._PopUpButtonPickerStyle>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Popover {
  public var content: AnyView
  public var popoverArrowEdge: Edge?
  public var targetAnchor: Anchor<CGRect>.Source
  public var dismissHandler: () -> Void
  public init<V>(content: V, targetRect: Anchor<CGRect>.Source = .bounds, popoverArrowEdge: Edge? = .top, dismissHandler: @escaping () -> Void) where V : SwiftUI.View
  public init<V>(content: V, targetPoint: UnitPoint, popoverArrowEdge: Edge? = .top, dismissHandler: @escaping () -> Void) where V : SwiftUI.View
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func presentation(_ popover: Popover?) -> _AutoResultView<Self>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _IgnoredByLayoutEffect<Base> : GeometryEffect where Base : SwiftUI.GeometryEffect {
  public var base: Base
  public static var _affectsLayout: Bool {
    get
  }
  @inlinable public init(_ base: Base) {
        self.base = base
    }
  public func effectValue(size: CGSize) -> ProjectionTransform
  public var animatableData: Base.AnimatableData {
    get
    set
  }
  public typealias Body = Swift.Never
  public typealias AnimatableData = Base.AnimatableData
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _IgnoredByLayoutEffect : Equatable where Base : Swift.Equatable {
  public static func == (a: SwiftUI._IgnoredByLayoutEffect<Base>, b: SwiftUI._IgnoredByLayoutEffect<Base>) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension GeometryEffect {
  @inlinable public func ignoredByLayout() -> _IgnoredByLayoutEffect<Self> {
        return _IgnoredByLayoutEffect(self)
    }
}
extension EnvironmentValues {
  public var accessibilityEnabled: Bool {
    get
    set
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Path : Equatable {
  public init()
  public init(_ path: CGPath)
  public init(_ path: CGMutablePath)
  public init(_ rect: CGRect)
  public init(roundedRect rect: CGRect, cornerSize: CGSize, style: RoundedCornerStyle = .circular)
  public init(roundedRect rect: CGRect, cornerRadius: Length, style: RoundedCornerStyle = .circular)
  public init(ellipseIn rect: CGRect)
  public init(_ callback: (inout Path) -> ())
  public init?(string: String)
  public var stringRepresentation: String {
    get
  }
  public var cgPath: CGPath {
    get
  }
  public var isEmpty: Bool {
    get
  }
  public var boundingRect: CGRect {
    get
  }
  public func contains(_ p: CGPoint, eoFill: Bool = false) -> Bool
  public enum Element : Equatable {
    case move(to: CGPoint)
    case line(to: CGPoint)
    case quadCurve(to: CGPoint, control: CGPoint)
    case curve(to: CGPoint, control1: CGPoint, control2: CGPoint)
    case closeSubpath
    public static func == (a: SwiftUI.Path.Element, b: SwiftUI.Path.Element) -> Swift.Bool
  }
  public func forEach(_ body: (Element) -> Void)
  public func strokedPath(_ style: StrokeStyle) -> Path
  public func trimmedPath(from: CGFloat, to: CGFloat) -> Path
  public static func == (a: SwiftUI.Path, b: SwiftUI.Path) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Path : Shape {
  public func path(in _: CGRect) -> Path
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = SwiftUI.ShapeView<SwiftUI.Path, SwiftUI.ForegroundStyle>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Path {
  mutating public func move(to p: CGPoint)
  mutating public func addLine(to p: CGPoint)
  mutating public func addQuadCurve(to p: CGPoint, control cp: CGPoint)
  mutating public func addCurve(to p: CGPoint, control1 cp1: CGPoint, control2 cp2: CGPoint)
  mutating public func closeSubpath()
  mutating public func addRect(_ rect: CGRect, transform: CGAffineTransform = .identity)
  mutating public func addRoundedRect(in rect: CGRect, cornerSize: CGSize, style: RoundedCornerStyle = .circular, transform: CGAffineTransform = .identity)
  mutating public func addEllipse(in rect: CGRect, transform: CGAffineTransform = .identity)
  mutating public func addRects(_ rects: [CGRect], transform: CGAffineTransform = .identity)
  mutating public func addLines(_ lines: [CGPoint])
  mutating public func addRelativeArc(center: CGPoint, radius: Length, startAngle: Angle, delta: Angle, transform: CGAffineTransform = .identity)
  mutating public func addArc(center: CGPoint, radius: Length, startAngle: Angle, endAngle: Angle, clockwise: Bool, transform: CGAffineTransform = .identity)
  mutating public func addArc(tangent1End p1: CGPoint, tangent2End p2: CGPoint, radius: Length, transform: CGAffineTransform = .identity)
  mutating public func addPath(_ path: Path, transform: CGAffineTransform = .identity)
  public func applying(_ transform: CGAffineTransform) -> Path
  public func offsetBy(dx: Length, dy: Length) -> Path
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public enum RoundedCornerStyle {
  case circular
  case continuous
  public static func == (a: SwiftUI.RoundedCornerStyle, b: SwiftUI.RoundedCornerStyle) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct NavigationButton<Label, Destination> : __LegacyView where Label : SwiftUI.View, Destination : SwiftUI.View {
  public init(destination: Destination, isDetail: Bool = true, onTrigger: @escaping () -> Bool = { true }, @SwiftUI.ViewBuilder label: () -> Label)
  public init(destination: NavigationDestinationLink<Destination>, onTrigger: @escaping () -> Bool = { true }, @SwiftUI.ViewBuilder label: () -> Label)
  public init<Data, ID>(destination: DynamicNavigationDestinationLink<Data, ID, Destination>, presenting data: Data, onTrigger: @escaping () -> Bool = { true }, @SwiftUI.ViewBuilder label: () -> Label) where Data : Swift.Hashable, ID : Swift.Hashable
  public var body: _View {
    get
  }
  public typealias Body = SwiftUI._AutoViewWrapper
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Gradient : Equatable {
  public struct Stop : Equatable {
    public var color: Color
    public var location: CGFloat
    public init(color: Color, location: CGFloat)
    public static func == (a: SwiftUI.Gradient.Stop, b: SwiftUI.Gradient.Stop) -> Swift.Bool
  }
  public var stops: [Stop]
  public init(stops: [Stop])
  public init(colors: [Color])
  public static func == (a: SwiftUI.Gradient, b: SwiftUI.Gradient) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ViewInputs {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public enum BlendMode {
  case normal
  case multiply
  case screen
  case overlay
  case darken
  case lighten
  case colorDodge
  case colorBurn
  case softLight
  case hardLight
  case difference
  case exclusion
  case hue
  case saturation
  case color
  case luminosity
  case clear
  case copy
  case sourceIn
  case sourceOut
  case sourceAtop
  case destinationOver
  case destinationIn
  case destinationOut
  case destinationAtop
  case exclusiveOr
  case plusDarker
  case plusLighter
  public static func == (a: SwiftUI.BlendMode, b: SwiftUI.BlendMode) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Image {
  public enum Interpolation {
    case none
    case low
    case medium
    case high
    public static func == (a: SwiftUI.Image.Interpolation, b: SwiftUI.Image.Interpolation) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Image {
  public func interpolation(_ interpolation: Interpolation) -> Image
  public func antialiased(_ isAntialiased: Bool) -> Image
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _HiddenModifier : _ViewInputsModifier, Equatable {
  @inlinable public init() {}
  public static func _makeViewInputs(modifier: _GraphValue<_HiddenModifier>, inputs: inout _ViewInputs)
  public typealias Body = Swift.Never
  public static func == (a: SwiftUI._HiddenModifier, b: SwiftUI._HiddenModifier) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func hidden() -> Modified<_HiddenModifier>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct FillStyle : Equatable {
  public var isEOFilled: Bool
  public var isAntialiased: Bool
  public init(eoFill: Bool = false, antialiased: Bool = true)
  public static func == (a: SwiftUI.FillStyle, b: SwiftUI.FillStyle) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct StrokeStyle : Equatable {
  public var lineWidth: Length
  public var lineCap: CGLineCap
  public var lineJoin: CGLineJoin
  public var miterLimit: Length
  public var dash: [Length]
  public var dashPhase: Length
  public init(lineWidth: Length = 1, lineCap: CGLineCap = .butt, lineJoin: CGLineJoin = .miter, miterLimit: Length = 10, dash: [Length] = [Length](), dashPhase: Length = 0)
  public static func == (a: SwiftUI.StrokeStyle, b: SwiftUI.StrokeStyle) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension StrokeStyle : Animatable {
  public typealias AnimatableData = AnimatablePair<Length, AnimatablePair<Length, Length>>
  public var animatableData: AnimatableData {
    get
    set
  }
}
extension AnyTransition {
  public static var slide: AnyTransition {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func onPreferenceChange<K>(_ key: K.Type = K.self, perform action: @escaping (K.Value) -> Void) -> Modified<_PreferenceActionModifier<K>> where K : SwiftUI.PreferenceKey, K.Value : Swift.Equatable {
        return modifier(_PreferenceActionModifier(action: action))
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _PreferenceActionModifier<Key> : _MultiViewModifier where Key : SwiftUI.PreferenceKey, Key.Value : Swift.Equatable {
  public var action: (Key.Value) -> Void
  @inlinable public init(action: @escaping (Key.Value) -> Void) {
        self.action = action
    }
  public static func _makeView(modifier: _GraphValue<_PreferenceActionModifier>, inputs: _ViewInputs, body: @escaping (_Graph, _ViewInputs) -> _ViewOutputs) -> _ViewOutputs
  public typealias Body = Swift.Never
}
extension StaticMember where Base : SwiftUI.PickerStyle {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static var radioGroup: _RadioGroupPickerStyle.Member {
    get
  }
}
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _RadioGroupPickerStyle : PickerStyle {
  public func _body<SelectionValue>(configuration: Configuration<SelectionValue>) -> _AutoResultView<_RadioGroupPickerStyle> where SelectionValue : Swift.Hashable
  public typealias _Body = SwiftUI._AutoResultView<SwiftUI._RadioGroupPickerStyle>
}
extension View {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func horizontalRadioGroupLayout() -> _AutoResultView<Self>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol ListStyle {
  associatedtype _Body : SwiftUI.View
  func _body<Selection>(configuration: _ListContainer<Selection>, children: _VariadicView.Children) -> _Body where Selection : SwiftUI.SelectionManager
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension ListStyle {
  public typealias Member = StaticMember<Self>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func listStyle<S>(_ style: S.Member) -> _AutoResultView<(Self, S)> where S : SwiftUI.ListStyle
}
public struct SegmentedControl<SelectionValue, Content> : _UnaryView where SelectionValue : Swift.Hashable, Content : SwiftUI.View {
  public init(selection: Binding<SelectionValue>, @SwiftUI.ViewBuilder content: () -> Content)
  public static func _makeView(view: _GraphValue<SegmentedControl>, inputs: _ViewInputs) -> _ViewOutputs
  public static func _makeViewList(view: _GraphValue<SegmentedControl>, inputs: _ViewListInputs) -> _ViewListOutputs
  public typealias Body = Swift.Never
}
public struct _SegmentedControlContainer<SelectionValue> : _VariadicView.UnaryViewRoot where SelectionValue : Swift.Hashable {
  public init(selection: Binding<SelectionValue>)
  public func body(children: _VariadicView.Children) -> _AutoViewWrapper
  public typealias Body = SwiftUI._AutoViewWrapper
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct List<Selection, Content> : _UnaryView where Selection : SwiftUI.SelectionManager, Content : SwiftUI.View {
  @available(watchOS, unavailable)
  public init(selection: Binding<Selection>?, @SwiftUI.ViewBuilder content: () -> Content)
  public static func _init(selection: Binding<Selection>?, @SwiftUI.ViewBuilder content: () -> Content) -> List<Selection, Content>
  public static func _makeView(view: _GraphValue<List>, inputs: _ViewInputs) -> _ViewOutputs
  public static func _makeViewList(view: _GraphValue<List>, inputs: _ViewListInputs) -> _ViewListOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ListContainer<Selection> : _VariadicView.UnaryViewRoot where Selection : SwiftUI.SelectionManager {
  public static var _viewListOptions: Int {
    get
  }
  public func body(children: _VariadicView.Children) -> _AutoViewWrapper
  public typealias Body = SwiftUI._AutoViewWrapper
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension List {
  @available(watchOS, unavailable)
  public init<Data, RowContent>(_ data: Data, selection: Binding<Selection>?, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element.IdentifiedValue) -> RowContent) where Content == SwiftUI.ForEach<Data, SwiftUI.HStack<RowContent>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUI.View, Data.Element : SwiftUI.Identifiable
  @available(watchOS, unavailable)
  public init<Data, RowContent>(_ data: Data, selection: Binding<Selection>?, action: @escaping (Data.Element.IdentifiedValue) -> Void, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element.IdentifiedValue) -> RowContent) where Content == SwiftUI.ForEach<Data, SwiftUI.Button<SwiftUI.HStack<RowContent>>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUI.View, Data.Element : SwiftUI.Identifiable
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension List where Selection == Swift.Never {
  public init(@SwiftUI.ViewBuilder content: () -> Content)
  public init<Data, RowContent>(_ data: Data, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element.IdentifiedValue) -> RowContent) where Content == SwiftUI.ForEach<Data, SwiftUI.HStack<RowContent>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUI.View, Data.Element : SwiftUI.Identifiable
  public init<Data, RowContent>(_ data: Data, action: @escaping (Data.Element.IdentifiedValue) -> Void, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element.IdentifiedValue) -> RowContent) where Content == SwiftUI.ForEach<Data, SwiftUI.Button<SwiftUI.HStack<RowContent>>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUI.View, Data.Element : SwiftUI.Identifiable
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Section<Parent, Content, Footer> : _MultiView where Parent : SwiftUI.View, Content : SwiftUI.View, Footer : SwiftUI.View {
  public init(header: Parent, footer: Footer, @SwiftUI.ViewBuilder content: () -> Content)
  public static func _makeViewList(view: _GraphValue<Section>, inputs: _ViewListInputs) -> _ViewListOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Section where Parent == SwiftUI.EmptyView {
  public init(footer: Footer, @SwiftUI.ViewBuilder content: () -> Content)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Section where Footer == SwiftUI.EmptyView {
  public init(header: Parent, @SwiftUI.ViewBuilder content: () -> Content)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Section where Parent == SwiftUI.EmptyView, Footer == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder content: () -> Content)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _PreferenceTransformModifier<Key> : _MultiViewModifier where Key : SwiftUI.PreferenceKey {
  public var transform: (inout Key.Value) -> Void
  @inlinable public init(key _: Key.Type = Key.self, transform: @escaping (inout Key.Value) -> Void) {
        self.transform = transform
    }
  public static func _makeView(modifier: _GraphValue<_PreferenceTransformModifier>, inputs: _ViewInputs, body: @escaping (_Graph, _ViewInputs) -> _ViewOutputs) -> _ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func transformPreference<K>(_ key: K.Type = K.self, _ callback: @escaping (inout K.Value) -> Void) -> Modified<_PreferenceTransformModifier<K>> where K : SwiftUI.PreferenceKey {
        return modifier(_PreferenceTransformModifier(transform: callback))
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, *)
@available(watchOS, unavailable)
public struct MagnificationGesture : Gesture {
  public var minimumScaleDelta: CGFloat
  public init(minimumScaleDelta: CGFloat = 0.01)
  public static func _makeGesture(gesture: _GraphValue<MagnificationGesture>, inputs: _GestureInputs) -> _GestureOutputs<CGFloat>
  public typealias Value = CoreGraphics.CGFloat
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _VariadicView_Children : _MultiView {
  public static func _makeViewList(view: _GraphValue<_VariadicView.Children>, inputs: _ViewListInputs) -> _ViewListOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _VariadicView_Children : RandomAccessCollection {
  public struct Element : _UnaryView {
    public var id: AnyHashable {
      get
    }
    public func has<ID>(id: ID) -> Bool where ID : Swift.Hashable
    public func id<ID>(as _: ID.Type = ID.self) -> ID? where ID : Swift.Hashable
    public subscript<Value>(key: _ViewTraitKey<Value>) -> Value {
      get
      set
    }
    public static func _makeView(view: _GraphValue<Element>, inputs: _ViewInputs) -> _ViewOutputs
    public typealias Body = Swift.Never
  }
  public var startIndex: Int {
    get
  }
  public var endIndex: Int {
    get
  }
  public subscript(index: Int) -> Element {
    get
  }
  public typealias Index = Swift.Int
  public typealias Iterator = Swift.IndexingIterator<SwiftUI._VariadicView_Children>
  public typealias SubSequence = Swift.Slice<SwiftUI._VariadicView_Children>
  public typealias Indices = Swift.Range<Swift.Int>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct TupleView<T> {
  public var value: T
  @inlinable public init(_ value: T) { self.value = value }
  public static func _makeView(view: _GraphValue<TupleView>, inputs: _ViewInputs) -> _ViewOutputs
  public static func _makeViewList(view: _GraphValue<TupleView>, inputs: _ViewListInputs) -> _ViewListOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension StaticMember where Base : SwiftUI.DatePickerStyle {
  public static var `default`: DefaultDatePickerStyle.Member {
    get
  }
}
@available(iOS 13.0, OSX 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DefaultDatePickerStyle : DatePickerStyle {
  public func body(configuration: DatePicker<Label>) -> Body
  public struct Body : __LegacyView {
    public var body: _View {
      get
    }
    public typealias Body = SwiftUI._AutoViewWrapper
  }
}
@available(OSX 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension StaticMember where Base : SwiftUI.DatePickerStyle {
  public static var stepperField: StepperFieldDatePickerStyle.Member {
    get
  }
  public static var field: FieldDatePickerStyle.Member {
    get
  }
  public static var graphical: GraphicalDatePickerStyle.Member {
    get
  }
}
@available(OSX 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct StepperFieldDatePickerStyle : DatePickerStyle {
  public func body(configuration: DatePicker<Label>) -> Body
  public struct Body : __LegacyView {
    public var body: _View {
      get
    }
    public typealias Body = SwiftUI._AutoViewWrapper
  }
}
@available(OSX 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct FieldDatePickerStyle : DatePickerStyle {
  public func body(configuration: DatePicker<Label>) -> Body
  public struct Body : __LegacyView {
    public var body: _View {
      get
    }
    public typealias Body = SwiftUI._AutoViewWrapper
  }
}
@available(OSX 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct GraphicalDatePickerStyle : DatePickerStyle {
  public func body(configuration: DatePicker<Label>) -> Body
  public struct Body : __LegacyView {
    public var body: _View {
      get
    }
    public typealias Body = SwiftUI._AutoViewWrapper
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _FlipForRTLEffect : _MultiViewModifier, Equatable {
  public var isEnabled: Bool
  @inlinable public init(isEnabled: Bool = true) {
        self.isEnabled = isEnabled
    }
  public typealias Body = Swift.Never
  public static func == (a: SwiftUI._FlipForRTLEffect, b: SwiftUI._FlipForRTLEffect) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func flipsForRightToLeftLayoutDirection(_ enabled: Bool) -> Modified<_FlipForRTLEffect> {
        return modifier(_FlipForRTLEffect())
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _FlipForRTLEffect {
  public static func _makeView(modifier: _GraphValue<_FlipForRTLEffect>, inputs: _ViewInputs, body: @escaping (_Graph, _ViewInputs) -> _ViewOutputs) -> _ViewOutputs
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol InsettableShape : SwiftUI.Shape {
  associatedtype InsetShape : SwiftUI.Shape
  func inset(by amount: Length) -> InsetShape
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension InsettableShape {
  @inlinable public func strokeBorder<S>(_ content: S, style: StrokeStyle, antialiased: Bool = true) -> InsetShape.Stroked.Filled<S> where S : SwiftUI.ShapeStyle {
        return inset(by: style.lineWidth * 0.5)
            .stroke(style: style)
            .fill(content, style: FillStyle(antialiased: antialiased))
    }
  @inlinable public func strokeBorder(style: StrokeStyle, antialiased: Bool = true) -> InsetShape.Stroked.Filled<ForegroundStyle> {
        return inset(by: style.lineWidth * 0.5)
            .stroke(style: style)
            .fill(style: FillStyle(antialiased: antialiased))
    }
  @inlinable public func strokeBorder<S>(_ content: S, lineWidth: Length = 1, antialiased: Bool = true) -> InsetShape.Stroked.Filled<S> where S : SwiftUI.ShapeStyle {
        return strokeBorder(content, style: StrokeStyle(lineWidth: lineWidth),
            antialiased: antialiased)
    }
  @inlinable public func strokeBorder(lineWidth: Length = 1, antialiased: Bool = true) -> InsetShape.Stroked.Filled<ForegroundStyle> {
        return strokeBorder(style: StrokeStyle(lineWidth: lineWidth),
            antialiased: antialiased)
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Rectangle : InsettableShape {
  public func inset(by amount: Length) -> _Inset
  @_fixed_layout public struct _Inset : Shape {
    public var amount: Length
    @inlinable public init(amount: Length) {
            self.amount = amount
        }
    public func path(in rect: CGRect) -> Path
    public var animatableData: Length {
      get
      set
    }
    public typealias AnimatableData = SwiftUI.Length
    public typealias Body = SwiftUI.ShapeView<SwiftUI.Rectangle._Inset, SwiftUI.ForegroundStyle>
    public static func == (a: SwiftUI.Rectangle._Inset, b: SwiftUI.Rectangle._Inset) -> Swift.Bool
  }
  public typealias InsetShape = SwiftUI.Rectangle._Inset
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension RoundedRectangle : InsettableShape {
  @inlinable public func inset(by amount: Length) -> _Inset {
        return _Inset(base: self, amount: amount)
    }
  @_fixed_layout public struct _Inset : Shape {
    public var base: RoundedRectangle
    public var amount: Length
    @inlinable public init(base: RoundedRectangle, amount: Length) {
            (self.base, self.amount) = (base, amount)
        }
    public func path(in rect: CGRect) -> Path
    public typealias AnimatableData = AnimatablePair<RoundedRectangle.AnimatableData, Length>
    public var animatableData: AnimatableData {
      get
      set
    }
    public typealias Body = SwiftUI.ShapeView<SwiftUI.RoundedRectangle._Inset, SwiftUI.ForegroundStyle>
    public static func == (a: SwiftUI.RoundedRectangle._Inset, b: SwiftUI.RoundedRectangle._Inset) -> Swift.Bool
  }
  public typealias InsetShape = SwiftUI.RoundedRectangle._Inset
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Capsule : InsettableShape {
  @inlinable public func inset(by amount: Length) -> _Inset {
        return _Inset(amount: amount)
    }
  @_fixed_layout public struct _Inset : Shape {
    public var amount: Length
    @inlinable public init(amount: Length) {
            self.amount = amount
        }
    public func path(in rect: CGRect) -> Path
    public var animatableData: Length {
      get
      set
    }
    public typealias AnimatableData = SwiftUI.Length
    public typealias Body = SwiftUI.ShapeView<SwiftUI.Capsule._Inset, SwiftUI.ForegroundStyle>
    public static func == (a: SwiftUI.Capsule._Inset, b: SwiftUI.Capsule._Inset) -> Swift.Bool
  }
  public typealias InsetShape = SwiftUI.Capsule._Inset
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Ellipse : InsettableShape {
  @inlinable public func inset(by amount: Length) -> _Inset {
        return _Inset(amount: amount)
    }
  @_fixed_layout public struct _Inset : Shape {
    public var amount: Length
    @inlinable public init(amount: Length) {
            self.amount = amount
        }
    public func path(in rect: CGRect) -> Path
    public var animatableData: Length {
      get
      set
    }
    public typealias AnimatableData = SwiftUI.Length
    public typealias Body = SwiftUI.ShapeView<SwiftUI.Ellipse._Inset, SwiftUI.ForegroundStyle>
    public static func == (a: SwiftUI.Ellipse._Inset, b: SwiftUI.Ellipse._Inset) -> Swift.Bool
  }
  public typealias InsetShape = SwiftUI.Ellipse._Inset
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Circle : InsettableShape {
  @inlinable public func inset(by amount: Length) -> _Inset {
        return _Inset(amount: amount)
    }
  @_fixed_layout public struct _Inset : Shape {
    public var amount: Length
    @inlinable public init(amount: Length) {
            self.amount = amount
        }
    public func path(in rect: CGRect) -> Path
    public var animatableData: Length {
      get
      set
    }
    public typealias AnimatableData = SwiftUI.Length
    public typealias Body = SwiftUI.ShapeView<SwiftUI.Circle._Inset, SwiftUI.ForegroundStyle>
    public static func == (a: SwiftUI.Circle._Inset, b: SwiftUI.Circle._Inset) -> Swift.Bool
  }
  public typealias InsetShape = SwiftUI.Circle._Inset
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct GeometryReader<Content> : _UnaryView where Content : SwiftUI.View {
  public var content: (GeometryProxy) -> Content
  @inlinable public init(content: @escaping (GeometryProxy) -> Content) {
        self.content = content
    }
  public static func _makeView(view: _GraphValue<`Self`>, inputs: _ViewInputs) -> _ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct GeometryProxy {
  public var size: CGSize {
    get
  }
  public subscript<T>(anchor: Anchor<T>) -> T where T : Swift.Equatable {
    get
  }
  public var safeAreaInsets: EdgeInsets {
    get
  }
  public func frame(in coordinateSpace: CoordinateSpace) -> CGRect
}
extension View {
  public func textContentType(_ textContentType: UITextContentType?) -> Modified<_EnvironmentKeyWritingModifier<String?>>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Transaction {
  public var isContinuous: Bool {
    get
    set
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol Shape : Swift.Equatable, SwiftUI.Animatable, SwiftUI.View {
  func path(in rect: CGRect) -> Path
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol ShapeStyle {
  static func _makeView<S>(view: _GraphValue<ShapeView<S, Self>>, inputs: _ViewInputs) -> _ViewOutputs where S : SwiftUI.Shape
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension ShapeStyle {
  public typealias Member = StaticMember<Self>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ViewModifier_Content<Modifier> where Modifier : SwiftUI.ViewModifier {
  public static func _makeView(view: _GraphValue<_ViewModifier_Content>, inputs: _ViewInputs) -> _ViewOutputs
  public static func _makeViewList(view: _GraphValue<_ViewModifier_Content>, inputs: _ViewListInputs) -> _ViewListOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewModifier {
  public static func _makeView(modifier: _GraphValue<Self>, inputs: _ViewInputs, body: @escaping (_Graph, _ViewInputs) -> _ViewOutputs) -> _ViewOutputs
  public static func _makeViewList(modifier: _GraphValue<Self>, inputs: _ViewListInputs, body: @escaping (_Graph, _ViewListInputs) -> _ViewListOutputs) -> _ViewListOutputs
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Color : ShapeStyle {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct LinearGradient : ShapeStyle {
  public init(gradient: Gradient, startPoint: UnitPoint, endPoint: UnitPoint)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct RadialGradient : ShapeStyle {
  public init(gradient: Gradient, center: UnitPoint, startRadius: Length, endRadius: Length)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct AngularGradient : ShapeStyle {
  public init(gradient: Gradient, center: UnitPoint, startAngle: Angle = .zero, endAngle: Angle = .zero)
  public init(gradient: Gradient, center: UnitPoint, angle: Angle = .zero)
}
public struct __FluidSpringTestLayout {
  public static let count: Swift.Int
  public init(iteration: Int, location: CGPoint?)
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@_fixed_layout public struct __ScaleToFitView<V> : View where V : SwiftUI.View {
  public var content: V
  public var bounds: CGRect
  @inlinable public init(content: V, bounds: CGRect) {
        self.content = content
        self.bounds = bounds
    }
  public var body: GeometryReader<V.Modified<__SetFrameLayout>.Modified<_TransformEffect>> {
    get
  }
  public typealias Body = SwiftUI.GeometryReader<SwiftUI._ModifiedContent<SwiftUI._ModifiedContent<V, SwiftUI.__SetFrameLayout>, SwiftUI._TransformEffect>>
}
@_fixed_layout public struct __SetFrameLayout {
  @usableFromInline
  internal var frame: CGRect
  @inlinable public init(_ frame: CGRect) {
        self.frame = frame
    }
  public typealias Body = Swift.Never
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct PresentationButton<Label, Destination> : __LegacyView where Label : SwiftUI.View, Destination : SwiftUI.View {
  public var label: Label
  public var destination: Destination
  public var onTrigger: (() -> Void)?
  public init(_ label: Label, destination: Destination, onTrigger: (() -> Void)? = nil)
  public var body: _View {
    get
  }
  public typealias Body = SwiftUI._AutoViewWrapper
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension EnvironmentValues {
  public var isPresented: Binding<Bool>? {
    get
    set
  }
}
public protocol _BindableObjectViewProperty {
  static func _makeLinkForState<V>(in buffer: inout _DynamicViewPropertyBuffer, container: _GraphValue<V>, linkOffset: Int, inputs: inout _ViewInputs)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol BindableObject : AnyObject, SwiftUI.DynamicViewProperty, SwiftUI.Identifiable, SwiftUI._BindableObjectViewProperty {
  associatedtype PublisherType : Combine.Publisher where Self.PublisherType.Failure == Swift.Never
  var didChange: PublisherType { get }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@propertyDelegate public struct ObjectBinding<BindableObjectType> : DynamicViewProperty where BindableObjectType : SwiftUI.BindableObject {
  @dynamicMemberLookup public struct Wrapper {
    public subscript<Subject>(dynamicMember keyPath: ReferenceWritableKeyPath<BindableObjectType, Subject>) -> Binding<Subject> {
      get
    }
  }
  public var value: BindableObjectType
  public init(initialValue: BindableObjectType)
  public var delegateValue: Wrapper {
    get
  }
  public var storageValue: Wrapper {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension ObjectBinding {
  public static func _makeLink<V>(in buffer: inout _DynamicViewPropertyBuffer, container: _GraphValue<V>, linkOffset: Int, inputs: inout _ViewInputs)
  public static var _isUnary: Bool {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension BindableObject {
  public static func _makeLinkForState<V>(in buffer: inout _DynamicViewPropertyBuffer, container: _GraphValue<V>, linkOffset: Int, inputs: inout _ViewInputs)
}
@available(iOS 13.0, *)
@available(OSX, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct WheelDatePickerStyle : DatePickerStyle {
  public func body(configuration: DatePicker<Label>) -> Body
  public struct Body : __LegacyView {
    public var body: _View {
      get
    }
    public typealias Body = SwiftUI._AutoViewWrapper
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct VStack<Content> : _UnaryView where Content : SwiftUI.View {
  @usableFromInline
  internal var _tree: _VariadicView.Tree<_VStackLayout, Content>
  @inlinable public init(alignment: HorizontalAlignment = .center, spacing: Length? = nil, @SwiftUI.ViewBuilder content: () -> Content) {
        _tree = .init(
            root: _VStackLayout(alignment: alignment, spacing: spacing), content: content())
    }
  public static func _makeView(view: _GraphValue<VStack>, inputs: _ViewInputs) -> _ViewOutputs
  public static func _makeViewList(view: _GraphValue<VStack>, inputs: _ViewListInputs) -> _ViewListOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _VStackLayout {
  public var alignment: HorizontalAlignment
  public var spacing: Length?
  @inlinable public init(alignment: HorizontalAlignment = .center, spacing: Length? = nil) {
        self.alignment = alignment
        self.spacing = spacing
    }
  public typealias Body = Swift.Never
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
}
extension _VStackLayout {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol Gesture {
  associatedtype Value
  static func _makeGesture(gesture: _GraphValue<Self>, inputs: _GestureInputs) -> _GestureOutputs<Value>
  associatedtype Body : SwiftUI.Gesture
  var body: Body { get }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Never {
  public typealias Value = Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Gesture where Self.Value == Self.Body.Value {
  public static func _makeGesture(gesture: _GraphValue<Self>, inputs: _GestureInputs) -> _GestureOutputs<Body.Value>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _GestureInputs {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _GestureOutputs<Value> {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol DynamicViewProperty {
  static func _makeLink<V>(in buffer: inout _DynamicViewPropertyBuffer, container: _GraphValue<V>, linkOffset: Int, inputs: inout _ViewInputs)
  mutating func update()
  static var _isUnary: Bool { get }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension DynamicViewProperty {
  public static func _makeLink<V>(in buffer: inout _DynamicViewPropertyBuffer, container: _GraphValue<V>, linkOffset: Int, inputs: inout _ViewInputs)
  public static var _isUnary: Bool {
    get
  }
  mutating public func update()
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Optional : Gesture where Wrapped : SwiftUI.Gesture {
  public typealias Value = Wrapped.Value
  public static func _makeGesture(gesture: _GraphValue<Optional<Wrapped>>, inputs: _GestureInputs) -> _GestureOutputs<Wrapped.Value>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Optional where Wrapped : SwiftUI.Gesture {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct AnyView : View {
  public init<V>(_ view: V) where V : SwiftUI.View
  public static func _makeView(view: _GraphValue<AnyView>, inputs: _ViewInputs) -> _ViewOutputs
  public static func _makeViewList(view: _GraphValue<AnyView>, inputs: _ViewListInputs) -> _ViewListOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, *)
@available(watchOS, unavailable)
extension View {
  public func __masterDetailNavigationViewStyle() -> _AutoResultView<Self>
  public func __masterDetailNavigationViewStyle<V>(placeholder: V) -> _AutoResultView<Self> where V : SwiftUI.View
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Divider : _UnaryView {
  public init()
  public static func _makeView(view: _GraphValue<Divider>, inputs: _ViewInputs) -> _ViewOutputs
  public typealias Body = Swift.Never
}
public func __designTimeBoolean<T>(_ key: String, fallback: T) -> T where T : Swift.ExpressibleByBooleanLiteral
public func __designTimeFloat<T>(_ key: String, fallback: T) -> T where T : Swift.ExpressibleByFloatLiteral
public func __designTimeInteger<T>(_ key: String, fallback: T) -> T where T : Swift.ExpressibleByIntegerLiteral
public func __designTimeString<T>(_ key: String, fallback: T) -> T where T : Swift.ExpressibleByStringLiteral
public func __designTimeApplyIncrementalValues(_ updates: [[String : Any]])
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Gesture {
  public func onEnded(_ action: @escaping (Value) -> Void) -> _EndedGesture<Self>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Gesture where Self.Value : Swift.Equatable {
  public func onChanged(_ action: @escaping (Value) -> Void) -> _ChangedGesture<Self>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _EndedGesture<Content> where Content : SwiftUI.Gesture {
  public static func _makeGesture(gesture: _GraphValue<_EndedGesture>, inputs: _GestureInputs) -> _GestureOutputs<Content.Value>
  public typealias Value = Content.Value
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ChangedGesture<Content> where Content : SwiftUI.Gesture, Content.Value : Swift.Equatable {
  public static func _makeGesture(gesture: _GraphValue<_ChangedGesture>, inputs: _GestureInputs) -> _GestureOutputs<Content.Value>
  public typealias Value = Content.Value
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct Spacer {
  public var minLength: Length?
  @inlinable public init(minLength: Length? = nil) {
        self.minLength = minLength
    }
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _HSpacer {
  public var minWidth: Length?
  @inlinable public init(minWidth: Length? = nil) {
        self.minWidth = minWidth
    }
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _VSpacer {
  public var minHeight: Length?
  @inlinable public init(minHeight: Length? = nil) {
        self.minHeight = minHeight
    }
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Gesture {
  public func map<T>(_ body: @escaping (Value) -> T) -> _MapGesture<Self, T>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _MapGesture<Content, Value> where Content : SwiftUI.Gesture {
  public static func _makeGesture(gesture: _GraphValue<_MapGesture>, inputs: _GestureInputs) -> _GestureOutputs<Value>
  public typealias Body = Swift.Never
}
public struct ScrollView<Content> : __LegacyView where Content : SwiftUI.View {
  public var content: Content
  public var isScrollEnabled: Bool
  public var alwaysBounceHorizontal: Bool
  public var alwaysBounceVertical: Bool
  public var showsHorizontalIndicator: Bool
  public var showsVerticalIndicator: Bool
  public init(isScrollEnabled: Bool = true, alwaysBounceHorizontal: Bool = false, alwaysBounceVertical: Bool = false, showsHorizontalIndicator: Bool = true, showsVerticalIndicator: Bool = true, @SwiftUI.ViewBuilder content: () -> Content)
  public var body: _View {
    get
  }
  public typealias Body = SwiftUI._AutoViewWrapper
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension AnyTransition {
  public func combined(with other: AnyTransition) -> AnyTransition
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Gesture {
  @inlinable public func exclusively<Other>(before other: Other) -> ExclusiveGesture<Self, Other> where Other : SwiftUI.Gesture {
        return ExclusiveGesture(self, other)
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct ExclusiveGesture<First, Second> where First : SwiftUI.Gesture, Second : SwiftUI.Gesture {
  public enum Value {
    case first(First.Value)
    case second(Second.Value)
  }
  public var first: First
  public var second: Second
  @inlinable public init(_ first: First, _ second: Second) {
        (self.first, self.second) = (first, second)
    }
  public static func _makeGesture(gesture: _GraphValue<ExclusiveGesture>, inputs: _GestureInputs) -> _GestureOutputs<Value>
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension ExclusiveGesture.Value : Equatable where First.Value : Swift.Equatable, Second.Value : Swift.Equatable {
  public static func == (a: SwiftUI.ExclusiveGesture<First, Second>.Value, b: SwiftUI.ExclusiveGesture<First, Second>.Value) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension StaticMember where Base : SwiftUI.TextFieldStyle {
  public static var plain: PlainTextFieldStyle.Member {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct PlainTextFieldStyle : TextFieldStyle {
  public func _body(configuration: TextField) -> _AutoResultView<PlainTextFieldStyle>
  public typealias _Body = SwiftUI._AutoResultView<SwiftUI.PlainTextFieldStyle>
}
public struct TabbedView<SelectionValue, Content> : _UnaryView where SelectionValue : Swift.Hashable, Content : SwiftUI.View {
  public init(selection: Binding<SelectionValue>, @SwiftUI.ViewBuilder content: () -> Content)
  public static func _makeView(view: _GraphValue<TabbedView>, inputs: _ViewInputs) -> _ViewOutputs
  public static func _makeViewList(view: _GraphValue<TabbedView>, inputs: _ViewListInputs) -> _ViewListOutputs
  public typealias Body = Swift.Never
}
public struct _TabbedViewContainer<SelectionValue> : _VariadicView.UnaryViewRoot where SelectionValue : Swift.Hashable {
  public func body(children: _VariadicView.Children) -> _AutoViewWrapper
  public typealias Body = SwiftUI._AutoViewWrapper
}
extension TabbedView where SelectionValue == Swift.Int {
  public init(@SwiftUI.ViewBuilder content: () -> Content)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _EventDirections : OptionSet {
  public let rawValue: Int8
  public init(rawValue: Int8)
  public static let left: SwiftUI._EventDirections
  public static let right: SwiftUI._EventDirections
  public static let up: SwiftUI._EventDirections
  public static let down: SwiftUI._EventDirections
  public static let horizontal: _EventDirections
  public static let vertical: _EventDirections
  public static let all: _EventDirections
  public typealias Element = SwiftUI._EventDirections
  public typealias RawValue = Swift.Int8
  public typealias ArrayLiteralElement = SwiftUI._EventDirections
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension AnyTransition {
  public static func modifier<E>(active: E, identity: E) -> AnyTransition where E : SwiftUI.ViewModifier
}
extension View {
  public func navigationBarItem(title: Text, titleDisplayMode: NavigationBarItem.TitleDisplayMode = .automatic, hidesBackButton: Bool = false) -> _AutoResultView<Self>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  @available(OSX, unavailable)
  public func navigationBarHidden(_ hidden: Bool) -> _AutoResultView<Self>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  @available(OSX, unavailable)
  public func navigationBarTitle(_ title: Text) -> _AutoResultView<Self>
  @available(iOS 13.0, *)
  @available(OSX, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func navigationBarTitle(_ title: Text, displayMode: NavigationBarItem.TitleDisplayMode) -> _AutoResultView<Self>
  @available(iOS 13.0, tvOS 13.0, *)
  @available(OSX, unavailable)
  @available(watchOS, unavailable)
  public func navigationBarItems<L, T>(leading: L, trailing: T) -> _AutoResultView<Self> where L : SwiftUI.View, T : SwiftUI.View
  @available(iOS 13.0, tvOS 13.0, *)
  @available(OSX, unavailable)
  @available(watchOS, unavailable)
  public func navigationBarItems<L>(leading: L) -> _AutoResultView<Self> where L : SwiftUI.View
  @available(iOS 13.0, tvOS 13.0, *)
  @available(OSX, unavailable)
  @available(watchOS, unavailable)
  public func navigationBarItems<T>(trailing: T) -> _AutoResultView<Self> where T : SwiftUI.View
}
public struct NavigationBarItem {
  public enum TitleDisplayMode {
    case automatic
    case inline
    case large
    public static func == (a: SwiftUI.NavigationBarItem.TitleDisplayMode, b: SwiftUI.NavigationBarItem.TitleDisplayMode) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
}
extension StaticMember where Base : SwiftUI.ListStyle {
  public static var __universal: __UniversalListStyle.Member {
    get
  }
}
public struct __UniversalListStyle : ListStyle {
  public func _body<Selection>(configuration: _ListContainer<Selection>, children: _VariadicView.Children) -> _AutoViewWrapper where Selection : SwiftUI.SelectionManager
  public typealias _Body = SwiftUI._AutoViewWrapper
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _EventDebugTriggers : OptionSet {
  public let rawValue: Int
  public init(rawValue: Int)
  public static let responders: SwiftUI._EventDebugTriggers
  public static let sendEvents: SwiftUI._EventDebugTriggers
  public static let eventBindings: SwiftUI._EventDebugTriggers
  public static let eventPhases: SwiftUI._EventDebugTriggers
  public typealias Element = SwiftUI._EventDebugTriggers
  public typealias ArrayLiteralElement = SwiftUI._EventDebugTriggers
  public typealias RawValue = Swift.Int
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public var _eventDebugTriggers: _EventDebugTriggers
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Text {
  public enum TruncationMode {
    case head
    case tail
    case middle
    public static func == (a: SwiftUI.Text.TruncationMode, b: SwiftUI.Text.TruncationMode) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension EnvironmentValues {
  public var multilineTextAlignment: HAlignment {
    get
    set
  }
  public var truncationMode: Text.TruncationMode {
    get
    set
  }
  public var lineSpacing: Length {
    get
    set
  }
  public var allowsTightening: Bool {
    get
    set
  }
  public var lineLimit: Int? {
    get
    set
  }
  public var minimumScaleFactor: Length {
    get
    set
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func multilineTextAlignment(_ alignment: HAlignment) -> Modified<_EnvironmentKeyWritingModifier<HAlignment>>
  public func truncationMode(_ mode: Text.TruncationMode) -> Modified<_EnvironmentKeyWritingModifier<Text.TruncationMode>>
  public func lineSpacing(_ lineSpacing: Length) -> Modified<_EnvironmentKeyWritingModifier<Length>>
  public func allowsTightening(_ flag: Bool) -> Modified<_EnvironmentKeyWritingModifier<Bool>>
  public func lineLimit(_ number: Int?) -> Modified<_EnvironmentKeyWritingModifier<Int?>>
  public func minimumScaleFactor(_ factor: Length) -> Modified<_EnvironmentKeyWritingModifier<Length>>
}
@available(OSX 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension View {
  public func onCommand(_ command: Command, perform action: (() -> Void)?) -> _AutoViewWrapper
  public func onPaste(of supportedTypes: [String], perform action: @escaping ([NSItemProvider]) -> Void) -> _AutoViewWrapper
  public func onPaste<Payload>(of supportedTypes: [String], validator: @escaping ([NSItemProvider]) -> Payload?, perform action: @escaping (Payload) -> Void) -> _AutoViewWrapper
}
public struct _Placement : Equatable {
  public var proposedSize: CGSize {
    get
    set
  }
  public var anchor: UnitPoint
  public var anchorPosition: CGPoint
  public init(proposedSize: CGSize, anchoring anchor: UnitPoint = .topLeading, at anchorPosition: CGPoint)
  public static func == (a: SwiftUI._Placement, b: SwiftUI._Placement) -> Swift.Bool
}
public struct NavigationDestinationLink<Content> : DynamicViewProperty where Content : SwiftUI.View {
  public var presented: Binding<Bool>? {
    get
  }
  public init(_ content: Content, isDetail: Bool = true)
}
public struct DynamicNavigationDestinationLink<Data, ID, Content> : DynamicViewProperty where ID : Swift.Hashable, Content : SwiftUI.View {
  public var presentedData: Binding<Data?>? {
    get
  }
  public init(id: KeyPath<Data, ID>, isDetail: Bool = true, content: @escaping (Data) -> Content?)
  public static func _makeLink<V>(in buffer: inout _DynamicViewPropertyBuffer, container: _GraphValue<V>, linkOffset: Int, inputs: inout _ViewInputs)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct TapGesture {
  public var count: Int
  public init(count: Int = 1)
  public static func _makeGesture(gesture: _GraphValue<TapGesture>, inputs: _GestureInputs) -> _GestureOutputs<Void>
  public typealias Value = ()
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func tapAction(count: Int = 1, _ action: @escaping () -> Void) -> _AutoResultView<Self>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension AnyTransition {
  public func animation(_ animation: Animation?) -> AnyTransition
}
extension CGPoint {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public enum _ViewDebug {
  public enum Property : UInt32, Hashable {
    case type
    case value
    case transform
    case position
    case size
    case environment
    case phase
    case layoutComputer
    case displayList
    public typealias RawValue = Swift.UInt32
    public init?(rawValue: Swift.UInt32)
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public struct Properties : OptionSet {
    public let rawValue: UInt32
    public init(rawValue: UInt32)
    public static let type: SwiftUI._ViewDebug.Properties
    public static let value: SwiftUI._ViewDebug.Properties
    public static let transform: SwiftUI._ViewDebug.Properties
    public static let position: SwiftUI._ViewDebug.Properties
    public static let size: SwiftUI._ViewDebug.Properties
    public static let environment: SwiftUI._ViewDebug.Properties
    public static let phase: SwiftUI._ViewDebug.Properties
    public static let layoutComputer: SwiftUI._ViewDebug.Properties
    public static let displayList: SwiftUI._ViewDebug.Properties
    public static let all: SwiftUI._ViewDebug.Properties
    public typealias Element = SwiftUI._ViewDebug.Properties
    public typealias ArrayLiteralElement = SwiftUI._ViewDebug.Properties
    public typealias RawValue = Swift.UInt32
  }
  public struct Data {
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ViewDebug {
  public static func serializedData(_ viewDebugData: [_ViewDebug.Data]) -> Foundation.Data?
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ViewDebug.Data : Encodable {
  public func encode(to encoder: Encoder) throws
}
extension Optional {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct StaticMember<Base> {
  public var base: Base
  public init(_ base: Base)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension AnyTransition {
  public static let identity: SwiftUI.AnyTransition
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@propertyDelegate public struct GestureState<Value> : DynamicViewProperty {
  public init(initialValue: Value)
  public init(initialValue: Value, resetTransaction: Transaction)
  public var value: Value {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension GestureState where Value : Swift.ExpressibleByNilLiteral {
  public init(resetTransaction: Transaction = Transaction())
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Gesture {
  public func updating<StateType>(_ state: GestureState<StateType>, body: @escaping (Value, inout StateType, inout Transaction) -> Void) -> AnyGesture<Value>
}
@available(iOS 13.0, tvOS 13.0, *)
@available(OSX, unavailable)
@available(watchOS, unavailable)
public enum EditMode {
  case inactive
  case transient
  case active
  public var isEditing: Bool {
    get
  }
  public static func == (a: SwiftUI.EditMode, b: SwiftUI.EditMode) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@available(iOS 13.0, tvOS 13.0, *)
@available(OSX, unavailable)
@available(watchOS, unavailable)
extension EnvironmentValues {
  public var editMode: Binding<EditMode>? {
    get
    set
  }
}
@available(iOS 13.0, tvOS 13.0, *)
@available(OSX, unavailable)
@available(watchOS, unavailable)
public struct EditModeScopeModifier : ViewModifier {
  public func body(content: Content) -> Content.Modified<_EnvironmentKeyWritingModifier<Binding<EditMode>?>>
  public typealias Body = SwiftUI.EditModeScopeModifier.Content.Modified<SwiftUI._EnvironmentKeyWritingModifier<SwiftUI.Binding<SwiftUI.EditMode>?>>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ConfigurableContentWriter<Content, ContentBody> : _ViewInputsModifier where ContentBody : SwiftUI.View {
  public static func _makeViewInputs(modifier: _GraphValue<_ConfigurableContentWriter>, inputs: inout _ViewInputs)
  public typealias Body = Swift.Never
}
extension CGPoint {
}
extension Array where Element == CoreGraphics.CGPoint {
}
extension CGRect {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct AnyTransition {
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(OSX, unavailable)
@available(tvOS, unavailable)
extension StaticMember where Base : SwiftUI.ListStyle {
  public static var carousel: CarouselListStyle.Member {
    get
  }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(OSX, unavailable)
@available(tvOS, unavailable)
public struct CarouselListStyle : ListStyle {
  public func _body<Selection>(configuration: _ListContainer<Selection>, children: _VariadicView.Children) -> _AutoResultView<CarouselListStyle> where Selection : SwiftUI.SelectionManager
  public typealias _Body = SwiftUI._AutoResultView<SwiftUI.CarouselListStyle>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func listRowInsets(_ insets: EdgeInsets?) -> Modified<_TraitWritingModifier<EdgeInsets?>>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _IdentifiedViewProxy {
  public var identifier: AnyHashable
  public var boundingRect: CGRect {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public enum _IdentifiedViewTree {
  case empty
  case proxy(_IdentifiedViewProxy)
  case array([_IdentifiedViewTree])
  public func forEach(_ body: (_IdentifiedViewProxy) -> Void)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _IdentifiedViewsKey {
  public typealias Value = _IdentifiedViewTree
  public static let defaultValue: SwiftUI._IdentifiedViewTree
  public static func reduce(value: inout Value, nextValue: () -> Value)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _IdentifiedModifier<Identifier> : _MultiViewModifier, Equatable where Identifier : Swift.Hashable {
  public var identifier: Identifier
  @inlinable public init(identifier: Identifier) {
        self.identifier = identifier
    }
  public static func _makeView(modifier: _GraphValue<_IdentifiedModifier>, inputs: _ViewInputs, body: @escaping (_Graph, _ViewInputs) -> _ViewOutputs) -> _ViewOutputs
  public typealias Body = Swift.Never
  public static func == (a: SwiftUI._IdentifiedModifier<Identifier>, b: SwiftUI._IdentifiedModifier<Identifier>) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func _identified<I>(by identifier: I) -> Modified<_IdentifiedModifier<I>> where I : Swift.Hashable {
        return modifier(_IdentifiedModifier(identifier: identifier))
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollViewProxy : Equatable {
  public var config: _ScrollViewConfig {
    get
  }
  public var contentOffset: CGPoint {
    get
    set
  }
  public var minContentOffset: CGPoint {
    get
  }
  public var maxContentOffset: CGPoint {
    get
  }
  public var contentSize: CGSize {
    get
  }
  public var pageSize: CGSize {
    get
  }
  public var visibleRect: CGRect {
    get
  }
  public var isDragging: Bool {
    get
  }
  public var isDecelerating: Bool {
    get
  }
  public var isScrolling: Bool {
    get
  }
  public var isScrollingHorizontally: Bool {
    get
  }
  public var isScrollingVertically: Bool {
    get
  }
  public func setContentOffset(_ newOffset: CGPoint, animated: Bool, completion: ((Bool) -> Void)? = nil)
  public func scrollRectToVisible(_ rect: CGRect, animated: Bool, completion: ((Bool) -> Void)? = nil)
  public func contentOffsetOfNextPage(_ directions: _EventDirections) -> CGPoint
  public static func == (lhs: _ScrollViewProxy, rhs: _ScrollViewProxy) -> Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ContainedScrollViewKey {
  public typealias Value = _ScrollViewProxy?
  public static func reduce(value: inout Value, nextValue: () -> Value)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension AnyTransition {
  public static func move(edge: Edge) -> AnyTransition
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Font {
  public func italic() -> Font
  public func smallCaps() -> Font
  public func monospacedDigit() -> Font
  public func weight(_ weight: Weight) -> Font
  public func bold() -> Font
  public func _stylisticAlternative(_ alternative: _StylisticAlternative) -> Font
  public struct Weight : Hashable {
    public static let ultraLight: SwiftUI.Font.Weight
    public static let thin: SwiftUI.Font.Weight
    public static let light: SwiftUI.Font.Weight
    public static let regular: SwiftUI.Font.Weight
    public static let medium: SwiftUI.Font.Weight
    public static let semibold: SwiftUI.Font.Weight
    public static let bold: SwiftUI.Font.Weight
    public static let heavy: SwiftUI.Font.Weight
    public static let black: SwiftUI.Font.Weight
    public static func == (a: SwiftUI.Font.Weight, b: SwiftUI.Font.Weight) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public enum _StylisticAlternative : Int, Hashable {
    case one
    case two
    case three
    case four
    case five
    case six
    case seven
    case eight
    case nine
    case ten
    case eleven
    case twelve
    case thirteen
    case fourteen
    case fifteen
    case sixteen
    case seventeen
    case eighteen
    case nineteen
    case twenty
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
}
public struct __DesignTimeSelectionIdentifier : Hashable {
  public let identifier: String
  public init(_ identifier: String)
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.__DesignTimeSelectionIdentifier, b: SwiftUI.__DesignTimeSelectionIdentifier) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol Animatable {
  associatedtype AnimatableData : SwiftUI.VectorArithmetic
  var animatableData: AnimatableData { get set }
  static func _makeAnimatable(value: inout _GraphValue<Self>, inputs: _AnimatableInputs)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _AnimatableInputs {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Animatable where Self : SwiftUI.VectorArithmetic {
  public var animatableData: Self {
    get
    set
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Animatable where Self.AnimatableData == SwiftUI.EmptyAnimatableData {
  public var animatableData: AnimatableData {
    @inlinable get { return EmptyAnimatableData() }
    @inlinable set {}
  }
  public static func _makeAnimatable(value: inout _GraphValue<Self>, inputs: _AnimatableInputs)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Animatable {
  public static func _makeAnimatable(value: inout _GraphValue<Self>, inputs: _AnimatableInputs)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct EmptyAnimatableData : VectorArithmetic {
  @inlinable public init() {}
  @inlinable public static var zero: EmptyAnimatableData {
    get { return .init() }
  }
  @inlinable public static func += (lhs: inout EmptyAnimatableData, rhs: EmptyAnimatableData) {}
  @inlinable public static func -= (lhs: inout EmptyAnimatableData, rhs: EmptyAnimatableData) {}
  @inlinable public static func + (lhs: EmptyAnimatableData, rhs: EmptyAnimatableData) -> EmptyAnimatableData {
        return .zero
    }
  @inlinable public static func - (lhs: EmptyAnimatableData, rhs: EmptyAnimatableData) -> EmptyAnimatableData {
        return .zero
    }
  @inlinable mutating public func scale(by rhs: Double) {}
  @inlinable public var magnitudeSquared: Double {
    get { return 0 }
  }
  public static func == (a: SwiftUI.EmptyAnimatableData, b: SwiftUI.EmptyAnimatableData) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Optional : _View where Wrapped : SwiftUI.View {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Optional where Wrapped : SwiftUI.View {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Optional : View where Wrapped : SwiftUI.View {
  public typealias Body = Never
  public static func _makeView(view: _GraphValue<Optional>, inputs: _ViewInputs) -> _ViewOutputs
  public static func _makeViewList(view: _GraphValue<Optional>, inputs: _ViewListInputs) -> _ViewListOutputs
}
@available(OSX 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension StaticMember where Base : SwiftUI.ShapeStyle {
  public static var separator: SeparatorShapeStyle.Member {
    get
  }
  public static var __primaryFill: _SystemShapeStyle.Member {
    get
  }
  public static var __secondaryFill: _SystemShapeStyle.Member {
    get
  }
  public static var __tertiaryFill: _SystemShapeStyle.Member {
    get
  }
  public static var __quaternaryFill: _SystemShapeStyle.Member {
    get
  }
}
@available(OSX 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct SeparatorShapeStyle : ShapeStyle {
  public static func _makeView<S>(view: _GraphValue<ShapeView<S, SeparatorShapeStyle>>, inputs: _ViewInputs) -> _ViewOutputs where S : SwiftUI.Shape
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _SystemShapeStyle : ShapeStyle {
  public static func _makeView<S>(view: _GraphValue<ShapeView<S, _SystemShapeStyle>>, inputs: _ViewInputs) -> _ViewOutputs where S : SwiftUI.Shape
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public enum BasicAnimationTimingCurve : Equatable {
  case easeInOut
  case easeIn
  case easeOut
  case linear
  case custom(Double, Double, Double, Double)
  public static func == (a: SwiftUI.BasicAnimationTimingCurve, b: SwiftUI.BasicAnimationTimingCurve) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Animation {
  public static func basic(duration: Double = 0.35, curve: BasicAnimationTimingCurve = .easeInOut) -> Animation
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct AnimatablePair<First, Second> : VectorArithmetic where First : SwiftUI.VectorArithmetic, Second : SwiftUI.VectorArithmetic {
  public var first: First
  public var second: Second
  @inlinable public init(_ first: First, _ second: Second) {
        self.first = first
        self.second = second
    }
  @inlinable internal subscript() -> (First, Second) {
    get { return (first, second) }
    set { (first, second) = newValue }
  }
  @inlinable public static var zero: AnimatablePair {
    get {
        return .init(First.zero, Second.zero)
    }
  }
  @inlinable public static func += (lhs: inout AnimatablePair, rhs: AnimatablePair) {
        lhs.first += rhs.first
        lhs.second += rhs.second
    }
  @inlinable public static func -= (lhs: inout AnimatablePair, rhs: AnimatablePair) {
        lhs.first -= rhs.first
        lhs.second -= rhs.second
    }
  @inlinable public static func + (lhs: AnimatablePair, rhs: AnimatablePair) -> AnimatablePair {
        return .init(lhs.first + rhs.first, lhs.second + rhs.second)
    }
  @inlinable public static func - (lhs: AnimatablePair, rhs: AnimatablePair) -> AnimatablePair {
        return .init(lhs.first - rhs.first, lhs.second - rhs.second)
    }
  @inlinable mutating public func scale(by rhs: Double) {
        first.scale(by: rhs)
        second.scale(by: rhs)
    }
  @inlinable public var magnitudeSquared: Double {
    get {
        return first.magnitudeSquared + second.magnitudeSquared
    }
  }
  public static func == (a: SwiftUI.AnimatablePair<First, Second>, b: SwiftUI.AnimatablePair<First, Second>) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ScrollView.Main {
  public static func _makeView(view: _GraphValue<_ScrollView.Main>, inputs: _ViewInputs) -> _ViewOutputs
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public enum _ScrollViewAnimationMode {
  case never
  case discreteChanges
  case always
  public static func == (a: SwiftUI._ScrollViewAnimationMode, b: SwiftUI._ScrollViewAnimationMode) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Transaction {
  public var _scrollViewAnimates: _ScrollViewAnimationMode {
    get
    set
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct ForEach<Data, Content> where Data : Swift.RandomAccessCollection, Content : SwiftUI.View, Data.Element : SwiftUI.Identifiable {
  public var data: Data
  public var content: (Data.Element.IdentifiedValue) -> Content
  public init(_ data: Data, @SwiftUI.ViewBuilder content: @escaping (Data.Element.IdentifiedValue) -> Content)
  public static func _makeView(view: _GraphValue<ForEach>, inputs: _ViewInputs) -> _ViewOutputs
  public static func _makeViewList(view: _GraphValue<ForEach>, inputs: _ViewListInputs) -> _ViewListOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Animation {
  public static func spring(mass: Double = 1.0, stiffness: Double = 100.0, damping: Double = 10.0, initialVelocity: Double = 0.0) -> Animation
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public typealias _AutoViewWrapper = _AutoResultView<Void>
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _AutoResultView<T> {
  public var content: _View
  @inlinable public init<V>(_ view: V) where V : SwiftUI.View {
        content = view
    }
  @inlinable public init(untypedView view: _View) {
        content = view
    }
  public static func _makeView(view: _GraphValue<_AutoResultView>, inputs: _ViewInputs) -> _ViewOutputs
  public static func _makeViewList(view: _GraphValue<_AutoResultView>, inputs: _ViewListInputs) -> _ViewListOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct IDView<Content, ID> where Content : SwiftUI.View, ID : Swift.Hashable {
  public var content: Content
  public var id: ID
  @inlinable public init(_ content: Content, id: ID) {
        self.content = content
        self.id = id
    }
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func id<ID>(_ id: ID) -> IDView<Self, ID> where ID : Swift.Hashable {
        return .init(self, id: id)
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension IDView {
  public static func _makeView(view: _GraphValue<IDView>, inputs: _ViewInputs) -> _ViewOutputs
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension IDView {
  public static func _makeViewList(view: _GraphValue<IDView>, inputs: _ViewListInputs) -> _ViewListOutputs
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _PreferenceValue<Key> where Key : SwiftUI.PreferenceKey {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _DelayedPreferenceView<Key, Content> : _UnaryView where Key : SwiftUI.PreferenceKey, Content : SwiftUI.View {
  public var transform: (_PreferenceValue<Key>) -> Content
  @inlinable public init(transform: @escaping (_PreferenceValue<Key>) -> Content) {
        self.transform = transform
    }
  public static func _makeView(view: _GraphValue<_DelayedPreferenceView>, inputs: _ViewInputs) -> _ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension PreferenceKey {
  @inlinable public static func _delay<T>(_ transform: @escaping (_PreferenceValue<Self>) -> T) -> _DelayedPreferenceView<Self, T> where T : SwiftUI.View {
        return _DelayedPreferenceView(transform: transform)
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func overlayPreferenceValue<Key, T>(_ key: Key.Type = Key.self, _ transform: @escaping (Key.Value) -> T) -> _DelayedPreferenceView<Key, Modified<_OverlayModifier<_PreferenceReadingView<Key, T>>>> where Key : SwiftUI.PreferenceKey, T : SwiftUI.View {
        return Key._delay { self.overlay($0._force(transform)) }
    }
  @inlinable public func backgroundPreferenceValue<Key, T>(_ key: Key.Type = Key.self, _ transform: @escaping (Key.Value) -> T) -> _DelayedPreferenceView<Key, Modified<_BackgroundModifier<_PreferenceReadingView<Key, T>>>> where Key : SwiftUI.PreferenceKey, T : SwiftUI.View {
        return Key._delay { self.background($0._force(transform)) }
    }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(OSX, unavailable)
@available(tvOS, unavailable)
public enum _CrownHapticsConfiguration {
  case none
  case infiniteScrolling
  case finiteScrolling(Length, Length)
  case platters([Notch])
  public struct Notch {
    public enum Strength {
      case weak
      case standard
      case strong
      public static func == (a: SwiftUI._CrownHapticsConfiguration.Notch.Strength, b: SwiftUI._CrownHapticsConfiguration.Notch.Strength) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
    }
    public init(from: Length, to: Length, strength: Strength)
  }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(OSX, unavailable)
@available(tvOS, unavailable)
public protocol _CrownHapticsConfigurationProvider {
  func makeConfiguration() -> _CrownHapticsConfiguration
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(OSX, unavailable)
@available(tvOS, unavailable)
extension _CrownHapticsConfigurationProvider {
  public func notchRadius(forHeight notchHeight: Length) -> Length
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Animation {
  public func delay(_ delay: Double) -> Animation
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Animation {
  public func speed(_ speed: Double) -> Animation
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Text : _UnaryView {
  public static func _makeView(view: _GraphValue<Text>, inputs: _ViewInputs) -> _ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _SymmetricallyScaledText : _UnaryView {
  public var source: Text
  public var reference: Text
  public init(source: Text, reference: Text)
  public static func _makeView(view: _GraphValue<_SymmetricallyScaledText>, inputs: _ViewInputs) -> _ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Animation {
  public static let empty: SwiftUI.Animation
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Text {
  public func color(_ color: Color?) -> Text
  public func font(_ font: Font?) -> Text
  public func fontWeight(_ weight: Font.Weight?) -> Text
  public func bold() -> Text
  public func italic() -> Text
  public func strikethrough(_ active: Bool = true, color: Color? = nil) -> Text
  public func underline(_ active: Bool = true, color: Color? = nil) -> Text
  public func kerning(_ kerning: Length) -> Text
  public func baselineOffset(_ baselineOffset: Length) -> Text
  public func _stylisticAlternative(_ alternative: Font._StylisticAlternative) -> Text
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension AnyTransition {
  public static func asymmetric(insertion: AnyTransition, removal: AnyTransition) -> AnyTransition
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol EnvironmentalModifier : SwiftUI.ViewModifier where Self.Body == Swift.Never {
  associatedtype ResolvedModifier : SwiftUI.ViewModifier
  func resolve(in environment: EnvironmentValues) -> ResolvedModifier
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension EnvironmentalModifier {
  public static func _makeView(modifier: _GraphValue<Self>, inputs: _ViewInputs, body: @escaping (_Graph, _ViewInputs) -> _ViewOutputs) -> _ViewOutputs
  public static func _makeViewList(modifier: _GraphValue<Self>, inputs: _ViewListInputs, body: @escaping (_Graph, _ViewListInputs) -> _ViewListOutputs) -> _ViewListOutputs
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Font {
  public static let largeTitle: SwiftUI.Font
  public static let title: SwiftUI.Font
  public static var headline: SwiftUI.Font
  public static var subheadline: SwiftUI.Font
  public static var body: SwiftUI.Font
  public static var callout: SwiftUI.Font
  public static var footnote: SwiftUI.Font
  public static var caption: SwiftUI.Font
  public static func system(_ style: TextStyle, design: Design = .default) -> Font
  public static func system(size: Length, design: Design = .default) -> Font
  public static func custom(_ name: String, size: Length) -> Font
  public enum TextStyle {
    case largeTitle
    case title
    case headline
    case subheadline
    case body
    case callout
    case footnote
    case caption
    public static func == (a: SwiftUI.Font.TextStyle, b: SwiftUI.Font.TextStyle) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public enum Design : Hashable {
    case `default`
    case serif
    case rounded
    case monospaced
    public static func == (a: SwiftUI.Font.Design, b: SwiftUI.Font.Design) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
}
@available(OSX 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension StaticMember where Base : SwiftUI.ShapeStyle {
  public static func selection(_ isSelected: Bool = true) -> SelectionShapeStyle.Member
}
@available(OSX 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct SelectionShapeStyle : ShapeStyle {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_functionBuilder public struct ViewBuilder {
  @_transparent public static func buildBlock() -> EmptyView {
        return EmptyView()
    }
  @_transparent public static func buildBlock<Content>(_ content: Content) -> Content where Content : SwiftUI.View {
        return content
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewBuilder {
  @_transparent public static func buildIf<Content>(_ content: Content?) -> Content? where Content : SwiftUI.View {
        return content
    }
  @_transparent public static func buildEither<TrueContent, FalseContent>(first: TrueContent) -> ConditionalContent<TrueContent, FalseContent> where TrueContent : SwiftUI.View, FalseContent : SwiftUI.View {
    return .init(storage: .trueContent(first))
  }
  @_transparent public static func buildEither<TrueContent, FalseContent>(second: FalseContent) -> ConditionalContent<TrueContent, FalseContent> where TrueContent : SwiftUI.View, FalseContent : SwiftUI.View {
    return .init(storage: .falseContent(second))
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _CircleLayout {
  public let radius: Length
  public init(radius: Length)
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
public enum AccessibilityVisibility {
  case element
  case containerElement
  case container
  case hidden
  public static func == (a: SwiftUI.AccessibilityVisibility, b: SwiftUI.AccessibilityVisibility) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension View {
  public func accessibility(visibility: AccessibilityVisibility) -> Modified<AccessibilityModifier>
  public func accessibility(label: Text) -> Modified<AccessibilityModifier>
  public func accessibility(value: Text) -> Modified<AccessibilityModifier>
  public func accessibility(hint: Text) -> Modified<AccessibilityModifier>
  public func accessibility(addTraits traits: AccessibilityTraits) -> Modified<AccessibilityModifier>
  public func accessibility(removeTraits traits: AccessibilityTraits) -> Modified<AccessibilityModifier>
  public func accessibility(identifier: String) -> Modified<AccessibilityModifier>
  public func accessibility(activationPoint: CGPoint) -> Modified<AccessibilityModifier>
  public func accessibility(activationPoint: UnitPoint) -> Modified<AccessibilityModifier>
}
extension _ModifiedContent where Modifier == SwiftUI.AccessibilityModifier {
  public func accessibility(visibility: AccessibilityVisibility) -> _ModifiedContent
  public func accessibility(label: Text) -> _ModifiedContent
  public func accessibility(value: Text) -> _ModifiedContent
  public func accessibility(hint: Text) -> _ModifiedContent
  public func accessibility(addTraits traits: AccessibilityTraits) -> _ModifiedContent
  public func accessibility(removeTraits traits: AccessibilityTraits) -> _ModifiedContent
  public func accessibility(identifier: String) -> _ModifiedContent
  public func accessibility(activationPoint: CGPoint) -> _ModifiedContent
  public func accessibility(activationPoint: UnitPoint) -> _ModifiedContent
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Binding {
  public init<V>(_ base: Binding<V>) where Value == V?
  public init?(_ base: Binding<Value?>)
  public init<V>(_ base: Binding<V>) where V : Swift.Hashable
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Binding where Value : Swift.SetAlgebra, Value.Element : Swift.Hashable {
  public func contains(_ element: Value.Element) -> Binding<Bool>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Binding where Value : Swift.RawRepresentable {
  public var rawValue: Binding<Value.RawValue> {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Binding where Value : Swift.CaseIterable, Value : Swift.Equatable {
  public var caseIndex: Binding<Value.AllCases.Index> {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Shape {
  public typealias Filled<S> = ShapeView<Self, S> where S : SwiftUI.ShapeStyle
  @inlinable public func fill<S>(_ content: S, style: FillStyle = FillStyle()) -> Filled<S> where S : SwiftUI.ShapeStyle {
        return ShapeView(shape: self, style: content, fillStyle: style)
    }
  @inlinable public func fill<S>(_ content: S.Member, style: FillStyle = FillStyle()) -> Filled<S> where S : SwiftUI.ShapeStyle {
        return ShapeView(shape: self, style: content.base, fillStyle: style)
    }
  @inlinable public func fill(style: FillStyle = FillStyle()) -> Filled<ForegroundStyle> {
        return ShapeView(shape: self, style: .init(), fillStyle: style)
    }
  @inlinable public func stroke<S>(_ content: S, style: StrokeStyle) -> Stroked.Filled<S> where S : SwiftUI.ShapeStyle {
        return stroke(style: style).fill(content)
    }
  @inlinable public func stroke<S>(_ content: S.Member, style: StrokeStyle) -> Stroked.Filled<S> where S : SwiftUI.ShapeStyle {
        return stroke(style: style).fill(content)
    }
  @inlinable public func stroke<S>(_ content: S, lineWidth: Length = 1) -> Stroked.Filled<S> where S : SwiftUI.ShapeStyle {
        return stroke(content, style: StrokeStyle(lineWidth: lineWidth))
    }
  @inlinable public func stroke<S>(_ content: S.Member, lineWidth: Length = 1) -> Stroked.Filled<S> where S : SwiftUI.ShapeStyle {
        return stroke(content, style: StrokeStyle(lineWidth: lineWidth))
    }
  @inlinable public func stroke(style: StrokeStyle) -> Stroked.Filled<ForegroundStyle> {
        return stroke(style: style).fill()
    }
  @inlinable public func stroke(lineWidth: Length = 1) -> Stroked.Filled<ForegroundStyle> {
        return stroke(style: StrokeStyle(lineWidth: lineWidth))
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Shape {
  public var body: Filled<ForegroundStyle> {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct ShapeView<Content, Style> : _UnaryView where Content : SwiftUI.Shape, Style : SwiftUI.ShapeStyle {
  public var shape: Content
  public var style: Style
  public var fillStyle: FillStyle
  @inlinable public init(shape: Content, style: Style, fillStyle: FillStyle = FillStyle()) {
        self.shape = shape
        self.style = style
        self.fillStyle = fillStyle
    }
  public static func _makeView(view: _GraphValue<ShapeView>, inputs: _ViewInputs) -> _ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Color {
  public init(_ name: String, bundle: Bundle? = nil)
  public static var _mainNamedBundle: Bundle?
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _PreferenceReadingView<Key, Content> : _UnaryView where Key : SwiftUI.PreferenceKey, Content : SwiftUI.View {
  public var value: _PreferenceValue<Key>
  public var transform: (Key.Value) -> Content
  @inlinable public init(value: _PreferenceValue<Key>, transform: @escaping (Key.Value) -> Content) {
        self.value = value
        self.transform = transform
    }
  public static func _makeView(view: _GraphValue<_PreferenceReadingView>, inputs: _ViewInputs) -> _ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _PreferenceValue {
  @inlinable public func _force<T>(_ transform: @escaping (Key.Value) -> T) -> _PreferenceReadingView<Key, T> where T : SwiftUI.View {
        return _PreferenceReadingView(value: self, transform: transform)
    }
  @inlinable public func _force(_ transform: @escaping (Key.Value) -> _View) -> _PreferenceReadingView<Key, _AutoViewWrapper> {
        return _PreferenceReadingView(value: self) {
            _AutoViewWrapper(untypedView: transform($0))
        }
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Animation {
  public func repeatCount(_ repeatCount: Int, autoreverses: Bool = true) -> Animation
  public func repeatForever(autoreverses: Bool = true) -> Animation
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ViewListInputs {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ViewListOutputs {
}
extension Image {
}
extension Text {
}
extension AnyView {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct HStack<Content> : _UnaryView where Content : SwiftUI.View {
  @usableFromInline
  internal var _tree: _VariadicView.Tree<_HStackLayout, Content>
  @inlinable public init(alignment: VerticalAlignment = .center, spacing: Length? = nil, @SwiftUI.ViewBuilder content: () -> Content) {
        _tree = .init(
            root: _HStackLayout(alignment: alignment, spacing: spacing), content: content())
    }
  public static func _makeView(view: _GraphValue<HStack>, inputs: _ViewInputs) -> _ViewOutputs
  public static func _makeViewList(view: _GraphValue<HStack>, inputs: _ViewListInputs) -> _ViewListOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _HStackLayout {
  public var alignment: VerticalAlignment
  public var spacing: Length?
  @inlinable public init(alignment: VerticalAlignment = .center, spacing: Length? = nil) {
        self.alignment = alignment
        self.spacing = spacing
    }
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
public var _disableAnimations: Swift.Bool
extension Image {
  @available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
  public init(systemName: String)
}
public struct AccessibilityTraits : SetAlgebra {
  public static let isButton: SwiftUI.AccessibilityTraits
  public static let isHeader: SwiftUI.AccessibilityTraits
  public static let isSelected: SwiftUI.AccessibilityTraits
  public static let isLink: SwiftUI.AccessibilityTraits
  public static let isSearchField: SwiftUI.AccessibilityTraits
  public static let isImage: SwiftUI.AccessibilityTraits
  public static let playsSound: SwiftUI.AccessibilityTraits
  public static let isKeyboardKey: SwiftUI.AccessibilityTraits
  public static let isStaticText: SwiftUI.AccessibilityTraits
  public static let isSummaryElement: SwiftUI.AccessibilityTraits
  public static let updatesFrequently: SwiftUI.AccessibilityTraits
  public static let startsMediaSession: SwiftUI.AccessibilityTraits
  public static let allowsDirectInteraction: SwiftUI.AccessibilityTraits
  public static let causesPageTurn: SwiftUI.AccessibilityTraits
  public static let isModal: SwiftUI.AccessibilityTraits
  public init()
  mutating public func formUnion(_ other: AccessibilityTraits)
  public func intersection(_ other: AccessibilityTraits) -> AccessibilityTraits
  mutating public func formIntersection(_ other: AccessibilityTraits)
  public func symmetricDifference(_ other: AccessibilityTraits) -> AccessibilityTraits
  mutating public func formSymmetricDifference(_ other: AccessibilityTraits)
  public func contains(_ member: AccessibilityTraits) -> Bool
  public func union(_ other: AccessibilityTraits) -> AccessibilityTraits
  mutating public func remove(_ member: AccessibilityTraits) -> AccessibilityTraits?
  mutating public func insert(_ newMember: AccessibilityTraits) -> (inserted: Bool, memberAfterInsert: AccessibilityTraits)
  mutating public func update(with newMember: AccessibilityTraits) -> AccessibilityTraits?
  public typealias Element = SwiftUI.AccessibilityTraits
  public typealias ArrayLiteralElement = SwiftUI.AccessibilityTraits
  public static func == (a: SwiftUI.AccessibilityTraits, b: SwiftUI.AccessibilityTraits) -> Swift.Bool
}
public struct _DisclosureIndicator : __LegacyView {
  public var body: _View {
    get
  }
  public init()
  public typealias Body = SwiftUI._AutoViewWrapper
}
@available(OSX 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension StaticMember where Base : SwiftUI.TextFieldStyle {
  public static var squareBorder: SquareBorderTextFieldStyle.Member {
    get
  }
}
@available(OSX 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct SquareBorderTextFieldStyle : TextFieldStyle {
  public func _body(configuration: TextField) -> _AutoResultView<PlainTextFieldStyle>
  public typealias _Body = SwiftUI._AutoResultView<SwiftUI.PlainTextFieldStyle>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func _defaultContext() -> _AutoResultView<Self>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _Rotation3DEffect : GeometryEffect, Equatable {
  public var angle: Angle
  public var axis: (x: CGFloat, y: CGFloat, z: CGFloat)
  public var anchor: UnitPoint
  public var anchorZ: Length
  public var perspective: Length
  @inlinable public init(angle: Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint = .center, anchorZ: Length = 0, perspective: CGFloat = 1) {
        self.angle = angle
        self.axis = axis
        self.anchor = anchor
        self.anchorZ = anchorZ
        self.perspective = perspective
    }
  public func effectValue(size: CGSize) -> ProjectionTransform
  public typealias AnimatableData = AnimatablePair<Angle.AnimatableData, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<UnitPoint.AnimatableData, AnimatablePair<Length, Length>>>>>>
  public var animatableData: AnimatableData {
    get
    set
  }
  public static func == (lhs: _Rotation3DEffect, rhs: _Rotation3DEffect) -> Bool
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func rotation3DEffect(_ angle: Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint = .center, anchorZ: Length = 0, perspective: Length = 1) -> Modified<_Rotation3DEffect> {
        return modifier(_Rotation3DEffect(
            angle: angle, axis: axis, anchor: anchor, anchorZ: anchorZ,
            perspective: perspective
        ))
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct Alignment : Equatable {
  public var horizontal: HorizontalAlignment
  public var vertical: VerticalAlignment
  @inlinable public init(horizontal: HorizontalAlignment, vertical: VerticalAlignment) {
        self.horizontal = horizontal
        self.vertical = vertical
    }
  public static let center: SwiftUI.Alignment
  public static let leading: SwiftUI.Alignment
  public static let trailing: SwiftUI.Alignment
  public static let top: SwiftUI.Alignment
  public static let bottom: SwiftUI.Alignment
  public static let topLeading: SwiftUI.Alignment
  public static let topTrailing: SwiftUI.Alignment
  public static let bottomLeading: SwiftUI.Alignment
  public static let bottomTrailing: SwiftUI.Alignment
  public static func == (a: SwiftUI.Alignment, b: SwiftUI.Alignment) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct ZStack<Content> : _UnaryView where Content : SwiftUI.View {
  @usableFromInline
  internal var _tree: _VariadicView.Tree<_ZStackLayout, Content>
  @inlinable public init(alignment: Alignment = .center, @SwiftUI.ViewBuilder content: () -> Content) {
        _tree = .init(
            root: _ZStackLayout(alignment: alignment), content: content())
    }
  public static func _makeView(view: _GraphValue<ZStack>, inputs: _ViewInputs) -> _ViewOutputs
  public static func _makeViewList(view: _GraphValue<ZStack>, inputs: _ViewListInputs) -> _ViewListOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _ZStackLayout {
  public var alignment: Alignment
  @inlinable public init(alignment: Alignment = .center) {
        self.alignment = alignment
    }
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct Angle {
  public var radians: Double
  @inlinable public var degrees: Double {
    get { return radians * (180.0 / .pi) }
    set { radians = newValue * (.pi / 180.0) }
  }
  @inlinable public init() {
        self.init(radians: 0.0)
    }
  @inlinable public init(radians: Double) {
        self.radians = radians
    }
  @inlinable public init(degrees: Double) {
        self.init(radians: degrees * (.pi / 180.0))
    }
  @inlinable public static func radians(_ radians: Double) -> Angle {
        return Angle(radians: radians)
    }
  @inlinable public static func degrees(_ degrees: Double) -> Angle {
        return Angle(degrees: degrees)
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Angle : Hashable, Comparable {
  @inlinable public static func < (lhs: Angle, rhs: Angle) -> Bool {
        return lhs.radians < rhs.radians
    }
  public static func == (a: SwiftUI.Angle, b: SwiftUI.Angle) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Angle : Animatable, _VectorMath {
  public var animatableData: Double {
    @inlinable get { return radians * 128 }
    @inlinable set { radians = newValue * (1.0 / 128) }
  }
  @inlinable public static var zero: Angle {
    get {
        return .init()
    }
  }
  public typealias AnimatableData = Swift.Double
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _EnvironmentKeyTransformModifier<Value> : _ViewInputsModifier {
  public var keyPath: WritableKeyPath<EnvironmentValues, Value>
  public var transform: (inout Value) -> Void
  @inlinable public init(keyPath: WritableKeyPath<EnvironmentValues, Value>, transform: @escaping (inout Value) -> Void) {
        self.keyPath = keyPath
        self.transform = transform
    }
  public static func _makeViewInputs(modifier: _GraphValue<_EnvironmentKeyTransformModifier>, inputs: inout _ViewInputs)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func transformEnvironment<V>(_ keyPath: WritableKeyPath<EnvironmentValues, V>, transform: @escaping (inout V) -> Void) -> Modified<_EnvironmentKeyTransformModifier<V>> {
        return modifier(_EnvironmentKeyTransformModifier(
            keyPath: keyPath, transform: transform))
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct ViewDimensions {
  public var width: Length {
    get
  }
  public var height: Length {
    get
  }
  public subscript(guide: HorizontalAlignment) -> Length {
    get
  }
  public subscript(guide: VerticalAlignment) -> Length {
    get
  }
  public subscript(explicit guide: HorizontalAlignment) -> Length? {
    get
  }
  public subscript(explicit guide: VerticalAlignment) -> Length? {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewDimensions : Equatable {
  public static func == (lhs: ViewDimensions, rhs: ViewDimensions) -> Bool
}
extension View {
  public func accessibilityScrollAction(_ handler: @escaping (Edge) -> Void) -> Modified<AccessibilityModifier>
}
extension _ModifiedContent where Modifier == SwiftUI.AccessibilityModifier {
  public func accessibilityScrollAction(_ handler: @escaping (Edge) -> Void) -> _ModifiedContent
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Image {
  public init(_ cgImage: CGImage, scale: Length, label: Text)
  public init(decorative cgImage: CGImage, scale: Length)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _CoordinateSpaceModifier<Name> : _ViewInputsModifier, Equatable where Name : Swift.Hashable {
  public var name: Name
  @inlinable public init(name: Name) {
        self.name = name
    }
  public static func _makeViewInputs(modifier: _GraphValue<_CoordinateSpaceModifier>, inputs: inout _ViewInputs)
  public typealias Body = Swift.Never
  public static func == (a: SwiftUI._CoordinateSpaceModifier<Name>, b: SwiftUI._CoordinateSpaceModifier<Name>) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func coordinateSpace<T>(name: T) -> Modified<_CoordinateSpaceModifier<T>> where T : Swift.Hashable {
        return modifier(_CoordinateSpaceModifier(name: name))
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _ContentShapeModifier<ContentShape> : _MultiViewModifier, Equatable where ContentShape : SwiftUI.Shape {
  public var shape: ContentShape
  public var eoFill: Bool
  @inlinable public init(shape: ContentShape, eoFill: Bool = false) {
        self.shape = shape
        self.eoFill = eoFill
    }
  public static func _makeView(modifier: _GraphValue<_ContentShapeModifier>, inputs: _ViewInputs, body: @escaping (_Graph, _ViewInputs) -> _ViewOutputs) -> _ViewOutputs
  public typealias Body = Swift.Never
  public static func == (a: SwiftUI._ContentShapeModifier<ContentShape>, b: SwiftUI._ContentShapeModifier<ContentShape>) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func contentShape<S>(_ shape: S, eoFill: Bool = false) -> Modified<_ContentShapeModifier<S>> where S : SwiftUI.Shape {
        return modifier(_ContentShapeModifier(shape: shape, eoFill: eoFill))
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _BenchmarkHost {
  public func viewForIdentifier<I, V>(_ identifier: I, _ type: V.Type) -> V? where I : Swift.Hashable, V : SwiftUI.View
  public func stateForIdentifier<I, S, V>(_ id: I, type _: S.Type, in _: V.Type) -> Binding<S>? where I : Swift.Hashable, V : SwiftUI.View
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _PreferenceWritingModifier<Key> : _MultiViewModifier where Key : SwiftUI.PreferenceKey {
  public var value: Key.Value
  @inlinable public init(key _: Key.Type = Key.self, value: Key.Value) {
        self.value = value
    }
  public static func _makeView(modifier: _GraphValue<_PreferenceWritingModifier>, inputs: _ViewInputs, body: @escaping (_Graph, _ViewInputs) -> _ViewOutputs) -> _ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _PreferenceWritingModifier : Equatable where Key.Value : Swift.Equatable {
  public static func == (a: SwiftUI._PreferenceWritingModifier<Key>, b: SwiftUI._PreferenceWritingModifier<Key>) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func preference<K>(key _: K.Type = K.self, value: K.Value) -> Modified<_PreferenceWritingModifier<K>> where K : SwiftUI.PreferenceKey {
        return modifier(_PreferenceWritingModifier(value: value))
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func transaction(_ transform: @escaping (inout Transaction) -> Void) -> Modified<_TransactionModifier>
  public func animation(_ animation: Animation?) -> Modified<_TransactionModifier>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewModifier {
  public func transaction(_ transform: @escaping (inout Transaction) -> Void) -> _PopTransactionModifier._Modified<Self>._Modified<_PushTransactionModifier>
  public func animation(_ animation: Animation?) -> _PopTransactionModifier._Modified<Self>._Modified<_PushTransactionModifier>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _TransactionModifier : _ViewInputsModifier {
  public static func _makeViewInputs(modifier: _GraphValue<_TransactionModifier>, inputs: inout _ViewInputs)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _PushTransactionModifier : _ViewInputsModifier {
  public static func _makeViewInputs(modifier: _GraphValue<_PushTransactionModifier>, inputs: inout _ViewInputs)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _MarkGeometryTransactionModifier : _ViewInputsModifier {
  public static func _makeViewInputs(modifier: _GraphValue<_MarkGeometryTransactionModifier>, inputs: inout _ViewInputs)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _PopTransactionModifier : _ViewInputsModifier {
  public static func _makeViewInputs(modifier: _GraphValue<_PopTransactionModifier>, inputs: inout _ViewInputs)
  public typealias Body = Swift.Never
}
public struct AccessibilityParentBehavior : Hashable {
  public func hash(into hasher: inout Hasher)
  public static func == (lhs: AccessibilityParentBehavior, rhs: AccessibilityParentBehavior) -> Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension AccessibilityParentBehavior {
  public static let contain: SwiftUI.AccessibilityParentBehavior
  public static let combine: SwiftUI.AccessibilityParentBehavior
}
public struct _AccessibilityContainerModifier {
  public typealias Body = Swift.Never
}
extension View {
  public func accessibilityElement(children: AccessibilityParentBehavior = .contain) -> Modified<_AccessibilityContainerModifier>
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(OSX, unavailable)
@available(tvOS, unavailable)
public struct _DigitalCrownConfiguration {
  public var _isScrollIndicatorAlwaysOnScreen: Bool
  public var _hapticsStrength: _CrownHapticsConfiguration.Notch.Strength
  public var isContinuous: Bool {
    get
    set
  }
  public var isHapticFeedbackEnabled: Bool
  public var rotationalSensitivity: DigitalCrownRotationalSensitivity
  public init(minValue: Double, maxValue: Double, stride: Double.Stride? = nil)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _Detachable {
  static func matches<K>(key: K.Type) -> Bool where K : SwiftUI.PreferenceKey
  static var detachedProperties: _DetachableProperties { get }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _DetachableProperties : OptionSet {
  public let rawValue: UInt32
  public init(rawValue: UInt32)
  public static let position: SwiftUI._DetachableProperties
  public static let dimensions: SwiftUI._DetachableProperties
  public static let environment: SwiftUI._DetachableProperties
  public static let transaction: SwiftUI._DetachableProperties
  public static let layout: SwiftUI._DetachableProperties
  public static let all: _DetachableProperties
  public typealias Element = SwiftUI._DetachableProperties
  public typealias ArrayLiteralElement = SwiftUI._DetachableProperties
  public typealias RawValue = Swift.UInt32
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _Detachable {
  public static var detachedProperties: _DetachableProperties {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _DetachedView<Detached, Content, Child> : _UnaryView where Detached : SwiftUI._Detachable, Content : SwiftUI.View, Child : SwiftUI.View {
  public var content: Content
  public var transform: (_DetachedPlaceholder<Detached>) -> Child
  public init(content: Content, transform: @escaping (_DetachedPlaceholder<Detached>) -> Child)
  public static func _makeView(view: _GraphValue<_DetachedView>, inputs: _ViewInputs) -> _ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func _detached<T, U>(with _: T.Type = T.self, _ transform: @escaping (_DetachedPlaceholder<T>) -> U) -> _DetachedView<T, Self, U> where T : SwiftUI._Detachable, U : SwiftUI.View
  public func _detached<T>(_ transform: @escaping (_DetachedPlaceholder<_EmptyDetached>) -> T) -> _DetachedView<_EmptyDetached, Self, T> where T : SwiftUI.View
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _DetachedKey<Key> : _Detachable where Key : SwiftUI.PreferenceKey {
  public static func matches<K>(key: K.Type) -> Bool where K : SwiftUI.PreferenceKey
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _EmptyDetached : _Detachable {
  public static func matches<K>(key: K.Type) -> Bool where K : SwiftUI.PreferenceKey
  public static var detachedProperties: _DetachableProperties {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _DetachedPlaceholder<Detached> : _UnaryView where Detached : SwiftUI._Detachable {
  public static func _makeView(view: _GraphValue<_DetachedPlaceholder>, inputs: _ViewInputs) -> _ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _DynamicViewPropertyBuffer {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func layoutPriority(_ value: Double) -> Modified<_TraitWritingModifier<Double>>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Group<Content> : _MultiView where Content : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder content: () -> Content)
  public static func _makeViewList(view: _GraphValue<Group>, inputs: _ViewListInputs) -> _ViewListOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _ViewTraitKey {
  public static var _isSectioned: _ViewTraitKey<Bool> {
    get
  }
}
public protocol TextFieldStyle {
  associatedtype _Body : SwiftUI.View
  func _body(configuration: TextField) -> _Body
}
extension TextFieldStyle {
  public typealias Member = StaticMember<Self>
}
extension View {
  public func textFieldStyle<S>(_ style: S.Member) -> Modified<TextFieldStyleModifier<S>> where S : SwiftUI.TextFieldStyle
}
public struct TextFieldStyleModifier<Style> where Style : SwiftUI.TextFieldStyle {
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func mask<Mask>(_ mask: Mask) -> Modified<_MaskEffect<Mask>> where Mask : SwiftUI.View {
        return modifier(_MaskEffect(mask: mask))
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _MaskEffect<Mask> : _MultiViewModifier where Mask : SwiftUI.View {
  public var mask: Mask
  @inlinable public init(mask: Mask) {
        self.mask = mask
    }
  public static func _makeView(modifier: _GraphValue<_MaskEffect>, inputs: _ViewInputs, body: @escaping (_Graph, _ViewInputs) -> _ViewOutputs) -> _ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _MaskEffect : Equatable where Mask : Swift.Equatable {
  public static func == (a: SwiftUI._MaskEffect<Mask>, b: SwiftUI._MaskEffect<Mask>) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout @propertyDelegate public struct Environment<Value> : DynamicViewProperty {
  @usableFromInline
  internal enum Content {
    case keyPath(KeyPath<EnvironmentValues, Value>)
    case value(Value)
  }
  @usableFromInline
  internal var content: Content
  @inlinable public init(_ keyPath: KeyPath<EnvironmentValues, Value>) {
        content = .keyPath(keyPath)
    }
  @inlinable public var value: Value {
    get {
        if case .value(let value) = content {
            return value
        } else {
            error()
        }
    }
  }
  @usableFromInline
  internal func error() -> Never
  public static func _makeLink<V>(in buffer: inout _DynamicViewPropertyBuffer, container: _GraphValue<V>, linkOffset: Int, inputs: inout _ViewInputs)
  public static var _isUnary: Bool {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@propertyDelegate public struct Binding<Value> {
  public var transaction: Transaction
  public var value: Value {
    get
    nonmutating set
  }
  public init(getValue: @escaping () -> Value, setValue: @escaping (Value) -> Void)
  public init(getValue: @escaping () -> Value, setValue: @escaping (Value, Transaction) -> Void)
  public static func constant(_ value: Value) -> Binding<Value>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Binding : DynamicViewProperty {
  public static func _makeLink<V>(in buffer: inout _DynamicViewPropertyBuffer, container: _GraphValue<V>, linkOffset: Int, inputs: inout _ViewInputs)
  public static var _isUnary: Bool {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@dynamicMemberLookup public protocol BindingConvertible {
  associatedtype Value
  var binding: Binding<Value> { get }
  subscript<Subject>(dynamicMember keyPath: WritableKeyPath<Value, Subject>) -> Binding<Subject> { get }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension BindingConvertible {
  public subscript<Subject>(dynamicMember keyPath: WritableKeyPath<Value, Subject>) -> Binding<Subject> {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Binding : BindingConvertible {
  @inlinable public var binding: Binding {
    get {
        return self
    }
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension BindingConvertible {
  public func transaction(_ transaction: Transaction) -> Binding<Value>
  public func animation(_ animation: Animation? = .default) -> Binding<Value>
  public subscript<Subject>(keyPath: WritableKeyPath<Value, Subject>) -> Binding<Subject> {
    get
  }
  public subscript<Subject>(keyPath: WritableKeyPath<Value, Subject?>, default defaultValue: Subject) -> Binding<Subject> {
    get
  }
  public func zip<T>(with rhs: T) -> Binding<(Value, T.Value)> where T : SwiftUI.BindingConvertible
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension BindableObject {
  public subscript<T>(keyPath: ReferenceWritableKeyPath<Self, T>) -> Binding<T> {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Binding : Sequence where Value : Swift.MutableCollection, Value.Index : Swift.Hashable {
  public typealias Element = Binding<Value.Element>
  public typealias Iterator = IndexingIterator<Binding<Value>>
  public typealias SubSequence = Slice<Binding<Value>>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Binding : Collection where Value : Swift.MutableCollection, Value.Index : Swift.Hashable {
  public typealias Index = Value.Index
  public typealias Indices = Value.Indices
  public var startIndex: Index {
    get
  }
  public var endIndex: Index {
    get
  }
  public func index(after i: Index) -> Index
  public func formIndex(after i: inout Index)
  public subscript(position: Index) -> Element {
    get
  }
  public var indices: Value.Indices {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Binding : BidirectionalCollection where Value : Swift.BidirectionalCollection, Value : Swift.MutableCollection, Value.Index : Swift.Hashable {
  public func index(before i: Index) -> Index
  public func formIndex(before i: inout Index)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Binding : RandomAccessCollection where Value : Swift.MutableCollection, Value : Swift.RandomAccessCollection, Value.Index : Swift.Hashable {
}
extension CGRect {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Anchor.Source where Value == CoreGraphics.CGRect {
  public static func rect(_ r: CGRect) -> Anchor.Source
  public static var bounds: Anchor.Source {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _View {
  static func _visitViewType<V>(visitor: inout V) where V : SwiftUI._ViewTypeVisitor
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol View : SwiftUI._View {
  static func _makeView(view: _GraphValue<Self>, inputs: _ViewInputs) -> _ViewOutputs
  static func _makeViewList(view: _GraphValue<Self>, inputs: _ViewListInputs) -> _ViewListOutputs
  associatedtype Body : SwiftUI.View
  var body: Body { get }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol __LegacyView : SwiftUI.View where Self.Body == SwiftUI._AutoViewWrapper {
  var body: _View { get }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension __LegacyView {
  public var body: _AutoViewWrapper {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public static func _visitViewType<V>(visitor: inout V) where V : SwiftUI._ViewTypeVisitor
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _UnaryView : SwiftUI.View where Self.Body : SwiftUI._UnaryView {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _UnaryView where Self.Body == Swift.Never {
  public static func _makeViewList(view: _GraphValue<Self>, inputs: _ViewListInputs) -> _ViewListOutputs
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _MultiView : SwiftUI.View {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _MultiView where Self.Body == Swift.Never {
  public static func _makeView(view: _GraphValue<Self>, inputs: _ViewInputs) -> _ViewOutputs
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Never : View, _UnaryView {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _UnaryViewAdaptor<Content> : _UnaryView where Content : SwiftUI.View {
  public var content: Content
  @inlinable public init(_ content: Content) { self.content = content }
  public static func _makeView(view: _GraphValue<_UnaryViewAdaptor>, inputs: _ViewInputs) -> _ViewOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _ViewTypeVisitor {
  mutating func visit<V>(type: V.Type) where V : SwiftUI.View
}
extension Image {
  public init(uiImage: UIImage)
}
extension UIImage {
}
public struct AnySliderStyle {
}
public struct __SimpleColumnLayout {
  public init()
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
public enum AccessibilityAdjustmentDirection {
  case increment
  case decrement
  public static func == (a: SwiftUI.AccessibilityAdjustmentDirection, b: SwiftUI.AccessibilityAdjustmentDirection) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension View {
  public func accessibilityAdjustableAction(_ handler: @escaping (AccessibilityAdjustmentDirection) -> Void) -> Modified<AccessibilityModifier>
}
extension _ModifiedContent where Modifier == SwiftUI.AccessibilityModifier {
  public func accessibilityAdjustableAction(_ handler: @escaping (AccessibilityAdjustmentDirection) -> Void) -> _ModifiedContent
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension CGPoint : Animatable {
  public typealias AnimatableData = AnimatablePair<Length, Length>
  public var animatableData: AnimatableData {
    @inlinable get { return .init(x, y) }
    @inlinable set { (x, y) = newValue[] }
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension CGSize : Animatable {
  public typealias AnimatableData = AnimatablePair<Length, Length>
  public var animatableData: AnimatableData {
    @inlinable get { return .init(width, height) }
    @inlinable set { (width, height) = newValue[] }
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension CGRect : Animatable {
  public typealias AnimatableData = AnimatablePair<CGPoint.AnimatableData, CGSize.AnimatableData>
  public var animatableData: AnimatableData {
    @inlinable get {
            return .init(origin.animatableData, size.animatableData)
        }
    @inlinable set {
            (origin.animatableData, size.animatableData) = newValue[]
        }
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol VectorArithmetic : Swift.AdditiveArithmetic {
  mutating func scale(by rhs: Double)
  var magnitudeSquared: Double { get }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Float : VectorArithmetic {
  @inlinable mutating public func scale(by rhs: Double) { self *= Float(rhs) }
  @inlinable public var magnitudeSquared: Double {
    get { return Double(self * self) }
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Double : VectorArithmetic {
  @inlinable mutating public func scale(by rhs: Double) { self *= rhs }
  @inlinable public var magnitudeSquared: Double {
    get { return self * self }
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension CGFloat : VectorArithmetic {
  @inlinable mutating public func scale(by rhs: Double) { self *= CGFloat(rhs) }
  @inlinable public var magnitudeSquared: Double {
    get { return Double(self * self) }
  }
}
public protocol UIViewRepresentable : SwiftUI._UnaryView where Self.Body == Swift.Never {
  associatedtype UIViewType : UIKit.UIView
  func makeUIView(context: Context) -> UIViewType
  func updateUIView(_ uiView: UIViewType, context: Context)
  static func dismantleUIView(_ uiView: UIViewType, coordinator: Coordinator)
  associatedtype Coordinator = Swift.Void
  func makeCoordinator() -> Coordinator
  func _identifiedViewTree(in uiView: UIViewType) -> _IdentifiedViewTree
  typealias Context = UIViewRepresentableContext<Self>
}
extension UIViewRepresentable where Self.Coordinator == Swift.Void {
  public func makeCoordinator() -> Coordinator
}
extension UIViewRepresentable {
  public static func dismantleUIView(_ uiView: UIViewType, coordinator: Coordinator)
  public static func _makeView(view: _GraphValue<Self>, inputs: _ViewInputs) -> _ViewOutputs
  public func _identifiedViewTree(in uiView: UIViewType) -> _IdentifiedViewTree
  public var body: Never {
    get
  }
}
public struct UIViewRepresentableContext<Representable> where Representable : SwiftUI.UIViewRepresentable {
  public let coordinator: Representable.Coordinator
  public var transaction: Transaction {
    get
    }
  public var environment: EnvironmentValues {
    get
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Button<Label> : __LegacyView where Label : SwiftUI.View {
  public init(action: @escaping () -> Void, @SwiftUI.ViewBuilder label: () -> Label)
  public var body: _View {
    get
  }
  public typealias Body = SwiftUI._AutoViewWrapper
}
public struct Picker<Label, SelectionValue, Content> where Label : SwiftUI.View, SelectionValue : Swift.Hashable, Content : SwiftUI.View {
  public init(selection: Binding<SelectionValue>, label: Label, @SwiftUI.ViewBuilder content: () -> Content)
  public static func _makeView(view: _GraphValue<Picker>, inputs: _ViewInputs) -> _ViewOutputs
  public static func _makeViewList(view: _GraphValue<Picker>, inputs: _ViewListInputs) -> _ViewListOutputs
  public typealias Body = Swift.Never
}
public struct _PickerContainer<Label, SelectionValue> : _VariadicView.MultiViewRoot where Label : SwiftUI.View, SelectionValue : Swift.Hashable {
  public func body(children: _VariadicView.Children) -> AnyView
  public typealias Body = SwiftUI.AnyView
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct EnvironmentValues : CustomStringConvertible {
  public init()
  public subscript<K>(key: K.Type) -> K.Value where K : SwiftUI.EnvironmentKey {
    get
    set
  }
  public var description: String {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol PreferenceKey {
  associatedtype Value
  static var defaultValue: Value { get }
  static func reduce(value: inout Value, nextValue: () -> Value)
  static var _includesRemovedValues: Bool { get }
  static var _isReadableByHost: Bool { get }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension PreferenceKey where Self.Value : Swift.ExpressibleByNilLiteral {
  public static var defaultValue: Value {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension PreferenceKey {
  public static var _includesRemovedValues: Bool {
    get
  }
  public static var _isReadableByHost: Bool {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Transaction {
  public init()
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public func withTransaction<Result>(_ transaction: Transaction, _ body: () throws -> Result) rethrows -> Result
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public func withAnimation<Result>(_ animation: Animation? = .default, _ body: () throws -> Result) rethrows -> Result
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Color {
  public func opacity(_ opacity: Double) -> Color
}
extension CGPoint {
}
extension UnitPoint {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Anchor.Source where Value == CoreGraphics.CGPoint {
  public static func point(_ p: CGPoint) -> Anchor.Source
  public static func unitPoint(_ p: UnitPoint) -> Anchor.Source
  public static var topLeading: Anchor.Source {
    get
  }
  public static var top: Anchor.Source {
    get
  }
  public static var topTrailing: Anchor.Source {
    get
  }
  public static var leading: Anchor.Source {
    get
  }
  public static var center: Anchor.Source {
    get
  }
  public static var trailing: Anchor.Source {
    get
  }
  public static var bottomLeading: Anchor.Source {
    get
  }
  public static var bottom: Anchor.Source {
    get
  }
  public static var bottomTrailing: Anchor.Source {
    get
  }
}
extension _ScrollableContentProvider {
  public func root(scrollView: _ScrollView<Self>.Main) -> _DelayedPreferenceView<_ContainedScrollViewKey, _ScrollView<Self>.Main.Modified<_OverlayModifier<_PreferenceReadingView<_ContainedScrollViewKey, _ScrollOverlayView>>>>
}
public struct _ScrollOverlayView : __LegacyView {
  public var scrollView: _ScrollViewProxy
  public init(scrollView: _ScrollViewProxy)
  public var body: _View {
    get
  }
  public typealias Body = SwiftUI._AutoViewWrapper
}
public struct _PopUpButton<SelectionValue> : _VariadicView.UnaryViewRoot where SelectionValue : Swift.Hashable {
  public init(selection: Binding<SelectionValue>)
  public func body(children: _VariadicView.Children) -> _AutoViewWrapper
  public typealias Body = SwiftUI._AutoViewWrapper
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol EnvironmentKey {
  associatedtype Value
  static var defaultValue: Value { get }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Anchor<Value> : Equatable where Value : Swift.Equatable {
  public static func == (lhs: Anchor, rhs: Anchor) -> Bool
  public struct Source : Equatable {
    public static func == (lhs: Source, rhs: Source) -> Bool
  }
}
extension Anchor.Source {
  public init<T>(_ array: [Anchor<T>.Source]) where Value == [T], T : Swift.Equatable
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Anchor.Source {
  public init<T>(_ anchor: Anchor<T>.Source?) where Value == T?, T : Swift.Equatable
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _VectorMath : SwiftUI.Animatable {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension _VectorMath {
  @inlinable public var magnitude: Double {
    get {
        return animatableData.magnitudeSquared.squareRoot()
    }
  }
  @inlinable mutating public func negate() {
        animatableData = .zero - animatableData
    }
  @inlinable prefix public static func - (operand: Self) -> Self {
        var result = operand
        result.negate()
        return result
    }
  @inlinable public static func += (lhs: inout Self, rhs: Self) {
        lhs.animatableData += rhs.animatableData
    }
  @inlinable public static func + (lhs: Self, rhs: Self) -> Self {
        var result = lhs
        result += rhs
        return result
    }
  @inlinable public static func -= (lhs: inout Self, rhs: Self) {
        lhs.animatableData -= rhs.animatableData
    }
  @inlinable public static func - (lhs: Self, rhs: Self) -> Self {
        var result = lhs
        result -= rhs
        return result
    }
  @inlinable public static func *= (lhs: inout Self, rhs: Double) {
        lhs.animatableData.scale(by: rhs)
    }
  @inlinable public static func * (lhs: Self, rhs: Double) -> Self {
        var result = lhs
        result *= rhs
        return result
    }
  @inlinable public static func /= (lhs: inout Self, rhs: Double) {
        lhs *= 1 / rhs
    }
  @inlinable public static func / (lhs: Self, rhs: Double) -> Self {
        var result = lhs
        result /= rhs
        return result
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct _ProjectionEffect : GeometryEffect, Equatable {
  public var transform: ProjectionTransform
  @inlinable public init(transform: ProjectionTransform) {
        self.transform = transform
    }
  public func effectValue(size: CGSize) -> ProjectionTransform
  public typealias Body = Swift.Never
  public static func == (a: SwiftUI._ProjectionEffect, b: SwiftUI._ProjectionEffect) -> Swift.Bool
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  @inlinable public func projectionEffect(_ transform: ProjectionTransform) -> Modified<_ProjectionEffect> {
        return modifier(_ProjectionEffect(transform: transform))
    }
}
public protocol _PerformanceTest {
  var name: String { get }
  func runTest(host: _BenchmarkHost, options: [AnyHashable : Any])
}
extension __App {
  public static func _registerPerformanceTests(_ tests: [_PerformanceTest])
}
extension _BenchmarkHost {
  public func _started(test: _PerformanceTest)
  public func _finished(test: _PerformanceTest)
  public func _failed(test: _PerformanceTest)
}
public struct __SpiralLayout {
  public typealias AnimatableData = Angle.AnimatableData
  public init(spacing: Angle)
  public var animatableData: AnimatableData {
    get
    set
  }
  public typealias Body = Swift.Never
}
@usableFromInline
internal enum Log {
  @usableFromInline
  internal static var runtimeIssuesLog: os.OSLog
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _Graph {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _GraphValue<Value> : Equatable {
  public subscript<U>(keyPath: KeyPath<Value, U>) -> _GraphValue<U> {
    get
  }
  public static func == (a: SwiftUI._GraphValue<Value>, b: SwiftUI._GraphValue<Value>) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct ConditionalContent<TrueContent, FalseContent> where TrueContent : SwiftUI.View, FalseContent : SwiftUI.View {
  @usableFromInline
  internal enum Storage {
    case trueContent(TrueContent)
    case falseContent(FalseContent)
  }
  @usableFromInline
  internal let storage: Storage
  @usableFromInline
  internal init(storage: Storage)
  public static func _makeView(view: _GraphValue<ConditionalContent>, inputs: _ViewInputs) -> _ViewOutputs
  public static func _makeViewList(view: _GraphValue<ConditionalContent>, inputs: _ViewListInputs) -> _ViewListOutputs
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public enum CoordinateSpace {
  case global
  case local
  case named(AnyHashable)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension CoordinateSpace {
  public var isGlobal: Bool {
    get
  }
  public var isLocal: Bool {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension CoordinateSpace : Equatable, Hashable {
  public func hash(into hasher: inout Hasher)
  public static func == (lhs: CoordinateSpace, rhs: CoordinateSpace) -> Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct __RadialLayout {
  public var radius: Length
  public var size: CGSize
  public init(radius: Length, size: CGSize)
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = Swift.Never
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Animation {
  public static func == (lhs: Animation, rhs: Animation) -> Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Animation : CustomStringConvertible, CustomDebugStringConvertible, CustomReflectable {
  public var description: String {
    get
  }
  public var debugDescription: String {
    get
  }
  public var customMirror: Mirror {
    get
  }
}
@available(iOS 13.0, OSX 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DatePicker<Label> : View where Label : SwiftUI.View {
  public typealias Components = DatePickerComponents
  public init(_ date: Binding<Date>, minimumDate: Date? = nil, maximumDate: Date? = nil, displayedComponents: Components = [.hourAndMinute, .date], @SwiftUI.ViewBuilder label: () -> Label)
  public var body: AnyView {
    get
  }
  public typealias Body = SwiftUI.AnyView
}
@available(iOS 13.0, OSX 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension DatePicker where Label == SwiftUI.EmptyView {
  public init(_ date: Binding<Date>, minimumDate: Date? = nil, maximumDate: Date? = nil, displayedComponents: Components = [.hourAndMinute, .date])
}
@available(iOS 13.0, OSX 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DatePickerComponents : OptionSet {
  public let rawValue: UInt
  public init(rawValue: UInt)
  public static let hourAndMinute: DatePickerComponents
  public static let date: DatePickerComponents
  public typealias Element = SwiftUI.DatePickerComponents
  public typealias RawValue = Swift.UInt
  public typealias ArrayLiteralElement = SwiftUI.DatePickerComponents
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@_fixed_layout public struct StrokedShape<S> : Shape where S : SwiftUI.Shape {
  public var shape: S
  public var style: StrokeStyle
  @inlinable public init(shape: S, style: StrokeStyle) {
        self.shape = shape
        self.style = style
    }
  public func path(in rect: CGRect) -> Path
  public typealias AnimatableData = AnimatablePair<S.AnimatableData, StrokeStyle.AnimatableData>
  public var animatableData: AnimatableData {
    get
    set
  }
  public typealias Body = SwiftUI.ShapeView<SwiftUI.StrokedShape<S>, SwiftUI.ForegroundStyle>
  public static func == (a: SwiftUI.StrokedShape<S>, b: SwiftUI.StrokedShape<S>) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Shape {
  public typealias Stroked = StrokedShape<Self>
  @inlinable public func stroke(style: StrokeStyle) -> Stroked {
        return StrokedShape(shape: self, style: style)
    }
  @inlinable public func stroke(lineWidth: Length) -> Stroked {
        return stroke(style: StrokeStyle(lineWidth: lineWidth))
    }
}
extension DateFormatter {
}
extension ISO8601DateFormatter {
}
extension DateComponentsFormatter {
}
extension DateIntervalFormatter {
}
extension NumberFormatter {
}
extension MassFormatter {
}
extension MeasurementFormatter {
}
extension LengthFormatter {
}
extension EnergyFormatter {
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _StateProtocol {
  init()
}
public struct Modal {
  public init<Content>(_ content: Content, onDismiss: (() -> Void)? = nil) where Content : SwiftUI.View
}
extension View {
  public func presentation(_ modal: Modal?) -> _AutoResultView<Self>
}
public struct _UnbridgedNavigationView : __LegacyView {
  public init<V>(_ content: V, title: String, areLargeTitlesEnabled: Bool = false) where V : SwiftUI.View
  public var body: _View {
    get
  }
  public typealias Body = SwiftUI._AutoViewWrapper
}
@available(iOS 13.0, watchOS 6.0, *)
@available(OSX, unavailable)
@available(tvOS, unavailable)
extension View {
  @available(watchOS, unavailable)
  public func statusBar(hidden: Bool) -> _AutoResultView<Self>
  public func _statusBar(hidden: Bool) -> _AutoResultView<Self>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
@propertyDelegate @dynamicMemberLookup public struct EnvironmentObject<BindableObjectType> : DynamicViewProperty where BindableObjectType : SwiftUI.BindableObject {
  @inlinable public var value: BindableObjectType {
    get {
        guard let store = _store else { error() }
        return store
    }
  }
  @usableFromInline
  internal var _store: BindableObjectType?
  public var delegateValue: ObjectBinding<BindableObjectType>.Wrapper {
    get
  }
  public var storageValue: ObjectBinding<BindableObjectType>.Wrapper {
    get
  }
  @usableFromInline
  internal func error() -> Never
  public init()
  public static func _makeLink<V>(in buffer: inout _DynamicViewPropertyBuffer, container: _GraphValue<V>, linkOffset: Int, inputs: inout _ViewInputs)
  public static var _isUnary: Bool {
    get
  }
  public subscript<Subject>(dynamicMember keyPath: ReferenceWritableKeyPath<BindableObjectType, Subject>) -> Binding<Subject> {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func environmentObject<B>(_ bindable: B) -> Modified<_EnvironmentKeyWritingModifier<B?>> where B : SwiftUI.BindableObject
}
public struct _UnbridgedNavigationItem {
  public enum LargeTitleDisplayMode {
    case automatic
    case always
    case never
    public static func == (a: SwiftUI._UnbridgedNavigationItem.LargeTitleDisplayMode, b: SwiftUI._UnbridgedNavigationItem.LargeTitleDisplayMode) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var title: String
  public var trailingView: AnyView
  public var largeTitleDisplayMode: LargeTitleDisplayMode
  public var content: AnyView
  public init<C>(title: String, largeTitleDisplayMode: LargeTitleDisplayMode = .automatic, content: C) where C : SwiftUI.View
  public init<C, V>(title: String, trailingView: V, largeTitleDisplayMode: LargeTitleDisplayMode = .automatic, content: C) where C : SwiftUI.View, V : SwiftUI.View
}
extension View {
  public func _unbridgedNavigationItem<Value>(value bindingValue: Binding<Value?>, _ function: (Value) -> _UnbridgedNavigationItem) -> Modified<_PreferenceWritingModifier<_UnbridgedNavigationPushPresentationKey>>
}
public struct _UnbridgedNavigationPushPresentation {
}
public struct _UnbridgedNavigationPushPresentationKey : PreferenceKey {
  public typealias Value = _UnbridgedNavigationPushPresentation?
  public static func reduce(value: inout Value, nextValue: () -> Value)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Alert {
  public init(title: Text, message: Text? = nil, dismissButton: Alert.Button = .default(Text("OK")))
  public init(title: Text, message: Text? = nil, primaryButton: Alert.Button, secondaryButton: Alert.Button)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(OSX, unavailable)
  public static func sideBySideButtons(title: Text, message: Text? = nil, primaryButton: Alert.Button, secondaryButton: Alert.Button) -> Alert
  public struct Button {
    public static func `default`(_ label: Text, onTrigger: (() -> Void)? = {}) -> Alert.Button
    public static func cancel(_ onTrigger: (() -> Void)? = {}) -> Alert.Button
    public static func destructive(_ label: Text, onTrigger: (() -> Void)? = {}) -> Alert.Button
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension View {
  public func presentation<T, ID>(_ data: Binding<T?>, id: KeyPath<T, ID>, alert: (T) -> Alert) -> _AutoResultView<Self> where ID : Swift.Hashable
  public func presentation(_ isShown: Binding<Bool>, alert: () -> Alert) -> _AutoResultView<Self>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Image {
  public enum ResizingMode {
    case tile
    case stretch
    public static func == (a: SwiftUI.Image.ResizingMode, b: SwiftUI.Image.ResizingMode) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public func resizable(capInsets: EdgeInsets = EdgeInsets(), resizingMode: ResizingMode = .stretch) -> Image
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewBuilder {
  @_transparent public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> TupleView<(C0, C1)> where C0 : SwiftUI.View, C1 : SwiftUI.View {
        return .init((c0, c1))
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewBuilder {
  @_transparent public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> TupleView<(C0, C1, C2)> where C0 : SwiftUI.View, C1 : SwiftUI.View, C2 : SwiftUI.View {
        return .init((c0, c1, c2))
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewBuilder {
  @_transparent public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> TupleView<(C0, C1, C2, C3)> where C0 : SwiftUI.View, C1 : SwiftUI.View, C2 : SwiftUI.View, C3 : SwiftUI.View {
        return .init((c0, c1, c2, c3))
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewBuilder {
  @_transparent public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> TupleView<(C0, C1, C2, C3, C4)> where C0 : SwiftUI.View, C1 : SwiftUI.View, C2 : SwiftUI.View, C3 : SwiftUI.View, C4 : SwiftUI.View {
        return .init((c0, c1, c2, c3, c4))
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewBuilder {
  @_transparent public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> TupleView<(C0, C1, C2, C3, C4, C5)> where C0 : SwiftUI.View, C1 : SwiftUI.View, C2 : SwiftUI.View, C3 : SwiftUI.View, C4 : SwiftUI.View, C5 : SwiftUI.View {
        return .init((c0, c1, c2, c3, c4, c5))
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewBuilder {
  @_transparent public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> TupleView<(C0, C1, C2, C3, C4, C5, C6)> where C0 : SwiftUI.View, C1 : SwiftUI.View, C2 : SwiftUI.View, C3 : SwiftUI.View, C4 : SwiftUI.View, C5 : SwiftUI.View, C6 : SwiftUI.View {
        return .init((c0, c1, c2, c3, c4, c5, c6))
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewBuilder {
  @_transparent public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> TupleView<(C0, C1, C2, C3, C4, C5, C6, C7)> where C0 : SwiftUI.View, C1 : SwiftUI.View, C2 : SwiftUI.View, C3 : SwiftUI.View, C4 : SwiftUI.View, C5 : SwiftUI.View, C6 : SwiftUI.View, C7 : SwiftUI.View {
        return .init((c0, c1, c2, c3, c4, c5, c6, c7))
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewBuilder {
  @_transparent public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> TupleView<(C0, C1, C2, C3, C4, C5, C6, C7, C8)> where C0 : SwiftUI.View, C1 : SwiftUI.View, C2 : SwiftUI.View, C3 : SwiftUI.View, C4 : SwiftUI.View, C5 : SwiftUI.View, C6 : SwiftUI.View, C7 : SwiftUI.View, C8 : SwiftUI.View {
        return .init((c0, c1, c2, c3, c4, c5, c6, c7, c8))
    }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension ViewBuilder {
  @_transparent public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> TupleView<(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)> where C0 : SwiftUI.View, C1 : SwiftUI.View, C2 : SwiftUI.View, C3 : SwiftUI.View, C4 : SwiftUI.View, C5 : SwiftUI.View, C6 : SwiftUI.View, C7 : SwiftUI.View, C8 : SwiftUI.View, C9 : SwiftUI.View {
        return .init((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9))
    }
}
extension Array {
}
extension ArraySlice {
}
extension Slice where Base : Swift.MutableCollection {
}
public protocol UIViewControllerRepresentable : SwiftUI._UnaryView where Self.Body == Swift.Never {
  associatedtype UIViewControllerType : UIKit.UIViewController
  func makeUIViewController(context: Context) -> UIViewControllerType
  func updateUIViewController(_ uiViewController: UIViewControllerType, context: Context)
  static func dismantleUIViewController(_ uiViewController: UIViewControllerType, coordinator: Coordinator)
  associatedtype Coordinator = Swift.Void
  func makeCoordinator() -> Coordinator
  func _identifiedViewTree(in uiViewController: UIViewControllerType) -> _IdentifiedViewTree
  typealias Context = UIViewControllerRepresentableContext<Self>
}
extension UIViewControllerRepresentable where Self.Coordinator == Swift.Void {
  public func makeCoordinator() -> Coordinator
}
extension UIViewControllerRepresentable {
  public static func dismantleUIViewController(_ uiViewController: UIViewControllerType, coordinator: Coordinator)
  public static func _makeView(view: _GraphValue<Self>, inputs: _ViewInputs) -> _ViewOutputs
  public func _identifiedViewTree(in uiViewController: UIViewControllerType) -> _IdentifiedViewTree
  public var body: Never {
    get
  }
}
public struct UIViewControllerRepresentableContext<Representable> where Representable : SwiftUI.UIViewControllerRepresentable {
  public let coordinator: Representable.Coordinator
  public var transaction: Transaction {
    get
    }
  public var environment: EnvironmentValues {
    get
    }
}
open class _UIHostingView<Content> : UIView where Content : SwiftUI.View {
  required public init(rootView: Content)
  @objc required dynamic public init?(coder aDecoder: NSCoder)
  @objc deinit
  @objc override dynamic open func didMoveToWindow()
  @objc override dynamic open func didMoveToSuperview()
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open var frame: CGRect {
    @objc get
    @objc set
  }
  @objc override dynamic open var bounds: CGRect {
    @objc get
    @objc set
  }
  @objc override dynamic open func tintColorDidChange()
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?)
  @objc override dynamic open func safeAreaInsetsDidChange()
  @objc override dynamic open var intrinsicContentSize: CGSize {
    @objc get
  }
  @objc override dynamic open func sizeThatFits(_ size: CGSize) -> CGSize
  @objc override dynamic open var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
  final public func _viewDebugData() -> [_ViewDebug.Data]
  @objc override dynamic open var canBecomeFirstResponder: Bool {
    @objc get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
extension _UIHostingView {
  public func _renderForTest(interval: Double)
  public func _performScrollTest(startOffset: Length = 0.0, iterations: Int = 0, delta: Length = 0.0, length: Length = 0.0, completion: (() -> Void)? = nil)
}
open class UIHostingController<Content> : UIViewController where Content : SwiftUI.View {
  public init(rootView: Content)
  public init?(coder aDecoder: NSCoder, rootView: Content)
  @objc required dynamic public init?(coder aDecoder: NSCoder)
  @objc override dynamic open func viewWillAppear(_ animated: Bool)
  public var rootView: Content {
    get
    set
  }
  public func sizeThatFits(in size: CGSize) -> CGSize
  public func _render(seconds: Double)
  public func _forEachIdentifiedView(body: (_IdentifiedViewProxy) -> Void)
  @objc override dynamic open var preferredStatusBarStyle: UIStatusBarStyle {
    @objc get
  }
  @objc override dynamic open var prefersStatusBarHidden: Bool {
    @objc get
  }
  @objc override dynamic open var preferredStatusBarUpdateAnimation: UIStatusBarAnimation {
    @objc get
  }
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
public protocol _UIHostingViewable : AnyObject {
  var rootView: AnyView { get set }
  func _render(seconds: Double)
  func _forEachIdentifiedView(body: (_IdentifiedViewProxy) -> Void)
  func sizeThatFits(in size: CGSize) -> CGSize
}
extension UIHostingController : _UIHostingViewable where Content == SwiftUI.AnyView {
}
public func _makeUIHostingController(_ view: AnyView) -> NSObject & _UIHostingViewable
extension SwiftUI._ButtonGesture : SwiftUI.Gesture {}
extension SwiftUI._TraitWritingModifier : SwiftUI.ViewModifier {}
extension SwiftUI.LongPressGesture : SwiftUI.Gesture {}
extension SwiftUI._EnvironmentReaderView : SwiftUI.View, SwiftUI._UnaryView {}
extension SwiftUI.Color : SwiftUI.View, SwiftUI._UnaryView {}
extension SwiftUI.Animation : Swift.Equatable {}
extension SwiftUI.Image : SwiftUI.View, SwiftUI._UnaryView {}
extension Swift.Never : SwiftUI.Gesture {}
extension SwiftUI.ImagePaint : SwiftUI.ShapeStyle {}
extension SwiftUI.EmptyView : SwiftUI.View {}
extension SwiftUI.SequenceGesture : SwiftUI.Gesture {}
extension SwiftUI._UIHostingView : SwiftUI._BenchmarkHost {}
extension SwiftUI.EmptyModifier : SwiftUI.ViewModifier {}
extension SwiftUI.__GridLayout : SwiftUI._VariadicView_UnaryViewRoot, SwiftUI.Animatable {}
extension SwiftUI._OverlayLayout : SwiftUI._VariadicView_UnaryViewRoot, SwiftUI.Animatable, SwiftUI._VariadicView_ViewRoot {}
extension SwiftUI.SimultaneousGesture : SwiftUI.Gesture {}
extension SwiftUI.__BedtimeTickLabelsLayout : SwiftUI._VariadicView_UnaryViewRoot, SwiftUI.Animatable {}
extension SwiftUI.__ViewRemovalLayout : SwiftUI._VariadicView_UnaryViewRoot, SwiftUI.Animatable {}
extension SwiftUI._BackgroundModifier : SwiftUI.ViewModifier, SwiftUI._MultiViewModifier {}
extension SwiftUI._OverlayModifier : SwiftUI.ViewModifier, SwiftUI._MultiViewModifier {}
extension SwiftUI._RelativeLayoutTraitsLayout : SwiftUI.Animatable, SwiftUI.ViewModifier, SwiftUI._MultiViewModifier {}
extension SwiftUI._AspectRatioLayout : SwiftUI.Animatable, SwiftUI.ViewModifier, SwiftUI._MultiViewModifier {}
extension SwiftUI._FixedSizeLayout : SwiftUI.Animatable, SwiftUI.ViewModifier, SwiftUI._MultiViewModifier {}
extension SwiftUI.ForegroundStyle : SwiftUI.ShapeStyle {}
extension SwiftUI.__FourUpLayout : SwiftUI._VariadicView_UnaryViewRoot, SwiftUI.Animatable {}
extension SwiftUI._SizeLimitLayout : SwiftUI.Animatable, SwiftUI.ViewModifier, SwiftUI._MultiViewModifier {}
extension SwiftUI._PickerStyleConfiguration.Label : SwiftUI.View {}
extension SwiftUI._PaddingLayout : SwiftUI.Animatable, SwiftUI.ViewModifier, SwiftUI._MultiViewModifier {}
extension SwiftUI._AlignmentLayout : SwiftUI.Animatable, SwiftUI.ViewModifier, SwiftUI._MultiViewModifier {}
extension SwiftUI._PositionLayout : SwiftUI.Animatable, SwiftUI.ViewModifier, SwiftUI._MultiViewModifier {}
extension SwiftUI._SafeAreaIgnoringLayout : SwiftUI.Animatable, SwiftUI.ViewModifier, SwiftUI._MultiViewModifier {}
extension SwiftUI.__IconLayout : SwiftUI._VariadicView_UnaryViewRoot, SwiftUI.Animatable {}
extension SwiftUI.DragGesture : SwiftUI.Gesture {}
extension SwiftUI._BlurEffect : SwiftUI.Animatable, SwiftUI._MultiViewModifier {}
extension SwiftUI._BrightnessEffect : SwiftUI.Animatable, SwiftUI._MultiViewModifier {}
extension SwiftUI._ColorInvertEffect : SwiftUI.Animatable, SwiftUI._MultiViewModifier {}
extension SwiftUI.HorizontalAlignment : Swift.Equatable {}
extension SwiftUI.VerticalAlignment : Swift.Equatable {}
extension SwiftUI._ColorMultiplyEffect._Resolved : SwiftUI.Animatable, SwiftUI._MultiViewModifier {}
extension SwiftUI._ContrastEffect : SwiftUI.Animatable, SwiftUI._MultiViewModifier {}
extension SwiftUI._GrayscaleEffect : SwiftUI.Animatable, SwiftUI._MultiViewModifier {}
extension SwiftUI._HueRotationEffect : SwiftUI.Animatable, SwiftUI._MultiViewModifier {}
extension SwiftUI._LuminanceToAlphaEffect : SwiftUI.Animatable, SwiftUI._MultiViewModifier {}
extension SwiftUI._SaturationEffect : SwiftUI.Animatable, SwiftUI._MultiViewModifier {}
extension SwiftUI._OpacityEffect : SwiftUI.Animatable, SwiftUI._MultiViewModifier, SwiftUI.ViewModifier {}
extension SwiftUI.__ResizableImagesExampleLayout : SwiftUI._VariadicView_UnaryViewRoot, SwiftUI.Animatable {}
extension SwiftUI._BlendModeEffect : SwiftUI.Animatable, SwiftUI._MultiViewModifier {}
extension SwiftUI.AnyGesture : SwiftUI.Gesture {}
extension SwiftUI._CompositingGroupEffect : SwiftUI.Animatable, SwiftUI._MultiViewModifier {}
extension SwiftUI._ClipEffect : SwiftUI.Animatable, SwiftUI._MultiViewModifier {}
extension SwiftUI._ShadowEffect._Resolved : SwiftUI.Animatable, SwiftUI._MultiViewModifier {}
extension SwiftUI._AligningContentProvider.AligningContentProviderLayout : SwiftUI.Animatable, SwiftUI.ViewModifier, SwiftUI._MultiViewModifier {}
extension SwiftUI._ToggleStyleModifier : SwiftUI.ViewModifier, SwiftUI._MultiViewModifier {}
extension SwiftUI._FrameLayout : SwiftUI.Animatable, SwiftUI.ViewModifier, SwiftUI._MultiViewModifier {}
extension SwiftUI._FlexFrameLayout : SwiftUI.Animatable, SwiftUI.ViewModifier, SwiftUI._MultiViewModifier {}
extension SwiftUI.AccessibilityModifier : SwiftUI.ViewModifier, SwiftUI._MultiViewModifier {}
extension SwiftUI.TupleView : SwiftUI.View {}
extension SwiftUI._ViewModifier_Content : SwiftUI.View {}
extension SwiftUI.__FluidSpringTestLayout : SwiftUI._VariadicView_UnaryViewRoot, SwiftUI.Animatable {}
extension SwiftUI.__SetFrameLayout : SwiftUI.Animatable, SwiftUI.ViewModifier, SwiftUI._MultiViewModifier {}
extension SwiftUI._VStackLayout : SwiftUI._VariadicView_UnaryViewRoot, SwiftUI.Animatable, SwiftUI._VariadicView_ViewRoot {}
extension SwiftUI._EndedGesture : SwiftUI.Gesture {}
extension SwiftUI._ChangedGesture : SwiftUI.Gesture {}
extension SwiftUI.Spacer : SwiftUI.View, SwiftUI._UnaryView {}
extension SwiftUI._HSpacer : SwiftUI.View, SwiftUI._UnaryView {}
extension SwiftUI._VSpacer : SwiftUI.View, SwiftUI._UnaryView {}
extension SwiftUI._MapGesture : SwiftUI.Gesture {}
extension SwiftUI.ExclusiveGesture : SwiftUI.Gesture {}
extension SwiftUI.TapGesture : SwiftUI.Gesture {}
extension SwiftUI._IdentifiedViewsKey : SwiftUI.PreferenceKey {}
extension SwiftUI._ContainedScrollViewKey : SwiftUI.PreferenceKey {}
extension SwiftUI._AutoResultView : SwiftUI.View {}
extension SwiftUI.IDView : SwiftUI.View {}
extension SwiftUI._CircleLayout : SwiftUI._VariadicView_UnaryViewRoot, SwiftUI.Animatable {}
extension SwiftUI._HStackLayout : SwiftUI._VariadicView_UnaryViewRoot, SwiftUI.Animatable {}
extension SwiftUI._ZStackLayout : SwiftUI._VariadicView_UnaryViewRoot, SwiftUI.Animatable {}
extension SwiftUI._AccessibilityContainerModifier : SwiftUI.ViewModifier, SwiftUI._MultiViewModifier {}
extension SwiftUI.TextFieldStyleModifier : SwiftUI.ViewModifier, SwiftUI._MultiViewModifier {}
extension SwiftUI.__SimpleColumnLayout : SwiftUI._VariadicView_UnaryViewRoot, SwiftUI.Animatable {}
extension SwiftUI.Picker : SwiftUI.View {}
extension SwiftUI.__SpiralLayout : SwiftUI._VariadicView_UnaryViewRoot, SwiftUI.Animatable {}
extension SwiftUI.ConditionalContent : SwiftUI.View {}
extension SwiftUI.__RadialLayout : SwiftUI._VariadicView_UnaryViewRoot, SwiftUI.Animatable {}
