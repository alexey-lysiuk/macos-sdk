#ifndef _IOKIT_UIODATAQUEUEDISPATCHSOURCE_H
#define _IOKIT_UIODATAQUEUEDISPATCHSOURCE_H

#include <DriverKit/IODispatchQueue.iig>
#include <DriverKit/IOMemoryDescriptor.iig>

typedef void (^IODataQueueClientEnqueueEntryBlock)(void *data, size_t dataSize);
typedef void (^IODataQueueClientDequeueEntryBlock)(const void *data, size_t dataSize);

class NATIVE KERNEL IODataQueueDispatchSource : public IODispatchSource
{
public:

	static kern_return_t
	Create(
		uint64_t queueByteCount,
	    IODispatchQueue * queue,
	    IODataQueueDispatchSource ** source);

	virtual bool
	init() override;

	virtual void
	free() override;

	virtual kern_return_t
	CopyMemory(
	IOMemoryDescriptor ** memory);

	virtual kern_return_t
	SetDataAvailableHandler(
	OSAction * action TYPE(DataAvailable));

	virtual kern_return_t
	SetDataServicedHandler(
	OSAction * action TYPE(DataServiced));

	void
	SendDataAvailable(void) LOCALONLY;

	void
	SendDataServiced(void) LOCALONLY;


	virtual kern_return_t
	CopyDataAvailableHandler(
	OSAction ** action);

	virtual kern_return_t
	CopyDataServicedHandler(
	OSAction ** action);

	virtual kern_return_t
	SetEnable(bool enable) override LOCAL;

	virtual kern_return_t
	Cancel(IODispatchSourceCancelHandler handler) override LOCAL;

	virtual kern_return_t
	CheckForWork(bool synchronous) override LOCAL;

	virtual void
	DataAvailable(
		OSAction * action TARGET) LOCAL = 0;

	virtual void
	DataServiced(
		OSAction * action TARGET) LOCAL = 0;

	bool
	IsDataAvailable(void) LOCALONLY;

	kern_return_t
	Peek(IODataQueueClientDequeueEntryBlock callback) LOCALONLY;

	kern_return_t
	Dequeue(IODataQueueClientDequeueEntryBlock callback) LOCALONLY;

	kern_return_t
	DequeueWithCoalesce(bool * sendDataServiced, IODataQueueClientDequeueEntryBlock callback) LOCALONLY;

	kern_return_t
	Enqueue(uint32_t dataSize, IODataQueueClientEnqueueEntryBlock callback) LOCALONLY;

	kern_return_t
	EnqueueWithCoalesce(uint32_t dataSize,  bool * sendDataAvailable, IODataQueueClientEnqueueEntryBlock callback) LOCALONLY;
};

#endif /* ! _IOKIT_UIODATAQUEUEDISPATCHSOURCE_H */
