#ifndef _IOKIT_UIOINTERRUPTDISPATCHSOURCE_H
#define _IOKIT_UIOINTERRUPTDISPATCHSOURCE_H

#include <DriverKit/IODispatchQueue.iig>
#include <DriverKit/IOService.iig>

struct IOInterruptDispatchSourcePayload {
	uint64_t time;
	uint64_t count;
};

class NATIVE KERNEL IOInterruptDispatchSource : public IODispatchSource
{
public:

	static kern_return_t
	Create(IOService * provider,
	    uint32_t index,
	    IODispatchQueue * queue,
	    IOInterruptDispatchSource ** source) LOCAL;

	virtual bool
	init() override;

	virtual void
	free() override;

	virtual kern_return_t
	    SetHandler(
		OSAction * action TYPE(InterruptOccurred)) LOCAL;

	virtual kern_return_t
	SetEnable(bool enable) override LOCAL;

	virtual kern_return_t
	Cancel(IODispatchSourceCancelHandler handler) override LOCAL;

	virtual kern_return_t
	CheckForWork(bool synchronous) override LOCAL;

	virtual void
	InterruptOccurred(
		OSAction * action TARGET,
		uint64_t   count,
		uint64_t   time) REPLY LOCAL;
};

#endif /* ! _IOKIT_UIOINTERRUPTDISPATCHSOURCE_H */
