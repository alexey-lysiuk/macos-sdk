#ifndef _IOKIT_UIODISPATCHQUEUE_H
#define _IOKIT_UIODISPATCHQUEUE_H

#include <DriverKit/OSObject.iig>
#include <DriverKit/OSAction.iig>
#include <DriverKit/IODispatchSource.iig>

typedef int (*IODispatchLogFunction)(const char *format, ...);
typedef void (^IODispatchBlock)(void);
typedef void (*IODispatchFunction)(void * context);
typedef void (^IODispatchQueueCancelHandler)(void);

class NATIVE KERNEL IODispatchQueue : public OSObject
{
public:
	static kern_return_t
	Create(
		const IODispatchQueueName name,
		uint64_t                  options,
		uint64_t                  priority,
		IODispatchQueue        ** queue) LOCAL;

	virtual bool
	init() override;

	virtual void
	free() override;

	bool
	OnQueue() LOCALONLY;

	const char *
	GetName() LOCALONLY;

	kern_return_t
	Cancel(IODispatchQueueCancelHandler handler) LOCALONLY;

	void
	DispatchAsync(IODispatchBlock block) LOCALONLY;

	void
	DispatchAsync_f(void * context, IODispatchFunction function) LOCALONLY;

	void
	DispatchSync(IODispatchBlock block) LOCALONLY;

	void
	DispatchSync_f(void * context, IODispatchFunction function) LOCALONLY;

	static void
	Log(const char * message, IODispatchLogFunction output) LOCALONLY;
};

#if DRIVERKIT_PRIVATE
class EXTENDS (IODispatchQueue) IODispatchQueuePrivate
{
	virtual kern_return_t
	SetPort(
		mach_port_t port PORTMAKESEND);
};
#endif

#endif /* ! _IOKIT_UIODISPATCH_H */
