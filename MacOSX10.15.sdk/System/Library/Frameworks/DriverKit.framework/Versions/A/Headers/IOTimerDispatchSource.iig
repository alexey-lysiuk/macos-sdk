#ifndef _IOKIT_UIOTIMERDISPATCHSOURCE_H
#define _IOKIT_UIOTIMERDISPATCHSOURCE_H

#include <DriverKit/IODispatchQueue.iig>

/*!
 * @enum Clock type to pass in IOTimerDispatchSource::WakeAtTime() `options`
 * @discussion Determines how `deadline` and `leeway` arguments are interpreted.
 *
 * @constant kIOTimerClockUptimeRaw
 * Type of a clock value from clock_gettime_nsec_np(CLOCK_UPTIME_RAW).
 * Equivalent to a value from mach_absolute_time() but in nanoseconds.
 *
 * @constant kIOTimerClockMonotonicRaw
 * Type of a clock value from clock_gettime_nsec_np(CLOCK_MONOTONIC_RAW).
 * Equivalent to a value from mach_continuous_time() but in nanoseconds.
 *
 * @constant kIOTimerClockRealTime
 * @constant kIOTimerClockWallTime
 * Type of a clock value from clock_gettime_nsec_np(CLOCK_REALTIME).
 * Equivalent to a value from gettimeofday() but in nanoseconds.
 *
 * @constant kIOTimerClockMachAbsoluteTime
 * Type of a clock value from mach_absolute_time() in tick units.
 * Prefer to use equivalent clock_gettime_nsec_np(CLOCK_UPTIME_RAW) in
 * nanoseconds.
 *
 * @constant kIOTimerClockMachContinuousTime
 * Type of a clock value from mach_continuous_time() in tick units.
 * Prefer to use equivalent clock_gettime_nsec_np(CLOCK_MONOTONIC_RAW) in
 * nanoseconds.
 */
enum {
	kIOTimerClockUptimeRaw = 0x88ull,
	kIOTimerClockMonotonicRaw = 0x84ull,
	kIOTimerClockRealTime = 0x80ull,
	kIOTimerClockWallTime = 0x80ull,
	kIOTimerClockMachAbsoluteTime = 0xC8ull,
	kIOTimerClockMachContinuousTime = 0xC4ull,
};

class NATIVE LOCAL IOTimerDispatchSource : public IODispatchSource
{
public:

	static kern_return_t
	Create(
		IODispatchQueue * queue,
		IOTimerDispatchSource ** source);

	virtual bool
	init() override;

	virtual void
	free() override;

	virtual kern_return_t
	    SetHandler(
		OSAction * action TYPE(TimerOccurred));

	virtual kern_return_t
	SetEnable(bool enable) override;

	virtual kern_return_t
	Cancel(IODispatchSourceCancelHandler handler) override;

	virtual kern_return_t
	CheckForWork(bool synchronous) override;

	virtual kern_return_t
	WakeAtTime(
		uint64_t options,
		uint64_t deadline,
		uint64_t leeway);

	virtual void
	TimerOccurred(
		OSAction      * action TARGET,
		uint64_t        time) REPLY LOCAL;
};


#endif /* ! _IOKIT_UIOTIMERDISPATCHSOURCE_H */
