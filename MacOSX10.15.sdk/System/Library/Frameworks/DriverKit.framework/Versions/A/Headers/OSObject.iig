#if !__IIG
#endif

#ifndef _IOKIT_UOSOBJECT_H
#define _IOKIT_UOSOBJECT_H

#include <stddef.h>
#include <stdint.h>
#include <DriverKit/IOReturn.h>
#if DRIVERKIT_PRIVATE
#include <mach/port.h>
#endif
#if !__IIG
#include <string.h>
#include <DriverKit/OSMetaClass.h>
#endif
class OSObject;
typedef OSObject * OSObjectPtr;

#if __IIG && !__IIG_ATTRIBUTES_DEFINED__

#define __IIG_ATTRIBUTES_DEFINED__	1

#define KERNEL       __attribute__((annotate("kernel")))
#define NATIVE       __attribute__((annotate("native")))
#define LOCAL        __attribute__((annotate("local")))
#define LOCALONLY    __attribute__((annotate("localonly")))
#define REMOTE       __attribute__((annotate("remote")))

#define LOCALHOST    __attribute__((annotate("localhost")))

#define INVOKEREPLY  __attribute__((annotate("invokereply")))
#define REPLY        __attribute__((annotate("reply")))

#define PORTMAKESEND __attribute__((annotate("MACH_MSG_TYPE_MAKE_SEND")))
#define PORTCOPYSEND __attribute__((annotate("MACH_MSG_TYPE_COPY_SEND")))

#define TARGET       __attribute__((annotate("target")))
#define TYPE(p)      __attribute__((annotate("type=" # p)))

//#define ARRAY(maxcount) __attribute__((annotate(# maxcount), annotate("array")))
#define EXTENDS(cls) __attribute__((annotate("extends=" # cls)))

//#define INTERFACE    __attribute__((annotate("interface")))
//#define IMPLEMENTS(i)   void implements(i *);

#define QUEUENAME(name) __attribute__((annotate("queuename=" # name)))

#endif /* __IIG */

class OSMetaClass;
class IODispatchQueue;
typedef char IODispatchQueueName[256];


#if __IIG
class OSMetaClassBase
{
	virtual const OSMetaClass *
	getMetaClass() const LOCALONLY;

    virtual void
    retain() const LOCALONLY;

    virtual void
    release() const LOCALONLY;

	virtual bool
    isEqualTo(const OSMetaClassBase * anObject) const LOCALONLY;
};
#endif /* __IIG */


/*!
@iig implementation
#include <DriverKit/IODispatchQueue.h>
@iig end
*/

class OSObject : public OSMetaClassBase
{
public:

	virtual bool
	init() LOCALONLY;

	virtual void
	free() LOCALONLY;

    virtual void
    retain() const override;

    virtual void
    release() const override;

	virtual kern_return_t
	SetDispatchQueue(
		const IODispatchQueueName name,
		IODispatchQueue         * queue) KERNEL = 0;

	virtual kern_return_t
	CopyDispatchQueue(
		const IODispatchQueueName name,
		IODispatchQueue        ** queue) KERNEL = 0;
};

#define DEFN(classname, name)                                       \
name ## _Impl(classname ## _ ## name ## _Args)

#define IMPL(classname, name)                                       \
classname :: DEFN(classname, name)

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#endif /* ! _IOKIT_UOSOBJECT_H */
