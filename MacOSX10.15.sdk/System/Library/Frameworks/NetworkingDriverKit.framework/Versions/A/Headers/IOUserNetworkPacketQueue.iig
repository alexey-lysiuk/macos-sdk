#ifndef _IOUSERNETWORKPACKETQUEUE_IIG
#define _IOUSERNETWORKPACKETQUEUE_IIG

#include <DriverKit/OSObject.iig>
#include <NetworkingDriverKit/IOUserNetworkPacket.iig>
#include <DriverKit/IODataQueueDispatchSource.iig>

/*!
@iig implementation
#if KERNEL
#include <IOSkywalkFamily/IOSkywalkPacketQueue.h>
#include <NetworkingDriverKit/IOUserNetworkPacketQueue_kext.h>
#endif
@iig end
*/

class KERNEL IOUserNetworkPacketQueue : public OSObject
{
public:
    virtual bool
    init() override;

    virtual void
    free() override;

    virtual kern_return_t
    SetEnable(bool isEnable) = 0;

    virtual kern_return_t
    SetPacketBufferPool(
        IOUserNetworkPacketBufferPool * pool) LOCALONLY;

    virtual kern_return_t
    SetPacketDirection(
        IOUserNetworkPacketDirection    direction) LOCALONLY;

    virtual kern_return_t
    CopyDataQueue(
        IODataQueueDispatchSource ** dataQueue) LOCALONLY;

    virtual kern_return_t
    SetDataQueue(
        IODataQueueDispatchSource * dataQueue) LOCAL;

    virtual kern_return_t
    EnqueuePacket(
        IOUserNetworkPacket *    packet) LOCALONLY;

    virtual uint32_t
    EnqueuePackets(
        IOUserNetworkPacket **   packets,
        uint32_t                    packetCount) LOCALONLY;

    virtual kern_return_t
    DequeuePacket(
        IOUserNetworkPacket **   packet) LOCALONLY;

    virtual kern_return_t
    DequeuePackets(
        IOUserNetworkPacket **   packets,
        uint32_t                    maxDequeueCount,
        uint32_t *                  dequeuePktCount) LOCALONLY;
};

#endif /* ! _IOUSERNETWORKPACKETQUEUE_IIG */
