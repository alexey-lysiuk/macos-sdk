// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 (swiftlang-6.1.0.110.5 clang-1700.0.13.3)
// swift-module-flags: -target x86_64-apple-ios18.4-macabi -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swift_math -swift-version 6 -enforce-exclusivity=checked -O -library-level api -module-abi-name Darwin -enable-experimental-feature DebugDescriptionMacro -user-module-version 310.100.8.0.1 -module-name _math
// swift-module-flags-ignorable:  -interface-compiler-version 6.1
import Swift
@_exported import _math
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@available(swift, deprecated: 3.0, message: "Please use 'Double.pi' or '.pi' to get the value of correct type and avoid casting.")
public let M_PI: Swift.Double
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@available(swift, deprecated: 3.0, message: "Please use 'Double.pi / 2' or '.pi / 2' to get the value of correct type and avoid casting.")
public let M_PI_2: Swift.Double
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@available(swift, deprecated: 3.0, message: "Please use 'Double.pi / 4' or '.pi / 4' to get the value of correct type and avoid casting.")
public let M_PI_4: Swift.Double
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@available(swift, deprecated: 3.0, message: "Please use '2.squareRoot()'.")
public let M_SQRT2: Swift.Double
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@available(swift, deprecated: 3.0, message: "Please use '0.5.squareRoot()'.")
public let M_SQRT1_2: Swift.Double
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@available(swift, deprecated: 4.2, renamed: "abs")
@_transparent public func fabs<T>(_ x: T) -> T where T : Swift.FloatingPoint {
    return x.magnitude
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func sqrt<T>(_ x: T) -> T where T : Swift.FloatingPoint {
    return x.squareRoot()
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func fma<T>(_ x: T, _ y: T, _ z: T) -> T where T : Swift.FloatingPoint {
    return z.addingProduct(x, y)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func remainder<T>(_ x: T, _ y: T) -> T where T : Swift.FloatingPoint {
    return x.remainder(dividingBy: y)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func fmod<T>(_ x: T, _ y: T) -> T where T : Swift.FloatingPoint {
    return x.truncatingRemainder(dividingBy: y)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func ceil<T>(_ x: T) -> T where T : Swift.FloatingPoint {
    return x.rounded(.up)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func floor<T>(_ x: T) -> T where T : Swift.FloatingPoint {
    return x.rounded(.down)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func round<T>(_ x: T) -> T where T : Swift.FloatingPoint {
    return x.rounded()
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func trunc<T>(_ x: T) -> T where T : Swift.FloatingPoint {
    return x.rounded(.towardZero)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func scalbn<T>(_ x: T, _ n: Swift.Int) -> T where T : Swift.FloatingPoint {
    return T(sign: .plus, exponent: T.Exponent(n), significand: x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func modf<T>(_ x: T) -> (T, T) where T : Swift.FloatingPoint {
     
    guard x.isFinite else { return (x+0, 0) }
    let integral = trunc(x)
    let fractional = x - integral
    return (integral, fractional)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func frexp<T>(_ x: T) -> (T, Swift.Int) where T : Swift.BinaryFloatingPoint {
    guard x.isFinite else { return (x+0, 0) }
    guard x != 0 else { return (x, 0) }
     
     
    return (x.significand / 2, Int(x.exponent + 1))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@available(swift, deprecated: 4.2, renamed: "scalbn")
@_transparent public func ldexp(_ x: Swift.Float, _ n: Swift.Int) -> Swift.Float {
    return Float(sign: .plus, exponent: n, significand: x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@available(swift, deprecated: 4.2, renamed: "scalbn")
@_transparent public func ldexp(_ x: Swift.Double, _ n: Swift.Int) -> Swift.Double {
    return Double(sign: .plus, exponent: n, significand: x)
}
@available(*, unavailable, message: "use the floatingPointClass property.")
public func fpclassify<T>(_ value: T) -> Swift.Int where T : Swift.FloatingPoint
@available(*, unavailable, message: "use the isNormal property.")
public func isnormal<T>(_ value: T) -> Swift.Bool where T : Swift.FloatingPoint
@available(*, unavailable, message: "use the isFinite property.")
public func isfinite<T>(_ value: T) -> Swift.Bool where T : Swift.FloatingPoint
@available(*, unavailable, message: "use the isInfinite property.")
public func isinf<T>(_ value: T) -> Swift.Bool where T : Swift.FloatingPoint
@available(*, unavailable, message: "use the isNaN property.")
public func isnan<T>(_ value: T) -> Swift.Bool where T : Swift.FloatingPoint
@available(*, unavailable, message: "use the sign property.")
public func signbit<T>(_ value: T) -> Swift.Int where T : Swift.FloatingPoint
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@available(swift, deprecated: 4.2, message: "use the exponent property.")
public func ilogb<T>(_ x: T) -> Swift.Int where T : Swift.BinaryFloatingPoint
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func acos(_ x: Swift.Float) -> Swift.Float {
    return Float(acosf(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func acos(_ x: Swift.Float80) -> Swift.Float80 {
    return Float80(acosl(CLongDouble(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func asin(_ x: Swift.Float) -> Swift.Float {
    return Float(asinf(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func asin(_ x: Swift.Float80) -> Swift.Float80 {
    return Float80(asinl(CLongDouble(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func atan(_ x: Swift.Float) -> Swift.Float {
    return Float(atanf(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func atan(_ x: Swift.Float80) -> Swift.Float80 {
    return Float80(atanl(CLongDouble(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func tan(_ x: Swift.Float) -> Swift.Float {
    return Float(tanf(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func tan(_ x: Swift.Float80) -> Swift.Float80 {
    return Float80(tanl(CLongDouble(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func acosh(_ x: Swift.Float) -> Swift.Float {
    return Float(acoshf(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func acosh(_ x: Swift.Float80) -> Swift.Float80 {
    return Float80(acoshl(CLongDouble(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func asinh(_ x: Swift.Float) -> Swift.Float {
    return Float(asinhf(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func asinh(_ x: Swift.Float80) -> Swift.Float80 {
    return Float80(asinhl(CLongDouble(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func atanh(_ x: Swift.Float) -> Swift.Float {
    return Float(atanhf(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func atanh(_ x: Swift.Float80) -> Swift.Float80 {
    return Float80(atanhl(CLongDouble(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func cosh(_ x: Swift.Float) -> Swift.Float {
    return Float(coshf(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func cosh(_ x: Swift.Float80) -> Swift.Float80 {
    return Float80(coshl(CLongDouble(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func sinh(_ x: Swift.Float) -> Swift.Float {
    return Float(sinhf(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func sinh(_ x: Swift.Float80) -> Swift.Float80 {
    return Float80(sinhl(CLongDouble(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func tanh(_ x: Swift.Float) -> Swift.Float {
    return Float(tanhf(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func tanh(_ x: Swift.Float80) -> Swift.Float80 {
    return Float80(tanhl(CLongDouble(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func expm1(_ x: Swift.Float) -> Swift.Float {
    return Float(expm1f(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func expm1(_ x: Swift.Float80) -> Swift.Float80 {
    return Float80(expm1l(CLongDouble(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func log1p(_ x: Swift.Float) -> Swift.Float {
    return Float(log1pf(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func log1p(_ x: Swift.Float80) -> Swift.Float80 {
    return Float80(log1pl(CLongDouble(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func logb(_ x: Swift.Float) -> Swift.Float {
    return Float(logbf(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func logb(_ x: Swift.Float80) -> Swift.Float80 {
    return Float80(logbl(CLongDouble(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func cbrt(_ x: Swift.Float) -> Swift.Float {
    return Float(cbrtf(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func cbrt(_ x: Swift.Float80) -> Swift.Float80 {
    return Float80(cbrtl(CLongDouble(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func erf(_ x: Swift.Float) -> Swift.Float {
    return Float(erff(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func erf(_ x: Swift.Float80) -> Swift.Float80 {
    return Float80(erfl(CLongDouble(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func erfc(_ x: Swift.Float) -> Swift.Float {
    return Float(erfcf(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func erfc(_ x: Swift.Float80) -> Swift.Float80 {
    return Float80(erfcl(CLongDouble(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func tgamma(_ x: Swift.Float) -> Swift.Float {
    return Float(tgammaf(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func tgamma(_ x: Swift.Float80) -> Swift.Float80 {
    return Float80(tgammal(CLongDouble(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func cos(_ x: Swift.Float) -> Swift.Float {
    return _cos(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func cos(_ x: Swift.Double) -> Swift.Double {
    return _cos(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func cos(_ x: Swift.Float80) -> Swift.Float80 {
    return _cos(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func sin(_ x: Swift.Float) -> Swift.Float {
    return _sin(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func sin(_ x: Swift.Double) -> Swift.Double {
    return _sin(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func sin(_ x: Swift.Float80) -> Swift.Float80 {
    return _sin(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func exp(_ x: Swift.Float) -> Swift.Float {
    return _exp(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func exp(_ x: Swift.Double) -> Swift.Double {
    return _exp(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func exp(_ x: Swift.Float80) -> Swift.Float80 {
    return _exp(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func exp2(_ x: Swift.Float) -> Swift.Float {
    return _exp2(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func exp2(_ x: Swift.Double) -> Swift.Double {
    return _exp2(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func exp2(_ x: Swift.Float80) -> Swift.Float80 {
    return _exp2(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func log(_ x: Swift.Float) -> Swift.Float {
    return _log(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func log(_ x: Swift.Double) -> Swift.Double {
    return _log(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func log(_ x: Swift.Float80) -> Swift.Float80 {
    return _log(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func log10(_ x: Swift.Float) -> Swift.Float {
    return _log10(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func log10(_ x: Swift.Double) -> Swift.Double {
    return _log10(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func log10(_ x: Swift.Float80) -> Swift.Float80 {
    return _log10(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func log2(_ x: Swift.Float) -> Swift.Float {
    return _log2(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func log2(_ x: Swift.Double) -> Swift.Double {
    return _log2(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func log2(_ x: Swift.Float80) -> Swift.Float80 {
    return _log2(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func nearbyint(_ x: Swift.Float) -> Swift.Float {
    return _nearbyint(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func nearbyint(_ x: Swift.Double) -> Swift.Double {
    return _nearbyint(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func nearbyint(_ x: Swift.Float80) -> Swift.Float80 {
    return _nearbyint(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func rint(_ x: Swift.Float) -> Swift.Float {
    return _rint(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func rint(_ x: Swift.Double) -> Swift.Double {
    return _rint(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func rint(_ x: Swift.Float80) -> Swift.Float80 {
    return _rint(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func atan2(_ lhs: Swift.Float, _ rhs: Swift.Float) -> Swift.Float {
    return Float(atan2f(CFloat(lhs), CFloat(rhs)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func atan2(_ lhs: Swift.Float80, _ rhs: Swift.Float80) -> Swift.Float80 {
    return Float80(atan2l(CLongDouble(lhs), CLongDouble(rhs)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func hypot(_ lhs: Swift.Float, _ rhs: Swift.Float) -> Swift.Float {
    return Float(hypotf(CFloat(lhs), CFloat(rhs)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func hypot(_ lhs: Swift.Float80, _ rhs: Swift.Float80) -> Swift.Float80 {
    return Float80(hypotl(CLongDouble(lhs), CLongDouble(rhs)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func pow(_ lhs: Swift.Float, _ rhs: Swift.Float) -> Swift.Float {
    return Float(powf(CFloat(lhs), CFloat(rhs)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func pow(_ lhs: Swift.Float80, _ rhs: Swift.Float80) -> Swift.Float80 {
    return Float80(powl(CLongDouble(lhs), CLongDouble(rhs)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func copysign(_ lhs: Swift.Float, _ rhs: Swift.Float) -> Swift.Float {
    return Float(copysignf(CFloat(lhs), CFloat(rhs)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func copysign(_ lhs: Swift.Float80, _ rhs: Swift.Float80) -> Swift.Float80 {
    return Float80(copysignl(CLongDouble(lhs), CLongDouble(rhs)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func nextafter(_ lhs: Swift.Float, _ rhs: Swift.Float) -> Swift.Float {
    return Float(nextafterf(CFloat(lhs), CFloat(rhs)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func nextafter(_ lhs: Swift.Float80, _ rhs: Swift.Float80) -> Swift.Float80 {
    return Float80(nextafterl(CLongDouble(lhs), CLongDouble(rhs)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func fdim(_ lhs: Swift.Float, _ rhs: Swift.Float) -> Swift.Float {
    return Float(fdimf(CFloat(lhs), CFloat(rhs)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func fdim(_ lhs: Swift.Float80, _ rhs: Swift.Float80) -> Swift.Float80 {
    return Float80(fdiml(CLongDouble(lhs), CLongDouble(rhs)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func fmax(_ lhs: Swift.Float, _ rhs: Swift.Float) -> Swift.Float {
    return Float(fmaxf(CFloat(lhs), CFloat(rhs)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func fmax(_ lhs: Swift.Float80, _ rhs: Swift.Float80) -> Swift.Float80 {
    return Float80(fmaxl(CLongDouble(lhs), CLongDouble(rhs)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func fmin(_ lhs: Swift.Float, _ rhs: Swift.Float) -> Swift.Float {
    return Float(fminf(CFloat(lhs), CFloat(rhs)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func fmin(_ lhs: Swift.Float80, _ rhs: Swift.Float80) -> Swift.Float80 {
    return Float80(fminl(CLongDouble(lhs), CLongDouble(rhs)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func lgamma(_ x: Swift.Float) -> (Swift.Float, Swift.Int) {
    var sign = Int32(0)
    let value = lgammaf_r(CFloat(x), &sign)
    return (Float(value), Int(sign))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func lgamma(_ x: Swift.Double) -> (Swift.Double, Swift.Int) {
    var sign = Int32(0)
    let value = lgamma_r(CDouble(x), &sign)
    return (Double(value), Int(sign))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func lgamma(_ x: Swift.Float80) -> (Swift.Float80, Swift.Int) {
    var sign = Int32(0)
    let value = lgammal_r(CLongDouble(x), &sign)
    return (Float80(value), Int(sign))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func remquo(_ x: Swift.Float, _ y: Swift.Float) -> (Swift.Float, Swift.Int) {
    var quo = Int32(0)
    let rem = remquof(CFloat(x), CFloat(y), &quo)
    return (Float(rem), Int(quo))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func remquo(_ x: Swift.Double, _ y: Swift.Double) -> (Swift.Double, Swift.Int) {
    var quo = Int32(0)
    let rem = remquo(CDouble(x), CDouble(y), &quo)
    return (Double(rem), Int(quo))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func remquo(_ x: Swift.Float80, _ y: Swift.Float80) -> (Swift.Float80, Swift.Int) {
    var quo = Int32(0)
    let rem = remquol(CLongDouble(x), CLongDouble(y), &quo)
    return (Float80(rem), Int(quo))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@available(swift, deprecated: 4.2, message: "use Float(nan: Float.RawSignificand).")
@_transparent public func nan(_ tag: Swift.String) -> Swift.Float {
    return Float(nanf(tag))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@available(swift, deprecated: 4.2, message: "use Float80(nan: Float80.RawSignificand).")
@_transparent public func nan(_ tag: Swift.String) -> Swift.Float80 {
    return Float80(nanl(tag))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func jn(_ n: Swift.Int, _ x: Swift.Double) -> Swift.Double {
    return jn(Int32(n), x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func yn(_ n: Swift.Int, _ x: Swift.Double) -> Swift.Double {
    return yn(Int32(n), x)
}
