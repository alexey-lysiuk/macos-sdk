// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.5 clang-1700.0.13.3)
// swift-module-flags: -target x86_64-apple-macos15.4 -target-variant x86_64-apple-ios18.4-macabi -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftCoreLocation -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 44.0.1 -module-name CoreLocation
// swift-module-flags-ignorable:  -interface-compiler-version 6.1
@_exported import CoreLocation
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@available(iOS 13.0, macOS 10.15, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension CoreLocation.CLBeaconIdentityConstraint {
  public var major: Swift.UInt16? {
    get
  }
  public var minor: Swift.UInt16? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public protocol CLCondition : Swift.Decodable, Swift.Encodable, Swift.Sendable {
}
@available(macOS 14.0, iOS 17.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public actor CLMonitor {
  public var identifiers: [Swift.String] {
    get
  }
  final public let events: CoreLocation.CLMonitor.Events
  public struct Record : Swift.Sendable {
    public let lastEvent: CoreLocation.CLMonitor.Event
    public let condition: any CoreLocation.CLCondition
  }
  public struct Event : Swift.Sendable {
    public typealias State = CoreLocation.__CLMonitoringState
    public let refinement: (any CoreLocation.CLCondition)?
    public var identifier: Swift.String {
      get
    }
    public var state: CoreLocation.CLMonitor.Event.State {
      get
    }
    public var date: Foundation.Date {
      get
    }
    @available(macOS 15.0, iOS 18.0, *)
    @available(watchOS, unavailable)
    @available(tvOS, unavailable)
    public var authorizationDenied: Swift.Bool {
      get
    }
    @available(macOS 15.0, iOS 18.0, *)
    @available(watchOS, unavailable)
    @available(tvOS, unavailable)
    public var authorizationDeniedGlobally: Swift.Bool {
      get
    }
    @available(macOS 15.0, iOS 18.0, *)
    @available(watchOS, unavailable)
    @available(tvOS, unavailable)
    public var authorizationRestricted: Swift.Bool {
      get
    }
    @available(macOS 15.0, iOS 18.0, *)
    @available(watchOS, unavailable)
    @available(tvOS, unavailable)
    public var insufficientlyInUse: Swift.Bool {
      get
    }
    @available(macOS 15.0, iOS 18.0, *)
    @available(watchOS, unavailable)
    @available(tvOS, unavailable)
    public var accuracyLimited: Swift.Bool {
      get
    }
    @available(macOS 15.0, iOS 18.0, *)
    @available(watchOS, unavailable)
    @available(tvOS, unavailable)
    public var conditionUnsupported: Swift.Bool {
      get
    }
    @available(macOS 15.0, iOS 18.0, *)
    @available(watchOS, unavailable)
    @available(tvOS, unavailable)
    public var conditionLimitExceeded: Swift.Bool {
      get
    }
    @available(macOS 15.0, iOS 18.0, *)
    @available(watchOS, unavailable)
    @available(tvOS, unavailable)
    public var persistenceUnavailable: Swift.Bool {
      get
    }
    @available(macOS 15.0, iOS 18.0, *)
    @available(watchOS, unavailable)
    @available(tvOS, unavailable)
    public var serviceSessionRequired: Swift.Bool {
      get
    }
    @available(macOS 15.0, iOS 18.0, *)
    @available(watchOS, unavailable)
    @available(tvOS, unavailable)
    public var authorizationRequestInProgress: Swift.Bool {
      get
    }
  }
  public struct Events : _Concurrency.AsyncSequence, Swift.Sendable {
    public typealias Element = CoreLocation.CLMonitor.Event
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      public mutating func next() async throws -> CoreLocation.CLMonitor.Events.Element?
      @available(iOS 17.0, macOS 14.0, *)
      @available(tvOS, unavailable)
      @available(watchOS, unavailable)
      @available(visionOS, unavailable)
      public typealias Element = CoreLocation.CLMonitor.Events.Element
      @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
    }
    public func makeAsyncIterator() -> CoreLocation.CLMonitor.Events.Iterator
    @available(iOS 17.0, macOS 14.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(visionOS, unavailable)
    public typealias AsyncIterator = CoreLocation.CLMonitor.Events.Iterator
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
  }
  public struct CircularGeographicCondition : CoreLocation.CLCondition, Swift.Sendable {
    public let center: CoreLocation.CLLocationCoordinate2D
    public let radius: CoreLocation.CLLocationDistance
    public init(center: CoreLocation.CLLocationCoordinate2D, radius: CoreLocation.CLLocationDistance)
    public init(from decoder: any Swift.Decoder) throws
    public func encode(to encoder: any Swift.Encoder) throws
  }
  public func add(_ Condition: any CoreLocation.CLCondition, identifier: Swift.String)
  public func add(_ condition: any CoreLocation.CLCondition, identifier: Swift.String, assuming state: CoreLocation.CLMonitor.Event.State)
  public func remove(_ identifier: Swift.String)
  public func record(for identifier: Swift.String) -> CoreLocation.CLMonitor.Record?
  public init(_ name: Swift.String) async
  @objc deinit
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
@available(iOS 17.0, macOS 14.0, *)
@available(macCatalyst, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension CoreLocation.CLMonitor {
  public struct BeaconIdentityCondition : CoreLocation.CLCondition, Swift.Sendable {
    public let uuid: Foundation.UUID
    public let major: Swift.UInt16?
    public let minor: Swift.UInt16?
    public init(uuid: Foundation.UUID)
    public init(uuid: Foundation.UUID, major: Swift.UInt16)
    public init(uuid: Foundation.UUID, major: Swift.UInt16, minor: Swift.UInt16)
    public init(from decoder: any Swift.Decoder) throws
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
extension CoreLocation.CLError {
  @available(visionOS, unavailable)
  public var alternateRegion: CoreLocation.CLRegion? {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 18.0, watchOS 11.0, tvOS 18.0, *)
@available(macOS, unavailable)
final public class CLServiceSession : Swift.Sendable {
  public init(authorization: CoreLocation.CLServiceSession.AuthorizationRequirement)
  public init(authorization: CoreLocation.CLServiceSession.AuthorizationRequirement, fullAccuracyPurposeKey: Swift.String)
  final public func invalidate()
  @objc deinit
}
@available(iOS 18.0, watchOS 11.0, tvOS 18.0, *)
@available(macOS, unavailable)
extension CoreLocation.CLServiceSession {
  public struct Diagnostic {
    public var authorizationDenied: Swift.Bool {
      get
    }
    public var authorizationDeniedGlobally: Swift.Bool {
      get
    }
    public var authorizationRestricted: Swift.Bool {
      get
    }
    public var insufficientlyInUse: Swift.Bool {
      get
    }
    public var fullAccuracyDenied: Swift.Bool {
      get
    }
    public var alwaysAuthorizationDenied: Swift.Bool {
      get
    }
    public var serviceSessionRequired: Swift.Bool {
      get
    }
    public var authorizationRequestInProgress: Swift.Bool {
      get
    }
  }
  @_hasMissingDesignatedInitializers final public class Diagnostics : _Concurrency.AsyncSequence {
    public typealias Element = CoreLocation.CLServiceSession.Diagnostic
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      public mutating func next() async throws -> CoreLocation.CLServiceSession.Diagnostics.Element?
      @available(iOS 18.0, tvOS 18.0, watchOS 11.0, *)
      @available(macOS, unavailable)
      public typealias Element = CoreLocation.CLServiceSession.Diagnostics.Element
      @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
      @available(macOS, unavailable, introduced: 15.0)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
    }
    final public func makeAsyncIterator() -> CoreLocation.CLServiceSession.Diagnostics.Iterator
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, *)
    @available(macOS, unavailable)
    public typealias AsyncIterator = CoreLocation.CLServiceSession.Diagnostics.Iterator
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
    @available(macOS, unavailable, introduced: 15.0)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
    @objc deinit
  }
  final public var diagnostics: CoreLocation.CLServiceSession.Diagnostics {
    get
  }
  public enum AuthorizationRequirement {
    case none
    case whenInUse
    @available(tvOS, unavailable)
    case always
    public static func == (a: CoreLocation.CLServiceSession.AuthorizationRequirement, b: CoreLocation.CLServiceSession.AuthorizationRequirement) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension CoreLocation.CLLocationCoordinate2D : Swift._ObjectiveCBridgeable {
  public func _bridgeToObjectiveC() -> Foundation.NSValue
  public static func _forceBridgeFromObjectiveC(_ source: Foundation.NSValue, result: inout CoreLocation.CLLocationCoordinate2D?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Foundation.NSValue, result: inout CoreLocation.CLLocationCoordinate2D?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Foundation.NSValue?) -> CoreLocation.CLLocationCoordinate2D
  public typealias _ObjectiveCType = Foundation.NSValue
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
public struct CLLocationUpdate : Swift.Sendable {
  public var location: CoreLocation.CLLocation? {
    get
  }
  @available(*, deprecated, renamed: "stationary")
  public var isStationary: Swift.Bool {
    get
  }
  @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, *)
  public var stationary: Swift.Bool {
    get
  }
  @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, *)
  public var authorizationDenied: Swift.Bool {
    get
  }
  @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, *)
  public var authorizationDeniedGlobally: Swift.Bool {
    get
  }
  @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, *)
  public var authorizationRestricted: Swift.Bool {
    get
  }
  @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, *)
  public var insufficientlyInUse: Swift.Bool {
    get
  }
  @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, *)
  public var locationUnavailable: Swift.Bool {
    get
  }
  @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, *)
  public var accuracyLimited: Swift.Bool {
    get
  }
  @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, *)
  public var serviceSessionRequired: Swift.Bool {
    get
  }
  @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, *)
  public var authorizationRequestInProgress: Swift.Bool {
    get
  }
  public enum LiveConfiguration {
    case `default`
    case automotiveNavigation
    case otherNavigation
    case fitness
    case airborne
    public static func == (a: CoreLocation.CLLocationUpdate.LiveConfiguration, b: CoreLocation.CLLocationUpdate.LiveConfiguration) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func liveUpdates(_ configuration: CoreLocation.CLLocationUpdate.LiveConfiguration = .default) -> CoreLocation.CLLocationUpdate.Updates
  public struct Updates : _Concurrency.AsyncSequence, Swift.Sendable {
    public typealias Element = CoreLocation.CLLocationUpdate
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      public mutating func next() async throws -> CoreLocation.CLLocationUpdate.Updates.Element?
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias Element = CoreLocation.CLLocationUpdate.Updates.Element
      @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
    }
    public func makeAsyncIterator() -> CoreLocation.CLLocationUpdate.Updates.Iterator
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias AsyncIterator = CoreLocation.CLLocationUpdate.Updates.Iterator
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
  }
}
@available(*, unavailable)
extension CoreLocation.CLLocationUpdate.Updates.Iterator : Swift.Sendable {
}
@_hasMissingDesignatedInitializers @available(iOS 17.0, watchOS 10.0, *)
@available(tvOS, unavailable)
@available(macOS, unavailable)
final public class CLBackgroundActivitySession : Swift.Sendable {
  public init()
  final public func invalidate()
  @objc deinit
}
@available(iOS 18.0, watchOS 11.0, tvOS 18.0, *)
@available(macOS, unavailable)
extension CoreLocation.CLServiceSession.AuthorizationRequirement : Swift.Equatable {}
@available(iOS 18.0, watchOS 11.0, tvOS 18.0, *)
@available(macOS, unavailable)
extension CoreLocation.CLServiceSession.AuthorizationRequirement : Swift.Hashable {}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension CoreLocation.CLLocationUpdate.LiveConfiguration : Swift.Equatable {}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension CoreLocation.CLLocationUpdate.LiveConfiguration : Swift.Hashable {}
