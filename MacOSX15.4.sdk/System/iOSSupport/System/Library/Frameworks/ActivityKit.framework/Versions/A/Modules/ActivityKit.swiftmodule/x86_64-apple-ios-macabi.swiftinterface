// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.5 clang-1700.0.13.3)
// swift-module-flags: -target x86_64-apple-ios18.4-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-upcoming-feature InternalImportsByDefault -enable-upcoming-feature InternalImportsByDefault -enable-upcoming-feature StrictConcurrency -enable-bare-slash-regex -user-module-version 203.5.12 -module-name ActivityKit -package-name com.apple.activitykit.internal
// swift-module-flags-ignorable:  -interface-compiler-version 6.1
@_exported public import ActivityKit
public import Combine
public import Foundation
public import Swift
public import _Concurrency
public import _StringProcessing
public import _SwiftConcurrencyShims
@available(iOS 16.1, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol ActivityAttributes : Swift.Decodable, Swift.Encodable {
  associatedtype ContentState : Swift.Decodable, Swift.Encodable, Swift.Hashable
}
@available(iOS 16.1, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum ActivityStyle {
  case standard
  case transient
  public static func == (a: ActivityKit.ActivityStyle, b: ActivityKit.ActivityStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 16.1, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public class Activity<Attributes> : Swift.Identifiable where Attributes : ActivityKit.ActivityAttributes {
  public typealias ContentState = Attributes.ContentState
  @available(iOS, deprecated: 16.2, message: "Use request(attributes:content:pushType:) instead")
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static func request(attributes: Attributes, contentState: ActivityKit.Activity<Attributes>.ContentState, pushType: ActivityKit.PushType? = nil) throws -> ActivityKit.Activity<Attributes>
  @available(iOS 16.2, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static func request(attributes: Attributes, content: ActivityKit.ActivityContent<ActivityKit.Activity<Attributes>.ContentState>, pushType: ActivityKit.PushType? = nil) throws -> ActivityKit.Activity<Attributes>
  @available(iOS 18.0, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(visionOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static func request(attributes: Attributes, content: ActivityKit.ActivityContent<ActivityKit.Activity<Attributes>.ContentState>, pushType: ActivityKit.PushType? = nil, style: ActivityKit.ActivityStyle) throws -> ActivityKit.Activity<Attributes>
  public static var activities: [ActivityKit.Activity<Attributes>] {
    get
  }
  public static var activityUpdates: ActivityKit.Activity<Attributes>.ActivityUpdates {
    get
  }
  final public let id: Swift.String
  public var activityState: ActivityKit.ActivityState {
    get
  }
  public var activityStateUpdates: ActivityKit.Activity<Attributes>.ActivityStateUpdates {
    get
  }
  @available(iOS, deprecated: 16.2, message: "Use `content` instead")
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public var contentState: ActivityKit.Activity<Attributes>.ContentState {
    get
  }
  @available(iOS, deprecated: 16.2, message: "Use contentUpdates instead")
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public var contentStateUpdates: ActivityKit.Activity<Attributes>.ContentStateUpdates {
    get
  }
  @available(iOS 16.2, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public var content: ActivityKit.ActivityContent<ActivityKit.Activity<Attributes>.ContentState> {
    get
  }
  @available(iOS 16.2, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public var contentUpdates: ActivityKit.Activity<Attributes>.ContentUpdates {
    get
  }
  public var pushToken: Foundation.Data? {
    get
  }
  public var pushTokenUpdates: ActivityKit.Activity<Attributes>.PushTokenUpdates {
    get
  }
  @available(iOS 17.2, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static var pushToStartTokenUpdates: ActivityKit.Activity<Attributes>.PushTokenUpdates {
    get
  }
  @available(iOS 17.2, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static var pushToStartToken: Foundation.Data? {
    get
  }
  final public let attributes: Attributes
  @available(iOS, deprecated: 16.2, message: "Use update(_:) instead")
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  public func update(using contentState: ActivityKit.Activity<Attributes>.ContentState) async
  @available(iOS 16.2, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func update(_ content: ActivityKit.ActivityContent<ActivityKit.Activity<Attributes>.ContentState>) async
  @available(iOS, deprecated: 16.2, message: "Use update(_:alertConfiguration:) instead")
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func update(using contentState: ActivityKit.Activity<Attributes>.ContentState, alertConfiguration: ActivityKit.AlertConfiguration? = nil) async
  @available(iOS 16.2, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func update(_ content: ActivityKit.ActivityContent<ActivityKit.Activity<Attributes>.ContentState>, alertConfiguration: ActivityKit.AlertConfiguration? = nil) async
  @available(iOS 17.2, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func update(_ content: ActivityKit.ActivityContent<ActivityKit.Activity<Attributes>.ContentState>, alertConfiguration: ActivityKit.AlertConfiguration? = nil, timestamp: Foundation.Date) async
  @available(iOS, deprecated: 16.2, message: "Use end(content:dismissalPolicy:) instead")
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func end(using contentState: ActivityKit.Activity<Attributes>.ContentState? = nil, dismissalPolicy: ActivityKit.ActivityUIDismissalPolicy = .default) async
  @available(iOS 16.2, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func end(_ content: ActivityKit.ActivityContent<ActivityKit.Activity<Attributes>.ContentState>?, dismissalPolicy: ActivityKit.ActivityUIDismissalPolicy = .default) async
  @available(iOS 17.2, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func end(_ content: ActivityKit.ActivityContent<ActivityKit.Activity<Attributes>.ContentState>?, dismissalPolicy: ActivityKit.ActivityUIDismissalPolicy = .default, timestamp: Foundation.Date) async
  @available(iOS 16.1, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  public typealias ID = Swift.String
  @objc deinit
}
@available(iOS 16.1, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ActivityKit.Activity {
  public struct ActivityUpdates : _Concurrency.AsyncSequence {
    public typealias Element = ActivityKit.Activity<Attributes>
    public func makeAsyncIterator() -> ActivityKit.Activity<Attributes>.ActivityUpdates.Iterator
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      public func next() async -> ActivityKit.Activity<Attributes>.ActivityUpdates.Element?
      @available(iOS 16.1, *)
      @available(tvOS, unavailable)
      @available(watchOS, unavailable)
      @available(macOS, unavailable)
      @available(macCatalyst, unavailable)
      public typealias Element = ActivityKit.Activity<Attributes>.ActivityUpdates.Element
      @available(iOS 18.0, visionOS 2.0, *)
      @available(tvOS, unavailable, introduced: 18.0)
      @available(watchOS, unavailable, introduced: 11.0)
      @available(macOS, unavailable, introduced: 15.0)
      @available(macCatalyst, unavailable)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = Swift.Never
    }
    @available(iOS 16.1, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(macOS, unavailable)
    @available(macCatalyst, unavailable)
    public typealias AsyncIterator = ActivityKit.Activity<Attributes>.ActivityUpdates.Iterator
    @available(iOS 18.0, visionOS 2.0, *)
    @available(tvOS, unavailable, introduced: 18.0)
    @available(watchOS, unavailable, introduced: 11.0)
    @available(macOS, unavailable, introduced: 15.0)
    @available(macCatalyst, unavailable)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  }
  public struct ActivityStateUpdates : _Concurrency.AsyncSequence {
    public typealias Element = ActivityKit.ActivityState
    public func makeAsyncIterator() -> ActivityKit.Activity<Attributes>.ActivityStateUpdates.Iterator
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      public func next() async -> ActivityKit.Activity<Attributes>.ActivityStateUpdates.Element?
      @available(iOS 16.1, *)
      @available(tvOS, unavailable)
      @available(watchOS, unavailable)
      @available(macOS, unavailable)
      @available(macCatalyst, unavailable)
      public typealias Element = ActivityKit.Activity<Attributes>.ActivityStateUpdates.Element
      @available(iOS 18.0, visionOS 2.0, *)
      @available(tvOS, unavailable, introduced: 18.0)
      @available(watchOS, unavailable, introduced: 11.0)
      @available(macOS, unavailable, introduced: 15.0)
      @available(macCatalyst, unavailable)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = Swift.Never
    }
    @available(iOS 16.1, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(macOS, unavailable)
    @available(macCatalyst, unavailable)
    public typealias AsyncIterator = ActivityKit.Activity<Attributes>.ActivityStateUpdates.Iterator
    @available(iOS 18.0, visionOS 2.0, *)
    @available(tvOS, unavailable, introduced: 18.0)
    @available(watchOS, unavailable, introduced: 11.0)
    @available(macOS, unavailable, introduced: 15.0)
    @available(macCatalyst, unavailable)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  }
  @available(iOS, deprecated: 16.2, message: "Use `ContentUpdates` instead")
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public struct ContentStateUpdates : _Concurrency.AsyncSequence {
    public typealias Element = ActivityKit.Activity<Attributes>.ContentState
    public func makeAsyncIterator() -> ActivityKit.Activity<Attributes>.ContentStateUpdates.Iterator
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      public func next() async -> ActivityKit.Activity<Attributes>.ContentStateUpdates.Element?
      @available(iOS, introduced: 16.1, deprecated: 16.2, message: "Use `ContentUpdates` instead")
      @available(tvOS, unavailable, message: "Use `ContentUpdates` instead")
      @available(watchOS, unavailable, message: "Use `ContentUpdates` instead")
      @available(macOS, unavailable, message: "Use `ContentUpdates` instead")
      @available(macCatalyst, unavailable)
      public typealias Element = ActivityKit.Activity<Attributes>.ContentStateUpdates.Element
      @available(iOS, introduced: 18.0, deprecated: 16.2, message: "Use `ContentUpdates` instead")
      @available(tvOS, unavailable, introduced: 18.0, message: "Use `ContentUpdates` instead")
      @available(watchOS, unavailable, introduced: 11.0, message: "Use `ContentUpdates` instead")
      @available(visionOS, introduced: 2.0, message: "Use `ContentUpdates` instead")
      @available(macOS, unavailable, introduced: 15.0, message: "Use `ContentUpdates` instead")
      @available(macCatalyst, unavailable)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = Swift.Never
    }
    @available(iOS, introduced: 16.1, deprecated: 16.2, message: "Use `ContentUpdates` instead")
    @available(tvOS, unavailable, message: "Use `ContentUpdates` instead")
    @available(watchOS, unavailable, message: "Use `ContentUpdates` instead")
    @available(macOS, unavailable, message: "Use `ContentUpdates` instead")
    @available(macCatalyst, unavailable)
    public typealias AsyncIterator = ActivityKit.Activity<Attributes>.ContentStateUpdates.Iterator
    @available(iOS, introduced: 18.0, deprecated: 16.2, message: "Use `ContentUpdates` instead")
    @available(tvOS, unavailable, introduced: 18.0, message: "Use `ContentUpdates` instead")
    @available(watchOS, unavailable, introduced: 11.0, message: "Use `ContentUpdates` instead")
    @available(visionOS, introduced: 2.0, message: "Use `ContentUpdates` instead")
    @available(macOS, unavailable, introduced: 15.0, message: "Use `ContentUpdates` instead")
    @available(macCatalyst, unavailable)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  }
  @available(iOS 16.2, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public struct ContentUpdates : _Concurrency.AsyncSequence {
    public typealias Element = ActivityKit.ActivityContent<ActivityKit.Activity<Attributes>.ContentState>
    public func makeAsyncIterator() -> ActivityKit.Activity<Attributes>.ContentUpdates.Iterator
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      public func next() async -> ActivityKit.Activity<Attributes>.ContentUpdates.Element?
      @available(iOS 16.2, *)
      @available(tvOS, unavailable)
      @available(watchOS, unavailable)
      @available(macOS, unavailable)
      @available(macCatalyst, unavailable)
      public typealias Element = ActivityKit.Activity<Attributes>.ContentUpdates.Element
      @available(iOS 18.0, visionOS 2.0, *)
      @available(tvOS, unavailable, introduced: 18.0)
      @available(watchOS, unavailable, introduced: 11.0)
      @available(macOS, unavailable, introduced: 15.0)
      @available(macCatalyst, unavailable)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = Swift.Never
    }
    @available(iOS 16.2, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(macOS, unavailable)
    @available(macCatalyst, unavailable)
    public typealias AsyncIterator = ActivityKit.Activity<Attributes>.ContentUpdates.Iterator
    @available(iOS 18.0, visionOS 2.0, *)
    @available(tvOS, unavailable, introduced: 18.0)
    @available(watchOS, unavailable, introduced: 11.0)
    @available(macOS, unavailable, introduced: 15.0)
    @available(macCatalyst, unavailable)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  }
  public struct PushTokenUpdates : _Concurrency.AsyncSequence {
    public typealias Element = Foundation.Data
    public func makeAsyncIterator() -> ActivityKit.Activity<Attributes>.PushTokenUpdates.Iterator
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      public func next() async -> ActivityKit.Activity<Attributes>.PushTokenUpdates.Element?
      @available(iOS 16.1, *)
      @available(tvOS, unavailable)
      @available(watchOS, unavailable)
      @available(macOS, unavailable)
      @available(macCatalyst, unavailable)
      public typealias Element = ActivityKit.Activity<Attributes>.PushTokenUpdates.Element
      @available(iOS 18.0, visionOS 2.0, *)
      @available(tvOS, unavailable, introduced: 18.0)
      @available(watchOS, unavailable, introduced: 11.0)
      @available(macOS, unavailable, introduced: 15.0)
      @available(macCatalyst, unavailable)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = Swift.Never
    }
    @available(iOS 16.1, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(macOS, unavailable)
    @available(macCatalyst, unavailable)
    public typealias AsyncIterator = ActivityKit.Activity<Attributes>.PushTokenUpdates.Iterator
    @available(iOS 18.0, visionOS 2.0, *)
    @available(tvOS, unavailable, introduced: 18.0)
    @available(watchOS, unavailable, introduced: 11.0)
    @available(macOS, unavailable, introduced: 15.0)
    @available(macCatalyst, unavailable)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  }
}
@available(iOS 16.1, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum ActivityState : Swift.Sendable, Swift.Codable, Swift.Hashable {
  case active
  case ended
  case dismissed
  @available(iOS 16.2, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  case stale
  public static func == (a: ActivityKit.ActivityState, b: ActivityKit.ActivityState) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 16.2, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ActivityContent<State> where State : Swift.Decodable, State : Swift.Encodable, State : Swift.Hashable {
  public let state: State
  public let staleDate: Foundation.Date?
  public let relevanceScore: Swift.Double
  public init(state: State, staleDate: Foundation.Date?, relevanceScore: Swift.Double = 0.0)
}
@available(iOS 16.2, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ActivityKit.ActivityContent : Swift.Sendable where State : Swift.Sendable {
}
@available(iOS 16.2, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ActivityKit.ActivityContent : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(iOS 16.1, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct AlertConfiguration : Swift.Equatable, Swift.Sendable {
  public var title: Foundation.LocalizedStringResource
  public var body: Foundation.LocalizedStringResource
  public var sound: ActivityKit.AlertConfiguration.AlertSound
  public init(title: Foundation.LocalizedStringResource, body: Foundation.LocalizedStringResource, sound: ActivityKit.AlertConfiguration.AlertSound)
  public struct AlertSound : Swift.Equatable, Swift.Sendable {
    public static var `default`: ActivityKit.AlertConfiguration.AlertSound {
      get
    }
    public static func named(_ name: Swift.String) -> ActivityKit.AlertConfiguration.AlertSound
    public static func == (a: ActivityKit.AlertConfiguration.AlertSound, b: ActivityKit.AlertConfiguration.AlertSound) -> Swift.Bool
  }
  public static func == (a: ActivityKit.AlertConfiguration, b: ActivityKit.AlertConfiguration) -> Swift.Bool
}
@available(iOS 16.1, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ActivityUIDismissalPolicy : Swift.Equatable, Swift.Sendable {
  public static let `default`: ActivityKit.ActivityUIDismissalPolicy
  public static let immediate: ActivityKit.ActivityUIDismissalPolicy
  public static func after(_ date: Foundation.Date) -> ActivityKit.ActivityUIDismissalPolicy
  public static func == (a: ActivityKit.ActivityUIDismissalPolicy, b: ActivityKit.ActivityUIDismissalPolicy) -> Swift.Bool
}
@available(iOS 16.1, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
final public class ActivityAuthorizationInfo {
  public struct ActivityEnablementUpdates : _Concurrency.AsyncSequence {
    public typealias Element = Swift.Bool
    public func makeAsyncIterator() -> ActivityKit.ActivityAuthorizationInfo.ActivityEnablementUpdates.Iterator
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      public mutating func next() async -> Swift.Bool?
      @available(iOS 16.1, *)
      @available(tvOS, unavailable)
      @available(watchOS, unavailable)
      @available(macOS, unavailable)
      @available(macCatalyst, unavailable)
      public typealias Element = Swift.Bool
      @available(iOS 18.0, visionOS 2.0, *)
      @available(tvOS, unavailable, introduced: 18.0)
      @available(watchOS, unavailable, introduced: 11.0)
      @available(macOS, unavailable, introduced: 15.0)
      @available(macCatalyst, unavailable)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = Swift.Never
    }
    @available(iOS 16.1, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(macOS, unavailable)
    @available(macCatalyst, unavailable)
    public typealias AsyncIterator = ActivityKit.ActivityAuthorizationInfo.ActivityEnablementUpdates.Iterator
    @available(iOS 18.0, visionOS 2.0, *)
    @available(tvOS, unavailable, introduced: 18.0)
    @available(watchOS, unavailable, introduced: 11.0)
    @available(macOS, unavailable, introduced: 15.0)
    @available(macCatalyst, unavailable)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  }
  @available(iOS 16.2, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public struct FrequentPushEnablementUpdates : _Concurrency.AsyncSequence {
    public typealias Element = Swift.Bool
    public func makeAsyncIterator() -> ActivityKit.ActivityAuthorizationInfo.FrequentPushEnablementUpdates.Iterator
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      public mutating func next() async -> Swift.Bool?
      @available(iOS 16.2, *)
      @available(tvOS, unavailable)
      @available(watchOS, unavailable)
      @available(macOS, unavailable)
      @available(macCatalyst, unavailable)
      public typealias Element = Swift.Bool
      @available(iOS 18.0, visionOS 2.0, *)
      @available(tvOS, unavailable, introduced: 18.0)
      @available(watchOS, unavailable, introduced: 11.0)
      @available(macOS, unavailable, introduced: 15.0)
      @available(macCatalyst, unavailable)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = Swift.Never
    }
    @available(iOS 16.2, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(macOS, unavailable)
    @available(macCatalyst, unavailable)
    public typealias AsyncIterator = ActivityKit.ActivityAuthorizationInfo.FrequentPushEnablementUpdates.Iterator
    @available(iOS 18.0, visionOS 2.0, *)
    @available(tvOS, unavailable, introduced: 18.0)
    @available(watchOS, unavailable, introduced: 11.0)
    @available(macOS, unavailable, introduced: 15.0)
    @available(macCatalyst, unavailable)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  }
  @available(iOS 16.2, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  final public var frequentPushesEnabled: Swift.Bool {
    get
  }
  final public var areActivitiesEnabled: Swift.Bool {
    get
  }
  final public let activityEnablementUpdates: ActivityKit.ActivityAuthorizationInfo.ActivityEnablementUpdates
  @available(iOS 16.2, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  final public let frequentPushEnablementUpdates: ActivityKit.ActivityAuthorizationInfo.FrequentPushEnablementUpdates
  public init()
  @objc deinit
}
@available(iOS 16.1, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum ActivityAuthorizationError : Foundation.CustomNSError, Foundation.LocalizedError {
  public static var errorDomain: Swift.String {
    get
  }
  case attributesTooLarge
  case unsupported
  case denied
  case globalMaximumExceeded
  case targetMaximumExceeded
  case unsupportedTarget
  case visibility
  case persistenceFailure
  case missingProcessIdentifier
  case unentitled
  case malformedActivityIdentifier
  case reconnectNotPermitted
  public var errorCode: Swift.Int {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
  public var recoverySuggestion: Swift.String? {
    get
  }
  public static func == (a: ActivityKit.ActivityAuthorizationError, b: ActivityKit.ActivityAuthorizationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 16.1, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct PushType : Swift.Equatable {
  public static var token: ActivityKit.PushType {
    get
  }
  @available(iOS 18.0, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static func channel(_ name: Swift.String) -> ActivityKit.PushType
  public static func == (a: ActivityKit.PushType, b: ActivityKit.PushType) -> Swift.Bool
}
@available(iOS 16.1, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ActivityKit.ActivityStyle : Swift.Equatable {}
@available(iOS 16.1, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ActivityKit.ActivityStyle : Swift.Hashable {}
@available(iOS 16.1, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ActivityKit.ActivityAuthorizationError : Swift.Equatable {}
@available(iOS 16.1, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ActivityKit.ActivityAuthorizationError : Swift.Hashable {}
