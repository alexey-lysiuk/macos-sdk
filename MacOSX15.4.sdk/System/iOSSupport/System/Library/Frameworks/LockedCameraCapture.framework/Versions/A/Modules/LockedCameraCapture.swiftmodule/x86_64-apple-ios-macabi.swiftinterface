// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.5 clang-1700.0.13.3)
// swift-module-flags: -target x86_64-apple-ios18.0-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 58.4.10 -module-name LockedCameraCapture
// swift-module-flags-ignorable:  -interface-compiler-version 6.1
import ExtensionKit
@_exported import LockedCameraCapture
import Swift
import SwiftUI
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor public protocol LockedCameraCaptureExtension : ExtensionFoundation.AppExtension {
  associatedtype Body : LockedCameraCapture.LockedCameraCaptureExtensionScene
  @_Concurrency.MainActor var body: Self.Body { get }
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor extension LockedCameraCapture.LockedCameraCaptureExtension {
  @_Concurrency.MainActor public var configuration: ExtensionKit.AppExtensionSceneConfiguration {
    get
  }
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor public protocol LockedCameraCaptureExtensionScene : ExtensionKit.AppExtensionScene {
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor public struct LockedCameraCaptureUIScene<Content> : LockedCameraCapture.LockedCameraCaptureExtensionScene where Content : SwiftUICore.View {
  @available(iOS 18.0, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_Concurrency.MainActor public let session: LockedCameraCapture.LockedCameraCaptureSession
  @available(iOS 18.0, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_Concurrency.MainActor public init(content: @escaping (LockedCameraCapture.LockedCameraCaptureSession) -> Content)
  @available(iOS 18.0, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public var body: some ExtensionKit.AppExtensionScene {
    get
  }
  @available(iOS 18.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s19LockedCameraCapture0abC7UISceneV4bodyQrvp", 0) __<Content>
}
@_hasMissingDesignatedInitializers @available(iOS 18.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
final public class LockedCameraCaptureSession : Swift.Sendable {
  @available(iOS 18.0, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  final public var sessionContentURL: Foundation.URL {
    get
  }
  @available(iOS 18.0, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  final public func openApplication(for userActivity: Foundation.NSUserActivity) async throws
  @available(iOS 18.0, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  final public func invalidateSessionContent() async throws
  @available(iOS 18.0, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public enum ApplicationLaunchError : Foundation.CustomNSError, Foundation.LocalizedError {
    @available(iOS 18.0, *)
    @available(macOS, unavailable)
    @available(macCatalyst, unavailable)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(visionOS, unavailable)
    public static var errorDomain: Swift.String {
      get
    }
    case unknown
    case applicationNotFound
    case authenticationFailed
    @available(iOS 18.0, *)
    @available(macOS, unavailable)
    @available(macCatalyst, unavailable)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(visionOS, unavailable)
    public var errorCode: Swift.Int {
      get
    }
    @available(iOS 18.0, *)
    @available(macOS, unavailable)
    @available(macCatalyst, unavailable)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(visionOS, unavailable)
    public var failureReason: Swift.String? {
      get
    }
    public static func == (a: LockedCameraCapture.LockedCameraCaptureSession.ApplicationLaunchError, b: LockedCameraCapture.LockedCameraCaptureSession.ApplicationLaunchError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 18.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
final public class LockedCameraCaptureManager : Swift.Sendable {
  @available(iOS 18.0, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public enum SessionContentUpdate : Swift.Sendable {
    case initial(urls: [Foundation.URL])
    case added(url: Foundation.URL)
    case removed(url: Foundation.URL)
  }
  @available(iOS 18.0, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static let shared: LockedCameraCapture.LockedCameraCaptureManager
  @available(iOS 18.0, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  final public var sessionContentURLs: [Foundation.URL] {
    get
  }
  @available(iOS 18.0, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  final public var sessionContentUpdates: some _Concurrency.AsyncSequence<LockedCameraCapture.LockedCameraCaptureManager.SessionContentUpdate, Swift.Never> {
    get
  }
  @objc deinit
  @available(iOS 18.0, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  final public func invalidateSessionContent(at url: Foundation.URL) async throws
  @available(iOS 18.1, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  final public func beginDelayingAppearance()
  @available(iOS 18.1, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  final public func endDelayingAppearance()
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension LockedCameraCapture.LockedCameraCaptureUIScene : Swift.Sendable {}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension LockedCameraCapture.LockedCameraCaptureSession.ApplicationLaunchError : Swift.Equatable {}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension LockedCameraCapture.LockedCameraCaptureSession.ApplicationLaunchError : Swift.Hashable {}
