// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.5 clang-1700.0.13.3)
// swift-module-flags: -target x86_64-apple-ios18.4-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature Macros -enable-experimental-feature ExtensionMacros -enable-experimental-feature IsolatedAny2 -enable-upcoming-feature InferSendableFromCaptures -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 6.4.41 -module-name SwiftUI -package-name SwiftUI
// swift-module-flags-ignorable:  -interface-compiler-version 6.1
import Combine
import CoreData
import CoreFoundation
@_exported import CoreGraphics
@_exported import CoreTransferable
@_exported import DeveloperToolsSupport
import Foundation
import OSLog
import Observation
import Spatial
import Swift
@_exported import SwiftUI
@_exported import SwiftUICore
import Symbols
import UIKit
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityValue(_ valueDescription: SwiftUICore.Text, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityValue(_ valueKey: SwiftUICore.LocalizedStringKey, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload nonisolated public func accessibilityValue<S>(_ value: S, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityValue(_ valueDescription: SwiftUICore.Text, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
  nonisolated public func accessibilityValue(_ valueKey: SwiftUICore.LocalizedStringKey, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_disfavoredOverload nonisolated public func accessibilityValue<S>(_ value: S, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.TabContent {
  nonisolated public func accessibilityValue(_ valueDescription: SwiftUICore.Text, isEnabled: Swift.Bool = true) -> some SwiftUI.TabContent<Self.TabValue>
  
  nonisolated public func accessibilityValue(_ valueKey: SwiftUICore.LocalizedStringKey, isEnabled: Swift.Bool = true) -> some SwiftUI.TabContent<Self.TabValue>
  
  @_disfavoredOverload nonisolated public func accessibilityValue<S>(_ value: S, isEnabled: Swift.Bool = true) -> some SwiftUI.TabContent<Self.TabValue> where S : Swift.StringProtocol
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityValue(_ valueDescription: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityValue(_ valueKey: SwiftUICore.LocalizedStringKey) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload nonisolated public func accessibilityValue<S>(_ value: S) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityValue(_ valueDescription: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityValue(_ valueKey: SwiftUICore.LocalizedStringKey) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_disfavoredOverload nonisolated public func accessibilityValue<S>(_ value: S) -> SwiftUICore.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
}
extension SwiftUICore.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  nonisolated public func accessibility(value: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  nonisolated public func accessibility(value: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
extension SwiftUICore.EnvironmentValues {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public var accessibilityLargeContentViewerEnabled: Swift.Bool {
    get
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public var _accessibilityLargeContentViewerEnabled: Swift.Bool {
    get
    set
  }
}
extension SwiftUICore.View {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public func accessibilityShowsLargeContentViewer<V>(@SwiftUICore.ViewBuilder _ largeContentView: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public func accessibilityShowsLargeContentViewer() -> some SwiftUICore.View
  
}
extension SwiftUI.TextField where Label == SwiftUICore.Text {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public init<F>(_ titleKey: SwiftUICore.LocalizedStringKey, value: SwiftUICore.Binding<F.FormatInput?>, format: F, prompt: SwiftUICore.Text? = nil) where F : Foundation.ParseableFormatStyle, F.FormatOutput == Swift.String
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_disfavoredOverload nonisolated public init<S, F>(_ title: S, value: SwiftUICore.Binding<F.FormatInput?>, format: F, prompt: SwiftUICore.Text? = nil) where S : Swift.StringProtocol, F : Foundation.ParseableFormatStyle, F.FormatOutput == Swift.String
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public init<F>(_ titleKey: SwiftUICore.LocalizedStringKey, value: SwiftUICore.Binding<F.FormatInput>, format: F, prompt: SwiftUICore.Text? = nil) where F : Foundation.ParseableFormatStyle, F.FormatOutput == Swift.String
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_disfavoredOverload nonisolated public init<S, F>(_ title: S, value: SwiftUICore.Binding<F.FormatInput>, format: F, prompt: SwiftUICore.Text? = nil) where S : Swift.StringProtocol, F : Foundation.ParseableFormatStyle, F.FormatOutput == Swift.String
}
extension SwiftUI.TextField {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public init<F>(value: SwiftUICore.Binding<F.FormatInput?>, format: F, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder label: () -> Label) where F : Foundation.ParseableFormatStyle, F.FormatOutput == Swift.String
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public init<F>(value: SwiftUICore.Binding<F.FormatInput>, format: F, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder label: () -> Label) where F : Foundation.ParseableFormatStyle, F.FormatOutput == Swift.String
}
extension SwiftUI.TextField where Label == SwiftUICore.Text {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, value: SwiftUICore.Binding<V>, formatter: Foundation.Formatter, prompt: SwiftUICore.Text?)
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_disfavoredOverload nonisolated public init<S, V>(_ title: S, value: SwiftUICore.Binding<V>, formatter: Foundation.Formatter, prompt: SwiftUICore.Text?) where S : Swift.StringProtocol
}
extension SwiftUI.TextField {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public init<V>(value: SwiftUICore.Binding<V>, formatter: Foundation.Formatter, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder label: () -> Label)
}
extension SwiftUI.TextField where Label == SwiftUICore.Text {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @_alwaysEmitIntoClient nonisolated public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, value: SwiftUICore.Binding<V>, formatter: Foundation.Formatter) {
        self.init(
            titleKey, value: value, formatter: formatter,
            onEditingChanged: { _ in }, onCommit: {})
    }
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public init<S, V>(_ title: S, value: SwiftUICore.Binding<V>, formatter: Foundation.Formatter) where S : Swift.StringProtocol {
        self.init(
            title, value: value, formatter: formatter,
            onEditingChanged: { _ in }, onCommit: {})
    }
}
extension SwiftUI.TextField where Label == SwiftUICore.Text {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  nonisolated public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, value: SwiftUICore.Binding<V>, formatter: Foundation.Formatter, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void, onCommit: @escaping () -> Swift.Void)
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @_alwaysEmitIntoClient nonisolated public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, value: SwiftUICore.Binding<V>, formatter: Foundation.Formatter, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void) {
        self.init(
            titleKey, value: value, formatter: formatter,
            onEditingChanged: onEditingChanged, onCommit: {})
    }
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @_alwaysEmitIntoClient nonisolated public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, value: SwiftUICore.Binding<V>, formatter: Foundation.Formatter, onCommit: @escaping () -> Swift.Void) {
        self.init(
            titleKey, value: value, formatter: formatter,
            onEditingChanged: { _ in }, onCommit: onCommit)
    }
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @_disfavoredOverload nonisolated public init<S, V>(_ title: S, value: SwiftUICore.Binding<V>, formatter: Foundation.Formatter, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void, onCommit: @escaping () -> Swift.Void) where S : Swift.StringProtocol
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<S, V>(_ title: S, value: SwiftUICore.Binding<V>, formatter: Foundation.Formatter, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void) where S : Swift.StringProtocol {
        self.init(
            title, value: value, formatter: formatter,
            onEditingChanged: onEditingChanged, onCommit: {})
    }
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<S, V>(_ title: S, value: SwiftUICore.Binding<V>, formatter: Foundation.Formatter, onCommit: @escaping () -> Swift.Void) where S : Swift.StringProtocol {
        self.init(
            title, value: value, formatter: formatter,
            onEditingChanged: { _ in }, onCommit: onCommit)
    }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct SceneRestorationBehavior : Swift.Sendable {
  public static let automatic: SwiftUI.SceneRestorationBehavior
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static let disabled: SwiftUI.SceneRestorationBehavior
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.Scene {
  nonisolated public func restorationBehavior(_ behavior: SwiftUI.SceneRestorationBehavior) -> some SwiftUI.Scene
  
}
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, introduced: 7.0, deprecated: 100000.0)
@available(visionOS, unavailable)
extension SwiftUI.TabViewStyle where Self == SwiftUI.CarouselTabViewStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var carousel: SwiftUI.CarouselTabViewStyle {
    get { .init() }
  }
}
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, introduced: 7.0, deprecated: 100000.0, renamed: "VerticalTabViewStyle")
@available(visionOS, unavailable)
public struct CarouselTabViewStyle : SwiftUI.TabViewStyle {
  public init()
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.CarouselTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.CarouselTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.CarouselTabViewStyle : Swift.Sendable {
}
@available(iOS 16.4, tvOS 16.4, *)
@available(macOS, unavailable)
extension SwiftUI.UIHostingController {
  @available(iOS 16.4, tvOS 16.4, *)
  @available(macOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public var safeAreaRegions: SwiftUICore.SafeAreaRegions {
    get
    set
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.View {
  nonisolated public func navigationSplitViewColumnWidth(_ width: CoreFoundation.CGFloat) -> some SwiftUICore.View
  
  nonisolated public func navigationSplitViewColumnWidth(min: CoreFoundation.CGFloat? = nil, ideal: CoreFoundation.CGFloat, max: CoreFoundation.CGFloat? = nil) -> some SwiftUICore.View
  
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Table {
  @available(iOS 16.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @usableFromInline
  nonisolated internal init(@SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows)
  @available(iOS 16.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @usableFromInline
  nonisolated internal init(selection: SwiftUICore.Binding<Value.ID?>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows)
  @available(iOS 16.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @usableFromInline
  nonisolated internal init(selection: SwiftUICore.Binding<Swift.Set<Value.ID>>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public enum AccessibilityLabeledPairRole {
  case label
  case content
  public static func == (a: SwiftUI.AccessibilityLabeledPairRole, b: SwiftUI.AccessibilityLabeledPairRole) -> Swift.Bool
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.AccessibilityLabeledPairRole : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityLinkedGroup<ID>(id: ID, in namespace: SwiftUICore.Namespace.ID) -> some SwiftUICore.View where ID : Swift.Hashable
  
  nonisolated public func accessibilityLabeledPair<ID>(role: SwiftUI.AccessibilityLabeledPairRole, id: ID, in namespace: SwiftUICore.Namespace.ID) -> some SwiftUICore.View where ID : Swift.Hashable
  
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `Menu` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct MenuButton<Label, Content> : SwiftUICore.View where Label : SwiftUICore.View, Content : SwiftUICore.View {
  public init(label: Label, @SwiftUICore.ViewBuilder content: () -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS, unavailable, message: "Use `Menu` instead.")
  @available(tvOS, unavailable, message: "Use `Menu` instead.")
  @available(watchOS, unavailable, message: "Use `Menu` instead.")
  @available(visionOS, unavailable, message: "Use `Menu` instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `Menu` instead.")
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI10MenuButtonV4bodyQrvp", 0) __<Label, Content>
}
@available(*, unavailable)
extension SwiftUI.MenuButton : Swift.Sendable {
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `Menu` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.MenuButton where Label == SwiftUICore.Text {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
}
@available(iOS 17.5, macOS 14.5, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
@frozen internal struct LimitedAvailabilityTableColumnContent<TableRowValue, TableColumnSortComparator> : SwiftUI.TableColumnContent where TableRowValue : Swift.Identifiable, TableColumnSortComparator : Foundation.SortComparator {
  public typealias TableRowValue = TableRowValue
  public typealias TableColumnSortComparator = TableColumnSortComparator
  public typealias TableColumnBody = Swift.Never
  internal let storage: SwiftUI.LimitedAvailabilityTableColumnContentStorageBase<TableRowValue, TableColumnSortComparator>
  @usableFromInline
  internal init(erasing: some TableColumnContent<TableRowValue, TableColumnSortComparator>)
  nonisolated public static func _makeContent(content: SwiftUICore._GraphValue<SwiftUI.LimitedAvailabilityTableColumnContent<TableRowValue, TableColumnSortComparator>>, inputs: SwiftUI._TableColumnInputs) -> SwiftUI._TableColumnOutputs
  @_alwaysEmitIntoClient nonisolated public static func _tableColumnCount(inputs: SwiftUI._TableColumnInputs) -> Swift.Int? {
        return nil
    }
  nonisolated public var tableColumnBody: Swift.Never {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.LimitedAvailabilityTableColumnContent : Swift.Sendable {
}
@_hasMissingDesignatedInitializers @available(iOS 17.5, macOS 14.5, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
internal class LimitedAvailabilityTableColumnContentStorageBase<TableRowValue, TableColumnSortComparator> where TableRowValue : Swift.Identifiable, TableColumnSortComparator : Foundation.SortComparator {
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUI.LimitedAvailabilityTableColumnContentStorageBase : Swift.Sendable {
}
@available(macCatalyst 16.2, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
internal struct NavigationSplitViewOpaqueBackgroundTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @available(macCatalyst 16.2, *)
  @usableFromInline
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  internal typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.NavigationSplitViewOpaqueBackgroundTraitKey : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func handGestureShortcut(_ shortcut: SwiftUI.HandGestureShortcut, isEnabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
@available(visionOS, unavailable)
public struct HandGestureShortcut : Swift.Sendable, Swift.Equatable {
  public static let primaryAction: SwiftUI.HandGestureShortcut
  public static func == (a: SwiftUI.HandGestureShortcut, b: SwiftUI.HandGestureShortcut) -> Swift.Bool
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct Settings<Content> : SwiftUI.Scene where Content : SwiftUICore.View {
  public init(@SwiftUICore.ViewBuilder content: () -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Scene {
    get
  }
  @available(macOS 11.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI8SettingsV4bodyQrvp", 0) __<Content>
}
@available(*, unavailable)
extension SwiftUI.Settings : Swift.Sendable {
}
@available(iOS 13.0, macOS 12.0, tvOS 13.0, watchOS 6.0, *)
public protocol _PerformanceTest : SwiftUICore._Test {
  var name: Swift.String { get }
  func runTest(host: any SwiftUICore._BenchmarkHost, options: [Swift.AnyHashable : Any])
}
@available(iOS 13.0, macOS 12.0, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__App {
  public static func _registerPerformanceTests(_ tests: [any SwiftUI._PerformanceTest])
}
@available(iOS 13.0, macOS 12.0, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore._BenchmarkHost {
  public func _started(test: any SwiftUI._PerformanceTest)
  public func _finished(test: any SwiftUI._PerformanceTest)
  public func _failed(test: any SwiftUI._PerformanceTest)
}
@available(iOS 17.0, macOS 13.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct WindowResizability : Swift.Sendable {
  public static var automatic: SwiftUI.WindowResizability {
    get
    set
  }
  public static var contentSize: SwiftUI.WindowResizability {
    get
    set
  }
  public static var contentMinSize: SwiftUI.WindowResizability {
    get
    set
  }
}
@available(iOS 17.0, macOS 13.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func windowResizability(_ resizability: SwiftUI.WindowResizability) -> some SwiftUI.Scene
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum __App {
}
@available(*, unavailable)
extension SwiftUI.__App : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__App {
  public static func run<V>(_ rootView: V) -> Swift.Never where V : SwiftUICore.View
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol ListStyle {
  static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<Self, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<Self, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ListValue<Style, SelectionValue> where Style : SwiftUI.ListStyle, SelectionValue : Swift.Hashable {
}
@available(*, unavailable)
extension SwiftUI._ListValue : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  nonisolated public func listStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.ListStyle
  
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@frozen @_Concurrency.MainActor @preconcurrency public struct EmptyControlWidgetConfiguration : SwiftUI.ControlWidgetConfiguration {
  public typealias Body = Swift.Never
  @inlinable @_Concurrency.MainActor @preconcurrency public init() {}
  @_Concurrency.MainActor @preconcurrency public static func _makeWidgetControlConfiguration(control: SwiftUICore._GraphValue<SwiftUI.EmptyControlWidgetConfiguration>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
}
@available(*, unavailable)
extension SwiftUI.EmptyControlWidgetConfiguration : Swift.Sendable {
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct WindowLevel : Swift.Sendable, Swift.Hashable {
  public static var automatic: SwiftUI.WindowLevel {
    get
  }
  public static var desktop: SwiftUI.WindowLevel {
    get
  }
  public static var floating: SwiftUI.WindowLevel {
    get
  }
  public static var normal: SwiftUI.WindowLevel {
    get
  }
  public static func == (a: SwiftUI.WindowLevel, b: SwiftUI.WindowLevel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func windowLevel(_ level: SwiftUI.WindowLevel) -> some SwiftUI.Scene
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore._TestApp {
  public func run() -> Swift.Never
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct AccessibilityActionCategory : Swift.Equatable, Swift.Sendable {
  public static let `default`: SwiftUI.AccessibilityActionCategory
  public static let edit: SwiftUI.AccessibilityActionCategory
  public init(_ name: SwiftUICore.Text)
  public init(_ nameKey: SwiftUICore.LocalizedStringKey)
  @_disfavoredOverload public init(_ name: some StringProtocol)
  public static func == (a: SwiftUI.AccessibilityActionCategory, b: SwiftUI.AccessibilityActionCategory) -> Swift.Bool
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityActions<Content>(category: SwiftUI.AccessibilityActionCategory, @SwiftUICore.ViewBuilder _ content: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use `View.confirmationDialog(title:isPresented:titleVisibility:presenting::actions:)`instead.")
@available(macOS, unavailable)
@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use `View.confirmationDialog(title:isPresented:titleVisibility:presenting:actions:)`instead.")
@available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use `View.confirmationDialog(title:isPresented:titleVisibility:presenting:actions:)`instead.")
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use `View.confirmationDialog(title:isPresented:titleVisibility:presenting:actions:)`instead.")
public struct ActionSheet {
  public init(title: SwiftUICore.Text, message: SwiftUICore.Text? = nil, buttons: [SwiftUI.ActionSheet.Button] = [.cancel()])
  public typealias Button = SwiftUI.Alert.Button
}
@available(*, unavailable)
extension SwiftUI.ActionSheet : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use `confirmationDialog(title:isPresented:titleVisibility:presenting::actions:)`instead.")
  @available(macOS, unavailable)
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use `confirmationDialog(title:isPresented:titleVisibility:presenting:actions:)`instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use `confirmationDialog(title:isPresented:titleVisibility:presenting:actions:)`instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use `confirmationDialog(title:isPresented:titleVisibility:presenting:actions:)`instead.")
  nonisolated public func actionSheet<T>(item: SwiftUICore.Binding<T?>, content: (T) -> SwiftUI.ActionSheet) -> some SwiftUICore.View where T : Swift.Identifiable
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use `confirmationDialog(title:isPresented:titleVisibility:presenting::actions:)`instead.")
  @available(macOS, unavailable)
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use `confirmationDialog(title:isPresented:titleVisibility:presenting:actions:)`instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use `confirmationDialog(title:isPresented:titleVisibility:presenting:actions:)`instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use `confirmationDialog(title:isPresented:titleVisibility:presenting:actions:)`instead.")
  nonisolated public func actionSheet(isPresented: SwiftUICore.Binding<Swift.Bool>, content: () -> SwiftUI.ActionSheet) -> some SwiftUICore.View
  
}
@available(iOS 17.4, macOS 14.4, visionOS 1.1, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  @_alwaysEmitIntoClient public static func buildIf<C>(_ content: C?) -> C? where RowValue == C.TableRowValue, Sort == C.TableColumnSortComparator, C : SwiftUI.TableColumnContent {
        content
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildIf<C>(_ content: C?) -> C? where RowValue == C.TableRowValue, C : SwiftUI.TableColumnContent, C.TableColumnSortComparator == Swift.Never {
        content
    }
  @_alwaysEmitIntoClient public static func buildEither<T, F>(first: T) -> SwiftUICore._ConditionalContent<T, F> where RowValue == T.TableRowValue, Sort == T.TableColumnSortComparator, T : SwiftUI.TableColumnContent, F : SwiftUI.TableColumnContent, T.TableColumnSortComparator == F.TableColumnSortComparator, T.TableRowValue == F.TableRowValue {
        _ConditionalContent<T, F>(storage: .trueContent(first))
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildEither<T, F>(first: T) -> SwiftUICore._ConditionalContent<T, F> where RowValue == T.TableRowValue, T : SwiftUI.TableColumnContent, F : SwiftUI.TableColumnContent, T.TableColumnSortComparator == Swift.Never, T.TableRowValue == F.TableRowValue, F.TableColumnSortComparator == Swift.Never {
        _ConditionalContent<T, F>(storage: .trueContent(first))
    }
  @_alwaysEmitIntoClient public static func buildEither<T, F>(second: F) -> SwiftUICore._ConditionalContent<T, F> where RowValue == T.TableRowValue, Sort == T.TableColumnSortComparator, T : SwiftUI.TableColumnContent, F : SwiftUI.TableColumnContent, T.TableColumnSortComparator == F.TableColumnSortComparator, T.TableRowValue == F.TableRowValue {
        _ConditionalContent<T, F>(storage: .falseContent(second))
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildEither<T, F>(second: F) -> SwiftUICore._ConditionalContent<T, F> where RowValue == T.TableRowValue, T : SwiftUI.TableColumnContent, F : SwiftUI.TableColumnContent, T.TableColumnSortComparator == Swift.Never, T.TableRowValue == F.TableRowValue, F.TableColumnSortComparator == Swift.Never {
        _ConditionalContent<T, F>(storage: .falseContent(second))
    }
}
@available(iOS 17.5, macOS 14.5, visionOS 1.2, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  @_alwaysEmitIntoClient public static func buildLimitedAvailability(_ content: any SwiftUI.TableColumnContent<RowValue, Sort>) -> some SwiftUI.TableColumnContent<RowValue, Sort> {
        if #unavailable(iOS 17.5, macOS 14.5, visionOS 1.2) {
            return TupleTableColumnContent((), valueType: RowValue.self, sortType: Sort.self)
        } else {
            return LimitedAvailabilityTableColumnContent<_, _>(erasing: content)
        }
    }
  
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildLimitedAvailability(_ content: any SwiftUI.TableColumnContent<RowValue, Swift.Never>) -> some SwiftUI.TableColumnContent<RowValue, Swift.Never> {
        if #unavailable(iOS 17.5, macOS 14.5, visionOS 1.2) {
            return TupleTableColumnContent((), valueType: RowValue.self, sortType: Never.self)
        } else {
            return LimitedAvailabilityTableColumnContent<_, _>(erasing: content)
        }
    }
  
}
@available(iOS 17.4, macOS 14.4, visionOS 1.1, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore._ConditionalContent : SwiftUI.TableColumnContent where TrueContent : SwiftUI.TableColumnContent, FalseContent : SwiftUI.TableColumnContent {
  public typealias TableRowValue = TrueContent.TableRowValue
  public typealias TableColumnSortComparator = TrueContent.TableColumnSortComparator
  public typealias TableRowBody = Swift.Never
  nonisolated public static func _makeContent(content: SwiftUICore._GraphValue<SwiftUICore._ConditionalContent<TrueContent, FalseContent>>, inputs: SwiftUI._TableColumnInputs) -> SwiftUI._TableColumnOutputs
  nonisolated public static func _tableColumnCount(inputs: SwiftUI._TableColumnInputs) -> Swift.Int?
  @usableFromInline
  internal init(storage: SwiftUICore._ConditionalContent<TrueContent, FalseContent>.Storage)
  @available(iOS 17.4, visionOS 1.1, macOS 14.4, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias TableColumnBody = Swift.Never
}
@available(iOS 17.4, macOS 14.4, visionOS 1.1, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Optional : SwiftUI.TableColumnContent where Wrapped : SwiftUI.TableColumnContent {
  public typealias TableRowValue = Wrapped.TableRowValue
  public typealias TableColumnSortComparator = Wrapped.TableColumnSortComparator
  public typealias TableRowBody = Swift.Never
  nonisolated public static func _makeContent(content: SwiftUICore._GraphValue<Swift.Optional<Wrapped>>, inputs: SwiftUI._TableColumnInputs) -> SwiftUI._TableColumnOutputs
  nonisolated public static func _tableColumnCount(inputs: SwiftUI._TableColumnInputs) -> Swift.Int?
  @available(iOS 17.4, visionOS 1.1, macOS 14.4, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias TableColumnBody = Swift.Never
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityLabel(_ label: SwiftUICore.Text, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityLabel(_ labelKey: SwiftUICore.LocalizedStringKey, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload nonisolated public func accessibilityLabel<S>(_ label: S, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityLabel(_ label: SwiftUICore.Text, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
  nonisolated public func accessibilityLabel(_ labelKey: SwiftUICore.LocalizedStringKey, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_disfavoredOverload nonisolated public func accessibilityLabel<S>(_ label: S, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityLabel<V>(@SwiftUICore.ViewBuilder content: (_ label: SwiftUICore.PlaceholderContentView<Self>) -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.TabContent {
  nonisolated public func accessibilityLabel(_ label: SwiftUICore.Text, isEnabled: Swift.Bool = true) -> some SwiftUI.TabContent<Self.TabValue>
  
  nonisolated public func accessibilityLabel(_ labelKey: SwiftUICore.LocalizedStringKey, isEnabled: Swift.Bool = true) -> some SwiftUI.TabContent<Self.TabValue>
  
  @_disfavoredOverload nonisolated public func accessibilityLabel<S>(_ label: S, isEnabled: Swift.Bool = true) -> some SwiftUI.TabContent<Self.TabValue> where S : Swift.StringProtocol
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityLabel(_ label: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityLabel(_ labelKey: SwiftUICore.LocalizedStringKey) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload nonisolated public func accessibilityLabel<S>(_ label: S) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityLabel(_ label: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Content, Modifier>
  nonisolated public func accessibilityLabel(_ labelKey: SwiftUICore.LocalizedStringKey) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_disfavoredOverload nonisolated public func accessibilityLabel<S>(_ label: S) -> SwiftUICore.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@available(visionOS, unavailable)
public struct SensoryFeedback : Swift.Equatable, Swift.Sendable {
  public static let success: SwiftUI.SensoryFeedback
  public static let warning: SwiftUI.SensoryFeedback
  public static let error: SwiftUI.SensoryFeedback
  public static let selection: SwiftUI.SensoryFeedback
  public static let increase: SwiftUI.SensoryFeedback
  public static let decrease: SwiftUI.SensoryFeedback
  public static let start: SwiftUI.SensoryFeedback
  public static let stop: SwiftUI.SensoryFeedback
  public static let alignment: SwiftUI.SensoryFeedback
  public static let levelChange: SwiftUI.SensoryFeedback
  @available(iOS 17.5, macOS 14.5, tvOS 17.5, watchOS 10.5, *)
  public static let pathComplete: SwiftUI.SensoryFeedback
  public static let impact: SwiftUI.SensoryFeedback
  public static func impact(weight: SwiftUI.SensoryFeedback.Weight = .medium, intensity: Swift.Double = 1.0) -> SwiftUI.SensoryFeedback
  public static func impact(flexibility: SwiftUI.SensoryFeedback.Flexibility, intensity: Swift.Double = 1.0) -> SwiftUI.SensoryFeedback
  public struct Weight : Swift.Equatable, Swift.Sendable {
    public static let light: SwiftUI.SensoryFeedback.Weight
    public static let medium: SwiftUI.SensoryFeedback.Weight
    public static let heavy: SwiftUI.SensoryFeedback.Weight
    public static func == (a: SwiftUI.SensoryFeedback.Weight, b: SwiftUI.SensoryFeedback.Weight) -> Swift.Bool
  }
  public struct Flexibility : Swift.Equatable, Swift.Sendable {
    public static let rigid: SwiftUI.SensoryFeedback.Flexibility
    public static let solid: SwiftUI.SensoryFeedback.Flexibility
    public static let soft: SwiftUI.SensoryFeedback.Flexibility
    public static func == (a: SwiftUI.SensoryFeedback.Flexibility, b: SwiftUI.SensoryFeedback.Flexibility) -> Swift.Bool
  }
  public static func == (a: SwiftUI.SensoryFeedback, b: SwiftUI.SensoryFeedback) -> Swift.Bool
}
@available(iOS, introduced: 15.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView")
@available(macOS, introduced: 12.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView")
extension SwiftUI.NavigationViewStyle where Self == SwiftUI.ColumnNavigationViewStyle {
  @_alwaysEmitIntoClient public static var columns: SwiftUI.ColumnNavigationViewStyle {
    get { .init() }
  }
}
@available(iOS, introduced: 15.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView")
@available(macOS, introduced: 12.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView")
public struct ColumnNavigationViewStyle : SwiftUI.NavigationViewStyle {
  @usableFromInline
  internal init()
  public func _body(configuration: SwiftUI._NavigationViewStyleConfiguration) -> some SwiftUICore.View
  
  @available(iOS 15.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func _columnBasedBody(configuration: SwiftUI._NavigationViewStyleConfiguration) -> some SwiftUICore.View
  
  @available(iOS, introduced: 15.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView")
  @available(tvOS, unavailable, message: "replace styled NavigationView with NavigationSplitView")
  @available(watchOS, unavailable, message: "replace styled NavigationView with NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView")
  @available(macOS, introduced: 12.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView")
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI25ColumnNavigationViewStyleV5_body13configurationQrAA01_deF13ConfigurationV_tF", 0) __
  @available(iOS, introduced: 15.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView")
  @available(tvOS, unavailable, message: "replace styled NavigationView with NavigationSplitView")
  @available(watchOS, unavailable, message: "replace styled NavigationView with NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView")
  @available(macOS, introduced: 12.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView")
  public typealias _Body2 = @_opaqueReturnTypeOf("$s7SwiftUI25ColumnNavigationViewStyleV16_columnBasedBody13configurationQrAA01_deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.ColumnNavigationViewStyle : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore._TestApp {
  public func runBenchmarks(_ benchmarks: [any SwiftUICore._Benchmark]) -> Swift.Never
}
extension SwiftUICore._TestApp {
  @available(iOS 14.0, macOS 12.0, tvOS 14.0, watchOS 7.0, *)
  public func runPerformanceTests(_ tests: [any SwiftUI._PerformanceTest]) -> Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _SceneInputs {
}
@available(*, unavailable)
extension SwiftUI._SceneInputs : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.EnvironmentValues {
  public var accessibilityVoiceOverEnabled: Swift.Bool {
    get
  }
  public var accessibilitySwitchControlEnabled: Swift.Bool {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.EnvironmentValues {
  public var accessibilityAssistiveAccessEnabled: Swift.Bool {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.PrimitiveButtonStyle where Self == SwiftUI.DefaultButtonStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.DefaultButtonStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct DefaultButtonStyle : SwiftUI.PrimitiveButtonStyle {
  public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.DefaultButtonStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI18DefaultButtonStyleV8makeBody13configurationQrAA09PrimitivedE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.DefaultButtonStyle : Swift.Sendable {
}
@available(iOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.PickerStyle where Self == SwiftUI.WheelPickerStyle {
  @_alwaysEmitIntoClient public static var wheel: SwiftUI.WheelPickerStyle {
    get { .init() }
  }
}
@available(iOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct WheelPickerStyle : SwiftUI.PickerStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.WheelPickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.WheelPickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.WheelPickerStyle : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct ListRowInsetsTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUICore.EdgeInsets? {
    get { nil }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  internal typealias Value = SwiftUICore.EdgeInsets?
}
@available(*, unavailable)
extension SwiftUI.ListRowInsetsTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func listRowInsets(_ insets: SwiftUICore.EdgeInsets?) -> some SwiftUICore.View {
        return _trait(ListRowInsetsTraitKey.self, insets)
    }
  
}
@available(iOS 17.0, macOS 13.0, tvOS 17.0, watchOS 10.0, *)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func dialogIcon(_ icon: SwiftUICore.Image?) -> some SwiftUICore.View
  
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func dialogIcon(_ icon: SwiftUICore.Image?) -> some SwiftUI.Scene
  
}
@available(macOS 15.4, *)
@available(iOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func dialogPreventsAppTermination(_ prevents: Swift.Bool?) -> some SwiftUICore.View
  
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use View.alert(_:isPresented:presenting:actions:) instead.")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use View.alert(_:isPresented:presenting:actions:) instead.")
@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use View.alert(_:isPresented:presenting:actions:) instead.")
@available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use View.alert(_:isPresented:presenting:actions:) instead.")
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use View.alert(_:isPresented:presenting:actions:) instead.")
public struct Alert {
  public init(title: SwiftUICore.Text, message: SwiftUICore.Text? = nil, dismissButton: SwiftUI.Alert.Button? = nil)
  public init(title: SwiftUICore.Text, message: SwiftUICore.Text? = nil, primaryButton: SwiftUI.Alert.Button, secondaryButton: SwiftUI.Alert.Button)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(macOS, unavailable)
  @available(visionOS, unavailable)
  public static func sideBySideButtons(title: SwiftUICore.Text, message: SwiftUICore.Text? = nil, primaryButton: SwiftUI.Alert.Button, secondaryButton: SwiftUI.Alert.Button) -> SwiftUI.Alert
  public struct Button {
    public static func `default`(_ label: SwiftUICore.Text, action: (() -> Swift.Void)? = {}) -> SwiftUI.Alert.Button
    public static func cancel(_ label: SwiftUICore.Text, action: (() -> Swift.Void)? = {}) -> SwiftUI.Alert.Button
    public static func cancel(_ action: (() -> Swift.Void)? = {}) -> SwiftUI.Alert.Button
    public static func destructive(_ label: SwiftUICore.Text, action: (() -> Swift.Void)? = {}) -> SwiftUI.Alert.Button
  }
}
@available(*, unavailable)
extension SwiftUI.Alert : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.Alert.Button : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  nonisolated public func alert<Item>(item: SwiftUICore.Binding<Item?>, content: (Item) -> SwiftUI.Alert) -> some SwiftUICore.View where Item : Swift.Identifiable
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  nonisolated public func alert(isPresented: SwiftUICore.Binding<Swift.Bool>, content: () -> SwiftUI.Alert) -> some SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.ToggleStyle where Self == SwiftUI.ButtonToggleStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var button: SwiftUI.ButtonToggleStyle {
    get { .init() }
  }
}
@available(iOS 15.0, macOS 12.0, watchOS 9.0, *)
@available(tvOS, unavailable)
public struct ButtonToggleStyle : SwiftUI.ToggleStyle {
  public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.ButtonToggleStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 15.0, watchOS 9.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI17ButtonToggleStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.ButtonToggleStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct Table<Value, Rows, Columns> : SwiftUICore.View where Value == Rows.TableRowValue, Rows : SwiftUI.TableRowContent, Columns : SwiftUI.TableColumnContent, Rows.TableRowValue == Columns.TableRowValue {
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUI.Table<Value, Rows, Columns>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 16.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.Table : Swift.Sendable {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Table {
  @_alwaysEmitIntoClient nonisolated public init(of valueType: Value.Type, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) {
         
        self.init(columns: columns, rows: rows)
    }
  @_alwaysEmitIntoClient nonisolated public init(of valueType: Value.Type, selection: SwiftUICore.Binding<Value.ID?>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) {
         
        self.init(selection: selection, columns: columns, rows: rows)
    }
  @_alwaysEmitIntoClient nonisolated public init(of valueType: Value.Type, selection: SwiftUICore.Binding<Swift.Set<Value.ID>>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) {
         
        self.init(selection: selection, columns: columns, rows: rows)
    }
  nonisolated public init<Sort>(sortOrder: SwiftUICore.Binding<[Sort]>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) where Sort : Foundation.SortComparator, Columns.TableRowValue == Sort.Compared
  @_alwaysEmitIntoClient nonisolated public init<Sort>(of valueType: Value.Type, sortOrder: SwiftUICore.Binding<[Sort]>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) where Sort : Foundation.SortComparator, Columns.TableRowValue == Sort.Compared {
        self.init(sortOrder: sortOrder, columns: columns, rows: rows)
    }
  nonisolated public init<Sort>(selection: SwiftUICore.Binding<Value.ID?>, sortOrder: SwiftUICore.Binding<[Sort]>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) where Sort : Foundation.SortComparator, Columns.TableRowValue == Sort.Compared
  @_alwaysEmitIntoClient nonisolated public init<Sort>(of valueType: Value.Type, selection: SwiftUICore.Binding<Value.ID?>, sortOrder: SwiftUICore.Binding<[Sort]>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) where Sort : Foundation.SortComparator, Columns.TableRowValue == Sort.Compared {
        self.init(
            selection: selection,
            sortOrder: sortOrder,
            columns: columns,
            rows: rows)
    }
  nonisolated public init<Sort>(selection: SwiftUICore.Binding<Swift.Set<Value.ID>>, sortOrder: SwiftUICore.Binding<[Sort]>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) where Sort : Foundation.SortComparator, Columns.TableRowValue == Sort.Compared
  @_alwaysEmitIntoClient nonisolated public init<Sort>(of valueType: Value.Type, selection: SwiftUICore.Binding<Swift.Set<Value.ID>>, sortOrder: SwiftUICore.Binding<[Sort]>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) where Sort : Foundation.SortComparator, Columns.TableRowValue == Sort.Compared {
        self.init(
            selection: selection,
            sortOrder: sortOrder,
            columns: columns,
            rows: rows)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Table {
  nonisolated public init<Data>(_ data: Data, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Columns.TableRowValue == Data.Element
  nonisolated public init<Data>(_ data: Data, selection: SwiftUICore.Binding<Value.ID?>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Columns.TableRowValue == Data.Element
  nonisolated public init<Data>(_ data: Data, selection: SwiftUICore.Binding<Swift.Set<Value.ID>>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Columns.TableRowValue == Data.Element
  nonisolated public init<Data, Sort>(_ data: Data, sortOrder: SwiftUICore.Binding<[Sort]>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Sort : Foundation.SortComparator, Columns.TableRowValue == Data.Element, Data.Element == Sort.Compared
  nonisolated public init<Data, Sort>(_ data: Data, selection: SwiftUICore.Binding<Value.ID?>, sortOrder: SwiftUICore.Binding<[Sort]>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Sort : Foundation.SortComparator, Columns.TableRowValue == Data.Element, Data.Element == Sort.Compared
  nonisolated public init<Data, Sort>(_ data: Data, selection: SwiftUICore.Binding<Swift.Set<Value.ID>>, sortOrder: SwiftUICore.Binding<[Sort]>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Sort : Foundation.SortComparator, Columns.TableRowValue == Data.Element, Data.Element == Sort.Compared
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Table {
  nonisolated public init(of valueType: Value.Type, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows)
  nonisolated public init(of valueType: Value.Type, selection: SwiftUICore.Binding<Value.ID?>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows)
  nonisolated public init(of valueType: Value.Type, selection: SwiftUICore.Binding<Swift.Set<Value.ID>>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows)
  nonisolated public init<Sort>(of valueType: Value.Type = Value.self, sortOrder: SwiftUICore.Binding<[Sort]>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) where Sort : Foundation.SortComparator, Columns.TableRowValue == Sort.Compared
  nonisolated public init<Sort>(of valueType: Value.Type = Value.self, selection: SwiftUICore.Binding<Value.ID?>, sortOrder: SwiftUICore.Binding<[Sort]>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) where Sort : Foundation.SortComparator, Columns.TableRowValue == Sort.Compared
  nonisolated public init<Sort>(of valueType: Value.Type = Value.self, selection: SwiftUICore.Binding<Swift.Set<Value.ID>>, sortOrder: SwiftUICore.Binding<[Sort]>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) where Sort : Foundation.SortComparator, Columns.TableRowValue == Sort.Compared
  nonisolated public init<Data>(_ data: Data, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Columns.TableRowValue == Data.Element
  nonisolated public init<Data>(_ data: Data, selection: SwiftUICore.Binding<Value.ID?>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Columns.TableRowValue == Data.Element
  nonisolated public init<Data>(_ data: Data, selection: SwiftUICore.Binding<Swift.Set<Value.ID>>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Columns.TableRowValue == Data.Element
  nonisolated public init<Data, Sort>(_ data: Data, sortOrder: SwiftUICore.Binding<[Sort]>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Sort : Foundation.SortComparator, Columns.TableRowValue == Data.Element, Data.Element == Sort.Compared
  nonisolated public init<Data, Sort>(_ data: Data, selection: SwiftUICore.Binding<Value.ID?>, sortOrder: SwiftUICore.Binding<[Sort]>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Sort : Foundation.SortComparator, Columns.TableRowValue == Data.Element, Data.Element == Sort.Compared
  nonisolated public init<Data, Sort>(_ data: Data, selection: SwiftUICore.Binding<Swift.Set<Value.ID>>, sortOrder: SwiftUICore.Binding<[Sort]>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Sort : Foundation.SortComparator, Columns.TableRowValue == Data.Element, Data.Element == Sort.Compared
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Table {
  nonisolated public init<Data>(_ data: Data, children: Swift.KeyPath<Value, Data?>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>? = nil, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns) where Rows == SwiftUI.TableOutlineGroupContent<Data>, Data : Swift.RandomAccessCollection, Columns.TableRowValue == Data.Element
  nonisolated public init<Data>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<Value.ID?>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>? = nil, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns) where Rows == SwiftUI.TableOutlineGroupContent<Data>, Data : Swift.RandomAccessCollection, Columns.TableRowValue == Data.Element
  nonisolated public init<Data>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<Swift.Set<Value.ID>>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>? = nil, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns) where Rows == SwiftUI.TableOutlineGroupContent<Data>, Data : Swift.RandomAccessCollection, Columns.TableRowValue == Data.Element
  nonisolated public init<Data, Sort>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, sortOrder: SwiftUICore.Binding<[Sort]>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>? = nil, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns) where Rows == SwiftUI.TableOutlineGroupContent<Data>, Data : Swift.RandomAccessCollection, Sort : Foundation.SortComparator, Columns.TableRowValue == Data.Element, Data.Element == Sort.Compared
  nonisolated public init<Data, Sort>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<Value.ID?>, sortOrder: SwiftUICore.Binding<[Sort]>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>? = nil, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns) where Rows == SwiftUI.TableOutlineGroupContent<Data>, Data : Swift.RandomAccessCollection, Sort : Foundation.SortComparator, Columns.TableRowValue == Data.Element, Data.Element == Sort.Compared
  nonisolated public init<Data, Sort>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<Swift.Set<Value.ID>>, sortOrder: SwiftUICore.Binding<[Sort]>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>? = nil, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns) where Rows == SwiftUI.TableOutlineGroupContent<Data>, Data : Swift.RandomAccessCollection, Sort : Foundation.SortComparator, Columns.TableRowValue == Data.Element, Data.Element == Sort.Compared
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TableOutlineGroupContent<Data> : SwiftUI.TableRowContent where Data : Swift.RandomAccessCollection, Data.Element : Swift.Identifiable {
  public typealias TableRowValue = Data.Element
  @_Concurrency.MainActor @preconcurrency public var tableRowBody: some SwiftUI.TableRowContent {
    get
  }
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias TableRowBody = @_opaqueReturnTypeOf("$s7SwiftUI24TableOutlineGroupContentV12tableRowBodyQrvp", 0) __<Data>
}
@available(*, unavailable)
extension SwiftUI.TableOutlineGroupContent : Swift.Sendable {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TableForEachContent<Data> : SwiftUI.TableRowContent where Data : Swift.RandomAccessCollection, Data.Element : Swift.Identifiable {
  public typealias TableRowValue = Data.Element
  @_Concurrency.MainActor @preconcurrency public var tableRowBody: some SwiftUI.TableRowContent {
    get
  }
  @available(iOS 16.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias TableRowBody = @_opaqueReturnTypeOf("$s7SwiftUI19TableForEachContentV12tableRowBodyQrvp", 0) __<Data>
}
@available(*, unavailable)
extension SwiftUI.TableForEachContent : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct DefaultDateProgressLabel : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24DefaultDateProgressLabelV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.DefaultDateProgressLabel : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.ProgressView {
  nonisolated public init(timerInterval: Swift.ClosedRange<Foundation.Date>, countsDown: Swift.Bool = true, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder currentValueLabel: () -> CurrentValueLabel)
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.ProgressView where CurrentValueLabel == SwiftUI.DefaultDateProgressLabel {
  nonisolated public init(timerInterval: Swift.ClosedRange<Foundation.Date>, countsDown: Swift.Bool = true, @SwiftUICore.ViewBuilder label: () -> Label)
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.ProgressView where Label == SwiftUICore.EmptyView, CurrentValueLabel == SwiftUI.DefaultDateProgressLabel {
  nonisolated public init(timerInterval: Swift.ClosedRange<Foundation.Date>, countsDown: Swift.Bool = true)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.LabelStyle where Self == SwiftUI.DefaultLabelStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.DefaultLabelStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct DefaultLabelStyle : SwiftUI.LabelStyle {
  public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.DefaultLabelStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI17DefaultLabelStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.DefaultLabelStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.EnvironmentValues {
  public var supportsMultipleWindows: Swift.Bool {
    get
  }
}
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func alternatingRowBackgrounds(_ behavior: SwiftUI.AlternatingRowBackgroundBehavior = .enabled) -> some SwiftUICore.View
  
}
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct AlternatingRowBackgroundBehavior : Swift.Hashable, Swift.Sendable {
  public static let automatic: SwiftUI.AlternatingRowBackgroundBehavior
  public static let enabled: SwiftUI.AlternatingRowBackgroundBehavior
  public static let disabled: SwiftUI.AlternatingRowBackgroundBehavior
  public static func == (a: SwiftUI.AlternatingRowBackgroundBehavior, b: SwiftUI.AlternatingRowBackgroundBehavior) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public protocol ScrollTargetBehavior {
  func updateTarget(_ target: inout SwiftUICore.ScrollTarget, context: Self.TargetContext)
  @available(iOS 18.4, macOS 15.4, tvOS 18.4, watchOS 11.4, visionOS 2.4, *)
  func properties(context: Self.PropertiesContext) -> Self.Properties
  typealias TargetContext = SwiftUI.ScrollTargetBehaviorContext
  @available(iOS 18.4, macOS 15.4, tvOS 18.4, watchOS 11.4, visionOS 2.4, *)
  typealias Properties = SwiftUI.ScrollTargetBehaviorProperties
  @available(iOS 18.4, macOS 15.4, tvOS 18.4, watchOS 11.4, visionOS 2.4, *)
  typealias PropertiesContext = SwiftUI.ScrollTargetBehaviorPropertiesContext
  static func _makeInputs(_ behavior: SwiftUICore._GraphValue<Self>, inputs: inout SwiftUICore._ViewInputs)
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  func _updateEnvironment(_ env: inout SwiftUICore.EnvironmentValues, context: SwiftUI._ScrollTargetBehaviorEnvironmentContext)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.ScrollTargetBehavior {
  public static func _makeInputs(_ behavior: SwiftUICore._GraphValue<Self>, inputs: inout SwiftUICore._ViewInputs)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.ScrollTargetBehavior {
  public func _updateEnvironment(_ env: inout SwiftUICore.EnvironmentValues, context: SwiftUI._ScrollTargetBehaviorEnvironmentContext)
}
@available(iOS 18.4, macOS 15.4, tvOS 18.4, watchOS 11.4, visionOS 2.4, *)
extension SwiftUI.ScrollTargetBehavior {
  public func properties(context: Self.PropertiesContext) -> Self.Properties
}
@available(iOS 18.4, macOS 15.4, tvOS 18.4, watchOS 11.4, visionOS 2.4, *)
public struct ScrollTargetBehaviorProperties : Swift.Equatable, Swift.Sendable {
  @available(macOS, unavailable)
  public var limitsScrolls: Swift.Bool {
    get
    set
  }
  public init()
  public static func == (a: SwiftUI.ScrollTargetBehaviorProperties, b: SwiftUI.ScrollTargetBehaviorProperties) -> Swift.Bool
}
@available(iOS 18.4, macOS 15.4, tvOS 18.4, watchOS 11.4, visionOS 2.4, *)
public struct ScrollTargetBehaviorPropertiesContext {
  public var environment: SwiftUICore.EnvironmentValues {
    get
  }
  public var axes: SwiftUICore.Axis.Set {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.ScrollTargetBehaviorPropertiesContext : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct _ScrollTargetBehaviorEnvironmentContext {
}
@available(*, unavailable)
extension SwiftUI._ScrollTargetBehaviorEnvironmentContext : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@dynamicMemberLookup public struct ScrollTargetBehaviorContext {
  public var originalTarget: SwiftUICore.ScrollTarget {
    get
  }
  public var velocity: CoreFoundation.CGVector {
    get
  }
  public var contentSize: CoreFoundation.CGSize {
    get
  }
  public var containerSize: CoreFoundation.CGSize {
    get
  }
  public var axes: SwiftUICore.Axis.Set {
    get
  }
  public subscript<T>(dynamicMember keyPath: Swift.KeyPath<SwiftUICore.EnvironmentValues, T>) -> T {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.ScrollTargetBehaviorContext : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func scrollTargetBehavior(_ behavior: some ScrollTargetBehavior) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func scrollTargetLayout(isEnabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@preconcurrency @_Concurrency.MainActor public struct DismissAction {
  @_Concurrency.MainActor @preconcurrency public func callAsFunction()
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.EnvironmentValues {
  public var dismiss: SwiftUI.DismissAction {
    get
  }
  public var isPresented: Swift.Bool {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 17.0, watchOS 8.0, *)
extension SwiftUI.PrimitiveButtonStyle where Self == SwiftUI.BorderlessButtonStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var borderless: SwiftUI.BorderlessButtonStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 17.0, watchOS 8.0, *)
public struct BorderlessButtonStyle : SwiftUI.PrimitiveButtonStyle {
  public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.BorderlessButtonStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 17.0, watchOS 8.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI21BorderlessButtonStyleV8makeBody13configurationQrAA09PrimitivedE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.BorderlessButtonStyle : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
public struct _WidgetInputs {
}
@available(*, unavailable)
extension SwiftUI._WidgetInputs : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func containerRelativeFrame(_ axes: SwiftUICore.Axis.Set, alignment: SwiftUICore.Alignment = .center) -> some SwiftUICore.View
  
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func containerRelativeFrame(_ axes: SwiftUICore.Axis.Set, count: Swift.Int, span: Swift.Int = 1, spacing: CoreFoundation.CGFloat, alignment: SwiftUICore.Alignment = .center) -> some SwiftUICore.View
  
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func containerRelativeFrame(_ axes: SwiftUICore.Axis.Set, alignment: SwiftUICore.Alignment = .center, _ length: @escaping (CoreFoundation.CGFloat, SwiftUICore.Axis) -> CoreFoundation.CGFloat) -> some SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.View {
  nonisolated public func navigationDestination<D, C>(for data: D.Type, @SwiftUICore.ViewBuilder destination: @escaping (D) -> C) -> some SwiftUICore.View where D : Swift.Hashable, C : SwiftUICore.View
  
  nonisolated public func navigationDestination<V>(isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder destination: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  nonisolated public func navigationDestination<D, C>(item: SwiftUICore.Binding<Swift.Optional<D>>, @SwiftUICore.ViewBuilder destination: @escaping (D) -> C) -> some SwiftUICore.View where D : Swift.Hashable, C : SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 18.0, macOS 15.0, visionOS 2.4, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @inlinable @_Concurrency.MainActor @preconcurrency public func writingToolsBehavior(_ behavior: SwiftUI.WritingToolsBehavior) -> some SwiftUICore.View {
        environment(\.writingToolsBehavior, behavior)
    }
  
}
@available(iOS 18.0, macOS 15.0, visionOS 2.4, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct WritingToolsBehavior : Swift.Sendable, Swift.Hashable {
  public static let automatic: SwiftUI.WritingToolsBehavior
  public static let complete: SwiftUI.WritingToolsBehavior
  public static let limited: SwiftUI.WritingToolsBehavior
  public static let disabled: SwiftUI.WritingToolsBehavior
  public static func == (a: SwiftUI.WritingToolsBehavior, b: SwiftUI.WritingToolsBehavior) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 18.0, macOS 15.0, visionOS 2.4, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  @usableFromInline
  internal var writingToolsBehavior: SwiftUI.WritingToolsBehavior? {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollableLayoutView<Data, Layout> : SwiftUICore.View where Data : Swift.RandomAccessCollection, Layout : SwiftUI._ScrollableLayout, Data.Element : SwiftUICore.View, Data.Index : Swift.Hashable {
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI._ScrollableLayoutView<Data, Layout>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._ScrollableLayoutView : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollableLayoutView : SwiftUI._ScrollableContentProvider {
  public var scrollableContent: SwiftUI._ScrollableLayoutView<Data, Layout> {
    get
  }
  public func decelerationTarget(contentOffset: CoreFoundation.CGPoint, originalContentOffset: CoreFoundation.CGPoint, velocity: SwiftUICore._Velocity<CoreFoundation.CGSize>, size: CoreFoundation.CGSize) -> CoreFoundation.CGPoint?
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Root = SwiftUI._ScrollViewRoot<SwiftUI._ScrollableLayoutView<Data, Layout>>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ScrollableContent = SwiftUI._ScrollableLayoutView<Data, Layout>
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct MenuBarExtra<Label, Content> : SwiftUI.Scene where Label : SwiftUICore.View, Content : SwiftUICore.View {
  public init(isInserted: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label)
  public init(@SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Scene {
    get
  }
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI12MenuBarExtraV4bodyQrvp", 0) __<Label, Content>
}
@available(*, unavailable)
extension SwiftUI.MenuBarExtra : Swift.Sendable {
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.MenuBarExtra where Label == SwiftUICore.Text {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, isInserted: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, isInserted: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.MenuBarExtra where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: Swift.String, isInserted: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, image: Swift.String, isInserted: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, isInserted: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, systemImage: Swift.String, isInserted: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, image: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, systemImage: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@usableFromInline
internal struct ListRowPlatterColorTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUICore.Color? {
    get { nil }
  }
  @available(watchOS 6.0, *)
  @usableFromInline
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @available(macOS, unavailable)
  internal typealias Value = SwiftUICore.Color?
}
@available(*, unavailable)
extension SwiftUI.ListRowPlatterColorTraitKey : Swift.Sendable {
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "listItemTint(_:)")
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @inlinable nonisolated public func listRowPlatterColor(_ color: SwiftUICore.Color?) -> some SwiftUICore.View {
        _trait(ListRowPlatterColorTraitKey.self, color)
    }
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@usableFromInline
internal struct ShouldExpandAllTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUICore.Binding<SwiftUI.ExpansionState>? {
    get { nil }
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @usableFromInline
  internal typealias Value = SwiftUICore.Binding<SwiftUI.ExpansionState>?
}
@available(*, unavailable)
extension SwiftUI.ShouldExpandAllTraitKey : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@usableFromInline
internal enum ExpansionState : Swift.CustomStringConvertible {
  case expanded
  case collapsed
  case unspecified
  @usableFromInline
  internal var description: Swift.String {
    get
  }
  @usableFromInline
  internal static func == (a: SwiftUI.ExpansionState, b: SwiftUI.ExpansionState) -> Swift.Bool
  @usableFromInline
  internal func hash(into hasher: inout Swift.Hasher)
  @usableFromInline
  internal var hashValue: Swift.Int {
    @usableFromInline
    get
  }
}
@available(*, unavailable)
extension SwiftUI.ExpansionState : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.NavigationSplitViewStyle where Self == SwiftUI.BalancedNavigationSplitViewStyle {
  @_Concurrency.MainActor @preconcurrency public static var balanced: SwiftUI.BalancedNavigationSplitViewStyle {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_Concurrency.MainActor @preconcurrency public struct BalancedNavigationSplitViewStyle : SwiftUI.NavigationSplitViewStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.BalancedNavigationSplitViewStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI32BalancedNavigationSplitViewStyleV8makeBody13configurationQrAA0defG13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.BalancedNavigationSplitViewStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.FormStyle where Self == SwiftUI.ColumnsFormStyle {
  @_Concurrency.MainActor @preconcurrency public static var columns: SwiftUI.ColumnsFormStyle {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct ColumnsFormStyle : SwiftUI.FormStyle {
  public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.ColumnsFormStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI16ColumnsFormStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.ColumnsFormStyle : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func textSelection<S>(_ selectability: S) -> some SwiftUICore.View where S : SwiftUICore.TextSelectability
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum AccessibilityAdjustmentDirection : Swift.Sendable {
  case increment
  case decrement
  public static func == (a: SwiftUI.AccessibilityAdjustmentDirection, b: SwiftUI.AccessibilityAdjustmentDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityAdjustableAction(_ handler: @escaping (SwiftUI.AccessibilityAdjustmentDirection) -> Swift.Void) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityAdjustableAction(_ handler: @escaping (SwiftUI.AccessibilityAdjustmentDirection) -> Swift.Void) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.Text {
  nonisolated public func accessibilityTextContentType(_ value: SwiftUICore.AccessibilityTextContentType) -> SwiftUICore.Text
  nonisolated public func accessibilityHeading(_ level: SwiftUICore.AccessibilityHeadingLevel) -> SwiftUICore.Text
  nonisolated public func accessibilityLabel(_ label: SwiftUICore.Text) -> SwiftUICore.Text
  nonisolated public func accessibilityLabel(_ labelKey: SwiftUICore.LocalizedStringKey) -> SwiftUICore.Text
  @_disfavoredOverload nonisolated public func accessibilityLabel<S>(_ label: S) -> SwiftUICore.Text where S : Swift.StringProtocol
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityTextContentType(_ value: SwiftUICore.AccessibilityTextContentType) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityHeading(_ level: SwiftUICore.AccessibilityHeadingLevel) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityTextContentType(_ textContentType: SwiftUICore.AccessibilityTextContentType) -> SwiftUICore.ModifiedContent<Content, Modifier>
  nonisolated public func accessibilityHeading(_ level: SwiftUICore.AccessibilityHeadingLevel) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
extension SwiftUICore.Image {
  public init(uiImage: UIKit.UIImage)
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func allowsWindowActivationEvents(_ value: Swift.Bool? = true) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.TextFieldStyle where Self == SwiftUI.DefaultTextFieldStyle {
  @_alwaysEmitIntoClient public static var automatic: SwiftUI.DefaultTextFieldStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct DefaultTextFieldStyle : SwiftUI.TextFieldStyle {
  public init()
  public func _body(configuration: SwiftUI.TextField<SwiftUI.DefaultTextFieldStyle._Label>) -> SwiftUI.DefaultTextFieldStyle._Body
  @_Concurrency.MainActor @preconcurrency public struct _Body : SwiftUICore.View {
    @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
      get
    }
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI21DefaultTextFieldStyleV5_BodyV4bodyQrvp", 0) __
  }
}
@available(*, unavailable)
extension SwiftUI.DefaultTextFieldStyle : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.DefaultTextFieldStyle._Body : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct WindowGroup<Content> : SwiftUI.Scene where Content : SwiftUICore.View {
  @available(iOS, introduced: 14.0, deprecated: 18.0, renamed: "init(id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(macOS, introduced: 11.0, deprecated: 15.0, renamed: "init(id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(tvOS, introduced: 14.0, deprecated: 18.0, renamed: "init(id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(watchOS, introduced: 7.0, deprecated: 11.0, renamed: "init(id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(visionOS, introduced: 1.0, deprecated: 2.0, renamed: "init(id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  public init(id: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content)
  @available(iOS, introduced: 14.0, deprecated: 18.0, renamed: "init(_:id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(macOS, introduced: 11.0, deprecated: 15.0, renamed: "init(_:id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(tvOS, introduced: 14.0, deprecated: 18.0, renamed: "init(_:id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(watchOS, introduced: 7.0, deprecated: 11.0, renamed: "init(_:id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(visionOS, introduced: 1.0, deprecated: 2.0, renamed: "init(_:id:makeContent:)")
  @_disfavoredOverload public init(_ title: SwiftUICore.Text, id: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content)
  @available(iOS, introduced: 14.0, deprecated: 18.0, renamed: "init(_:id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(macOS, introduced: 11.0, deprecated: 15.0, renamed: "init(_:id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(tvOS, introduced: 14.0, deprecated: 18.0, renamed: "init(_:id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(watchOS, introduced: 7.0, deprecated: 11.0, renamed: "init(_:id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(visionOS, introduced: 1.0, deprecated: 2.0, renamed: "init(_:id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, id: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content)
  @available(iOS, introduced: 14.0, deprecated: 18.0, renamed: "init(_:id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(macOS, introduced: 11.0, deprecated: 15.0, renamed: "init(_:id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(tvOS, introduced: 14.0, deprecated: 18.0, renamed: "init(_:id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(watchOS, introduced: 7.0, deprecated: 11.0, renamed: "init(_:id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(visionOS, introduced: 1.0, deprecated: 2.0, renamed: "init(_:id:makeContent:)")
  @_disfavoredOverload public init<S>(_ title: S, id: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
  @available(iOS, introduced: 14.0, deprecated: 18.0, renamed: "init(makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(macOS, introduced: 11.0, deprecated: 15.0, renamed: "init(makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(tvOS, introduced: 14.0, deprecated: 18.0, renamed: "init(makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(watchOS, introduced: 7.0, deprecated: 11.0, renamed: "init(makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(visionOS, introduced: 1.0, deprecated: 2.0, renamed: "init(makeContent:)")
  public init(@SwiftUICore.ViewBuilder content: () -> Content)
  @available(iOS, introduced: 14.0, deprecated: 18.0, renamed: "init(_:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(macOS, introduced: 11.0, deprecated: 15.0, renamed: "init(_:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(tvOS, introduced: 14.0, deprecated: 18.0, renamed: "init(_:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(watchOS, introduced: 7.0, deprecated: 11.0, renamed: "init(_:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(visionOS, introduced: 1.0, deprecated: 2.0, renamed: "init(_:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @_disfavoredOverload public init(_ title: SwiftUICore.Text, @SwiftUICore.ViewBuilder content: () -> Content)
  @available(iOS, introduced: 14.0, deprecated: 18.0, renamed: "init(_:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(macOS, introduced: 11.0, deprecated: 15.0, renamed: "init(_:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(tvOS, introduced: 14.0, deprecated: 18.0, renamed: "init(_:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(watchOS, introduced: 7.0, deprecated: 11.0, renamed: "init(_:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(visionOS, introduced: 1.0, deprecated: 2.0, renamed: "init(_:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: () -> Content)
  @available(iOS, introduced: 14.0, deprecated: 18.0, renamed: "init(_:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(macOS, introduced: 11.0, deprecated: 15.0, renamed: "init(_:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(tvOS, introduced: 14.0, deprecated: 18.0, renamed: "init(_:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(watchOS, introduced: 7.0, deprecated: 11.0, renamed: "init(_:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(visionOS, introduced: 1.0, deprecated: 2.0, renamed: "init(_:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @_disfavoredOverload public init<S>(_ title: S, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Scene {
    get
  }
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11WindowGroupV4bodyQrvp", 0) __<Content>
}
@available(*, unavailable)
extension SwiftUI.WindowGroup : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func sensoryFeedback<T>(_ feedback: SwiftUI.SensoryFeedback, trigger: T) -> some SwiftUICore.View where T : Swift.Equatable
  
  nonisolated public func sensoryFeedback<T>(_ feedback: SwiftUI.SensoryFeedback, trigger: T, condition: @escaping (_ oldValue: T, _ newValue: T) -> Swift.Bool) -> some SwiftUICore.View where T : Swift.Equatable
  
  nonisolated public func sensoryFeedback<T>(trigger: T, _ feedback: @escaping (_ oldValue: T, _ newValue: T) -> SwiftUI.SensoryFeedback?) -> some SwiftUICore.View where T : Swift.Equatable
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.ShapeStyle where Self == SwiftUI.FillShapeStyle {
  @_alwaysEmitIntoClient public static var fill: SwiftUI.FillShapeStyle {
    get { .init() }
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@frozen public struct FillShapeStyle : SwiftUICore.ShapeStyle {
  @_alwaysEmitIntoClient public init() {}
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func onDrop(of supportedContentTypes: [UniformTypeIdentifiers.UTType], isTargeted: SwiftUICore.Binding<Swift.Bool>?, perform action: @escaping (_ providers: [Foundation.NSItemProvider]) -> Swift.Bool) -> some SwiftUICore.View
  
  nonisolated public func onDrop(of supportedContentTypes: [UniformTypeIdentifiers.UTType], isTargeted: SwiftUICore.Binding<Swift.Bool>?, perform action: @escaping (_ providers: [Foundation.NSItemProvider], _ location: CoreFoundation.CGPoint) -> Swift.Bool) -> some SwiftUICore.View
  
  nonisolated public func onDrop(of supportedContentTypes: [UniformTypeIdentifiers.UTType], delegate: any SwiftUI.DropDelegate) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func dropDestination<T>(for payloadType: T.Type = T.self, action: @escaping (_ items: [T], _ location: CoreFoundation.CGPoint) -> Swift.Bool, isTargeted: @escaping (Swift.Bool) -> Swift.Void = { _ in }) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DropInfo {
  public var location: CoreFoundation.CGPoint {
    get
  }
  @available(iOS 14.0, macOS 11.0, *)
  public func hasItemsConforming(to contentTypes: [UniformTypeIdentifiers.UTType]) -> Swift.Bool
  @available(iOS 14.0, macOS 11.0, *)
  public func itemProviders(for contentTypes: [UniformTypeIdentifiers.UTType]) -> [Foundation.NSItemProvider]
}
@available(*, unavailable)
extension SwiftUI.DropInfo : Swift.Sendable {
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol DropDelegate {
  @_Concurrency.MainActor @preconcurrency func validateDrop(info: SwiftUI.DropInfo) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency func performDrop(info: SwiftUI.DropInfo) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency func dropEntered(info: SwiftUI.DropInfo)
  @_Concurrency.MainActor @preconcurrency func dropUpdated(info: SwiftUI.DropInfo) -> SwiftUI.DropProposal?
  @_Concurrency.MainActor @preconcurrency func dropExited(info: SwiftUI.DropInfo)
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DropDelegate {
  @_Concurrency.MainActor @preconcurrency public func validateDrop(info: SwiftUI.DropInfo) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func dropEntered(info: SwiftUI.DropInfo)
  @_Concurrency.MainActor @preconcurrency public func dropUpdated(info: SwiftUI.DropInfo) -> SwiftUI.DropProposal?
  @_Concurrency.MainActor @preconcurrency public func dropExited(info: SwiftUI.DropInfo)
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum DropOperation : Swift.Sendable {
  case cancel
  case forbidden
  case copy
  case move
  public static func == (a: SwiftUI.DropOperation, b: SwiftUI.DropOperation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DropProposal : Swift.Sendable {
  public let operation: SwiftUI.DropOperation
  public init(operation: SwiftUI.DropOperation)
}
@available(iOS, introduced: 13.4, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
extension SwiftUICore.View {
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func onDrop(of supportedTypes: [Swift.String], isTargeted: SwiftUICore.Binding<Swift.Bool>?, perform action: @escaping (_ providers: [Foundation.NSItemProvider]) -> Swift.Bool) -> some SwiftUICore.View
  
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func onDrop(of supportedTypes: [Swift.String], isTargeted: SwiftUICore.Binding<Swift.Bool>?, perform action: @escaping (_ providers: [Foundation.NSItemProvider], _ location: CoreFoundation.CGPoint) -> Swift.Bool) -> some SwiftUICore.View
  
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func onDrop(of supportedTypes: [Swift.String], delegate: any SwiftUI.DropDelegate) -> some SwiftUICore.View
  
}
@available(iOS, introduced: 13.4, deprecated: 100000.0, message: "Provide `UTType`s as the `types` instead.")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Provide `UTType`s as the `types` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Provide `UTType`s as the `types` instead.")
extension SwiftUI.DropInfo {
  public func hasItemsConforming(to types: [Swift.String]) -> Swift.Bool
  public func itemProviders(for types: [Swift.String]) -> [Foundation.NSItemProvider]
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  nonisolated public func invalidatableContent(_ invalidatable: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.Gesture {
  @inlinable @_Concurrency.MainActor @preconcurrency public func sequenced<Other>(before other: Other) -> SwiftUI.SequenceGesture<Self, Other> where Other : SwiftUICore.Gesture {
        return SequenceGesture(self, other)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct SequenceGesture<First, Second> : SwiftUICore.Gesture where First : SwiftUICore.Gesture, Second : SwiftUICore.Gesture {
  @frozen public enum Value {
    case first(First.Value)
    case second(First.Value, Second.Value?)
  }
  public var first: First
  public var second: Second
  @inlinable public init(_ first: First, _ second: Second) {
        (self.first, self.second) = (first, second)
    }
  nonisolated public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUI.SequenceGesture<First, Second>>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<SwiftUI.SequenceGesture<First, Second>.Value>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.SequenceGesture.Value : Swift.Sendable where First.Value : Swift.Sendable, Second.Value : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.SequenceGesture : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.SequenceGesture.Value : Swift.Equatable where First.Value : Swift.Equatable, Second.Value : Swift.Equatable {
  public static func == (a: SwiftUI.SequenceGesture<First, Second>.Value, b: SwiftUI.SequenceGesture<First, Second>.Value) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ListStyle where Self == SwiftUI.DefaultListStyle {
  @_alwaysEmitIntoClient public static var automatic: SwiftUI.DefaultListStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct DefaultListStyle : SwiftUI.ListStyle {
  public init()
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.DefaultListStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.DefaultListStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.DefaultListStyle : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DismissBehavior : Swift.Sendable {
  public static let interactive: SwiftUI.DismissBehavior
  public static let destructive: SwiftUI.DismissBehavior
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.Transaction {
  public var dismissBehavior: SwiftUI.DismissBehavior {
    get
    set
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_Concurrency.MainActor public protocol PreviewModifier {
  associatedtype Context = Swift.Void
  associatedtype Body : SwiftUICore.View
  typealias Content = SwiftUI.PreviewModifierContent
  @_Concurrency.MainActor static func makeSharedContext() async throws -> Self.Context
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor func body(content: Self.Content, context: Self.Context) -> Self.Body
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.PreviewModifier where Self.Context == () {
  @_Concurrency.MainActor public static func makeSharedContext() async throws -> Self.Context
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct PreviewModifierContent : SwiftUICore.View {
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.PreviewModifierContent : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension DeveloperToolsSupport.PreviewTrait where T == DeveloperToolsSupport.Preview.ViewTraits {
  @_Concurrency.MainActor public static func modifier(_ modifier: some PreviewModifier) -> DeveloperToolsSupport.PreviewTrait<T>
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.ToolbarContent {
  nonisolated public func hidden(_ hidden: Swift.Bool = true) -> some SwiftUI.ToolbarContent
  
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.CustomizableToolbarContent {
  nonisolated public func hidden(_ hidden: Swift.Bool = true) -> some SwiftUI.CustomizableToolbarContent
  
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func toolbarItemHidden(_ hidden: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func listRowHoverEffect(_ effect: SwiftUI.HoverEffect?) -> some SwiftUICore.View
  
  nonisolated public func listRowHoverEffectDisabled(_ disabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _CommandsInputs {
}
@available(*, unavailable)
extension SwiftUI._CommandsInputs : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _CommandsOutputs {
}
@available(*, unavailable)
extension SwiftUI._CommandsOutputs : Swift.Sendable {
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func findNavigator(isPresented: SwiftUICore.Binding<Swift.Bool>) -> some SwiftUICore.View
  
  nonisolated public func findDisabled(_ isDisabled: Swift.Bool = true) -> some SwiftUICore.View
  
  nonisolated public func replaceDisabled(_ isDisabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @_Concurrency.MainActor @preconcurrency public func _onEnvironmentChange<Value>(_ keyPath: Swift.KeyPath<SwiftUICore.EnvironmentValues, Value>, perform action: @escaping (_ newValue: Value) -> Swift.Void) -> some SwiftUICore.View where Value : Swift.Equatable
  
}
extension SwiftUICore.View {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @_Concurrency.MainActor @preconcurrency public func _onEnvironmentChange<Value>(_ keyPath: Swift.KeyPath<SwiftUICore.EnvironmentValues, Value>, perform action: @escaping (_ oldValue: Value?, _ newValue: Value) -> Swift.Void) -> some SwiftUICore.View where Value : Swift.Equatable
  
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct WindowVisibilityToggle<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  public init(windowID: Swift.String) where Label == SwiftUI.DefaultWindowVisibilityToggleLabel
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(macOS 15.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI22WindowVisibilityToggleV4bodyQrvp", 0) __<Label>
}
@available(*, unavailable)
extension SwiftUI.WindowVisibilityToggle : Swift.Sendable {
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct DefaultWindowVisibilityToggleLabel : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(macOS 15.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI34DefaultWindowVisibilityToggleLabelV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.DefaultWindowVisibilityToggleLabel : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.Text {
  public func speechAlwaysIncludesPunctuation(_ value: Swift.Bool = true) -> SwiftUICore.Text
  public func speechSpellsOutCharacters(_ value: Swift.Bool = true) -> SwiftUICore.Text
  public func speechAdjustedPitch(_ value: Swift.Double) -> SwiftUICore.Text
  public func speechAnnouncementsQueued(_ value: Swift.Bool = true) -> SwiftUICore.Text
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func speechAlwaysIncludesPunctuation(_ value: Swift.Bool = true) -> some SwiftUICore.View
  
  nonisolated public func speechSpellsOutCharacters(_ value: Swift.Bool = true) -> some SwiftUICore.View
  
  nonisolated public func speechAdjustedPitch(_ value: Swift.Double) -> some SwiftUICore.View
  
  nonisolated public func speechAnnouncementsQueued(_ value: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _AlignmentWritingModifier : SwiftUICore.ViewModifier {
  public let key: SwiftUICore.AlignmentKey
  @usableFromInline
  @preconcurrency internal let computeValue: @Sendable (SwiftUICore.ViewDimensions) -> CoreFoundation.CGFloat
  @preconcurrency @inlinable internal init(key: SwiftUICore.AlignmentKey, computeValue: @escaping @Sendable (SwiftUICore.ViewDimensions) -> CoreFoundation.CGFloat) {
        self.key = key
        self.computeValue = computeValue
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._AlignmentWritingModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._AlignmentWritingModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @preconcurrency @inlinable nonisolated public func alignmentGuide(_ g: SwiftUICore.HorizontalAlignment, computeValue: @escaping @Sendable (SwiftUICore.ViewDimensions) -> CoreFoundation.CGFloat) -> some SwiftUICore.View {
        return modifier(
            _AlignmentWritingModifier(key: g.key, computeValue: computeValue))
    }
  
  @preconcurrency @inlinable nonisolated public func alignmentGuide(_ g: SwiftUICore.VerticalAlignment, computeValue: @escaping @Sendable (SwiftUICore.ViewDimensions) -> CoreFoundation.CGFloat) -> some SwiftUICore.View {
        return modifier(
            _AlignmentWritingModifier(key: g.key, computeValue: computeValue))
    }
  
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public func _makeUIHostingView<Content>(_ view: Content) -> ObjectiveC.NSObject where Content : SwiftUICore.View
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func windowBackgroundDragBehavior(_ behavior: SwiftUI.WindowInteractionBehavior) -> some SwiftUI.Scene
  
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.4, *)
  @available(watchOS, unavailable)
  nonisolated public func searchScopes<V, S>(_ scope: SwiftUICore.Binding<V>, @SwiftUICore.ViewBuilder scopes: () -> S) -> some SwiftUICore.View where V : Swift.Hashable, S : SwiftUICore.View
  
}
@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
public struct SearchScopeActivation {
  public static var automatic: SwiftUI.SearchScopeActivation {
    get
  }
  @available(tvOS, unavailable)
  public static var onTextEntry: SwiftUI.SearchScopeActivation {
    get
  }
  @available(tvOS, unavailable)
  public static var onSearchPresentation: SwiftUI.SearchScopeActivation {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.SearchScopeActivation : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 16.4, macOS 13.3, tvOS 16.4, *)
  @available(watchOS, unavailable)
  nonisolated public func searchScopes<V, S>(_ scope: SwiftUICore.Binding<V>, activation: SwiftUI.SearchScopeActivation, @SwiftUICore.ViewBuilder _ scopes: () -> S) -> some SwiftUICore.View where V : Swift.Hashable, S : SwiftUICore.View
  
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func pointerVisibility(_ visibility: SwiftUICore.Visibility) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
public struct TabView<SelectionValue, Content> : SwiftUICore.View where SelectionValue : Swift.Hashable, Content : SwiftUICore.View {
  @available(iOS, deprecated: 100000.0, message: "Use TabContentBuilder-based TabView initializers instead")
  @available(macOS, deprecated: 100000.0, message: "Use TabContentBuilder-based TabView initializers instead")
  @available(tvOS, deprecated: 100000.0, message: "Use TabContentBuilder-based TabView initializers instead")
  @available(watchOS, deprecated: 100000.0, message: "Use TabContentBuilder-based TabView initializers instead")
  public init(selection: SwiftUICore.Binding<SelectionValue>?, @SwiftUICore.ViewBuilder content: () -> Content)
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public init<C>(selection: SwiftUICore.Binding<SelectionValue>, @SwiftUI.TabContentBuilder<SelectionValue> content: () -> C) where Content == SwiftUI.TabContentBuilder<SelectionValue>.Content<C>, C : SwiftUI.TabContent
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 7.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI7TabViewV4bodyQrvp", 0) __<SelectionValue, Content>
}
@available(*, unavailable)
extension SwiftUI.TabView : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
extension SwiftUI.TabView where SelectionValue == Swift.Int {
  nonisolated public init(@SwiftUICore.ViewBuilder content: () -> Content)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.TabView {
  public init<C>(@SwiftUI.TabContentBuilder<Swift.Never> content: () -> C) where SelectionValue == Swift.Never, Content == SwiftUI.TabContentBuilder<Swift.Never>.Content<C>, C : SwiftUI.TabContent
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  @_alwaysEmitIntoClient nonisolated public func symbolEffectsRemoved(_ isEnabled: Swift.Bool = true) -> some SwiftUICore.View {
        return modifier(_SymbolEffectsRemovedModifier(isEnabled: isEnabled))
    }
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@frozen public struct _SymbolEffectsRemovedModifier : SwiftUICore.ViewModifier, SwiftUICore._GraphInputsModifier {
  @usableFromInline
  internal var isEnabled: Swift.Bool
  @_alwaysEmitIntoClient internal init(isEnabled: Swift.Bool) { self.isEnabled = isEnabled }
  public static func _makeInputs(modifier: SwiftUICore._GraphValue<SwiftUI._SymbolEffectsRemovedModifier>, inputs: inout SwiftUICore._GraphInputs)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 17.0, visionOS 1.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct TextInputDictationBehavior : Swift.Equatable, Swift.Sendable {
  @available(iOS 17.0, visionOS 1.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public static let automatic: SwiftUI.TextInputDictationBehavior
  @available(iOS 17.0, visionOS 1.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public static func inline(activation: SwiftUI.TextInputDictationActivation) -> SwiftUI.TextInputDictationBehavior
  @available(visionOS 1.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public static let preventDictation: SwiftUI.TextInputDictationBehavior
  public static func == (a: SwiftUI.TextInputDictationBehavior, b: SwiftUI.TextInputDictationBehavior) -> Swift.Bool
}
@available(iOS 17.0, visionOS 1.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct TextInputDictationActivation : Swift.Equatable, Swift.Sendable {
  @available(iOS 17.0, visionOS 1.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public static let onSelect: SwiftUI.TextInputDictationActivation
  @available(iOS 17.0, visionOS 1.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public static let onLook: SwiftUI.TextInputDictationActivation
  public static func == (a: SwiftUI.TextInputDictationActivation, b: SwiftUI.TextInputDictationActivation) -> Swift.Bool
}
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_alwaysEmitIntoClient nonisolated public func selectionDisabled(_ isDisabled: Swift.Bool = true) -> some SwiftUICore.View {
        _trait(IsSelectionEnabledTraitKey.self, !isDisabled)
    }
  
}
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowContent {
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func selectionDisabled(_ isDisabled: Swift.Bool = true) -> some SwiftUI.TableRowContent<Self.TableRowValue>
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@usableFromInline
internal struct IsSelectionEnabledTraitKey : SwiftUICore._ViewTraitKey {
  @usableFromInline
  internal static let defaultValue: Swift.Bool
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.IsSelectionEnabledTraitKey : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public var _defaultSwiftUIActivityEnvironmentLoggingEnabled: Swift.Bool
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func userActivity(_ activityType: Swift.String, isActive: Swift.Bool = true, _ update: @escaping (Foundation.NSUserActivity) -> ()) -> some SwiftUICore.View
  
  nonisolated public func userActivity<P>(_ activityType: Swift.String, element: P?, _ update: @escaping (P, Foundation.NSUserActivity) -> ()) -> some SwiftUICore.View
  
  nonisolated public func onContinueUserActivity(_ activityType: Swift.String, perform action: @escaping (Foundation.NSUserActivity) -> ()) -> some SwiftUICore.View
  
  nonisolated public func onOpenURL(perform action: @escaping (Foundation.URL) -> ()) -> some SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func handlesExternalEvents(preferring: Swift.Set<Swift.String>, allowing: Swift.Set<Swift.String>) -> some SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DisclosureGroupStyle where Self == SwiftUI.AutomaticDisclosureGroupStyle {
  @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.AutomaticDisclosureGroupStyle {
    get
  }
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct AutomaticDisclosureGroupStyle : SwiftUI.DisclosureGroupStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.AutomaticDisclosureGroupStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI29AutomaticDisclosureGroupStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.AutomaticDisclosureGroupStyle : Swift.Sendable {
}
@available(iOS 17.5, macOS 14.5, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
@frozen internal struct LimitedAvailabilityCommandContent : SwiftUI.Commands {
  internal let storage: SwiftUI.LimitedAvailabilityCommandContentStorageBase
  @usableFromInline
  internal init<C>(erasing commands: C) where C : SwiftUI.Commands
  @_Concurrency.MainActor @preconcurrency public var body: Swift.Never {
    get
  }
  nonisolated public static func _makeCommands(content: SwiftUICore._GraphValue<SwiftUI.LimitedAvailabilityCommandContent>, inputs: SwiftUI._CommandsInputs) -> SwiftUI._CommandsOutputs
  @available(iOS 17.5, macOS 14.5, *)
  @usableFromInline
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  internal typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.LimitedAvailabilityCommandContent : Swift.Sendable {
}
@_hasMissingDesignatedInitializers @available(iOS 17.5, macOS 14.5, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
internal class LimitedAvailabilityCommandContentStorageBase {
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUI.LimitedAvailabilityCommandContentStorageBase : Swift.Sendable {
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct TouchBar<Content> where Content : SwiftUICore.View {
  public init(@SwiftUICore.ViewBuilder content: () -> Content)
  public init(id: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content)
}
@available(*, unavailable)
extension SwiftUI.TouchBar : Swift.Sendable {
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public enum TouchBarItemPresence : Swift.Sendable {
  case required(_: Swift.String)
  case `default`(_: Swift.String)
  case optional(_: Swift.String)
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func touchBar<Content>(_ touchBar: SwiftUI.TouchBar<Content>) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func touchBar<Content>(@SwiftUICore.ViewBuilder content: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct _TouchBarModifier<Content> : SwiftUICore.ViewModifier where Content : SwiftUICore.View {
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._TouchBarModifier<Content>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(macOS 10.15, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._TouchBarModifier : Swift.Sendable {
}
@available(iOS 14.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ListStyle where Self == SwiftUI.SidebarListStyle {
  @_alwaysEmitIntoClient public static var sidebar: SwiftUI.SidebarListStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct SidebarListStyle : SwiftUI.ListStyle {
  public init()
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.SidebarListStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.SidebarListStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.SidebarListStyle : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityHint(_ hint: SwiftUICore.Text, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityHint(_ hintKey: SwiftUICore.LocalizedStringKey, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload nonisolated public func accessibilityHint<S>(_ hint: S, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityHint(_ hint: SwiftUICore.Text, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
  nonisolated public func accessibilityHint(_ hintKey: SwiftUICore.LocalizedStringKey, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_disfavoredOverload nonisolated public func accessibilityHint<S>(_ hint: S, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.TabContent {
  nonisolated public func accessibilityHint(_ hint: SwiftUICore.Text, isEnabled: Swift.Bool = true) -> some SwiftUI.TabContent<Self.TabValue>
  
  nonisolated public func accessibilityHint(_ hintKey: SwiftUICore.LocalizedStringKey, isEnabled: Swift.Bool = true) -> some SwiftUI.TabContent<Self.TabValue>
  
  @_disfavoredOverload nonisolated public func accessibilityHint<S>(_ hint: S, isEnabled: Swift.Bool = true) -> some SwiftUI.TabContent<Self.TabValue> where S : Swift.StringProtocol
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityHint(_ hint: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityHint(_ hintKey: SwiftUICore.LocalizedStringKey) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload nonisolated public func accessibilityHint<S>(_ hint: S) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityHint(_ hint: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Content, Modifier>
  nonisolated public func accessibilityHint(_ hintKey: SwiftUICore.LocalizedStringKey) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_disfavoredOverload nonisolated public func accessibilityHint<S>(_ hint: S) -> SwiftUICore.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct SubscriptionView<PublisherType, Content> : SwiftUICore.View where PublisherType : Combine.Publisher, Content : SwiftUICore.View, PublisherType.Failure == Swift.Never {
  public var content: Content
  public var publisher: PublisherType
  public var action: (PublisherType.Output) -> Swift.Void
  @inlinable public init(content: Content, publisher: PublisherType, action: @escaping (PublisherType.Output) -> Swift.Void) {
        self.content = content
        self.publisher = publisher
        self.action = action
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI.SubscriptionView<PublisherType, Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUI.SubscriptionView<PublisherType, Content>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.SubscriptionView : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func onReceive<P>(_ publisher: P, perform action: @escaping (P.Output) -> Swift.Void) -> some SwiftUICore.View where P : Combine.Publisher, P.Failure == Swift.Never {
        SubscriptionView(content: self, publisher: publisher, action: action)
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol MenuStyle {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.MenuStyleConfiguration
}
@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)
@available(watchOS, unavailable)
public struct MenuStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Label : SwiftUICore.View {
    @available(iOS 14.0, tvOS 17.0, macOS 11.0, *)
    @available(watchOS, unavailable)
    public typealias Body = Swift.Never
  }
  @_Concurrency.MainActor @preconcurrency public struct Content : SwiftUICore.View {
    @available(iOS 14.0, tvOS 17.0, macOS 11.0, *)
    @available(watchOS, unavailable)
    public typealias Body = Swift.Never
  }
}
@available(*, unavailable)
extension SwiftUI.MenuStyleConfiguration : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.MenuStyleConfiguration.Label : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.MenuStyleConfiguration.Content : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func menuStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.MenuStyle
  
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public struct OpenWindowAction {
  @available(macOS 15.0, *)
  @available(iOS, unavailable)
  public struct SharingBehavior : Swift.Sendable {
    public static let requested: SwiftUI.OpenWindowAction.SharingBehavior
    public static let required: SwiftUI.OpenWindowAction.SharingBehavior
  }
  @_Concurrency.MainActor @preconcurrency public func callAsFunction<D>(value: D) where D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable
  @available(macOS 15.0, *)
  @available(iOS, unavailable)
  @_Concurrency.MainActor public func callAsFunction<D>(value: D, sharingBehavior: SwiftUI.OpenWindowAction.SharingBehavior) async throws where D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable
  @_Concurrency.MainActor @preconcurrency public func callAsFunction(id: Swift.String)
  @available(macOS 15.0, *)
  @available(iOS, unavailable)
  @_Concurrency.MainActor public func callAsFunction(id: Swift.String, sharingBehavior: SwiftUI.OpenWindowAction.SharingBehavior) async throws
  @_Concurrency.MainActor @preconcurrency public func callAsFunction<D>(id: Swift.String, value: D) where D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable
  @available(macOS 15.0, *)
  @available(iOS, unavailable)
  @_Concurrency.MainActor public func callAsFunction<D>(id: Swift.String, value: D, sharingBehavior: SwiftUI.OpenWindowAction.SharingBehavior) async throws where D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var openWindow: SwiftUI.OpenWindowAction {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct ToolbarItemGroup<Content> : SwiftUI.ToolbarContent where Content : SwiftUICore.View {
  public init(placement: SwiftUI.ToolbarItemPlacement = .automatic, @SwiftUICore.ViewBuilder content: () -> Content)
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public static func _makeToolbar(content: SwiftUICore._GraphValue<SwiftUI.ToolbarItemGroup<Content>>, inputs: SwiftUI._ToolbarInputs) -> SwiftUI._ToolbarOutputs
  nonisolated public static func _makeContent(content: SwiftUICore._GraphValue<SwiftUI.ToolbarItemGroup<Content>>, inputs: SwiftUICore._GraphInputs, resolved: inout SwiftUI._ToolbarItemList)
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.ToolbarItemGroup : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.ToolbarItemGroup {
  nonisolated public init<C, L>(placement: SwiftUI.ToolbarItemPlacement = .automatic, @SwiftUICore.ViewBuilder content: () -> C, @SwiftUICore.ViewBuilder label: () -> L) where Content == SwiftUI.LabeledToolbarItemGroupContent<C, L>, C : SwiftUICore.View, L : SwiftUICore.View
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct LabeledToolbarItemGroupContent<Content, Label> : SwiftUICore.View where Content : SwiftUICore.View, Label : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI30LabeledToolbarItemGroupContentV4bodyQrvp", 0) __<Content, Label>
}
@available(*, unavailable)
extension SwiftUI.LabeledToolbarItemGroupContent : Swift.Sendable {
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct WorldAlignmentBehavior : Swift.Equatable, Swift.Sendable {
  public static var automatic: SwiftUI.WorldAlignmentBehavior {
    get
  }
  public static var adaptive: SwiftUI.WorldAlignmentBehavior {
    get
  }
  public static var gravityAligned: SwiftUI.WorldAlignmentBehavior {
    get
  }
  public static func == (a: SwiftUI.WorldAlignmentBehavior, b: SwiftUI.WorldAlignmentBehavior) -> Swift.Bool
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func volumeWorldAlignment(_ behavior: SwiftUI.WorldAlignmentBehavior) -> some SwiftUI.Scene
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _FlipForRTLEffect : SwiftUICore.ViewModifier, Swift.Equatable {
  public var isEnabled: Swift.Bool
  @inlinable public init(isEnabled: Swift.Bool) {
        self.isEnabled = isEnabled
    }
  public static func == (a: SwiftUI._FlipForRTLEffect, b: SwiftUI._FlipForRTLEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func flipsForRightToLeftLayoutDirection(_ enabled: Swift.Bool) -> some SwiftUICore.View {
        modifier(_FlipForRTLEffect(isEnabled: enabled))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._FlipForRTLEffect {
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._FlipForRTLEffect>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor public struct OpenDocumentAction {
  @_Concurrency.MainActor public func callAsFunction(at url: Foundation.URL) async throws
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@preconcurrency @_Concurrency.MainActor public struct NewDocumentAction {
  @preconcurrency @_Concurrency.MainActor public func callAsFunction<D>(_ newDocument: @autoclosure @escaping @Sendable () -> D) where D : SwiftUI.FileDocument
  @preconcurrency @_Concurrency.MainActor public func callAsFunction<D>(_ newDocument: @escaping @Sendable () -> D) where D : SwiftUI.ReferenceFileDocument
}
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.NewDocumentAction {
  @_Concurrency.MainActor @preconcurrency public func callAsFunction(contentType: UniformTypeIdentifiers.UTType)
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var newDocument: SwiftUI.NewDocumentAction {
    get
  }
  public var openDocument: SwiftUI.OpenDocumentAction {
    get
  }
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.WindowStyle where Self == SwiftUI.TitleBarWindowStyle {
  @_alwaysEmitIntoClient public static var titleBar: SwiftUI.TitleBarWindowStyle {
    get { .init() }
  }
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct TitleBarWindowStyle : SwiftUI.WindowStyle {
  public typealias _Body = Swift.Never
  public init()
}
@available(*, unavailable)
extension SwiftUI.TitleBarWindowStyle : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol TextEditorStyle {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.TextEditorStyleConfiguration
}
@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TextEditorStyleConfiguration {
}
@available(*, unavailable)
extension SwiftUI.TextEditorStyleConfiguration : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func textEditorStyle(_ style: some TextEditorStyle) -> some SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TextEditor : SwiftUICore.View {
  public init(text: SwiftUICore.Binding<Swift.String>)
  @available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
  public init(text: SwiftUICore.Binding<Swift.String>, selection: SwiftUICore.Binding<SwiftUI.TextSelection?>)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI10TextEditorV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.TextEditor : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@preconcurrency @_Concurrency.MainActor public protocol ToggleStyle {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.ToggleStyleConfiguration
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct ToggleStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Label : SwiftUICore.View {
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias Body = Swift.Never
  }
  public let label: SwiftUI.ToggleStyleConfiguration.Label
  @SwiftUICore.Binding @_projectedValueProperty($isOn) public var isOn: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $isOn: SwiftUICore.Binding<Swift.Bool> {
    get
  }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public var isMixed: Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.ToggleStyleConfiguration : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.ToggleStyleConfiguration.Label : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  nonisolated public func toggleStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.ToggleStyle
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollableContentProvider {
  public func root(scrollView: SwiftUI._ScrollView<Self>.Main) -> SwiftUI._ScrollViewRoot<Self>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollViewRoot<P> : SwiftUICore.View where P : SwiftUI._ScrollableContentProvider {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15_ScrollViewRootV4bodyQrvp", 0) __<P>
}
@available(*, unavailable)
extension SwiftUI._ScrollViewRoot : Swift.Sendable {
}
@available(iOS, unavailable)
@available(macOS, introduced: 11.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.bordered).")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.MenuStyle where Self == SwiftUI.BorderedButtonMenuStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var borderedButton: SwiftUI.BorderedButtonMenuStyle {
    get { .init() }
  }
}
@available(iOS, unavailable)
@available(macOS, introduced: 11.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.bordered).")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct BorderedButtonMenuStyle : SwiftUI.MenuStyle {
  public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.BorderedButtonMenuStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS, unavailable, message: "Use .menuStyle(.button) and .buttonStyle(.bordered).")
  @available(tvOS, unavailable, message: "Use .menuStyle(.button) and .buttonStyle(.bordered).")
  @available(watchOS, unavailable, message: "Use .menuStyle(.button) and .buttonStyle(.bordered).")
  @available(visionOS, unavailable, message: "Use .menuStyle(.button) and .buttonStyle(.bordered).")
  @available(macOS, introduced: 11.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.bordered).")
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI23BorderedButtonMenuStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.BorderedButtonMenuStyle : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct OutlineGroup<Data, ID, Parent, Leaf, Subgroup> where Data : Swift.RandomAccessCollection, ID : Swift.Hashable {
}
@available(*, unavailable)
extension SwiftUI.OutlineGroup : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.OutlineGroup where ID == Data.Element.ID, Parent : SwiftUICore.View, Parent == Leaf, Subgroup == SwiftUI.DisclosureGroup<Parent, SwiftUI.OutlineSubgroupChildren>, Data.Element : Swift.Identifiable {
  public init<DataElement>(_ root: DataElement, children: Swift.KeyPath<DataElement, Data?>, @SwiftUICore.ViewBuilder content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement : Swift.Identifiable, DataElement == Data.Element
  public init<DataElement>(_ data: Data, children: Swift.KeyPath<DataElement, Data?>, @SwiftUICore.ViewBuilder content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement : Swift.Identifiable, DataElement == Data.Element
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.OutlineGroup where Parent : SwiftUICore.View, Parent == Leaf, Subgroup == SwiftUI.DisclosureGroup<Parent, SwiftUI.OutlineSubgroupChildren> {
  public init<DataElement>(_ root: DataElement, id: Swift.KeyPath<DataElement, ID>, children: Swift.KeyPath<DataElement, Data?>, @SwiftUICore.ViewBuilder content: @escaping (DataElement) -> Leaf) where DataElement == Data.Element
  public init<DataElement>(_ data: Data, id: Swift.KeyPath<DataElement, ID>, children: Swift.KeyPath<DataElement, Data?>, @SwiftUICore.ViewBuilder content: @escaping (DataElement) -> Leaf) where DataElement == Data.Element
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.OutlineGroup : SwiftUICore.View where Parent : SwiftUICore.View, Leaf : SwiftUICore.View, Subgroup : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI12OutlineGroupVA2A4ViewR0_AaDR1_AaDR2_rlE4bodyQrvp", 0) __<Data, ID, Parent, Leaf, Subgroup>
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.OutlineGroup where ID == Data.Element.ID, Parent : SwiftUICore.View, Parent == Leaf, Subgroup == SwiftUI.DisclosureGroup<Parent, SwiftUI.OutlineSubgroupChildren>, Data.Element : Swift.Identifiable {
  public init<C, E>(_ root: SwiftUICore.Binding<E>, children: Swift.WritableKeyPath<E, C?>, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<E>) -> Leaf) where Data == SwiftUICore.Binding<C>, ID == E.ID, C : Swift.MutableCollection, C : Swift.RandomAccessCollection, E : Swift.Identifiable, E == C.Element
  public init<C, E>(_ data: SwiftUICore.Binding<C>, children: Swift.WritableKeyPath<E, C?>, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<E>) -> Leaf) where Data == SwiftUICore.Binding<C>, ID == E.ID, C : Swift.MutableCollection, C : Swift.RandomAccessCollection, E : Swift.Identifiable, E == C.Element
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.OutlineGroup where Parent : SwiftUICore.View, Parent == Leaf, Subgroup == SwiftUI.DisclosureGroup<Parent, SwiftUI.OutlineSubgroupChildren> {
  public init<C, E>(_ root: SwiftUICore.Binding<E>, id: Swift.KeyPath<E, ID>, children: Swift.WritableKeyPath<E, C?>, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<E>) -> Leaf) where Data == SwiftUICore.Binding<C>, C : Swift.MutableCollection, C : Swift.RandomAccessCollection, E == C.Element
  public init<C, E>(_ data: SwiftUICore.Binding<C>, id: Swift.KeyPath<E, ID>, children: Swift.WritableKeyPath<E, C?>, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<E>) -> Leaf) where Data == SwiftUICore.Binding<C>, C : Swift.MutableCollection, C : Swift.RandomAccessCollection, E == C.Element
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct OutlineSubgroupChildren : SwiftUICore.View {
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.OutlineSubgroupChildren : Swift.Sendable {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TableColumn<RowValue, Sort, Content, Label> : SwiftUI.TableColumnContent where RowValue : Swift.Identifiable, Sort : Foundation.SortComparator, Content : SwiftUICore.View, Label : SwiftUICore.View {
  public typealias TableRowValue = RowValue
  public typealias TableColumnSortComparator = Sort
  nonisolated public static func _makeContent(content: SwiftUICore._GraphValue<SwiftUI.TableColumn<RowValue, Sort, Content, Label>>, inputs: SwiftUI._TableColumnInputs) -> SwiftUI._TableColumnOutputs
  @available(iOS 17.4, macOS 14.4, visionOS 1.1, *)
  nonisolated public static func _tableColumnCount(inputs: SwiftUI._TableColumnInputs) -> Swift.Int?
  @available(iOS 16.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias TableColumnBody = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.TableColumn : Swift.Sendable {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumn where RowValue == Sort.Compared, Label == SwiftUICore.Text {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, sortUsing comparator: Sort, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, sortUsing comparator: Sort, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  nonisolated public init(_ text: SwiftUICore.Text, sortUsing comparator: Sort, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumn where Sort == Swift.Never, Label == SwiftUICore.Text {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  nonisolated public init(_ text: SwiftUICore.Text, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.String>) where Content == SwiftUICore.Text
  @_disfavoredOverload nonisolated public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.String>) where Content == SwiftUICore.Text, S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  nonisolated public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.String>) where Content == SwiftUICore.Text
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumn {
  nonisolated public func width(_ width: CoreFoundation.CGFloat? = nil) -> SwiftUI.TableColumn<RowValue, Sort, Content, Label>
  nonisolated public func width(min: CoreFoundation.CGFloat? = nil, ideal: CoreFoundation.CGFloat? = nil, max: CoreFoundation.CGFloat? = nil) -> SwiftUI.TableColumn<RowValue, Sort, Content, Label>
  @available(*, deprecated, message: "Please pass one or more parameters to modify a column's width.")
  @_alwaysEmitIntoClient nonisolated public func width() -> SwiftUI.TableColumn<RowValue, Sort, Content, Label> { self }
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.CustomHoverEffect {
  public func hoverEffect(_ effect: some CustomHoverEffect, in group: SwiftUI.HoverEffectGroup? = nil, isEnabled: Swift.Bool = true) -> some SwiftUICore.CustomHoverEffect
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _SceneOutputs {
}
@available(*, unavailable)
extension SwiftUI._SceneOutputs : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 13.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_alwaysEmitIntoClient nonisolated public func statusBarHidden(_ hidden: Swift.Bool = true) -> some SwiftUICore.View {
        statusBar(hidden: hidden)
    }
  
  @available(iOS 13.0, watchOS 6.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public func _statusBarHidden(_ hidden: Swift.Bool = true) -> some SwiftUICore.View {
        _statusBar(hidden: hidden)
    }
  
}
extension SwiftUICore.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "statusBarHidden(_:)")
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "statusBarHidden(_:)")
  nonisolated public func statusBar(hidden: Swift.Bool) -> some SwiftUICore.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "_statusBarHidden(_:)")
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "_statusBarHidden(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "_statusBarHidden(_:)")
  nonisolated public func _statusBar(hidden: Swift.Bool) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowContent {
  @_Concurrency.MainActor @preconcurrency public func draggable<T>(_ payload: @autoclosure @escaping () -> T) -> some SwiftUI.TableRowContent<Self.TableRowValue> where T : CoreTransferable.Transferable
  
  @_Concurrency.MainActor @preconcurrency public func dropDestination<T>(for payloadType: T.Type = T.self, action: @escaping (_ items: [T]) -> Swift.Void) -> some SwiftUI.TableRowContent<Self.TableRowValue> where T : CoreTransferable.Transferable
  
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DynamicTableRowContent {
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func dropDestination<T>(for payloadType: T.Type = T.self, action: @escaping (Swift.Int, [T]) -> Swift.Void) -> SwiftUICore.ModifiedContent<Self, SwiftUI.OnInsertTableRowModifier> where T : CoreTransferable.Transferable
  @available(*, unavailable, message: "Unavailable for DynamicTableRowContent, use `dropDestination(for:action:)` instead.")
  public func dropDestination<T>(for payloadType: T.Type = T.self, action: @escaping (_ items: [T], _ location: CoreFoundation.CGPoint) -> Swift.Bool, isTargeted: (Swift.Bool) -> Swift.Void = { _ in }) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowContent {
  @_Concurrency.MainActor @preconcurrency public func itemProvider(_ action: (() -> Foundation.NSItemProvider?)?) -> SwiftUICore.ModifiedContent<Self, SwiftUI.ItemProviderTableRowModifier>
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DynamicTableRowContent {
  public func onInsert(of supportedContentTypes: [UniformTypeIdentifiers.UTType], perform action: @escaping (Swift.Int, [Foundation.NSItemProvider]) -> Swift.Void) -> SwiftUICore.ModifiedContent<Self, SwiftUI.OnInsertTableRowModifier>
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ItemProviderTableRowModifier : SwiftUI._TableRowContentModifier {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI._TableRowContentModifier {
    get
  }
  @available(iOS 16.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI28ItemProviderTableRowModifierV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.ItemProviderTableRowModifier : Swift.Sendable {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct OnInsertTableRowModifier : SwiftUI._TableRowContentModifier {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI._TableRowContentModifier {
    get
  }
  @available(iOS 16.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24OnInsertTableRowModifierV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.OnInsertTableRowModifier : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 13.0, tvOS 13.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func keyboardType(_ type: UIKit.UIKeyboardType) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use textInputAutocapitalization(_:)")
  @available(macOS, unavailable)
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use textInputAutocapitalization(_:)")
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use textInputAutocapitalization(_:)")
  nonisolated public func autocapitalization(_ style: UIKit.UITextAutocapitalizationType) -> some SwiftUICore.View
  
}
@available(iOS 15.0, tvOS 15.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TextInputAutocapitalization {
  public init?(_ type: UIKit.UITextAutocapitalizationType)
}
@available(iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@available(macOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func textInputAutocapitalization(_ autocapitalization: SwiftUI.TextInputAutocapitalization?) -> some SwiftUICore.View
  
}
@available(iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@available(macOS, unavailable)
public struct TextInputAutocapitalization : Swift.Sendable {
  public static var never: SwiftUI.TextInputAutocapitalization {
    get
  }
  public static var words: SwiftUI.TextInputAutocapitalization {
    get
  }
  public static var sentences: SwiftUI.TextInputAutocapitalization {
    get
  }
  public static var characters: SwiftUI.TextInputAutocapitalization {
    get
  }
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct DragGesture : SwiftUICore.Gesture {
  public struct Value : Swift.Equatable, Swift.Sendable {
    public var time: Foundation.Date
    public var location: CoreFoundation.CGPoint
    public var startLocation: CoreFoundation.CGPoint
    public var translation: CoreFoundation.CGSize {
      get
    }
    @_alwaysEmitIntoClient public var velocity: CoreFoundation.CGSize {
      get {
            let predicted = predictedEndLocation
            return CGSize(
                width: 4.0 * (predicted.x - location.x),
                height: 4.0 * (predicted.y - location.y))
        }
    }
    public var predictedEndLocation: CoreFoundation.CGPoint {
      get
    }
    public var predictedEndTranslation: CoreFoundation.CGSize {
      get
    }
    public static func == (a: SwiftUI.DragGesture.Value, b: SwiftUI.DragGesture.Value) -> Swift.Bool
  }
  @_Concurrency.MainActor @preconcurrency public var minimumDistance: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public var coordinateSpace: SwiftUICore.CoordinateSpace
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(tvOS, unavailable)
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init(minimumDistance: CoreFoundation.CGFloat = 10, coordinateSpace: SwiftUICore.CoordinateSpace = .local)
  @available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public init(minimumDistance: CoreFoundation.CGFloat = 10, coordinateSpace: some CoordinateSpaceProtocol = .local)
  nonisolated public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUI.DragGesture>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<SwiftUI.DragGesture.Value>
  @available(iOS 13.0, watchOS 6.0, macOS 10.15, *)
  @available(tvOS, unavailable)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.DragGesture : Swift.Sendable {
}
@available(macOS 11.0, visionOS 1.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol WindowStyle {
  associatedtype _Body : SwiftUICore.View
}
@available(macOS 11.0, visionOS 1.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func windowStyle<S>(_ style: S) -> some SwiftUI.Scene where S : SwiftUI.WindowStyle
  
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func presentedWindowStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.WindowStyle
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUICore.VisualEffect {
  public func colorEffect(_ shader: SwiftUICore.Shader, isEnabled: Swift.Bool = true) -> some SwiftUICore.VisualEffect
  
  public func distortionEffect(_ shader: SwiftUICore.Shader, maxSampleOffset: CoreFoundation.CGSize, isEnabled: Swift.Bool = true) -> some SwiftUICore.VisualEffect
  
  public func layerEffect(_ shader: SwiftUICore.Shader, maxSampleOffset: CoreFoundation.CGSize, isEnabled: Swift.Bool = true) -> some SwiftUICore.VisualEffect
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUICore._ShaderFilterEffect : @retroactive SwiftUICore.VisualEffect {
  public static func _makeVisualEffect(effect: SwiftUICore._GraphValue<SwiftUICore._ShaderFilterEffect>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 17.0, tvOS 17.0, macOS 14.0, *)
  @available(watchOS, unavailable)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
}
extension SwiftUI.FocusedValue {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public init(_ objectType: Value.Type) where Value : AnyObject, Value : Observation.Observable
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  nonisolated public func focusedValue<T>(_ object: T?) -> some SwiftUICore.View where T : AnyObject, T : Observation.Observable
  
  @_alwaysEmitIntoClient nonisolated public func focusedSceneValue<T>(_ object: T?) -> some SwiftUICore.View where T : AnyObject, T : Observation.Observable {
        focusedSceneValue(T.focusedValueKey, object)
    }
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension Observation.Observable {
  @usableFromInline
  internal static var focusedValueKey: Swift.WritableKeyPath<SwiftUI.FocusedValues, Self?> {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@propertyWrapper @frozen public struct GestureState<Value> : SwiftUICore.DynamicProperty {
  fileprivate var state: SwiftUICore.State<Value>
  fileprivate let reset: (SwiftUICore.Binding<Value>) -> Swift.Void
  public init(wrappedValue: Value)
  @_alwaysEmitIntoClient public init(initialValue: Value) {
        self.init(wrappedValue: initialValue, resetTransaction: Transaction())
    }
  public init(wrappedValue: Value, resetTransaction: SwiftUICore.Transaction)
  @_alwaysEmitIntoClient public init(initialValue: Value, resetTransaction: SwiftUICore.Transaction) {
      self.init(wrappedValue: initialValue, resetTransaction: resetTransaction)
    }
  public init(wrappedValue: Value, reset: @escaping (Value, inout SwiftUICore.Transaction) -> Swift.Void)
  @_alwaysEmitIntoClient public init(initialValue: Value, reset: @escaping (Value, inout SwiftUICore.Transaction) -> Swift.Void) {
      self.init(wrappedValue: initialValue, reset: reset)
    }
  public var wrappedValue: Value {
    get
  }
  public var projectedValue: SwiftUI.GestureState<Value> {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.GestureState : @unchecked Swift.Sendable where Value : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.GestureState where Value : Swift.ExpressibleByNilLiteral {
  public init(resetTransaction: SwiftUICore.Transaction = Transaction())
  public init(reset: @escaping (Value, inout SwiftUICore.Transaction) -> Swift.Void)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.Gesture {
  @inlinable @_Concurrency.MainActor @preconcurrency public func updating<State>(_ state: SwiftUI.GestureState<State>, body: @escaping (Self.Value, inout State, inout SwiftUICore.Transaction) -> Swift.Void) -> SwiftUI.GestureStateGesture<Self, State> {
        return .init(base: self, state: state, body: body)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct GestureStateGesture<Base, State> : SwiftUICore.Gesture where Base : SwiftUICore.Gesture {
  public typealias Value = Base.Value
  public var base: Base
  public var state: SwiftUI.GestureState<State>
  public var body: (SwiftUI.GestureStateGesture<Base, State>.Value, inout State, inout SwiftUICore.Transaction) -> Swift.Void
  @inlinable public init(base: Base, state: SwiftUI.GestureState<State>, body: @escaping (SwiftUI.GestureStateGesture<Base, State>.Value, inout State, inout SwiftUICore.Transaction) -> Swift.Void) {
        self.base = base
        self.state = state
        self.body = body
    }
  nonisolated public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUI.GestureStateGesture<Base, State>>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<SwiftUI.GestureStateGesture<Base, State>.Value>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.GestureStateGesture : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@available(tvOS, unavailable)
public struct Slider<Label, ValueLabel> : SwiftUICore.View where Label : SwiftUICore.View, ValueLabel : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, watchOS 6.0, macOS 10.15, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI6SliderV4bodyQrvp", 0) __<Label, ValueLabel>
}
@available(*, unavailable)
extension SwiftUI.Slider : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@available(tvOS, unavailable)
extension SwiftUI.Slider {
  @_alwaysEmitIntoClient nonisolated public init<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V> = 0...1, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder minimumValueLabel: () -> ValueLabel, @SwiftUICore.ViewBuilder maximumValueLabel: () -> ValueLabel, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint {
        self.init(
            value: value,
            in: bounds,
            onEditingChanged: onEditingChanged,
            minimumValueLabel: minimumValueLabel(),
            maximumValueLabel: maximumValueLabel(),
            label: label)
    }
  @_alwaysEmitIntoClient nonisolated public init<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder minimumValueLabel: () -> ValueLabel, @SwiftUICore.ViewBuilder maximumValueLabel: () -> ValueLabel, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint {
        self.init(
            value: value,
            in: bounds,
            step: step,
            onEditingChanged: onEditingChanged,
            minimumValueLabel: minimumValueLabel(),
            maximumValueLabel: maximumValueLabel(),
            label: label)
    }
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@available(tvOS, unavailable)
extension SwiftUI.Slider where ValueLabel == SwiftUICore.EmptyView {
  @_alwaysEmitIntoClient nonisolated public init<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V> = 0...1, @SwiftUICore.ViewBuilder label: () -> Label, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint {
        self.init(
            value: value,
            in: bounds,
            onEditingChanged: onEditingChanged,
            label: label)
    }
  @_alwaysEmitIntoClient nonisolated public init<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, @SwiftUICore.ViewBuilder label: () -> Label, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint {
        self.init(
            value: value,
            in: bounds,
            step: step,
            onEditingChanged: onEditingChanged,
            label: label)
    }
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@available(tvOS, unavailable)
extension SwiftUI.Slider where Label == SwiftUICore.EmptyView, ValueLabel == SwiftUICore.EmptyView {
  nonisolated public init<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V> = 0...1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
  nonisolated public init<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@available(tvOS, unavailable)
extension SwiftUI.Slider {
  @available(tvOS, unavailable)
  @available(iOS, deprecated: 100000.0, renamed: "Slider(value:in:label:minimumValueLabel:maximumValueLabel:onEditingChanged:)")
  @available(macOS, deprecated: 100000.0, renamed: "Slider(value:in:label:minimumValueLabel:maximumValueLabel:onEditingChanged:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Slider(value:in:label:minimumValueLabel:maximumValueLabel:onEditingChanged:)")
  @available(tvOS, deprecated: 100000.0, renamed: "Slider(value:in:label:minimumValueLabel:maximumValueLabel:onEditingChanged:)")
  @available(visionOS, deprecated: 100000.0, renamed: "Slider(value:in:label:minimumValueLabel:maximumValueLabel:onEditingChanged:)")
  nonisolated public init<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V> = 0...1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, minimumValueLabel: ValueLabel, maximumValueLabel: ValueLabel, @SwiftUICore.ViewBuilder label: () -> Label) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
  @available(tvOS, unavailable)
  @available(iOS, deprecated: 100000.0, renamed: "Slider(value:in:step:label:minimumValueLabel:maximumValueLabel:onEditingChanged:)")
  @available(macOS, deprecated: 100000.0, renamed: "Slider(value:in:step:label:minimumValueLabel:maximumValueLabel:onEditingChanged:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Slider(value:in:step:label:minimumValueLabel:maximumValueLabel:onEditingChanged:)")
  @available(tvOS, deprecated: 100000.0, renamed: "Slider(value:in:step:label:minimumValueLabel:maximumValueLabel:onEditingChanged:)")
  @available(visionOS, deprecated: 100000.0, renamed: "Slider(value:in:step:label:minimumValueLabel:maximumValueLabel:onEditingChanged:)")
  nonisolated public init<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, minimumValueLabel: ValueLabel, maximumValueLabel: ValueLabel, @SwiftUICore.ViewBuilder label: () -> Label) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@available(tvOS, unavailable)
extension SwiftUI.Slider where ValueLabel == SwiftUICore.EmptyView {
  @available(tvOS, unavailable)
  @available(iOS, deprecated: 100000.0, renamed: "Slider(value:in:label:onEditingChanged:)")
  @available(macOS, deprecated: 100000.0, renamed: "Slider(value:in:label:onEditingChanged:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Slider(value:in:label:onEditingChanged:)")
  @available(tvOS, deprecated: 100000.0, renamed: "Slider(value:in:label:onEditingChanged:)")
  @available(visionOS, deprecated: 100000.0, renamed: "Slider(value:in:label:onEditingChanged:)")
  @_disfavoredOverload nonisolated public init<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V> = 0...1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, @SwiftUICore.ViewBuilder label: () -> Label) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
  @available(tvOS, unavailable)
  @available(iOS, deprecated: 100000.0, renamed: "Slider(value:in:step:label:onEditingChanged:)")
  @available(macOS, deprecated: 100000.0, renamed: "Slider(value:in:step:label:onEditingChanged:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Slider(value:in:step:label:onEditingChanged:)")
  @available(tvOS, deprecated: 100000.0, renamed: "Slider(value:in:step:label:onEditingChanged:)")
  @available(visionOS, deprecated: 100000.0, renamed: "Slider(value:in:step:label:onEditingChanged:)")
  @_disfavoredOverload nonisolated public init<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, @SwiftUICore.ViewBuilder label: () -> Label) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _SymmetricallyScaledText : SwiftUICore.View {
  public var source: SwiftUICore.Text
  public var reference: SwiftUICore.Text
  public init(source: SwiftUICore.Text, reference: SwiftUICore.Text)
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI._SymmetricallyScaledText>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._SymmetricallyScaledText : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func exportableToServices<T>(_ payload: @autoclosure @escaping () -> [T]) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func exportableToServices<T>(_ payload: @autoclosure @escaping () -> [T], onEdit: @escaping ([T]) -> Swift.Bool) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
}
extension SwiftUICore.View {
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func importableFromServices<T>(for payloadType: T.Type = T.self, action: @escaping ([T]) -> Swift.Bool) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func exportsItemProviders(_ contentTypes: [UniformTypeIdentifiers.UTType], onExport: @escaping () -> [Foundation.NSItemProvider]) -> some SwiftUICore.View
  
  nonisolated public func exportsItemProviders(_ contentTypes: [UniformTypeIdentifiers.UTType], onExport: @escaping () -> [Foundation.NSItemProvider], onEdit: @escaping ([Foundation.NSItemProvider]) -> Swift.Bool) -> some SwiftUICore.View
  
  nonisolated public func importsItemProviders(_ contentTypes: [UniformTypeIdentifiers.UTType], onImport: @escaping ([Foundation.NSItemProvider]) -> Swift.Bool) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TableColumnCustomization<RowValue> : Swift.Equatable, Swift.Sendable, Swift.Codable where RowValue : Swift.Identifiable {
  public init()
  public subscript(visibility id: Swift.String) -> SwiftUICore.Visibility {
    get
    set
  }
  public mutating func resetOrder()
  public static func == (a: SwiftUI.TableColumnCustomization<RowValue>, b: SwiftUI.TableColumnCustomization<RowValue>) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.SceneStorage {
  public init<RowValue>(wrappedValue: Value = TableColumnCustomization<RowValue>(), _ key: Swift.String) where Value == SwiftUI.TableColumnCustomization<RowValue>, RowValue : Swift.Identifiable
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.AppStorage {
  public init<RowValue>(wrappedValue: Value = TableColumnCustomization<RowValue>(), _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == SwiftUI.TableColumnCustomization<RowValue>, RowValue : Swift.Identifiable
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.WindowToolbarStyle where Self == SwiftUI.DefaultWindowToolbarStyle {
  @_alwaysEmitIntoClient public static var automatic: SwiftUI.DefaultWindowToolbarStyle {
    get { .init() }
  }
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct DefaultWindowToolbarStyle : SwiftUI.WindowToolbarStyle {
  public typealias _Body = Swift.Never
  public init()
}
@available(*, unavailable)
extension SwiftUI.DefaultWindowToolbarStyle : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct ProgressView<Label, CurrentValueLabel> : SwiftUICore.View where Label : SwiftUICore.View, CurrentValueLabel : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI12ProgressViewV4bodyQrvp", 0) __<Label, CurrentValueLabel>
}
@available(*, unavailable)
extension SwiftUI.ProgressView : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ProgressView where CurrentValueLabel == SwiftUICore.EmptyView {
  nonisolated public init() where Label == SwiftUICore.EmptyView
  nonisolated public init(@SwiftUICore.ViewBuilder label: () -> Label)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey) where Label == SwiftUICore.Text
  @_disfavoredOverload nonisolated public init<S>(_ title: S) where Label == SwiftUICore.Text, S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ProgressView {
  nonisolated public init<V>(value: V?, total: V = 1.0) where Label == SwiftUICore.EmptyView, CurrentValueLabel == SwiftUICore.EmptyView, V : Swift.BinaryFloatingPoint
  nonisolated public init<V>(value: V?, total: V = 1.0, @SwiftUICore.ViewBuilder label: () -> Label) where CurrentValueLabel == SwiftUICore.EmptyView, V : Swift.BinaryFloatingPoint
  nonisolated public init<V>(value: V?, total: V = 1.0, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder currentValueLabel: () -> CurrentValueLabel) where V : Swift.BinaryFloatingPoint
  nonisolated public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, value: V?, total: V = 1.0) where Label == SwiftUICore.Text, CurrentValueLabel == SwiftUICore.EmptyView, V : Swift.BinaryFloatingPoint
  @_disfavoredOverload nonisolated public init<S, V>(_ title: S, value: V?, total: V = 1.0) where Label == SwiftUICore.Text, CurrentValueLabel == SwiftUICore.EmptyView, S : Swift.StringProtocol, V : Swift.BinaryFloatingPoint
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ProgressView {
  nonisolated public init(_ progress: Foundation.Progress) where Label == SwiftUICore.EmptyView, CurrentValueLabel == SwiftUICore.EmptyView
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ProgressView {
  nonisolated public init(_ configuration: SwiftUI.ProgressViewStyleConfiguration) where Label == SwiftUI.ProgressViewStyleConfiguration.Label, CurrentValueLabel == SwiftUI.ProgressViewStyleConfiguration.CurrentValueLabel
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct LabeledContent<Label, Content> {
}
@available(*, unavailable)
extension SwiftUI.LabeledContent : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.LabeledContent : SwiftUICore.View where Label : SwiftUICore.View, Content : SwiftUICore.View {
  nonisolated public init(@SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI14LabeledContentVA2A4ViewRzAaDR_rlE4bodyQrvp", 0) __<Label, Content>
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.LabeledContent where Label == SwiftUICore.Text, Content : SwiftUICore.View {
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload public init<S>(_ title: S, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.LabeledContent where Label == SwiftUICore.Text, Content == SwiftUICore.Text {
  public init<S>(_ titleKey: SwiftUICore.LocalizedStringKey, value: S) where S : Swift.StringProtocol
  @_disfavoredOverload public init<S1, S2>(_ title: S1, value: S2) where S1 : Swift.StringProtocol, S2 : Swift.StringProtocol
  public init<F>(_ titleKey: SwiftUICore.LocalizedStringKey, value: F.FormatInput, format: F) where F : Foundation.FormatStyle, F.FormatInput : Swift.Equatable, F.FormatOutput == Swift.String
  public init<S, F>(_ title: S, value: F.FormatInput, format: F) where S : Swift.StringProtocol, F : Foundation.FormatStyle, F.FormatInput : Swift.Equatable, F.FormatOutput == Swift.String
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.LabeledContent where Label == SwiftUI.LabeledContentStyleConfiguration.Label, Content == SwiftUI.LabeledContentStyleConfiguration.Content {
  public init(_ configuration: SwiftUI.LabeledContentStyleConfiguration)
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.Color : @retroactive CoreTransferable.Transferable {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static var transferRepresentation: some CoreTransferable.TransferRepresentation {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Representation = @_opaqueReturnTypeOf("$s7SwiftUI5ColorV22transferRepresentationQrvpZ", 0) __
}
@available(iOS 14.0, tvOS 14.0, watchOS 8.0, *)
@available(macOS, unavailable)
public protocol IndexViewStyle {
  associatedtype _Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder func _makeBody(configuration: Self._Configuration) -> Self._Body
  typealias _Configuration = SwiftUI._IndexViewStyleConfiguration
}
@available(iOS 14.0, tvOS 14.0, watchOS 8.0, *)
@available(macOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func indexViewStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.IndexViewStyle
  
}
@available(iOS 14.0, tvOS 14.0, watchOS 8.0, *)
@available(macOS, unavailable)
public struct _IndexViewStyleConfiguration {
}
@available(*, unavailable)
extension SwiftUI._IndexViewStyleConfiguration : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
@frozen public struct EmptyWidgetConfiguration : SwiftUI.WidgetConfiguration {
  @inlinable public init() {}
  nonisolated public static func _makeWidgetConfiguration(widget: SwiftUICore._GraphValue<SwiftUI.EmptyWidgetConfiguration>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
  @available(iOS 14.0, watchOS 9.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  public typealias Body = Swift.Never
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Section : SwiftUI.TableRowContent where Parent : SwiftUI.TableRowContent, Content : SwiftUI.TableRowContent, Footer : SwiftUI.TableRowContent {
  public typealias TableRowValue = Content.TableRowValue
  public typealias TableRowBody = Swift.Never
  nonisolated public static func _makeRows(content: SwiftUICore._GraphValue<SwiftUI.Section<Parent, Content, Footer>>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  nonisolated public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
  nonisolated public init<V, H>(@SwiftUI.TableRowBuilder<V> content: () -> Content, @SwiftUICore.ViewBuilder header: () -> H) where Parent == SwiftUI.TableHeaderRowContent<V, H>, Footer == SwiftUI.EmptyTableRowContent<V>, V == Content.TableRowValue, H : SwiftUICore.View
  nonisolated public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUI.TableRowBuilder<V> content: () -> Content) where Parent == SwiftUI.TableHeaderRowContent<V, SwiftUICore.Text>, Footer == SwiftUI.EmptyTableRowContent<V>, V == Content.TableRowValue
  @_disfavoredOverload nonisolated public init<V, S>(_ title: S, @SwiftUI.TableRowBuilder<V> content: () -> Content) where Parent == SwiftUI.TableHeaderRowContent<V, SwiftUICore.Text>, Footer == SwiftUI.EmptyTableRowContent<V>, V == Content.TableRowValue, S : Swift.StringProtocol
  nonisolated public init<V>(@SwiftUI.TableRowBuilder<V> content: () -> Content) where Parent == SwiftUI.EmptyTableRowContent<V>, Footer == SwiftUI.EmptyTableRowContent<V>, V == Content.TableRowValue
}
@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Section where Parent : SwiftUI.TableRowContent, Content : SwiftUI.TableRowContent {
  nonisolated public init<V, H>(isExpanded: SwiftUICore.Binding<Swift.Bool>, @SwiftUI.TableRowBuilder<V> content: () -> Content, @SwiftUICore.ViewBuilder header: () -> H) where Parent == SwiftUI.TableHeaderRowContent<V, H>, Footer == SwiftUI.EmptyTableRowContent<V>, V == Content.TableRowValue, H : SwiftUICore.View
  nonisolated public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, isExpanded: SwiftUICore.Binding<Swift.Bool>, @SwiftUI.TableRowBuilder<V> content: () -> Content) where Parent == SwiftUI.TableHeaderRowContent<V, SwiftUICore.Text>, Footer == SwiftUI.EmptyTableRowContent<V>, V == Content.TableRowValue
  @_disfavoredOverload nonisolated public init<V, S>(_ title: S, isExpanded: SwiftUICore.Binding<Swift.Bool>, @SwiftUI.TableRowBuilder<V> content: () -> Content) where Parent == SwiftUI.TableHeaderRowContent<V, SwiftUICore.Text>, Footer == SwiftUI.EmptyTableRowContent<V>, V == Content.TableRowValue, S : Swift.StringProtocol
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct EmptyTableRowContent<Value> where Value : Swift.Identifiable {
  public typealias TableRowValue = Value
  public typealias TableRowBody = Swift.Never
  nonisolated public static func _makeRows(content: SwiftUICore._GraphValue<SwiftUI.EmptyTableRowContent<Value>>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  nonisolated public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.EmptyTableRowContent : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TableHeaderRowContent<Value, Content> : SwiftUI.TableRowContent where Value : Swift.Identifiable, Content : SwiftUICore.View {
  public typealias TableRowValue = Value
  @_Concurrency.MainActor @preconcurrency public var tableRowBody: some SwiftUI.TableRowContent {
    get
  }
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias TableRowBody = @_opaqueReturnTypeOf("$s7SwiftUI21TableHeaderRowContentV05tableE4BodyQrvp", 0) __<Value, Content>
}
@available(*, unavailable)
extension SwiftUI.TableHeaderRowContent : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func menuOrder(_ order: SwiftUI.MenuOrder) -> some SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct MenuOrder : Swift.Equatable, Swift.Hashable, Swift.Sendable {
  public static let automatic: SwiftUI.MenuOrder
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let priority: SwiftUI.MenuOrder
  public static let fixed: SwiftUI.MenuOrder
  public static func == (a: SwiftUI.MenuOrder, b: SwiftUI.MenuOrder) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.EnvironmentValues {
  public var menuOrder: SwiftUI.MenuOrder {
    get
    set
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.ShapeStyle where Self == SwiftUI.PlaceholderTextShapeStyle {
  @_alwaysEmitIntoClient public static var placeholder: SwiftUI.PlaceholderTextShapeStyle {
    get { .init() }
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@frozen public struct PlaceholderTextShapeStyle : SwiftUICore.ShapeStyle {
  @_alwaysEmitIntoClient public init() {}
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@preconcurrency @_Concurrency.MainActor public protocol TabViewStyle {
  nonisolated static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<Self, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<Self, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _TabViewValue<Style, SelectionValue> where Style : SwiftUI.TabViewStyle, SelectionValue : Swift.Hashable {
}
@available(*, unavailable)
extension SwiftUI._TabViewValue : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func tabViewStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.TabViewStyle
  
}
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func contentMargins(_ edges: SwiftUICore.Edge.Set = .all, _ insets: SwiftUICore.EdgeInsets, for placement: SwiftUI.ContentMarginPlacement = .automatic) -> some SwiftUICore.View
  
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func contentMargins(_ edges: SwiftUICore.Edge.Set = .all, _ length: CoreFoundation.CGFloat?, for placement: SwiftUI.ContentMarginPlacement = .automatic) -> some SwiftUICore.View
  
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func contentMargins(_ length: CoreFoundation.CGFloat, for placement: SwiftUI.ContentMarginPlacement = .automatic) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, watchOS 10.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@usableFromInline
internal enum SectionIndexLabel {
  case text(SwiftUICore.Text)
  case image(SwiftUICore.Image)
}
@available(*, unavailable)
extension SwiftUI.SectionIndexLabel : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, watchOS 10.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@usableFromInline
internal struct SectionIndexLabelKey : SwiftUICore._ViewTraitKey {
  @_alwaysEmitIntoClient internal static var defaultValue: SwiftUI.SectionIndexLabel? {
    get { nil }
  }
  @available(iOS 18.0, watchOS 10.0, visionOS 2.0, macOS 15.0, *)
  @usableFromInline
  @available(tvOS, unavailable)
  internal typealias Value = SwiftUI.SectionIndexLabel?
}
@available(*, unavailable)
extension SwiftUI.SectionIndexLabelKey : Swift.Sendable {
}
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, introduced: 10.0, deprecated: 100000.0, renamed: "SectionIndexLabelKey")
@usableFromInline
internal struct SectionIndexTitleKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUICore.Text? {
    get { nil }
  }
  @usableFromInline
  @available(iOS, unavailable, renamed: "SectionIndexLabelKey")
  @available(tvOS, unavailable, renamed: "SectionIndexLabelKey")
  @available(watchOS, introduced: 10.0, deprecated: 100000.0, renamed: "SectionIndexLabelKey")
  @available(macOS, unavailable, renamed: "SectionIndexLabelKey")
  internal typealias Value = SwiftUICore.Text?
}
@available(*, unavailable)
extension SwiftUI.SectionIndexTitleKey : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol DisclosureGroupStyle {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.DisclosureGroupStyleConfiguration
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DisclosureGroupStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Label : SwiftUICore.View {
    @available(iOS 16.0, macOS 13.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    public typealias Body = Swift.Never
  }
  public let label: SwiftUI.DisclosureGroupStyleConfiguration.Label
  @_Concurrency.MainActor @preconcurrency public struct Content : SwiftUICore.View {
    @available(iOS 16.0, macOS 13.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    public typealias Body = Swift.Never
  }
  public let content: SwiftUI.DisclosureGroupStyleConfiguration.Content
  @SwiftUICore.Binding @_projectedValueProperty($isExpanded) public var isExpanded: Swift.Bool {
    get
    @available(iOS 16.0, macOS 13.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable, introduced: 6.0)
    nonmutating set
    @available(iOS 16.0, macOS 13.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable, introduced: 6.0)
    nonmutating _modify
  }
  public var $isExpanded: SwiftUICore.Binding<Swift.Bool> {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.DisclosureGroupStyleConfiguration : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.DisclosureGroupStyleConfiguration.Content : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.DisclosureGroupStyleConfiguration.Label : Swift.Sendable {
}
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, *)
  @available(watchOS, unavailable)
  nonisolated public func disclosureGroupStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.DisclosureGroupStyle
  
}
@available(iOS 17.0, visionOS 1.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var isSceneCaptured: Swift.Bool {
    get
    set
  }
}
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func defaultFocus<V>(_ binding: SwiftUI.FocusState<V>.Binding, _ value: V, priority: SwiftUI.DefaultFocusEvaluationPriority = .automatic) -> some SwiftUICore.View where V : Swift.Hashable
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct DefaultFocusEvaluationPriority : Swift.Sendable {
  public static let automatic: SwiftUI.DefaultFocusEvaluationPriority
  public static let userInitiated: SwiftUI.DefaultFocusEvaluationPriority
}
extension SwiftUICore.View {
  @available(iOS, introduced: 16.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(macOS, introduced: 13.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(tvOS, introduced: 16.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @_disfavoredOverload nonisolated public func onContinuousHover(coordinateSpace: SwiftUICore.CoordinateSpace = .local, perform action: @escaping (SwiftUI.HoverPhase) -> Swift.Void) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
  @available(watchOS, unavailable)
  nonisolated public func onContinuousHover(coordinateSpace: some CoordinateSpaceProtocol = .local, perform action: @escaping (SwiftUI.HoverPhase) -> Swift.Void) -> some SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, *)
@available(watchOS, unavailable)
@frozen public enum HoverPhase : Swift.Equatable {
  case active(CoreFoundation.CGPoint)
  case ended
  public static func == (a: SwiftUI.HoverPhase, b: SwiftUI.HoverPhase) -> Swift.Bool
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct WindowInteractionBehavior : Swift.Sendable {
  public static let automatic: SwiftUI.WindowInteractionBehavior
  public static let enabled: SwiftUI.WindowInteractionBehavior
  public static let disabled: SwiftUI.WindowInteractionBehavior
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func windowDismissBehavior(_ behavior: SwiftUI.WindowInteractionBehavior) -> some SwiftUICore.View
  
  nonisolated public func windowMinimizeBehavior(_ behavior: SwiftUI.WindowInteractionBehavior) -> some SwiftUICore.View
  
  nonisolated public func windowResizeBehavior(_ behavior: SwiftUI.WindowInteractionBehavior) -> some SwiftUICore.View
  
  nonisolated public func windowFullScreenBehavior(_ behavior: SwiftUI.WindowInteractionBehavior) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.Scene {
  nonisolated public func windowManagerRole(_ role: SwiftUI.WindowManagerRole) -> some SwiftUI.Scene
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct WindowManagerRole : Swift.Sendable {
  public static let automatic: SwiftUI.WindowManagerRole
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static let principal: SwiftUI.WindowManagerRole
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static let associated: SwiftUI.WindowManagerRole
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.LabeledContentStyle where Self == SwiftUI.AutomaticLabeledContentStyle {
  @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.AutomaticLabeledContentStyle {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct AutomaticLabeledContentStyle : SwiftUI.LabeledContentStyle {
  public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.AutomaticLabeledContentStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI28AutomaticLabeledContentStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.AutomaticLabeledContentStyle : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  @_alwaysEmitIntoClient nonisolated public func symbolEffect<T>(_ effect: T, options: Symbols.SymbolEffectOptions = .default, isActive: Swift.Bool = true) -> some SwiftUICore.View where T : Symbols.IndefiniteSymbolEffect, T : Symbols.SymbolEffect {
        return modifier(_IndefiniteSymbolEffectModifier(
            effect: effect, options: options, isActive: isActive))
    }
  
  @_alwaysEmitIntoClient nonisolated public func symbolEffect<T, U>(_ effect: T, options: Symbols.SymbolEffectOptions = .default, value: U) -> some SwiftUICore.View where T : Symbols.DiscreteSymbolEffect, T : Symbols.SymbolEffect, U : Swift.Equatable {
        return modifier(_DiscreteSymbolEffectModifier(
            effect: effect, options: options, value: value))
    }
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@frozen public struct _IndefiniteSymbolEffectModifier : SwiftUICore.ViewModifier, SwiftUICore._GraphInputsModifier {
  @usableFromInline
  internal var config: Symbols.SymbolEffectConfiguration
  @usableFromInline
  internal var options: Symbols.SymbolEffectOptions
  @usableFromInline
  internal var isActive: Swift.Bool
  @_alwaysEmitIntoClient internal init<T>(effect: T, options: Symbols.SymbolEffectOptions, isActive: Swift.Bool) where T : Symbols.IndefiniteSymbolEffect, T : Symbols.SymbolEffect {
        self.config = effect.configuration
        self.options = options
        self.isActive = isActive
    }
  public static func _makeInputs(modifier: SwiftUICore._GraphValue<SwiftUI._IndefiniteSymbolEffectModifier>, inputs: inout SwiftUICore._GraphInputs)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._IndefiniteSymbolEffectModifier : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@frozen public struct _DiscreteSymbolEffectModifier<T> : SwiftUICore.ViewModifier, SwiftUICore._GraphInputsModifier where T : Swift.Equatable {
  @usableFromInline
  internal var config: Symbols.SymbolEffectConfiguration
  @usableFromInline
  internal var options: Symbols.SymbolEffectOptions
  @usableFromInline
  internal var value: T
  @_alwaysEmitIntoClient internal init<U>(effect: U, options: Symbols.SymbolEffectOptions, value: T) where U : Symbols.DiscreteSymbolEffect, U : Symbols.SymbolEffect {
        config = effect.configuration
        self.options = options
        self.value = value
    }
  public static func _makeInputs(modifier: SwiftUICore._GraphValue<SwiftUI._DiscreteSymbolEffectModifier<T>>, inputs: inout SwiftUICore._GraphInputs)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._DiscreteSymbolEffectModifier : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@frozen public struct _ConditionalSymbolEffectModifier : SwiftUICore.ViewModifier, SwiftUICore._GraphInputsModifier {
  @usableFromInline
  internal var config: Symbols.SymbolEffectConfiguration
  @usableFromInline
  internal var options: Symbols.SymbolEffectOptions
  @usableFromInline
  internal var condition: Swift.Bool
  @_alwaysEmitIntoClient internal init<U>(effect: U, options: Symbols.SymbolEffectOptions, condition: Swift.Bool) where U : Symbols.DiscreteSymbolEffect, U : Symbols.SymbolEffect {
        config = effect.configuration
        self.options = options
        self.condition = condition
    }
  public static func _makeInputs(modifier: SwiftUICore._GraphValue<SwiftUI._ConditionalSymbolEffectModifier>, inputs: inout SwiftUICore._GraphInputs)
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._ConditionalSymbolEffectModifier : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.Transition where Self == SwiftUI.SymbolEffectTransition {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static func symbolEffect<T>(_ effect: T, options: Symbols.SymbolEffectOptions = .default) -> SwiftUI.SymbolEffectTransition where T : Symbols.SymbolEffect, T : Symbols.TransitionSymbolEffect {
        return SymbolEffectTransition(effect: effect, options: options)
    }
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var symbolEffect: SwiftUI.SymbolEffectTransition {
    get {
        return symbolEffect(.automatic)
    }
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct SymbolEffectTransition : SwiftUICore.Transition {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var config: Symbols.SymbolEffectConfiguration
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var options: Symbols.SymbolEffectOptions
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init<T>(effect: T, options: Symbols.SymbolEffectOptions) where T : Symbols.SymbolEffect, T : Symbols.TransitionSymbolEffect {
        config = effect.configuration
        self.options = options
    }
  @_Concurrency.MainActor @preconcurrency public func body(content: SwiftUI.SymbolEffectTransition.Content, phase: SwiftUICore.TransitionPhase) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public static let properties: SwiftUICore.TransitionProperties
  @_Concurrency.MainActor @preconcurrency public func _makeContentTransition(transition: inout SwiftUICore._Transition_ContentTransition)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI22SymbolEffectTransitionV4body7content5phaseQrAA22PlaceholderContentViewVyACG_AA0E5PhaseOtF", 0) __
}
@available(*, unavailable)
extension SwiftUI.SymbolEffectTransition : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.ContentTransition {
  public static func symbolEffect<T>(_ effect: T, options: Symbols.SymbolEffectOptions = .default) -> SwiftUICore.ContentTransition where T : Symbols.ContentTransitionSymbolEffect, T : Symbols.SymbolEffect
  @_alwaysEmitIntoClient public static var symbolEffect: SwiftUICore.ContentTransition {
    get {
        return symbolEffect(.automatic)
    }
  }
}
extension Symbols.WiggleSymbolEffect {
  @available(macOS 15.0, iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @_alwaysEmitIntoClient public func custom(angle: SwiftUICore.Angle) -> Symbols.WiggleSymbolEffect {
        return custom(angle: angle.degrees)
    }
}
@available(visionOS 1.0, iOS 18.0, macOS 15.0, watchOS 11.0, *)
@available(tvOS, unavailable)
public struct SpatialEventCollection : Swift.Collection {
  @available(visionOS 1.0, iOS 18.0, macOS 15.0, watchOS 11.0, *)
  @available(tvOS, unavailable)
  public struct Event : Swift.Identifiable, Swift.Hashable {
    public struct ID : Swift.Hashable {
      public static func == (a: SwiftUI.SpatialEventCollection.Event.ID, b: SwiftUI.SpatialEventCollection.Event.ID) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func hash(into hasher: inout Swift.Hasher)
    public enum Kind : Swift.Hashable {
      case touch
      @available(visionOS 1.0, *)
      @available(iOS, unavailable)
      @available(macOS, unavailable)
      @available(tvOS, unavailable)
      @available(watchOS, unavailable)
      case directPinch
      @available(visionOS 1.0, *)
      @available(iOS, unavailable)
      @available(macOS, unavailable)
      @available(tvOS, unavailable)
      @available(watchOS, unavailable)
      case indirectPinch
      @available(iOS 18.0, *)
      @available(macOS, unavailable)
      @available(tvOS, unavailable)
      @available(watchOS, unavailable)
      @available(visionOS, unavailable)
      case pencil
      @available(visionOS 1.0, iOS 18.0, macOS 15.0, *)
      @available(tvOS, unavailable)
      @available(watchOS, unavailable)
      case pointer
      public static func == (a: SwiftUI.SpatialEventCollection.Event.Kind, b: SwiftUI.SpatialEventCollection.Event.Kind) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public enum Phase : Swift.Hashable {
      case active
      case ended
      case cancelled
      public static func == (a: SwiftUI.SpatialEventCollection.Event.Phase, b: SwiftUI.SpatialEventCollection.Event.Phase) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct InputDevicePose : Swift.Hashable {
      public var altitude: SwiftUICore.Angle
      public var azimuth: SwiftUICore.Angle
      public static func == (a: SwiftUI.SpatialEventCollection.Event.InputDevicePose, b: SwiftUI.SpatialEventCollection.Event.InputDevicePose) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public var id: SwiftUI.SpatialEventCollection.Event.ID
    public var timestamp: Foundation.TimeInterval
    public var kind: SwiftUI.SpatialEventCollection.Event.Kind
    public var location: CoreFoundation.CGPoint
    public var phase: SwiftUI.SpatialEventCollection.Event.Phase
    public var modifierKeys: SwiftUICore.EventModifiers
    @available(visionOS 1.0, iOS 18.0, *)
    @available(macOS, unavailable)
    @available(watchOS, unavailable)
    @available(tvOS, unavailable)
    public var inputDevicePose: SwiftUI.SpatialEventCollection.Event.InputDevicePose? {
      get
      set
    }
    public static func == (a: SwiftUI.SpatialEventCollection.Event, b: SwiftUI.SpatialEventCollection.Event) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public subscript(index: SwiftUI.SpatialEventCollection.Event.ID) -> SwiftUI.SpatialEventCollection.Event? {
    get
  }
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftUI.SpatialEventCollection.Event?
    @available(iOS 18.0, watchOS 11.0, visionOS 1.0, macOS 15.0, *)
    @available(tvOS, unavailable)
    public typealias Element = SwiftUI.SpatialEventCollection.Event
  }
  public func makeIterator() -> SwiftUI.SpatialEventCollection.Iterator
  public struct Index : Swift.Comparable {
    public static func < (lhs: SwiftUI.SpatialEventCollection.Index, rhs: SwiftUI.SpatialEventCollection.Index) -> Swift.Bool
    public static func == (a: SwiftUI.SpatialEventCollection.Index, b: SwiftUI.SpatialEventCollection.Index) -> Swift.Bool
  }
  public var startIndex: SwiftUI.SpatialEventCollection.Index {
    get
  }
  public var endIndex: SwiftUI.SpatialEventCollection.Index {
    get
  }
  public subscript(position: SwiftUI.SpatialEventCollection.Index) -> SwiftUI.SpatialEventCollection.Event {
    get
  }
  public func index(after i: SwiftUI.SpatialEventCollection.Index) -> SwiftUI.SpatialEventCollection.Index
  @available(iOS 18.0, watchOS 11.0, visionOS 1.0, macOS 15.0, *)
  @available(tvOS, unavailable)
  public typealias Element = SwiftUI.SpatialEventCollection.Event
  @available(iOS 18.0, watchOS 11.0, visionOS 1.0, macOS 15.0, *)
  @available(tvOS, unavailable)
  public typealias Indices = Swift.DefaultIndices<SwiftUI.SpatialEventCollection>
  @available(iOS 18.0, watchOS 11.0, visionOS 1.0, macOS 15.0, *)
  @available(tvOS, unavailable)
  public typealias SubSequence = Swift.Slice<SwiftUI.SpatialEventCollection>
}
@available(*, unavailable)
extension SwiftUI.SpatialEventCollection : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.SpatialEventCollection.Iterator : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.SpatialEventCollection.Index : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.SpatialEventCollection.Event : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.SpatialEventCollection.Event.Kind : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.SpatialEventCollection.Event.Phase : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.SpatialEventCollection.Event.InputDevicePose : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.SpatialEventCollection.Event.ID : Swift.Sendable {
}
@available(visionOS 1.0, iOS 18.0, macOS 15.0, watchOS 11.0, *)
@available(tvOS, unavailable)
extension SwiftUI.SpatialEventCollection : Swift.Equatable {
  public static func == (lhs: SwiftUI.SpatialEventCollection, rhs: SwiftUI.SpatialEventCollection) -> Swift.Bool
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct WindowMenuBarExtraStyle : SwiftUI.MenuBarExtraStyle {
  public typealias _Body = Swift.Never
  public init()
  public func _makeMenuBarExtra(_ value: SwiftUI._MenuBarExtraValue<SwiftUI.WindowMenuBarExtraStyle>) -> SwiftUI._MenuBarExtraValue<SwiftUI.WindowMenuBarExtraStyle>
}
@available(*, unavailable)
extension SwiftUI.WindowMenuBarExtraStyle : Swift.Sendable {
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.MenuBarExtraStyle where Self == SwiftUI.WindowMenuBarExtraStyle {
  public static var window: SwiftUI.WindowMenuBarExtraStyle {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ProgressViewStyle where Self == SwiftUI.LinearProgressViewStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var linear: SwiftUI.LinearProgressViewStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct LinearProgressViewStyle : SwiftUI.ProgressViewStyle {
  public init()
  @available(iOS, introduced: 14.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(macOS, introduced: 11.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(tvOS, introduced: 14.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  public init(tint: SwiftUICore.Color)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.LinearProgressViewStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI23LinearProgressViewStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.LinearProgressViewStyle : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct PagingScrollTargetBehavior : SwiftUI.ScrollTargetBehavior {
  public init()
  public func updateTarget(_ target: inout SwiftUICore.ScrollTarget, context: SwiftUI.PagingScrollTargetBehavior.TargetContext)
  public static func _makeInputs(_ behavior: SwiftUICore._GraphValue<SwiftUI.PagingScrollTargetBehavior>, inputs: inout SwiftUICore._ViewInputs)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.PagingScrollTargetBehavior {
  public func _updateEnvironment(_ env: inout SwiftUICore.EnvironmentValues, context: SwiftUI._ScrollTargetBehaviorEnvironmentContext)
}
@available(iOS 18.4, macOS 15.4, tvOS 18.4, watchOS 11.4, visionOS 2.4, *)
extension SwiftUI.PagingScrollTargetBehavior {
  public func properties(context: SwiftUI.PagingScrollTargetBehavior.PropertiesContext) -> SwiftUI.PagingScrollTargetBehavior.Properties
}
extension SwiftUI.ScrollTargetBehavior where Self == SwiftUI.PagingScrollTargetBehavior {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_alwaysEmitIntoClient public static var paging: SwiftUI.PagingScrollTargetBehavior {
    get { .init() }
  }
}
@available(*, unavailable)
extension SwiftUI.PagingScrollTargetBehavior : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct ViewAlignedScrollTargetBehavior : SwiftUI.ScrollTargetBehavior {
  public struct LimitBehavior {
    public static var automatic: SwiftUI.ViewAlignedScrollTargetBehavior.LimitBehavior {
      get
    }
    public static var always: SwiftUI.ViewAlignedScrollTargetBehavior.LimitBehavior {
      get
    }
    @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
    public static var alwaysByFew: SwiftUI.ViewAlignedScrollTargetBehavior.LimitBehavior {
      get
    }
    @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
    public static var alwaysByOne: SwiftUI.ViewAlignedScrollTargetBehavior.LimitBehavior {
      get
    }
    public static var never: SwiftUI.ViewAlignedScrollTargetBehavior.LimitBehavior {
      get
    }
  }
  public init(limitBehavior: SwiftUI.ViewAlignedScrollTargetBehavior.LimitBehavior = .automatic)
  public func updateTarget(_ target: inout SwiftUICore.ScrollTarget, context: SwiftUI.ViewAlignedScrollTargetBehavior.TargetContext)
  public static func _makeInputs(_ behavior: SwiftUICore._GraphValue<SwiftUI.ViewAlignedScrollTargetBehavior>, inputs: inout SwiftUICore._ViewInputs)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.ViewAlignedScrollTargetBehavior {
  public func _updateEnvironment(_ env: inout SwiftUICore.EnvironmentValues, context: SwiftUI._ScrollTargetBehaviorEnvironmentContext)
}
@available(iOS 18.4, macOS 15.4, tvOS 18.4, watchOS 11.4, visionOS 2.4, *)
extension SwiftUI.ViewAlignedScrollTargetBehavior {
  public func properties(context: SwiftUI.ViewAlignedScrollTargetBehavior.PropertiesContext) -> SwiftUI.ViewAlignedScrollTargetBehavior.Properties
}
extension SwiftUI.ScrollTargetBehavior where Self == SwiftUI.ViewAlignedScrollTargetBehavior {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_alwaysEmitIntoClient public static var viewAligned: SwiftUI.ViewAlignedScrollTargetBehavior {
    get { .init() }
  }
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_alwaysEmitIntoClient public static func viewAligned(limitBehavior: SwiftUI.ViewAlignedScrollTargetBehavior.LimitBehavior) -> Self {
        .init(limitBehavior: limitBehavior)
    }
}
@available(*, unavailable)
extension SwiftUI.ViewAlignedScrollTargetBehavior : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.ViewAlignedScrollTargetBehavior.LimitBehavior : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@frozen public struct AnyScrollTargetBehavior : SwiftUI.ScrollTargetBehavior {
  public var base: any SwiftUI.ScrollTargetBehavior
  @inlinable public init(_ base: some ScrollTargetBehavior) {
        self.base = base
    }
  @inlinable public func updateTarget(_ target: inout SwiftUICore.ScrollTarget, context: SwiftUI.AnyScrollTargetBehavior.TargetContext) {
        base.updateTarget(&target, context: context)
    }
  @inlinable public func _updateEnvironment(_ env: inout SwiftUICore.EnvironmentValues, context: SwiftUI._ScrollTargetBehaviorEnvironmentContext) {
        base._updateEnvironment(&env, context: context)
    }
}
@available(iOS 18.4, macOS 15.4, tvOS 18.4, watchOS 11.4, visionOS 2.4, *)
extension SwiftUI.AnyScrollTargetBehavior {
  @inlinable public func properties(context: SwiftUI.AnyScrollTargetBehavior.PropertiesContext) -> SwiftUI.AnyScrollTargetBehavior.Properties {
        base.properties(context: context)
    }
}
@available(*, unavailable)
extension SwiftUI.AnyScrollTargetBehavior : Swift.Sendable {
}
@available(macOS 15.4, *)
@available(iOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func presentationPreventsAppTermination(_ prevents: Swift.Bool?) -> some SwiftUICore.View
  
}
extension SwiftUI.TabContent {
  @available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func customizationBehavior(_ behavior: SwiftUI.TabCustomizationBehavior, for placements: SwiftUI.AdaptableTabBarPlacement...) -> some SwiftUI.TabContent<Self.TabValue>
  
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func customizationID(_ id: Swift.String) -> some SwiftUI.TabContent<Self.TabValue>
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct TabCustomizationBehavior : Swift.Equatable {
  public static var automatic: SwiftUI.TabCustomizationBehavior {
    get
  }
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static var reorderable: SwiftUI.TabCustomizationBehavior {
    get
  }
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static var disabled: SwiftUI.TabCustomizationBehavior {
    get
  }
  public static func == (a: SwiftUI.TabCustomizationBehavior, b: SwiftUI.TabCustomizationBehavior) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.TabCustomizationBehavior : Swift.Sendable {
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol ControlWidget {
  @_Concurrency.MainActor @preconcurrency init()
  associatedtype Body : SwiftUI.ControlWidgetConfiguration
  @SwiftUI.ControlWidgetConfigurationBuilder @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func layoutDirectionBehavior(_ behavior: SwiftUICore.LayoutDirectionBehavior) -> some SwiftUICore.View {
        modifier(_LayoutDirectionBehaviorEffect(behavior: behavior))
    }
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@frozen public struct _LayoutDirectionBehaviorEffect : SwiftUICore.ViewModifier {
  public var behavior: SwiftUICore.LayoutDirectionBehavior
  @inlinable public init(behavior: SwiftUICore.LayoutDirectionBehavior) {
        self.behavior = behavior
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._LayoutDirectionBehaviorEffect>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
}
extension SwiftUICore.View {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func onScrollTargetVisibilityChange<ID>(idType: ID.Type, threshold: Swift.Double = 0.5, _ action: @escaping ([ID]) -> Swift.Void) -> some SwiftUICore.View where ID : Swift.Hashable
  
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func onScrollVisibilityChange(threshold: Swift.Double = 0.5, _ action: @escaping (Swift.Bool) -> Swift.Void) -> some SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ProgressViewStyle where Self == SwiftUI.CircularProgressViewStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var circular: SwiftUI.CircularProgressViewStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct CircularProgressViewStyle : SwiftUI.ProgressViewStyle {
  public init()
  @available(iOS, introduced: 14.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(macOS, introduced: 11.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(tvOS, introduced: 14.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  public init(tint: SwiftUICore.Color)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.CircularProgressViewStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI25CircularProgressViewStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.CircularProgressViewStyle : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Toggle<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  public init(isOn: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder label: () -> Label)
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public init<C>(sources: C, isOn: Swift.KeyPath<C.Element, SwiftUICore.Binding<Swift.Bool>>, @SwiftUICore.ViewBuilder label: () -> Label) where C : Swift.RandomAccessCollection
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI6ToggleV4bodyQrvp", 0) __<Label>
}
@available(*, unavailable)
extension SwiftUI.Toggle : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Toggle where Label == SwiftUI.ToggleStyleConfiguration.Label {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  nonisolated public init(_ configuration: SwiftUI.ToggleStyleConfiguration)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Toggle where Label == SwiftUICore.Text {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, isOn: SwiftUICore.Binding<Swift.Bool>)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, isOn: SwiftUICore.Binding<Swift.Bool>) where S : Swift.StringProtocol
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public init<C>(_ titleKey: SwiftUICore.LocalizedStringKey, sources: C, isOn: Swift.KeyPath<C.Element, SwiftUICore.Binding<Swift.Bool>>) where C : Swift.RandomAccessCollection
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_disfavoredOverload nonisolated public init<S, C>(_ title: S, sources: C, isOn: Swift.KeyPath<C.Element, SwiftUICore.Binding<Swift.Bool>>) where S : Swift.StringProtocol, C : Swift.RandomAccessCollection
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Toggle where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  @_alwaysEmitIntoClient nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, isOn: SwiftUICore.Binding<Swift.Bool>) {
        self.init(isOn: isOn) {
            SwiftUI.Label(titleKey, systemImage: systemImage)
        }
    }
  @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public init<S>(_ title: S, systemImage: Swift.String, isOn: SwiftUICore.Binding<Swift.Bool>) where S : Swift.StringProtocol {
        self.init(isOn: isOn) {
            SwiftUI.Label(title, systemImage: systemImage)
        }
    }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_alwaysEmitIntoClient nonisolated public init<C>(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, sources: C, isOn: Swift.KeyPath<C.Element, SwiftUICore.Binding<Swift.Bool>>) where C : Swift.RandomAccessCollection {
        self.init(sources: sources, isOn: isOn) {
            SwiftUI.Label(titleKey, systemImage: systemImage)
        }
    }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public init<S, C>(_ title: S, systemImage: Swift.String, sources: C, isOn: Swift.KeyPath<C.Element, SwiftUICore.Binding<Swift.Bool>>) where S : Swift.StringProtocol, C : Swift.RandomAccessCollection {
        self.init(sources: sources, isOn: isOn) {
            SwiftUI.Label(title, systemImage: systemImage)
        }
    }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Toggle where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: DeveloperToolsSupport.ImageResource, isOn: SwiftUICore.Binding<Swift.Bool>)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, image: DeveloperToolsSupport.ImageResource, isOn: SwiftUICore.Binding<Swift.Bool>) where S : Swift.StringProtocol
  nonisolated public init<C>(_ titleKey: SwiftUICore.LocalizedStringKey, image: DeveloperToolsSupport.ImageResource, sources: C, isOn: Swift.KeyPath<C.Element, SwiftUICore.Binding<Swift.Bool>>) where C : Swift.RandomAccessCollection
  @_disfavoredOverload nonisolated public init<S, C>(_ title: S, image: DeveloperToolsSupport.ImageResource, sources: C, isOn: Swift.KeyPath<C.Element, SwiftUICore.Binding<Swift.Bool>>) where S : Swift.StringProtocol, C : Swift.RandomAccessCollection
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumn where Sort == Foundation.KeyPathComparator<RowValue>, Label == SwiftUICore.Text {
  public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, V>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where V : Swift.Comparable
  @_disfavoredOverload public init<S, V>(_ title: S, value: Swift.KeyPath<RowValue, V>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol, V : Swift.Comparable
  @available(iOS 16.6, macOS 13.5, *)
  public init<V>(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, V>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where V : Swift.Comparable
  public init<V, C>(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, V>, comparator: C, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where V == C.Compared, C : Foundation.SortComparator
  @_disfavoredOverload public init<S, V, C>(_ title: S, value: Swift.KeyPath<RowValue, V>, comparator: C, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol, V == C.Compared, C : Foundation.SortComparator
  @available(iOS 16.6, macOS 13.5, *)
  public init<V, C>(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, V>, comparator: C, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where V == C.Compared, C : Foundation.SortComparator
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.String>, comparator: Swift.String.StandardComparator = .localizedStandard) where Content == SwiftUICore.Text
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.String>, comparator: Swift.String.StandardComparator = .localizedStandard) where Content == SwiftUICore.Text, S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.String>, comparator: Swift.String.StandardComparator = .localizedStandard) where Content == SwiftUICore.Text
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func task(priority: _Concurrency.TaskPriority = .userInitiated, @_inheritActorContext _ action: @escaping @Sendable () async -> Swift.Void) -> some SwiftUICore.View {
        modifier(_TaskModifier(priority: priority, action: action))
    }
  
  @inlinable nonisolated public func task<T>(id value: T, priority: _Concurrency.TaskPriority = .userInitiated, @_inheritActorContext _ action: @escaping @Sendable () async -> Swift.Void) -> some SwiftUICore.View where T : Swift.Equatable {
        modifier(_TaskValueModifier(
            value: value, priority: priority, action: action))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen public struct _TaskModifier : SwiftUICore.ViewModifier {
  nonisolated(unsafe) public var action: @Sendable () async -> Swift.Void
  public var priority: _Concurrency.TaskPriority
  @inlinable public init(priority: _Concurrency.TaskPriority, action: @escaping @Sendable () async -> Swift.Void) {
        self.priority = priority
        self.action = action
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._TaskModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUI._TaskModifier>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen public struct _TaskValueModifier<Value> : SwiftUICore.ViewModifier where Value : Swift.Equatable {
  nonisolated(unsafe) public var action: @Sendable () async -> Swift.Void
  public var priority: _Concurrency.TaskPriority
  public var value: Value
  @inlinable public init(value: Value, priority: _Concurrency.TaskPriority, action: @escaping @Sendable () async -> Swift.Void) {
        self.action = action
        self.priority = priority
        self.value = value
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._TaskValueModifier<Value>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUI._TaskValueModifier<Value>>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._TaskValueModifier : Swift.Sendable {
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "RotateGesture")
@available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "RotateGesture")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "RotateGesture")
public struct RotationGesture : SwiftUICore.Gesture {
  public var minimumAngleDelta: SwiftUICore.Angle
  public init(minimumAngleDelta: SwiftUICore.Angle = .degrees(1))
  nonisolated public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUI.RotationGesture>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<SwiftUI.RotationGesture.Value>
  public typealias Value = SwiftUICore.Angle
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "RotateGesture")
  @available(tvOS, unavailable, renamed: "RotateGesture")
  @available(watchOS, unavailable, renamed: "RotateGesture")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "RotateGesture")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "RotateGesture")
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.RotationGesture : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct RotateGesture : SwiftUICore.Gesture {
  public struct Value : Swift.Equatable, Swift.Sendable {
    public var time: Foundation.Date
    public var rotation: SwiftUICore.Angle
    public var velocity: SwiftUICore.Angle
    public var startAnchor: SwiftUICore.UnitPoint
    public var startLocation: CoreFoundation.CGPoint
    public static func == (a: SwiftUI.RotateGesture.Value, b: SwiftUI.RotateGesture.Value) -> Swift.Bool
  }
  public var minimumAngleDelta: SwiftUICore.Angle
  public init(minimumAngleDelta: SwiftUICore.Angle = .degrees(1))
  nonisolated public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUI.RotateGesture>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<SwiftUI.RotateGesture.Value>
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.RotateGesture : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct TextField<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI9TextFieldV4bodyQrvp", 0) __<Label>
}
@available(*, unavailable)
extension SwiftUI.TextField : Swift.Sendable {
}
extension SwiftUI.TextField where Label == SwiftUICore.Text {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, text: SwiftUICore.Binding<Swift.String>, axis: SwiftUICore.Axis)
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, text: SwiftUICore.Binding<Swift.String>, prompt: SwiftUICore.Text?, axis: SwiftUICore.Axis)
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, text: SwiftUICore.Binding<Swift.String>, axis: SwiftUICore.Axis) where S : Swift.StringProtocol
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, text: SwiftUICore.Binding<Swift.String>, prompt: SwiftUICore.Text?, axis: SwiftUICore.Axis) where S : Swift.StringProtocol
}
extension SwiftUI.TextField {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public init(text: SwiftUICore.Binding<Swift.String>, prompt: SwiftUICore.Text? = nil, axis: SwiftUICore.Axis, @SwiftUICore.ViewBuilder label: () -> Label)
}
extension SwiftUI.TextField where Label == SwiftUICore.Text {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, text: SwiftUICore.Binding<Swift.String>, prompt: SwiftUICore.Text?)
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, text: SwiftUICore.Binding<Swift.String>, prompt: SwiftUICore.Text?) where S : Swift.StringProtocol
}
extension SwiftUI.TextField {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public init(text: SwiftUICore.Binding<Swift.String>, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder label: () -> Label)
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TextField where Label == SwiftUICore.Text {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, text: SwiftUICore.Binding<Swift.String>, selection: SwiftUICore.Binding<SwiftUI.TextSelection?>, prompt: SwiftUICore.Text? = nil, axis: SwiftUICore.Axis? = nil)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, text: SwiftUICore.Binding<Swift.String>, selection: SwiftUICore.Binding<SwiftUI.TextSelection?>, prompt: SwiftUICore.Text? = nil, axis: SwiftUICore.Axis? = nil) where S : Swift.StringProtocol
}
extension SwiftUI.TextField where Label == SwiftUICore.Text {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @_alwaysEmitIntoClient nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, text: SwiftUICore.Binding<Swift.String>) {
        self.init(
            titleKey, text: text, onEditingChanged: { _ in }, onCommit: {})
    }
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<S>(_ title: S, text: SwiftUICore.Binding<Swift.String>) where S : Swift.StringProtocol {
        self.init(
            title, text: text, onEditingChanged: { _ in }, onCommit: {})
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.TextField where Label == SwiftUICore.Text {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, text: SwiftUICore.Binding<Swift.String>, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void, onCommit: @escaping () -> Swift.Void)
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @_alwaysEmitIntoClient nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, text: SwiftUICore.Binding<Swift.String>, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void) {
        self.init(
            titleKey, text: text,
            onEditingChanged: onEditingChanged, onCommit: {})
    }
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @_alwaysEmitIntoClient nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, text: SwiftUICore.Binding<Swift.String>, onCommit: @escaping () -> Swift.Void) {
        self.init(
            titleKey, text: text,
            onEditingChanged: { _ in }, onCommit: onCommit)
    }
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @_disfavoredOverload nonisolated public init<S>(_ title: S, text: SwiftUICore.Binding<Swift.String>, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void, onCommit: @escaping () -> Swift.Void) where S : Swift.StringProtocol
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<S>(_ title: S, text: SwiftUICore.Binding<Swift.String>, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void) where S : Swift.StringProtocol {
        self.init(
            title, text: text,
            onEditingChanged: onEditingChanged, onCommit: {})
    }
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<S>(_ title: S, text: SwiftUICore.Binding<Swift.String>, onCommit: @escaping () -> Swift.Void) where S : Swift.StringProtocol {
        self.init(
            title, text: text,
            onEditingChanged: { _ in }, onCommit: onCommit)
    }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@usableFromInline
internal struct IsLinkedGroupTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @available(watchOS 6.0, *)
  @usableFromInline
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @available(macOS, unavailable)
  internal typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.IsLinkedGroupTraitKey : Swift.Sendable {
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @inlinable @_Concurrency.MainActor @preconcurrency public func _listLinkedGroup(_ isLinked: Swift.Bool) -> some SwiftUICore.View {
        return _trait(IsLinkedGroupTraitKey.self, isLinked)
    }
  
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct _IsLinkedGroupTraitKey {
  public static let _linkedGroup: SwiftUI._IsLinkedGroupTraitKey
}
@available(*, unavailable)
extension SwiftUI._IsLinkedGroupTraitKey : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct SpringLoadingBehavior : Swift.Hashable, Swift.Sendable {
  public static let automatic: SwiftUI.SpringLoadingBehavior
  public static let enabled: SwiftUI.SpringLoadingBehavior
  public static let disabled: SwiftUI.SpringLoadingBehavior
  public static func == (a: SwiftUI.SpringLoadingBehavior, b: SwiftUI.SpringLoadingBehavior) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  nonisolated public func springLoadingBehavior(_ behavior: SwiftUI.SpringLoadingBehavior) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.EnvironmentValues {
  public var springLoadingBehavior: SwiftUI.SpringLoadingBehavior {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct __DesignTimeSelectionIdentifier : Swift.Hashable {
  public let identifier: Swift.String
  public init(_ identifier: Swift.String)
  public static func == (a: SwiftUI.__DesignTimeSelectionIdentifier, b: SwiftUI.__DesignTimeSelectionIdentifier) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.__DesignTimeSelectionIdentifier : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.EnvironmentValues {
  public var isTabBarShowingSections: Swift.Bool {
    get
  }
  public var tabBarPlacement: SwiftUI.TabBarPlacement? {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct TabBarPlacement : Swift.Hashable {
  public static let topBar: SwiftUI.TabBarPlacement
  public static let sidebar: SwiftUI.TabBarPlacement
  public static let bottomBar: SwiftUI.TabBarPlacement
  public static let ornament: SwiftUI.TabBarPlacement
  public static let pageIndicator: SwiftUI.TabBarPlacement
  public static func == (a: SwiftUI.TabBarPlacement, b: SwiftUI.TabBarPlacement) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.TabBarPlacement : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ViewTest {
  public typealias Touch = (location: CoreFoundation.CGPoint, globalLocation: CoreFoundation.CGPoint?, timestamp: Foundation.Date)
  public func sendTouchSequence(_ touches: [Self.Touch])
  public func measureTouchSequence(host: any SwiftUICore._BenchmarkHost, _ touches: [Self.Touch]) -> [Swift.Double]
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public enum ScenePhase : Swift.Comparable {
  case background
  case inactive
  case active
  public static func < (a: SwiftUI.ScenePhase, b: SwiftUI.ScenePhase) -> Swift.Bool
  public static func == (a: SwiftUI.ScenePhase, b: SwiftUI.ScenePhase) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ScenePhase : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.EnvironmentValues {
  public var scenePhase: SwiftUI.ScenePhase {
    get
    set
  }
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.PickerStyle where Self == SwiftUI.RadioGroupPickerStyle {
  @_alwaysEmitIntoClient public static var radioGroup: SwiftUI.RadioGroupPickerStyle {
    get { .init() }
  }
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct RadioGroupPickerStyle : SwiftUI.PickerStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.RadioGroupPickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.RadioGroupPickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.RadioGroupPickerStyle : Swift.Sendable {
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func horizontalRadioGroupLayout() -> some SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.ImageRenderer {
  @_Concurrency.MainActor final public var uiImage: UIKit.UIImage? {
    get
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ListStyle where Self == SwiftUI.InsetListStyle {
  @_alwaysEmitIntoClient public static var inset: SwiftUI.InsetListStyle {
    get { .init() }
  }
  @available(iOS, unavailable)
  @available(macOS, introduced: 12.0, deprecated: 100000.0, message: "Use the `.inset` style with the `.alternatingRowBackgrounds()` view modifier")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_alwaysEmitIntoClient public static func inset(alternatesRowBackgrounds: Swift.Bool) -> SwiftUI.InsetListStyle {
        .init(alternatesRowBackgrounds: alternatesRowBackgrounds)
    }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct InsetListStyle : SwiftUI.ListStyle {
  public init()
  @available(iOS, unavailable)
  @available(macOS, introduced: 12.0, deprecated: 100000.0, message: "Use the `.inset` style with the `.alternatingRowBackgrounds()` view modifier")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public init(alternatesRowBackgrounds: Swift.Bool)
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.InsetListStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.InsetListStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.InsetListStyle : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.EnvironmentValues {
  public var defaultMinListRowHeight: CoreFoundation.CGFloat {
    get
    set
  }
  public var defaultMinListHeaderHeight: CoreFoundation.CGFloat? {
    get
    set
  }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  public var _plainListSectionSpacing: CoreFoundation.CGFloat? {
    get
    set
  }
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func defaultPosition(_ position: SwiftUICore.UnitPoint) -> some SwiftUI.Scene
  
}
@available(iOS 17.0, macOS 13.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func defaultSize(_ size: CoreFoundation.CGSize) -> some SwiftUI.Scene
  
  nonisolated public func defaultSize(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat) -> some SwiftUI.Scene
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public static func _printChanges()
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public static func _printChanges()
}
@available(iOS 17.1, macOS 14.1, tvOS 17.1, watchOS 10.1, *)
extension SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public static func _logChanges()
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.PrimitiveButtonStyle where Self == SwiftUI.LinkButtonStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var link: SwiftUI.LinkButtonStyle {
    get { .init() }
  }
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct LinkButtonStyle : SwiftUI.PrimitiveButtonStyle {
  public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.LinkButtonStyle.Configuration) -> some SwiftUICore.View
  
  @available(macOS 10.15, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15LinkButtonStyleV8makeBody13configurationQrAA09PrimitivedE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.LinkButtonStyle : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func searchable(text: SwiftUICore.Binding<Swift.String>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil) -> some SwiftUICore.View
  
  nonisolated public func searchable(text: SwiftUICore.Binding<Swift.String>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.LocalizedStringKey) -> some SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func searchable<S>(text: SwiftUICore.Binding<Swift.String>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: S) -> some SwiftUICore.View where S : Swift.StringProtocol
  
}
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable(text: SwiftUICore.Binding<Swift.String>, isPresented: SwiftUICore.Binding<Swift.Bool>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil) -> some SwiftUICore.View
  
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable(text: SwiftUICore.Binding<Swift.String>, isPresented: SwiftUICore.Binding<Swift.Bool>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.LocalizedStringKey) -> some SwiftUICore.View
  
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload nonisolated public func searchable<S>(text: SwiftUICore.Binding<Swift.String>, isPresented: SwiftUICore.Binding<Swift.Bool>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: S) -> some SwiftUICore.View where S : Swift.StringProtocol
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.ForEach {
  public init<C, R>(_ data: SwiftUICore.Binding<C>, editActions: SwiftUI.EditActions<C>, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<C.Element>) -> R) where Data == SwiftUI.IndexedIdentifierCollection<C, ID>, ID == C.Element.ID, Content == SwiftUI.EditableCollectionContent<R, C>, C : Swift.MutableCollection, C : Swift.RandomAccessCollection, R : SwiftUICore.View, C.Element : Swift.Identifiable, C.Index : Swift.Hashable
  public init<C, R>(_ data: SwiftUICore.Binding<C>, id: Swift.KeyPath<C.Element, ID>, editActions: SwiftUI.EditActions<C>, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<C.Element>) -> R) where Data == SwiftUI.IndexedIdentifierCollection<C, ID>, Content == SwiftUI.EditableCollectionContent<R, C>, C : Swift.MutableCollection, C : Swift.RandomAccessCollection, R : SwiftUICore.View, C.Index : Swift.Hashable
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct EditActions<Data> : Swift.OptionSet, Swift.Sendable {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  @available(*, unavailable, message: "Delete is available only for collections conforming to RangeReplaceableCollection.")
  public static var delete: SwiftUI.EditActions<Data> {
    get
  }
  @available(*, unavailable, message: "Move is available only for collections conforming to MutableCollection.")
  public static var move: SwiftUI.EditActions<Data> {
    get
  }
  public static var all: SwiftUI.EditActions<Data> {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ArrayLiteralElement = SwiftUI.EditActions<Data>
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Element = SwiftUI.EditActions<Data>
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias RawValue = Swift.Int
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.EditActions where Data : Swift.RangeReplaceableCollection {
  public static var delete: SwiftUI.EditActions<Data> {
    get
  }
  public static var all: SwiftUI.EditActions<Data> {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.EditActions where Data : Swift.MutableCollection {
  public static var move: SwiftUI.EditActions<Data> {
    get
  }
  public static var all: SwiftUI.EditActions<Data> {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.EditActions where Data : Swift.MutableCollection, Data : Swift.RangeReplaceableCollection {
  public static var all: SwiftUI.EditActions<Data> {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct EditableCollectionContent<Content, Data> {
}
@available(*, unavailable)
extension SwiftUI.EditableCollectionContent : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.EditableCollectionContent : SwiftUICore.View where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI25EditableCollectionContentVA2A4ViewRzrlE4bodyQrvp", 0) __<Content, Data>
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct IndexedIdentifierCollection<Base, ID> : Swift.Collection where Base : Swift.Collection, ID : Swift.Hashable {
  public struct Element {
  }
  public typealias Index = Base.Index
  public var startIndex: SwiftUI.IndexedIdentifierCollection<Base, ID>.Index {
    get
  }
  public var endIndex: SwiftUI.IndexedIdentifierCollection<Base, ID>.Index {
    get
  }
  public subscript(position: SwiftUI.IndexedIdentifierCollection<Base, ID>.Index) -> SwiftUI.IndexedIdentifierCollection<Base, ID>.Element {
    get
  }
  public func index(after i: SwiftUI.IndexedIdentifierCollection<Base, ID>.Index) -> SwiftUI.IndexedIdentifierCollection<Base, ID>.Index
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Indices = Swift.DefaultIndices<SwiftUI.IndexedIdentifierCollection<Base, ID>>
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Iterator = Swift.IndexingIterator<SwiftUI.IndexedIdentifierCollection<Base, ID>>
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias SubSequence = Swift.Slice<SwiftUI.IndexedIdentifierCollection<Base, ID>>
}
@available(*, unavailable)
extension SwiftUI.IndexedIdentifierCollection.Element : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.IndexedIdentifierCollection : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.IndexedIdentifierCollection : Swift.BidirectionalCollection where Base : Swift.BidirectionalCollection {
  public func index(before i: SwiftUI.IndexedIdentifierCollection<Base, ID>.Index) -> SwiftUI.IndexedIdentifierCollection<Base, ID>.Index
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.IndexedIdentifierCollection : Swift.RandomAccessCollection where Base : Swift.RandomAccessCollection {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@frozen @preconcurrency public struct _GeometryActionModifier<Value> where Value : Swift.Equatable, Value : Swift.Sendable {
  @preconcurrency public var value: @Sendable (SwiftUICore.GeometryProxy) -> Value
  public var action: (Value) -> Swift.Void
  @preconcurrency @inlinable public init(value: @escaping @Sendable (SwiftUICore.GeometryProxy) -> Value, action: @escaping (Value) -> Swift.Void) {
        self.value = value
        self.action = action
    }
  @_silgen_name("$s7SwiftUI23_GeometryActionModifierV5valueyxAA0C5ProxyVYbcvi")
  @usableFromInline
  internal mutating func valueInitAccessorABIShim(value: @escaping @Sendable (SwiftUICore.GeometryProxy) -> Value)
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._GeometryActionModifier<Value>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._GeometryActionModifier : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 10.0, *)
@frozen @preconcurrency public struct _GeometryActionModifier2<Value> where Value : Swift.Equatable, Value : Swift.Sendable {
  private var _value: @Sendable (SwiftUICore.GeometryProxy) -> Value
  public var value: @Sendable (SwiftUICore.GeometryProxy) -> Value {
    @usableFromInline
    @storageRestrictions(initializes: _value) init(initialValue)
    @_silgen_name("$s7SwiftUI24_GeometryActionModifier2V5valueyxAA0C5ProxyVcvg")
    get
    @_silgen_name("$s7SwiftUI24_GeometryActionModifier2V5valueyxAA0C5ProxyVcvs")
    set
    @_silgen_name("$s7SwiftUI24_GeometryActionModifier2V5valueyxAA0C5ProxyVcvM")
    _modify
  }
  public var action: (Value, Value) -> Swift.Void
  @preconcurrency @inlinable public init(value: @escaping @Sendable (SwiftUICore.GeometryProxy) -> Value, action: @escaping (Value, Value) -> Swift.Void) {
        self.value = value
        self.action = action
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._GeometryActionModifier2<Value>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 18.0, tvOS 18.0, watchOS 10.0, macOS 15.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._GeometryActionModifier2 : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_alwaysEmitIntoClient @preconcurrency nonisolated public func onGeometryChange<T>(for type: T.Type, of transform: @escaping @Sendable (SwiftUICore.GeometryProxy) -> T, action: @escaping (_ newValue: T) -> Swift.Void) -> some SwiftUICore.View where T : Swift.Equatable, T : Swift.Sendable {
        modifier(_GeometryActionModifier<T>(value: transform, action: action))
    }
  
}
extension SwiftUICore.View {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 10.0, *)
  @preconcurrency nonisolated public func onGeometryChange<T>(for type: T.Type, of transform: @escaping @Sendable (SwiftUICore.GeometryProxy) -> T, action: @escaping (_ oldValue: T, _ newValue: T) -> Swift.Void) -> some SwiftUICore.View where T : Swift.Equatable, T : Swift.Sendable
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct FileDocumentWriteConfiguration {
  public let contentType: UniformTypeIdentifiers.UTType
  public let existingFile: Foundation.FileWrapper?
}
@available(*, unavailable)
extension SwiftUI.FileDocumentWriteConfiguration : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct FileDocumentReadConfiguration {
  public let contentType: UniformTypeIdentifiers.UTType
  public let file: Foundation.FileWrapper
}
@available(*, unavailable)
extension SwiftUI.FileDocumentReadConfiguration : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchFocused(_ binding: SwiftUI.FocusState<Swift.Bool>.Binding) -> some SwiftUICore.View
  
  @available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchFocused<V>(_ binding: SwiftUI.FocusState<V>.Binding, equals value: V) -> some SwiftUICore.View where V : Swift.Hashable
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@preconcurrency @_Concurrency.MainActor public protocol NavigationSplitViewStyle {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.NavigationSplitViewStyleConfiguration
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct NavigationSplitViewStyleConfiguration {
}
@available(*, unavailable)
extension SwiftUI.NavigationSplitViewStyleConfiguration : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func navigationSplitViewStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.NavigationSplitViewStyle
  
}
extension SwiftUICore.View {
  @available(macOS 15.4, iOS 18.4, tvOS 18.4, watchOS 11.4, visionOS 2.4, *)
  @_Concurrency.MainActor @preconcurrency public func writingToolsAffordanceVisibility(_ visibility: SwiftUICore.Visibility) -> some SwiftUICore.View
  
}
@available(macOS 11.0, visionOS 1.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.WindowStyle where Self == SwiftUI.DefaultWindowStyle {
  @_alwaysEmitIntoClient public static var automatic: SwiftUI.DefaultWindowStyle {
    get { .init() }
  }
}
@available(macOS 11.0, visionOS 1.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DefaultWindowStyle : SwiftUI.WindowStyle {
  public typealias _Body = Swift.Never
  public init()
}
@available(*, unavailable)
extension SwiftUI.DefaultWindowStyle : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, *)
@available(watchOS, unavailable)
extension SwiftUI.TabContent {
  nonisolated public func sectionActions<Content>(@SwiftUICore.ViewBuilder content: () -> Content) -> some SwiftUI.TabContent<Self.TabValue> where Content : SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _AllowsHitTestingModifier : Swift.Equatable {
  public var allowsHitTesting: Swift.Bool
  @inlinable public init(allowsHitTesting: Swift.Bool) {
        self.allowsHitTesting = allowsHitTesting
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._AllowsHitTestingModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  public static func == (a: SwiftUI._AllowsHitTestingModifier, b: SwiftUI._AllowsHitTestingModifier) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func allowsHitTesting(_ enabled: Swift.Bool) -> some SwiftUICore.View {
        return modifier(_AllowsHitTestingModifier(allowsHitTesting: enabled))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct LazyVStack<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  public init(alignment: SwiftUICore.HorizontalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, pinnedViews: SwiftUICore.PinnedScrollableViews = .init(), @SwiftUICore.ViewBuilder content: () -> Content)
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI.LazyVStack<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.LazyVStack : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct LazyHStack<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  public init(alignment: SwiftUICore.VerticalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, pinnedViews: SwiftUICore.PinnedScrollableViews = .init(), @SwiftUICore.ViewBuilder content: () -> Content)
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI.LazyHStack<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.LazyHStack : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.ShapeStyle where Self == SwiftUI.LinkShapeStyle {
  @_alwaysEmitIntoClient public static var link: SwiftUI.LinkShapeStyle {
    get { .init() }
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@frozen public struct LinkShapeStyle : SwiftUICore.ShapeStyle {
  public init()
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func contentShape<S>(_ kind: SwiftUICore.ContentShapeKinds, _ shape: S, eoFill: Swift.Bool = false) -> some SwiftUICore.View where S : SwiftUICore.Shape {
        modifier(
            _ContentShapeKindModifier(shape: shape, eoFill: eoFill, kind: kind))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen public struct _ContentShapeKindModifier<ContentShape> : SwiftUICore.ViewModifier where ContentShape : SwiftUICore.Shape {
  public var shape: ContentShape
  public var eoFill: Swift.Bool
  public var kind: SwiftUICore.ContentShapeKinds
  @inlinable public init(shape: ContentShape, eoFill: Swift.Bool = false, kind: SwiftUICore.ContentShapeKinds) {
        self.shape = shape
        self.eoFill = eoFill
        self.kind = kind
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._ContentShapeKindModifier<ContentShape>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._ContentShapeKindModifier : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct NavigationPath {
  public var count: Swift.Int {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public var codable: SwiftUI.NavigationPath.CodableRepresentation? {
    get
  }
  public init()
  public init<S>(_ elements: S) where S : Swift.Sequence, S.Element : Swift.Hashable
  public init<S>(_ elements: S) where S : Swift.Sequence, S.Element : Swift.Decodable, S.Element : Swift.Encodable, S.Element : Swift.Hashable
  public init(_ codable: SwiftUI.NavigationPath.CodableRepresentation)
  public mutating func append<V>(_ value: V) where V : Swift.Hashable
  public mutating func append<V>(_ value: V) where V : Swift.Decodable, V : Swift.Encodable, V : Swift.Hashable
  public mutating func removeLast(_ k: Swift.Int = 1)
  public struct CodableRepresentation : Swift.Codable {
    public init(from decoder: any Swift.Decoder) throws
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
@available(*, unavailable)
extension SwiftUI.NavigationPath : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.NavigationPath.CodableRepresentation : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.NavigationPath : Swift.Equatable {
  public static func == (lhs: SwiftUI.NavigationPath, rhs: SwiftUI.NavigationPath) -> Swift.Bool
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.NavigationPath.CodableRepresentation : Swift.Equatable {
  public static func == (lhs: SwiftUI.NavigationPath.CodableRepresentation, rhs: SwiftUI.NavigationPath.CodableRepresentation) -> Swift.Bool
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public func withAnimation<Result>(_ animation: SwiftUICore.Animation? = .default, completionCriteria: SwiftUI.AnimationCompletionCriteria = .logicallyComplete, _ body: () throws -> Result, completion: @escaping () -> Swift.Void) rethrows -> Result
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.Transaction {
  public mutating func addAnimationCompletion(criteria: SwiftUI.AnimationCompletionCriteria = .logicallyComplete, _ completion: @escaping () -> Swift.Void)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct AnimationCompletionCriteria : Swift.Hashable, Swift.Sendable {
  public static let logicallyComplete: SwiftUI.AnimationCompletionCriteria
  public static let removed: SwiftUI.AnimationCompletionCriteria
  public static func == (a: SwiftUI.AnimationCompletionCriteria, b: SwiftUI.AnimationCompletionCriteria) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  nonisolated public func scrollTransition(_ configuration: SwiftUI.ScrollTransitionConfiguration = .interactive, axis: SwiftUICore.Axis? = nil, transition: @escaping @Sendable (SwiftUICore.EmptyVisualEffect, SwiftUI.ScrollTransitionPhase) -> some VisualEffect) -> some SwiftUICore.View
  
  nonisolated public func scrollTransition(topLeading: SwiftUI.ScrollTransitionConfiguration, bottomTrailing: SwiftUI.ScrollTransitionConfiguration, axis: SwiftUICore.Axis? = nil, transition: @escaping @Sendable (SwiftUICore.EmptyVisualEffect, SwiftUI.ScrollTransitionPhase) -> some VisualEffect) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct ScrollTransitionConfiguration {
  public static func animated(_ animation: SwiftUICore.Animation = .default) -> SwiftUI.ScrollTransitionConfiguration
  public static let animated: SwiftUI.ScrollTransitionConfiguration
  public static func interactive(timingCurve: SwiftUICore.UnitCurve = .easeInOut) -> SwiftUI.ScrollTransitionConfiguration
  public static let interactive: SwiftUI.ScrollTransitionConfiguration
  public static let identity: SwiftUI.ScrollTransitionConfiguration
  public func animation(_ animation: SwiftUICore.Animation) -> SwiftUI.ScrollTransitionConfiguration
  public func threshold(_ threshold: SwiftUI.ScrollTransitionConfiguration.Threshold) -> SwiftUI.ScrollTransitionConfiguration
}
@available(*, unavailable)
extension SwiftUI.ScrollTransitionConfiguration : Swift.Sendable {
}
extension SwiftUI.ScrollTransitionConfiguration {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public struct Threshold {
    public static let visible: SwiftUI.ScrollTransitionConfiguration.Threshold
    public static let hidden: SwiftUI.ScrollTransitionConfiguration.Threshold
    public static var centered: SwiftUI.ScrollTransitionConfiguration.Threshold {
      get
    }
    public static func visible(_ amount: Swift.Double) -> SwiftUI.ScrollTransitionConfiguration.Threshold
    public func interpolated(towards other: SwiftUI.ScrollTransitionConfiguration.Threshold, amount: Swift.Double) -> SwiftUI.ScrollTransitionConfiguration.Threshold
    public func inset(by distance: Swift.Double) -> SwiftUI.ScrollTransitionConfiguration.Threshold
  }
}
@available(*, unavailable)
extension SwiftUI.ScrollTransitionConfiguration.Threshold : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@frozen public enum ScrollTransitionPhase {
  case topLeading
  case identity
  case bottomTrailing
  public var isIdentity: Swift.Bool {
    get
  }
  public var value: Swift.Double {
    get
  }
  public static func == (a: SwiftUI.ScrollTransitionPhase, b: SwiftUI.ScrollTransitionPhase) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.ScrollTransitionPhase : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct ToolbarItemPlacement {
  public static let automatic: SwiftUI.ToolbarItemPlacement
  @available(watchOS, unavailable)
  public static let principal: SwiftUI.ToolbarItemPlacement
  @available(watchOS, unavailable)
  public static let navigation: SwiftUI.ToolbarItemPlacement
  public static let primaryAction: SwiftUI.ToolbarItemPlacement
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let secondaryAction: SwiftUI.ToolbarItemPlacement
  @available(tvOS 18.0, *)
  @available(watchOS, unavailable)
  public static let status: SwiftUI.ToolbarItemPlacement
  public static let confirmationAction: SwiftUI.ToolbarItemPlacement
  public static let cancellationAction: SwiftUI.ToolbarItemPlacement
  public static let destructiveAction: SwiftUI.ToolbarItemPlacement
  @available(iOS 15.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static let keyboard: SwiftUI.ToolbarItemPlacement
  @available(iOS 14.0, tvOS 14.0, watchOS 10.0, *)
  @backDeployed(before: iOS 17.0, tvOS 17.0)
  @available(macOS, unavailable)
  public static var topBarLeading: SwiftUI.ToolbarItemPlacement {
    get {
        .navigationBarLeading
    }
  }
  @available(iOS 14.0, tvOS 14.0, watchOS 10.0, *)
  @backDeployed(before: iOS 17.0, tvOS 17.0)
  @available(macOS, unavailable)
  public static var topBarTrailing: SwiftUI.ToolbarItemPlacement {
    get {
        .navigationBarTrailing
    }
  }
  @available(macOS 13.0, *)
  @backDeployed(before: macOS 14.0)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static func accessoryBar<ID>(id: ID) -> SwiftUI.ToolbarItemPlacement where ID : Swift.Hashable
  @available(macOS 14.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @usableFromInline
  internal static func backDeployable_accessoryBar<ID>(id: ID) -> SwiftUI.ToolbarItemPlacement where ID : Swift.Hashable
  @available(iOS, introduced: 14.0, deprecated: 100000.0, message: "use topBarLeading instead")
  @available(tvOS, introduced: 14.0, deprecated: 100000.0, message: "use topBarLeading instead")
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use topBarLeading instead")
  public static let navigationBarLeading: SwiftUI.ToolbarItemPlacement
  @available(iOS, introduced: 14.0, deprecated: 100000.0, message: "use topBarTrailing instead")
  @available(tvOS, introduced: 14.0, deprecated: 100000.0, message: "use topBarTrailing instead")
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use topBarTrailing instead")
  public static let navigationBarTrailing: SwiftUI.ToolbarItemPlacement
  @available(tvOS 18.0, watchOS 10.0, *)
  @available(macOS, unavailable)
  public static let bottomBar: SwiftUI.ToolbarItemPlacement
  @available(visionOS 1.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let bottomOrnament: SwiftUI.ToolbarItemPlacement
}
@available(*, unavailable)
extension SwiftUI.ToolbarItemPlacement : Swift.Sendable {
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.ToolbarItemPlacement {
  @available(macOS, introduced: 13.0, deprecated: 14.0, renamed: "accessoryBar")
  public init<ID>(id: ID) where ID : Swift.Hashable
}
extension SwiftUICore.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use toolbar(_:) with navigationBarLeading or navigationBarTrailing placement")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use toolbar(_:) with navigationBarLeading or navigationBarTrailing placement")
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use toolbar(_:) with navigationBarLeading or navigationBarTrailing placement")
  nonisolated public func navigationBarItems<L, T>(leading: L, trailing: T) -> some SwiftUICore.View where L : SwiftUICore.View, T : SwiftUICore.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use toolbar(_:) with navigationBarLeading or navigationBarTrailing placement")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use toolbar(_:) with navigationBarLeading or navigationBarTrailing placement")
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use toolbar(_:) with navigationBarLeading or navigationBarTrailing placement")
  nonisolated public func navigationBarItems<L>(leading: L) -> some SwiftUICore.View where L : SwiftUICore.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use toolbar(_:) with navigationBarLeading or navigationBarTrailing placement")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use toolbar(_:) with navigationBarLeading or navigationBarTrailing placement")
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use toolbar(_:) with navigationBarLeading or navigationBarTrailing placement")
  nonisolated public func navigationBarItems<T>(trailing: T) -> some SwiftUICore.View where T : SwiftUICore.View
  
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct PullDownMenuBarExtraStyle : SwiftUI.MenuBarExtraStyle {
  public typealias _Body = Swift.Never
  public init()
  public func _makeMenuBarExtra(_ value: SwiftUI._MenuBarExtraValue<SwiftUI.PullDownMenuBarExtraStyle>) -> SwiftUI._MenuBarExtraValue<SwiftUI.PullDownMenuBarExtraStyle>
}
@available(*, unavailable)
extension SwiftUI.PullDownMenuBarExtraStyle : Swift.Sendable {
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.MenuBarExtraStyle where Self == SwiftUI.PullDownMenuBarExtraStyle {
  public static var menu: SwiftUI.PullDownMenuBarExtraStyle {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.LayoutSubview {
  public var containerValues: SwiftUICore.ContainerValues {
    get
  }
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 13.0, message: "Use `HierarchicalShapeStyle` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct _SystemShapeStyle : SwiftUICore.ShapeStyle {
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "Use `HierarchicalShapeStyle.primary` instead.")
  public static let primaryFill: SwiftUI._SystemShapeStyle
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "Use `HierarchicalShapeStyle.secondary` instead.")
  public static let secondaryFill: SwiftUI._SystemShapeStyle
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "Use `HierarchicalShapeStyle.tertiary` instead.")
  public static let tertiaryFill: SwiftUI._SystemShapeStyle
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "Use `HierarchicalShapeStyle.quaternary` instead.")
  public static let quaternaryFill: SwiftUI._SystemShapeStyle
  nonisolated public static func _makeView<S>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<S, SwiftUI._SystemShapeStyle>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where S : SwiftUICore.Shape
  @available(iOS, unavailable, introduced: 17.0, message: "Use `HierarchicalShapeStyle` instead.")
  @available(tvOS, unavailable, introduced: 17.0, message: "Use `HierarchicalShapeStyle` instead.")
  @available(watchOS, unavailable, introduced: 10.0, message: "Use `HierarchicalShapeStyle` instead.")
  @available(visionOS, unavailable, message: "Use `HierarchicalShapeStyle` instead.")
  @available(macOS, introduced: 14.0, deprecated: 13.0, message: "Use `HierarchicalShapeStyle` instead.")
  public typealias Resolved = Swift.Never
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TableRow<Value> : SwiftUI.TableRowContent where Value : Swift.Identifiable {
  public typealias TableRowValue = Value
  public typealias TableRowBody = Swift.Never
  public init(_ value: Value)
  nonisolated public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  nonisolated public static func _makeRows(content: SwiftUICore._GraphValue<SwiftUI.TableRow<Value>>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.TableRow : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@usableFromInline
internal struct TypeSelectEquivalentKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUICore.Text? {
    get { nil }
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  @usableFromInline
  internal typealias Value = SwiftUICore.Text?
}
@available(*, unavailable)
extension SwiftUI.TypeSelectEquivalentKey : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func typeSelectEquivalent(_ text: SwiftUICore.Text?) -> some SwiftUICore.View {
        _trait(TypeSelectEquivalentKey.self, text)
    }
  
  @_alwaysEmitIntoClient nonisolated public func typeSelectEquivalent(_ stringKey: SwiftUICore.LocalizedStringKey) -> some SwiftUICore.View {
        typeSelectEquivalent(Text(stringKey))
    }
  
  @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public func typeSelectEquivalent<S>(_ string: S) -> some SwiftUICore.View where S : Swift.StringProtocol {
        typeSelectEquivalent(Text(string))
    }
  
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct _TypeSelectEquivalentTableRowModifier : SwiftUI._TableRowContentModifier {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI._TableRowContentModifier {
    get
  }
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI37_TypeSelectEquivalentTableRowModifierV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI._TypeSelectEquivalentTableRowModifier : Swift.Sendable {
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @inlinable nonisolated public func onHover(perform action: @escaping (Swift.Bool) -> Swift.Void) -> some SwiftUICore.View {
        modifier(_HoverRegionModifier(action))
    }
  
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@frozen public struct _HoverRegionModifier : SwiftUICore.ViewModifier {
  public let callback: (Swift.Bool) -> Swift.Void
  @inlinable public init(_ callback: @escaping (Swift.Bool) -> Swift.Void) {
        self.callback = callback
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._HoverRegionModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.4, macOS 10.15, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._HoverRegionModifier : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  nonisolated public func accessibility(hidden: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  nonisolated public func accessibility(label: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  nonisolated public func accessibility(hint: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  nonisolated public func accessibility(inputLabels: [SwiftUICore.Text]) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  nonisolated public func accessibility(identifier: Swift.String) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, deprecated, introduced: 13.0)
  @available(macOS, deprecated, introduced: 10.15)
  @available(tvOS, deprecated, introduced: 13.0)
  @available(watchOS, deprecated, introduced: 6)
  @available(visionOS, introduced: 1.0, deprecated: 1.0)
  nonisolated public func accessibility(selectionIdentifier: Swift.AnyHashable) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  nonisolated public func accessibility(sortPriority: Swift.Double) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  nonisolated public func accessibility(activationPoint: CoreFoundation.CGPoint) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  nonisolated public func accessibility(activationPoint: SwiftUICore.UnitPoint) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  nonisolated public func accessibility(hidden: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  nonisolated public func accessibility(label: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  nonisolated public func accessibility(hint: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  nonisolated public func accessibility(inputLabels: [SwiftUICore.Text]) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  nonisolated public func accessibility(identifier: Swift.String) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @available(iOS, deprecated, introduced: 13.0)
  @available(macOS, deprecated, introduced: 10.15)
  @available(tvOS, deprecated, introduced: 13.0)
  @available(watchOS, deprecated, introduced: 6)
  @available(visionOS, introduced: 1.0, deprecated: 1.0)
  nonisolated public func accessibility(selectionIdentifier: Swift.AnyHashable) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  nonisolated public func accessibility(sortPriority: Swift.Double) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  nonisolated public func accessibility(activationPoint: CoreFoundation.CGPoint) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  nonisolated public func accessibility(activationPoint: SwiftUICore.UnitPoint) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_Concurrency.MainActor @preconcurrency public struct List<SelectionValue, Content> : SwiftUICore.View where SelectionValue : Swift.Hashable, Content : SwiftUICore.View {
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public init(selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder content: () -> Content)
  @available(watchOS 10.0, *)
  @_Concurrency.MainActor @preconcurrency public init(selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder content: () -> Content)
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init(selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder content: () -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI4ListV4bodyQrvp", 0) __<SelectionValue, Content>
}
@available(*, unavailable)
extension SwiftUI.List : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.List {
  @available(watchOS, unavailable)
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init<Data, RowContent>(_ data: Data, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, Data.Element.ID, RowContent>, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable {
        self.init(selection: selection) {
            ForEach(data) { item in
                rowContent(item)
            }
        }
    }
  @available(macOS 13.0, tvOS 18.0, *)
  @available(iOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init<Data, RowContent>(_ data: Data, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, Data.Element.ID, RowContent>, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public init<Data, RowContent>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init<Data, RowContent>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  @available(watchOS, unavailable)
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, ID, RowContent>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View {
        self.init(selection: selection) {
            ForEach(data, id: id) { item in
                rowContent(item)
            }
        }
    }
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, ID, RowContent>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  @available(watchOS, unavailable)
  @_semantics("swiftui.requires_constant_range") @_Concurrency.MainActor @preconcurrency public init<RowContent>(_ data: Swift.Range<Swift.Int>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Swift.Int) -> RowContent) where Content == SwiftUICore.ForEach<Swift.Range<Swift.Int>, Swift.Int, SwiftUICore.HStack<RowContent>>, RowContent : SwiftUICore.View
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_semantics("swiftui.requires_constant_range") @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init<RowContent>(_ data: Swift.Range<Swift.Int>, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder rowContent: @escaping (Swift.Int) -> RowContent) where Content == SwiftUICore.ForEach<Swift.Range<Swift.Int>, Swift.Int, SwiftUICore.HStack<RowContent>>, RowContent : SwiftUICore.View
  @available(watchOS 10.0, *)
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init<Data, RowContent>(_ data: Data, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, Data.Element.ID, RowContent>, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable {
        self.init(selection: selection) {
            ForEach(data) { item in
                rowContent(item)
            }
        }
    }
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public init<Data, RowContent>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  @available(watchOS 10.0, *)
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, ID, RowContent>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View {
        self.init(selection: selection) {
            ForEach(data, id: id) { item in
                rowContent(item)
            }
        }
    }
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  @available(watchOS, unavailable)
  @_alwaysEmitIntoClient @_semantics("swiftui.requires_constant_range") @_Concurrency.MainActor @preconcurrency public init<RowContent>(_ data: Swift.Range<Swift.Int>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Swift.Int) -> RowContent) where Content == SwiftUICore.ForEach<Swift.Range<Swift.Int>, Swift.Int, RowContent>, RowContent : SwiftUICore.View {
        self.init(selection: selection) {
            ForEach(data) { item in
                rowContent(item)
            }
        }
    }
  @available(iOS, introduced: 13.0, deprecated: 15.0)
  @available(macOS, introduced: 10.15, deprecated: 12.0)
  @available(tvOS, introduced: 13.0, deprecated: 15.0)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 1.0)
  @usableFromInline
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency internal init<Data, RowContent>(_ data: Data, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, Data.Element.ID, SwiftUICore.HStack<RowContent>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  @available(iOS, introduced: 13.0, deprecated: 15.0)
  @available(macOS, introduced: 10.15, deprecated: 12.0)
  @available(tvOS, introduced: 13.0, deprecated: 15.0)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 1.0)
  @usableFromInline
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency internal init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, ID, SwiftUICore.HStack<RowContent>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  @available(iOS, introduced: 13.0, deprecated: 15.0)
  @available(macOS, introduced: 10.15, deprecated: 12.0)
  @available(tvOS, introduced: 13.0, deprecated: 15.0)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 1.0)
  @usableFromInline
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency internal init<Data, RowContent>(_ data: Data, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, Data.Element.ID, SwiftUICore.HStack<RowContent>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  @available(iOS, introduced: 13.0, deprecated: 15.0)
  @available(macOS, introduced: 10.15, deprecated: 12.0)
  @available(tvOS, introduced: 13.0, deprecated: 15.0)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 1.0)
  @usableFromInline
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency internal init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, ID, SwiftUICore.HStack<RowContent>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  @available(iOS, introduced: 13.0, deprecated: 15.0)
  @available(macOS, introduced: 10.15, deprecated: 12.0)
  @available(tvOS, introduced: 13.0, deprecated: 15.0)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 1.0)
  @usableFromInline
  @_disfavoredOverload @_semantics("swiftui.requires_constant_range") @_Concurrency.MainActor @preconcurrency internal init<RowContent>(_ data: Swift.Range<Swift.Int>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Swift.Int) -> RowContent) where Content == SwiftUICore.ForEach<Swift.Range<Swift.Int>, Swift.Int, SwiftUICore.HStack<RowContent>>, RowContent : SwiftUICore.View
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.List where SelectionValue == Swift.Never {
  @_Concurrency.MainActor @preconcurrency public init(@SwiftUICore.ViewBuilder content: () -> Content)
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init<Data, RowContent>(_ data: Data, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, Data.Element.ID, RowContent>, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable {
        self.init {
            ForEach(data) { item in
                rowContent(item)
            }
        }
    }
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public init<Data, RowContent>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, ID, RowContent>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View {
        self.init {
            ForEach(data, id: id) { item in
                rowContent(item)
            }
        }
    }
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, children: Swift.KeyPath<Data.Element, Data?>, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  @_semantics("swiftui.requires_constant_range") @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init<RowContent>(_ data: Swift.Range<Swift.Int>, @SwiftUICore.ViewBuilder rowContent: @escaping (Swift.Int) -> RowContent) where Content == SwiftUICore.ForEach<Swift.Range<Swift.Int>, Swift.Int, RowContent>, RowContent : SwiftUICore.View {
        self.init {
            ForEach(data) { item in
                rowContent(item)
            }
        }
    }
  @available(iOS, introduced: 13.0, deprecated: 15.0)
  @available(macOS, introduced: 10.15, deprecated: 12.0)
  @available(tvOS, introduced: 13.0, deprecated: 15.0)
  @available(watchOS, introduced: 6.0, deprecated: 8.0)
  @available(visionOS, introduced: 1.0, deprecated: 1.0)
  @usableFromInline
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency internal init<Data, RowContent>(_ data: Data, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, Data.Element.ID, SwiftUICore.HStack<RowContent>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  @available(iOS, introduced: 13.0, deprecated: 15.0)
  @available(macOS, introduced: 10.15, deprecated: 12.0)
  @available(tvOS, introduced: 13.0, deprecated: 15.0)
  @available(watchOS, introduced: 6.0, deprecated: 8.0)
  @available(visionOS, introduced: 1.0, deprecated: 1.0)
  @usableFromInline
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency internal init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, ID, SwiftUICore.HStack<RowContent>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  @available(iOS, introduced: 13.0, deprecated: 15.0)
  @available(macOS, introduced: 10.15, deprecated: 12.0)
  @available(tvOS, introduced: 13.0, deprecated: 15.0)
  @available(watchOS, introduced: 6.0, deprecated: 8.0)
  @available(visionOS, introduced: 1.0, deprecated: 1.0)
  @usableFromInline
  @_semantics("swiftui.requires_constant_range") @_disfavoredOverload @_Concurrency.MainActor @preconcurrency internal init<RowContent>(_ data: Swift.Range<Swift.Int>, @SwiftUICore.ViewBuilder rowContent: @escaping (Swift.Int) -> RowContent) where Content == SwiftUICore.ForEach<Swift.Range<Swift.Int>, Swift.Int, SwiftUICore.HStack<RowContent>>, RowContent : SwiftUICore.View
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.List {
  @available(watchOS, unavailable)
  @_disfavoredOverload @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init<Data, RowContent>(_ data: SwiftUICore.Binding<Data>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<Swift.LazyMapSequence<Data.Indices, (Data.Index, Data.Element.ID)>, Data.Element.ID, RowContent>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable, Data.Index : Swift.Hashable {
        self.init(data, id: \.id, selection: selection, rowContent: rowContent)
    }
  @available(watchOS, unavailable)
  @_disfavoredOverload @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init<Data, ID, RowContent>(_ data: SwiftUICore.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<Swift.LazyMapSequence<Data.Indices, (Data.Index, ID)>, ID, RowContent>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View, Data.Index : Swift.Hashable {
        self.init(selection: selection) {
            ForEach(data, id: id) { item in
                rowContent(item)
            }
        }
    }
  @available(watchOS, unavailable)
  @_disfavoredOverload @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init<Data, RowContent>(_ data: SwiftUICore.Binding<Data>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<Swift.LazyMapSequence<Data.Indices, (Data.Index, Data.Element.ID)>, Data.Element.ID, RowContent>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable, Data.Index : Swift.Hashable {
        self.init(data, id: \.id, selection: selection, rowContent: rowContent)
    }
  @available(watchOS, unavailable)
  @_disfavoredOverload @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init<Data, ID, RowContent>(_ data: SwiftUICore.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<Swift.LazyMapSequence<Data.Indices, (Data.Index, ID)>, ID, RowContent>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View, Data.Index : Swift.Hashable {
        self.init(selection: selection) {
            ForEach(data, id: id) { item in
                rowContent(item)
            }
        }
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.List where SelectionValue == Swift.Never {
  @_disfavoredOverload @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init<Data, RowContent>(_ data: SwiftUICore.Binding<Data>, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<Swift.LazyMapSequence<Data.Indices, (Data.Index, Data.Element.ID)>, Data.Element.ID, RowContent>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable, Data.Index : Swift.Hashable {
        self.init(data, id: \.id, rowContent: rowContent)
    }
  @_disfavoredOverload @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init<Data, ID, RowContent>(_ data: SwiftUICore.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<Swift.LazyMapSequence<Data.Indices, (Data.Index, ID)>, ID, RowContent>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View, Data.Index : Swift.Hashable {
        self.init {
            ForEach(data, id: id) { item in
                rowContent(item)
            }
        }
    }
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.List {
  @_Concurrency.MainActor @preconcurrency public init<Data, RowContent>(_ data: SwiftUICore.Binding<Data>, children: Swift.WritableKeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.OutlineGroup<SwiftUICore.Binding<Data>, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init<Data, RowContent>(_ data: SwiftUICore.Binding<Data>, children: Swift.WritableKeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.OutlineGroup<SwiftUICore.Binding<Data>, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  @_Concurrency.MainActor @preconcurrency public init<Data, ID, RowContent>(_ data: SwiftUICore.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, children: Swift.WritableKeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.OutlineGroup<SwiftUICore.Binding<Data>, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init<Data, ID, RowContent>(_ data: SwiftUICore.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, children: Swift.WritableKeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.OutlineGroup<SwiftUICore.Binding<Data>, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  @_Concurrency.MainActor @preconcurrency public init<Data, RowContent>(_ data: SwiftUICore.Binding<Data>, children: Swift.WritableKeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.OutlineGroup<SwiftUICore.Binding<Data>, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  @_Concurrency.MainActor @preconcurrency public init<Data, ID, RowContent>(_ data: SwiftUICore.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, children: Swift.WritableKeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.OutlineGroup<SwiftUICore.Binding<Data>, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.List where SelectionValue == Swift.Never {
  @_Concurrency.MainActor @preconcurrency public init<Data, RowContent>(_ data: SwiftUICore.Binding<Data>, children: Swift.WritableKeyPath<Data.Element, Data?>, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.OutlineGroup<SwiftUICore.Binding<Data>, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  @_Concurrency.MainActor @preconcurrency public init<Data, ID, RowContent>(_ data: SwiftUICore.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, children: Swift.WritableKeyPath<Data.Element, Data?>, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.OutlineGroup<SwiftUICore.Binding<Data>, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
}
@available(iOS 15.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func listRowSeparator(_ visibility: SwiftUICore.Visibility, edges: SwiftUICore.VerticalEdge.Set = .all) -> some SwiftUICore.View
  
  nonisolated public func listRowSeparatorTint(_ color: SwiftUICore.Color?, edges: SwiftUICore.VerticalEdge.Set = .all) -> some SwiftUICore.View
  
}
@available(iOS 15.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func listSectionSeparator(_ visibility: SwiftUICore.Visibility, edges: SwiftUICore.VerticalEdge.Set = .all) -> some SwiftUICore.View
  
  nonisolated public func listSectionSeparatorTint(_ color: SwiftUICore.Color?, edges: SwiftUICore.VerticalEdge.Set = .all) -> some SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct ToolbarItem<ID, Content> : SwiftUI.ToolbarContent where Content : SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public static func _makeToolbar(content: SwiftUICore._GraphValue<SwiftUI.ToolbarItem<ID, Content>>, inputs: SwiftUI._ToolbarInputs) -> SwiftUI._ToolbarOutputs
  nonisolated public static func _makeContent(content: SwiftUICore._GraphValue<SwiftUI.ToolbarItem<ID, Content>>, inputs: SwiftUICore._GraphInputs, resolved: inout SwiftUI._ToolbarItemList)
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.ToolbarItem : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarItem where ID == () {
  nonisolated public init(placement: SwiftUI.ToolbarItemPlacement = .automatic, @SwiftUICore.ViewBuilder content: () -> Content)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarItem : SwiftUI.CustomizableToolbarContent where ID == Swift.String {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @_alwaysEmitIntoClient nonisolated public init(id: Swift.String, placement: SwiftUI.ToolbarItemPlacement = .automatic, @SwiftUICore.ViewBuilder content: () -> Content) {
        self.init(
            id: id, placement: placement,
            showsByDefault: true, content: content)
    }
  @available(iOS, introduced: 14.0, deprecated: 100000.0, message: "Use the CustomizableToolbarContent/defaultCustomization(_:options) modifier with a value of .hidden")
  @available(macOS, introduced: 11.0, deprecated: 100000.0, message: "Use the CustomizableToolbarContent/defaultCustomization(_:options) modifier with a value of .hidden")
  @available(tvOS, introduced: 14.0, deprecated: 100000.0, message: "Use the CustomizableToolbarContent/defaultCustomization(_:options) modifier with a value of .hidden")
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "Use the CustomizableToolbarContent/defaultCustomization(_:options) modifier with a value of .hidden")
  nonisolated public init(id: Swift.String, placement: SwiftUI.ToolbarItemPlacement = .automatic, showsByDefault: Swift.Bool, @SwiftUICore.ViewBuilder content: () -> Content)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarItem : Swift.Identifiable where ID : Swift.Hashable {
  public var id: ID {
    get
  }
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ListStyle where Self == SwiftUI.GroupedListStyle {
  @_alwaysEmitIntoClient public static var grouped: SwiftUI.GroupedListStyle {
    get { .init() }
  }
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct GroupedListStyle : SwiftUI.ListStyle {
  public init()
  @available(iOS, deprecated: 16.0, message: "Use listPadding instead.")
  @available(visionOS, deprecated: 1.0, message: "Use listPadding instead.")
  public static func _sectionInset(_ sectionInset: SwiftUICore.EdgeInsets) -> SwiftUI.GroupedListStyle
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.GroupedListStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.GroupedListStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.GroupedListStyle : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilitySortPriority(_ sortPriority: Swift.Double) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilitySortPriority(_ sortPriority: Swift.Double) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(macOS 15.0, visionOS 2.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct WindowLayoutRoot {
  public func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
}
@available(*, unavailable)
extension SwiftUI.WindowLayoutRoot : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityScrollAction(_ handler: @escaping (SwiftUICore.Edge) -> Swift.Void) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityScrollAction(_ handler: @escaping (SwiftUICore.Edge) -> Swift.Void) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func fileDialogDefaultDirectory(_ defaultDirectory: Foundation.URL?) -> some SwiftUICore.View
  
  nonisolated public func fileDialogCustomizationID(_ id: Swift.String) -> some SwiftUICore.View
  
  nonisolated public func fileDialogMessage(_ message: SwiftUICore.Text?) -> some SwiftUICore.View
  
  nonisolated public func fileDialogMessage(_ messageKey: SwiftUICore.LocalizedStringKey) -> some SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func fileDialogMessage<S>(_ message: S) -> some SwiftUICore.View where S : Swift.StringProtocol
  
  @_disfavoredOverload nonisolated public func fileDialogConfirmationLabel<S>(_ label: S) -> some SwiftUICore.View where S : Swift.StringProtocol
  
  nonisolated public func fileDialogConfirmationLabel(_ label: SwiftUICore.Text?) -> some SwiftUICore.View
  
  nonisolated public func fileDialogConfirmationLabel(_ labelKey: SwiftUICore.LocalizedStringKey) -> some SwiftUICore.View
  
  nonisolated public func fileExporterFilenameLabel(_ label: SwiftUICore.Text?) -> some SwiftUICore.View
  
  nonisolated public func fileExporterFilenameLabel(_ labelKey: SwiftUICore.LocalizedStringKey) -> some SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func fileExporterFilenameLabel<S>(_ label: S) -> some SwiftUICore.View where S : Swift.StringProtocol
  
  nonisolated public func fileDialogURLEnabled(_ predicate: Foundation.Predicate<Foundation.URL>) -> some SwiftUICore.View
  
  nonisolated public func fileDialogImportsUnresolvedAliases(_ imports: Swift.Bool) -> some SwiftUICore.View
  
  nonisolated public func fileDialogBrowserOptions(_ options: SwiftUI.FileDialogBrowserOptions) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct FileDialogBrowserOptions : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let enumeratePackages: SwiftUI.FileDialogBrowserOptions
  public static let includeHiddenFiles: SwiftUI.FileDialogBrowserOptions
  public static let displayFileExtensions: SwiftUI.FileDialogBrowserOptions
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias ArrayLiteralElement = SwiftUI.FileDialogBrowserOptions
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Element = SwiftUI.FileDialogBrowserOptions
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias RawValue = Swift.Int
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.FileDialogBrowserOptions : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen @propertyWrapper public struct SceneStorage<Value> : SwiftUICore.DynamicProperty {
  @usableFromInline
  internal var _key: Swift.String
  @usableFromInline
  internal var _domain: Swift.String?
  @usableFromInline
  internal var _value: Value
  @usableFromInline
  internal var _location: SwiftUICore.AnyLocation<Value>?
  @usableFromInline
  internal var _transformBox: SwiftUI.SceneStorageTransformBox
  public var wrappedValue: Value {
    get
    nonmutating set
  }
  public var projectedValue: SwiftUICore.Binding<Value> {
    get
  }
  public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.SceneStorage : @unchecked Swift.Sendable where Value : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.SceneStorage {
  public init(wrappedValue: Value, _ key: Swift.String) where Value == Swift.Bool
  public init(wrappedValue: Value, _ key: Swift.String) where Value == Swift.Int
  public init(wrappedValue: Value, _ key: Swift.String) where Value == Swift.Double
  public init(wrappedValue: Value, _ key: Swift.String) where Value == Swift.String
  public init(wrappedValue: Value, _ key: Swift.String) where Value == Foundation.URL
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public init(wrappedValue: Value, _ key: Swift.String) where Value == Foundation.Date
  public init(wrappedValue: Value, _ key: Swift.String) where Value == Foundation.Data
  public init(wrappedValue: Value, _ key: Swift.String) where Value : Swift.RawRepresentable, Value.RawValue == Swift.Int
  public init(wrappedValue: Value, _ key: Swift.String) where Value : Swift.RawRepresentable, Value.RawValue == Swift.String
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.SceneStorage where Value : Swift.ExpressibleByNilLiteral {
  public init(_ key: Swift.String) where Value == Swift.Bool?
  public init(_ key: Swift.String) where Value == Swift.Int?
  public init(_ key: Swift.String) where Value == Swift.Double?
  public init(_ key: Swift.String) where Value == Swift.String?
  public init(_ key: Swift.String) where Value == Foundation.URL?
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public init(_ key: Swift.String) where Value == Foundation.Date?
  public init(_ key: Swift.String) where Value == Foundation.Data?
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.SceneStorage {
  public init<R>(_ key: Swift.String) where Value == R?, R : Swift.RawRepresentable, R.RawValue == Swift.String
  public init<R>(_ key: Swift.String) where Value == R?, R : Swift.RawRepresentable, R.RawValue == Swift.Int
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@usableFromInline
internal class SceneStorageTransformBox {
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUI.SceneStorageTransformBox : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)
@available(watchOS, unavailable)
public struct Menu<Label, Content> : SwiftUICore.View where Label : SwiftUICore.View, Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 14.0, tvOS 17.0, macOS 11.0, *)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI4MenuV4bodyQrvp", 0) __<Label, Content>
}
@available(*, unavailable)
extension SwiftUI.Menu : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.Menu {
  nonisolated public init(@SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUICore.Text
  @_disfavoredOverload nonisolated public init<S>(_ title: S, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUICore.Text, S : Swift.StringProtocol
}
@available(iOS 15.0, macOS 12.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.Menu {
  nonisolated public init(@SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label, primaryAction: @escaping () -> Swift.Void)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: () -> Content, primaryAction: @escaping () -> Swift.Void) where Label == SwiftUICore.Text
  @_disfavoredOverload nonisolated public init<S>(_ title: S, @SwiftUICore.ViewBuilder content: () -> Content, primaryAction: @escaping () -> Swift.Void) where Label == SwiftUICore.Text, S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.Menu where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  @_alwaysEmitIntoClient nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content) {
        self.init {
            content()
        } label: {
            SwiftUI.Label(titleKey, systemImage: systemImage)
        }
    }
  @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public init<S>(_ title: S, systemImage: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol {
        self.init {
            content()
        } label: {
            SwiftUI.Label(title, systemImage: systemImage)
        }
    }
  @available(iOS 15.0, macOS 12.0, tvOS 17.0, *)
  @available(watchOS, unavailable)
  @_alwaysEmitIntoClient nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content, primaryAction: @escaping () -> Swift.Void) {
        self.init {
            content()
        } label: {
            SwiftUI.Label(titleKey, systemImage: systemImage)
        } primaryAction: {
            primaryAction()
        }
    }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.Menu where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: DeveloperToolsSupport.ImageResource, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, image: DeveloperToolsSupport.ImageResource, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: DeveloperToolsSupport.ImageResource, @SwiftUICore.ViewBuilder content: () -> Content, primaryAction: @escaping () -> Swift.Void)
}
@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.Menu where Label == SwiftUI.MenuStyleConfiguration.Label, Content == SwiftUI.MenuStyleConfiguration.Content {
  nonisolated public init(_ configuration: SwiftUI.MenuStyleConfiguration)
}
extension SwiftUI.TabContent {
  @available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func dropDestination<T>(for payloadType: T.Type = T.self, action: @escaping ([T]) -> Swift.Void) -> some SwiftUI.TabContent<Self.TabValue> where T : CoreTransferable.Transferable
  
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func springLoadingBehavior(_ behavior: SwiftUI.SpringLoadingBehavior) -> some SwiftUI.TabContent<Self.TabValue>
  
}
extension SwiftUI.TabContent {
  @available(iOS 18.1, macOS 15.1, visionOS 2.1, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func draggable<T>(_ payload: @autoclosure @escaping () -> T) -> some SwiftUI.TabContent<Self.TabValue> where T : CoreTransferable.Transferable
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.PickerStyle where Self == SwiftUI.InlinePickerStyle {
  @_alwaysEmitIntoClient public static var inline: SwiftUI.InlinePickerStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct InlinePickerStyle : SwiftUI.PickerStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.InlinePickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.InlinePickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.InlinePickerStyle : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
public struct _WidgetOutputs {
}
@available(*, unavailable)
extension SwiftUI._WidgetOutputs : Swift.Sendable {
}
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowContent {
  @_Concurrency.MainActor @preconcurrency public func onHover(perform action: @escaping (Swift.Bool) -> Swift.Void) -> some SwiftUI.TableRowContent<Self.TableRowValue>
  
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct _HoverTableRowModifier : SwiftUI._TableRowContentModifier {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI._TableRowContentModifier {
    get
  }
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI22_HoverTableRowModifierV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI._HoverTableRowModifier : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  nonisolated public func dialogSuppressionToggle(_ titleKey: SwiftUICore.LocalizedStringKey, isSuppressed: SwiftUICore.Binding<Swift.Bool>) -> some SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func dialogSuppressionToggle<S>(_ title: S, isSuppressed: SwiftUICore.Binding<Swift.Bool>) -> some SwiftUICore.View where S : Swift.StringProtocol
  
  nonisolated public func dialogSuppressionToggle(_ label: SwiftUICore.Text, isSuppressed: SwiftUICore.Binding<Swift.Bool>) -> some SwiftUICore.View
  
  nonisolated public func dialogSuppressionToggle(isSuppressed: SwiftUICore.Binding<Swift.Bool>) -> some SwiftUICore.View
  
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func dialogSuppressionToggle(_ titleKey: SwiftUICore.LocalizedStringKey, isSuppressed: SwiftUICore.Binding<Swift.Bool>) -> some SwiftUI.Scene
  
  @_disfavoredOverload nonisolated public func dialogSuppressionToggle<S>(_ title: S, isSuppressed: SwiftUICore.Binding<Swift.Bool>) -> some SwiftUI.Scene where S : Swift.StringProtocol
  
  nonisolated public func dialogSuppressionToggle(_ label: SwiftUICore.Text, isSuppressed: SwiftUICore.Binding<Swift.Bool>) -> some SwiftUI.Scene
  
  nonisolated public func dialogSuppressionToggle(isSuppressed: SwiftUICore.Binding<Swift.Bool>) -> some SwiftUI.Scene
  
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public enum DigitalCrownRotationalSensitivity : Swift.Sendable {
  case low
  case medium
  case high
  public static func == (a: SwiftUI.DigitalCrownRotationalSensitivity, b: SwiftUI.DigitalCrownRotationalSensitivity) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload nonisolated public func digitalCrownRotation<V>(_ binding: SwiftUICore.Binding<V>, from minValue: V, through maxValue: V, by stride: V.Stride? = nil, sensitivity: SwiftUI.DigitalCrownRotationalSensitivity = .high, isContinuous: Swift.Bool = false, isHapticFeedbackEnabled: Swift.Bool = true) -> some SwiftUICore.View where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
  
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload nonisolated public func digitalCrownRotation<V>(_ binding: SwiftUICore.Binding<V>) -> some SwiftUICore.View where V : Swift.BinaryFloatingPoint
  
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct DigitalCrownEvent : Swift.Sendable {
  public var offset: Swift.Double
  public var velocity: Swift.Double
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func digitalCrownRotation<V>(detent: SwiftUICore.Binding<V>, from minValue: V, through maxValue: V, by stride: V.Stride, sensitivity: SwiftUI.DigitalCrownRotationalSensitivity = .high, isContinuous: Swift.Bool = false, isHapticFeedbackEnabled: Swift.Bool = true, onChange: @escaping (SwiftUI.DigitalCrownEvent) -> Swift.Void = { _ in }, onIdle: @escaping () -> Swift.Void = { }) -> some SwiftUICore.View where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
  
  nonisolated public func digitalCrownRotation<V>(detent: SwiftUICore.Binding<V>, from minValue: V, through maxValue: V, by stride: V.Stride, sensitivity: SwiftUI.DigitalCrownRotationalSensitivity = .high, isContinuous: Swift.Bool = false, isHapticFeedbackEnabled: Swift.Bool = true, onChange: @escaping (SwiftUI.DigitalCrownEvent) -> Swift.Void = { _ in }, onIdle: @escaping () -> Swift.Void = { }) -> some SwiftUICore.View where V : Swift.BinaryInteger, V.Stride : Swift.BinaryInteger
  
  nonisolated public func digitalCrownRotation<V>(_ binding: SwiftUICore.Binding<V>, from minValue: V, through maxValue: V, sensitivity: SwiftUI.DigitalCrownRotationalSensitivity = .high, isContinuous: Swift.Bool = false, isHapticFeedbackEnabled: Swift.Bool = true, onChange: @escaping (SwiftUI.DigitalCrownEvent) -> Swift.Void = { _ in }, onIdle: @escaping () -> Swift.Void = { }) -> some SwiftUICore.View where V : Swift.BinaryFloatingPoint
  
  nonisolated public func digitalCrownRotation<V>(_ binding: SwiftUICore.Binding<V>, onChange: @escaping (SwiftUI.DigitalCrownEvent) -> Swift.Void = { _ in }, onIdle: @escaping () -> Swift.Void = { }) -> some SwiftUICore.View where V : Swift.BinaryFloatingPoint
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func fileImporter(isPresented: SwiftUICore.Binding<Swift.Bool>, allowedContentTypes: [UniformTypeIdentifiers.UTType], onCompletion: @escaping (_ result: Swift.Result<Foundation.URL, any Swift.Error>) -> Swift.Void) -> some SwiftUICore.View
  
  nonisolated public func fileImporter(isPresented: SwiftUICore.Binding<Swift.Bool>, allowedContentTypes: [UniformTypeIdentifiers.UTType], allowsMultipleSelection: Swift.Bool, onCompletion: @escaping (_ result: Swift.Result<[Foundation.URL], any Swift.Error>) -> Swift.Void) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func fileImporter(isPresented: SwiftUICore.Binding<Swift.Bool>, allowedContentTypes: [UniformTypeIdentifiers.UTType], allowsMultipleSelection: Swift.Bool, onCompletion: @escaping (_ result: Swift.Result<[Foundation.URL], any Swift.Error>) -> Swift.Void, onCancellation: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore._EnvironmentKeyWritingModifier : SwiftUI._SceneModifier {
}
extension SwiftUI.Scene {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @_alwaysEmitIntoClient nonisolated public func environment<V>(_ keyPath: Swift.WritableKeyPath<SwiftUICore.EnvironmentValues, V>, _ value: V) -> some SwiftUI.Scene {
        modifier(_EnvironmentKeyWritingModifier(keyPath: keyPath, value: value))
    }
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore._EnvironmentKeyTransformModifier : SwiftUI._SceneModifier {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Scene {
  nonisolated public func transformEnvironment<V>(_ keyPath: Swift.WritableKeyPath<SwiftUICore.EnvironmentValues, V>, transform: @escaping (inout V) -> Swift.Void) -> some SwiftUI.Scene
  
}
extension SwiftUI.Scene {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func environment<T>(_ object: T?) -> some SwiftUI.Scene where T : AnyObject, T : Observation.Observable
  
}
extension SwiftUI.Scene {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func environmentObject<T>(_ object: T) -> some SwiftUI.Scene where T : Combine.ObservableObject
  
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ControlGroupStyle where Self == SwiftUI.PaletteControlGroupStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var palette: SwiftUI.PaletteControlGroupStyle {
    get { .init() }
  }
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct PaletteControlGroupStyle : SwiftUI.ControlGroupStyle {
  public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.PaletteControlGroupStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24PaletteControlGroupStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.PaletteControlGroupStyle : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  nonisolated public func sheet<Item, Content>(item: SwiftUICore.Binding<Item?>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUICore.View where Item : Swift.Identifiable, Content : SwiftUICore.View
  
  nonisolated public func sheet<Content>(isPresented: SwiftUICore.Binding<Swift.Bool>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
}
@available(iOS 14.0, tvOS 14.0, watchOS 7.0, *)
@available(macOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func fullScreenCover<Item, Content>(item: SwiftUICore.Binding<Item?>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUICore.View where Item : Swift.Identifiable, Content : SwiftUICore.View
  
  @available(*, deprecated, renamed: "fullScreenCover(item:onDismiss:content:)")
  @_Concurrency.MainActor @preconcurrency public func _cover<Item, Content>(item: SwiftUICore.Binding<Item?>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUICore.View where Item : Swift.Identifiable, Content : SwiftUICore.View
  
  nonisolated public func fullScreenCover<Content>(isPresented: SwiftUICore.Binding<Swift.Bool>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  @available(*, deprecated, renamed: "fullScreenCover(isPresented:onDismiss:content:)")
  @_Concurrency.MainActor @preconcurrency public func _cover<Content>(isPresented: SwiftUICore.Binding<Swift.Bool>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _CALayerView<LayerType> : SwiftUICore.View where LayerType : QuartzCore.CALayer {
  public var update: (LayerType) -> Swift.Void
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._CALayerView : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._CALayerView {
  nonisolated public init(type: LayerType.Type, onUpdate update: @escaping (LayerType) -> Swift.Void)
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI._CALayerView<LayerType>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._CALayerView where LayerType == QuartzCore.CALayer {
  nonisolated public init(onUpdate update: @escaping (LayerType) -> Swift.Void)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen @propertyWrapper public struct AppStorage<Value> : SwiftUICore.DynamicProperty {
  @usableFromInline
  internal var location: SwiftUI.UserDefaultLocation<Value>
  public var wrappedValue: Value {
    get
    nonmutating set
  }
  public var projectedValue: SwiftUICore.Binding<Value> {
    get
  }
  public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.AppStorage : Swift.Sendable where Value : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.AppStorage {
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Bool
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Int
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Double
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.String
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Foundation.URL
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Foundation.Date
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Foundation.Data
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value : Swift.RawRepresentable, Value.RawValue == Swift.Int
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value : Swift.RawRepresentable, Value.RawValue == Swift.String
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.AppStorage where Value : Swift.ExpressibleByNilLiteral {
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Bool?
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Int?
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Double?
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.String?
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Foundation.URL?
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Foundation.Date?
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Foundation.Data?
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AppStorage {
  public init<R>(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == R?, R : Swift.RawRepresentable, R.RawValue == Swift.String
  public init<R>(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == R?, R : Swift.RawRepresentable, R.RawValue == Swift.Int
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func defaultAppStorage(_ store: Foundation.UserDefaults) -> some SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Scene {
  nonisolated public func defaultAppStorage(_ store: Foundation.UserDefaults) -> some SwiftUI.Scene
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.EnvironmentValues {
  @usableFromInline
  internal var defaultAppStorageDefaults: Foundation.UserDefaults {
    get
    set
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.AppStorage {
  public init(wrappedValue: Value = ToolbarLabelStyle.automatic, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == SwiftUI.ToolbarLabelStyle
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@usableFromInline
internal class UserDefaultLocation<Value> : @unchecked Swift.Sendable {
  @usableFromInline
  internal var wasRead: Swift.Bool
  @usableFromInline
  internal func get() -> Value
  @usableFromInline
  internal func set(_ value: Value, transaction: SwiftUICore.Transaction)
  @usableFromInline
  internal func update() -> (Value, Swift.Bool)
  @usableFromInline
  internal static func == (lhs: SwiftUI.UserDefaultLocation<Value>, rhs: SwiftUI.UserDefaultLocation<Value>) -> Swift.Bool
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUI.UserDefaultLocation : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct _NavigationDestinationCollection {
}
@available(*, unavailable)
extension SwiftUI._NavigationDestinationCollection : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, *)
@available(watchOS, unavailable)
extension SwiftUI.TabViewStyle where Self == SwiftUI.SidebarAdaptableTabViewStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var sidebarAdaptable: SwiftUI.SidebarAdaptableTabViewStyle {
    get { .init() }
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, *)
@available(watchOS, unavailable)
public struct SidebarAdaptableTabViewStyle : SwiftUI.TabViewStyle {
  public init()
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.SidebarAdaptableTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.SidebarAdaptableTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.SidebarAdaptableTabViewStyle : Swift.Sendable {
}
@available(iOS 16.1, macOS 13.0, tvOS 16.1, watchOS 9.1, *)
@usableFromInline
@frozen @_Concurrency.MainActor @preconcurrency internal struct LimitedAvailabilityScene : SwiftUI.Scene, SwiftUI._LimitedAvailabilitySceneMarker {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var storage: SwiftUI.LimitedAvailabilitySceneStorageBase
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal init<S>(_ scene: S) where S : SwiftUI.Scene
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var body: Swift.Never {
    get
  }
  @usableFromInline
  nonisolated internal static func _makeScene(scene: SwiftUICore._GraphValue<SwiftUI.LimitedAvailabilityScene>, inputs: SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs
  @available(iOS 16.1, tvOS 16.1, watchOS 9.1, macOS 13.0, *)
  @usableFromInline
  internal typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.LimitedAvailabilityScene : Swift.Sendable {
}
@_hasMissingDesignatedInitializers @available(iOS 16.1, macOS 13.0, tvOS 16.1, watchOS 9.1, *)
@usableFromInline
internal class LimitedAvailabilitySceneStorageBase {
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUI.LimitedAvailabilitySceneStorageBase : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency public protocol ReferenceFileDocument : Combine.ObservableObject, Swift.Sendable {
  associatedtype Snapshot
  static var readableContentTypes: [UniformTypeIdentifiers.UTType] { get }
  static var writableContentTypes: [UniformTypeIdentifiers.UTType] { get }
  init(configuration: Self.ReadConfiguration) throws
  typealias ReadConfiguration = SwiftUI.FileDocumentReadConfiguration
  func snapshot(contentType: UniformTypeIdentifiers.UTType) throws -> Self.Snapshot
  func fileWrapper(snapshot: Self.Snapshot, configuration: Self.WriteConfiguration) throws -> Foundation.FileWrapper
  typealias WriteConfiguration = SwiftUI.FileDocumentWriteConfiguration
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ReferenceFileDocument {
  public static var writableContentTypes: [UniformTypeIdentifiers.UTType] {
    get
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DocumentGroup where Document : SwiftUI.ReferenceFileDocument {
  @preconcurrency nonisolated public init(newDocument: @escaping @Sendable () -> Document, @SwiftUICore.ViewBuilder editor: @escaping (SwiftUI.ReferenceFileDocumentConfiguration<Document>) -> Content)
  nonisolated public init(viewing documentType: Document.Type, @SwiftUICore.ViewBuilder viewer: @escaping (SwiftUI.ReferenceFileDocumentConfiguration<Document>) -> Content)
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ReferenceFileDocumentConfiguration<Document> where Document : SwiftUI.ReferenceFileDocument {
  @SwiftUICore.ObservedObject @_projectedValueProperty($document) @_Concurrency.MainActor @preconcurrency public var document: Document {
    get
    @available(iOS 14.0, macOS 11.0, *)
    @available(tvOS, unavailable, introduced: 13.0)
    @available(watchOS, unavailable, introduced: 6.0)
    set
    @available(iOS 14.0, macOS 11.0, *)
    @available(tvOS, unavailable, introduced: 13.0)
    @available(watchOS, unavailable, introduced: 6.0)
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $document: SwiftUICore.ObservedObject<Document>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var fileURL: Foundation.URL?
  @_Concurrency.MainActor @preconcurrency public var isEditable: Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.ReferenceFileDocumentConfiguration : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func onSubmit(of triggers: SwiftUI.SubmitTriggers = .text, _ action: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
  nonisolated public func submitScope(_ isBlocking: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TextFieldStyle where Self == SwiftUI.RoundedBorderTextFieldStyle {
  @_alwaysEmitIntoClient public static var roundedBorder: SwiftUI.RoundedBorderTextFieldStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct RoundedBorderTextFieldStyle : SwiftUI.TextFieldStyle {
  public init()
  public func _body(configuration: SwiftUI.TextField<SwiftUI.RoundedBorderTextFieldStyle._Label>) -> some SwiftUICore.View
  
  @available(iOS 13.0, macOS 10.15, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI27RoundedBorderTextFieldStyleV5_body13configurationQrAA0eF0VyAA01_efG5LabelVG_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.RoundedBorderTextFieldStyle : Swift.Sendable {
}
@available(iOS 17.5, macOS 14.5, tvOS 17.5, watchOS 10.5, *)
@usableFromInline
@frozen internal struct LimitedAvailabilityToolbarContent : SwiftUI.ToolbarContent, SwiftUI.CustomizableToolbarContent {
  public typealias Body = Swift.Never
  @_Concurrency.MainActor @preconcurrency public var body: Swift.Never {
    get
  }
  internal let storage: SwiftUI.LimitedAvailabilityToolbarContentStorageBase
  @usableFromInline
  internal init(erasing content: some ToolbarContent)
  nonisolated public static func _makeToolbar(content: SwiftUICore._GraphValue<SwiftUI.LimitedAvailabilityToolbarContent>, inputs: SwiftUI._ToolbarInputs) -> SwiftUI._ToolbarOutputs
}
@available(*, unavailable)
extension SwiftUI.LimitedAvailabilityToolbarContent : Swift.Sendable {
}
@_hasMissingDesignatedInitializers @available(iOS 17.5, macOS 14.5, tvOS 17.5, watchOS 10.5, *)
@usableFromInline
internal class LimitedAvailabilityToolbarContentStorageBase {
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUI.LimitedAvailabilityToolbarContentStorageBase : Swift.Sendable {
}
@available(iOS 13.0, macOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use toolbar(.hidden)")
  @available(macOS, unavailable)
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use toolbar(.hidden)")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use toolbar(.hidden)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use toolbar(.hidden)")
  nonisolated public func navigationBarHidden(_ hidden: Swift.Bool) -> some SwiftUICore.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @available(macOS, unavailable)
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  nonisolated public func navigationBarTitle(_ title: SwiftUICore.Text) -> some SwiftUICore.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @available(macOS, unavailable)
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  nonisolated public func navigationBarTitle(_ titleKey: SwiftUICore.LocalizedStringKey) -> some SwiftUICore.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @available(macOS, unavailable)
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @_disfavoredOverload nonisolated public func navigationBarTitle<S>(_ title: S) -> some SwiftUICore.View where S : Swift.StringProtocol
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use navigationTitle(_:) with navigationBarTitleDisplayMode(_:)")
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use navigationTitle(_:) with navigationBarTitleDisplayMode(_:)")
  nonisolated public func navigationBarTitle(_ title: SwiftUICore.Text, displayMode: SwiftUI.NavigationBarItem.TitleDisplayMode) -> some SwiftUICore.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use navigationTitle(_:) with navigationBarTitleDisplayMode(_:)")
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use navigationTitle(_:) with navigationBarTitleDisplayMode(_:)")
  nonisolated public func navigationBarTitle(_ titleKey: SwiftUICore.LocalizedStringKey, displayMode: SwiftUI.NavigationBarItem.TitleDisplayMode) -> some SwiftUICore.View
  
  @available(iOS, introduced: 14.0, deprecated: 100000.0, message: "Use navigationTitle(_:) with navigationBarTitleDisplayMode(_:)")
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use navigationTitle(_:) with navigationBarTitleDisplayMode(_:)")
  @_disfavoredOverload nonisolated public func navigationBarTitle<S>(_ title: S, displayMode: SwiftUI.NavigationBarItem.TitleDisplayMode) -> some SwiftUICore.View where S : Swift.StringProtocol
  
  nonisolated public func navigationBarBackButtonHidden(_ hidesBackButton: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
public struct NavigationBarItem : Swift.Sendable {
  public enum TitleDisplayMode : Swift.Sendable {
    case automatic
    case inline
    @available(watchOS 8.0, *)
    @available(tvOS, unavailable)
    case large
    public static func == (a: SwiftUI.NavigationBarItem.TitleDisplayMode, b: SwiftUI.NavigationBarItem.TitleDisplayMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func textInputSuggestions<S>(@SwiftUICore.ViewBuilder _ suggestions: () -> S) -> some SwiftUICore.View where S : SwiftUICore.View
  
  nonisolated public func textInputSuggestions<Data, ID, Content>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUICore.ViewBuilder content: @escaping (Data.Element) -> Content) -> some SwiftUICore.View where Data : Swift.RandomAccessCollection, ID : Swift.Hashable, Content : SwiftUICore.View
  
  nonisolated public func textInputSuggestions<Data, Content>(_ data: Data, @SwiftUICore.ViewBuilder content: @escaping (Data.Element) -> Content) -> some SwiftUICore.View where Data : Swift.RandomAccessCollection, Content : SwiftUICore.View, Data.Element : Swift.Identifiable
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _ViewTest : SwiftUICore._Test {
  associatedtype RootView : SwiftUICore.View
  associatedtype RootStateType = Swift.Void
  func initRootView() -> Self.RootView
  func initSize() -> CoreFoundation.CGSize
  func setTestView<V>(_ view: V) where V : SwiftUICore.View
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ViewTest {
  public func setUpTest()
  public func tearDownTest()
  @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
  public func tearDownTestWithError() throws
  public func setTestView<V>(_ view: V) where V : SwiftUICore.View
  public var rootView: Self.RootView {
    get
  }
  public func viewForIdentifier<V, I>(_ identifier: I, _ type: V.Type = V.self) -> V? where V : SwiftUICore.View, I : Swift.Hashable
  public func stateForIdentifier<I, S, V>(_ id: I, type _: S.Type = S.self, in _: V.Type = V.self) -> SwiftUICore.Binding<S>? where I : Swift.Hashable, V : SwiftUICore.View
  public func render(seconds: Swift.Double = 1.0 / 60.0)
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func renderAsync(seconds: Swift.Double = 1.0 / 60.0) -> Swift.Bool
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func renderRecursively(seconds: Swift.Double = 1.0 / 60.0)
  public func initSize() -> CoreFoundation.CGSize
  public func setSize(_ size: CoreFoundation.CGSize)
  public func setEnvironment(_ environment: SwiftUICore.EnvironmentValues?)
  public var systemColorScheme: UIKit.UIUserInterfaceStyle? {
    get
  }
  public func updateEnvironment(_ body: (inout SwiftUICore.EnvironmentValues) -> Swift.Void)
  public func resetEvents()
  public func loop()
  public func turnRunloop(times: Swift.Int = 1)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ViewTest {
  public func rootState<S>(type _: S.Type = S.self) -> SwiftUICore.Binding<S>
  public func rootState<S, V>(type _: S.Type = S.self, in _: V.Type) -> SwiftUICore.Binding<S> where V : SwiftUICore.View
}
@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
extension SwiftUI._ViewTest {
  public func set<V>(_ keyPath: Swift.WritableKeyPath<Self.RootStateType, V>, to value: V)
  public func get<V>(_ keyPath: Swift.KeyPath<Self.RootStateType, V>) -> V
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol _SceneModifier {
  associatedtype Body : SwiftUI.Scene
  @SwiftUI.SceneBuilder func body(content: Self.SceneContent) -> Self.Body
  typealias SceneContent = SwiftUI._SceneModifier_Content<Self>
  static func _makeScene(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._SceneModifier where Self.Body == Swift.Never {
  public func body(content: Self.SceneContent) -> Self.Body
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._SceneModifier where Self : SwiftUICore._GraphInputsModifier, Self.Body == Swift.Never {
  public static func _makeScene(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.EmptyModifier : SwiftUI._SceneModifier {
  public static func _makeScene(modifier: SwiftUICore._GraphValue<SwiftUICore.EmptyModifier>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Scene {
  @inlinable nonisolated internal func modifier<T>(_ modifier: T) -> SwiftUICore.ModifiedContent<Self, T> {
        return .init(content: self, modifier: modifier)
    }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ModifiedContent : SwiftUI.Scene where Content : SwiftUI.Scene, Modifier : SwiftUI._SceneModifier {
  nonisolated public static func _makeScene(scene: SwiftUICore._GraphValue<SwiftUICore.ModifiedContent<Content, Modifier>>, inputs: SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs
  @_Concurrency.MainActor @preconcurrency public var body: SwiftUICore.ModifiedContent<Content, Modifier>.Body {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ModifiedContent : SwiftUI._SceneModifier where Content : SwiftUI._SceneModifier, Modifier : SwiftUI._SceneModifier {
  public static func _makeScene(modifier: SwiftUICore._GraphValue<SwiftUICore.ModifiedContent<Content, Modifier>>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._SceneModifier {
  @inlinable internal func concat<T>(_ modifier: T) -> SwiftUICore.ModifiedContent<Self, T> {
        return .init(content: self, modifier: modifier)
    }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _SceneModifier_Content<Modifier> : SwiftUI.Scene where Modifier : SwiftUI._SceneModifier {
  nonisolated public static func _makeScene(scene: SwiftUICore._GraphValue<SwiftUI._SceneModifier_Content<Modifier>>, inputs: SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._SceneModifier_Content : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._SceneModifier {
  public static func _makeScene(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.CustomHoverEffect {
  public func hoverEffect(in group: SwiftUI.HoverEffectGroup? = nil, isEnabled: Swift.Bool = true, body: @escaping (SwiftUICore.EmptyHoverEffectContent, Swift.Bool, SwiftUICore.GeometryProxy) -> some HoverEffectContent) -> some SwiftUICore.CustomHoverEffect
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct ScenePadding : Swift.Equatable, Swift.Sendable {
  public static let minimum: SwiftUI.ScenePadding
  @available(watchOS 9.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  public static let navigationBar: SwiftUI.ScenePadding
  public static func == (a: SwiftUI.ScenePadding, b: SwiftUI.ScenePadding) -> Swift.Bool
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func scenePadding(_ edges: SwiftUICore.Edge.Set = .all) -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func scenePadding(_ padding: SwiftUI.ScenePadding, edges: SwiftUICore.Edge.Set = .all) -> some SwiftUICore.View
  
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor public struct OpenImmersiveSpaceAction : Swift.Sendable {
  public enum Result : Swift.Sendable {
    case opened
    case userCancelled
    case error
    public static func == (a: SwiftUI.OpenImmersiveSpaceAction.Result, b: SwiftUI.OpenImmersiveSpaceAction.Result) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @discardableResult
  @_Concurrency.MainActor public func callAsFunction(id: Swift.String) async -> SwiftUI.OpenImmersiveSpaceAction.Result
  @discardableResult
  @_Concurrency.MainActor public func callAsFunction<D>(value: D) async -> SwiftUI.OpenImmersiveSpaceAction.Result where D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable
  @discardableResult
  @_Concurrency.MainActor public func callAsFunction<D>(id: Swift.String, value: D) async -> SwiftUI.OpenImmersiveSpaceAction.Result where D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var openImmersiveSpace: SwiftUI.OpenImmersiveSpaceAction {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityRespondsToUserInteraction(_ respondsToUserInteraction: Swift.Bool, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityRespondsToUserInteraction(_ respondsToUserInteraction: Swift.Bool, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityRespondsToUserInteraction(_ respondsToUserInteraction: Swift.Bool = true) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityRespondsToUserInteraction(_ respondsToUserInteraction: Swift.Bool = true) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
@usableFromInline
@_Concurrency.MainActor @preconcurrency internal struct TupleWidget<T> : SwiftUI.Widget {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal init()
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal init(_ value: T)
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var body: some SwiftUI.WidgetConfiguration {
    get
  }
  @available(iOS 14.0, watchOS 9.0, macOS 11.0, *)
  @usableFromInline
  @available(tvOS, unavailable)
  internal typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11TupleWidgetV4bodyQrvp", 0) __<T>
}
@available(*, unavailable)
extension SwiftUI.TupleWidget : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
@usableFromInline
@_Concurrency.MainActor @preconcurrency internal struct TupleWidgetConfiguration<T> : SwiftUI.WidgetConfiguration {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var body: Swift.Never {
    get
  }
  @usableFromInline
  nonisolated internal static func _makeWidgetConfiguration(widget: SwiftUICore._GraphValue<SwiftUI.TupleWidgetConfiguration<T>>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
  @available(iOS 14.0, watchOS 9.0, macOS 11.0, *)
  @usableFromInline
  @available(tvOS, unavailable)
  internal typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.TupleWidgetConfiguration : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TableColumnCustomizationBehavior : Swift.SetAlgebra, Swift.Sendable {
  public typealias Element = SwiftUI.TableColumnCustomizationBehavior
  public init()
  public static var all: SwiftUI.TableColumnCustomizationBehavior {
    get
  }
  public static let reorder: SwiftUI.TableColumnCustomizationBehavior
  public static let resize: SwiftUI.TableColumnCustomizationBehavior
  public static let visibility: SwiftUI.TableColumnCustomizationBehavior
  public func contains(_ member: SwiftUI.TableColumnCustomizationBehavior.Element) -> Swift.Bool
  public func union(_ other: SwiftUI.TableColumnCustomizationBehavior) -> SwiftUI.TableColumnCustomizationBehavior
  public func intersection(_ other: SwiftUI.TableColumnCustomizationBehavior) -> SwiftUI.TableColumnCustomizationBehavior
  public func symmetricDifference(_ other: SwiftUI.TableColumnCustomizationBehavior) -> SwiftUI.TableColumnCustomizationBehavior
  public mutating func insert(_ newMember: SwiftUI.TableColumnCustomizationBehavior.Element) -> (inserted: Swift.Bool, memberAfterInsert: SwiftUI.TableColumnCustomizationBehavior.Element)
  public mutating func remove(_ member: SwiftUI.TableColumnCustomizationBehavior.Element) -> SwiftUI.TableColumnCustomizationBehavior.Element?
  public mutating func update(with newMember: SwiftUI.TableColumnCustomizationBehavior.Element) -> SwiftUI.TableColumnCustomizationBehavior.Element?
  public mutating func formUnion(_ other: SwiftUI.TableColumnCustomizationBehavior)
  public mutating func formIntersection(_ other: SwiftUI.TableColumnCustomizationBehavior)
  public mutating func formSymmetricDifference(_ other: SwiftUI.TableColumnCustomizationBehavior)
  public static func == (a: SwiftUI.TableColumnCustomizationBehavior, b: SwiftUI.TableColumnCustomizationBehavior) -> Swift.Bool
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias ArrayLiteralElement = SwiftUI.TableColumnCustomizationBehavior.Element
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnContent {
  @_Concurrency.MainActor @preconcurrency public func defaultVisibility(_ visibility: SwiftUICore.Visibility) -> some SwiftUI.TableColumnContent<Self.TableRowValue, Self.TableColumnSortComparator>
  
  @_Concurrency.MainActor @preconcurrency public func customizationID(_ id: Swift.String) -> some SwiftUI.TableColumnContent<Self.TableRowValue, Self.TableColumnSortComparator>
  
  @_Concurrency.MainActor @preconcurrency public func disabledCustomizationBehavior(_ behavior: SwiftUI.TableColumnCustomizationBehavior) -> some SwiftUI.TableColumnContent<Self.TableRowValue, Self.TableColumnSortComparator>
  
}
@available(iOS 14.0, tvOS 14.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor @propertyWrapper public struct UIApplicationDelegateAdaptor<DelegateType> : SwiftUICore.DynamicProperty where DelegateType : ObjectiveC.NSObject, DelegateType : UIKit.UIApplicationDelegate {
  nonisolated public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
  @_Concurrency.MainActor @preconcurrency public var wrappedValue: DelegateType {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(_ delegateType: DelegateType.Type = DelegateType.self)
}
@available(iOS 14.0, tvOS 14.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.UIApplicationDelegateAdaptor where DelegateType : Combine.ObservableObject {
  @_Concurrency.MainActor @preconcurrency public init(_ delegateType: DelegateType.Type = DelegateType.self)
  @_Concurrency.MainActor @preconcurrency public var projectedValue: SwiftUICore.ObservedObject<DelegateType>.Wrapper {
    get
  }
}
@available(iOS 17.0, tvOS 17.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.UIApplicationDelegateAdaptor where DelegateType : Observation.Observable {
  @_Concurrency.MainActor @preconcurrency public init(_ delegateType: DelegateType.Type = DelegateType.self)
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowContent {
  @_Concurrency.MainActor @preconcurrency public func contextMenu<M>(@SwiftUICore.ViewBuilder menuItems: () -> M) -> SwiftUICore.ModifiedContent<Self, SwiftUI._ContextMenuTableRowModifier<M>> where M : SwiftUICore.View
  @_Concurrency.MainActor @preconcurrency public func contextMenu<M, P>(@SwiftUICore.ViewBuilder menuItems: () -> M, @SwiftUICore.ViewBuilder preview: () -> P) -> SwiftUICore.ModifiedContent<Self, SwiftUI._ContextMenuPreviewTableRowModifier<M, P>> where M : SwiftUICore.View, P : SwiftUICore.View
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct _ContextMenuTableRowModifier<MenuItems> : SwiftUI._TableRowContentModifier where MenuItems : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI._TableRowContentModifier {
    get
  }
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI28_ContextMenuTableRowModifierV4bodyQrvp", 0) __<MenuItems>
}
@available(*, unavailable)
extension SwiftUI._ContextMenuTableRowModifier : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct _ContextMenuPreviewTableRowModifier<MenuItems, Preview> : SwiftUI._TableRowContentModifier where MenuItems : SwiftUICore.View, Preview : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI._TableRowContentModifier {
    get
  }
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI35_ContextMenuPreviewTableRowModifierV4bodyQrvp", 0) __<MenuItems, Preview>
}
@available(*, unavailable)
extension SwiftUI._ContextMenuPreviewTableRowModifier : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@preconcurrency @_Concurrency.MainActor public protocol AccessibilityRotorContent {
  nonisolated static func _makeEntries(content: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._AccessibilityRotorEntryInputs) -> SwiftUI._AccessibilityRotorEntryOutputs
  nonisolated static func _entryCount(inputs: SwiftUI._AccessibilityRotorEntryInputs) -> Swift.Int?
  associatedtype Body : SwiftUI.AccessibilityRotorContent
  @SwiftUI.AccessibilityRotorContentBuilder @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityRotorContent {
  nonisolated public static func _makeEntries(content: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._AccessibilityRotorEntryInputs) -> SwiftUI._AccessibilityRotorEntryOutputs
  nonisolated public static func _entryCount(inputs: SwiftUI._AccessibilityRotorEntryInputs) -> Swift.Int?
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension Swift.Never : SwiftUI.AccessibilityRotorContent {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct _AccessibilityRotorEntryInputs {
}
@available(*, unavailable)
extension SwiftUI._AccessibilityRotorEntryInputs : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct _AccessibilityRotorEntryOutputs : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_functionBuilder public struct AccessibilityRotorContentBuilder {
  @_alwaysEmitIntoClient public static func buildExpression<Content>(_ content: Content) -> Content where Content : SwiftUI.AccessibilityRotorContent {
       content
    }
  @available(*, unavailable, message: "this expression does not conform to 'AccessibilityRotorContent'")
  @_disfavoredOverload @_alwaysEmitIntoClient public static func buildExpression(_ invalid: Any) -> some SwiftUI.AccessibilityRotorContent {
        fatalError()
    }
  
  @_alwaysEmitIntoClient public static func buildBlock<Content>(_ content: Content) -> some SwiftUI.AccessibilityRotorContent where Content : SwiftUI.AccessibilityRotorContent {
        content
    }
  
  @_alwaysEmitIntoClient public static func buildIf<Content>(_ content: Content?) -> some SwiftUI.AccessibilityRotorContent where Content : SwiftUI.AccessibilityRotorContent {
        AccessibilityOptionalRotorContent(content)
    }
  
}
@available(*, unavailable)
extension SwiftUI.AccessibilityRotorContentBuilder : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@usableFromInline
@frozen @_Concurrency.MainActor @preconcurrency internal struct AccessibilityTupleRotorContent<T> : SwiftUI.AccessibilityRotorContent {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var value: T
  @inlinable @_Concurrency.MainActor @preconcurrency internal init(_ value: T) { self.value = value }
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var body: Swift.Never {
    get
  }
  @usableFromInline
  nonisolated internal static func _entryCount(inputs: SwiftUI._AccessibilityRotorEntryInputs) -> Swift.Int?
  @usableFromInline
  nonisolated internal static func _makeEntries(content: SwiftUICore._GraphValue<SwiftUI.AccessibilityTupleRotorContent<T>>, inputs: SwiftUI._AccessibilityRotorEntryInputs) -> SwiftUI._AccessibilityRotorEntryOutputs
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  @usableFromInline
  internal typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.AccessibilityTupleRotorContent : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.ForEach : SwiftUI.AccessibilityRotorContent where Content : SwiftUI.AccessibilityRotorContent {
  @_Concurrency.MainActor @preconcurrency public var body: Swift.Never {
    get
  }
  nonisolated public static func _entryCount(inputs: SwiftUI._AccessibilityRotorEntryInputs) -> Swift.Int?
  nonisolated public static func _makeEntries(content: SwiftUICore._GraphValue<SwiftUICore.ForEach<Data, ID, Content>>, inputs: SwiftUI._AccessibilityRotorEntryInputs) -> SwiftUI._AccessibilityRotorEntryOutputs
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.ForEach where ID == Data.Element.ID, Content : SwiftUI.AccessibilityRotorContent, Data.Element : Swift.Identifiable {
  public init(_ data: Data, @SwiftUI.AccessibilityRotorContentBuilder content: @escaping (Data.Element) -> Content)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.ForEach where Content : SwiftUI.AccessibilityRotorContent {
  public init(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUI.AccessibilityRotorContentBuilder content: @escaping (Data.Element) -> Content)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityRotorEntry : SwiftUI.AccessibilityRotorContent {
  @_Concurrency.MainActor @preconcurrency public var body: Swift.Never {
    get
  }
  nonisolated public static func _makeEntries(content: SwiftUICore._GraphValue<SwiftUI.AccessibilityRotorEntry<ID>>, inputs: SwiftUI._AccessibilityRotorEntryInputs) -> SwiftUI._AccessibilityRotorEntryOutputs
  nonisolated public static func _entryCount(inputs: SwiftUI._AccessibilityRotorEntryInputs) -> Swift.Int?
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@usableFromInline
@frozen @_Concurrency.MainActor @preconcurrency internal struct AccessibilityOptionalRotorContent<Content> where Content : SwiftUI.AccessibilityRotorContent {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var content: Content?
  @inlinable @_Concurrency.MainActor @preconcurrency internal init(_ content: Content?) {
        self.content = content
    }
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var body: Swift.Never {
    get
  }
  @usableFromInline
  nonisolated internal static func _makeEntries(content: SwiftUICore._GraphValue<SwiftUI.AccessibilityOptionalRotorContent<Content>>, inputs: SwiftUI._AccessibilityRotorEntryInputs) -> SwiftUI._AccessibilityRotorEntryOutputs
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  @usableFromInline
  internal typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.AccessibilityOptionalRotorContent : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.Group : SwiftUI.AccessibilityRotorContent where Content : SwiftUI.AccessibilityRotorContent {
  @_Concurrency.MainActor @preconcurrency public var body: Swift.Never {
    get
  }
  public init(@SwiftUI.AccessibilityRotorContentBuilder content: () -> Content)
  nonisolated public static func _makeEntries(content: SwiftUICore._GraphValue<SwiftUICore.Group<Content>>, inputs: SwiftUI._AccessibilityRotorEntryInputs) -> SwiftUI._AccessibilityRotorEntryOutputs
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use EnvironmentValues.isPresented or EnvironmentValues.dismiss")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use EnvironmentValues.isPresented or EnvironmentValues.dismiss")
@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use EnvironmentValues.isPresented or EnvironmentValues.dismiss")
@available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use EnvironmentValues.isPresented or EnvironmentValues.dismiss")
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use EnvironmentValues.isPresented or EnvironmentValues.dismiss")
public struct PresentationMode {
  public var isPresented: Swift.Bool {
    get
  }
  public mutating func dismiss()
}
@available(*, unavailable)
extension SwiftUI.PresentationMode : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.EnvironmentValues {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use isPresented or dismiss")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use isPresented or dismiss")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use isPresented or dismiss")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use isPresented or dismiss")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use isPresented or dismiss")
  public var presentationMode: SwiftUICore.Binding<SwiftUI.PresentationMode> {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@preconcurrency @_Concurrency.MainActor public protocol PrimitiveButtonStyle {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.PrimitiveButtonStyleConfiguration
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct PrimitiveButtonStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Label : SwiftUICore.View {
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias Body = Swift.Never
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public let role: SwiftUI.ButtonRole?
  public let label: SwiftUI.PrimitiveButtonStyleConfiguration.Label
  public func trigger()
}
@available(*, unavailable)
extension SwiftUI.PrimitiveButtonStyleConfiguration : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.PrimitiveButtonStyleConfiguration.Label : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  nonisolated public func buttonStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.PrimitiveButtonStyle
  
}
@available(iOS 15.0, macOS 12.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.ControlGroupStyle where Self == SwiftUI.AutomaticControlGroupStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.AutomaticControlGroupStyle {
    get { .init() }
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 17.0, *)
@available(watchOS, unavailable)
public struct AutomaticControlGroupStyle : SwiftUI.ControlGroupStyle {
  @usableFromInline
  internal init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.AutomaticControlGroupStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 15.0, tvOS 17.0, macOS 12.0, *)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI26AutomaticControlGroupStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.AutomaticControlGroupStyle : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.GroupBoxStyle where Self == SwiftUI.DefaultGroupBoxStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.DefaultGroupBoxStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DefaultGroupBoxStyle : SwiftUI.GroupBoxStyle {
  public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.DefaultGroupBoxStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI20DefaultGroupBoxStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.DefaultGroupBoxStyle : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@preconcurrency @_Concurrency.MainActor public protocol App {
  associatedtype Body : SwiftUI.Scene
  @SwiftUI.SceneBuilder @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
  @_Concurrency.MainActor @preconcurrency init()
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.App {
  @_Concurrency.MainActor @preconcurrency public static func main()
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@frozen public enum FrameResizePosition : Swift.Int8, Swift.CaseIterable {
  case top
  case leading
  case bottom
  case trailing
  case topLeading
  case topTrailing
  case bottomLeading
  case bottomTrailing
  public init?(rawValue: Swift.Int8)
  @available(macOS 15.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias AllCases = [SwiftUI.FrameResizePosition]
  @available(macOS 15.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias RawValue = Swift.Int8
  nonisolated public static var allCases: [SwiftUI.FrameResizePosition] {
    get
  }
  public var rawValue: Swift.Int8 {
    get
  }
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@frozen public enum FrameResizeDirection : Swift.Int8, Swift.CaseIterable {
  case inward
  case outward
  @frozen public struct Set : Swift.OptionSet, Swift.Equatable, Swift.Hashable {
    public typealias Element = SwiftUI.FrameResizeDirection.Set
    public let rawValue: Swift.Int8
    public init(rawValue: Swift.Int8)
    public static let inward: SwiftUI.FrameResizeDirection.Set
    public static let outward: SwiftUI.FrameResizeDirection.Set
    public static let all: SwiftUI.FrameResizeDirection.Set
    public init(_ direction: SwiftUI.FrameResizeDirection)
    @available(macOS 15.0, *)
    @available(iOS, unavailable)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(visionOS, unavailable)
    public typealias ArrayLiteralElement = SwiftUI.FrameResizeDirection.Set.Element
    @available(macOS 15.0, *)
    @available(iOS, unavailable)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(visionOS, unavailable)
    public typealias RawValue = Swift.Int8
  }
  public init?(rawValue: Swift.Int8)
  @available(macOS 15.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias AllCases = [SwiftUI.FrameResizeDirection]
  @available(macOS 15.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias RawValue = Swift.Int8
  nonisolated public static var allCases: [SwiftUI.FrameResizeDirection] {
    get
  }
  public var rawValue: Swift.Int8 {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen @propertyWrapper public struct FocusState<Value> : SwiftUICore.DynamicProperty where Value : Swift.Hashable {
  @frozen @propertyWrapper public struct Binding {
    private var _binding: SwiftUICore.Binding<Value>
    public var wrappedValue: Value {
      get
      nonmutating set
    }
    public var projectedValue: SwiftUI.FocusState<Value>.Binding {
      get
    }
  }
  internal var value: Value
  internal var location: SwiftUICore.AnyLocation<Value>?
  internal var resetValue: Value
  public var wrappedValue: Value {
    get
    nonmutating set
  }
  public var projectedValue: SwiftUI.FocusState<Value>.Binding {
    get
  }
  public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
  public init() where Value == Swift.Bool
  public init<T>() where Value == T?, T : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.FocusState : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.FocusState.Binding : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func focused<Value>(_ binding: SwiftUI.FocusState<Value>.Binding, equals value: Value) -> some SwiftUICore.View where Value : Swift.Hashable
  
  nonisolated public func focused(_ condition: SwiftUI.FocusState<Swift.Bool>.Binding) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.VisualEffect {
  public func offset(_ offset: CoreFoundation.CGSize) -> some SwiftUICore.VisualEffect
  
  public func offset(x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0) -> some SwiftUICore.VisualEffect
  
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.HoverEffectContent {
  public func offset(_ offset: CoreFoundation.CGSize) -> some SwiftUICore.HoverEffectContent
  
  public func offset(x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0) -> some SwiftUICore.HoverEffectContent
  
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func onModifierKeysChanged(mask: SwiftUICore.EventModifiers = .all, initial: Swift.Bool = true, _ action: @escaping (_ old: SwiftUICore.EventModifiers, _ new: SwiftUICore.EventModifiers) -> Swift.Void) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _PositionLayout {
  public var position: CoreFoundation.CGPoint
  @inlinable public init(position: CoreFoundation.CGPoint) {
        self.position = position
    }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func position(_ position: CoreFoundation.CGPoint) -> some SwiftUICore.View {
        return modifier(_PositionLayout(position: position))
    }
  
  @inlinable nonisolated public func position(x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0) -> some SwiftUICore.View {
        return position(CGPoint(x: x, y: y))
    }
  
}
@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct AutomaticTextEditorStyle : SwiftUI.TextEditorStyle {
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.AutomaticTextEditorStyle.Configuration) -> SwiftUI.AutomaticTextEditorStyle.Body
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public struct Body : SwiftUICore.View {
    @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
      get
    }
    @available(iOS 17.0, visionOS 1.0, macOS 14.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24AutomaticTextEditorStyleV4BodyV4bodyQrvp", 0) __
  }
}
@available(*, unavailable)
extension SwiftUI.AutomaticTextEditorStyle : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.AutomaticTextEditorStyle.Body : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TextEditorStyle where Self == SwiftUI.AutomaticTextEditorStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.AutomaticTextEditorStyle {
    get { .init() }
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.TimelineSchedule where Self == SwiftUI.AnimationTimelineSchedule {
  @_alwaysEmitIntoClient public static var animation: SwiftUI.AnimationTimelineSchedule {
    get { .init() }
  }
  @_alwaysEmitIntoClient public static func animation(minimumInterval: Swift.Double? = nil, paused: Swift.Bool = false) -> SwiftUI.AnimationTimelineSchedule {
        .init(minimumInterval: minimumInterval, paused: paused)
    }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct AnimationTimelineSchedule : SwiftUICore.TimelineSchedule, Swift.Sendable {
  public init(minimumInterval: Swift.Double? = nil, paused: Swift.Bool = false)
  public func entries(from start: Foundation.Date, mode: SwiftUICore.TimelineScheduleMode) -> SwiftUI.AnimationTimelineSchedule.Entries
  public struct Entries : Swift.Sequence, Swift.IteratorProtocol, Swift.Sendable {
    public mutating func next() -> Foundation.Date?
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias Element = Foundation.Date
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias Iterator = SwiftUI.AnimationTimelineSchedule.Entries
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.PrimitiveButtonStyle where Self == SwiftUI.PlainButtonStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var plain: SwiftUI.PlainButtonStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct PlainButtonStyle : SwiftUI.PrimitiveButtonStyle {
  public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.PlainButtonStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI16PlainButtonStyleV8makeBody13configurationQrAA09PrimitivedE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.PlainButtonStyle : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.OutlineGroup where ID == Data.Element.ID, Parent : SwiftUI.TableRowContent, Parent == Leaf, Leaf == Subgroup, Data.Element == Parent.TableRowValue {
  public init<DataElement>(_ root: DataElement, children: Swift.KeyPath<DataElement, Data?>) where ID == DataElement.ID, Parent == SwiftUI.TableRow<DataElement>, Leaf == SwiftUI.TableRow<DataElement>, Subgroup == SwiftUI.TableRow<DataElement>, DataElement : Swift.Identifiable, DataElement == Data.Element
  public init<DataElement>(_ data: Data, children: Swift.KeyPath<DataElement, Data?>) where ID == DataElement.ID, Parent == SwiftUI.TableRow<DataElement>, Leaf == SwiftUI.TableRow<DataElement>, Subgroup == SwiftUI.TableRow<DataElement>, DataElement : Swift.Identifiable, DataElement == Data.Element
  public init<DataElement>(_ root: DataElement, children: Swift.KeyPath<DataElement, Data?>, @SwiftUI.TableRowBuilder<DataElement> content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement == Data.Element
  public init<DataElement>(_ root: DataElement, id: Swift.KeyPath<DataElement, ID>, children: Swift.KeyPath<DataElement, Data?>, @SwiftUI.TableRowBuilder<DataElement> content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement == Data.Element
  public init<DataElement>(_ data: Data, children: Swift.KeyPath<DataElement, Data?>, @SwiftUI.TableRowBuilder<DataElement> content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement == Data.Element
  public init<DataElement>(_ data: Data, id: Swift.KeyPath<DataElement, ID>, children: Swift.KeyPath<DataElement, Data?>, @SwiftUI.TableRowBuilder<DataElement> content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement == Data.Element
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.OutlineGroup : SwiftUI.TableRowContent where ID == Data.Element.ID, Parent : SwiftUI.TableRowContent, Parent == Leaf, Leaf == Subgroup, Data.Element == Parent.TableRowValue {
  public typealias TableRowValue = Leaf.TableRowValue
  @_Concurrency.MainActor @preconcurrency public var tableRowBody: some SwiftUI.TableRowContent {
    get
  }
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias TableRowBody = @_opaqueReturnTypeOf("$s7SwiftUI12OutlineGroupVAA7ElementST_2IDs12IdentifiablePQZRs_AA15TableRowContentR0_q1_Rs0_q2_Rs1_0hI5ValueAaIPQy0_ADSTRtzrlE05tableI4BodyQrvp", 0) __<Data, ID, Parent, Parent, Parent>
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct SubmitLabel : Swift.Sendable {
  public static var done: SwiftUI.SubmitLabel {
    get
  }
  public static var go: SwiftUI.SubmitLabel {
    get
  }
  public static var send: SwiftUI.SubmitLabel {
    get
  }
  public static var join: SwiftUI.SubmitLabel {
    get
  }
  public static var route: SwiftUI.SubmitLabel {
    get
  }
  public static var search: SwiftUI.SubmitLabel {
    get
  }
  public static var `return`: SwiftUI.SubmitLabel {
    get
  }
  public static var next: SwiftUI.SubmitLabel {
    get
  }
  public static var `continue`: SwiftUI.SubmitLabel {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func submitLabel(_ submitLabel: SwiftUI.SubmitLabel) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public protocol NavigationTransition {
  func _outputs(for inputs: SwiftUI._NavigationTransitionInputs) -> SwiftUI._NavigationTransitionOutputs
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct _NavigationTransitionInputs : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct _NavigationTransitionOutputs : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func navigationTransition(_ style: some NavigationTransition) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct AutomaticNavigationTransition : SwiftUI.NavigationTransition {
  public func _outputs(for inputs: SwiftUI._NavigationTransitionInputs) -> SwiftUI._NavigationTransitionOutputs
}
@available(*, unavailable)
extension SwiftUI.AutomaticNavigationTransition : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.NavigationTransition where Self == SwiftUI.AutomaticNavigationTransition {
  public static var automatic: SwiftUI.AutomaticNavigationTransition {
    get
  }
}
@available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@available(macOS, unavailable)
public struct ZoomNavigationTransition : SwiftUI.NavigationTransition {
  public func _outputs(for inputs: SwiftUI._NavigationTransitionInputs) -> SwiftUI._NavigationTransitionOutputs
}
@available(*, unavailable)
extension SwiftUI.ZoomNavigationTransition : Swift.Sendable {
}
@available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@available(macOS, unavailable)
extension SwiftUI.NavigationTransition where Self == SwiftUI.ZoomNavigationTransition {
  public static func zoom(sourceID: some Hashable, in namespace: SwiftUICore.Namespace.ID) -> SwiftUI.ZoomNavigationTransition
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Divider : SwiftUICore.View {
  public init()
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI.Divider>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.Divider : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.MenuStyle where Self == SwiftUI.ButtonMenuStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var button: SwiftUI.ButtonMenuStyle {
    get { .init() }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 17.0, *)
@available(watchOS, unavailable)
public struct ButtonMenuStyle : SwiftUI.MenuStyle {
  public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.ButtonMenuStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, tvOS 17.0, macOS 13.0, *)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15ButtonMenuStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.ButtonMenuStyle : Swift.Sendable {
}
@available(tvOS 16.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func onLongTouchGesture(minimumDuration: Swift.Double = 0.5, perform action: @escaping () -> Swift.Void, onTouchingChanged: ((Swift.Bool) -> Swift.Void)? = nil) -> some SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct ToolbarCustomizationBehavior : Swift.Sendable {
  public static var `default`: SwiftUI.ToolbarCustomizationBehavior {
    get
  }
  public static var reorderable: SwiftUI.ToolbarCustomizationBehavior {
    get
  }
  public static var disabled: SwiftUI.ToolbarCustomizationBehavior {
    get
  }
}
extension SwiftUI.CustomizableToolbarContent {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func customizationBehavior(_ behavior: SwiftUI.ToolbarCustomizationBehavior) -> some SwiftUI.CustomizableToolbarContent
  
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor public struct PushWindowAction {
  @_Concurrency.MainActor public func callAsFunction<D>(value: D) where D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable
  @_Concurrency.MainActor public func callAsFunction(id: Swift.String)
  @_Concurrency.MainActor public func callAsFunction<D>(id: Swift.String, value: D) where D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var pushWindow: SwiftUI.PushWindowAction {
    get
  }
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func defaultLaunchBehavior(_ behavior: SwiftUI.SceneLaunchBehavior) -> some SwiftUI.Scene
  
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
public struct SceneLaunchBehavior : Swift.Sendable {
  public static let automatic: SwiftUI.SceneLaunchBehavior
  public static let presented: SwiftUI.SceneLaunchBehavior
  public static let suppressed: SwiftUI.SceneLaunchBehavior
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct TextFieldLink<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(watchOS 9.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI13TextFieldLinkV4bodyQrvp", 0) __<Label>
}
@available(*, unavailable)
extension SwiftUI.TextFieldLink : Swift.Sendable {
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.TextFieldLink {
  nonisolated public init(prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder label: () -> Label, onSubmit: @escaping (Swift.String) -> Swift.Void)
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.TextFieldLink where Label == SwiftUICore.Text {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, prompt: SwiftUICore.Text? = nil, onSubmit: @escaping (Swift.String) -> Swift.Void)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, prompt: SwiftUICore.Text? = nil, onSubmit: @escaping (Swift.String) -> Swift.Void) where S : Swift.StringProtocol
}
@available(macOS 15.0, visionOS 2.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func defaultWindowPlacement(_ makePlacement: @escaping (_ content: SwiftUI.WindowLayoutRoot, _ context: SwiftUI.WindowPlacementContext) -> SwiftUI.WindowPlacement) -> some SwiftUI.Scene
  
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func windowIdealPlacement(_ makePlacement: @escaping (_ content: SwiftUI.WindowLayoutRoot, _ context: SwiftUI.WindowPlacementContext) -> SwiftUI.WindowPlacement) -> some SwiftUI.Scene
  
  nonisolated public func windowIdealSize(_ idealSize: SwiftUI.WindowIdealSize) -> some SwiftUI.Scene
  
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
public struct WindowIdealSize : Swift.Sendable {
  public static let automatic: SwiftUI.WindowIdealSize
  public static let fitToContent: SwiftUI.WindowIdealSize
  public static let maximum: SwiftUI.WindowIdealSize
}
@available(iOS 17.5, macOS 14.5, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct PencilHoverPose : Swift.Hashable {
  public let location: CoreFoundation.CGPoint
  public let anchor: SwiftUICore.UnitPoint
  public let zDistance: CoreFoundation.CGFloat
  public let altitude: SwiftUICore.Angle
  public let azimuth: SwiftUICore.Angle
  public let roll: SwiftUICore.Angle
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.PencilHoverPose, b: SwiftUI.PencilHoverPose) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.PencilHoverPose : Swift.Sendable {
}
@available(iOS 16.1, macOS 13.0, watchOS 9.1, *)
@available(tvOS, unavailable)
@usableFromInline
@frozen internal struct LimitedAvailabilityWidget : SwiftUI.Widget, SwiftUI._LimitedAvailabilityWidgetMarker {
  @usableFromInline
  internal var configuration: SwiftUI.LimitedAvailabilityConfiguration
  @_Concurrency.MainActor @preconcurrency public init()
  @usableFromInline
  internal init<W>(_ widget: W) where W : SwiftUI.Widget
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.WidgetConfiguration {
    get
  }
  @available(iOS 16.1, watchOS 9.1, macOS 13.0, *)
  @usableFromInline
  @available(tvOS, unavailable)
  internal typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI25LimitedAvailabilityWidgetV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.LimitedAvailabilityWidget : Swift.Sendable {
}
@available(iOS 16.1, macOS 13.0, watchOS 9.1, *)
@available(tvOS, unavailable)
@frozen @_Concurrency.MainActor @preconcurrency public struct LimitedAvailabilityConfiguration : SwiftUI.WidgetConfiguration {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var storage: SwiftUI.LimitedAvailabilityConfigurationBase
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal init<W>(_ configuration: W) where W : SwiftUI.WidgetConfiguration
  nonisolated public static func _makeWidgetConfiguration(widget: SwiftUICore._GraphValue<SwiftUI.LimitedAvailabilityConfiguration>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
  @available(iOS 16.1, watchOS 9.1, macOS 13.0, *)
  @available(tvOS, unavailable)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.LimitedAvailabilityConfiguration : Swift.Sendable {
}
@_hasMissingDesignatedInitializers @available(iOS 16.1, macOS 13.0, watchOS 9.1, *)
@available(tvOS, unavailable)
@usableFromInline
internal class LimitedAvailabilityConfigurationBase {
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUI.LimitedAvailabilityConfigurationBase : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TabContent {
  nonisolated public func badge(_ count: Swift.Int) -> some SwiftUI.TabContent<Self.TabValue>
  
  nonisolated public func badge(_ label: SwiftUICore.Text?) -> some SwiftUI.TabContent<Self.TabValue>
  
  nonisolated public func badge(_ key: SwiftUICore.LocalizedStringKey) -> some SwiftUI.TabContent<Self.TabValue>
  
  @_disfavoredOverload nonisolated public func badge<S>(_ label: S) -> some SwiftUI.TabContent<Self.TabValue> where S : Swift.StringProtocol
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func refreshable(@_inheritActorContext action: @escaping @Sendable () async -> Swift.Void) -> some SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.EnvironmentValues {
  public var refresh: SwiftUI.RefreshAction? {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct RefreshAction : Swift.Sendable {
  public func callAsFunction() async
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol ImmersiveSpaceContent {
  associatedtype Body : SwiftUI.ImmersiveSpaceContent
  @SwiftUI.ImmersiveSpaceContentBuilder @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_functionBuilder public struct ImmersiveSpaceContentBuilder {
  public static func buildBlock<Content>(_ content: Content) -> Content where Content : SwiftUI.ImmersiveSpaceContent
}
@available(*, unavailable)
extension SwiftUI.ImmersiveSpaceContentBuilder : Swift.Sendable {
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Never : SwiftUI.ImmersiveSpaceContent {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.NavigationSplitViewStyle where Self == SwiftUI.ProminentDetailNavigationSplitViewStyle {
  @_Concurrency.MainActor @preconcurrency public static var prominentDetail: SwiftUI.ProminentDetailNavigationSplitViewStyle {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_Concurrency.MainActor @preconcurrency public struct ProminentDetailNavigationSplitViewStyle : SwiftUI.NavigationSplitViewStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.ProminentDetailNavigationSplitViewStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI39ProminentDetailNavigationSplitViewStyleV8makeBody13configurationQrAA0efgH13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.ProminentDetailNavigationSplitViewStyle : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct SearchFieldPlacement : Swift.Sendable {
  public static let automatic: SwiftUI.SearchFieldPlacement
  @available(tvOS, unavailable)
  public static let toolbar: SwiftUI.SearchFieldPlacement
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let sidebar: SwiftUI.SearchFieldPlacement
  @available(iOS 15.0, watchOS 8.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public static let navigationBarDrawer: SwiftUI.SearchFieldPlacement
  @available(iOS 15.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static func navigationBarDrawer(displayMode: SwiftUI.SearchFieldPlacement.NavigationBarDrawerDisplayMode) -> SwiftUI.SearchFieldPlacement
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.SearchFieldPlacement {
  @available(iOS 15.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public struct NavigationBarDrawerDisplayMode : Swift.Sendable {
    public static let automatic: SwiftUI.SearchFieldPlacement.NavigationBarDrawerDisplayMode
    public static let always: SwiftUI.SearchFieldPlacement.NavigationBarDrawerDisplayMode
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _ProjectionEffect : SwiftUICore.GeometryEffect, Swift.Equatable {
  public var transform: SwiftUICore.ProjectionTransform
  @inlinable nonisolated public init(transform: SwiftUICore.ProjectionTransform) {
        self.transform = transform
    }
  public func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.ProjectionTransform
  public static func == (a: SwiftUI._ProjectionEffect, b: SwiftUI._ProjectionEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func projectionEffect(_ transform: SwiftUICore.ProjectionTransform) -> some SwiftUICore.View {
        return modifier(_ProjectionEffect(transform: transform))
    }
  
}
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct SettingsLink<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  public init() where Label == SwiftUI.DefaultSettingsLinkLabel
  public init(@SwiftUICore.ViewBuilder label: () -> Label)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(macOS 14.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI12SettingsLinkV4bodyQrvp", 0) __<Label>
}
@available(*, unavailable)
extension SwiftUI.SettingsLink : Swift.Sendable {
}
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct DefaultSettingsLinkLabel : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(macOS 14.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24DefaultSettingsLinkLabelV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.DefaultSettingsLinkLabel : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _TransformEffect : SwiftUICore.GeometryEffect, Swift.Equatable {
  public var transform: CoreFoundation.CGAffineTransform
  @inlinable nonisolated public init(transform: CoreFoundation.CGAffineTransform) {
        self.transform = transform
    }
  public func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.ProjectionTransform
  public static func == (a: SwiftUI._TransformEffect, b: SwiftUI._TransformEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func transformEffect(_ transform: CoreFoundation.CGAffineTransform) -> some SwiftUICore.View {
        return modifier(_TransformEffect(transform: transform))
    }
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.VisualEffect {
  public func transformEffect(_ transform: SwiftUICore.ProjectionTransform) -> some SwiftUICore.VisualEffect
  
  public func transformEffect(_ transform: CoreFoundation.CGAffineTransform) -> some SwiftUICore.VisualEffect
  
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.HoverEffectContent {
  public func transformEffect(_ transform: CoreFoundation.CGAffineTransform) -> some SwiftUICore.HoverEffectContent
  
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public static func animate(_ animation: SwiftUICore.Animation, changes: () -> Swift.Void, completion: (() -> Swift.Void)? = nil)
  @available(iOS, introduced: 18.0, deprecated: 18.0, renamed: "animate(_:changes:completion:)")
  @available(macOS, unavailable)
  @available(tvOS, introduced: 18.0, deprecated: 18.0, renamed: "animate(_:changes:completion:)")
  @available(visionOS, introduced: 2.0, deprecated: 2.0, renamed: "animate(_:changes:completion:)")
  @_Concurrency.MainActor @preconcurrency public static func animate(with animation: SwiftUICore.Animation = Animation.default, changes: () -> Swift.Void, completion: (() -> Swift.Void)? = nil)
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func hoverEffect(_ effect: some CustomHoverEffect = .automatic, isEnabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func hoverEffect(_ effect: some CustomHoverEffect, in group: SwiftUI.HoverEffectGroup?, isEnabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(iOS 13.4, tvOS 16.0, visionOS 1.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @available(iOS 13.4, tvOS 16.0, visionOS 1.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload nonisolated public func hoverEffect(_ effect: SwiftUI.HoverEffect = .automatic) -> some SwiftUICore.View
  
}
@available(iOS 17.0, tvOS 17.0, visionOS 1.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_disfavoredOverload nonisolated public func hoverEffect(_ effect: SwiftUI.HoverEffect = .automatic, isEnabled: Swift.Bool = true) -> some SwiftUICore.View
  
  nonisolated public func defaultHoverEffect(_ effect: SwiftUI.HoverEffect?) -> some SwiftUICore.View
  
  @available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func defaultHoverEffect(_ effect: some CustomHoverEffect) -> some SwiftUICore.View
  
  nonisolated public func hoverEffectDisabled(_ disabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func hoverEffect(in group: SwiftUI.HoverEffectGroup? = nil, isEnabled: Swift.Bool = true, body: @escaping (SwiftUICore.EmptyHoverEffectContent, Swift.Bool, SwiftUICore.GeometryProxy) -> some HoverEffectContent) -> some SwiftUICore.View
  
}
@available(iOS 13.4, tvOS 16.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct HoverEffect {
  @available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init<E>(_ effect: E) where E : SwiftUICore.CustomHoverEffect
  public static let automatic: SwiftUI.HoverEffect
  @available(tvOS 17.0, *)
  public static let highlight: SwiftUI.HoverEffect
  public static let lift: SwiftUI.HoverEffect
}
@available(*, unavailable)
extension SwiftUI.HoverEffect : Swift.Sendable {
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.HoverEffect : SwiftUICore.CustomHoverEffect {
  public static func _makeCustomHoverEffect(effect: SwiftUICore._GraphValue<SwiftUI.HoverEffect>, inputs: SwiftUICore._CustomHoverEffectInputs, body: @escaping (SwiftUICore._CustomHoverEffectInputs) -> SwiftUICore._CustomHoverEffectOutputs) -> SwiftUICore._CustomHoverEffectOutputs
  @available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = Swift.Never
}
@available(iOS 17.0, tvOS 17.0, visionOS 1.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var isHoverEffectEnabled: Swift.Bool {
    get
    set
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.VisualEffect {
  public func rotationEffect(_ angle: SwiftUICore.Angle, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.VisualEffect
  
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.HoverEffectContent {
  public func rotationEffect(_ angle: SwiftUICore.Angle, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.HoverEffectContent
  
}
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.PrimitiveButtonStyle where Self == SwiftUI.AccessoryBarButtonStyle {
  @_Concurrency.MainActor @preconcurrency public static var accessoryBar: SwiftUI.AccessoryBarButtonStyle {
    get
  }
}
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct AccessoryBarButtonStyle : SwiftUI.PrimitiveButtonStyle {
  public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.AccessoryBarButtonStyle.Configuration) -> some SwiftUICore.View
  
  @available(macOS 14.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI23AccessoryBarButtonStyleV8makeBody13configurationQrAA09PrimitiveeF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.AccessoryBarButtonStyle : Swift.Sendable {
}
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.PrimitiveButtonStyle where Self == SwiftUI.AccessoryBarActionButtonStyle {
  @_Concurrency.MainActor @preconcurrency public static var accessoryBarAction: SwiftUI.AccessoryBarActionButtonStyle {
    get
  }
}
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct AccessoryBarActionButtonStyle : SwiftUI.PrimitiveButtonStyle {
  public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.AccessoryBarActionButtonStyle.Configuration) -> some SwiftUICore.View
  
  @available(macOS 14.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI29AccessoryBarActionButtonStyleV8makeBody13configurationQrAA09PrimitivefG13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.AccessoryBarActionButtonStyle : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.VisualEffect {
  public func scaleEffect(_ scale: CoreFoundation.CGSize, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.VisualEffect
  
  public func scaleEffect(_ scale: CoreFoundation.CGFloat, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.VisualEffect
  
  public func scaleEffect(x: CoreFoundation.CGFloat = 1.0, y: CoreFoundation.CGFloat = 1.0, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.VisualEffect
  
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.HoverEffectContent {
  public func scaleEffect(_ scale: CoreFoundation.CGSize, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.HoverEffectContent
  
  public func scaleEffect(_ scale: CoreFoundation.CGFloat, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.HoverEffectContent
  
  public func scaleEffect(x: CoreFoundation.CGFloat = 1.0, y: CoreFoundation.CGFloat = 1.0, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.HoverEffectContent
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct ButtonRole : Swift.Equatable, Swift.Sendable {
  public static let destructive: SwiftUI.ButtonRole
  public static let cancel: SwiftUI.ButtonRole
  public static func == (a: SwiftUI.ButtonRole, b: SwiftUI.ButtonRole) -> Swift.Bool
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.VisualEffect {
  public func blur(radius: CoreFoundation.CGFloat, opaque: Swift.Bool = false) -> some SwiftUICore.VisualEffect
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.VisualEffect {
  public func brightness(_ amount: Swift.Double) -> some SwiftUICore.VisualEffect
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore._AppearanceActionModifier : SwiftUI._SceneModifier {
  public static func _makeScene(modifier: SwiftUICore._GraphValue<SwiftUICore._AppearanceActionModifier>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.Animation {
  public static func timingCurve(_ curve: SwiftUICore.UnitCurve, duration: Foundation.TimeInterval) -> SwiftUICore.Animation
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.VisualEffect {
  public func contrast(_ amount: Swift.Double) -> some SwiftUICore.VisualEffect
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@preconcurrency @_Concurrency.MainActor public protocol ToolbarContent {
  associatedtype Body : SwiftUI.ToolbarContent
  @SwiftUI.ToolbarContentBuilder @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated static func _makeToolbar(content: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._ToolbarInputs) -> SwiftUI._ToolbarOutputs
  nonisolated static func _makeContent(content: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._GraphInputs, resolved: inout SwiftUI._ToolbarItemList)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol CustomizableToolbarContent : SwiftUI.ToolbarContent where Self.Body : SwiftUI.CustomizableToolbarContent {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContent {
  nonisolated public static func _makeContent(content: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._GraphInputs, resolved: inout SwiftUI._ToolbarItemList)
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.ToolbarContent {
  nonisolated public static func _makeToolbar(content: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._ToolbarInputs) -> SwiftUI._ToolbarOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Swift.Never : SwiftUI.ToolbarContent, SwiftUI.CustomizableToolbarContent {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct _ToolbarInputs {
}
@available(*, unavailable)
extension SwiftUI._ToolbarInputs : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct _ToolbarOutputs {
}
@available(*, unavailable)
extension SwiftUI._ToolbarOutputs : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _ToolbarItemList {
}
@available(*, unavailable)
extension SwiftUI._ToolbarItemList : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_functionBuilder public struct ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildExpression<Content>(_ content: Content) -> Content where Content : SwiftUI.ToolbarContent {
       content
    }
  public static func buildBlock<Content>(_ content: Content) -> some SwiftUI.ToolbarContent where Content : SwiftUI.ToolbarContent
  
  @_alwaysEmitIntoClient public static func buildExpression<Content>(_ content: Content) -> Content where Content : SwiftUI.CustomizableToolbarContent {
       content
    }
  public static func buildBlock<Content>(_ content: Content) -> some SwiftUI.CustomizableToolbarContent where Content : SwiftUI.CustomizableToolbarContent
  
  @available(*, unavailable, message: "this expression does not conform to 'ToolbarContent' or 'CustomizableToolbarContent'")
  @_disfavoredOverload @_alwaysEmitIntoClient public static func buildExpression(_ invalid: Any) -> some SwiftUI.CustomizableToolbarContent {
        fatalError()
    }
  
}
@available(*, unavailable)
extension SwiftUI.ToolbarContentBuilder : Swift.Sendable {
}
extension SwiftUI.ToolbarContentBuilder {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func buildIf<Content>(_ content: Content?) -> Content? where Content : SwiftUI.ToolbarContent
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func buildIf<Content>(_ content: Content?) -> Content? where Content : SwiftUI.CustomizableToolbarContent
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func buildEither<TrueContent, FalseContent>(first: TrueContent) -> SwiftUICore._ConditionalContent<TrueContent, FalseContent> where TrueContent : SwiftUI.ToolbarContent, FalseContent : SwiftUI.ToolbarContent
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func buildEither<TrueContent, FalseContent>(first: TrueContent) -> SwiftUICore._ConditionalContent<TrueContent, FalseContent> where TrueContent : SwiftUI.CustomizableToolbarContent, FalseContent : SwiftUI.CustomizableToolbarContent
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func buildEither<TrueContent, FalseContent>(second: FalseContent) -> SwiftUICore._ConditionalContent<TrueContent, FalseContent> where TrueContent : SwiftUI.ToolbarContent, FalseContent : SwiftUI.ToolbarContent
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func buildEither<TrueContent, FalseContent>(second: FalseContent) -> SwiftUICore._ConditionalContent<TrueContent, FalseContent> where TrueContent : SwiftUI.CustomizableToolbarContent, FalseContent : SwiftUI.CustomizableToolbarContent
  @available(iOS 17.5, macOS 14.5, tvOS 17.5, watchOS 10.5, *)
  @_alwaysEmitIntoClient public static func buildLimitedAvailability(_ content: any SwiftUI.ToolbarContent) -> some SwiftUI.ToolbarContent {
        if #unavailable(iOS 17.5, macOS 14.5, tvOS 17.5, watchOS 10.5) {
            return TupleToolbarContent(())
        } else {
            return LimitedAvailabilityToolbarContent(erasing: content)
        }
    }
  
  @available(iOS, introduced: 14.0, deprecated: 14.0, obsoleted: 17.5, message: "this code may crash on earlier versions of the OS; specify '#available(iOS 17.5, *)' or newer instead")
  @available(macOS, introduced: 11.0, deprecated: 11.0, obsoleted: 14.5, message: "this code may crash on earlier versions of the OS; specify '#available(macOS 14.5, *)' or newer instead")
  @available(tvOS, introduced: 14.0, deprecated: 14.0, obsoleted: 17.5, message: "this code may crash on earlier versions of the OS; specify '#available(tvOS 17.5, *)' or newer instead")
  @available(watchOS, introduced: 7.0, deprecated: 7.0, obsoleted: 10.5, message: "this code may crash on earlier versions of the OS; specify '#available(watchOS 10.5, *)' or newer instead")
  @_alwaysEmitIntoClient public static func buildLimitedAvailability<Content>(_ content: Content) -> some SwiftUI.ToolbarContent where Content : SwiftUI.ToolbarContent {
        content
    }
  
  @available(iOS 17.5, macOS 14.5, tvOS 17.5, watchOS 10.5, *)
  @_alwaysEmitIntoClient public static func buildLimitedAvailability(_ content: any SwiftUI.CustomizableToolbarContent) -> some SwiftUI.CustomizableToolbarContent {
        if #unavailable(iOS 17.5, macOS 14.5, tvOS 17.5, watchOS 10.5) {
            return TupleToolbarContent(())
        } else {
            return LimitedAvailabilityToolbarContent(erasing: content)
        }
    }
  
  @available(iOS, introduced: 14.0, deprecated: 14.0, obsoleted: 17.5, message: "this code may crash on earlier versions of the OS; specify '#available(iOS 17.5, *)' or newer instead")
  @available(macOS, introduced: 11.0, deprecated: 11.0, obsoleted: 14.5, message: "this code may crash on earlier versions of the OS; specify '#available(macOS 14.5, *)' or newer instead")
  @available(tvOS, introduced: 14.0, deprecated: 14.0, obsoleted: 17.5, message: "this code may crash on earlier versions of the OS; specify '#available(tvOS 17.5, *)' or newer instead")
  @available(watchOS, introduced: 7.0, deprecated: 7.0, obsoleted: 10.5, message: "this code may crash on earlier versions of the OS; specify '#available(watchOS 10.5, *)' or newer instead")
  @_alwaysEmitIntoClient public static func buildLimitedAvailability<Content>(_ content: Content) -> some SwiftUI.CustomizableToolbarContent where Content : SwiftUI.CustomizableToolbarContent {
        content
    }
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.VisualEffect {
  public func grayscale(_ amount: Swift.Double) -> some SwiftUICore.VisualEffect
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.VisualEffect {
  public func hueRotation(_ angle: SwiftUICore.Angle) -> some SwiftUICore.VisualEffect
  
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.WindowStyle where Self == SwiftUI.HiddenTitleBarWindowStyle {
  @_alwaysEmitIntoClient public static var hiddenTitleBar: SwiftUI.HiddenTitleBarWindowStyle {
    get { .init() }
  }
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct HiddenTitleBarWindowStyle : SwiftUI.WindowStyle {
  public typealias _Body = Swift.Never
  public init()
}
@available(*, unavailable)
extension SwiftUI.HiddenTitleBarWindowStyle : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.LabelStyle where Self == SwiftUI.IconOnlyLabelStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var iconOnly: SwiftUI.IconOnlyLabelStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct IconOnlyLabelStyle : SwiftUI.LabelStyle {
  public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.IconOnlyLabelStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI18IconOnlyLabelStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.IconOnlyLabelStyle : Swift.Sendable {
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
@available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
public protocol NavigationViewStyle {
  associatedtype _Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder func _body(configuration: SwiftUI._NavigationViewStyleConfiguration) -> Self._Body
  associatedtype _Body2 : SwiftUICore.View = SwiftUICore.EmptyView
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @SwiftUICore.ViewBuilder func _columnBasedBody(configuration: SwiftUI._NavigationViewStyleConfiguration) -> Self._Body2
}
extension SwiftUI.NavigationViewStyle {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func _columnBasedBody(configuration: SwiftUI._NavigationViewStyleConfiguration) -> Self._Body2
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
public struct _NavigationViewStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Content : SwiftUICore.View {
    @available(iOS 13.0, tvOS 13.0, watchOS 7.0, macOS 10.15, *)
    public typealias Body = Swift.Never
  }
  public let content: SwiftUI._NavigationViewStyleConfiguration.Content
}
@available(*, unavailable)
extension SwiftUI._NavigationViewStyleConfiguration.Content : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI._NavigationViewStyleConfiguration : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
extension SwiftUICore.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  nonisolated public func navigationViewStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.NavigationViewStyle
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func handlesExternalEvents(matching conditions: Swift.Set<Swift.String>) -> some SwiftUI.Scene
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct AccessibilityTechnologies : Swift.SetAlgebra, Swift.Sendable {
  public static let voiceOver: SwiftUI.AccessibilityTechnologies
  public static let switchControl: SwiftUI.AccessibilityTechnologies
  public init()
  public func union(_ other: SwiftUI.AccessibilityTechnologies) -> SwiftUI.AccessibilityTechnologies
  public mutating func formUnion(_ other: SwiftUI.AccessibilityTechnologies)
  public func intersection(_ other: SwiftUI.AccessibilityTechnologies) -> SwiftUI.AccessibilityTechnologies
  public mutating func formIntersection(_ other: SwiftUI.AccessibilityTechnologies)
  public func symmetricDifference(_ other: SwiftUI.AccessibilityTechnologies) -> SwiftUI.AccessibilityTechnologies
  public mutating func formSymmetricDifference(_ other: SwiftUI.AccessibilityTechnologies)
  public func contains(_ member: SwiftUI.AccessibilityTechnologies) -> Swift.Bool
  public mutating func insert(_ newMember: SwiftUI.AccessibilityTechnologies) -> (inserted: Swift.Bool, memberAfterInsert: SwiftUI.AccessibilityTechnologies)
  public mutating func remove(_ member: SwiftUI.AccessibilityTechnologies) -> SwiftUI.AccessibilityTechnologies?
  public mutating func update(with newMember: SwiftUI.AccessibilityTechnologies) -> SwiftUI.AccessibilityTechnologies?
  public static func == (a: SwiftUI.AccessibilityTechnologies, b: SwiftUI.AccessibilityTechnologies) -> Swift.Bool
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias ArrayLiteralElement = SwiftUI.AccessibilityTechnologies
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Element = SwiftUI.AccessibilityTechnologies
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityTechnologies {
  @_silgen_name("$s7SwiftUI25AccessibilityTechnologiesV9voiceOverACvsZ")
  @usableFromInline
  internal func _setAccessibilityTechnologiesVoiceOver(_ voiceOver: SwiftUI.AccessibilityTechnologies)
  @_silgen_name("$s7SwiftUI25AccessibilityTechnologiesV13switchControlACvsZ")
  @usableFromInline
  internal func _setAccessibilityTechnologiesSwitchControl(_ voiceOver: SwiftUI.AccessibilityTechnologies)
  @_silgen_name("$s7SwiftUI25AccessibilityTechnologiesV18fullKeyboardAccessACvsZ")
  @usableFromInline
  internal func _setAccessibilityTechnologiesFullKeyboardAccess(_ voiceOver: SwiftUI.AccessibilityTechnologies)
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func persistentSystemOverlays(_ visibility: SwiftUICore.Visibility) -> some SwiftUICore.View
  
}
extension SwiftUI.Scene {
  @available(macOS 15.0, iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func persistentSystemOverlays(_ preferredVisibility: SwiftUICore.Visibility) -> some SwiftUI.Scene
  
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "MagnifyGesture")
@available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "MagnifyGesture")
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "MagnifyGesture")
public struct MagnificationGesture : SwiftUICore.Gesture {
  public var minimumScaleDelta: CoreFoundation.CGFloat
  public init(minimumScaleDelta: CoreFoundation.CGFloat = 0.01)
  nonisolated public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUI.MagnificationGesture>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<SwiftUI.MagnificationGesture.Value>
  public typealias Value = CoreFoundation.CGFloat
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "MagnifyGesture")
  @available(tvOS, unavailable, renamed: "MagnifyGesture")
  @available(watchOS, unavailable, renamed: "MagnifyGesture")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "MagnifyGesture")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "MagnifyGesture")
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.MagnificationGesture : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct MagnifyGesture : SwiftUICore.Gesture {
  public struct Value : Swift.Equatable, Swift.Sendable {
    public var time: Foundation.Date
    public var magnification: CoreFoundation.CGFloat
    public var velocity: CoreFoundation.CGFloat
    public var startAnchor: SwiftUICore.UnitPoint
    public var startLocation: CoreFoundation.CGPoint
    public static func == (a: SwiftUI.MagnifyGesture.Value, b: SwiftUI.MagnifyGesture.Value) -> Swift.Bool
  }
  public var minimumScaleDelta: CoreFoundation.CGFloat
  public init(minimumScaleDelta: CoreFoundation.CGFloat = 0.01)
  nonisolated public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUI.MagnifyGesture>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<SwiftUI.MagnifyGesture.Value>
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.MagnifyGesture : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 14.0, *)
@available(watchOS, introduced: 6.0, deprecated: 7.0)
extension SwiftUICore.View {
  nonisolated public func contextMenu<MenuItems>(@SwiftUICore.ViewBuilder menuItems: () -> MenuItems) -> some SwiftUICore.View where MenuItems : SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, *)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func contextMenu<M, P>(@SwiftUICore.ViewBuilder menuItems: () -> M, @SwiftUICore.ViewBuilder preview: () -> P) -> some SwiftUICore.View where M : SwiftUICore.View, P : SwiftUICore.View
  
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use `contextMenu(menuItems:)` instead.")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `contextMenu(menuItems:)` instead.")
@available(tvOS, unavailable)
@available(watchOS, introduced: 6.0, deprecated: 7.0)
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use `contextMenu(menuItems:)` instead.")
extension SwiftUICore.View {
  nonisolated public func contextMenu<MenuItems>(_ contextMenu: SwiftUI.ContextMenu<MenuItems>?) -> some SwiftUICore.View where MenuItems : SwiftUICore.View
  
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use `contextMenu(menuItems:)` instead.")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `contextMenu(menuItems:)` instead.")
@available(tvOS, unavailable)
@available(watchOS, introduced: 6.0, deprecated: 7.0)
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use `contextMenu(menuItems:)` instead.")
public struct ContextMenu<MenuItems> where MenuItems : SwiftUICore.View {
  public init(@SwiftUICore.ViewBuilder menuItems: () -> MenuItems)
}
@available(*, unavailable)
extension SwiftUI.ContextMenu : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  nonisolated public func windowToolbarFullScreenVisibility(_ visibility: SwiftUI.WindowToolbarFullScreenVisibility) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct WindowToolbarFullScreenVisibility : Swift.Sendable {
  public static let automatic: SwiftUI.WindowToolbarFullScreenVisibility
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static let visible: SwiftUI.WindowToolbarFullScreenVisibility
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static let onHover: SwiftUI.WindowToolbarFullScreenVisibility
}
extension SwiftUICore.DynamicViewContent {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func dropDestination<T>(for payloadType: T.Type = T.self, action: @escaping ([T], Swift.Int) -> Swift.Void) -> some SwiftUICore.DynamicViewContent where T : CoreTransferable.Transferable
  
  @available(*, unavailable, message: "Unavailable for DynamicViewContent, use `dropDestination(for:action:)` instead.")
  public func dropDestination<T>(for payloadType: T.Type = T.self, action: @escaping (_ items: [T], _ location: CoreFoundation.CGPoint) -> Swift.Bool, isTargeted: (Swift.Bool) -> Swift.Void = { _ in }) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.DynamicViewContent {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public func onInsert(of supportedContentTypes: [UniformTypeIdentifiers.UTType], perform action: @escaping (Swift.Int, [Foundation.NSItemProvider]) -> Swift.Void) -> some SwiftUICore.DynamicViewContent
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
  public func onInsert(of acceptedTypeIdentifiers: [Swift.String], perform action: @escaping (Swift.Int, [Foundation.NSItemProvider]) -> Swift.Void) -> some SwiftUICore.DynamicViewContent
  
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct NewDocumentButton<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI17NewDocumentButtonV4bodyQrvp", 0) __<Label>
}
@available(*, unavailable)
extension SwiftUI.NewDocumentButton : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.NewDocumentButton where Label == SwiftUICore.Text {
  public init(_ label: SwiftUICore.Text? = nil, contentType: UniformTypeIdentifiers.UTType? = nil)
  public init(_ title: SwiftUICore.LocalizedStringKey, contentType: UniformTypeIdentifiers.UTType? = nil)
  @_disfavoredOverload public init(_ title: some StringProtocol, contentType: UniformTypeIdentifiers.UTType? = nil)
  public init<D>(_ label: SwiftUICore.Text? = nil, for documentType: D.Type = D.self, contentType: UniformTypeIdentifiers.UTType? = nil, prepareDocument: @escaping () async throws -> D? = { nil }) where D : SwiftUI.FileDocument
  public init<D>(_ title: SwiftUICore.LocalizedStringKey, for documentType: D.Type = D.self, contentType: UniformTypeIdentifiers.UTType? = nil, prepareDocument: @escaping () async throws -> D? = { nil }) where D : SwiftUI.FileDocument
  @_disfavoredOverload public init<D>(_ title: some StringProtocol, for documentType: D.Type = D.self, contentType: UniformTypeIdentifiers.UTType? = nil, prepareDocument: @escaping () async throws -> D? = { nil }) where D : SwiftUI.FileDocument
  public init<D>(_ label: SwiftUICore.Text? = nil, for documentType: D.Type = D.self, contentType: UniformTypeIdentifiers.UTType? = nil, prepareDocument: @escaping () async throws -> D? = { nil }) where D : SwiftUI.ReferenceFileDocument
  public init<D>(_ title: SwiftUICore.LocalizedStringKey, for documentType: D.Type = D.self, contentType: UniformTypeIdentifiers.UTType? = nil, prepareDocument: @escaping () async throws -> D? = { nil }) where D : SwiftUI.ReferenceFileDocument
  @_disfavoredOverload public init<D>(_ title: some StringProtocol, for documentType: D.Type = D.self, contentType: UniformTypeIdentifiers.UTType? = nil, prepareDocument: @escaping () async throws -> D? = { nil }) where D : SwiftUI.ReferenceFileDocument
  public init(_ label: SwiftUICore.Text? = nil, contentType: UniformTypeIdentifiers.UTType, prepareDocumentURL: @escaping () async throws -> Foundation.URL? = { nil })
  public init(_ title: SwiftUICore.LocalizedStringKey, contentType: UniformTypeIdentifiers.UTType, prepareDocumentURL: @escaping () async throws -> Foundation.URL? = { nil })
  @_disfavoredOverload public init(_ title: some StringProtocol, contentType: UniformTypeIdentifiers.UTType, prepareDocumentURL: @escaping () async throws -> Foundation.URL? = { nil })
}
@available(*, unavailable)
extension SwiftUI.DefaultDocumentGroupLaunchActions : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.VisualEffect {
  public func saturation(_ amount: Swift.Double) -> some SwiftUICore.VisualEffect
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct SubmitTriggers : Swift.OptionSet, Swift.Sendable {
  public typealias RawValue = Swift.Int
  public let rawValue: SwiftUI.SubmitTriggers.RawValue
  public init(rawValue: SwiftUI.SubmitTriggers.RawValue)
  public static let text: SwiftUI.SubmitTriggers
  public static let search: SwiftUI.SubmitTriggers
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias ArrayLiteralElement = SwiftUI.SubmitTriggers
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Element = SwiftUI.SubmitTriggers
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.VisualEffect {
  public func opacity(_ opacity: Swift.Double) -> some SwiftUICore.VisualEffect
  
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.HoverEffectContent {
  public func opacity(_ opacity: Swift.Double) -> some SwiftUICore.HoverEffectContent
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.ShapeStyle {
  @inlinable public func opacity(_ opacity: Swift.Double) -> some SwiftUICore.ShapeStyle {
        _OpacityShapeStyle(style: self, opacity: Float(opacity))
    }
  
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func toolbarBackground<S>(_ style: S, for bars: SwiftUI.ToolbarPlacement...) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle
  
  @available(iOS, introduced: 16.0, deprecated: 100000.0, renamed: "toolbarBackgroundVisibility(_:for:)")
  @available(macOS, introduced: 13.0, deprecated: 100000.0, renamed: "toolbarBackgroundVisibility(_:for:)")
  @available(tvOS, introduced: 16.0, deprecated: 100000.0, renamed: "toolbarBackgroundVisibility(_:for:)")
  @available(watchOS, introduced: 9.0, deprecated: 100000.0, renamed: "toolbarBackgroundVisibility(_:for:)")
  nonisolated public func toolbarBackground(_ visibility: SwiftUICore.Visibility, for bars: SwiftUI.ToolbarPlacement...) -> some SwiftUICore.View
  
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func toolbarBackgroundVisibility(_ visibility: SwiftUICore.Visibility, for bars: SwiftUI.ToolbarPlacement...) -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func toolbarColorScheme(_ colorScheme: SwiftUICore.ColorScheme?, for bars: SwiftUI.ToolbarPlacement...) -> some SwiftUICore.View
  
  @available(iOS, introduced: 16.0, deprecated: 100000.0, renamed: "toolbarVisibility(_:for:)")
  @available(macOS, introduced: 13.0, deprecated: 100000.0, renamed: "toolbarVisibility(_:for:)")
  @available(tvOS, introduced: 16.0, deprecated: 100000.0, renamed: "toolbarVisibility(_:for:)")
  @available(watchOS, introduced: 9.0, deprecated: 100000.0, renamed: "toolbarVisibility(_:for:)")
  nonisolated public func toolbar(_ visibility: SwiftUICore.Visibility, for bars: SwiftUI.ToolbarPlacement...) -> some SwiftUICore.View
  
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func toolbarVisibility(_ visibility: SwiftUICore.Visibility, for bars: SwiftUI.ToolbarPlacement...) -> some SwiftUICore.View
  
  @available(watchOS 9.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func toolbarForegroundStyle<S>(_ style: S, for bars: SwiftUI.ToolbarPlacement...) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct ItemProviderTraitKey : SwiftUICore._ViewTraitKey {
  @usableFromInline
  internal typealias Value = Swift.Optional<() -> Foundation.NSItemProvider?>
  @inlinable internal static var defaultValue: SwiftUI.ItemProviderTraitKey.Value {
    get { nil }
  }
}
@available(*, unavailable)
extension SwiftUI.ItemProviderTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func itemProvider(_ action: Swift.Optional<() -> Foundation.NSItemProvider?>) -> some SwiftUICore.View {
        return _trait(ItemProviderTraitKey.self, action)
    }
  
}
@available(iOS 14.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ListStyle where Self == SwiftUI.InsetGroupedListStyle {
  @_alwaysEmitIntoClient public static var insetGrouped: SwiftUI.InsetGroupedListStyle {
    get { .init() }
  }
}
@available(iOS 14.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct InsetGroupedListStyle : SwiftUI.ListStyle {
  public init()
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.InsetGroupedListStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.InsetGroupedListStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.InsetGroupedListStyle : Swift.Sendable {
}
@available(iOS 16.1, macOS 13.0, tvOS 16.1, watchOS 9.1, *)
public struct _PlatformViewRepresentableLayoutOptions : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  @available(iOS 16.1, tvOS 16.1, watchOS 9.1, macOS 13.0, *)
  public typealias ArrayLiteralElement = SwiftUI._PlatformViewRepresentableLayoutOptions
  @available(iOS 16.1, tvOS 16.1, watchOS 9.1, macOS 13.0, *)
  public typealias Element = SwiftUI._PlatformViewRepresentableLayoutOptions
  @available(iOS 16.1, tvOS 16.1, watchOS 9.1, macOS 13.0, *)
  public typealias RawValue = Swift.Int
}
@available(*, unavailable)
extension SwiftUI._PlatformViewRepresentableLayoutOptions : Swift.Sendable {
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct OrnamentAttachmentAnchor : Swift.Sendable {
  public static func scene(_ anchor: SwiftUICore.UnitPoint) -> SwiftUI.OrnamentAttachmentAnchor
}
extension SwiftUICore.View {
  @available(visionOS 1.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func ornament<Content>(visibility: SwiftUICore.Visibility = .automatic, attachmentAnchor: SwiftUI.OrnamentAttachmentAnchor, contentAlignment: SwiftUICore.Alignment = .center, @SwiftUICore.ViewBuilder ornament: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@preconcurrency @_Concurrency.MainActor public protocol TabContent<TabValue> {
  associatedtype TabValue : Swift.Hashable where Self.TabValue == Self.Body.TabValue
  associatedtype _IdentifiedView : SwiftUICore.View = SwiftUI._TabContentBodyAdaptor<Self>
  @_Concurrency.MainActor @preconcurrency var _identifiedView: Self._IdentifiedView { get }
  associatedtype Body : SwiftUI.TabContent
  @SwiftUI.TabContentBuilder<Self.TabValue> @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.TabContent where Self._IdentifiedView == SwiftUI._TabContentBodyAdaptor<Self> {
  @_Concurrency.MainActor @preconcurrency public var _identifiedView: SwiftUI._TabContentBodyAdaptor<Self> {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct _TabContentBodyAdaptor<C> : SwiftUICore.View where C : SwiftUI.TabContent {
  @_Concurrency.MainActor @preconcurrency public var body: C.Body._IdentifiedView {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Body = C.Body._IdentifiedView
}
@available(*, unavailable)
extension SwiftUI._TabContentBodyAdaptor : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_functionBuilder public struct TabContentBuilder<TabValue> where TabValue : Swift.Hashable {
  public struct Content<C> : SwiftUICore.View where C : SwiftUI.TabContent {
    @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
      get
    }
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
    public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI17TabContentBuilderV0D0V4bodyQrvp", 0) __<TabValue, C>
  }
  @_alwaysEmitIntoClient public static func buildExpression(_ content: some TabContent<TabValue>) -> some SwiftUI.TabContent<TabValue> {
        content
    }
  
  @available(*, unavailable, message: "this expression does not conform to 'TabContent'")
  @_disfavoredOverload @_alwaysEmitIntoClient public static func buildExpression(_ invalid: Any) -> some SwiftUI.TabContent<TabValue> {
        _TupleTabContent(())
    }
  
  @_alwaysEmitIntoClient public static func buildBlock(_ content: some TabContent<TabValue>) -> some SwiftUI.TabContent<TabValue> {
        content
    }
  
  @_alwaysEmitIntoClient public static func buildIf(_ content: (some TabContent<TabValue>)?) -> (some SwiftUI.TabContent<TabValue>)? {
        content
    }
  
  @_alwaysEmitIntoClient public static func buildEither<T, F>(first: T) -> SwiftUICore._ConditionalContent<T, F> where TabValue == T.TabValue, T : SwiftUI.TabContent, F : SwiftUI.TabContent, T.TabValue == F.TabValue {
        .init(storage: .trueContent(first))
    }
  @_alwaysEmitIntoClient public static func buildEither<T, F>(second: F) -> SwiftUICore._ConditionalContent<T, F> where TabValue == T.TabValue, T : SwiftUI.TabContent, F : SwiftUI.TabContent, T.TabValue == F.TabValue {
        .init(storage: .falseContent(second))
    }
  @_alwaysEmitIntoClient public static func buildLimitedAvailability<T>(_ content: T) -> SwiftUI.AnyTabContent<T.TabValue> where T : SwiftUI.TabContent {
        AnyTabContent(content)
    }
}
@available(*, unavailable)
extension SwiftUI.TabContentBuilder : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.TabContentBuilder.Content : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore._ConditionalContent : SwiftUI.TabContent where TrueContent : SwiftUI.TabContent, FalseContent : SwiftUI.TabContent, TrueContent.TabValue == FalseContent.TabValue {
  public typealias TabValue = TrueContent.TabValue
  @usableFromInline
  internal init(storage: SwiftUICore._ConditionalContent<TrueContent, FalseContent>.Storage)
  @_Concurrency.MainActor @preconcurrency public var _identifiedView: SwiftUICore._ConditionalContent<TrueContent._IdentifiedView, FalseContent._IdentifiedView> {
    get
  }
  public typealias Body = SwiftUICore._ConditionalContent<TrueContent, FalseContent>
  @_Concurrency.MainActor @preconcurrency public var body: SwiftUICore._ConditionalContent<TrueContent, FalseContent> {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias _IdentifiedView = SwiftUICore._ConditionalContent<TrueContent._IdentifiedView, FalseContent._IdentifiedView>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension Swift.Optional : SwiftUI.TabContent where Wrapped : SwiftUI.TabContent {
  public typealias TabValue = Wrapped.TabValue
  @inlinable @_Concurrency.MainActor @preconcurrency public var _identifiedView: Wrapped._IdentifiedView? {
    get {
        self.map { $0._identifiedView }
    }
  }
  public typealias Body = Swift.Optional<Wrapped>
  @_Concurrency.MainActor @preconcurrency public var body: Swift.Optional<Wrapped> {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias _IdentifiedView = Wrapped._IdentifiedView?
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.ForEach : SwiftUI.TabContent where Content : SwiftUI.TabContent {
  public typealias TabValue = Content.TabValue
  nonisolated public init<V>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUI.TabContentBuilder<V> content: @escaping (Data.Element) -> Content) where V == Content.TabValue
  @usableFromInline
  @_disfavoredOverload internal init<V>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUI.TabContentBuilder<V?> liftedContent content: @escaping (Data.Element) -> Content) where V : Swift.Hashable, Content.TabValue == V?
  @_disfavoredOverload nonisolated public init<V>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUI.TabContentBuilder<V?> content: @escaping (Data.Element) -> Content) where V : Swift.Hashable, Content.TabValue == V?
  @_Concurrency.MainActor @preconcurrency public var _identifiedView: SwiftUICore.ForEach<Data, ID, Content._IdentifiedView> {
    get
  }
  public typealias Body = SwiftUICore.ForEach<Data, ID, Content>
  @_Concurrency.MainActor @preconcurrency public var body: SwiftUICore.ForEach<Data, ID, Content> {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias _IdentifiedView = SwiftUICore.ForEach<Data, ID, Content._IdentifiedView>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.ForEach where ID == Data.Element.ID, Content : SwiftUI.TabContent, Data.Element : Swift.Identifiable {
  public init<V>(_ data: Data, @SwiftUI.TabContentBuilder<V> content: @escaping (Data.Element) -> Content) where V == Content.TabValue
  @usableFromInline
  @_disfavoredOverload internal init<V>(_ data: Data, @SwiftUI.TabContentBuilder<V?> liftedContent content: @escaping (Data.Element) -> Content) where V : Swift.Hashable, Content.TabValue == V?
  @_disfavoredOverload public init<V>(_ data: Data, @SwiftUI.TabContentBuilder<V?> content: @escaping (Data.Element) -> Content) where V : Swift.Hashable, Content.TabValue == V?
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.ForEach where Data == Swift.Range<Swift.Int>, ID == Swift.Int, Content : SwiftUI.TabContent {
  @_semantics("swiftui.requires_constant_range") public init<V>(_ data: Swift.Range<Swift.Int>, @SwiftUI.TabContentBuilder<V> content: @escaping (Swift.Int) -> Content) where V == Content.TabValue
  @usableFromInline
  @_disfavoredOverload @_semantics("swiftui.requires_constant_range") internal init<V>(_ data: Swift.Range<Swift.Int>, @SwiftUI.TabContentBuilder<V?> liftedContent content: @escaping (Swift.Int) -> Content) where V : Swift.Hashable, Content.TabValue == V?
  @_disfavoredOverload @_semantics("swiftui.requires_constant_range") public init<V>(_ data: Swift.Range<Swift.Int>, @SwiftUI.TabContentBuilder<V?> content: @escaping (Swift.Int) -> Content) where V : Swift.Hashable, Content.TabValue == V?
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.Group : SwiftUI.TabContent where Content : SwiftUI.TabContent {
  public typealias TabValue = Content.TabValue
  public init<V>(@SwiftUI.TabContentBuilder<V> content: () -> Content) where V == Content.TabValue
  public init<V>(@SwiftUI.TabContentBuilder<V?> content: () -> Content) where V : Swift.Hashable, Content.TabValue == V?
  @inlinable @_Concurrency.MainActor @preconcurrency public var _identifiedView: Content._IdentifiedView {
    get {
        content._identifiedView
    }
  }
  public typealias Body = SwiftUICore.Group<Content>
  @_Concurrency.MainActor @preconcurrency public var body: SwiftUICore.Group<Content> {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias _IdentifiedView = Content._IdentifiedView
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@usableFromInline
@frozen @_Concurrency.MainActor @preconcurrency internal struct _TupleTabContent<T, U> where T : Swift.Hashable {
  @usableFromInline
  internal typealias TabValue = T
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal let _identifiedView: SwiftUICore.TupleView<U>
  @inlinable @_Concurrency.MainActor @preconcurrency internal init(_ content: U) { _identifiedView = .init(content) }
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var body: SwiftUI._TupleTabContent<T, U> {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @usableFromInline
  internal typealias Body = SwiftUI._TupleTabContent<T, U>
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @usableFromInline
  internal typealias _IdentifiedView = SwiftUICore.TupleView<U>
}
@available(*, unavailable)
extension SwiftUI._TupleTabContent : Swift.Sendable {
}
@available(iOS 14.0, tvOS 14.0, watchOS 7.0, *)
@available(macOS, unavailable)
extension SwiftUI.TabViewStyle where Self == SwiftUI.PageTabViewStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var page: SwiftUI.PageTabViewStyle {
    get { .init() }
  }
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static func page(indexDisplayMode: SwiftUI.PageTabViewStyle.IndexDisplayMode) -> SwiftUI.PageTabViewStyle {
        .init(indexDisplayMode: indexDisplayMode)
    }
}
@available(iOS 14.0, tvOS 14.0, watchOS 7.0, *)
@available(macOS, unavailable)
public struct PageTabViewStyle : SwiftUI.TabViewStyle {
  public struct IndexDisplayMode : Swift.Sendable {
    public static let automatic: SwiftUI.PageTabViewStyle.IndexDisplayMode
    @available(watchOS 8.0, *)
    public static let always: SwiftUI.PageTabViewStyle.IndexDisplayMode
    @available(watchOS 8.0, *)
    public static let never: SwiftUI.PageTabViewStyle.IndexDisplayMode
  }
  public init(indexDisplayMode: SwiftUI.PageTabViewStyle.IndexDisplayMode = .automatic)
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.PageTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.PageTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.PageTabViewStyle : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct PaletteSelectionEffect : Swift.Sendable, Swift.Equatable {
  public static func == (lhs: SwiftUI.PaletteSelectionEffect, rhs: SwiftUI.PaletteSelectionEffect) -> Swift.Bool
  public static let automatic: SwiftUI.PaletteSelectionEffect
  public static func symbolVariant(_ variant: SwiftUICore.SymbolVariants) -> SwiftUI.PaletteSelectionEffect
  public static let custom: SwiftUI.PaletteSelectionEffect
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func paletteSelectionEffect(_ effect: SwiftUI.PaletteSelectionEffect) -> some SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public enum SidebarRowSize : Swift.Sendable {
  case small
  case medium
  case large
  public static func == (a: SwiftUI.SidebarRowSize, b: SwiftUI.SidebarRowSize) -> Swift.Bool
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.SidebarRowSize : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.EnvironmentValues {
  public var sidebarRowSize: SwiftUI.SidebarRowSize {
    get
    set
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct ContentMarginPlacement {
  public static var automatic: SwiftUI.ContentMarginPlacement {
    get
  }
  public static var scrollContent: SwiftUI.ContentMarginPlacement {
    get
  }
  public static var scrollIndicators: SwiftUI.ContentMarginPlacement {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.ContentMarginPlacement : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct AccessoryCircularCapacityGaugeStyle : SwiftUI.GaugeStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.AccessoryCircularCapacityGaugeStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, watchOS 9.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI35AccessoryCircularCapacityGaugeStyleV8makeBody13configurationQrAA0fG13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.AccessoryCircularCapacityGaugeStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.GaugeStyle where Self == SwiftUI.AccessoryCircularCapacityGaugeStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var accessoryCircularCapacity: SwiftUI.AccessoryCircularCapacityGaugeStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@preconcurrency @_Concurrency.MainActor public protocol ButtonStyle {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.ButtonStyleConfiguration
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct ButtonStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Label : SwiftUICore.View {
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias Body = Swift.Never
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public let role: SwiftUI.ButtonRole?
  public let label: SwiftUI.ButtonStyleConfiguration.Label
  public let isPressed: Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.ButtonStyleConfiguration : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.ButtonStyleConfiguration.Label : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  nonisolated public func buttonStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.ButtonStyle
  
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.GaugeStyle where Self == SwiftUI.CircularGaugeStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var circular: SwiftUI.CircularGaugeStyle {
    get { .init() }
  }
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct CircularGaugeStyle : SwiftUI.GaugeStyle {
  public init()
  public init(tint: SwiftUICore.Color)
  public init(tint: SwiftUICore.Gradient)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.CircularGaugeStyle.Configuration) -> some SwiftUICore.View
  
  @available(watchOS 7.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI18CircularGaugeStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.CircularGaugeStyle : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol TextFieldStyle {
  associatedtype _Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder func _body(configuration: SwiftUI.TextField<Self._Label>) -> Self._Body
  typealias _Label = SwiftUI._TextFieldStyleLabel
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _TextFieldStyleLabel : SwiftUICore.View {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._TextFieldStyleLabel : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  nonisolated public func textFieldStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.TextFieldStyle
  
}
@available(iOS 16.0, tvOS 16.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct UIHostingConfiguration<Content, Background> : UIKit.UIContentConfiguration where Content : SwiftUICore.View, Background : SwiftUICore.View {
  public func background<B>(@SwiftUICore.ViewBuilder content: () -> B) -> SwiftUI.UIHostingConfiguration<Content, B> where B : SwiftUICore.View
  public func background<S>(_ style: S) -> SwiftUI.UIHostingConfiguration<Content, SwiftUI._UIHostingConfigurationBackgroundView<S>> where S : SwiftUICore.ShapeStyle
  public func margins(_ edges: SwiftUICore.Edge.Set = .all, _ length: CoreFoundation.CGFloat) -> SwiftUI.UIHostingConfiguration<Content, Background>
  public func margins(_ edges: SwiftUICore.Edge.Set = .all, _ insets: SwiftUICore.EdgeInsets) -> SwiftUI.UIHostingConfiguration<Content, Background>
  public func minSize(width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil) -> SwiftUI.UIHostingConfiguration<Content, Background>
  @available(*, deprecated, message: "Please pass one or more parameters.")
  @_alwaysEmitIntoClient public func minSize() -> SwiftUI.UIHostingConfiguration<Content, Background> { self }
  @_Concurrency.MainActor public func makeContentView() -> any UIKit.UIView & UIKit.UIContentView
  public func updated(for state: any UIKit.UIConfigurationState) -> SwiftUI.UIHostingConfiguration<Content, Background>
}
@available(*, unavailable)
extension SwiftUI.UIHostingConfiguration : Swift.Sendable {
}
@available(iOS 16.0, tvOS 16.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.UIHostingConfiguration where Background == SwiftUICore.EmptyView {
  public init(@SwiftUICore.ViewBuilder content: () -> Content)
}
@available(iOS 16.0, tvOS 16.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct _UIHostingConfigurationBackgroundView<Style> : SwiftUICore.View where Style : SwiftUICore.ShapeStyle {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, tvOS 16.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI37_UIHostingConfigurationBackgroundViewV4bodyQrvp", 0) __<Style>
}
@available(*, unavailable)
extension SwiftUI._UIHostingConfigurationBackgroundView : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
public struct SharePreview<Image, Icon> where Image : CoreTransferable.Transferable, Icon : CoreTransferable.Transferable {
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: Image, icon: Icon)
  @_disfavoredOverload public init<S>(_ title: S, image: Image, icon: Icon) where S : Swift.StringProtocol
  public init(_ title: SwiftUICore.Text, image: Image, icon: Icon)
}
@available(*, unavailable)
extension SwiftUI.SharePreview : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.SharePreview where Image == Swift.Never {
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, icon: Icon)
  @_disfavoredOverload public init<S>(_ title: S, icon: Icon) where S : Swift.StringProtocol
  public init(_ title: SwiftUICore.Text, icon: Icon)
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.SharePreview where Icon == Swift.Never {
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: Image)
  @_disfavoredOverload public init<S>(_ title: S, image: Image) where S : Swift.StringProtocol
  public init(_ title: SwiftUICore.Text, image: Image)
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.SharePreview where Image == Swift.Never, Icon == Swift.Never {
  public init(_ titleKey: SwiftUICore.LocalizedStringKey)
  @_disfavoredOverload public init<S>(_ title: S) where S : Swift.StringProtocol
  public init(_ title: SwiftUICore.Text)
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.NavigationLink where Destination == Swift.Never {
  nonisolated public init<P>(value: P?, @SwiftUICore.ViewBuilder label: () -> Label) where P : Swift.Hashable
  nonisolated public init<P>(_ titleKey: SwiftUICore.LocalizedStringKey, value: P?) where Label == SwiftUICore.Text, P : Swift.Hashable
  @_disfavoredOverload nonisolated public init<S, P>(_ title: S, value: P?) where Label == SwiftUICore.Text, S : Swift.StringProtocol, P : Swift.Hashable
  nonisolated public init<P>(value: P?, @SwiftUICore.ViewBuilder label: () -> Label) where P : Swift.Decodable, P : Swift.Encodable, P : Swift.Hashable
  nonisolated public init<P>(_ titleKey: SwiftUICore.LocalizedStringKey, value: P?) where Label == SwiftUICore.Text, P : Swift.Decodable, P : Swift.Encodable, P : Swift.Hashable
  @_disfavoredOverload nonisolated public init<S, P>(_ title: S, value: P?) where Label == SwiftUICore.Text, S : Swift.StringProtocol, P : Swift.Decodable, P : Swift.Encodable, P : Swift.Hashable
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func alert<A>(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder actions: () -> A) -> some SwiftUICore.View where A : SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func alert<S, A>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder actions: () -> A) -> some SwiftUICore.View where S : Swift.StringProtocol, A : SwiftUICore.View
  
  nonisolated public func alert<A>(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder actions: () -> A) -> some SwiftUICore.View where A : SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func alert<A, M>(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder actions: () -> A, @SwiftUICore.ViewBuilder message: () -> M) -> some SwiftUICore.View where A : SwiftUICore.View, M : SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func alert<S, A, M>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder actions: () -> A, @SwiftUICore.ViewBuilder message: () -> M) -> some SwiftUICore.View where S : Swift.StringProtocol, A : SwiftUICore.View, M : SwiftUICore.View
  
  nonisolated public func alert<A, M>(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder actions: () -> A, @SwiftUICore.ViewBuilder message: () -> M) -> some SwiftUICore.View where A : SwiftUICore.View, M : SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func alert<A, T>(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A) -> some SwiftUICore.View where A : SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func alert<S, A, T>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A) -> some SwiftUICore.View where S : Swift.StringProtocol, A : SwiftUICore.View
  
  nonisolated public func alert<A, T>(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A) -> some SwiftUICore.View where A : SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func alert<A, M, T>(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A, @SwiftUICore.ViewBuilder message: (T) -> M) -> some SwiftUICore.View where A : SwiftUICore.View, M : SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func alert<S, A, M, T>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A, @SwiftUICore.ViewBuilder message: (T) -> M) -> some SwiftUICore.View where S : Swift.StringProtocol, A : SwiftUICore.View, M : SwiftUICore.View
  
  nonisolated public func alert<A, M, T>(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A, @SwiftUICore.ViewBuilder message: (T) -> M) -> some SwiftUICore.View where A : SwiftUICore.View, M : SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func alert<E, A>(isPresented: SwiftUICore.Binding<Swift.Bool>, error: E?, @SwiftUICore.ViewBuilder actions: () -> A) -> some SwiftUICore.View where E : Foundation.LocalizedError, A : SwiftUICore.View
  
  nonisolated public func alert<E, A, M>(isPresented: SwiftUICore.Binding<Swift.Bool>, error: E?, @SwiftUICore.ViewBuilder actions: (E) -> A, @SwiftUICore.ViewBuilder message: (E) -> M) -> some SwiftUICore.View where E : Foundation.LocalizedError, A : SwiftUICore.View, M : SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func pasteDestination<T>(for payloadType: T.Type = T.self, action: @escaping ([T]) -> Swift.Void, validator: @escaping ([T]) -> [T] = { $0 }) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func cuttable<T>(for payloadType: T.Type = T.self, action: @escaping () -> [T]) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func copyable<T>(_ payload: @autoclosure @escaping () -> [T]) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func onCommand(_ selector: ObjectiveC.Selector, perform action: (() -> Swift.Void)?) -> some SwiftUICore.View
  
  @available(macOS 11.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func onPasteCommand(of supportedContentTypes: [UniformTypeIdentifiers.UTType], perform payloadAction: @escaping ([Foundation.NSItemProvider]) -> Swift.Void) -> some SwiftUICore.View
  
  @available(macOS 11.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func onPasteCommand<Payload>(of supportedContentTypes: [UniformTypeIdentifiers.UTType], validator: @escaping ([Foundation.NSItemProvider]) -> Payload?, perform payloadAction: @escaping (Payload) -> Swift.Void) -> some SwiftUICore.View
  
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func onCopyCommand(perform payloadAction: (() -> [Foundation.NSItemProvider])?) -> some SwiftUICore.View
  
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func onCutCommand(perform payloadAction: (() -> [Foundation.NSItemProvider])?) -> some SwiftUICore.View
  
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func onPasteCommand(of supportedTypes: [Swift.String], perform payloadAction: @escaping ([Foundation.NSItemProvider]) -> Swift.Void) -> some SwiftUICore.View
  
  nonisolated public func onPasteCommand<Payload>(of supportedTypes: [Swift.String], validator: @escaping ([Foundation.NSItemProvider]) -> Payload?, perform payloadAction: @escaping (Payload) -> Swift.Void) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func searchSuggestions<S>(@SwiftUICore.ViewBuilder _ suggestions: () -> S) -> some SwiftUICore.View where S : SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS, introduced: 15.0, deprecated: 100000.0, message: "Use the searchable modifier with the searchSuggestions modifier")
  @available(macOS, introduced: 12.0, deprecated: 100000.0, message: "Use the searchable modifier with the searchSuggestions modifier")
  @available(tvOS, introduced: 15.0, deprecated: 100000.0, message: "Use the searchable modifier with the searchSuggestions modifier")
  @available(watchOS, introduced: 8.0, deprecated: 100000.0, message: "Use the searchable modifier with the searchSuggestions modifier")
  nonisolated public func searchable<S>(text: SwiftUICore.Binding<Swift.String>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder suggestions: () -> S) -> some SwiftUICore.View where S : SwiftUICore.View
  
  @available(iOS, introduced: 15.0, deprecated: 100000.0, message: "Use the searchable modifier with the searchSuggestions modifier")
  @available(macOS, introduced: 12.0, deprecated: 100000.0, message: "Use the searchable modifier with the searchSuggestions modifier")
  @available(tvOS, introduced: 15.0, deprecated: 100000.0, message: "Use the searchable modifier with the searchSuggestions modifier")
  @available(watchOS, introduced: 8.0, deprecated: 100000.0, message: "Use the searchable modifier with the searchSuggestions modifier")
  nonisolated public func searchable<S>(text: SwiftUICore.Binding<Swift.String>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder suggestions: () -> S) -> some SwiftUICore.View where S : SwiftUICore.View
  
  @available(iOS, introduced: 15.0, deprecated: 100000.0, message: "Use the searchable modifier with the searchSuggestions modifier")
  @available(macOS, introduced: 12.0, deprecated: 100000.0, message: "Use the searchable modifier with the searchSuggestions modifier")
  @available(tvOS, introduced: 15.0, deprecated: 100000.0, message: "Use the searchable modifier with the searchSuggestions modifier")
  @available(watchOS, introduced: 8.0, deprecated: 100000.0, message: "Use the searchable modifier with the searchSuggestions modifier")
  @_disfavoredOverload nonisolated public func searchable<V, S>(text: SwiftUICore.Binding<Swift.String>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: S, @SwiftUICore.ViewBuilder suggestions: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View, S : Swift.StringProtocol
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
extension SwiftUICore.View {
  @available(iOS, deprecated: 100000.0, message: "Use `Tab(title:image:value:content:)` and related initializers instead")
  @available(macOS, deprecated: 100000.0, message: "Use `Tab(title:image:value:content:)` and related initializers instead")
  @available(tvOS, deprecated: 100000.0, message: "Use `Tab(title:image:value:content:)` and related initializers instead")
  @available(watchOS, deprecated: 100000.0, message: "Use `Tab(title:image:value:content:)` and related initializers instead")
  nonisolated public func tabItem<V>(@SwiftUICore.ViewBuilder _ label: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
internal struct KeyboardShortcutPickerOptionTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.KeyboardShortcut? {
    get { nil }
  }
  @available(iOS 14.0, macOS 11.0, *)
  @usableFromInline
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  internal typealias Value = SwiftUI.KeyboardShortcut?
}
@available(*, unavailable)
extension SwiftUI.KeyboardShortcutPickerOptionTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct OnMoveTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Optional<(Foundation.IndexSet, Swift.Int) -> Swift.Void> {
    get { nil }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  internal typealias Value = Swift.Optional<(Foundation.IndexSet, Swift.Int) -> Swift.Void>
}
@available(*, unavailable)
extension SwiftUI.OnMoveTraitKey : Swift.Sendable {
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@usableFromInline
internal struct OnMoveClipBackgroundTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @available(iOS 15.0, *)
  @usableFromInline
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  internal typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.OnMoveClipBackgroundTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.DynamicViewContent {
  @inlinable nonisolated public func onMove(perform action: Swift.Optional<(Foundation.IndexSet, Swift.Int) -> Swift.Void>) -> some SwiftUICore.DynamicViewContent {
        modifier(_TraitWritingModifier<OnMoveTraitKey>(value: action))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct IsMoveDisabledTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.IsMoveDisabledTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func moveDisabled(_ isDisabled: Swift.Bool) -> some SwiftUICore.View {
        return _trait(IsMoveDisabledTraitKey.self, isDisabled)
    }
  
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func scrollContentBackground(_ visibility: SwiftUICore.Visibility) -> some SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol WidgetBundle {
  associatedtype Body : SwiftUI.Widget
  @_Concurrency.MainActor @preconcurrency init()
  @SwiftUI.WidgetBundleBuilder @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.PickerStyle where Self == SwiftUI.DefaultPickerStyle {
  @_alwaysEmitIntoClient public static var automatic: SwiftUI.DefaultPickerStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct DefaultPickerStyle : SwiftUI.PickerStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.DefaultPickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.DefaultPickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.DefaultPickerStyle : Swift.Sendable {
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor public struct DismissImmersiveSpaceAction {
  @_Concurrency.MainActor public func callAsFunction() async
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var dismissImmersiveSpace: SwiftUI.DismissImmersiveSpaceAction {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
public protocol PresentationSizing {
  func proposedSize(for root: SwiftUI.PresentationSizingRoot, context: SwiftUI.PresentationSizingContext) -> SwiftUICore.ProposedViewSize
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
public struct PresentationSizingRoot {
  public func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
}
@available(*, unavailable)
extension SwiftUI.PresentationSizingRoot : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
public struct PresentationSizingContext {
}
extension SwiftUI.PresentationSizing {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
  public func sticky(horizontal: Swift.Bool = false, vertical: Swift.Bool = false) -> some SwiftUI.PresentationSizing
  
}
extension SwiftUI.PresentationSizing {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
  public func fitted(horizontal: Swift.Bool, vertical: Swift.Bool) -> some SwiftUI.PresentationSizing
  
}
@available(*, unavailable)
extension SwiftUI.PresentationSizingContext : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
public struct FormPresentationSizing : SwiftUI.PresentationSizing, Swift.Sendable {
  public func proposedSize(for root: SwiftUI.PresentationSizingRoot, context: SwiftUI.PresentationSizingContext) -> SwiftUICore.ProposedViewSize
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
extension SwiftUI.PresentationSizing where Self == SwiftUI.FormPresentationSizing {
  public static var form: SwiftUI.FormPresentationSizing {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
public struct PagePresentationSizing : SwiftUI.PresentationSizing, Swift.Sendable {
  public func proposedSize(for root: SwiftUI.PresentationSizingRoot, context: SwiftUI.PresentationSizingContext) -> SwiftUICore.ProposedViewSize
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
extension SwiftUI.PresentationSizing where Self == SwiftUI.PagePresentationSizing {
  public static var page: SwiftUI.PagePresentationSizing {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
public struct FittedPresentationSizing : SwiftUI.PresentationSizing, Swift.Sendable {
  public func proposedSize(for root: SwiftUI.PresentationSizingRoot, context: SwiftUI.PresentationSizingContext) -> SwiftUICore.ProposedViewSize
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
extension SwiftUI.PresentationSizing where Self == SwiftUI.FittedPresentationSizing {
  public static var fitted: SwiftUI.FittedPresentationSizing {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
extension SwiftUICore.View {
  nonisolated public func presentationSizing(_ sizing: some PresentationSizing) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
extension SwiftUI.PresentationSizing where Self == SwiftUI.AutomaticPresentationSizing {
  public static var automatic: SwiftUI.AutomaticPresentationSizing {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
public struct AutomaticPresentationSizing : SwiftUI.PresentationSizing, Swift.Sendable {
  public func proposedSize(for root: SwiftUI.PresentationSizingRoot, context: SwiftUI.PresentationSizingContext) -> SwiftUICore.ProposedViewSize
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol _TableRowContentModifier {
  associatedtype Body : SwiftUI._TableRowContentModifier
  @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
  nonisolated static func _makeRows(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._TableRowInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs) -> SwiftUI._TableRowOutputs
  nonisolated static func _tableRowCount(inputs: SwiftUI._TableRowInputs, body: @escaping (SwiftUI._TableRowInputs) -> Swift.Int?) -> Swift.Int?
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI._TableRowContentModifier {
  nonisolated public static func _makeRows(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._TableRowInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs) -> SwiftUI._TableRowOutputs
  nonisolated public static func _tableRowCount(inputs: SwiftUI._TableRowInputs, body: @escaping (SwiftUI._TableRowInputs) -> Swift.Int?) -> Swift.Int?
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Never : SwiftUI._TableRowContentModifier {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.ModifiedContent : SwiftUI.TableRowContent where Content : SwiftUI.TableRowContent, Modifier : SwiftUI._TableRowContentModifier {
  public typealias TableRowValue = Content.TableRowValue
  public typealias TableRowBody = Swift.Never
  nonisolated public static func _makeRows(content: SwiftUICore._GraphValue<SwiftUICore.ModifiedContent<Content, Modifier>>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  nonisolated public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var tableRowBody: Swift.Never {
    get
  }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.ModifiedContent : SwiftUI.DynamicTableRowContent where Content : SwiftUI.DynamicTableRowContent, Modifier : SwiftUI._TableRowContentModifier {
  public var data: Content.Data {
    get
  }
  @available(iOS 16.0, macOS 12.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Data = Content.Data
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol UIViewControllerRepresentable : SwiftUICore.View where Self.Body == Swift.Never {
  associatedtype UIViewControllerType : UIKit.UIViewController
  @_Concurrency.MainActor @preconcurrency func makeUIViewController(context: Self.Context) -> Self.UIViewControllerType
  @_Concurrency.MainActor @preconcurrency func updateUIViewController(_ uiViewController: Self.UIViewControllerType, context: Self.Context)
  @_Concurrency.MainActor @preconcurrency static func dismantleUIViewController(_ uiViewController: Self.UIViewControllerType, coordinator: Self.Coordinator)
  associatedtype Coordinator = Swift.Void
  @_Concurrency.MainActor @preconcurrency func makeCoordinator() -> Self.Coordinator
  @available(iOS 16.0, tvOS 16.0, *)
  @_Concurrency.MainActor @preconcurrency func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize, uiViewController: Self.UIViewControllerType, context: Self.Context) -> CoreFoundation.CGSize?
  @_Concurrency.MainActor @preconcurrency func _identifiedViewTree(in uiViewController: Self.UIViewControllerType) -> SwiftUI._IdentifiedViewTree
  @available(iOS 17.0, tvOS 17.0, *)
  @_Concurrency.MainActor @preconcurrency static func _layoutOptions(_ provider: Self.UIViewControllerType) -> Self.LayoutOptions
  typealias Context = SwiftUI.UIViewControllerRepresentableContext<Self>
  @available(iOS 17.0, tvOS 17.0, *)
  typealias LayoutOptions = SwiftUI._PlatformViewRepresentableLayoutOptions
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
extension SwiftUI.UIViewControllerRepresentable where Self.Coordinator == () {
  @_Concurrency.MainActor @preconcurrency public func makeCoordinator() -> Self.Coordinator
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
extension SwiftUI.UIViewControllerRepresentable {
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @_Concurrency.MainActor @preconcurrency public func _resetUIViewController(_ uiViewController: Self.UIViewControllerType, coordinator: Self.Coordinator, destroy: () -> Swift.Void)
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
  @_Concurrency.MainActor @preconcurrency public func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize, uiViewController: Self.UIViewControllerType, context: Self.Context) -> CoreFoundation.CGSize?
  @_Concurrency.MainActor @preconcurrency public static func dismantleUIViewController(_ uiViewController: Self.UIViewControllerType, coordinator: Self.Coordinator)
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @_Concurrency.MainActor @preconcurrency public func _identifiedViewTree(in uiViewController: Self.UIViewControllerType) -> SwiftUI._IdentifiedViewTree
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, *)
  @_Concurrency.MainActor @preconcurrency public static func _layoutOptions(_ provider: Self.UIViewControllerType) -> Self.LayoutOptions
  @_Concurrency.MainActor @preconcurrency public var body: Swift.Never {
    get
  }
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public struct UIViewControllerRepresentableContext<Representable> where Representable : SwiftUI.UIViewControllerRepresentable {
  @_Concurrency.MainActor @preconcurrency public let coordinator: Representable.Coordinator
  @_Concurrency.MainActor @preconcurrency public var transaction: SwiftUICore.Transaction {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var environment: SwiftUICore.EnvironmentValues {
    get
  }
  @available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func animate(changes: () -> Swift.Void, completion: (() -> Swift.Void)? = nil)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Section<Parent, Content, Footer> {
}
@available(*, unavailable)
extension SwiftUI.Section : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Section : SwiftUICore.View where Parent : SwiftUICore.View, Content : SwiftUICore.View, Footer : SwiftUICore.View {
  public typealias Body = Swift.Never
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Section where Parent : SwiftUICore.View, Content : SwiftUICore.View, Footer : SwiftUICore.View {
  @_alwaysEmitIntoClient public init(@SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder header: () -> Parent, @SwiftUICore.ViewBuilder footer: () -> Footer) {
        self.init(header: header(), footer: footer(), content: content)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Section where Parent == SwiftUICore.EmptyView, Content : SwiftUICore.View, Footer : SwiftUICore.View {
  @_alwaysEmitIntoClient public init(@SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder footer: () -> Footer) {
        self.init(footer: footer(), content: content)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Section where Parent : SwiftUICore.View, Content : SwiftUICore.View, Footer == SwiftUICore.EmptyView {
  @_alwaysEmitIntoClient public init(@SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder header: () -> Parent) {
        self.init(header: header(), content: content)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Section where Parent == SwiftUICore.EmptyView, Content : SwiftUICore.View, Footer == SwiftUICore.EmptyView {
  public init(@SwiftUICore.ViewBuilder content: () -> Content)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Section where Parent == SwiftUICore.Text, Content : SwiftUICore.View, Footer == SwiftUICore.EmptyView {
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload public init<S>(_ title: S, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension SwiftUI.Section where Parent == SwiftUICore.Text, Content : SwiftUICore.View, Footer == SwiftUICore.EmptyView {
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, isExpanded: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload public init<S>(_ title: S, isExpanded: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct IsCollapsibleTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { true }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.IsCollapsibleTraitKey : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension SwiftUI.Section where Parent : SwiftUICore.View, Content : SwiftUICore.View, Footer == SwiftUICore.EmptyView {
  public init(isExpanded: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder header: () -> Parent)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Section where Parent : SwiftUICore.View, Content : SwiftUICore.View, Footer : SwiftUICore.View {
  @available(iOS, deprecated: 100000.0, renamed: "Section(content:header:footer:)")
  @available(macOS, deprecated: 100000.0, renamed: "Section(content:header:footer:)")
  @available(tvOS, deprecated: 100000.0, renamed: "Section(content:header:footer:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Section(content:header:footer:)")
  @available(visionOS, deprecated: 100000.0, renamed: "Section(content:header:footer:)")
  public init(header: Parent, footer: Footer, @SwiftUICore.ViewBuilder content: () -> Content)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Section where Parent == SwiftUICore.EmptyView, Content : SwiftUICore.View, Footer : SwiftUICore.View {
  @available(iOS, deprecated: 100000.0, renamed: "Section(content:footer:)")
  @available(macOS, deprecated: 100000.0, renamed: "Section(content:footer:)")
  @available(tvOS, deprecated: 100000.0, renamed: "Section(content:footer:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Section(content:footer:)")
  @available(visionOS, deprecated: 100000.0, renamed: "Section(content:footer:)")
  public init(footer: Footer, @SwiftUICore.ViewBuilder content: () -> Content)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Section where Parent : SwiftUICore.View, Content : SwiftUICore.View, Footer == SwiftUICore.EmptyView {
  @available(iOS, deprecated: 100000.0, renamed: "Section(content:header:)")
  @available(macOS, deprecated: 100000.0, renamed: "Section(content:header:)")
  @available(tvOS, deprecated: 100000.0, renamed: "Section(content:header:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Section(content:header:)")
  @available(visionOS, deprecated: 100000.0, renamed: "Section(content:header:)")
  public init(header: Parent, @SwiftUICore.ViewBuilder content: () -> Content)
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.CustomHoverEffect where Self == SwiftUI.AutomaticHoverEffect {
  public static var automatic: SwiftUI.AutomaticHoverEffect {
    get
  }
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct AutomaticHoverEffect : SwiftUICore.CustomHoverEffect {
  public init()
  public func body(content: SwiftUI.AutomaticHoverEffect.Content) -> some SwiftUICore.CustomHoverEffect
  
  @available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI20AutomaticHoverEffectV4body7contentQrAA05EmptydE0V_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.AutomaticHoverEffect : Swift.Sendable {
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.CustomHoverEffect where Self == SwiftUI.HighlightHoverEffect {
  public static var highlight: SwiftUI.HighlightHoverEffect {
    get
  }
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct HighlightHoverEffect : SwiftUICore.CustomHoverEffect {
  public init()
  public func body(content: SwiftUI.HighlightHoverEffect.Content) -> some SwiftUICore.CustomHoverEffect
  
  @available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI20HighlightHoverEffectV4body7contentQrAA05EmptydE0V_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.HighlightHoverEffect : Swift.Sendable {
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.CustomHoverEffect where Self == SwiftUI.LiftHoverEffect {
  public static var lift: SwiftUI.LiftHoverEffect {
    get
  }
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct LiftHoverEffect : SwiftUICore.CustomHoverEffect {
  public init()
  public func body(content: SwiftUI.LiftHoverEffect.Content) -> some SwiftUICore.CustomHoverEffect
  
  @available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15LiftHoverEffectV4body7contentQrAA05EmptydE0V_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.LiftHoverEffect : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct NavigationLink<Label, Destination> : SwiftUICore.View where Label : SwiftUICore.View, Destination : SwiftUICore.View {
  @_alwaysEmitIntoClient public init(@SwiftUICore.ViewBuilder destination: () -> Destination, @SwiftUICore.ViewBuilder label: () -> Label) {
        self.init(destination: destination(), label: label)
    }
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI14NavigationLinkV4bodyQrvp", 0) __<Label, Destination>
}
@available(*, unavailable)
extension SwiftUI.NavigationLink : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.NavigationLink where Label == SwiftUICore.Text {
  @_alwaysEmitIntoClient nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder destination: () -> Destination) {
        self.init(titleKey, destination: destination())
    }
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<S>(_ title: S, @SwiftUICore.ViewBuilder destination: () -> Destination) where S : Swift.StringProtocol {
        self.init(title, destination: destination())
    }
}
@available(iOS 13.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.NavigationLink {
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func isDetailLink(_ isDetailLink: Swift.Bool) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func rotation3DEffect(_ angle: SwiftUICore.Angle, axis: (x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat, z: CoreFoundation.CGFloat), anchor: SwiftUICore.UnitPoint = .center, anchorZ: CoreFoundation.CGFloat = 0, perspective: CoreFoundation.CGFloat = 1) -> some SwiftUICore.View {
        return modifier(_Rotation3DEffect(
            angle: angle, axis: axis, anchor: anchor, anchorZ: anchorZ,
            perspective: perspective
        ))
    }
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.VisualEffect {
  public func rotation3DEffect(_ angle: SwiftUICore.Angle, axis: (x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat, z: CoreFoundation.CGFloat), anchor: SwiftUICore.UnitPoint = .center, anchorZ: CoreFoundation.CGFloat = 0, perspective: CoreFoundation.CGFloat = 1) -> some SwiftUICore.VisualEffect
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@frozen public struct ViewThatFits<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @usableFromInline
  internal var _tree: SwiftUICore._VariadicView.Tree<SwiftUI._SizeFittingRoot, Content>
  @inlinable public init(in axes: SwiftUICore.Axis.Set = [.horizontal, .vertical], @SwiftUICore.ViewBuilder content: () -> Content) {
        _tree = .init(_SizeFittingRoot(axes: axes)) { content() }
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI.ViewThatFits<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.ViewThatFits : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@frozen public struct _SizeFittingRoot : SwiftUICore._VariadicView.UnaryViewRoot {
  @usableFromInline
  internal var axes: SwiftUICore.Axis.Set
  @inlinable internal init(axes: SwiftUICore.Axis.Set) { self.axes = axes }
  nonisolated public static func _makeView(root: SwiftUICore._GraphValue<SwiftUI._SizeFittingRoot>, inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _ScrollableContentProvider {
  associatedtype ScrollableContent : SwiftUICore.View
  var scrollableContent: Self.ScrollableContent { get }
  associatedtype Root : SwiftUICore.View
  func root(scrollView: SwiftUI._ScrollView<Self>.Main) -> Self.Root
  func decelerationTarget(contentOffset: CoreFoundation.CGPoint, originalContentOffset: CoreFoundation.CGPoint, velocity: SwiftUICore._Velocity<CoreFoundation.CGSize>, size: CoreFoundation.CGSize) -> CoreFoundation.CGPoint?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollableContentProvider {
  public func decelerationTarget(contentOffset: CoreFoundation.CGPoint, originalContentOffset: CoreFoundation.CGPoint, velocity: SwiftUICore._Velocity<CoreFoundation.CGSize>, size: CoreFoundation.CGSize) -> CoreFoundation.CGPoint?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _ScrollViewGestureProvider {
  func scrollableDirections(proxy: SwiftUI._ScrollViewProxy) -> SwiftUI._EventDirections
  func gestureMask(proxy: SwiftUI._ScrollViewProxy) -> SwiftUICore.GestureMask
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollViewGestureProvider {
  public func defaultScrollableDirections(proxy: SwiftUI._ScrollViewProxy) -> SwiftUI._EventDirections
  public func defaultGestureMask(proxy: SwiftUI._ScrollViewProxy) -> SwiftUICore.GestureMask
  public func scrollableDirections(proxy: SwiftUI._ScrollViewProxy) -> SwiftUI._EventDirections
  public func gestureMask(proxy: SwiftUI._ScrollViewProxy) -> SwiftUICore.GestureMask
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollViewConfig {
  public static let decelerationRateNormal: Swift.Double
  public static let decelerationRateFast: Swift.Double
  public enum ContentOffset {
    case initially(CoreFoundation.CGPoint)
    case binding(SwiftUICore.Binding<CoreFoundation.CGPoint>)
  }
  public var contentOffset: SwiftUI._ScrollViewConfig.ContentOffset
  public var contentInsets: SwiftUICore.EdgeInsets
  public var decelerationRate: Swift.Double
  public var alwaysBounceVertical: Swift.Bool
  public var alwaysBounceHorizontal: Swift.Bool
  public var gestureProvider: any SwiftUI._ScrollViewGestureProvider
  public var stopDraggingImmediately: Swift.Bool
  public var isScrollEnabled: Swift.Bool
  public var showsHorizontalIndicator: Swift.Bool
  public var showsVerticalIndicator: Swift.Bool
  public var indicatorInsets: SwiftUICore.EdgeInsets
  public init()
}
@available(*, unavailable)
extension SwiftUI._ScrollViewConfig.ContentOffset : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI._ScrollViewConfig : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollView<Provider> : SwiftUICore.View where Provider : SwiftUI._ScrollableContentProvider {
  public var contentProvider: Provider
  public var config: SwiftUI._ScrollViewConfig
  public init(contentProvider: Provider, config: SwiftUI._ScrollViewConfig = _ScrollViewConfig())
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public struct Main : SwiftUICore.View {
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias Body = Swift.Never
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11_ScrollViewV4bodyQrvp", 0) __<Provider>
}
@available(*, unavailable)
extension SwiftUI._ScrollView.Main : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI._ScrollView : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func _scrollable(stretchChildrenToMaxHeight: Swift.Bool = false, horizontal: SwiftUICore.TextAlignment? = .center, vertical: SwiftUICore._VAlignment? = .center) -> SwiftUI._ScrollView<SwiftUI._AligningContentProvider<Self>>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _AligningContentProvider<Content> : SwiftUI._ScrollableContentProvider where Content : SwiftUICore.View {
  public var content: Content
  public var horizontal: SwiftUICore.TextAlignment?
  public var vertical: SwiftUICore._VAlignment?
  public init(content: Content, horizontal: SwiftUICore.TextAlignment? = nil, vertical: SwiftUICore._VAlignment? = nil)
  public var scrollableContent: SwiftUICore.ModifiedContent<Content, SwiftUI._AligningContentProvider<Content>.AligningContentProviderLayout> {
    get
  }
  @_Concurrency.MainActor @preconcurrency public struct AligningContentProviderLayout {
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias Body = Swift.Never
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Root = SwiftUI._ScrollViewRoot<SwiftUI._AligningContentProvider<Content>>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ScrollableContent = SwiftUICore.ModifiedContent<Content, SwiftUI._AligningContentProvider<Content>.AligningContentProviderLayout>
}
@available(*, unavailable)
extension SwiftUI._AligningContentProvider.AligningContentProviderLayout : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI._AligningContentProvider : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct Link<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  public init(destination: Foundation.URL, @SwiftUICore.ViewBuilder label: () -> Label)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI4LinkV4bodyQrvp", 0) __<Label>
}
@available(*, unavailable)
extension SwiftUI.Link : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Link where Label == SwiftUICore.Text {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, destination: Foundation.URL)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, destination: Foundation.URL) where S : Swift.StringProtocol
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func inspector<V>(isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
  nonisolated public func inspectorColumnWidth(min: CoreFoundation.CGFloat? = nil, ideal: CoreFoundation.CGFloat, max: CoreFoundation.CGFloat? = nil) -> some SwiftUICore.View
  
  nonisolated public func inspectorColumnWidth(_ width: CoreFoundation.CGFloat) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _PagingViewConfig : Swift.Equatable {
  public enum Direction {
    case vertical
    case horizontal
    public static func == (a: SwiftUI._PagingViewConfig.Direction, b: SwiftUI._PagingViewConfig.Direction) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var direction: SwiftUI._PagingViewConfig.Direction
  public var size: CoreFoundation.CGFloat?
  public var margin: CoreFoundation.CGFloat
  public var spacing: CoreFoundation.CGFloat
  public var constrainedDeceleration: Swift.Bool
  public init(direction: SwiftUI._PagingViewConfig.Direction = .horizontal, size: CoreFoundation.CGFloat? = nil, margin: CoreFoundation.CGFloat = 0, spacing: CoreFoundation.CGFloat = 0, constrainedDeceleration: Swift.Bool = true)
  public static func == (a: SwiftUI._PagingViewConfig, b: SwiftUI._PagingViewConfig) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUI._PagingViewConfig.Direction : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI._PagingViewConfig : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _PagingView<Views> : SwiftUICore.View where Views : Swift.RandomAccessCollection, Views.Element : SwiftUICore.View, Views.Index : Swift.Hashable {
  public var views: Views
  public var page: SwiftUICore.Binding<Views.Index>?
  public var config: SwiftUI._PagingViewConfig
  public var scrollViewConfig: SwiftUI._ScrollViewConfig
  public init(config: SwiftUI._PagingViewConfig = _PagingViewConfig(), page: SwiftUICore.Binding<Views.Index>? = nil, views: Views)
  public init(direction: SwiftUI._PagingViewConfig.Direction, page: SwiftUICore.Binding<Views.Index>? = nil, views: Views)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11_PagingViewV4bodyQrvp", 0) __<Views>
}
@available(*, unavailable)
extension SwiftUI._PagingView : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ListStyle where Self == SwiftUI.PlainListStyle {
  @_alwaysEmitIntoClient public static var plain: SwiftUI.PlainListStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct PlainListStyle : SwiftUI.ListStyle {
  public init()
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.PlainListStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.PlainListStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.PlainListStyle : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@preconcurrency @_Concurrency.MainActor public protocol ProgressViewStyle {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.ProgressViewStyleConfiguration
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct ProgressViewStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Label : SwiftUICore.View {
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    public typealias Body = Swift.Never
  }
  @_Concurrency.MainActor @preconcurrency public struct CurrentValueLabel : SwiftUICore.View {
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    public typealias Body = Swift.Never
  }
  public let fractionCompleted: Swift.Double?
  public var label: SwiftUI.ProgressViewStyleConfiguration.Label?
  public var currentValueLabel: SwiftUI.ProgressViewStyleConfiguration.CurrentValueLabel?
}
@available(*, unavailable)
extension SwiftUI.ProgressViewStyleConfiguration : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.ProgressViewStyleConfiguration.CurrentValueLabel : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.ProgressViewStyleConfiguration.Label : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func progressViewStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.ProgressViewStyle
  
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable<C, T>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, C.Element : Swift.Identifiable
  
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable<C>(text: SwiftUICore.Binding<Swift.String>, editableTokens: SwiftUICore.Binding<C>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (SwiftUICore.Binding<C.Element>) -> some View) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, C.Element : Swift.Identifiable
  
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable<C, T>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, C.Element : Swift.Identifiable
  
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable<C>(text: SwiftUICore.Binding<Swift.String>, editableTokens: SwiftUICore.Binding<C>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder token: @escaping (SwiftUICore.Binding<C.Element>) -> some View) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, C.Element : Swift.Identifiable
  
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload nonisolated public func searchable<C, T, S>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: S, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, S : Swift.StringProtocol, C.Element : Swift.Identifiable
  
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload nonisolated public func searchable<C>(text: SwiftUICore.Binding<Swift.String>, editableTokens: SwiftUICore.Binding<C>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: some StringProtocol, @SwiftUICore.ViewBuilder token: @escaping (SwiftUICore.Binding<C.Element>) -> some View) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, C.Element : Swift.Identifiable
  
}
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable<C, T>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, isPresented: SwiftUICore.Binding<Swift.Bool>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, C.Element : Swift.Identifiable
  
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable<C>(text: SwiftUICore.Binding<Swift.String>, editableTokens: SwiftUICore.Binding<C>, isPresented: SwiftUICore.Binding<Swift.Bool>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (SwiftUICore.Binding<C.Element>) -> some View) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, C.Element : Swift.Identifiable
  
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable<C, T>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, isPresented: SwiftUICore.Binding<Swift.Bool>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, C.Element : Swift.Identifiable
  
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable<C>(text: SwiftUICore.Binding<Swift.String>, editableTokens: SwiftUICore.Binding<C>, isPresented: SwiftUICore.Binding<Swift.Bool>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder token: @escaping (SwiftUICore.Binding<C.Element>) -> some View) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, C.Element : Swift.Identifiable
  
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload nonisolated public func searchable<C, T, S>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, isPresented: SwiftUICore.Binding<Swift.Bool>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: S, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, S : Swift.StringProtocol, C.Element : Swift.Identifiable
  
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload nonisolated public func searchable<C>(text: SwiftUICore.Binding<Swift.String>, editableTokens: SwiftUICore.Binding<C>, isPresented: SwiftUICore.Binding<Swift.Bool>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: some StringProtocol, @SwiftUICore.ViewBuilder token: @escaping (SwiftUICore.Binding<C.Element>) -> some View) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, C.Element : Swift.Identifiable
  
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable<C, T>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, suggestedTokens: SwiftUICore.Binding<C>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T) -> some SwiftUICore.View where C : Swift.MutableCollection, C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, C.Element : Swift.Identifiable
  
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable<C, T>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, suggestedTokens: SwiftUICore.Binding<C>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T) -> some SwiftUICore.View where C : Swift.MutableCollection, C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, C.Element : Swift.Identifiable
  
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload nonisolated public func searchable<C, T, S>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, suggestedTokens: SwiftUICore.Binding<C>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: S, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T) -> some SwiftUICore.View where C : Swift.MutableCollection, C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, S : Swift.StringProtocol, C.Element : Swift.Identifiable
  
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable<C, T>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, suggestedTokens: SwiftUICore.Binding<C>, isPresented: SwiftUICore.Binding<Swift.Bool>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, C.Element : Swift.Identifiable
  
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable<C, T>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, suggestedTokens: SwiftUICore.Binding<C>, isPresented: SwiftUICore.Binding<Swift.Bool>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, C.Element : Swift.Identifiable
  
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload nonisolated public func searchable<C, T, S>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, suggestedTokens: SwiftUICore.Binding<C>, isPresented: SwiftUICore.Binding<Swift.Bool>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: S, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T) -> some SwiftUICore.View where C : Swift.MutableCollection, C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, S : Swift.StringProtocol, C.Element : Swift.Identifiable
  
}
extension SwiftUICore.View {
  @usableFromInline
  @available(iOS, unavailable, introduced: 16.0, message: "ABI Only")
  @available(macOS, unavailable, introduced: 13.0, message: "ABI Only")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency internal func searchable<C, T, S>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T, @SwiftUICore.ViewBuilder suggestions: () -> S) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, S : SwiftUICore.View, C.Element : Swift.Identifiable
  
  @usableFromInline
  @available(iOS, unavailable, introduced: 16.0, message: "ABI Only")
  @available(macOS, unavailable, introduced: 13.0, message: "ABI Only")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency internal func searchable<C, T, S>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T, @SwiftUICore.ViewBuilder suggestions: () -> S) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, S : SwiftUICore.View, C.Element : Swift.Identifiable
  
  @usableFromInline
  @available(iOS, unavailable, introduced: 16.0, message: "ABI Only")
  @available(macOS, unavailable, introduced: 13.0, message: "ABI Only")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency internal func searchable<C, T, V, S>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: S, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T, @SwiftUICore.ViewBuilder suggestions: () -> V) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, V : SwiftUICore.View, S : Swift.StringProtocol, C.Element : Swift.Identifiable
  
}
extension SwiftUICore.View {
  @usableFromInline
  @available(iOS, unavailable, introduced: 16.0, message: "ABI Only")
  @available(macOS, unavailable, introduced: 13.0, message: "ABI Only")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency internal func searchable<C, T, D, V>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, scope: SwiftUICore.Binding<D>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T, @SwiftUICore.ViewBuilder scopes: () -> V) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, D : Swift.Hashable, V : SwiftUICore.View, C.Element : Swift.Identifiable
  
  @usableFromInline
  @available(iOS, unavailable, introduced: 16.0, message: "ABI Only")
  @available(macOS, unavailable, introduced: 13.0, message: "ABI Only")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency internal func searchable<C, T, D, V>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, scope: SwiftUICore.Binding<D>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T, @SwiftUICore.ViewBuilder scopes: () -> V) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, D : Swift.Hashable, V : SwiftUICore.View, C.Element : Swift.Identifiable
  
  @usableFromInline
  @available(iOS, unavailable, introduced: 16.0, message: "ABI Only")
  @available(macOS, unavailable, introduced: 13.0, message: "ABI Only")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency internal func searchable<C, T, D, V, S>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, scope: SwiftUICore.Binding<D>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: S, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T, @SwiftUICore.ViewBuilder scopes: () -> V) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, D : Swift.Hashable, V : SwiftUICore.View, S : Swift.StringProtocol, C.Element : Swift.Identifiable
  
}
extension SwiftUICore.View {
  @usableFromInline
  @available(iOS, unavailable, introduced: 16.0, message: "ABI Only")
  @available(macOS, unavailable, introduced: 13.0, message: "ABI Only")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency internal func searchable<C, T, D, V1, V2>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, scope: SwiftUICore.Binding<D>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T, @SwiftUICore.ViewBuilder scopes: () -> V1, @SwiftUICore.ViewBuilder suggestions: () -> V2) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, D : Swift.Hashable, V1 : SwiftUICore.View, V2 : SwiftUICore.View, C.Element : Swift.Identifiable
  
  @usableFromInline
  @available(iOS, unavailable, introduced: 16.0, message: "ABI Only")
  @available(macOS, unavailable, introduced: 13.0, message: "ABI Only")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency internal func searchable<C, T, D, V1, V2>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, scope: SwiftUICore.Binding<D>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T, @SwiftUICore.ViewBuilder scopes: () -> V1, @SwiftUICore.ViewBuilder suggestions: () -> V2) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, D : Swift.Hashable, V1 : SwiftUICore.View, V2 : SwiftUICore.View, C.Element : Swift.Identifiable
  
  @usableFromInline
  @available(iOS, unavailable, introduced: 16.0, message: "ABI Only")
  @available(macOS, unavailable, introduced: 13.0, message: "ABI Only")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency internal func searchable<C, T, D, V1, V2, S>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, scope: SwiftUICore.Binding<D>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: S, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T, @SwiftUICore.ViewBuilder scopes: () -> V1, @SwiftUICore.ViewBuilder suggestions: () -> V2) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, D : Swift.Hashable, V1 : SwiftUICore.View, V2 : SwiftUICore.View, S : Swift.StringProtocol, C.Element : Swift.Identifiable
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _PreviewProviderLocator {
  static var previewProviders: [any SwiftUI._PreviewProvider.Type] { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@preconcurrency @_Concurrency.MainActor public protocol _PreviewProvider {
  @_Concurrency.MainActor @preconcurrency static var _previews: Any { get }
  @_Concurrency.MainActor @preconcurrency static var _platform: SwiftUI.PreviewPlatform? { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@preconcurrency @_Concurrency.MainActor public protocol PreviewProvider : SwiftUI._PreviewProvider {
  associatedtype Previews : SwiftUICore.View
  @SwiftUICore.ViewBuilder @preconcurrency @_Concurrency.MainActor static var previews: Self.Previews { get }
  @preconcurrency @_Concurrency.MainActor static var platform: SwiftUI.PreviewPlatform? { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.PreviewProvider {
  @_Concurrency.MainActor @preconcurrency public static var platform: SwiftUI.PreviewPlatform? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public static var _previews: Any {
    get
  }
  @_Concurrency.MainActor @preconcurrency public static var _platform: SwiftUI.PreviewPlatform? {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum PreviewPlatform : Swift.Sendable {
  case iOS
  case macOS
  case tvOS
  case watchOS
  public static func == (a: SwiftUI.PreviewPlatform, b: SwiftUI.PreviewPlatform) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct PreviewDevice : Swift.RawRepresentable, Swift.ExpressibleByStringLiteral, Swift.Sendable {
  public let rawValue: Swift.String
  public init(rawValue: Swift.String)
  public init(stringLiteral: Swift.String)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias RawValue = Swift.String
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias StringLiteralType = Swift.String
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias UnicodeScalarLiteralType = Swift.String
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol PreviewContextKey {
  associatedtype Value
  static var defaultValue: Self.Value { get }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol PreviewContext {
  subscript<Key>(key: Key.Type) -> Key.Value where Key : SwiftUI.PreviewContextKey { get }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct InterfaceOrientation : Swift.CaseIterable, Swift.Identifiable, Swift.Equatable, Swift.Sendable {
  public static var allCases: [SwiftUI.InterfaceOrientation] {
    get
  }
  public var id: Swift.String {
    get
  }
  public static let portrait: SwiftUI.InterfaceOrientation
  public static let portraitUpsideDown: SwiftUI.InterfaceOrientation
  public static let landscapeLeft: SwiftUI.InterfaceOrientation
  public static let landscapeRight: SwiftUI.InterfaceOrientation
  public static func == (a: SwiftUI.InterfaceOrientation, b: SwiftUI.InterfaceOrientation) -> Swift.Bool
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias AllCases = [SwiftUI.InterfaceOrientation]
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias ID = Swift.String
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func previewDevice(_ value: SwiftUI.PreviewDevice?) -> some SwiftUICore.View {
        return _trait(PreviewDeviceTraitKey.self, value)
    }
  
  @inlinable nonisolated public func previewLayout(_ value: DeveloperToolsSupport.PreviewLayout) -> some SwiftUICore.View {
        return _trait(PreviewLayoutTraitKey.self, value)
    }
  
  @inlinable nonisolated public func previewDisplayName(_ value: Swift.String?) -> some SwiftUICore.View {
        return _trait(PreviewDisplayNameTraitKey.self, value)
    }
  
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @inlinable nonisolated public func previewContext<C>(_ value: C) -> some SwiftUICore.View where C : SwiftUI.PreviewContext {
        return _trait(PreviewContextTraitKey.self, value)
    }
  
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public func previewInterfaceOrientation(_ value: SwiftUI.InterfaceOrientation) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct PreviewDeviceTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.PreviewDevice? {
    get { nil }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  internal typealias Value = SwiftUI.PreviewDevice?
}
@available(*, unavailable)
extension SwiftUI.PreviewDeviceTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct PreviewLayoutTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: DeveloperToolsSupport.PreviewLayout {
    get { .device }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  internal typealias Value = DeveloperToolsSupport.PreviewLayout
}
@available(*, unavailable)
extension SwiftUI.PreviewLayoutTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct PreviewDisplayNameTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.String? {
    get { nil }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  internal typealias Value = Swift.String?
}
@available(*, unavailable)
extension SwiftUI.PreviewDisplayNameTraitKey : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@usableFromInline
internal struct PreviewInterfaceOrientationTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.InterfaceOrientation {
    get { .portrait }
  }
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  @usableFromInline
  internal typealias Value = SwiftUI.InterfaceOrientation
}
@available(*, unavailable)
extension SwiftUI.PreviewInterfaceOrientationTraitKey : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@usableFromInline
internal struct PreviewContextTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: (any SwiftUI.PreviewContext)? {
    get { nil }
  }
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  @usableFromInline
  internal typealias Value = (any SwiftUI.PreviewContext)?
}
@available(*, unavailable)
extension SwiftUI.PreviewContextTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._PreviewProvider {
  @_Concurrency.MainActor @preconcurrency public static var _allPreviews: [SwiftUI._Preview] {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _Preview {
  public let id: Swift.Int
  public let contentType: Swift.String
  public var content: SwiftUICore.AnyView {
    get
  }
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public var context: (any SwiftUI.PreviewContext)? {
    get
  }
  public var displayName: Swift.String? {
    get
  }
  public var device: SwiftUI.PreviewDevice? {
    get
  }
  public var layout: DeveloperToolsSupport.PreviewLayout {
    get
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public var interfaceOrientation: SwiftUI.InterfaceOrientation {
    get
  }
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  public var colorScheme: SwiftUICore.ColorScheme? {
    get
  }
}
@available(*, unavailable)
extension SwiftUI._Preview : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct ScrollAnchorRole : Swift.Hashable, Swift.Sendable {
  public static var initialOffset: SwiftUI.ScrollAnchorRole {
    get
  }
  public static var sizeChanges: SwiftUI.ScrollAnchorRole {
    get
  }
  public static var alignment: SwiftUI.ScrollAnchorRole {
    get
  }
  public static func == (a: SwiftUI.ScrollAnchorRole, b: SwiftUI.ScrollAnchorRole) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func defaultScrollAnchor(_ anchor: SwiftUICore.UnitPoint?) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func defaultScrollAnchor(_ anchor: SwiftUICore.UnitPoint?, for role: SwiftUI.ScrollAnchorRole) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum PopoverAttachmentAnchor {
  case rect(SwiftUICore.Anchor<CoreFoundation.CGRect>.Source)
  case point(SwiftUICore.UnitPoint)
}
@available(*, unavailable)
extension SwiftUI.PopoverAttachmentAnchor : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_alwaysEmitIntoClient nonisolated public func popover<Item, Content>(item: SwiftUICore.Binding<Item?>, attachmentAnchor: SwiftUI.PopoverAttachmentAnchor = .rect(.bounds), arrowEdge: SwiftUICore.Edge? = nil, @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUICore.View where Item : Swift.Identifiable, Content : SwiftUICore.View {
        if #available(iOS 18.1, macOS 15.1, visionOS 2.1, *) {
            return popoverCore(
                item: item,
                attachmentAnchor: attachmentAnchor,
                arrowEdges: arrowEdge.map { .init($0) },
                content: content)
        }
        if #available(iOS 18.0, macOS 15.0, visionOS 2.0, *) {
             
            return popover(
                item: item,
                attachmentAnchor: attachmentAnchor,
                content: content)
        } else {
             
             
             
             
             
            return popover(
                item: item,
                attachmentAnchor: attachmentAnchor,
                arrowEdge: arrowEdge ?? .top,
                content: content)
        }
    }
  
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @usableFromInline
  nonisolated internal func popover<Item, Content>(item: SwiftUICore.Binding<Item?>, attachmentAnchor: SwiftUI.PopoverAttachmentAnchor = .rect(.bounds), arrowEdge: SwiftUICore.Edge, @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUICore.View where Item : Swift.Identifiable, Content : SwiftUICore.View
  
  @available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @usableFromInline
  nonisolated internal func popover<Item, Content>(item: SwiftUICore.Binding<Item?>, attachmentAnchor: SwiftUI.PopoverAttachmentAnchor = .rect(.bounds), @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUICore.View where Item : Swift.Identifiable, Content : SwiftUICore.View
  
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_alwaysEmitIntoClient nonisolated public func popover<Content>(isPresented: SwiftUICore.Binding<Swift.Bool>, attachmentAnchor: SwiftUI.PopoverAttachmentAnchor = .rect(.bounds), arrowEdge: SwiftUICore.Edge? = nil, @SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View {
        if #available(iOS 18.1, macOS 15.1, visionOS 2.1, *) {
            return popoverCore(
                isPresented: isPresented,
                attachmentAnchor: attachmentAnchor,
                arrowEdges: arrowEdge.map { .init($0) },
                isDetachable: false,
                content: content)
        }
        if #available(iOS 18.0, macOS 15.0, visionOS 2.0, *) {
             
            return popover(
                isPresented: isPresented,
                attachmentAnchor: attachmentAnchor,
                content: content)
        } else {
             
             
             
             
             
            return popover(
                isPresented: isPresented,
                attachmentAnchor: attachmentAnchor,
                arrowEdge: arrowEdge ?? .top,
                content: content)
        }
    }
  
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @usableFromInline
  nonisolated internal func popover<Content>(isPresented: SwiftUICore.Binding<Swift.Bool>, attachmentAnchor: SwiftUI.PopoverAttachmentAnchor = .rect(.bounds), arrowEdge: SwiftUICore.Edge, @SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  @available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @usableFromInline
  nonisolated internal func popover<Content>(isPresented: SwiftUICore.Binding<Swift.Bool>, attachmentAnchor: SwiftUI.PopoverAttachmentAnchor = .rect(.bounds), @SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 18.1, macOS 15.1, visionOS 2.1, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @usableFromInline
  nonisolated internal func popoverCore<Content>(isPresented: SwiftUICore.Binding<Swift.Bool>, attachmentAnchor: SwiftUI.PopoverAttachmentAnchor, arrowEdges: SwiftUICore.Edge.Set?, isDetachable: Swift.Bool, @SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  @available(iOS 18.1, macOS 15.1, visionOS 2.1, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @usableFromInline
  nonisolated internal func popoverCore<Item, Content>(item: SwiftUICore.Binding<Item?>, attachmentAnchor: SwiftUI.PopoverAttachmentAnchor, arrowEdges: SwiftUICore.Edge.Set?, @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUICore.View where Item : Swift.Identifiable, Content : SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore._ValueActionModifier : SwiftUI._SceneModifier {
  public static func _makeScene(modifier: SwiftUICore._GraphValue<SwiftUICore._ValueActionModifier<Value>>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Scene {
  nonisolated public func onChange<V>(of value: V, initial: Swift.Bool = false, _ action: @escaping (_ oldValue: V, _ newValue: V) -> Swift.Void) -> some SwiftUI.Scene where V : Swift.Equatable
  
  nonisolated public func onChange<V>(of value: V, initial: Swift.Bool = false, _ action: @escaping () -> Swift.Void) -> some SwiftUI.Scene where V : Swift.Equatable
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Scene {
  @available(iOS, deprecated: 17.0, message: "Use `onChange` with a two or zero parameter action closure instead.")
  @available(macOS, deprecated: 14.0, message: "Use `onChange` with a two or zero parameter action closure instead.")
  @available(tvOS, deprecated: 17.0, message: "Use `onChange` with a two or zero parameter action closure instead.")
  @available(watchOS, deprecated: 10.0, message: "Use `onChange` with a two or zero parameter action closure instead.")
  @available(visionOS, deprecated: 1.0, message: "Use `onChange` with a two or zero parameter action closure instead.")
  @inlinable nonisolated public func onChange<V>(of value: V, perform action: @escaping (_ newValue: V) -> Swift.Void) -> some SwiftUI.Scene where V : Swift.Equatable {
        modifier(_ValueActionModifier(value: value, action: action))
    }
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct ScrollIndicatorVisibility {
  public static var automatic: SwiftUI.ScrollIndicatorVisibility {
    get
  }
  public static var visible: SwiftUI.ScrollIndicatorVisibility {
    get
  }
  public static var hidden: SwiftUI.ScrollIndicatorVisibility {
    get
  }
  public static var never: SwiftUI.ScrollIndicatorVisibility {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.ScrollIndicatorVisibility : Swift.Sendable {
}
@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
extension SwiftUI.ScrollIndicatorVisibility : Swift.Equatable {
  public static func == (a: SwiftUI.ScrollIndicatorVisibility, b: SwiftUI.ScrollIndicatorVisibility) -> Swift.Bool
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func scrollIndicators(_ visibility: SwiftUI.ScrollIndicatorVisibility, axes: SwiftUICore.Axis.Set = [.vertical, .horizontal]) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct ScrollInputBehavior : Swift.Sendable, Swift.Equatable {
  public static let automatic: SwiftUI.ScrollInputBehavior
  public static let enabled: SwiftUI.ScrollInputBehavior
  public static let disabled: SwiftUI.ScrollInputBehavior
  public static func == (a: SwiftUI.ScrollInputBehavior, b: SwiftUI.ScrollInputBehavior) -> Swift.Bool
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct ScrollInputKind : Swift.Sendable, Swift.Equatable {
  @available(watchOS 11.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  public static let handGestureShortcut: SwiftUI.ScrollInputKind
  public static func == (a: SwiftUI.ScrollInputKind, b: SwiftUI.ScrollInputKind) -> Swift.Bool
}
extension SwiftUICore.View {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @_Concurrency.MainActor @preconcurrency public func scrollInputBehavior(_ behavior: SwiftUI.ScrollInputBehavior, for input: SwiftUI.ScrollInputKind) -> some SwiftUICore.View
  
}
extension SwiftUICore.EnvironmentValues {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public var verticalScrollIndicatorVisibility: SwiftUI.ScrollIndicatorVisibility {
    get
    set
  }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public var horizontalScrollIndicatorVisibility: SwiftUI.ScrollIndicatorVisibility {
    get
    set
  }
}
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func scrollIndicatorsFlash(trigger value: some Equatable) -> some SwiftUICore.View
  
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func scrollIndicatorsFlash(onAppear: Swift.Bool) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func scrollDisabled(_ disabled: Swift.Bool) -> some SwiftUICore.View
  
}
extension SwiftUICore.EnvironmentValues {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public var isScrollEnabled: Swift.Bool {
    get
    set
  }
}
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func scrollClipDisabled(_ disabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @available(visionOS, unavailable)
  nonisolated public func scrollDismissesKeyboard(_ mode: SwiftUI.ScrollDismissesKeyboardMode) -> some SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@available(visionOS, unavailable)
public struct ScrollDismissesKeyboardMode : Swift.Sendable {
  public static var automatic: SwiftUI.ScrollDismissesKeyboardMode {
    get
  }
  public static var immediately: SwiftUI.ScrollDismissesKeyboardMode {
    get
  }
  public static var interactively: SwiftUI.ScrollDismissesKeyboardMode {
    get
  }
  public static var never: SwiftUI.ScrollDismissesKeyboardMode {
    get
  }
}
@available(iOS 18.2, macOS 15.2, tvOS 18.2, watchOS 11.2, *)
@available(visionOS, unavailable)
extension SwiftUI.ScrollDismissesKeyboardMode : Swift.Equatable, Swift.Hashable {
  public static func == (a: SwiftUI.ScrollDismissesKeyboardMode, b: SwiftUI.ScrollDismissesKeyboardMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore.EnvironmentValues {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @available(visionOS, unavailable)
  public var scrollDismissesKeyboardMode: SwiftUI.ScrollDismissesKeyboardMode {
    get
    set
  }
}
@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
public struct ScrollBounceBehavior : Swift.Sendable {
  public static var automatic: SwiftUI.ScrollBounceBehavior {
    get
  }
  public static var always: SwiftUI.ScrollBounceBehavior {
    get
  }
  public static var basedOnSize: SwiftUI.ScrollBounceBehavior {
    get
  }
}
extension SwiftUICore.View {
  @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
  nonisolated public func scrollBounceBehavior(_ behavior: SwiftUI.ScrollBounceBehavior, axes: SwiftUICore.Axis.Set = [.vertical]) -> some SwiftUICore.View
  
}
extension SwiftUICore.EnvironmentValues {
  @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
  public var verticalScrollBounceBehavior: SwiftUI.ScrollBounceBehavior {
    get
    set
  }
  @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
  public var horizontalScrollBounceBehavior: SwiftUI.ScrollBounceBehavior {
    get
    set
  }
}
@available(iOS 17.4, macOS 14.4, visionOS 1.1, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TableColumnForEach<Data, ID, RowValue, Sort, Content> : SwiftUI.TableColumnContent where Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowValue == Content.TableRowValue, Sort == Content.TableColumnSortComparator, Content : SwiftUI.TableColumnContent {
  public typealias TableRowValue = RowValue
  public typealias TableColumnSortComparator = Sort
  public typealias TableColumnBody = Swift.Never
  public var data: Data
  public var content: (Data.Element) -> Content
  public init(_ data: Data, @SwiftUI.TableColumnBuilder<SwiftUI.TableColumnForEach<Data, ID, RowValue, Sort, Content>.TableRowValue, SwiftUI.TableColumnForEach<Data, ID, RowValue, Sort, Content>.TableColumnSortComparator> content: @escaping (Data.Element) -> Content) where ID == Data.Element.ID, Data.Element : Swift.Identifiable
  public init(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUI.TableColumnBuilder<SwiftUI.TableColumnForEach<Data, ID, RowValue, Sort, Content>.TableRowValue, SwiftUI.TableColumnForEach<Data, ID, RowValue, Sort, Content>.TableColumnSortComparator> content: @escaping (Data.Element) -> Content)
  @_semantics("swiftui.requires_constant_range") public init(_ data: Swift.Range<Swift.Int>, @SwiftUI.TableColumnBuilder<SwiftUI.TableColumnForEach<Swift.Range<Swift.Int>, Swift.Int, RowValue, Sort, Content>.TableRowValue, SwiftUI.TableColumnForEach<Swift.Range<Swift.Int>, Swift.Int, RowValue, Sort, Content>.TableColumnSortComparator> content: @escaping (Swift.Int) -> Content) where Data == Swift.Range<Swift.Int>, ID == Swift.Int
  nonisolated public static func _makeContent(content: SwiftUICore._GraphValue<SwiftUI.TableColumnForEach<Data, ID, RowValue, Sort, Content>>, inputs: SwiftUI._TableColumnInputs) -> SwiftUI._TableColumnOutputs
}
@available(*, unavailable)
extension SwiftUI.TableColumnForEach : Swift.Sendable {
}
@available(macOS 13.0, tvOS 15.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func focusSection() -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct AccessibilityDirectTouchOptions : Swift.OptionSet, Swift.Sendable {
  public typealias RawValue = Swift.UInt
  public let rawValue: SwiftUI.AccessibilityDirectTouchOptions.RawValue
  public init(rawValue: SwiftUI.AccessibilityDirectTouchOptions.RawValue)
  public static let silentOnTouch: SwiftUI.AccessibilityDirectTouchOptions
  public static let requiresActivation: SwiftUI.AccessibilityDirectTouchOptions
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias ArrayLiteralElement = SwiftUI.AccessibilityDirectTouchOptions
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Element = SwiftUI.AccessibilityDirectTouchOptions
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityDirectTouch(_ isDirectTouchArea: Swift.Bool = true, options: SwiftUI.AccessibilityDirectTouchOptions = []) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityDirectTouch(_ isDirectTouchArea: Swift.Bool = true, options: SwiftUI.AccessibilityDirectTouchOptions = []) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct ListItemTint : Swift.Sendable {
  public static func fixed(_ tint: SwiftUICore.Color) -> SwiftUI.ListItemTint
  public static func preferred(_ tint: SwiftUICore.Color) -> SwiftUI.ListItemTint
  public static let monochrome: SwiftUI.ListItemTint
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func listItemTint(_ tint: SwiftUI.ListItemTint?) -> some SwiftUICore.View {
        _trait(ListItemTintTraitKey.self, tint)
    }
  
  @inlinable nonisolated public func listItemTint(_ tint: SwiftUICore.Color?) -> some SwiftUICore.View {
        listItemTint(tint.map { .fixed($0) })
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@usableFromInline
internal struct ListItemTintTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.ListItemTint? {
    get { nil }
  }
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  @usableFromInline
  internal typealias Value = SwiftUI.ListItemTint?
}
@available(*, unavailable)
extension SwiftUI.ListItemTintTraitKey : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct AnyTabContent<SelectionValue> : SwiftUI.TabContent where SelectionValue : Swift.Hashable {
  public typealias TabValue = SelectionValue
  public init<T>(_ tabContent: T) where SelectionValue == T.TabValue, T : SwiftUI.TabContent
  @_Concurrency.MainActor @preconcurrency public var _identifiedView: SwiftUICore.AnyView {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Body = SwiftUI.AnyTabContent<SelectionValue>
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias _IdentifiedView = SwiftUICore.AnyView
}
@available(*, unavailable)
extension SwiftUI.AnyTabContent : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TabContent {
  nonisolated public func popover<Content>(isPresented: SwiftUICore.Binding<Swift.Bool>, attachmentAnchor: SwiftUI.PopoverAttachmentAnchor = .rect(.bounds), arrowEdge: SwiftUICore.Edge? = nil, @SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUI.TabContent<Self.TabValue> where Content : SwiftUICore.View
  
  nonisolated public func popover<Item, Content>(item: SwiftUICore.Binding<Item?>, attachmentAnchor: SwiftUI.PopoverAttachmentAnchor = .rect(.bounds), arrowEdge: SwiftUICore.Edge? = nil, @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUI.TabContent<Self.TabValue> where Item : Swift.Identifiable, Content : SwiftUICore.View
  
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.ToggleStyle where Self == SwiftUI.CheckboxToggleStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var checkbox: SwiftUI.CheckboxToggleStyle {
    get { .init() }
  }
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct CheckboxToggleStyle : SwiftUI.ToggleStyle {
  public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.CheckboxToggleStyle.Configuration) -> some SwiftUICore.View
  
  @available(macOS 10.15, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI19CheckboxToggleStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.CheckboxToggleStyle : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  nonisolated public func labelsHidden() -> some SwiftUICore.View
  
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func immersiveEnvironmentPicker<Content>(@SwiftUICore.ViewBuilder content: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct RoundedBorderTextEditorStyle : SwiftUI.TextEditorStyle {
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.RoundedBorderTextEditorStyle.Configuration) -> some SwiftUICore.View
  
  public init()
  @available(visionOS 1.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI28RoundedBorderTextEditorStyleV8makeBody13configurationQrAA0efG13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.RoundedBorderTextEditorStyle : Swift.Sendable {
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TextEditorStyle where Self == SwiftUI.RoundedBorderTextEditorStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var roundedBorder: SwiftUI.RoundedBorderTextEditorStyle {
    get { .init() }
  }
}
@available(iOS 17.0, tvOS 17.0, macOS 14.0, watchOS 10.0, *)
public struct ContainerBackgroundPlacement : Swift.Sendable, Swift.Hashable {
  @available(watchOS 10.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  public static let tabView: SwiftUI.ContainerBackgroundPlacement
  @available(watchOS 10.0, iOS 18.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  public static let navigation: SwiftUI.ContainerBackgroundPlacement
  @available(watchOS 11.0, iOS 18.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  public static let navigationSplitView: SwiftUI.ContainerBackgroundPlacement
  @available(macOS 15.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @available(watchOS, unavailable)
  public static let window: SwiftUI.ContainerBackgroundPlacement
  public static func == (a: SwiftUI.ContainerBackgroundPlacement, b: SwiftUI.ContainerBackgroundPlacement) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore.View {
  @available(iOS 17.0, tvOS 17.0, macOS 14.0, watchOS 10.0, *)
  nonisolated public func containerBackground<S>(_ style: S, for container: SwiftUI.ContainerBackgroundPlacement) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle
  
  @available(iOS 17.0, tvOS 17.0, macOS 14.0, watchOS 10.0, *)
  nonisolated public func containerBackground<V>(for container: SwiftUI.ContainerBackgroundPlacement, alignment: SwiftUICore.Alignment = .center, @SwiftUICore.ViewBuilder content: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@usableFromInline
internal struct ContainerBackgroundTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUICore.AnyView? {
    get { nil }
  }
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  @usableFromInline
  internal typealias Value = SwiftUICore.AnyView?
}
@available(*, unavailable)
extension SwiftUI.ContainerBackgroundTraitKey : Swift.Sendable {
}
@available(iOS 14.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct GroupBox<Label, Content> : SwiftUICore.View where Label : SwiftUICore.View, Content : SwiftUICore.View {
  @available(iOS 14.0, macOS 10.15, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_alwaysEmitIntoClient public init(@SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label) {
        self.init(label: label(), content: content)
    }
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 14.0, macOS 10.15, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI8GroupBoxV4bodyQrvp", 0) __<Label, Content>
}
@available(*, unavailable)
extension SwiftUI.GroupBox : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.GroupBox where Label == SwiftUI.GroupBoxStyleConfiguration.Label, Content == SwiftUI.GroupBoxStyleConfiguration.Content {
  nonisolated public init(_ configuration: SwiftUI.GroupBoxStyleConfiguration)
}
@available(iOS 14.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.GroupBox where Label == SwiftUICore.EmptyView {
  nonisolated public init(@SwiftUICore.ViewBuilder content: () -> Content)
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.GroupBox where Label == SwiftUICore.Text {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.GroupBox {
  @available(iOS, deprecated: 100000.0, renamed: "GroupBox(content:label:)")
  @available(macOS, deprecated: 100000.0, renamed: "GroupBox(content:label:)")
  @available(visionOS, deprecated: 100000.0, renamed: "GroupBox(content:label:)")
  nonisolated public init(label: Label, @SwiftUICore.ViewBuilder content: () -> Content)
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableStyle where Self == SwiftUI.InsetTableStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var inset: SwiftUI.InsetTableStyle {
    get { .init() }
  }
  @available(iOS, unavailable)
  @available(macOS, introduced: 12.0, deprecated: 100000.0, message: "Use the `.inset` style with the `.alternatingRowBackgrounds()` view modifier")
  @available(visionOS, unavailable)
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static func inset(alternatesRowBackgrounds: Swift.Bool) -> SwiftUI.InsetTableStyle {
        .init(alternatesRowBackgrounds: alternatesRowBackgrounds)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct InsetTableStyle : SwiftUI.TableStyle {
  public init()
  @available(iOS, unavailable)
  @available(macOS, introduced: 12.0, deprecated: 100000.0, message: "Use the `.inset` style with the `.alternatingRowBackgrounds()` view modifier")
  @available(visionOS, unavailable)
  public init(alternatesRowBackgrounds: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.InsetTableStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15InsetTableStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.InsetTableStyle : Swift.Sendable {
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ImmersiveSpaceViewContent<Content> : SwiftUI.ImmersiveSpaceContent where Content : SwiftUICore.View {
  @available(visionOS 1.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.ImmersiveSpaceViewContent : Swift.Sendable {
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ImmersiveSpaceViewContent {
  public var body: Swift.Never {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public func __designTimeSelection<T>(_ instance: T, _ identifier: Swift.String) -> T
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public func __designTimeSelection<T>(_ instance: T, _ identifier: Swift.String) -> some SwiftUICore.View where T : SwiftUICore.View

@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol PickerStyle {
  static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<Self, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<Self, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _PickerValue<Style, SelectionValue> where Style : SwiftUI.PickerStyle, SelectionValue : Swift.Hashable {
}
@available(*, unavailable)
extension SwiftUI._PickerValue : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  nonisolated public func pickerStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.PickerStyle
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, *)
@available(watchOS, unavailable)
extension SwiftUI.PickerStyle where Self == SwiftUI.SegmentedPickerStyle {
  @_alwaysEmitIntoClient public static var segmented: SwiftUI.SegmentedPickerStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, *)
@available(watchOS, unavailable)
public struct SegmentedPickerStyle : SwiftUI.PickerStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.SegmentedPickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.SegmentedPickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.SegmentedPickerStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct LinearCapacityGaugeStyle : SwiftUI.GaugeStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.LinearCapacityGaugeStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, watchOS 9.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24LinearCapacityGaugeStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.LinearCapacityGaugeStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.GaugeStyle where Self == SwiftUI.LinearCapacityGaugeStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var linearCapacity: SwiftUI.LinearCapacityGaugeStyle {
    get { .init() }
  }
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct AlertScene<Actions, Message> : SwiftUI.Scene where Actions : SwiftUICore.View, Message : SwiftUICore.View {
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder actions: () -> Actions) where Message == SwiftUICore.EmptyView
  @_disfavoredOverload public init<S>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder actions: () -> Actions) where Message == SwiftUICore.EmptyView, S : Swift.StringProtocol
  public init(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder actions: () -> Actions) where Message == SwiftUICore.EmptyView
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder actions: () -> Actions, @SwiftUICore.ViewBuilder message: () -> Message)
  @_disfavoredOverload public init<S>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder actions: () -> Actions, @SwiftUICore.ViewBuilder message: () -> Message) where S : Swift.StringProtocol
  public init(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder actions: () -> Actions, @SwiftUICore.ViewBuilder message: () -> Message)
  public init<T>(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> Actions) where Message == SwiftUICore.EmptyView
  @_disfavoredOverload public init<S, T>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> Actions) where Message == SwiftUICore.EmptyView, S : Swift.StringProtocol
  public init<T>(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> Actions) where Message == SwiftUICore.EmptyView
  public init<T>(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> Actions, @SwiftUICore.ViewBuilder message: (T) -> Message)
  @_disfavoredOverload public init<S, T>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> Actions, @SwiftUICore.ViewBuilder message: (T) -> Message) where S : Swift.StringProtocol
  public init<T>(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> Actions, @SwiftUICore.ViewBuilder message: (T) -> Message)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Scene {
    get
  }
  @available(macOS 15.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI10AlertSceneV4bodyQrvp", 0) __<Actions, Message>
}
@available(*, unavailable)
extension SwiftUI.AlertScene : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, *)
@available(watchOS, unavailable)
extension SwiftUI.TabViewStyle where Self == SwiftUI.TabBarOnlyTabViewStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var tabBarOnly: SwiftUI.TabBarOnlyTabViewStyle {
    @_silgen_name("tabBarOnlyMangledName")
    get { .init() }
  }
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal static var _tabBarOnlyABI: SwiftUI.TabBarOnlyTabViewStyle {
    @_silgen_name("$s7SwiftUI12TabViewStylePA2A0c7BarOnlycdE0VRszrlE03tabfG0AEvgZ")
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, *)
@available(watchOS, unavailable)
public struct TabBarOnlyTabViewStyle : SwiftUI.TabViewStyle {
  public init()
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.TabBarOnlyTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.TabBarOnlyTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.TabBarOnlyTabViewStyle : Swift.Sendable {
}
@available(macOS 10.15, tvOS 13.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public enum MoveCommandDirection : Swift.Sendable {
  case up
  case down
  case left
  case right
  public static func == (a: SwiftUI.MoveCommandDirection, b: SwiftUI.MoveCommandDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, tvOS 13.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @available(iOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func onMoveCommand(perform action: ((SwiftUI.MoveCommandDirection) -> Swift.Void)?) -> some SwiftUICore.View
  
  @available(iOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func onExitCommand(perform action: (() -> Swift.Void)?) -> some SwiftUICore.View
  
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func onPlayPauseCommand(perform action: (() -> Swift.Void)?) -> some SwiftUICore.View
  
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func onDeleteCommand(perform action: (() -> Swift.Void)?) -> some SwiftUICore.View
  
  @available(tvOS 14.3, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func pageCommand<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V = 1) -> some SwiftUICore.View where V : Swift.BinaryInteger
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct __UniversalListStyle : SwiftUI.ListStyle {
  public init()
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.__UniversalListStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.__UniversalListStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.__UniversalListStyle : Swift.Sendable {
}
@available(iOS 17.0, watchOS 10.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct ListSectionSpacing : Swift.Sendable {
  public static let `default`: SwiftUI.ListSectionSpacing
  public static let compact: SwiftUI.ListSectionSpacing
  public static func custom(_ spacing: CoreFoundation.CGFloat) -> SwiftUI.ListSectionSpacing
}
@available(iOS 17.0, watchOS 10.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  @inlinable nonisolated public func listSectionSpacing(_ spacing: SwiftUI.ListSectionSpacing) -> some SwiftUICore.View {
        modifier(
            _TraitWritingModifier<ListSectionSpacingTraitKey>(value: spacing))
        .environment(\.listSectionSpacing, spacing)
    }
  
  @inlinable nonisolated public func listSectionSpacing(_ spacing: CoreFoundation.CGFloat) -> some SwiftUICore.View {
        listSectionSpacing(.custom(spacing))
    }
  
}
@available(iOS 17.0, watchOS 10.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@usableFromInline
internal struct ListSectionSpacingTraitKey : SwiftUICore._ViewTraitKey {
  @_alwaysEmitIntoClient internal static var defaultValue: SwiftUI.ListSectionSpacing? {
    get { nil }
  }
  @available(iOS 17.0, watchOS 10.0, *)
  @usableFromInline
  @available(tvOS, unavailable)
  @available(macOS, unavailable)
  internal typealias Value = SwiftUI.ListSectionSpacing?
}
@available(*, unavailable)
extension SwiftUI.ListSectionSpacingTraitKey : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@usableFromInline
internal struct UseCompactSectionSpacingTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.UseCompactSectionSpacingTraitKey : Swift.Sendable {
}
@available(iOS 17.0, watchOS 10.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  @usableFromInline
  internal var listSectionSpacing: SwiftUI.ListSectionSpacing? {
    get
    set
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityHidden(_ hidden: Swift.Bool, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityHidden(_ hidden: Swift.Bool, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityHidden(_ hidden: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityHidden(_ hidden: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol ControlWidgetConfiguration {
  associatedtype Body : SwiftUI.ControlWidgetConfiguration
  @SwiftUI.ControlWidgetConfigurationBuilder @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
  @_Concurrency.MainActor @preconcurrency static func _makeWidgetControlConfiguration(control: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.ControlWidgetConfiguration {
  @_Concurrency.MainActor @preconcurrency public static func _makeWidgetControlConfiguration(control: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension Swift.Never : SwiftUI.ControlWidgetConfiguration {
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_functionBuilder public struct ControlWidgetConfigurationBuilder {
  @_alwaysEmitIntoClient public static func buildExpression<Content>(_ content: Content) -> Content where Content : SwiftUI.ControlWidgetConfiguration {
       content
    }
  @available(*, unavailable, message: "this expression does not conform to 'ControlWidgetConfiguration'")
  @_disfavoredOverload @_alwaysEmitIntoClient public static func buildExpression(_ invalid: Any) -> some SwiftUI.ControlWidgetConfiguration {
        fatalError()
    }
  
  @_alwaysEmitIntoClient public static func buildBlock<Content>(_ content: Content) -> some SwiftUI.ControlWidgetConfiguration where Content : SwiftUI.ControlWidgetConfiguration {
        return content
    }
  
}
@available(*, unavailable)
extension SwiftUI.ControlWidgetConfigurationBuilder : Swift.Sendable {
}
@available(macOS 15.0, visionOS 2.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct WindowPlacement : Swift.Equatable {
  @available(macOS, unavailable)
  public struct Position : Swift.Equatable {
    public static var utilityPanel: SwiftUI.WindowPlacement.Position {
      get
    }
    public static func leading(_ relativeWindow: SwiftUI.WindowProxy) -> SwiftUI.WindowPlacement.Position
    public static func trailing(_ relativeWindow: SwiftUI.WindowProxy) -> SwiftUI.WindowPlacement.Position
    public static func above(_ relativeWindow: SwiftUI.WindowProxy) -> SwiftUI.WindowPlacement.Position
    public static func below(_ relativeWindow: SwiftUI.WindowProxy) -> SwiftUI.WindowPlacement.Position
    @available(visionOS, introduced: 2.0, deprecated: 2.0, message: "Use PushWindowAction instead.")
    public static func replacing(_ relativeWindow: SwiftUI.WindowProxy) -> SwiftUI.WindowPlacement.Position
    public static func == (a: SwiftUI.WindowPlacement.Position, b: SwiftUI.WindowPlacement.Position) -> Swift.Bool
  }
  @available(visionOS, unavailable)
  public init(_ position: CoreFoundation.CGPoint? = nil, size: CoreFoundation.CGSize? = nil)
  @available(visionOS, unavailable)
  public init(x: CoreFoundation.CGFloat? = nil, y: CoreFoundation.CGFloat? = nil, width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil)
  @available(visionOS, unavailable)
  public init(_ position: SwiftUICore.UnitPoint, size: CoreFoundation.CGSize? = nil)
  @available(visionOS, unavailable)
  public init(_ position: SwiftUICore.UnitPoint, width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil)
  @available(macOS, unavailable)
  public init(_ position: SwiftUI.WindowPlacement.Position? = nil)
  @available(macOS, unavailable)
  public init(_ position: SwiftUI.WindowPlacement.Position? = nil, size: CoreFoundation.CGSize? = nil)
  @available(macOS, unavailable)
  public init(_ position: SwiftUI.WindowPlacement.Position? = nil, width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil, depth: CoreFoundation.CGFloat? = nil)
  public static func == (a: SwiftUI.WindowPlacement, b: SwiftUI.WindowPlacement) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.WindowPlacement : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.WindowPlacement.Position : Swift.Sendable {
}
@available(macOS 15.0, visionOS 2.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct WindowPlacementContext {
  @available(visionOS, unavailable)
  public var defaultDisplay: SwiftUI.DisplayProxy {
    get
  }
  @available(macOS, unavailable)
  public var windows: [SwiftUI.WindowProxy] {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.WindowPlacementContext : Swift.Sendable {
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct DisplayProxy : Swift.Equatable {
  public let bounds: CoreFoundation.CGRect
  public let safeAreaInsets: SwiftUICore.EdgeInsets
  public let visibleRect: CoreFoundation.CGRect
  public static func == (a: SwiftUI.DisplayProxy, b: SwiftUI.DisplayProxy) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.DisplayProxy : Swift.Sendable {
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct WindowProxy {
  public var id: Swift.String? {
    get
  }
  public var phase: SwiftUI.ScenePhase {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.WindowProxy : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Form<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  public init(@SwiftUICore.ViewBuilder content: () -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI4FormV4bodyQrvp", 0) __<Content>
}
@available(*, unavailable)
extension SwiftUI.Form : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.Form where Content == SwiftUI.FormStyleConfiguration.Content {
  nonisolated public init(_ configuration: SwiftUI.FormStyleConfiguration)
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol Commands {
  associatedtype Body : SwiftUI.Commands
  @SwiftUI.CommandsBuilder @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
  @available(iOS 15.0, macOS 12.0, *)
  nonisolated static func _makeCommands(content: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._CommandsInputs) -> SwiftUI._CommandsOutputs
  @_Concurrency.MainActor @preconcurrency func _resolve(into resolved: inout SwiftUI._ResolvedCommands)
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Commands {
  @available(iOS 15.0, macOS 12.0, *)
  nonisolated public static func _makeCommands(content: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._CommandsInputs) -> SwiftUI._CommandsOutputs
  @_Concurrency.MainActor @preconcurrency public func _resolve(into resolved: inout SwiftUI._ResolvedCommands)
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct EmptyCommands : SwiftUI.Commands {
  @available(iOS 15.0, macOS 12.0, *)
  nonisolated public static func _makeCommands(content: SwiftUICore._GraphValue<SwiftUI.EmptyCommands>, inputs: SwiftUI._CommandsInputs) -> SwiftUI._CommandsOutputs
  public init()
  @_Concurrency.MainActor @preconcurrency public func _resolve(into: inout SwiftUI._ResolvedCommands)
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.EmptyCommands : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _ResolvedCommands {
}
@available(*, unavailable)
extension SwiftUI._ResolvedCommands : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func commands<Content>(@SwiftUI.CommandsBuilder content: () -> Content) -> some SwiftUI.Scene where Content : SwiftUI.Commands
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_functionBuilder public struct CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildExpression<Content>(_ content: Content) -> Content where Content : SwiftUI.Commands {
       content
    }
  @available(*, unavailable, message: "this expression does not conform to 'Commands'")
  @_disfavoredOverload @_alwaysEmitIntoClient public static func buildExpression(_ invalid: Any) -> some SwiftUI.Commands {
        buildBlock()
    }
  
  @_alwaysEmitIntoClient public static func buildBlock() -> SwiftUI.EmptyCommands {
        EmptyCommands()
    }
  @_alwaysEmitIntoClient public static func buildBlock<C>(_ content: C) -> C where C : SwiftUI.Commands {
        content
    }
}
@available(*, unavailable)
extension SwiftUI.CommandsBuilder : Swift.Sendable {
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct MultiDatePicker<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15MultiDatePickerV4bodyQrvp", 0) __<Label>
}
@available(*, unavailable)
extension SwiftUI.MultiDatePicker : Swift.Sendable {
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.MultiDatePicker {
  nonisolated public init(selection: SwiftUICore.Binding<Swift.Set<Foundation.DateComponents>>, @SwiftUICore.ViewBuilder label: () -> Label)
  nonisolated public init(selection: SwiftUICore.Binding<Swift.Set<Foundation.DateComponents>>, in bounds: Swift.Range<Foundation.Date>, @SwiftUICore.ViewBuilder label: () -> Label)
  nonisolated public init(selection: SwiftUICore.Binding<Swift.Set<Foundation.DateComponents>>, in bounds: Swift.PartialRangeFrom<Foundation.Date>, @SwiftUICore.ViewBuilder label: () -> Label)
  nonisolated public init(selection: SwiftUICore.Binding<Swift.Set<Foundation.DateComponents>>, in bounds: Swift.PartialRangeUpTo<Foundation.Date>, @SwiftUICore.ViewBuilder label: () -> Label)
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.MultiDatePicker where Label == SwiftUICore.Text {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<Swift.Set<Foundation.DateComponents>>)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<Swift.Set<Foundation.DateComponents>>, in bounds: Swift.Range<Foundation.Date>)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<Swift.Set<Foundation.DateComponents>>, in bounds: Swift.PartialRangeFrom<Foundation.Date>)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<Swift.Set<Foundation.DateComponents>>, in bounds: Swift.PartialRangeUpTo<Foundation.Date>)
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.MultiDatePicker where Label == SwiftUICore.Text {
  @_disfavoredOverload nonisolated public init<S>(_ title: S, selection: SwiftUICore.Binding<Swift.Set<Foundation.DateComponents>>) where S : Swift.StringProtocol
  @_disfavoredOverload nonisolated public init<S>(_ title: S, selection: SwiftUICore.Binding<Swift.Set<Foundation.DateComponents>>, in bounds: Swift.Range<Foundation.Date>) where S : Swift.StringProtocol
  @_disfavoredOverload nonisolated public init<S>(_ title: S, selection: SwiftUICore.Binding<Swift.Set<Foundation.DateComponents>>, in bounds: Swift.PartialRangeFrom<Foundation.Date>) where S : Swift.StringProtocol
  @_disfavoredOverload nonisolated public init<S>(_ title: S, selection: SwiftUICore.Binding<Swift.Set<Foundation.DateComponents>>, in bounds: Swift.PartialRangeUpTo<Foundation.Date>) where S : Swift.StringProtocol
}
extension SwiftUICore.View {
  @available(iOS 18.1, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func documentBrowserContextMenu(@SwiftUICore.ViewBuilder _ menu: @escaping ([Foundation.URL]?) -> some View) -> some SwiftUICore.View
  
}
@available(iOS 18.1, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  @_Concurrency.MainActor @preconcurrency public func documentBrowserContextMenu(@SwiftUICore.ViewBuilder _ menu: @escaping ([Foundation.URL]?) -> some View) -> some SwiftUI.Scene
  
}
@available(iOS 17.5, macOS 14.5, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func onPencilDoubleTap(perform action: @escaping (_ value: SwiftUI.PencilDoubleTapGestureValue) -> Swift.Void) -> some SwiftUICore.View
  
}
@available(iOS 17.5, macOS 14.5, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct PencilDoubleTapGestureValue : Swift.Hashable {
  public let hoverPose: SwiftUI.PencilHoverPose?
  public static func == (a: SwiftUI.PencilDoubleTapGestureValue, b: SwiftUI.PencilDoubleTapGestureValue) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.PencilDoubleTapGestureValue : Swift.Sendable {
}
@available(iOS 17.5, macOS 14.5, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func onPencilSqueeze(perform action: @escaping (_ phase: SwiftUI.PencilSqueezeGesturePhase) -> Swift.Void) -> some SwiftUICore.View
  
}
@available(iOS 17.5, macOS 14.5, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@frozen public enum PencilSqueezeGesturePhase : Swift.Equatable {
  case active(SwiftUI.PencilSqueezeGestureValue)
  case ended(SwiftUI.PencilSqueezeGestureValue)
  case failed
  public static func == (a: SwiftUI.PencilSqueezeGesturePhase, b: SwiftUI.PencilSqueezeGesturePhase) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.PencilSqueezeGesturePhase : Swift.Sendable {
}
@available(iOS 17.5, macOS 14.5, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct PencilSqueezeGestureValue : Swift.Hashable {
  public let hoverPose: SwiftUI.PencilHoverPose?
  public static func == (a: SwiftUI.PencilSqueezeGestureValue, b: SwiftUI.PencilSqueezeGestureValue) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.PencilSqueezeGestureValue : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct ScrollPhaseChangeContext {
  public var geometry: SwiftUICore.ScrollGeometry {
    get
  }
  public var velocity: CoreFoundation.CGVector? {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.ScrollPhaseChangeContext : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func onScrollPhaseChange(_ action: @escaping (_ oldPhase: SwiftUICore.ScrollPhase, _ newPhase: SwiftUICore.ScrollPhase) -> Swift.Void) -> some SwiftUICore.View
  
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func onScrollPhaseChange(_ action: @escaping (_ oldPhase: SwiftUICore.ScrollPhase, _ newPhase: SwiftUICore.ScrollPhase, _ context: SwiftUI.ScrollPhaseChangeContext) -> Swift.Void) -> some SwiftUICore.View
  
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func onScrollGeometryChange<T>(for type: T.Type, of transform: @escaping (SwiftUICore.ScrollGeometry) -> T, action: @escaping (_ oldValue: T, _ newValue: T) -> Swift.Void) -> some SwiftUICore.View where T : Swift.Equatable
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct TabRole : Swift.Hashable, Swift.Sendable {
  public static var search: SwiftUI.TabRole {
    get
  }
  public static func == (a: SwiftUI.TabRole, b: SwiftUI.TabRole) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct ToolbarCustomizationOptions : Swift.OptionSet, Swift.Sendable {
  public typealias RawValue = Swift.Int
  public static var alwaysAvailable: SwiftUI.ToolbarCustomizationOptions {
    get
  }
  public var rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ArrayLiteralElement = SwiftUI.ToolbarCustomizationOptions
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Element = SwiftUI.ToolbarCustomizationOptions
}
extension SwiftUI.CustomizableToolbarContent {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public func defaultCustomization(_ defaultVisibility: SwiftUICore.Visibility = .automatic, options: SwiftUI.ToolbarCustomizationOptions = []) -> some SwiftUI.CustomizableToolbarContent
  
  @available(iOS, introduced: 16.0, deprecated: 16.0, message: "Please provide either a visibility or customization options")
  @available(macOS, introduced: 13.0, deprecated: 13.0, message: "Please provide either a visibility or customization options")
  @available(tvOS, introduced: 16.0, deprecated: 16.0, message: "Please provide either a visibility or customization options")
  @available(watchOS, introduced: 9.0, deprecated: 9.0, message: "Please provide either a visibility or customization options")
  public func defaultCustomization() -> some SwiftUI.CustomizableToolbarContent
  
}
extension SwiftUICore.View {
  @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
  nonisolated public func menuActionDismissBehavior(_ behavior: SwiftUI.MenuActionDismissBehavior) -> some SwiftUICore.View
  
}
@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
public struct MenuActionDismissBehavior : Swift.Equatable {
  public static let automatic: SwiftUI.MenuActionDismissBehavior
  public static let enabled: SwiftUI.MenuActionDismissBehavior
  @available(tvOS 17.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public static let disabled: SwiftUI.MenuActionDismissBehavior
  public static func == (a: SwiftUI.MenuActionDismissBehavior, b: SwiftUI.MenuActionDismissBehavior) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.MenuActionDismissBehavior : Swift.Sendable {
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct HSplitView<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  public init(@SwiftUICore.ViewBuilder content: () -> Content)
  @available(macOS 10.15, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.HSplitView : Swift.Sendable {
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct VSplitView<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  public init(@SwiftUICore.ViewBuilder content: () -> Content)
  @available(macOS 10.15, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.VSplitView : Swift.Sendable {
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct _SplitViewContainer : SwiftUICore._VariadicView.UnaryViewRoot {
  @_Concurrency.MainActor @preconcurrency public func body(children: SwiftUICore._VariadicView.Children) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public static var _viewListOptions: Swift.Int {
    get
  }
  @available(macOS 10.15, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI19_SplitViewContainerV4body8childrenQrAA09_VariadicD9_ChildrenV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI._SplitViewContainer : Swift.Sendable {
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `BorderedButtonMenuStyle` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct PullDownMenuButtonStyle : SwiftUI.MenuButtonStyle {
  public init()
  public func _body(configuration: SwiftUI.PullDownMenuButtonStyle._Configuration) -> some SwiftUICore.View
  
  @available(iOS, unavailable, message: "Use `BorderedButtonMenuStyle` instead.")
  @available(tvOS, unavailable, message: "Use `BorderedButtonMenuStyle` instead.")
  @available(watchOS, unavailable, message: "Use `BorderedButtonMenuStyle` instead.")
  @available(visionOS, unavailable, message: "Use `BorderedButtonMenuStyle` instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `BorderedButtonMenuStyle` instead.")
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI23PullDownMenuButtonStyleV5_body13configurationQrAA01_efG13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.PullDownMenuButtonStyle : Swift.Sendable {
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `BorderlessButtonMenuStyle` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct BorderlessPullDownMenuButtonStyle : SwiftUI.MenuButtonStyle {
  public init()
  public func _body(configuration: SwiftUI.BorderlessPullDownMenuButtonStyle._Configuration) -> some SwiftUICore.View
  
  @available(iOS, unavailable, message: "Use `BorderlessButtonMenuStyle` instead.")
  @available(tvOS, unavailable, message: "Use `BorderlessButtonMenuStyle` instead.")
  @available(watchOS, unavailable, message: "Use `BorderlessButtonMenuStyle` instead.")
  @available(visionOS, unavailable, message: "Use `BorderlessButtonMenuStyle` instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `BorderlessButtonMenuStyle` instead.")
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI33BorderlessPullDownMenuButtonStyleV5_body13configurationQrAA01_fgH13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.BorderlessPullDownMenuButtonStyle : Swift.Sendable {
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `BorderlessButtonMenuStyle` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct BorderlessButtonMenuButtonStyle : SwiftUI.MenuButtonStyle {
  public init()
  public func _body(configuration: SwiftUI.BorderlessButtonMenuButtonStyle._Configuration) -> some SwiftUICore.View
  
  @available(iOS, unavailable, message: "Use `BorderlessButtonMenuStyle` instead.")
  @available(tvOS, unavailable, message: "Use `BorderlessButtonMenuStyle` instead.")
  @available(watchOS, unavailable, message: "Use `BorderlessButtonMenuStyle` instead.")
  @available(visionOS, unavailable, message: "Use `BorderlessButtonMenuStyle` instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `BorderlessButtonMenuStyle` instead.")
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI020BorderlessButtonMenuD5StyleV5_body13configurationQrAA01_edF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.BorderlessButtonMenuButtonStyle : Swift.Sendable {
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `TexturedButtonMenuStyle` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct _TexturedPullDownMenuButtonStyle : SwiftUI.MenuButtonStyle {
  public init()
  public func _body(configuration: SwiftUI._TexturedPullDownMenuButtonStyle._Configuration) -> some SwiftUICore.View
  
  @available(iOS, unavailable, message: "Use `TexturedButtonMenuStyle` instead.")
  @available(tvOS, unavailable, message: "Use `TexturedButtonMenuStyle` instead.")
  @available(watchOS, unavailable, message: "Use `TexturedButtonMenuStyle` instead.")
  @available(visionOS, unavailable, message: "Use `TexturedButtonMenuStyle` instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `TexturedButtonMenuStyle` instead.")
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI32_TexturedPullDownMenuButtonStyleV5_body13configurationQrAA01_fgH13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI._TexturedPullDownMenuButtonStyle : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TextEditingCommands : SwiftUI.Commands {
  public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Commands {
    get
  }
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI19TextEditingCommandsV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.TextEditingCommands : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TextFormattingCommands : SwiftUI.Commands {
  public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Commands {
    get
  }
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI22TextFormattingCommandsV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.TextFormattingCommands : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TableColumnAlignment : Swift.Hashable, Swift.Sendable {
  public static var automatic: SwiftUI.TableColumnAlignment {
    get
  }
  public static var leading: SwiftUI.TableColumnAlignment {
    get
  }
  public static var center: SwiftUI.TableColumnAlignment {
    get
  }
  public static var trailing: SwiftUI.TableColumnAlignment {
    get
  }
  public static var numeric: SwiftUI.TableColumnAlignment {
    get
  }
  public static func numeric(_ numberingSystem: Foundation.Locale.NumberingSystem) -> SwiftUI.TableColumnAlignment
  public static func == (a: SwiftUI.TableColumnAlignment, b: SwiftUI.TableColumnAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnContent {
  @_Concurrency.MainActor @preconcurrency public func alignment(_ alignment: SwiftUI.TableColumnAlignment) -> some SwiftUI.TableColumnContent<Self.TableRowValue, Self.TableColumnSortComparator>
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DisclosureGroup<Label, Content> : SwiftUICore.View where Label : SwiftUICore.View, Content : SwiftUICore.View {
  public init(@SwiftUICore.ViewBuilder content: @escaping () -> Content, @SwiftUICore.ViewBuilder label: () -> Label)
  public init(isExpanded: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: @escaping () -> Content, @SwiftUICore.ViewBuilder label: () -> Label)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15DisclosureGroupV4bodyQrvp", 0) __<Label, Content>
}
@available(*, unavailable)
extension SwiftUI.DisclosureGroup : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DisclosureGroup where Label == SwiftUICore.Text {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: @escaping () -> Content)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, isExpanded: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: @escaping () -> Content)
  @_disfavoredOverload nonisolated public init<S>(_ label: S, @SwiftUICore.ViewBuilder content: @escaping () -> Content) where S : Swift.StringProtocol
  @_disfavoredOverload nonisolated public init<S>(_ label: S, isExpanded: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: @escaping () -> Content) where S : Swift.StringProtocol
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func textInputCompletion(_ completion: Swift.String) -> some SwiftUICore.View
  
}
@available(macOS 15.0, visionOS 1.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.WindowStyle where Self == SwiftUI.PlainWindowStyle {
  @_alwaysEmitIntoClient public static var plain: SwiftUI.PlainWindowStyle {
    get { .init() }
  }
}
@available(macOS 15.0, visionOS 1.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct PlainWindowStyle : SwiftUI.WindowStyle {
  public typealias _Body = Swift.Never
  public init()
}
@available(*, unavailable)
extension SwiftUI.PlainWindowStyle : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Picker<Label, SelectionValue, Content> : SwiftUICore.View where Label : SwiftUICore.View, SelectionValue : Swift.Hashable, Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI6PickerV4bodyQrvp", 0) __<Label, SelectionValue, Content>
}
@available(*, unavailable)
extension SwiftUI.Picker : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Picker {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public init<C>(sources: C, selection: Swift.KeyPath<C.Element, SwiftUICore.Binding<SelectionValue>>, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label) where C : Swift.RandomAccessCollection
  @_alwaysEmitIntoClient nonisolated public init(selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label) {
        self.init(selection: selection, label: label(), content: content)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Picker where Label == SwiftUICore.Text {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder content: () -> Content)
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public init<C>(_ titleKey: SwiftUICore.LocalizedStringKey, sources: C, selection: Swift.KeyPath<C.Element, SwiftUICore.Binding<SelectionValue>>, @SwiftUICore.ViewBuilder content: () -> Content) where C : Swift.RandomAccessCollection
  @_disfavoredOverload nonisolated public init<S>(_ title: S, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_disfavoredOverload nonisolated public init<C, S>(_ title: S, sources: C, selection: Swift.KeyPath<C.Element, SwiftUICore.Binding<SelectionValue>>, @SwiftUICore.ViewBuilder content: () -> Content) where C : Swift.RandomAccessCollection, S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Picker where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  @_alwaysEmitIntoClient nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder content: () -> Content) {
        self.init(
            selection: selection,
            content: content
        ) {
            SwiftUI.Label(titleKey, systemImage: systemImage)
        }
    }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_alwaysEmitIntoClient nonisolated public init<C>(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, sources: C, selection: Swift.KeyPath<C.Element, SwiftUICore.Binding<SelectionValue>>, @SwiftUICore.ViewBuilder content: () -> Content) where C : Swift.RandomAccessCollection, C.Element == SwiftUICore.Binding<SelectionValue> {
        self.init(sources: sources, selection: selection) {
            content()
        } label: {
            SwiftUI.Label(titleKey, systemImage: systemImage)
        }
    }
  @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public init<S>(_ title: S, systemImage: Swift.String, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol {
        self.init(selection: selection) {
            content()
        } label: {
            SwiftUI.Label(title, systemImage: systemImage)
        }
    }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public init<C, S>(_ title: S, systemImage: Swift.String, sources: C, selection: Swift.KeyPath<C.Element, SwiftUICore.Binding<SelectionValue>>, @SwiftUICore.ViewBuilder content: () -> Content) where C : Swift.RandomAccessCollection, S : Swift.StringProtocol, C.Element == SwiftUICore.Binding<SelectionValue> {
        self.init(sources: sources, selection: selection) {
            content()
        } label: {
            SwiftUI.Label(title, systemImage: systemImage)
        }
    }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Picker where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: DeveloperToolsSupport.ImageResource, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder content: () -> Content)
  nonisolated public init<C>(_ titleKey: SwiftUICore.LocalizedStringKey, image: DeveloperToolsSupport.ImageResource, sources: C, selection: Swift.KeyPath<C.Element, SwiftUICore.Binding<SelectionValue>>, @SwiftUICore.ViewBuilder content: () -> Content) where C : Swift.RandomAccessCollection, C.Element == SwiftUICore.Binding<SelectionValue>
  @_disfavoredOverload nonisolated public init<S>(_ title: S, image: DeveloperToolsSupport.ImageResource, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
  @_disfavoredOverload nonisolated public init<C, S>(_ title: S, image: DeveloperToolsSupport.ImageResource, sources: C, selection: Swift.KeyPath<C.Element, SwiftUICore.Binding<SelectionValue>>, @SwiftUICore.ViewBuilder content: () -> Content) where C : Swift.RandomAccessCollection, S : Swift.StringProtocol, C.Element == SwiftUICore.Binding<SelectionValue>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.Picker {
  nonisolated public init(selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder currentValueLabel: () -> some View)
  nonisolated public init<C>(sources: C, selection: Swift.KeyPath<C.Element, SwiftUICore.Binding<SelectionValue>>, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder currentValueLabel: () -> some View) where C : Swift.RandomAccessCollection
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.Picker where Label == SwiftUICore.Text {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder currentValueLabel: () -> some View)
  nonisolated public init<C>(_ titleKey: SwiftUICore.LocalizedStringKey, sources: C, selection: Swift.KeyPath<C.Element, SwiftUICore.Binding<SelectionValue>>, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder currentValueLabel: () -> some View) where C : Swift.RandomAccessCollection
  @_disfavoredOverload nonisolated public init<S>(_ title: S, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder currentValueLabel: () -> some View) where S : Swift.StringProtocol
  @_disfavoredOverload nonisolated public init<C, S>(_ title: S, sources: C, selection: Swift.KeyPath<C.Element, SwiftUICore.Binding<SelectionValue>>, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder currentValueLabel: () -> some View) where C : Swift.RandomAccessCollection, S : Swift.StringProtocol
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.Picker where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  @_alwaysEmitIntoClient nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder currentValueLabel: () -> some View) {
        self.init(
            selection: selection,
            content: content,
            label: {
                SwiftUI.Label(titleKey, systemImage: systemImage)
            },
            currentValueLabel: currentValueLabel)
    }
  @_alwaysEmitIntoClient nonisolated public init<C>(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, sources: C, selection: Swift.KeyPath<C.Element, SwiftUICore.Binding<SelectionValue>>, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder currentValueLabel: () -> some View) where C : Swift.RandomAccessCollection, C.Element == SwiftUICore.Binding<SelectionValue> {
        self.init(
            sources: sources,
            selection: selection,
            content: content,
            label: {
                SwiftUI.Label(titleKey, systemImage: systemImage)
            },
            currentValueLabel: currentValueLabel)
    }
  @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public init<S>(_ title: S, systemImage: Swift.String, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder currentValueLabel: () -> some View) where S : Swift.StringProtocol {
        self.init(
            selection: selection,
            content: content,
            label: {
                SwiftUI.Label(title, systemImage: systemImage)
            },
            currentValueLabel: currentValueLabel)
    }
  @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public init<C, S>(_ title: S, systemImage: Swift.String, sources: C, selection: Swift.KeyPath<C.Element, SwiftUICore.Binding<SelectionValue>>, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder currentValueLabel: () -> some View) where C : Swift.RandomAccessCollection, S : Swift.StringProtocol, C.Element == SwiftUICore.Binding<SelectionValue> {
        self.init(
            sources: sources,
            selection: selection,
            content: content,
            label: {
                SwiftUI.Label(title, systemImage: systemImage)
            },
            currentValueLabel: currentValueLabel)
    }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.Picker where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: DeveloperToolsSupport.ImageResource, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder currentValueLabel: () -> some View)
  nonisolated public init<C>(_ titleKey: SwiftUICore.LocalizedStringKey, image: DeveloperToolsSupport.ImageResource, sources: C, selection: Swift.KeyPath<C.Element, SwiftUICore.Binding<SelectionValue>>, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder currentValueLabel: () -> some View) where C : Swift.RandomAccessCollection, C.Element == SwiftUICore.Binding<SelectionValue>
  @_disfavoredOverload nonisolated public init<S>(_ title: S, image: DeveloperToolsSupport.ImageResource, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder currentValueLabel: () -> some View) where S : Swift.StringProtocol
  @_disfavoredOverload nonisolated public init<C, S>(_ title: S, image: DeveloperToolsSupport.ImageResource, sources: C, selection: Swift.KeyPath<C.Element, SwiftUICore.Binding<SelectionValue>>, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder currentValueLabel: () -> some View) where C : Swift.RandomAccessCollection, S : Swift.StringProtocol, C.Element == SwiftUICore.Binding<SelectionValue>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Picker {
  @available(iOS, deprecated: 100000.0, renamed: "Picker(selection:content:label:)")
  @available(macOS, deprecated: 100000.0, renamed: "Picker(selection:content:label:)")
  @available(tvOS, deprecated: 100000.0, renamed: "Picker(selection:content:label:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Picker(selection:content:label:)")
  @available(visionOS, deprecated: 100000.0, renamed: "Picker(selection:content:label:)")
  nonisolated public init(selection: SwiftUICore.Binding<SelectionValue>, label: Label, @SwiftUICore.ViewBuilder content: () -> Content)
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.PickerStyle where Self == SwiftUI.PalettePickerStyle {
  @_alwaysEmitIntoClient public static var palette: SwiftUI.PalettePickerStyle {
    get { .init() }
  }
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct PalettePickerStyle : SwiftUI.PickerStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.PalettePickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.PalettePickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.PalettePickerStyle : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct Tab<Value, Content, Label> {
}
@available(*, unavailable)
extension SwiftUI.Tab : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.Tab : SwiftUI.TabContent where Value : Swift.Hashable, Content : SwiftUICore.View, Label : SwiftUICore.View {
  public typealias TabValue = Value
  @_disfavoredOverload nonisolated public init<S>(_ title: S, image: Swift.String, value: Value, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol
  @_disfavoredOverload nonisolated public init<S>(_ title: S, image: Swift.String, value: Value, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol
  @_disfavoredOverload nonisolated public init<S, T>(_ title: S, image: Swift.String, value: T, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol, T : Swift.Hashable
  @_disfavoredOverload nonisolated public init<S, T>(_ title: S, image: Swift.String, value: T, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol, T : Swift.Hashable
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: Swift.String, value: Value, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: Swift.String, value: Value, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel
  nonisolated public init<T>(_ titleKey: SwiftUICore.LocalizedStringKey, image: Swift.String, value: T, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, Label == SwiftUI.DefaultTabLabel, T : Swift.Hashable
  nonisolated public init<T>(_ titleKey: SwiftUICore.LocalizedStringKey, image: Swift.String, value: T, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, Label == SwiftUI.DefaultTabLabel, T : Swift.Hashable
  @_disfavoredOverload nonisolated public init<S>(_ title: S, systemImage: Swift.String, value: Value, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol
  @_disfavoredOverload nonisolated public init<S>(_ title: S, systemImage: Swift.String, value: Value, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol
  @_disfavoredOverload nonisolated public init<S, T>(_ title: S, systemImage: Swift.String, value: T, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol, T : Swift.Hashable
  @_disfavoredOverload nonisolated public init<S, T>(_ title: S, systemImage: Swift.String, value: T, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol, T : Swift.Hashable
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, value: Value, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, value: Value, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel
  nonisolated public init<T>(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, value: T, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, Label == SwiftUI.DefaultTabLabel, T : Swift.Hashable
  nonisolated public init<T>(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, value: T, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, Label == SwiftUI.DefaultTabLabel, T : Swift.Hashable
  nonisolated public init(value: Value, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUICore.EmptyView
  nonisolated public init<V>(value: V, @SwiftUICore.ViewBuilder content: () -> Content) where Value == V?, Label == SwiftUICore.EmptyView, V : Swift.Hashable
  nonisolated public init(value: Value, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel
  nonisolated public init<V>(value: V, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Value == V?, Label == SwiftUI.DefaultTabLabel, V : Swift.Hashable
  nonisolated public init(value: Value, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label)
  nonisolated public init(value: Value, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label)
  nonisolated public init<V>(value: V, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label) where Value == V?, V : Swift.Hashable
  nonisolated public init<V>(value: V, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label) where Value == V?, V : Swift.Hashable
  @_Concurrency.MainActor @preconcurrency public var _identifiedView: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var body: SwiftUI.Tab<Value, Content, Label> {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Body = SwiftUI.Tab<Value, Content, Label>
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias _IdentifiedView = @_opaqueReturnTypeOf("$s7SwiftUI3TabVAASHRzAA4ViewR_AaDR0_rlE011_identifiedD0Qrvp", 0) __<Value, Content, Label>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.Tab where Value == Swift.Never, Content : SwiftUICore.View, Label : SwiftUICore.View {
  @_disfavoredOverload public init<S>(_ title: S, image: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol
  @_disfavoredOverload public init<S>(_ title: S, image: Swift.String, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: Swift.String, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel
  @_disfavoredOverload public init<S>(_ title: S, systemImage: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol
  @_disfavoredOverload public init<S>(_ title: S, systemImage: Swift.String, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.Tab where Value == Swift.Never, Content : SwiftUICore.View, Label : SwiftUICore.View {
  public init(@SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUICore.EmptyView
  public init(role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel
  public init(@SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label)
  public init(role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label)
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func tabViewSidebarHeader<Content>(@SwiftUICore.ViewBuilder content: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  nonisolated public func tabViewSidebarFooter<Content>(@SwiftUICore.ViewBuilder content: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  nonisolated public func tabViewSidebarBottomBar<Content>(@SwiftUICore.ViewBuilder content: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.Group : SwiftUI.Scene where Content : SwiftUI.Scene {
  @inlinable nonisolated public init(@SwiftUI.SceneBuilder content: () -> Content) {
        self.init(_content: content())
    }
  nonisolated public static func _makeScene(scene: SwiftUICore._GraphValue<SwiftUICore.Group<Content>>, inputs: SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@usableFromInline
@_Concurrency.MainActor @preconcurrency internal struct _TupleScene<T> : SwiftUI.Scene {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var value: T
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var body: Swift.Never {
    get
  }
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal init(_ value: T)
  @usableFromInline
  nonisolated internal static func _makeScene(scene: SwiftUICore._GraphValue<SwiftUI._TupleScene<T>>, inputs: SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  @usableFromInline
  internal typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._TupleScene : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowBuilder {
  @_alwaysEmitIntoClient public static func buildIf<C>(_ content: C?) -> C? where Value == C.TableRowValue, C : SwiftUI.TableRowContent {
        content
    }
  @_alwaysEmitIntoClient public static func buildEither<T, F>(first: T) -> SwiftUICore._ConditionalContent<T, F> where Value == T.TableRowValue, T : SwiftUI.TableRowContent, F : SwiftUI.TableRowContent, T.TableRowValue == F.TableRowValue {
        _ConditionalContent<T, F>(storage: .trueContent(first))
    }
  @_alwaysEmitIntoClient public static func buildEither<T, F>(second: F) -> SwiftUICore._ConditionalContent<T, F> where Value == T.TableRowValue, T : SwiftUI.TableRowContent, F : SwiftUI.TableRowContent, T.TableRowValue == F.TableRowValue {
        _ConditionalContent<T, F>(storage: .falseContent(second))
    }
  @available(*, unavailable, message: "this code may crash on earlier versions of the OS; add 'if #available' version check around the Table instead")
  @_alwaysEmitIntoClient public static func buildLimitedAvailability(_ content: some TableRowContent<Value>) -> some SwiftUI.TableRowContent<Value> {
        content
    }
  
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore._ConditionalContent : SwiftUI.TableRowContent where TrueContent : SwiftUI.TableRowContent, FalseContent : SwiftUI.TableRowContent {
  public typealias TableRowValue = TrueContent.TableRowValue
  public typealias TableRowBody = Swift.Never
  nonisolated public static func _makeRows(content: SwiftUICore._GraphValue<SwiftUICore._ConditionalContent<TrueContent, FalseContent>>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  nonisolated public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
  @usableFromInline
  internal init(storage: SwiftUICore._ConditionalContent<TrueContent, FalseContent>.Storage)
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Optional : SwiftUI.TableRowContent where Wrapped : SwiftUI.TableRowContent {
  public typealias TableRowValue = Wrapped.TableRowValue
  public typealias TableRowBody = Swift.Never
  nonisolated public static func _makeRows(content: SwiftUICore._GraphValue<Swift.Optional<Wrapped>>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  nonisolated public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityInputLabels(_ inputLabels: [SwiftUICore.Text], isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityInputLabels(_ inputLabelKeys: [SwiftUICore.LocalizedStringKey], isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload nonisolated public func accessibilityInputLabels<S>(_ inputLabels: [S], isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityInputLabels(_ inputLabels: [SwiftUICore.Text], isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
  nonisolated public func accessibilityInputLabels(_ inputLabelKeys: [SwiftUICore.LocalizedStringKey], isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_disfavoredOverload nonisolated public func accessibilityInputLabels<S>(_ inputLabels: [S], isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.TabContent {
  nonisolated public func accessibilityInputLabels(_ inputLabels: [SwiftUICore.Text], isEnabled: Swift.Bool = true) -> some SwiftUI.TabContent<Self.TabValue>
  
  nonisolated public func accessibilityInputLabels(_ inputLabelKeys: [SwiftUICore.LocalizedStringKey], isEnabled: Swift.Bool = true) -> some SwiftUI.TabContent<Self.TabValue>
  
  @_disfavoredOverload nonisolated public func accessibilityInputLabels<S>(_ inputLabels: [S], isEnabled: Swift.Bool = true) -> some SwiftUI.TabContent<Self.TabValue> where S : Swift.StringProtocol
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityInputLabels(_ inputLabels: [SwiftUICore.Text]) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityInputLabels(_ inputLabelKeys: [SwiftUICore.LocalizedStringKey]) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload nonisolated public func accessibilityInputLabels<S>(_ inputLabels: [S]) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityInputLabels(_ inputLabels: [SwiftUICore.Text]) -> SwiftUICore.ModifiedContent<Content, Modifier>
  nonisolated public func accessibilityInputLabels(_ inputLabelKeys: [SwiftUICore.LocalizedStringKey]) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_disfavoredOverload nonisolated public func accessibilityInputLabels<S>(_ inputLabels: [S]) -> SwiftUICore.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct AsyncImage<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  public init(url: Foundation.URL?, scale: CoreFoundation.CGFloat = 1) where Content == SwiftUICore.Image
  @_alwaysEmitIntoClient public init<I, P>(url: Foundation.URL?, scale: CoreFoundation.CGFloat = 1, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Image) -> I, @SwiftUICore.ViewBuilder placeholder: @escaping () -> P) where Content == SwiftUICore._ConditionalContent<I, P>, I : SwiftUICore.View, P : SwiftUICore.View {
        self.init(url: url, scale: scale) { phase in
            if let i = phase.image {
                content(i)
            } else {
                placeholder()
            }
        }
    }
  public init(url: Foundation.URL?, scale: CoreFoundation.CGFloat = 1, transaction: SwiftUICore.Transaction = Transaction(), @SwiftUICore.ViewBuilder content: @escaping (SwiftUI.AsyncImagePhase) -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI10AsyncImageV4bodyQrvp", 0) __<Content>
}
@available(*, unavailable)
extension SwiftUI.AsyncImage : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public enum AsyncImagePhase : Swift.Sendable {
  case empty
  case success(SwiftUICore.Image)
  case failure(any Swift.Error)
  public var image: SwiftUICore.Image? {
    get
  }
  public var error: (any Swift.Error)? {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func searchCompletion(_ completion: Swift.String) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchCompletion<T>(_ token: T) -> some SwiftUICore.View where T : Swift.Identifiable
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func searchSuggestions(_ visibility: SwiftUICore.Visibility, for placements: SwiftUI.SearchSuggestionsPlacement.Set) -> some SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.EnvironmentValues {
  public var isSearching: Swift.Bool {
    get
  }
  public var dismissSearch: SwiftUI.DismissSearchAction {
    get
  }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public var searchSuggestionsPlacement: SwiftUI.SearchSuggestionsPlacement {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@preconcurrency @_Concurrency.MainActor public struct DismissSearchAction {
  @_Concurrency.MainActor @preconcurrency public func callAsFunction()
}
@available(iOS, unavailable)
@available(macOS, deprecated, introduced: 10.15, message: "Use MenuButton instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public typealias PullDownButton = SwiftUI._PullDownButton
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct _PullDownButton<Label, Content> where Label : SwiftUICore.View, Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(label: Label, @SwiftUICore.ViewBuilder content: () -> Content)
  @available(macOS 10.15, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._PullDownButton : Swift.Sendable {
}
@available(iOS, unavailable)
@available(macOS, deprecated, introduced: 10.15, message: "Use MenuButton instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI._PullDownButton where Label == SwiftUICore.Text {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: () -> Content)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init<S>(_ title: S, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.ShapeStyle where Self == SwiftUI.SelectionShapeStyle {
  @_alwaysEmitIntoClient public static var selection: SwiftUI.SelectionShapeStyle {
    get { .init() }
  }
}
@available(iOS 15.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct SelectionShapeStyle : SwiftUICore.ShapeStyle {
  @available(macOS 12.0, *)
  public init()
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  @available(*, deprecated, message: "obsolete")
  @_alwaysEmitIntoClient nonisolated public static func _makeView<S>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<S, SwiftUI.SelectionShapeStyle>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where S : SwiftUICore.Shape {
        _ShapeView<S, Self>._makeView(view: view, inputs: inputs)
    }
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable, introduced: 17.0)
  @available(watchOS, unavailable, introduced: 10.0)
  public typealias Resolved = Swift.Never
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `menuStyle(.automatic)` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct DefaultMenuButtonStyle : SwiftUI.MenuButtonStyle {
  public init()
  public func _body(configuration: SwiftUI.DefaultMenuButtonStyle._Configuration) -> some SwiftUICore.View
  
  @available(iOS, unavailable, message: "Use `menuStyle(.automatic)` instead.")
  @available(tvOS, unavailable, message: "Use `menuStyle(.automatic)` instead.")
  @available(watchOS, unavailable, message: "Use `menuStyle(.automatic)` instead.")
  @available(visionOS, unavailable, message: "Use `menuStyle(.automatic)` instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `menuStyle(.automatic)` instead.")
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI22DefaultMenuButtonStyleV5_body13configurationQrAA01_deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.DefaultMenuButtonStyle : Swift.Sendable {
}
@available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
extension SwiftUI.LabelStyle where Self == SwiftUI.TitleAndIconLabelStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var titleAndIcon: SwiftUI.TitleAndIconLabelStyle {
    get { .init() }
  }
}
@available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
public struct TitleAndIconLabelStyle : SwiftUI.LabelStyle {
  public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.TitleAndIconLabelStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 14.5, tvOS 14.5, watchOS 7.4, macOS 11.3, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI22TitleAndIconLabelStyleV8makeBody13configurationQrAA0fG13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.TitleAndIconLabelStyle : Swift.Sendable {
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct UtilityWindow<Content> : SwiftUI.Scene where Content : SwiftUICore.View {
  public init(_ title: SwiftUICore.Text, id: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, id: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload public init<S>(_ title: S, id: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Scene {
    get
  }
  @available(macOS 15.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI13UtilityWindowV4bodyQrvp", 0) __<Content>
}
@available(*, unavailable)
extension SwiftUI.UtilityWindow : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.Image : @retroactive CoreTransferable.Transferable {
  public static var transferRepresentation: some CoreTransferable.TransferRepresentation {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Representation = @_opaqueReturnTypeOf("$s7SwiftUI5ImageV22transferRepresentationQrvpZ", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct ScrollView<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  public var content: Content
  public var axes: SwiftUICore.Axis.Set {
    get
    set
  }
  public var showsIndicators: Swift.Bool {
    get
    set
  }
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use the ScrollView(_:content:) initializer and the scrollIndicators(:_) modifier")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use the ScrollView(_:content:) initializer and the scrollIndicators(:_) modifier")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use the ScrollView(_:content:) initializer and the scrollIndicators(:_) modifier")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use the ScrollView(_:content:) initializer and the scrollIndicators(:_) modifier")
  public init(_ axes: SwiftUICore.Axis.Set = .vertical, showsIndicators: Swift.Bool = true, @SwiftUICore.ViewBuilder content: () -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI10ScrollViewV4bodyQrvp", 0) __<Content>
}
@available(*, unavailable)
extension SwiftUI.ScrollView : Swift.Sendable {
}
extension SwiftUI.ScrollView {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @_alwaysEmitIntoClient nonisolated public init(_ axes: SwiftUICore.Axis.Set = .vertical, @SwiftUICore.ViewBuilder content: () -> Content) {
        self.init(axes, showsIndicators: true, content: content)
    }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ScrollView {
  @available(*, deprecated, message: "This SPI is no longer supported. Use scrollBounceBehavior() instead.")
  public var _alwaysBounceAxes: SwiftUICore.Axis.Set {
    get
    set
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.NavigationSplitViewStyle where Self == SwiftUI.AutomaticNavigationSplitViewStyle {
  @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.AutomaticNavigationSplitViewStyle {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_Concurrency.MainActor @preconcurrency public struct AutomaticNavigationSplitViewStyle : SwiftUI.NavigationSplitViewStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.AutomaticNavigationSplitViewStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI33AutomaticNavigationSplitViewStyleV8makeBody13configurationQrAA0defG13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.AutomaticNavigationSplitViewStyle : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func matchedTransitionSource(id: some Hashable, in namespace: SwiftUICore.Namespace.ID) -> some SwiftUICore.View
  
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func matchedTransitionSource(id: some Hashable, in namespace: SwiftUICore.Namespace.ID, configuration: (SwiftUI.EmptyMatchedTransitionSourceConfiguration) -> some MatchedTransitionSourceConfiguration) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct _ResolvedMatchedTransitionSourceConfiguration : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public protocol MatchedTransitionSourceConfiguration : Swift.Sendable {
  func _update(configuration: inout SwiftUI._ResolvedMatchedTransitionSourceConfiguration)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct EmptyMatchedTransitionSourceConfiguration : SwiftUI.MatchedTransitionSourceConfiguration {
  public func _update(configuration: inout SwiftUI._ResolvedMatchedTransitionSourceConfiguration)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.MatchedTransitionSourceConfiguration {
  public func shadow(color: SwiftUICore.Color = Color(.sRGBLinear, white: 0, opacity: 0.33), radius: CoreFoundation.CGFloat, x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0) -> some SwiftUI.MatchedTransitionSourceConfiguration
  
  public func clipShape(_ shape: SwiftUICore.RoundedRectangle) -> some SwiftUI.MatchedTransitionSourceConfiguration
  
  @available(*, unavailable, message: "matchedTransitionSource only supports `RoundedRectangle` clip shapes.")
  public func clipShape<S>(_ shape: S) -> some SwiftUI.MatchedTransitionSourceConfiguration where S : SwiftUICore.Shape
  
  public func background(_ style: SwiftUICore.Color) -> some SwiftUI.MatchedTransitionSourceConfiguration
  
  @available(*, unavailable, message: "matchedTransitionSource only supports `Color` background styles.")
  public func background<S>(_ style: S) -> some SwiftUI.MatchedTransitionSourceConfiguration where S : SwiftUICore.ShapeStyle
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct AccessibilityRotorEntry<ID> where ID : Swift.Hashable {
  public init(_ label: SwiftUICore.Text, id: ID, textRange: Swift.Range<Swift.String.Index>? = nil, prepare: @escaping () -> Swift.Void = {})
  public init(_ label: SwiftUICore.Text, id: ID, in namespace: SwiftUICore.Namespace.ID, textRange: Swift.Range<Swift.String.Index>? = nil, prepare: @escaping () -> Swift.Void = {})
  public init(_ label: SwiftUICore.Text? = nil, textRange: Swift.Range<Swift.String.Index>, prepare: @escaping () -> Swift.Void = {}) where ID == Swift.Never
  public init(_ labelKey: SwiftUICore.LocalizedStringKey, id: ID, textRange: Swift.Range<Swift.String.Index>? = nil, prepare: @escaping () -> Swift.Void = {})
  @_disfavoredOverload public init<L>(_ label: L, id: ID, textRange: Swift.Range<Swift.String.Index>? = nil, prepare: @escaping () -> Swift.Void = {}) where L : Swift.StringProtocol
  public init(_ labelKey: SwiftUICore.LocalizedStringKey, id: ID, in namespace: SwiftUICore.Namespace.ID, textRange: Swift.Range<Swift.String.Index>? = nil, prepare: @escaping () -> Swift.Void = {})
  @_disfavoredOverload public init<L>(_ label: L, _ id: ID, in namespace: SwiftUICore.Namespace.ID, textRange: Swift.Range<Swift.String.Index>? = nil, prepare: @escaping () -> Swift.Void = {}) where L : Swift.StringProtocol
  public init(_ labelKey: SwiftUICore.LocalizedStringKey, textRange: Swift.Range<Swift.String.Index>, prepare: @escaping () -> Swift.Void = {})
  @_disfavoredOverload public init<L>(_ label: L, textRange: Swift.Range<Swift.String.Index>, prepare: @escaping () -> Swift.Void = {}) where ID == Swift.Never, L : Swift.StringProtocol
}
@available(*, unavailable)
extension SwiftUI.AccessibilityRotorEntry : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityRotorEntry<ID>(id: ID, in namespace: SwiftUICore.Namespace.ID) -> some SwiftUICore.View where ID : Swift.Hashable
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_Concurrency.MainActor @preconcurrency public struct NavigationStack<Data, Root> : SwiftUICore.View where Root : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(@SwiftUICore.ViewBuilder root: () -> Root) where Data == SwiftUI.NavigationPath
  @_Concurrency.MainActor @preconcurrency public init(path: SwiftUICore.Binding<SwiftUI.NavigationPath>, @SwiftUICore.ViewBuilder root: () -> Root) where Data == SwiftUI.NavigationPath
  @_Concurrency.MainActor @preconcurrency public init(path: SwiftUICore.Binding<Data>, @SwiftUICore.ViewBuilder root: () -> Root) where Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, Data : Swift.RangeReplaceableCollection, Data.Element : Swift.Hashable
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15NavigationStackV4bodyQrvp", 0) __<Data, Root>
}
@available(*, unavailable)
extension SwiftUI.NavigationStack : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.FormStyle where Self == SwiftUI.GroupedFormStyle {
  @_Concurrency.MainActor @preconcurrency public static var grouped: SwiftUI.GroupedFormStyle {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct GroupedFormStyle : SwiftUI.FormStyle {
  public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.GroupedFormStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI16GroupedFormStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.GroupedFormStyle : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func buttonBorderShape(_ shape: SwiftUI.ButtonBorderShape) -> some SwiftUICore.View {
        environment(\._buttonBorderShape, shape)
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct ButtonBorderShape : Swift.Equatable, Swift.Sendable {
  public static let automatic: SwiftUI.ButtonBorderShape
  @available(macOS 14.0, tvOS 17.0, *)
  public static let capsule: SwiftUI.ButtonBorderShape
  public static let roundedRectangle: SwiftUI.ButtonBorderShape
  @available(macOS 14.0, tvOS 17.0, *)
  public static func roundedRectangle(radius: CoreFoundation.CGFloat) -> SwiftUI.ButtonBorderShape
  @available(iOS 17.0, macOS 14.0, tvOS 16.4, watchOS 10.0, *)
  public static let circle: SwiftUI.ButtonBorderShape
  public static func == (a: SwiftUI.ButtonBorderShape, b: SwiftUI.ButtonBorderShape) -> Swift.Bool
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.ButtonBorderShape : SwiftUICore.Shape {
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUI.ButtonBorderShape, SwiftUICore.ForegroundStyle>
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.Shape where Self == SwiftUI.ButtonBorderShape {
  public static var buttonBorder: SwiftUI.ButtonBorderShape {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.EnvironmentValues {
  @usableFromInline
  internal var _buttonBorderShape: SwiftUI.ButtonBorderShape {
    get
    set
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.ButtonBorderShape : SwiftUICore.InsettableShape {
  @inlinable nonisolated public func inset(by amount: CoreFoundation.CGFloat) -> some SwiftUICore.InsettableShape {
        return _Inset(amount: amount)
    }
  
  @usableFromInline
  @frozen internal struct _Inset : SwiftUICore.InsettableShape {
    @usableFromInline
    internal var amount: CoreFoundation.CGFloat
    @inlinable internal init(amount: CoreFoundation.CGFloat) {
            self.amount = amount
        }
    @usableFromInline
    nonisolated internal func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
    @usableFromInline
    nonisolated internal var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
      get
    }
    @usableFromInline
    internal var animatableData: CoreFoundation.CGFloat {
      get
      set
    }
    @inlinable nonisolated internal func inset(by amount: CoreFoundation.CGFloat) -> SwiftUI.ButtonBorderShape._Inset {
            var copy = self
            copy.amount += amount
            return copy
        }
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    @usableFromInline
    internal typealias AnimatableData = CoreFoundation.CGFloat
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    @usableFromInline
    internal typealias Body = SwiftUICore._ShapeView<SwiftUI.ButtonBorderShape._Inset, SwiftUICore.ForegroundStyle>
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    @usableFromInline
    internal typealias InsetShape = SwiftUI.ButtonBorderShape._Inset
  }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias InsetShape = @_opaqueReturnTypeOf("$s7SwiftUI17ButtonBorderShapeV5inset2byQr12CoreGraphics7CGFloatV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct AccessibilityAttachmentModifier : SwiftUICore.ViewModifier {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.AccessibilityAttachmentModifier : Swift.Sendable {
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView instead")
@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
@available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
extension SwiftUI.NavigationViewStyle where Self == SwiftUI.DefaultNavigationViewStyle {
  @_alwaysEmitIntoClient public static var automatic: SwiftUI.DefaultNavigationViewStyle {
    get { .init() }
  }
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView instead")
@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
@available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
public struct DefaultNavigationViewStyle : SwiftUI.NavigationViewStyle {
  public init()
  public func _body(configuration: SwiftUI._NavigationViewStyleConfiguration) -> some SwiftUICore.View
  
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func _columnBasedBody(configuration: SwiftUI._NavigationViewStyleConfiguration) -> some SwiftUICore.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI26DefaultNavigationViewStyleV5_body13configurationQrAA01_deF13ConfigurationV_tF", 0) __
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  public typealias _Body2 = @_opaqueReturnTypeOf("$s7SwiftUI26DefaultNavigationViewStyleV16_columnBasedBody13configurationQrAA01_deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.DefaultNavigationViewStyle : Swift.Sendable {
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct Viewpoint3D : Swift.Equatable, Swift.Sendable, Swift.CustomDebugStringConvertible {
  public var squareAzimuth: SwiftUI.SquareAzimuth {
    get
  }
  public static let standard: SwiftUI.Viewpoint3D
  public var debugDescription: Swift.String {
    get
  }
  public static func == (a: SwiftUI.Viewpoint3D, b: SwiftUI.Viewpoint3D) -> Swift.Bool
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@frozen public enum SquareAzimuth : Swift.CaseIterable, Swift.Sendable {
  case front
  case right
  case back
  case left
  public var orientation: Spatial.Rotation3D {
    get
  }
  public init(closestToAzimuth azimuth: SwiftUICore.Angle)
  @frozen public struct Set : Swift.OptionSet {
    public typealias Element = SwiftUI.SquareAzimuth.Set
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public static let front: SwiftUI.SquareAzimuth.Set
    public static let right: SwiftUI.SquareAzimuth.Set
    public static let back: SwiftUI.SquareAzimuth.Set
    public static let left: SwiftUI.SquareAzimuth.Set
    public static let all: SwiftUI.SquareAzimuth.Set
    public init(_ e: SwiftUI.SquareAzimuth)
    public func contains(_ e: SwiftUI.SquareAzimuth) -> Swift.Bool
    @available(visionOS 2.0, *)
    @available(iOS, unavailable)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(macOS, unavailable)
    public typealias ArrayLiteralElement = SwiftUI.SquareAzimuth.Set.Element
    @available(visionOS 2.0, *)
    @available(iOS, unavailable)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(macOS, unavailable)
    public typealias RawValue = Swift.Int
  }
  public static func == (a: SwiftUI.SquareAzimuth, b: SwiftUI.SquareAzimuth) -> Swift.Bool
  @available(visionOS 2.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias AllCases = [SwiftUI.SquareAzimuth]
  nonisolated public static var allCases: [SwiftUI.SquareAzimuth] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _CoordinateSpaceModifier<Name> : SwiftUICore.ViewModifier, Swift.Equatable where Name : Swift.Hashable {
  public var name: Name
  @inlinable public init(name: Name) {
        self.name = name
    }
  nonisolated public static func _makeViewInputs(modifier: SwiftUICore._GraphValue<SwiftUI._CoordinateSpaceModifier<Name>>, inputs: inout SwiftUICore._ViewInputs)
  public static func == (a: SwiftUI._CoordinateSpaceModifier<Name>, b: SwiftUI._CoordinateSpaceModifier<Name>) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._CoordinateSpaceModifier : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use coordinateSpace(_:) instead")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "use coordinateSpace(_:) instead")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use coordinateSpace(_:) instead")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use coordinateSpace(_:) instead")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use coordinateSpace(_:) instead")
  @inlinable nonisolated public func coordinateSpace<T>(name: T) -> some SwiftUICore.View where T : Swift.Hashable {
        return modifier(_CoordinateSpaceModifier(name: name))
    }
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  nonisolated public func coordinateSpace(_ name: SwiftUICore.NamedCoordinateSpace) -> some SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 17.0, *)
@available(watchOS, unavailable)
public struct ControlGroup<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  public init(@SwiftUICore.ViewBuilder content: () -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 15.0, tvOS 17.0, macOS 12.0, *)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI12ControlGroupV4bodyQrvp", 0) __<Content>
}
@available(*, unavailable)
extension SwiftUI.ControlGroup : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 17.0, *)
@available(watchOS, unavailable)
public struct LabeledControlGroupContent<Content, Label> : SwiftUICore.View where Content : SwiftUICore.View, Label : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, tvOS 17.0, macOS 13.0, *)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI26LabeledControlGroupContentV4bodyQrvp", 0) __<Content, Label>
}
@available(*, unavailable)
extension SwiftUI.LabeledControlGroupContent : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.ControlGroup where Content == SwiftUI.ControlGroupStyleConfiguration.Content {
  nonisolated public init(_ configuration: SwiftUI.ControlGroupStyleConfiguration)
}
@available(iOS 16.0, macOS 13.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.ControlGroup {
  nonisolated public init<C, L>(@SwiftUICore.ViewBuilder content: () -> C, @SwiftUICore.ViewBuilder label: () -> L) where Content == SwiftUI.LabeledControlGroupContent<C, L>, C : SwiftUICore.View, L : SwiftUICore.View
}
@available(iOS 16.0, macOS 13.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.ControlGroup {
  @_alwaysEmitIntoClient nonisolated public init<C>(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: () -> C) where Content == SwiftUI.LabeledControlGroupContent<C, SwiftUICore.Text>, C : SwiftUICore.View {
        self.init(content: content) {
            Text(titleKey)
        }
    }
  @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public init<C, S>(_ title: S, @SwiftUICore.ViewBuilder content: () -> C) where Content == SwiftUI.LabeledControlGroupContent<C, SwiftUICore.Text>, C : SwiftUICore.View, S : Swift.StringProtocol {
        self.init(content: content) {
            Text(title)
        }
    }
}
@available(iOS 16.0, macOS 13.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.ControlGroup {
  @_alwaysEmitIntoClient nonisolated public init<C>(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, @SwiftUICore.ViewBuilder content: () -> C) where Content == SwiftUI.LabeledControlGroupContent<C, SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image>>, C : SwiftUICore.View {
        self.init(content: content) {
            Label(titleKey, systemImage: systemImage)
        }
    }
  @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public init<C, S>(_ title: S, systemImage: Swift.String, @SwiftUICore.ViewBuilder content: () -> C) where Content == SwiftUI.LabeledControlGroupContent<C, SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image>>, C : SwiftUICore.View, S : Swift.StringProtocol {
        self.init(content: content) {
            Label(title, systemImage: systemImage)
        }
    }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.ControlGroup {
  nonisolated public init<C>(_ titleKey: SwiftUICore.LocalizedStringKey, image: DeveloperToolsSupport.ImageResource, @SwiftUICore.ViewBuilder content: () -> C) where Content == SwiftUI.LabeledControlGroupContent<C, SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image>>, C : SwiftUICore.View
  @_disfavoredOverload nonisolated public init<C, S>(_ title: S, image: DeveloperToolsSupport.ImageResource, @SwiftUICore.ViewBuilder content: () -> C) where Content == SwiftUI.LabeledControlGroupContent<C, SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image>>, C : SwiftUICore.View, S : Swift.StringProtocol
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.CustomHoverEffect {
  public func hoverEffectDisabled(_ isDisabled: Swift.Bool = true) -> some SwiftUICore.CustomHoverEffect
  
}
@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DocumentConfiguration {
  public var isEditable: Swift.Bool {
    get
  }
  public var fileURL: Foundation.URL? {
    get
  }
}
@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DocumentConfiguration : Swift.Sendable {
}
extension SwiftUICore.EnvironmentValues {
  @available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public var documentConfiguration: SwiftUI.DocumentConfiguration? {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.NavigationLink {
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(tvOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(watchOS, introduced: 6.0, deprecated: 9.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @_alwaysEmitIntoClient public init(isActive: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder destination: () -> Destination, @SwiftUICore.ViewBuilder label: () -> Label) {
        self.init(destination: destination(), isActive: isActive, label: label)
    }
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(tvOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(watchOS, introduced: 6.0, deprecated: 9.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @_alwaysEmitIntoClient public init<V>(tag: V, selection: SwiftUICore.Binding<V?>, @SwiftUICore.ViewBuilder destination: () -> Destination, @SwiftUICore.ViewBuilder label: () -> Label) where V : Swift.Hashable {
        self.init(
            destination: destination(),
            tag: tag,
            selection: selection,
            label: label)
    }
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(tvOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(watchOS, introduced: 6.0, deprecated: 9.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  public init(destination: Destination, isActive: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder label: () -> Label)
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(tvOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(watchOS, introduced: 6.0, deprecated: 9.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  public init<V>(destination: Destination, tag: V, selection: SwiftUICore.Binding<V?>, @SwiftUICore.ViewBuilder label: () -> Label) where V : Swift.Hashable
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  public init(destination: Destination, @SwiftUICore.ViewBuilder label: () -> Label)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.NavigationLink where Label == SwiftUICore.Text {
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(tvOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(watchOS, introduced: 6.0, deprecated: 9.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @_alwaysEmitIntoClient nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, isActive: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder destination: () -> Destination) {
        self.init(titleKey, destination: destination(), isActive: isActive)
    }
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(tvOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(watchOS, introduced: 6.0, deprecated: 9.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<S>(_ title: S, isActive: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder destination: () -> Destination) where S : Swift.StringProtocol {
        self.init(title, destination: destination(), isActive: isActive)
    }
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(tvOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(watchOS, introduced: 6.0, deprecated: 9.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @_alwaysEmitIntoClient nonisolated public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, tag: V, selection: SwiftUICore.Binding<V?>, @SwiftUICore.ViewBuilder destination: () -> Destination) where V : Swift.Hashable {
        self.init(
            titleKey,
            destination: destination(),
            tag: tag, selection: selection)
    }
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(tvOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(watchOS, introduced: 6.0, deprecated: 9.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<S, V>(_ title: S, tag: V, selection: SwiftUICore.Binding<V?>, @SwiftUICore.ViewBuilder destination: () -> Destination) where S : Swift.StringProtocol, V : Swift.Hashable {
        self.init(
            title,
            destination: destination(),
            tag: tag, selection: selection)
    }
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, destination: Destination)
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  @_disfavoredOverload nonisolated public init<S>(_ title: S, destination: Destination) where S : Swift.StringProtocol
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(tvOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(watchOS, introduced: 6.0, deprecated: 9.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, destination: Destination, isActive: SwiftUICore.Binding<Swift.Bool>)
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(tvOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(watchOS, introduced: 6.0, deprecated: 9.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @_disfavoredOverload nonisolated public init<S>(_ title: S, destination: Destination, isActive: SwiftUICore.Binding<Swift.Bool>) where S : Swift.StringProtocol
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(tvOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(watchOS, introduced: 6.0, deprecated: 9.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  nonisolated public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, destination: Destination, tag: V, selection: SwiftUICore.Binding<V?>) where V : Swift.Hashable
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(tvOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(watchOS, introduced: 6.0, deprecated: 9.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @_disfavoredOverload nonisolated public init<S, V>(_ title: S, destination: Destination, tag: V, selection: SwiftUICore.Binding<V?>) where S : Swift.StringProtocol, V : Swift.Hashable
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.NavigationLink where Destination == SwiftUI._WKStoryboardContent {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use NavigationLink(value:label:)")
  nonisolated public init(destinationName: Swift.String, @SwiftUICore.ViewBuilder label: () -> Label)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use NavigationLink(value:label:)")
  nonisolated public init(destinationName: Swift.String, isActive: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder label: () -> Label)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use NavigationLink(value:label:)")
  nonisolated public init<V>(destinationName: Swift.String, tag: V, selection: SwiftUICore.Binding<V?>, @SwiftUICore.ViewBuilder label: () -> Label) where V : Swift.Hashable
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.GaugeStyle where Self == SwiftUI.AccessoryLinearGaugeStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var accessoryLinear: SwiftUI.AccessoryLinearGaugeStyle {
    get { .init() }
  }
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct AccessoryLinearGaugeStyle : SwiftUI.GaugeStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.AccessoryLinearGaugeStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, watchOS 9.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI25AccessoryLinearGaugeStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.AccessoryLinearGaugeStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.WindowGroup {
  nonisolated public init<D, C>(id: Swift.String, for type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  @_disfavoredOverload nonisolated public init<D, C>(_ title: SwiftUICore.Text, id: Swift.String, for type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  nonisolated public init<D, C>(_ titleKey: SwiftUICore.LocalizedStringKey, id: Swift.String, for type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  @_disfavoredOverload nonisolated public init<S, D, C>(_ title: S, id: Swift.String, for type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, S : Swift.StringProtocol, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  nonisolated public init<D, C>(for type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  @_disfavoredOverload nonisolated public init<D, C>(_ title: SwiftUICore.Text, for type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  nonisolated public init<D, C>(_ titleKey: SwiftUICore.LocalizedStringKey, for type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  @_disfavoredOverload nonisolated public init<S, D, C>(_ title: S, for type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, S : Swift.StringProtocol, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  nonisolated public init<D, C>(id: Swift.String, for type: D.Type = D.self, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D>) -> C, defaultValue: @escaping () -> D) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  @_disfavoredOverload nonisolated public init<D, C>(_ title: SwiftUICore.Text, id: Swift.String, for type: D.Type = D.self, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D>) -> C, defaultValue: @escaping () -> D) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  nonisolated public init<D, C>(_ titleKey: SwiftUICore.LocalizedStringKey, id: Swift.String, for type: D.Type = D.self, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D>) -> C, defaultValue: @escaping () -> D) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  @_disfavoredOverload nonisolated public init<S, D, C>(_ title: S, id: Swift.String, for type: D.Type = D.self, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D>) -> C, defaultValue: @escaping () -> D) where Content == SwiftUI.PresentedWindowContent<D, C>, S : Swift.StringProtocol, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  nonisolated public init<D, C>(for type: D.Type = D.self, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D>) -> C, defaultValue: @escaping () -> D) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  @_disfavoredOverload nonisolated public init<D, C>(_ title: SwiftUICore.Text, for type: D.Type = D.self, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D>) -> C, defaultValue: @escaping () -> D) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  nonisolated public init<D, C>(_ titleKey: SwiftUICore.LocalizedStringKey, for type: D.Type = D.self, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D>) -> C, defaultValue: @escaping () -> D) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  @_disfavoredOverload nonisolated public init<S, D, C>(_ title: S, for type: D.Type = D.self, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D>) -> C, defaultValue: @escaping () -> D) where Content == SwiftUI.PresentedWindowContent<D, C>, S : Swift.StringProtocol, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct PresentedWindowContent<Data, Content> : SwiftUICore.View where Data : Swift.Decodable, Data : Swift.Encodable, Data : Swift.Hashable, Content : SwiftUICore.View {
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUI.PresentedWindowContent<Data, Content>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.PresentedWindowContent : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.MenuStyle where Self == SwiftUI.DefaultMenuStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.DefaultMenuStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)
@available(watchOS, unavailable)
public struct DefaultMenuStyle : SwiftUI.MenuStyle {
  public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.DefaultMenuStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 14.0, tvOS 17.0, macOS 11.0, *)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI16DefaultMenuStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.DefaultMenuStyle : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@available(*, deprecated, message: "use Animatable directly")
public protocol _AnimatableView : SwiftUICore.Animatable, SwiftUICore.View {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@available(*, deprecated, message: "use Animatable directly")
extension SwiftUI._AnimatableView {
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use Animatable directly")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "use Animatable directly")
@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use Animatable directly")
@available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use Animatable directly")
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use Animatable directly")
public protocol AnimatableModifier : SwiftUICore.Animatable, SwiftUICore.ViewModifier {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.AnimatableModifier {
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityRotor<Content>(_ label: SwiftUICore.Text, @SwiftUI.AccessibilityRotorContentBuilder entries: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUI.AccessibilityRotorContent
  
  nonisolated public func accessibilityRotor<Content>(_ systemRotor: SwiftUI.AccessibilitySystemRotor, @SwiftUI.AccessibilityRotorContentBuilder entries: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUI.AccessibilityRotorContent
  
  nonisolated public func accessibilityRotor<EntryModel>(_ rotorLabel: SwiftUICore.Text, entries: [EntryModel], entryLabel: Swift.KeyPath<EntryModel, Swift.String>) -> some SwiftUICore.View where EntryModel : Swift.Identifiable
  
  nonisolated public func accessibilityRotor<EntryModel, ID>(_ rotorLabel: SwiftUICore.Text, entries: [EntryModel], entryID: Swift.KeyPath<EntryModel, ID>, entryLabel: Swift.KeyPath<EntryModel, Swift.String>) -> some SwiftUICore.View where ID : Swift.Hashable
  
  nonisolated public func accessibilityRotor<EntryModel>(_ systemRotor: SwiftUI.AccessibilitySystemRotor, entries: [EntryModel], entryLabel: Swift.KeyPath<EntryModel, Swift.String>) -> some SwiftUICore.View where EntryModel : Swift.Identifiable
  
  nonisolated public func accessibilityRotor<EntryModel, ID>(_ systemRotor: SwiftUI.AccessibilitySystemRotor, entries: [EntryModel], entryID: Swift.KeyPath<EntryModel, ID>, entryLabel: Swift.KeyPath<EntryModel, Swift.String>) -> some SwiftUICore.View where ID : Swift.Hashable
  
  nonisolated public func accessibilityRotor(_ label: SwiftUICore.Text, textRanges: [Swift.Range<Swift.String.Index>]) -> some SwiftUICore.View
  
  nonisolated public func accessibilityRotor(_ systemRotor: SwiftUI.AccessibilitySystemRotor, textRanges: [Swift.Range<Swift.String.Index>]) -> some SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityRotor<Content>(_ labelKey: SwiftUICore.LocalizedStringKey, @SwiftUI.AccessibilityRotorContentBuilder entries: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUI.AccessibilityRotorContent
  
  @_disfavoredOverload nonisolated public func accessibilityRotor<L, Content>(_ label: L, @SwiftUI.AccessibilityRotorContentBuilder entries: @escaping () -> Content) -> some SwiftUICore.View where L : Swift.StringProtocol, Content : SwiftUI.AccessibilityRotorContent
  
  nonisolated public func accessibilityRotor<EntryModel>(_ rotorLabelKey: SwiftUICore.LocalizedStringKey, entries: [EntryModel], entryLabel: Swift.KeyPath<EntryModel, Swift.String>) -> some SwiftUICore.View where EntryModel : Swift.Identifiable
  
  @_disfavoredOverload nonisolated public func accessibilityRotor<L, EntryModel>(_ rotorLabel: L, entries: [EntryModel], entryLabel: Swift.KeyPath<EntryModel, Swift.String>) -> some SwiftUICore.View where L : Swift.StringProtocol, EntryModel : Swift.Identifiable
  
  nonisolated public func accessibilityRotor<EntryModel, ID>(_ rotorLabelKey: SwiftUICore.LocalizedStringKey, entries: [EntryModel], entryID: Swift.KeyPath<EntryModel, ID>, entryLabel: Swift.KeyPath<EntryModel, Swift.String>) -> some SwiftUICore.View where ID : Swift.Hashable
  
  @_disfavoredOverload nonisolated public func accessibilityRotor<L, EntryModel, ID>(_ rotorLabel: L, entries: [EntryModel], entryID: Swift.KeyPath<EntryModel, ID>, entryLabel: Swift.KeyPath<EntryModel, Swift.String>) -> some SwiftUICore.View where L : Swift.StringProtocol, ID : Swift.Hashable
  
  nonisolated public func accessibilityRotor(_ labelKey: SwiftUICore.LocalizedStringKey, textRanges: [Swift.Range<Swift.String.Index>]) -> some SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func accessibilityRotor<L>(_ label: L, textRanges: [Swift.Range<Swift.String.Index>]) -> some SwiftUICore.View where L : Swift.StringProtocol
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct AccessibilitySystemRotor : Swift.Sendable {
  public static func links(visited: Swift.Bool) -> SwiftUI.AccessibilitySystemRotor
  public static var links: SwiftUI.AccessibilitySystemRotor {
    get
  }
  public static func headings(level: SwiftUICore.AccessibilityHeadingLevel) -> SwiftUI.AccessibilitySystemRotor
  public static var headings: SwiftUI.AccessibilitySystemRotor {
    get
  }
  public static var boldText: SwiftUI.AccessibilitySystemRotor {
    get
  }
  public static var italicText: SwiftUI.AccessibilitySystemRotor {
    get
  }
  public static var underlineText: SwiftUI.AccessibilitySystemRotor {
    get
  }
  public static var misspelledWords: SwiftUI.AccessibilitySystemRotor {
    get
  }
  public static var images: SwiftUI.AccessibilitySystemRotor {
    get
  }
  public static var textFields: SwiftUI.AccessibilitySystemRotor {
    get
  }
  public static var tables: SwiftUI.AccessibilitySystemRotor {
    get
  }
  public static var lists: SwiftUI.AccessibilitySystemRotor {
    get
  }
  public static var landmarks: SwiftUI.AccessibilitySystemRotor {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public func __designTimeBoolean<T>(_ key: Swift.String, fallback: T) -> T where T : Swift.ExpressibleByBooleanLiteral
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public func __designTimeFloat<T>(_ key: Swift.String, fallback: T) -> T where T : Swift.ExpressibleByFloatLiteral
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public func __designTimeInteger<T>(_ key: Swift.String, fallback: T) -> T where T : Swift.ExpressibleByIntegerLiteral
@available(iOS 14.0, macOS 11, tvOS 14.0, watchOS 7.0, *)
@_semantics("constant_evaluable") @_transparent public func __designTimeString(_ key: Swift.String, fallback: os.OSLogMessage) -> os.OSLogMessage {
    fallback
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public func __designTimeString<T>(_ key: Swift.String, fallback: T) -> T where T : Swift.ExpressibleByStringLiteral
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public func __designTimeString<T>(_ key: Swift.String, fallback: T) -> T where T : Swift.ExpressibleByExtendedGraphemeClusterLiteral
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public func __designTimeApplyIncrementalValues(_ updates: [[Swift.String : Any]])
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@preconcurrency @_Concurrency.MainActor public protocol FormStyle {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.FormStyleConfiguration
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct FormStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Content : SwiftUICore.View {
    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
    public typealias Body = Swift.Never
  }
  public let content: SwiftUI.FormStyleConfiguration.Content
}
@available(*, unavailable)
extension SwiftUI.FormStyleConfiguration : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.FormStyleConfiguration.Content : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.View {
  nonisolated public func formStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.FormStyle
  
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TabContent {
  nonisolated public func swipeActions<T>(edge: SwiftUICore.HorizontalEdge = .trailing, allowsFullSwipe: Swift.Bool = true, @SwiftUICore.ViewBuilder content: () -> T) -> some SwiftUI.TabContent<Self.TabValue> where T : SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TabContent {
  nonisolated public func contextMenu<M>(@SwiftUICore.ViewBuilder menuItems: () -> M) -> some SwiftUI.TabContent<Self.TabValue> where M : SwiftUICore.View
  
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol TableColumnContent<TableRowValue, TableColumnSortComparator> {
  associatedtype TableRowValue : Swift.Identifiable = Self.TableColumnBody.TableRowValue
  associatedtype TableColumnSortComparator : Foundation.SortComparator = Self.TableColumnBody.TableColumnSortComparator
  associatedtype TableColumnBody : SwiftUI.TableColumnContent
  nonisolated var tableColumnBody: Self.TableColumnBody { get }
  nonisolated static func _makeContent(content: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._TableColumnInputs) -> SwiftUI._TableColumnOutputs
  @available(iOS 17.4, macOS 14.4, visionOS 1.1, *)
  nonisolated static func _tableColumnCount(inputs: SwiftUI._TableColumnInputs) -> Swift.Int?
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _TableColumnInputs {
}
@available(*, unavailable)
extension SwiftUI._TableColumnInputs : Swift.Sendable {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _TableColumnOutputs {
}
@available(*, unavailable)
extension SwiftUI._TableColumnOutputs : Swift.Sendable {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnContent where Self.TableColumnSortComparator == Self.TableColumnBody.TableColumnSortComparator, Self.TableRowValue == Self.TableColumnBody.TableRowValue {
  nonisolated public static func _makeContent(content: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._TableColumnInputs) -> SwiftUI._TableColumnOutputs
}
@available(iOS 17.4, macOS 14.4, visionOS 1.1, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnContent {
  nonisolated public static func _tableColumnCount(inputs: SwiftUI._TableColumnInputs) -> Swift.Int?
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Never : SwiftUI.TableColumnContent {
  public typealias TableColumnSortComparator = Swift.Never
  public typealias TableColumnBody = Swift.Never
  nonisolated public var tableColumnBody: Swift.Never {
    get
  }
  @available(iOS 17.4, macOS 14.4, visionOS 1.1, *)
  nonisolated public static func _tableColumnCount(inputs: SwiftUI._TableColumnInputs) -> Swift.Int?
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_functionBuilder public struct TableColumnBuilder<RowValue, Sort> where RowValue : Swift.Identifiable, Sort : Foundation.SortComparator {
  @_alwaysEmitIntoClient public static func buildExpression<Content, Label>(_ column: SwiftUI.TableColumn<RowValue, Sort, Content, Label>) -> SwiftUI.TableColumn<RowValue, Sort, Content, Label> where Content : SwiftUICore.View, Label : SwiftUICore.View {
        column
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildExpression<Content, Label>(_ column: SwiftUI.TableColumn<RowValue, Swift.Never, Content, Label>) -> SwiftUI.TableColumn<RowValue, Swift.Never, Content, Label> where Content : SwiftUICore.View, Label : SwiftUICore.View {
        column
    }
  @_alwaysEmitIntoClient public static func buildExpression<Column>(_ column: Column) -> Column where RowValue == Column.TableRowValue, Sort == Column.TableColumnSortComparator, Column : SwiftUI.TableColumnContent {
        column
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildExpression<Column>(_ column: Column) -> Column where RowValue == Column.TableRowValue, Column : SwiftUI.TableColumnContent, Column.TableColumnSortComparator == Swift.Never {
        column
    }
  @available(*, unavailable, message: "this expression does not conform to 'TableColumnContent'")
  @_disfavoredOverload @_alwaysEmitIntoClient public static func buildExpression(_ invalid: Any) -> some SwiftUI.TableColumnContent<RowValue, Sort> {
        TupleTableColumnContent((),
                                valueType: RowValue.self, sortType: Sort.self)
    }
  
  @_alwaysEmitIntoClient public static func buildBlock<Column>(_ column: Column) -> Column where RowValue == Column.TableRowValue, Sort == Column.TableColumnSortComparator, Column : SwiftUI.TableColumnContent {
        column
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildBlock<Column>(_ column: Column) -> Column where RowValue == Column.TableRowValue, Column : SwiftUI.TableColumnContent, Column.TableColumnSortComparator == Swift.Never {
        column
    }
}
@available(*, unavailable)
extension SwiftUI.TableColumnBuilder : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct TabSection<Header, Content, Footer, SelectionValue> {
}
@available(*, unavailable)
extension SwiftUI.TabSection : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.TabSection : SwiftUI.TabContent where Header : SwiftUICore.View, Content : SwiftUI.TabContent, Footer : SwiftUICore.View, SelectionValue == Content.TabValue {
  public typealias TabValue = Content.TabValue
  @_Concurrency.MainActor @preconcurrency public var _identifiedView: some SwiftUICore.View {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Body = SwiftUI.TabSection<Header, Content, Footer, SelectionValue>
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias _IdentifiedView = @_opaqueReturnTypeOf("$s7SwiftUI10TabSectionVA2A4ViewRzAA0C7ContentR_AaDR0_0C5ValueAaEPQy_Rs1_rlE011_identifiedE0Qrvp", 0) __<Header, Content, Footer, SelectionValue>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.TabSection where Content : SwiftUI.TabContent, SelectionValue : Swift.Hashable {
  public init(@SwiftUI.TabContentBuilder<SelectionValue> content: () -> Content, @SwiftUICore.ViewBuilder header: () -> Header) where Header : SwiftUICore.View, Footer == SwiftUICore.EmptyView
  public init(@SwiftUI.TabContentBuilder<SelectionValue> content: () -> Content) where Header == SwiftUICore.EmptyView, Footer == SwiftUICore.EmptyView
  @_disfavoredOverload public init<S>(_ title: S, @SwiftUI.TabContentBuilder<SelectionValue> content: () -> Content) where Header == SwiftUICore.Text, Footer == SwiftUICore.EmptyView, S : Swift.StringProtocol
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUI.TabContentBuilder<SelectionValue> content: () -> Content) where Header == SwiftUICore.Text, Footer == SwiftUICore.EmptyView
  @_disfavoredOverload public init<V>(@SwiftUI.TabContentBuilder<V?> content: () -> Content, @SwiftUICore.ViewBuilder header: () -> Header) where Header : SwiftUICore.View, Footer == SwiftUICore.EmptyView, SelectionValue == V?, V : Swift.Hashable
  @_disfavoredOverload public init<V>(@SwiftUI.TabContentBuilder<V?> content: () -> Content) where Header == SwiftUICore.EmptyView, Footer == SwiftUICore.EmptyView, SelectionValue == V?, V : Swift.Hashable
  @_disfavoredOverload public init<V, S>(_ title: S, @SwiftUI.TabContentBuilder<V?> content: () -> Content) where Header == SwiftUICore.Text, Footer == SwiftUICore.EmptyView, SelectionValue == V?, V : Swift.Hashable, S : Swift.StringProtocol
  @_disfavoredOverload public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUI.TabContentBuilder<V?> content: () -> Content) where Header == SwiftUICore.Text, Footer == SwiftUICore.EmptyView, SelectionValue == V?, V : Swift.Hashable
  @usableFromInline
  @_disfavoredOverload internal init<V>(@SwiftUI.TabContentBuilder<V?> liftedContent content: () -> Content, @SwiftUICore.ViewBuilder header: () -> Header) where Header : SwiftUICore.View, Footer == SwiftUICore.EmptyView, SelectionValue == V?, V : Swift.Hashable
  @usableFromInline
  @_disfavoredOverload internal init<V>(@SwiftUI.TabContentBuilder<V?> liftedContent content: () -> Content) where Header == SwiftUICore.EmptyView, Footer == SwiftUICore.EmptyView, SelectionValue == V?, V : Swift.Hashable
  @usableFromInline
  @_disfavoredOverload internal init<V, S>(_ title: S, @SwiftUI.TabContentBuilder<V?> liftedContent content: () -> Content) where Header == SwiftUICore.Text, Footer == SwiftUICore.EmptyView, SelectionValue == V?, V : Swift.Hashable, S : Swift.StringProtocol
  @usableFromInline
  @_disfavoredOverload internal init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUI.TabContentBuilder<V?> liftedContent content: () -> Content) where Header == SwiftUICore.Text, Footer == SwiftUICore.EmptyView, SelectionValue == V?, V : Swift.Hashable
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct DefaultTabLabel : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15DefaultTabLabelV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.DefaultTabLabel : Swift.Sendable {
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.ListStyle where Self == SwiftUI.EllipticalListStyle {
  @_alwaysEmitIntoClient public static var elliptical: SwiftUI.EllipticalListStyle {
    get { .init() }
  }
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct EllipticalListStyle : SwiftUI.ListStyle {
  public init()
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.EllipticalListStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.EllipticalListStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.EllipticalListStyle : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ControlGroupStyle where Self == SwiftUI.NavigationControlGroupStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var navigation: SwiftUI.NavigationControlGroupStyle {
    get { .init() }
  }
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct NavigationControlGroupStyle : SwiftUI.ControlGroupStyle {
  public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.NavigationControlGroupStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 15.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI27NavigationControlGroupStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.NavigationControlGroupStyle : Swift.Sendable {
}
@available(watchOS 10.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.TabViewStyle where Self == SwiftUI.VerticalPageTabViewStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var verticalPage: SwiftUI.VerticalPageTabViewStyle {
    get { .init() }
  }
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static func verticalPage(transitionStyle: SwiftUI.VerticalPageTabViewStyle.TransitionStyle) -> SwiftUI.VerticalPageTabViewStyle {
        .init(transitionStyle: transitionStyle)
    }
}
@available(watchOS 10.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct VerticalPageTabViewStyle : SwiftUI.TabViewStyle {
  public init()
  public init(transitionStyle: SwiftUI.VerticalPageTabViewStyle.TransitionStyle)
  public struct TransitionStyle {
    public static let automatic: SwiftUI.VerticalPageTabViewStyle.TransitionStyle
    public static let blur: SwiftUI.VerticalPageTabViewStyle.TransitionStyle
    public static let identity: SwiftUI.VerticalPageTabViewStyle.TransitionStyle
  }
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.VerticalPageTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.VerticalPageTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.VerticalPageTabViewStyle : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.VerticalPageTabViewStyle.TransitionStyle : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ToolbarCommands : SwiftUI.Commands {
  public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Commands {
    get
  }
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15ToolbarCommandsV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.ToolbarCommands : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct SidebarCommands : SwiftUI.Commands {
  public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Commands {
    get
  }
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15SidebarCommandsV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.SidebarCommands : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct InspectorCommands : SwiftUI.Commands {
  public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Commands {
    get
  }
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI17InspectorCommandsV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.InspectorCommands : Swift.Sendable {
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct ImportFromDevicesCommands : SwiftUI.Commands {
  public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Commands {
    get
  }
  @available(macOS 12.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI25ImportFromDevicesCommandsV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.ImportFromDevicesCommands : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct EquatableView<Content> : SwiftUICore.View where Content : Swift.Equatable, Content : SwiftUICore.View {
  public var content: Content
  @inlinable public init(content: Content) {
        self.content = content
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI.EquatableView<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.EquatableView : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View where Self : Swift.Equatable {
  @inlinable nonisolated public func equatable() -> SwiftUI.EquatableView<Self> {
        return EquatableView(content: self)
    }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@preconcurrency @_Concurrency.MainActor public protocol Scene {
  associatedtype Body : SwiftUI.Scene
  @SwiftUI.SceneBuilder @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
  nonisolated static func _makeScene(scene: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Scene {
  nonisolated public static func _makeScene(scene: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Swift.Never : SwiftUI.Scene {
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct VolumeViewpointUpdateStrategy : Swift.Sendable, Swift.Equatable {
  public static let all: SwiftUI.VolumeViewpointUpdateStrategy
  public static let supported: SwiftUI.VolumeViewpointUpdateStrategy
  public static func == (a: SwiftUI.VolumeViewpointUpdateStrategy, b: SwiftUI.VolumeViewpointUpdateStrategy) -> Swift.Bool
}
extension SwiftUICore.View {
  @available(visionOS 2.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func onVolumeViewpointChange(updateStrategy: SwiftUI.VolumeViewpointUpdateStrategy = .supported, initial: Swift.Bool = true, _ action: @escaping (_ oldValue: SwiftUI.Viewpoint3D, _ newValue: SwiftUI.Viewpoint3D) -> Swift.Void) -> some SwiftUICore.View
  
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct AutomaticMenuBarExtraStyle : SwiftUI.MenuBarExtraStyle {
  public typealias _Body = Swift.Never
  public init()
  public func _makeMenuBarExtra(_ value: SwiftUI._MenuBarExtraValue<SwiftUI.AutomaticMenuBarExtraStyle>) -> SwiftUI._MenuBarExtraValue<SwiftUI.AutomaticMenuBarExtraStyle>
}
@available(*, unavailable)
extension SwiftUI.AutomaticMenuBarExtraStyle : Swift.Sendable {
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.MenuBarExtraStyle where Self == SwiftUI.AutomaticMenuBarExtraStyle {
  public static var automatic: SwiftUI.AutomaticMenuBarExtraStyle {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ProgressViewStyle where Self == SwiftUI.DefaultProgressViewStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.DefaultProgressViewStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct DefaultProgressViewStyle : SwiftUI.ProgressViewStyle {
  public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.DefaultProgressViewStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24DefaultProgressViewStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.DefaultProgressViewStyle : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, watchOS 8.0, *)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func swipeActions<T>(edge: SwiftUICore.HorizontalEdge = .trailing, allowsFullSwipe: Swift.Bool = true, @SwiftUICore.ViewBuilder content: () -> T) -> some SwiftUICore.View where T : SwiftUICore.View
  
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func dismissalConfirmationDialog<A>(_ titleKey: SwiftUICore.LocalizedStringKey, shouldPresent: Swift.Bool, @SwiftUICore.ViewBuilder actions: () -> A) -> some SwiftUICore.View where A : SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func dismissalConfirmationDialog<S, A>(_ title: S, shouldPresent: Swift.Bool, @SwiftUICore.ViewBuilder actions: () -> A) -> some SwiftUICore.View where S : Swift.StringProtocol, A : SwiftUICore.View
  
  nonisolated public func dismissalConfirmationDialog<A>(_ title: SwiftUICore.Text, shouldPresent: Swift.Bool, @SwiftUICore.ViewBuilder actions: () -> A) -> some SwiftUICore.View where A : SwiftUICore.View
  
  nonisolated public func dismissalConfirmationDialog<A, M>(_ titleKey: SwiftUICore.LocalizedStringKey, shouldPresent: Swift.Bool, @SwiftUICore.ViewBuilder actions: () -> A, @SwiftUICore.ViewBuilder message: () -> M) -> some SwiftUICore.View where A : SwiftUICore.View, M : SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func dismissalConfirmationDialog<S, A, M>(_ title: S, shouldPresent: Swift.Bool, @SwiftUICore.ViewBuilder actions: () -> A, @SwiftUICore.ViewBuilder message: () -> M) -> some SwiftUICore.View where S : Swift.StringProtocol, A : SwiftUICore.View, M : SwiftUICore.View
  
  nonisolated public func dismissalConfirmationDialog<A, M>(_ title: SwiftUICore.Text, shouldPresent: Swift.Bool, @SwiftUICore.ViewBuilder actions: () -> A, @SwiftUICore.ViewBuilder message: () -> M) -> some SwiftUICore.View where A : SwiftUICore.View, M : SwiftUICore.View
  
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public protocol MenuBarExtraStyle {
  associatedtype _Body : SwiftUICore.View
  func _makeMenuBarExtra(_ value: SwiftUI._MenuBarExtraValue<Self>) -> SwiftUI._MenuBarExtraValue<Self>
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct _MenuBarExtraValue<Style> where Style : SwiftUI.MenuBarExtraStyle {
}
@available(*, unavailable)
extension SwiftUI._MenuBarExtraValue : Swift.Sendable {
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func menuBarExtraStyle<S>(_ style: S) -> some SwiftUI.Scene where S : SwiftUI.MenuBarExtraStyle
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct OnDeleteTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Optional<(Foundation.IndexSet) -> Swift.Void> {
    get { nil }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  internal typealias Value = Swift.Optional<(Foundation.IndexSet) -> Swift.Void>
}
@available(*, unavailable)
extension SwiftUI.OnDeleteTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.DynamicViewContent {
  @inlinable nonisolated public func onDelete(perform action: Swift.Optional<(Foundation.IndexSet) -> Swift.Void>) -> some SwiftUICore.DynamicViewContent {
        return modifier(_TraitWritingModifier<OnDeleteTraitKey>(value: action))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct IsDeleteDisabledTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.IsDeleteDisabledTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func deleteDisabled(_ isDisabled: Swift.Bool) -> some SwiftUICore.View {
        return _trait(IsDeleteDisabledTraitKey.self, isDisabled)
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct CommandMenu<Content> : SwiftUI.Commands where Content : SwiftUICore.View {
  @available(iOS 15.0, macOS 12.0, *)
  nonisolated public static func _makeCommands(content: SwiftUICore._GraphValue<SwiftUI.CommandMenu<Content>>, inputs: SwiftUI._CommandsInputs) -> SwiftUI._CommandsOutputs
  public init(_ nameKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: () -> Content)
  public init(_ name: SwiftUICore.Text, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload public init<S>(_ name: S, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Commands {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func _resolve(into resolved: inout SwiftUI._ResolvedCommands)
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11CommandMenuV4bodyQrvp", 0) __<Content>
}
@available(*, unavailable)
extension SwiftUI.CommandMenu : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol WidgetConfiguration {
  associatedtype Body : SwiftUI.WidgetConfiguration
  @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
  nonisolated static func _makeWidgetConfiguration(widget: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.WidgetConfiguration {
  nonisolated public static func _makeWidgetConfiguration(widget: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension Swift.Never : SwiftUI.WidgetConfiguration {
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol DocumentBaseBox<Document> : AnyObject {
  associatedtype Document
  var base: Self.Document? { get set }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.List {
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public init<Data, RowContent>(_ data: SwiftUICore.Binding<Data>, editActions: SwiftUI.EditActions<Data>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<SwiftUI.IndexedIdentifierCollection<Data, Data.Element.ID>, Data.Element.ID, SwiftUI.EditableCollectionContent<RowContent, Data>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable, Data.Index : Swift.Hashable
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init<Data, RowContent>(_ data: SwiftUICore.Binding<Data>, editActions: SwiftUI.EditActions<Data>, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<SwiftUI.IndexedIdentifierCollection<Data, Data.Element.ID>, Data.Element.ID, SwiftUI.EditableCollectionContent<RowContent, Data>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable, Data.Index : Swift.Hashable
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public init<Data, ID, RowContent>(_ data: SwiftUICore.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, editActions: SwiftUI.EditActions<Data>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<SwiftUI.IndexedIdentifierCollection<Data, ID>, ID, SwiftUI.EditableCollectionContent<RowContent, Data>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View, Data.Index : Swift.Hashable
  @available(iOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init<Data, ID, RowContent>(_ data: SwiftUICore.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, editActions: SwiftUI.EditActions<Data>, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<SwiftUI.IndexedIdentifierCollection<Data, ID>, ID, SwiftUI.EditableCollectionContent<RowContent, Data>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View, Data.Index : Swift.Hashable
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.List {
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public init<Data, RowContent>(_ data: SwiftUICore.Binding<Data>, editActions: SwiftUI.EditActions<Data>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<SwiftUI.IndexedIdentifierCollection<Data, Data.Element.ID>, Data.Element.ID, SwiftUI.EditableCollectionContent<RowContent, Data>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable, Data.Index : Swift.Hashable
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public init<Data, ID, RowContent>(_ data: SwiftUICore.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, editActions: SwiftUI.EditActions<Data>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<SwiftUI.IndexedIdentifierCollection<Data, ID>, ID, SwiftUI.EditableCollectionContent<RowContent, Data>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View, Data.Index : Swift.Hashable
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.List where SelectionValue == Swift.Never {
  @_Concurrency.MainActor @preconcurrency public init<Data, RowContent>(_ data: SwiftUICore.Binding<Data>, editActions: SwiftUI.EditActions<Data>, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<SwiftUI.IndexedIdentifierCollection<Data, Data.Element.ID>, Data.Element.ID, SwiftUI.EditableCollectionContent<RowContent, Data>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable, Data.Index : Swift.Hashable
  @_Concurrency.MainActor @preconcurrency public init<Data, ID, RowContent>(_ data: SwiftUICore.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, editActions: SwiftUI.EditActions<Data>, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<SwiftUI.IndexedIdentifierCollection<Data, ID>, ID, SwiftUI.EditableCollectionContent<RowContent, Data>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View, Data.Index : Swift.Hashable
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _AccessibilityIgnoresInvertColorsViewModifier {
  public var active: Swift.Bool
  @inlinable public init(active: Swift.Bool) { self.active = active }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._AccessibilityIgnoresInvertColorsViewModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func accessibilityIgnoresInvertColors(_ active: Swift.Bool = true) -> some SwiftUICore.View {
        return modifier(
            _AccessibilityIgnoresInvertColorsViewModifier(active: active))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct SecureField<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11SecureFieldV4bodyQrvp", 0) __<Label>
}
@available(*, unavailable)
extension SwiftUI.SecureField : Swift.Sendable {
}
extension SwiftUI.SecureField where Label == SwiftUICore.Text {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, text: SwiftUICore.Binding<Swift.String>, prompt: SwiftUICore.Text?)
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, text: SwiftUICore.Binding<Swift.String>, prompt: SwiftUICore.Text?) where S : Swift.StringProtocol
}
extension SwiftUI.SecureField {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public init(text: SwiftUICore.Binding<Swift.String>, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder label: () -> Label)
}
extension SwiftUI.SecureField where Label == SwiftUICore.Text {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @_alwaysEmitIntoClient nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, text: SwiftUICore.Binding<Swift.String>) {
        self.init(titleKey, text: text, onCommit: {})
    }
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public init<S>(_ title: S, text: SwiftUICore.Binding<Swift.String>) where S : Swift.StringProtocol {
        self.init(title, text: text, onCommit: {})
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.SecureField where Label == SwiftUICore.Text {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed SecureField.init(_:text:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed SecureField.init(_:text:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed SecureField.init(_:text:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed SecureField.init(_:text:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Renamed SecureField.init(_:text:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter.")
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, text: SwiftUICore.Binding<Swift.String>, onCommit: @escaping () -> Swift.Void)
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed SecureField.init(_:text:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed SecureField.init(_:text:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed SecureField.init(_:text:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed SecureField.init(_:text:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Renamed SecureField.init(_:text:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter.")
  @_disfavoredOverload nonisolated public init<S>(_ title: S, text: SwiftUICore.Binding<Swift.String>, onCommit: @escaping () -> Swift.Void) where S : Swift.StringProtocol
}
@available(iOS, introduced: 14.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.borderless).")
@available(macOS, introduced: 11.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.borderless).")
@available(tvOS, introduced: 17.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.borderless).")
@available(watchOS, unavailable)
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.borderless).")
extension SwiftUI.MenuStyle where Self == SwiftUI.BorderlessButtonMenuStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var borderlessButton: SwiftUI.BorderlessButtonMenuStyle {
    get { .init() }
  }
}
@available(iOS, introduced: 14.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.borderless).")
@available(macOS, introduced: 11.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.borderless).")
@available(tvOS, introduced: 17.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.borderless).")
@available(watchOS, unavailable)
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.borderless).")
public struct BorderlessButtonMenuStyle : SwiftUI.MenuStyle {
  public init()
  @available(iOS, unavailable)
  @available(macOS, introduced: 11.0, deprecated: 12.0, message: "Use ``View/menuIndicator(_)`` instead.")
  @available(visionOS, unavailable)
  public init(showsMenuIndicator: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.BorderlessButtonMenuStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS, introduced: 14.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.borderless).")
  @available(tvOS, introduced: 17.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.borderless).")
  @available(watchOS, unavailable, message: "Use .menuStyle(.button) and .buttonStyle(.borderless).")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.borderless).")
  @available(macOS, introduced: 11.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.borderless).")
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI25BorderlessButtonMenuStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.BorderlessButtonMenuStyle : Swift.Sendable {
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol ControlWidgetTemplate {
  associatedtype Body : SwiftUI.ControlWidgetTemplate
  @SwiftUI.ControlWidgetTemplateBuilder @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
  @_Concurrency.MainActor @preconcurrency static var _controlType: any Any.Type { get }
  @_Concurrency.MainActor @preconcurrency static func _makeControlWidgetTemplate(control: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.ControlWidgetTemplate {
  @_Concurrency.MainActor @preconcurrency public static var _controlType: any Any.Type {
    get
  }
  @_Concurrency.MainActor @preconcurrency public static func _makeControlWidgetTemplate(control: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension Swift.Never : SwiftUI.ControlWidgetTemplate {
  @_Concurrency.MainActor @preconcurrency public static var _controlType: any Any.Type {
    get
  }
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_functionBuilder public struct ControlWidgetTemplateBuilder {
  @_alwaysEmitIntoClient public static func buildExpression<Content>(_ content: Content) -> Content where Content : SwiftUI.ControlWidgetTemplate {
       content
    }
  @available(*, unavailable, message: "this expression does not conform to 'ControlWidgetTemplate'")
  @_disfavoredOverload @_alwaysEmitIntoClient public static func buildExpression(_ invalid: Any) -> some SwiftUI.ControlWidgetTemplate {
        fatalError()
    }
  
  @_alwaysEmitIntoClient public static func buildBlock<Content>(_ content: Content) -> some SwiftUI.ControlWidgetTemplate where Content : SwiftUI.ControlWidgetTemplate {
        return content
    }
  
}
@available(*, unavailable)
extension SwiftUI.ControlWidgetTemplateBuilder : Swift.Sendable {
}
@available(iOS 17.0, macOS 13.0, tvOS 17.0, watchOS 10.0, *)
public struct DialogSeverity : Swift.Equatable {
  public static let automatic: SwiftUI.DialogSeverity
  public static let critical: SwiftUI.DialogSeverity
  @available(macOS 14.0, *)
  public static let standard: SwiftUI.DialogSeverity
  public static func == (a: SwiftUI.DialogSeverity, b: SwiftUI.DialogSeverity) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.DialogSeverity : Swift.Sendable {
}
@available(iOS 17.0, macOS 13.0, tvOS 17.0, watchOS 10.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func dialogSeverity(_ severity: SwiftUI.DialogSeverity) -> some SwiftUICore.View
  
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func dialogSeverity(_ severity: SwiftUI.DialogSeverity) -> some SwiftUI.Scene
  
}
extension SwiftUICore.EnvironmentValues {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  public var undoManager: Foundation.UndoManager? {
    get
  }
}
@available(iOS 16.4, macOS 13.3, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.ControlGroupStyle where Self == SwiftUI.MenuControlGroupStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var menu: SwiftUI.MenuControlGroupStyle {
    get { .init() }
  }
}
@available(iOS 16.4, macOS 13.3, tvOS 17.0, *)
@available(watchOS, unavailable)
public struct MenuControlGroupStyle : SwiftUI.ControlGroupStyle {
  public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.MenuControlGroupStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.4, tvOS 17.0, macOS 13.3, *)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI21MenuControlGroupStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.MenuControlGroupStyle : Swift.Sendable {
}
@available(iOS 16.4, macOS 13.3, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ControlGroupStyle where Self == SwiftUI.CompactMenuControlGroupStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var compactMenu: SwiftUI.CompactMenuControlGroupStyle {
    get { .init() }
  }
}
@available(iOS 16.4, macOS 13.3, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct CompactMenuControlGroupStyle : SwiftUI.ControlGroupStyle {
  public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.CompactMenuControlGroupStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.4, macOS 13.3, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI28CompactMenuControlGroupStyleV8makeBody13configurationQrAA0efG13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.CompactMenuControlGroupStyle : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.Group : SwiftUI.ToolbarContent where Content : SwiftUI.ToolbarContent {
  nonisolated public init(@SwiftUI.ToolbarContentBuilder content: () -> Content)
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public static func _makeToolbar(content: SwiftUICore._GraphValue<SwiftUICore.Group<Content>>, inputs: SwiftUI._ToolbarInputs) -> SwiftUI._ToolbarOutputs
  nonisolated public static func _makeContent(content: SwiftUICore._GraphValue<SwiftUICore.Group<Content>>, inputs: SwiftUICore._GraphInputs, resolved: inout SwiftUI._ToolbarItemList)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.Group : SwiftUI.CustomizableToolbarContent where Content : SwiftUI.CustomizableToolbarContent {
  public init(@SwiftUI.ToolbarContentBuilder content: () -> Content)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@usableFromInline
internal struct TupleToolbarContent<T> : SwiftUI.ToolbarContent, SwiftUI.CustomizableToolbarContent {
  @usableFromInline
  internal init(_ value: T)
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var body: Swift.Never {
    get
  }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @usableFromInline
  nonisolated internal static func _makeToolbar(content: SwiftUICore._GraphValue<SwiftUI.TupleToolbarContent<T>>, inputs: SwiftUI._ToolbarInputs) -> SwiftUI._ToolbarOutputs
  @usableFromInline
  nonisolated internal static func _makeContent(content: SwiftUICore._GraphValue<SwiftUI.TupleToolbarContent<T>>, inputs: SwiftUICore._GraphInputs, resolved: inout SwiftUI._ToolbarItemList)
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  @usableFromInline
  internal typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.TupleToolbarContent : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Foundation.NSUserActivity {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public enum TypedPayloadError : Swift.Error {
    case invalidContent
    case encodingError
    public static func == (a: Foundation.NSUserActivity.TypedPayloadError, b: Foundation.NSUserActivity.TypedPayloadError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func typedPayload<T>(_ type: T.Type) throws -> T where T : Swift.Decodable, T : Swift.Encodable
  public func setTypedPayload<T>(_ payload: T) throws where T : Swift.Decodable, T : Swift.Encodable
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@available(*, deprecated, message: "Use visualEffect, scrollTransition, or onGeometryChange instead")
@frozen public struct _ScrollViewBoundsModifier<Result> : SwiftUICore.ViewModifier where Result : SwiftUICore.ViewModifier {
  public var transform: (CoreFoundation.CGRect?) -> Result
  @inlinable public init(transform: @escaping (CoreFoundation.CGRect?) -> Result) {
        self.transform = transform
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._ScrollViewBoundsModifier<Result>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(*, deprecated, message: "Use visualEffect, scrollTransition, or onGeometryChange instead")
  @available(iOS, introduced: 14.0, message: "Use visualEffect, scrollTransition, or onGeometryChange instead")
  @available(tvOS, introduced: 14.0, message: "Use visualEffect, scrollTransition, or onGeometryChange instead")
  @available(watchOS, introduced: 7.0, message: "Use visualEffect, scrollTransition, or onGeometryChange instead")
  @available(macOS, introduced: 11.0, message: "Use visualEffect, scrollTransition, or onGeometryChange instead")
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._ScrollViewBoundsModifier : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@available(*, deprecated, message: "Use visualEffect, scrollTransition, or onGeometryChange instead")
@frozen public struct _ScrollViewBoundsModifier2<Result> : SwiftUICore.ViewModifier where Result : SwiftUICore.ViewModifier {
  public var transform: (CoreFoundation.CGSize, CoreFoundation.CGRect?) -> Result
  @inlinable public init(transform: @escaping (CoreFoundation.CGSize, CoreFoundation.CGRect?) -> Result) {
        self.transform = transform
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._ScrollViewBoundsModifier2<Result>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(*, deprecated, message: "Use visualEffect, scrollTransition, or onGeometryChange instead")
  @available(iOS, introduced: 15.0, message: "Use visualEffect, scrollTransition, or onGeometryChange instead")
  @available(tvOS, introduced: 15.0, message: "Use visualEffect, scrollTransition, or onGeometryChange instead")
  @available(watchOS, introduced: 8.0, message: "Use visualEffect, scrollTransition, or onGeometryChange instead")
  @available(macOS, introduced: 12.0, message: "Use visualEffect, scrollTransition, or onGeometryChange instead")
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._ScrollViewBoundsModifier2 : Swift.Sendable {
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public enum EditMode : Swift.Sendable {
  case inactive
  case transient
  case active
  public var isEditing: Swift.Bool {
    get
  }
  public static func == (a: SwiftUI.EditMode, b: SwiftUI.EditMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public var editMode: SwiftUICore.Binding<SwiftUI.EditMode>? {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.TextFieldStyle where Self == SwiftUI.PlainTextFieldStyle {
  @_alwaysEmitIntoClient public static var plain: SwiftUI.PlainTextFieldStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct PlainTextFieldStyle : SwiftUI.TextFieldStyle {
  public init()
  public func _body(configuration: SwiftUI.TextField<SwiftUI.PlainTextFieldStyle._Label>) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI19PlainTextFieldStyleV5_body13configurationQrAA0dE0VyAA01_deF5LabelVG_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.PlainTextFieldStyle : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct ToolbarDefaultItemKind {
  public static let sidebarToggle: SwiftUI.ToolbarDefaultItemKind
  @available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let title: SwiftUI.ToolbarDefaultItemKind
}
@available(*, unavailable)
extension SwiftUI.ToolbarDefaultItemKind : Swift.Sendable {
}
@available(iOS 15.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
extension SwiftUI.PrimitiveButtonStyle where Self == SwiftUI.BorderedButtonStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var bordered: SwiftUI.BorderedButtonStyle {
    get { .init() }
  }
}
@available(iOS 15.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
public struct BorderedButtonStyle : SwiftUI.PrimitiveButtonStyle {
  public init()
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(visionOS, unavailable)
  public init(tint: SwiftUICore.Color)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.BorderedButtonStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 15.0, tvOS 13.0, watchOS 7.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI19BorderedButtonStyleV8makeBody13configurationQrAA09PrimitivedE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.BorderedButtonStyle : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.Text.LineStyle {
  public init?(nsUnderlineStyle: NSUnderlineStyle)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension NSUnderlineStyle {
  public init(_ lineStyle: SwiftUICore.Text.LineStyle)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, visionOS 1.0, *)
@_functionBuilder public struct SceneBuilder {
  @_alwaysEmitIntoClient public static func buildExpression<Content>(_ content: Content) -> Content where Content : SwiftUI.Scene {
       content
    }
  @available(*, unavailable, message: "this expression does not conform to 'Scene'")
  @_disfavoredOverload @_alwaysEmitIntoClient public static func buildExpression(_ invalid: Any) -> some SwiftUI.Scene {
        fatalError()
    }
  
  @available(*, unavailable, message: "Provide at leas one scene")
  public static func buildBlock() -> some SwiftUI.Scene
  
  public static func buildBlock<Content>(_ content: Content) -> Content where Content : SwiftUI.Scene
  @_disfavoredOverload @_alwaysEmitIntoClient public static func buildBlock<each Content>(_ content: repeat each Content) -> some SwiftUI.Scene where repeat each Content : SwiftUI.Scene {
        _TupleScene((repeat each content))
    }
  
}
@available(*, unavailable)
extension SwiftUI.SceneBuilder : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, visionOS 1.0, *)
extension SwiftUI.SceneBuilder {
  @_alwaysEmitIntoClient public static func buildOptional(_ scene: (any SwiftUI.Scene & SwiftUI._LimitedAvailabilitySceneMarker)?) -> some SwiftUI.Scene {
        if #unavailable(iOS 16.1, macOS 13.0, watchOS 9.1, tvOS 16.1) {
            return _EmptyScene()
        } else {
            return if let scene {
                scene as! LimitedAvailabilityScene
            } else {
                LimitedAvailabilityScene(_EmptyScene())
            }
        }
    }
  
  @available(*, unavailable, message: "if statements in a SceneBuilder can only be used with #available clauses")
  public static func buildOptional<S>(_ scene: S?) where S : SwiftUI.Scene
  @available(iOS 16.1, macOS 13.0, watchOS 9.1, tvOS 16.1, visionOS 1.0, *)
  @_alwaysEmitIntoClient public static func buildLimitedAvailability(_ scene: some Scene) -> any SwiftUI.Scene & SwiftUI._LimitedAvailabilitySceneMarker {
        return LimitedAvailabilityScene(scene)
    }
  @available(iOS, deprecated: 14.0, obsoleted: 16.1, message: "this code may crash on earlier versions of the OS; specify '#available(iOS 16.1, *)' or newer instead")
  @available(macOS, deprecated: 11.0, obsoleted: 13.0, message: "this code may crash on earlier versions of the OS; specify '#available(macOS 13.0, *)' or newer instead")
  @available(watchOS, deprecated: 7.0, obsoleted: 9.1, message: "this code may crash on earlier versions of the OS; specify '#available(watchOS 9.1, *)' or newer instead")
  @available(tvOS, deprecated: 14.0, obsoleted: 16.1, message: "this code may crash on earlier versions of the OS; specify '#available(tvOS 16.1, *)' or newer instead")
  @available(visionOS, unavailable)
  @_disfavoredOverload @_alwaysEmitIntoClient public static func buildLimitedAvailability(_ scene: any SwiftUI.Scene) -> any SwiftUI.Scene & SwiftUI._LimitedAvailabilitySceneMarker {
        fatalError("Unavailable")
    }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, visionOS 1.0, *)
@_marker public protocol _LimitedAvailabilitySceneMarker {
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, watchOS 9.0, tvOS 16.0, *)
  nonisolated public func navigationDocument<D>(_ document: D) -> some SwiftUICore.View where D : CoreTransferable.Transferable
  
  @available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
  @available(tvOS, unavailable)
  nonisolated public func navigationDocument<D>(_ document: D, preview: SwiftUI.SharePreview<Swift.Never, Swift.Never>) -> some SwiftUICore.View where D : CoreTransferable.Transferable
  
  @available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
  @available(tvOS, unavailable)
  nonisolated public func navigationDocument<D, I>(_ document: D, preview: SwiftUI.SharePreview<Swift.Never, I>) -> some SwiftUICore.View where D : CoreTransferable.Transferable, I : CoreTransferable.Transferable
  
  @available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
  @available(tvOS, unavailable)
  nonisolated public func navigationDocument<D, I>(_ document: D, preview: SwiftUI.SharePreview<I, Swift.Never>) -> some SwiftUICore.View where D : CoreTransferable.Transferable, I : CoreTransferable.Transferable
  
  @available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
  @available(tvOS, unavailable)
  nonisolated public func navigationDocument<D, I1, I2>(_ document: D, preview: SwiftUI.SharePreview<I1, I2>) -> some SwiftUICore.View where D : CoreTransferable.Transferable, I1 : CoreTransferable.Transferable, I2 : CoreTransferable.Transferable
  
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, watchOS 9.0, tvOS 16.0, *)
  nonisolated public func navigationDocument(_ url: Foundation.URL) -> some SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.TabViewStyle where Self == SwiftUI.DefaultTabViewStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.DefaultTabViewStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct DefaultTabViewStyle : SwiftUI.TabViewStyle {
  public init()
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.DefaultTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.DefaultTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.DefaultTabViewStyle : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct PlainTextEditorStyle : SwiftUI.TextEditorStyle {
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.PlainTextEditorStyle.Configuration) -> some SwiftUICore.View
  
  public init()
  @available(iOS 17.0, visionOS 1.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI20PlainTextEditorStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.PlainTextEditorStyle : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TextEditorStyle where Self == SwiftUI.PlainTextEditorStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var plain: SwiftUI.PlainTextEditorStyle {
    get { .init() }
  }
}
extension SwiftUI.TimelineView where Content : SwiftUICore.View {
  @available(iOS 16.4, macOS 13.3, watchOS 9.4, tvOS 16.4, *)
  @usableFromInline
  @_disfavoredOverload internal init(_ schedule: Schedule, @SwiftUICore.ViewBuilder content: @escaping (SwiftUI.TimelineView<SwiftUICore.PeriodicTimelineSchedule, Swift.Never>.Context) -> Content)
}
@available(iOS 13.0, watchOS 10.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.DatePickerStyle where Self == SwiftUI.WheelDatePickerStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var wheel: SwiftUI.WheelDatePickerStyle {
    get { .init() }
  }
}
@available(iOS 13.0, watchOS 10.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct WheelDatePickerStyle : SwiftUI.DatePickerStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @available(iOS 16.0, *)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.WheelDatePickerStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 13.0, watchOS 10.0, *)
  @available(tvOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI20WheelDatePickerStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
  @available(iOS 13.0, watchOS 10.0, *)
  @available(tvOS, unavailable)
  @available(macOS, unavailable)
  public typealias _Body = SwiftUICore.EmptyView
}
@available(*, unavailable)
extension SwiftUI.WheelDatePickerStyle : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityIdentifier(_ identifier: Swift.String, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityIdentifier(_ identifier: Swift.String, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.TabContent {
  nonisolated public func accessibilityIdentifier(_ identifier: Swift.String, isEnabled: Swift.Bool = true) -> some SwiftUI.TabContent<Self.TabValue>
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityIdentifier(_ identifier: Swift.String) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityIdentifier(_ identifier: Swift.String) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @inlinable nonisolated public func listRowSpacing(_ spacing: CoreFoundation.CGFloat?) -> some SwiftUICore.View {
        environment(\.listRowSpacing, spacing)
    }
  
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  @usableFromInline
  internal var listRowSpacing: CoreFoundation.CGFloat? {
    get
    set
  }
}
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func toolbar(removing defaultItemKind: SwiftUI.ToolbarDefaultItemKind?) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, tvOS 14.0, *)
public struct LongPressGesture : SwiftUICore.Gesture {
  public var minimumDuration: Swift.Double
  @available(tvOS, unavailable)
  public var maximumDistance: CoreFoundation.CGFloat {
    get
    set
  }
  @available(tvOS, unavailable)
  public init(minimumDuration: Swift.Double = 0.5, maximumDistance: CoreFoundation.CGFloat = 10)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public init(minimumDuration: Swift.Double = 0.5)
  nonisolated public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUI.LongPressGesture>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<SwiftUI.LongPressGesture.Value>
  public typealias Value = Swift.Bool
  @available(iOS 13.0, tvOS 14.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.LongPressGesture : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, tvOS 14.0, *)
extension SwiftUICore.View {
  @available(tvOS, unavailable)
  @_alwaysEmitIntoClient nonisolated public func onLongPressGesture(minimumDuration: Swift.Double = 0.5, maximumDistance: CoreFoundation.CGFloat = 10, perform action: @escaping () -> Swift.Void, onPressingChanged: ((Swift.Bool) -> Swift.Void)? = nil) -> some SwiftUICore.View {
        onLongPressGesture(
            minimumDuration: minimumDuration,
            maximumDistance: maximumDistance,
            pressing: onPressingChanged,
            perform: action)
    }
  
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_alwaysEmitIntoClient nonisolated public func onLongPressGesture(minimumDuration: Swift.Double = 0.5, perform action: @escaping () -> Swift.Void, onPressingChanged: ((Swift.Bool) -> Swift.Void)? = nil) -> some SwiftUICore.View {
        onLongPressGesture(
            minimumDuration: minimumDuration,
            pressing: onPressingChanged,
            perform: action)
    }
  
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, tvOS 14.0, *)
extension SwiftUICore.View {
  @available(iOS, deprecated: 100000.0, renamed: "onLongPressGesture(minimumDuration:maximumDuration:perform:onPressingChanged:)")
  @available(macOS, deprecated: 100000.0, renamed: "onLongPressGesture(minimumDuration:maximumDuration:perform:onPressingChanged:)")
  @available(tvOS, unavailable)
  @available(watchOS, deprecated: 100000.0, renamed: "onLongPressGesture(minimumDuration:maximumDuration:perform:onPressingChanged:)")
  @available(visionOS, deprecated: 100000.0, renamed: "onLongPressGesture(minimumDuration:maximumDuration:perform:onPressingChanged:)")
  @_disfavoredOverload nonisolated public func onLongPressGesture(minimumDuration: Swift.Double = 0.5, maximumDistance: CoreFoundation.CGFloat = 10, pressing: ((Swift.Bool) -> Swift.Void)? = nil, perform action: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
  @available(iOS, unavailable)
  @available(tvOS, deprecated: 100000.0, renamed: "onLongPressGesture(minimumDuration:perform:onPressingChanged:)")
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload nonisolated public func onLongPressGesture(minimumDuration: Swift.Double = 0.5, pressing: ((Swift.Bool) -> Swift.Void)? = nil, perform action: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func confirmationDialog<A>(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, titleVisibility: SwiftUICore.Visibility = .automatic, @SwiftUICore.ViewBuilder actions: () -> A) -> some SwiftUICore.View where A : SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func confirmationDialog<S, A>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, titleVisibility: SwiftUICore.Visibility = .automatic, @SwiftUICore.ViewBuilder actions: () -> A) -> some SwiftUICore.View where S : Swift.StringProtocol, A : SwiftUICore.View
  
  nonisolated public func confirmationDialog<A>(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, titleVisibility: SwiftUICore.Visibility = .automatic, @SwiftUICore.ViewBuilder actions: () -> A) -> some SwiftUICore.View where A : SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func confirmationDialog<A, M>(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, titleVisibility: SwiftUICore.Visibility = .automatic, @SwiftUICore.ViewBuilder actions: () -> A, @SwiftUICore.ViewBuilder message: () -> M) -> some SwiftUICore.View where A : SwiftUICore.View, M : SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func confirmationDialog<S, A, M>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, titleVisibility: SwiftUICore.Visibility = .automatic, @SwiftUICore.ViewBuilder actions: () -> A, @SwiftUICore.ViewBuilder message: () -> M) -> some SwiftUICore.View where S : Swift.StringProtocol, A : SwiftUICore.View, M : SwiftUICore.View
  
  nonisolated public func confirmationDialog<A, M>(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, titleVisibility: SwiftUICore.Visibility = .automatic, @SwiftUICore.ViewBuilder actions: () -> A, @SwiftUICore.ViewBuilder message: () -> M) -> some SwiftUICore.View where A : SwiftUICore.View, M : SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func confirmationDialog<A, T>(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, titleVisibility: SwiftUICore.Visibility = .automatic, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A) -> some SwiftUICore.View where A : SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func confirmationDialog<S, A, T>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, titleVisibility: SwiftUICore.Visibility = .automatic, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A) -> some SwiftUICore.View where S : Swift.StringProtocol, A : SwiftUICore.View
  
  nonisolated public func confirmationDialog<A, T>(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, titleVisibility: SwiftUICore.Visibility = .automatic, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A) -> some SwiftUICore.View where A : SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func confirmationDialog<A, M, T>(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, titleVisibility: SwiftUICore.Visibility = .automatic, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A, @SwiftUICore.ViewBuilder message: (T) -> M) -> some SwiftUICore.View where A : SwiftUICore.View, M : SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func confirmationDialog<S, A, M, T>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, titleVisibility: SwiftUICore.Visibility = .automatic, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A, @SwiftUICore.ViewBuilder message: (T) -> M) -> some SwiftUICore.View where S : Swift.StringProtocol, A : SwiftUICore.View, M : SwiftUICore.View
  
  nonisolated public func confirmationDialog<A, M, T>(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, titleVisibility: SwiftUICore.Visibility = .automatic, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A, @SwiftUICore.ViewBuilder message: (T) -> M) -> some SwiftUICore.View where A : SwiftUICore.View, M : SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct ContentUnavailableView<Label, Description, Actions> : SwiftUICore.View where Label : SwiftUICore.View, Description : SwiftUICore.View, Actions : SwiftUICore.View {
  public init(@SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder description: () -> Description = { EmptyView() }, @SwiftUICore.ViewBuilder actions: () -> Actions = { EmptyView() })
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI22ContentUnavailableViewV4bodyQrvp", 0) __<Label, Description, Actions>
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.ContentUnavailableView where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image>, Description == SwiftUICore.Text?, Actions == SwiftUICore.EmptyView {
  nonisolated public init(_ title: SwiftUICore.LocalizedStringKey, image name: Swift.String, description: SwiftUICore.Text? = nil)
  nonisolated public init(_ title: SwiftUICore.LocalizedStringKey, systemImage name: Swift.String, description: SwiftUICore.Text? = nil)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, image name: Swift.String, description: SwiftUICore.Text? = nil) where S : Swift.StringProtocol
  @_disfavoredOverload nonisolated public init<S>(_ title: S, systemImage name: Swift.String, description: SwiftUICore.Text? = nil) where S : Swift.StringProtocol
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.ContentUnavailableView where Label == SwiftUI.SearchUnavailableContent.Label, Description == SwiftUI.SearchUnavailableContent.Description, Actions == SwiftUI.SearchUnavailableContent.Actions {
  public static var search: SwiftUI.ContentUnavailableView<SwiftUI.SearchUnavailableContent.Label, SwiftUI.SearchUnavailableContent.Description, SwiftUI.SearchUnavailableContent.Actions> {
    get
  }
  public static func search(text: Swift.String) -> SwiftUI.ContentUnavailableView<Label, Description, Actions>
}
@available(*, unavailable)
extension SwiftUI.ContentUnavailableView : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct SearchUnavailableContent {
  @_Concurrency.MainActor @preconcurrency public struct Label : SwiftUICore.View {
    @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
      get
    }
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24SearchUnavailableContentV5LabelV4bodyQrvp", 0) __
  }
  @_Concurrency.MainActor @preconcurrency public struct Description : SwiftUICore.View {
    @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
      get
    }
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24SearchUnavailableContentV11DescriptionV4bodyQrvp", 0) __
  }
  @_Concurrency.MainActor @preconcurrency public struct Actions : SwiftUICore.View {
    @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
      get
    }
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24SearchUnavailableContentV7ActionsV4bodyQrvp", 0) __
  }
}
@available(*, unavailable)
extension SwiftUI.SearchUnavailableContent : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.SearchUnavailableContent.Label : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.SearchUnavailableContent.Description : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.SearchUnavailableContent.Actions : Swift.Sendable {
}
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@preconcurrency @_Concurrency.MainActor public struct OpenSettingsAction {
  @_Concurrency.MainActor @preconcurrency public func callAsFunction()
}
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var openSettings: SwiftUI.OpenSettingsAction {
    get
  }
}
@available(macOS 12.0, tvOS 14.0, watchOS 7.0, *)
@available(iOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func prefersDefaultFocus(_ prefersDefaultFocus: Swift.Bool = true, in namespace: SwiftUICore.Namespace.ID) -> some SwiftUICore.View
  
  nonisolated public func focusScope(_ namespace: SwiftUICore.Namespace.ID) -> some SwiftUICore.View
  
}
@available(iOS, unavailable)
@available(macOS, introduced: 11.0, deprecated: 11.0, message: "Prototype SPI, do not use.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func _prefersDefaultFocus(_ prefersDefaultFocus: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(iOS 16.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _DefaultFocusModifier : SwiftUICore.ViewModifier {
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._DefaultFocusModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 16.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._DefaultFocusModifier : Swift.Sendable {
}
@available(macOS 11.0, watchOS 7.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct _FocusSystem {
  @available(macOS, introduced: 11.0, deprecated: 11.0, message: "Prototype SPI, do not use.")
  public func resetToDefault()
}
@available(*, unavailable)
extension SwiftUI._FocusSystem : Swift.Sendable {
}
@available(macOS 12.0, tvOS 14.0, watchOS 7.0, *)
@available(iOS, unavailable)
@available(visionOS, unavailable)
public struct ResetFocusAction {
  public func callAsFunction(in namespace: SwiftUICore.Namespace.ID)
}
@available(*, unavailable)
extension SwiftUI.ResetFocusAction : Swift.Sendable {
}
@available(macOS 12.0, tvOS 14.0, watchOS 7.0, *)
@available(iOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var resetFocus: SwiftUI.ResetFocusAction {
    get
  }
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var _focusSystem: SwiftUI._FocusSystem {
    get
    set
  }
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct _ControlWidgetAdaptor<Base> : SwiftUI.Widget where Base : SwiftUI.ControlWidget {
  @_Concurrency.MainActor @preconcurrency public init()
  public init(_ base: Base)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.WidgetConfiguration {
    get
  }
  @available(iOS 18.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI21_ControlWidgetAdaptorV4bodyQrvp", 0) __<Base>
}
@available(*, unavailable)
extension SwiftUI._ControlWidgetAdaptor : Swift.Sendable {
}
@available(iOS 15.0, macOS 13.0, tvOS 15.0, watchOS 7.0, *)
@usableFromInline
internal struct ListItemReuseIdentifierTrait : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.String {
    get { "ListCell" }
  }
  @available(iOS 15.0, tvOS 15.0, watchOS 7.0, macOS 13.0, *)
  @usableFromInline
  internal typealias Value = Swift.String
}
@available(*, unavailable)
extension SwiftUI.ListItemReuseIdentifierTrait : Swift.Sendable {
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.Gesture {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func modifiers(_ modifiers: SwiftUICore.EventModifiers) -> SwiftUI._ModifiersGesture<Self>
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct _ModifiersGesture<Content> : SwiftUICore.Gesture where Content : SwiftUICore.Gesture {
  nonisolated public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUI._ModifiersGesture<Content>>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Content.Value>
  @available(macOS 10.15, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Body = Swift.Never
  @available(macOS 10.15, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Value = Content.Value
}
@available(*, unavailable)
extension SwiftUI._ModifiersGesture : Swift.Sendable {
}
@available(tvOS 14.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.PrimitiveButtonStyle where Self == SwiftUI.CardButtonStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var card: SwiftUI.CardButtonStyle {
    get { .init() }
  }
}
@available(tvOS 14.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct CardButtonStyle : SwiftUI.PrimitiveButtonStyle {
  public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.CardButtonStyle.Configuration) -> some SwiftUICore.View
  
  @available(tvOS 14.0, *)
  @available(iOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15CardButtonStyleV8makeBody13configurationQrAA09PrimitivedE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.CardButtonStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func commandsRemoved() -> some SwiftUI.Scene
  
  nonisolated public func commandsReplaced<Content>(@SwiftUI.CommandsBuilder content: () -> Content) -> some SwiftUI.Scene where Content : SwiftUI.Commands
  
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct _DigitalCrownModifier : SwiftUICore.ViewModifier {
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._DigitalCrownModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(watchOS 6.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._DigitalCrownModifier : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency public protocol FileDocument : Swift.Sendable {
  static var readableContentTypes: [UniformTypeIdentifiers.UTType] { get }
  static var writableContentTypes: [UniformTypeIdentifiers.UTType] { get }
  init(configuration: Self.ReadConfiguration) throws
  typealias ReadConfiguration = SwiftUI.FileDocumentReadConfiguration
  func fileWrapper(configuration: Self.WriteConfiguration) throws -> Foundation.FileWrapper
  typealias WriteConfiguration = SwiftUI.FileDocumentWriteConfiguration
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.FileDocument {
  public static var writableContentTypes: [UniformTypeIdentifiers.UTType] {
    get
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DocumentGroup where Document : SwiftUI.FileDocument {
  @preconcurrency nonisolated public init(newDocument: @autoclosure @escaping @Sendable () -> Document, @SwiftUICore.ViewBuilder editor: @escaping (SwiftUI.FileDocumentConfiguration<Document>) -> Content)
  nonisolated public init(viewing documentType: Document.Type, @SwiftUICore.ViewBuilder viewer: @escaping (SwiftUI.FileDocumentConfiguration<Document>) -> Content)
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct FileDocumentConfiguration<Document> where Document : SwiftUI.FileDocument {
  @SwiftUICore.Binding @_projectedValueProperty($document) public var document: Document {
    get
    @available(iOS 14.0, macOS 11.0, *)
    @available(tvOS, unavailable, introduced: 13.0)
    @available(watchOS, unavailable, introduced: 6.0)
    nonmutating set
    @available(iOS 14.0, macOS 11.0, *)
    @available(tvOS, unavailable, introduced: 13.0)
    @available(watchOS, unavailable, introduced: 6.0)
    nonmutating _modify
  }
  public var $document: SwiftUICore.Binding<Document> {
    get
  }
  public var fileURL: Foundation.URL?
  public var isEditable: Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.FileDocumentConfiguration : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@frozen public struct Grid<Content> where Content : SwiftUICore.View {
  @usableFromInline
  internal var _tree: SwiftUICore._VariadicView.Tree<SwiftUI.GridLayout, Content>
  @inlinable public init(alignment: SwiftUICore.Alignment = .center, horizontalSpacing: CoreFoundation.CGFloat? = nil, verticalSpacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder content: () -> Content) {
        let root = GridLayout(alignment: alignment,
            horizontalSpacing: horizontalSpacing,
            verticalSpacing: verticalSpacing)
        _tree = .init(root) { content() }
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI.Grid<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.Grid : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@frozen public struct GridRow<Content> where Content : SwiftUICore.View {
  @usableFromInline
  internal var alignment: SwiftUICore.VerticalAlignment?
  @usableFromInline
  internal var content: Content
  @inlinable public init(alignment: SwiftUICore.VerticalAlignment? = nil, @SwiftUICore.ViewBuilder content: () -> Content) {
        self.alignment = alignment
        self.content = content()
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI.GridRow<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUI.GridRow<Content>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.GridRow : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func gridCellColumns(_ count: Swift.Int) -> some SwiftUICore.View {
        return modifier(_GridCellSizeModifier(
            count: count, axis: .horizontal))
    }
  
  @inlinable nonisolated public func gridCellAnchor(_ anchor: SwiftUICore.UnitPoint) -> some SwiftUICore.View {
        return modifier(_GridAnchorModifier(anchor: anchor))
    }
  
  @inlinable nonisolated public func gridColumnAlignment(_ guide: SwiftUICore.HorizontalAlignment) -> some SwiftUICore.View {
        return modifier(_GridAlignmentModifier(alignment: guide.key))
    }
  
  @inlinable nonisolated public func gridCellUnsizedAxes(_ axes: SwiftUICore.Axis.Set) -> some SwiftUICore.View {
        return modifier(_GridUnsizedAxesModifier(axes: axes))
    }
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@frozen public struct _GridCellSizeModifier : SwiftUICore.ViewModifier {
  @usableFromInline
  internal var count: Swift.Int
  @usableFromInline
  internal var axis: SwiftUICore.Axis
  @inlinable internal init(count: Swift.Int, axis: SwiftUICore.Axis) {
        self.count = count
        self.axis = axis
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._GridCellSizeModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUI._GridCellSizeModifier>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@frozen public struct _GridAnchorModifier : SwiftUICore.ViewModifier {
  @usableFromInline
  internal var anchor: SwiftUICore.UnitPoint
  @inlinable internal init(anchor: SwiftUICore.UnitPoint) { self.anchor = anchor }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._GridAnchorModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUI._GridAnchorModifier>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@frozen public struct _GridAlignmentModifier : SwiftUICore.ViewModifier {
  @usableFromInline
  internal var alignment: SwiftUICore.AlignmentKey
  @inlinable internal init(alignment: SwiftUICore.AlignmentKey) { self.alignment = alignment }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._GridAlignmentModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUI._GridAlignmentModifier>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@frozen public struct _GridUnsizedAxesModifier : SwiftUICore.ViewModifier {
  @usableFromInline
  internal var axes: SwiftUICore.Axis.Set
  @inlinable internal init(axes: SwiftUICore.Axis.Set) { self.axes = axes }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._GridUnsizedAxesModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUI._GridUnsizedAxesModifier>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@frozen public struct GridLayout : SwiftUICore._VariadicView.UnaryViewRoot {
  public var alignment: SwiftUICore.Alignment
  public var horizontalSpacing: CoreFoundation.CGFloat?
  public var verticalSpacing: CoreFoundation.CGFloat?
  @inlinable public init(alignment: SwiftUICore.Alignment = .center, horizontalSpacing: CoreFoundation.CGFloat? = nil, verticalSpacing: CoreFoundation.CGFloat? = nil) {
        self.alignment = alignment
        self.horizontalSpacing = horizontalSpacing
        self.verticalSpacing = verticalSpacing
    }
  nonisolated public static func _makeView(root: SwiftUICore._GraphValue<SwiftUI.GridLayout>, inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.GridLayout : SwiftUICore.Layout {
  public func makeCache(subviews: SwiftUI.GridLayout.Subviews) -> SwiftUI.GridLayout.Cache
  public func updateCache(_ cache: inout SwiftUI.GridLayout.Cache, subviews: SwiftUI.GridLayout.Subviews)
  public func spacing(subviews: SwiftUI.GridLayout.Subviews, cache: inout SwiftUI.GridLayout.Cache) -> SwiftUICore.ViewSpacing
  public func sizeThatFits(proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUI.GridLayout.Subviews, cache: inout SwiftUI.GridLayout.Cache) -> CoreFoundation.CGSize
  public func placeSubviews(in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUI.GridLayout.Subviews, cache: inout SwiftUI.GridLayout.Cache)
  public func explicitAlignment(of guide: SwiftUICore.HorizontalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUI.GridLayout.Subviews, cache: inout SwiftUI.GridLayout.Cache) -> CoreFoundation.CGFloat?
  public func explicitAlignment(of guide: SwiftUICore.VerticalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUI.GridLayout.Subviews, cache: inout SwiftUI.GridLayout.Cache) -> CoreFoundation.CGFloat?
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.GridLayout {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public struct Cache {
  }
}
@available(*, unavailable)
extension SwiftUI.GridLayout.Cache : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _EventDirections : Swift.OptionSet {
  public let rawValue: Swift.Int8
  public init(rawValue: Swift.Int8)
  public static let left: SwiftUI._EventDirections
  public static let right: SwiftUI._EventDirections
  public static let up: SwiftUI._EventDirections
  public static let down: SwiftUI._EventDirections
  public static let horizontal: SwiftUI._EventDirections
  public static let vertical: SwiftUI._EventDirections
  public static let all: SwiftUI._EventDirections
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ArrayLiteralElement = SwiftUI._EventDirections
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Element = SwiftUI._EventDirections
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias RawValue = Swift.Int8
}
@available(*, unavailable)
extension SwiftUI._EventDirections : Swift.Sendable {
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  public var defaultWheelPickerItemHeight: CoreFoundation.CGFloat {
    get
    set
  }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @inlinable nonisolated public func defaultWheelPickerItemHeight(_ height: CoreFoundation.CGFloat) -> some SwiftUICore.View {
        return environment(\.defaultWheelPickerItemHeight, height)
    }
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.Scene {
  nonisolated public func backgroundTask<D, R>(_ task: SwiftUI.BackgroundTask<D, R>, action: @escaping @Sendable (D) async -> R) -> some SwiftUI.Scene where D : Swift.Sendable, R : Swift.Sendable
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct BackgroundTask<Request, Response> : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.BackgroundTask {
  public static var urlSession: SwiftUI.BackgroundTask<Swift.String, Swift.Void> {
    get
  }
  public static func urlSession(_ identifier: Swift.String) -> SwiftUI.BackgroundTask<Swift.Void, Swift.Void>
  public static func urlSession(matching: @escaping @Sendable (Swift.String) -> Swift.Bool) -> SwiftUI.BackgroundTask<Swift.String, Swift.Void>
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  public static var appRefresh: SwiftUI.BackgroundTask<Swift.String?, Swift.Void> {
    get
  }
  @available(macOS, unavailable)
  public static func appRefresh(_ identifier: Swift.String) -> SwiftUI.BackgroundTask<Swift.Void, Swift.Void>
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.WidgetConfiguration {
  nonisolated public func backgroundTask<D, R>(_ task: SwiftUI.BackgroundTask<D, R>, action: @escaping @Sendable (D) async -> R) -> some SwiftUI.WidgetConfiguration where D : Swift.Sendable, R : Swift.Sendable
  
}
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct NSHostingSceneBridgingOptions : Swift.OptionSet, Swift.Sendable {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let title: SwiftUI.NSHostingSceneBridgingOptions
  public static let toolbars: SwiftUI.NSHostingSceneBridgingOptions
  public static let all: SwiftUI.NSHostingSceneBridgingOptions
  @available(macOS 14.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias ArrayLiteralElement = SwiftUI.NSHostingSceneBridgingOptions
  @available(macOS 14.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Element = SwiftUI.NSHostingSceneBridgingOptions
  @available(macOS 14.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias RawValue = Swift.Int
}
@available(iOS 17.5, macOS 14.5, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct PencilPreferredAction : Swift.Hashable {
  public static let switchEraser: SwiftUI.PencilPreferredAction
  public static let switchPrevious: SwiftUI.PencilPreferredAction
  public static let showColorPalette: SwiftUI.PencilPreferredAction
  public static let showInkAttributes: SwiftUI.PencilPreferredAction
  public static let showContextualPalette: SwiftUI.PencilPreferredAction
  public static let runSystemShortcut: SwiftUI.PencilPreferredAction
  public static let ignore: SwiftUI.PencilPreferredAction
  public static func == (a: SwiftUI.PencilPreferredAction, b: SwiftUI.PencilPreferredAction) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.PencilPreferredAction : Swift.Sendable {
}
@available(iOS 17.5, macOS 14.5, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var preferredPencilDoubleTapAction: SwiftUI.PencilPreferredAction {
    get
  }
}
@available(iOS 17.5, macOS 14.5, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var preferredPencilSqueezeAction: SwiftUI.PencilPreferredAction {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public class _PreviewHost : Combine.ObservableObject {
  final public let objectWillChange: Combine.PassthroughSubject<Swift.Void, Swift.Never>
  public var environment: SwiftUICore.EnvironmentValues
  public var focusedValues: SwiftUI.FocusedValues
  public static func makeHost(providerType: any Any.Type) -> SwiftUI._PreviewHost?
  public func invalidatePreviews()
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func makeHost<T>(content: T) -> SwiftUI._PreviewHost where T : SwiftUICore.View
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  final public func updateContent<T>(_ content: T) where T : SwiftUICore.View
  public func invalidateEverything()
  public var previews: [SwiftUI._Preview] {
    get
  }
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias ObjectWillChangePublisher = Combine.PassthroughSubject<Swift.Void, Swift.Never>
  @objc deinit
}
@available(*, unavailable)
extension SwiftUI._PreviewHost : Swift.Sendable {
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView instead")
@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
@available(watchOS, unavailable)
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
public struct DoubleColumnNavigationViewStyle : SwiftUI.NavigationViewStyle {
  public init()
  public func _body(configuration: SwiftUI._NavigationViewStyleConfiguration) -> some SwiftUICore.View
  
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func _columnBasedBody(configuration: SwiftUI._NavigationViewStyleConfiguration) -> some SwiftUICore.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(watchOS, unavailable, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI31DoubleColumnNavigationViewStyleV5_body13configurationQrAA01_efG13ConfigurationV_tF", 0) __
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(watchOS, unavailable, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  public typealias _Body2 = @_opaqueReturnTypeOf("$s7SwiftUI31DoubleColumnNavigationViewStyleV16_columnBasedBody13configurationQrAA01_efG13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.DoubleColumnNavigationViewStyle : Swift.Sendable {
}
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct HelpLink : SwiftUICore.View {
  public init(action: @escaping () -> Swift.Void)
  public init(destination: Foundation.URL)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(macOS 14.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI8HelpLinkV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.HelpLink : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func toolbar<Content>(@SwiftUICore.ViewBuilder content: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  nonisolated public func toolbar<Content>(@SwiftUI.ToolbarContentBuilder content: () -> Content) -> some SwiftUICore.View where Content : SwiftUI.ToolbarContent
  
  nonisolated public func toolbar<Content>(id: Swift.String, @SwiftUI.ToolbarContentBuilder content: () -> Content) -> some SwiftUICore.View where Content : SwiftUI.CustomizableToolbarContent
  
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
public struct ShareLink<Data, PreviewImage, PreviewIcon, Label> : SwiftUICore.View where Data : Swift.RandomAccessCollection, PreviewImage : CoreTransferable.Transferable, PreviewIcon : CoreTransferable.Transferable, Label : SwiftUICore.View, Data.Element : CoreTransferable.Transferable {
  public init(items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: @escaping (Data.Element) -> SwiftUI.SharePreview<PreviewImage, PreviewIcon>, @SwiftUICore.ViewBuilder label: () -> Label)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, watchOS 9.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI9ShareLinkV4bodyQrvp", 0) __<Data, PreviewImage, PreviewIcon, Label>
}
@available(*, unavailable)
extension SwiftUI.ShareLink : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.ShareLink {
  nonisolated public init<I>(item: I, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: SwiftUI.SharePreview<PreviewImage, PreviewIcon>, @SwiftUICore.ViewBuilder label: () -> Label) where Data == Swift.CollectionOfOne<I>, I : CoreTransferable.Transferable
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.ShareLink where PreviewImage == Swift.Never, PreviewIcon == Swift.Never, Data.Element == Foundation.URL {
  nonisolated public init(items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder label: () -> Label)
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.ShareLink where PreviewImage == Swift.Never, PreviewIcon == Swift.Never, Data.Element == Swift.String {
  nonisolated public init(items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder label: () -> Label)
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.ShareLink where PreviewImage == Swift.Never, PreviewIcon == Swift.Never {
  nonisolated public init(item: Foundation.URL, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder label: () -> Label) where Data == Swift.CollectionOfOne<Foundation.URL>
  nonisolated public init(item: Swift.String, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder label: () -> Label) where Data == Swift.CollectionOfOne<Swift.String>
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
public struct DefaultShareLinkLabel : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, watchOS 9.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI21DefaultShareLinkLabelV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.DefaultShareLinkLabel : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.ShareLink where Label == SwiftUI.DefaultShareLinkLabel {
  nonisolated public init(items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: @escaping (Data.Element) -> SwiftUI.SharePreview<PreviewImage, PreviewIcon>)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: @escaping (Data.Element) -> SwiftUI.SharePreview<PreviewImage, PreviewIcon>)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: @escaping (Data.Element) -> SwiftUI.SharePreview<PreviewImage, PreviewIcon>) where S : Swift.StringProtocol
  nonisolated public init(_ title: SwiftUICore.Text, items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: @escaping (Data.Element) -> SwiftUI.SharePreview<PreviewImage, PreviewIcon>)
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.ShareLink where Label == SwiftUI.DefaultShareLinkLabel {
  nonisolated public init<I>(item: I, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: SwiftUI.SharePreview<PreviewImage, PreviewIcon>) where Data == Swift.CollectionOfOne<I>, I : CoreTransferable.Transferable
  nonisolated public init<I>(_ titleKey: SwiftUICore.LocalizedStringKey, item: I, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: SwiftUI.SharePreview<PreviewImage, PreviewIcon>) where Data == Swift.CollectionOfOne<I>, I : CoreTransferable.Transferable
  @_disfavoredOverload nonisolated public init<S, I>(_ title: S, item: I, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: SwiftUI.SharePreview<PreviewImage, PreviewIcon>) where Data == Swift.CollectionOfOne<I>, S : Swift.StringProtocol, I : CoreTransferable.Transferable
  nonisolated public init<I>(_ title: SwiftUICore.Text, item: I, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: SwiftUI.SharePreview<PreviewImage, PreviewIcon>) where Data == Swift.CollectionOfOne<I>, I : CoreTransferable.Transferable
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.ShareLink where PreviewImage == Swift.Never, PreviewIcon == Swift.Never, Label == SwiftUI.DefaultShareLinkLabel, Data.Element == Foundation.URL {
  nonisolated public init(items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) where S : Swift.StringProtocol
  nonisolated public init(_ title: SwiftUICore.Text, items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil)
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.ShareLink where PreviewImage == Swift.Never, PreviewIcon == Swift.Never, Label == SwiftUI.DefaultShareLinkLabel, Data.Element == Swift.String {
  nonisolated public init(items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) where S : Swift.StringProtocol
  nonisolated public init(_ title: SwiftUICore.Text, items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil)
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.ShareLink where PreviewImage == Swift.Never, PreviewIcon == Swift.Never, Label == SwiftUI.DefaultShareLinkLabel {
  nonisolated public init(item: Foundation.URL, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) where Data == Swift.CollectionOfOne<Foundation.URL>
  nonisolated public init(item: Swift.String, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) where Data == Swift.CollectionOfOne<Swift.String>
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, item: Foundation.URL, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) where Data == Swift.CollectionOfOne<Foundation.URL>
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, item: Swift.String, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) where Data == Swift.CollectionOfOne<Swift.String>
  @_disfavoredOverload nonisolated public init<S>(_ title: S, item: Foundation.URL, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) where Data == Swift.CollectionOfOne<Foundation.URL>, S : Swift.StringProtocol
  @_disfavoredOverload nonisolated public init<S>(_ title: S, item: Swift.String, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) where Data == Swift.CollectionOfOne<Swift.String>, S : Swift.StringProtocol
  nonisolated public init(_ title: SwiftUICore.Text, item: Foundation.URL, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) where Data == Swift.CollectionOfOne<Foundation.URL>
  nonisolated public init(_ title: SwiftUICore.Text, item: Swift.String, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) where Data == Swift.CollectionOfOne<Swift.String>
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public protocol WindowToolbarStyle {
  associatedtype _Body : SwiftUICore.View
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func windowToolbarStyle<S>(_ style: S) -> some SwiftUI.Scene where S : SwiftUI.WindowToolbarStyle
  
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func presentedWindowToolbarStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.WindowToolbarStyle
  
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildIf<C>(_ content: C?) -> C? where C : SwiftUI.Commands {
        content
    }
  @_alwaysEmitIntoClient public static func buildEither<T, F>(first: T) -> SwiftUICore._ConditionalContent<T, F> where T : SwiftUI.Commands, F : SwiftUI.Commands {
        _ConditionalContent<T, F>(storage: .trueContent(first))
    }
  @_alwaysEmitIntoClient public static func buildEither<T, F>(second: F) -> SwiftUICore._ConditionalContent<T, F> where T : SwiftUI.Commands, F : SwiftUI.Commands {
        _ConditionalContent<T, F>(storage: .falseContent(second))
    }
  @available(iOS 17.5, macOS 14.5, *)
  @_alwaysEmitIntoClient public static func buildLimitedAvailability(_ content: any SwiftUI.Commands) -> some SwiftUI.Commands {
        if #unavailable(iOS 17.5, macOS 14.5) {
            return EmptyCommands()
        } else {
            return LimitedAvailabilityCommandContent(erasing: content)
        }
    }
  
  @available(iOS, deprecated: 16.0, obsoleted: 17.5, message: "this code may crash on earlier versions of the OS; specify '#available(iOS 17.5, *)' or newer instead")
  @available(macOS, deprecated: 13.0, obsoleted: 14.5, message: "this code may crash on earlier versions of the OS; specify '#available(macOS 14.5, *)' or newer instead")
  @_alwaysEmitIntoClient public static func buildLimitedAvailability<C>(_ content: C) -> some SwiftUI.Commands where C : SwiftUI.Commands {
        content
    }
  
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore._ConditionalContent : SwiftUI.Commands where TrueContent : SwiftUI.Commands, FalseContent : SwiftUI.Commands {
  nonisolated public static func _makeCommands(content: SwiftUICore._GraphValue<SwiftUICore._ConditionalContent<TrueContent, FalseContent>>, inputs: SwiftUI._CommandsInputs) -> SwiftUI._CommandsOutputs
  @usableFromInline
  internal init(storage: SwiftUICore._ConditionalContent<TrueContent, FalseContent>.Storage)
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = Swift.Never
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Optional : SwiftUI.Commands where Wrapped : SwiftUI.Commands {
  nonisolated public static func _makeCommands(content: SwiftUICore._GraphValue<Swift.Optional<Wrapped>>, inputs: SwiftUI._CommandsInputs) -> SwiftUI._CommandsOutputs
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = Swift.Never
}
extension SwiftUICore.EdgeInsets {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, *)
  @available(watchOS, unavailable)
  public init(_ nsEdgeInsets: UIKit.NSDirectionalEdgeInsets)
}
extension UIKit.NSDirectionalEdgeInsets {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, *)
  @available(watchOS, unavailable)
  public init(_ edgeInsets: SwiftUICore.EdgeInsets)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.EnvironmentValues {
  public var isUserAuthenticationEnabled: Swift.Bool {
    get
    set
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func navigationTitle(_ title: SwiftUICore.Text) -> some SwiftUICore.View
  
  nonisolated public func navigationTitle(_ titleKey: SwiftUICore.LocalizedStringKey) -> some SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func navigationTitle<S>(_ title: S) -> some SwiftUICore.View where S : Swift.StringProtocol
  
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func navigationTitle<V>(@SwiftUICore.ViewBuilder _ title: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, watchOS 9.0, tvOS 16.0, *)
  nonisolated public func navigationTitle(_ title: SwiftUICore.Binding<Swift.String>) -> some SwiftUICore.View
  
}
@available(iOS 14.0, watchOS 8.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func navigationBarTitleDisplayMode(_ displayMode: SwiftUI.NavigationBarItem.TitleDisplayMode) -> some SwiftUICore.View
  
}
@available(macCatalyst 14.0, macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func navigationSubtitle(_ subtitle: SwiftUICore.Text) -> some SwiftUICore.View
  
  nonisolated public func navigationSubtitle(_ subtitleKey: SwiftUICore.LocalizedStringKey) -> some SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func navigationSubtitle<S>(_ subtitle: S) -> some SwiftUICore.View where S : Swift.StringProtocol
  
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ImmersiveSpace<Content, Data> : SwiftUI.Scene where Content : SwiftUI.ImmersiveSpaceContent, Data : Swift.Decodable, Data : Swift.Encodable, Data : Swift.Hashable {
  public init(@SwiftUI.ImmersiveSpaceContentBuilder content: @escaping () -> Content) where Data == Swift.Never
  public init(id: Swift.String, @SwiftUI.ImmersiveSpaceContentBuilder content: () -> Content) where Data == Swift.Never
  public init(id: Swift.String, for type: Data.Type, @SwiftUI.ImmersiveSpaceContentBuilder content: @escaping (SwiftUICore.Binding<Data?>) -> Content)
  public init(for type: Data.Type, @SwiftUI.ImmersiveSpaceContentBuilder content: @escaping (SwiftUICore.Binding<Data?>) -> Content)
  public init(id: Swift.String, for type: Data.Type = Data.self, @SwiftUI.ImmersiveSpaceContentBuilder content: @escaping (SwiftUICore.Binding<Data>) -> Content, defaultValue: @escaping () -> Data)
  public init(for type: Data.Type = Data.self, @SwiftUI.ImmersiveSpaceContentBuilder content: @escaping (SwiftUICore.Binding<Data>) -> Content, defaultValue: @escaping () -> Data)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Scene {
    get
  }
  @available(visionOS 1.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI14ImmersiveSpaceV4bodyQrvp", 0) __<Content, Data>
}
@available(*, unavailable)
extension SwiftUI.ImmersiveSpace : Swift.Sendable {
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ImmersiveSpace {
  nonisolated public init<V>(@SwiftUICore.ViewBuilder content: @escaping () -> V) where Content == SwiftUI.ImmersiveSpaceViewContent<V>, Data == Swift.Never, V : SwiftUICore.View
  nonisolated public init<V>(id: Swift.String, @SwiftUICore.ViewBuilder content: () -> V) where Content == SwiftUI.ImmersiveSpaceViewContent<V>, Data == Swift.Never, V : SwiftUICore.View
  nonisolated public init<V>(id: Swift.String, for type: Data.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<Data?>) -> V) where Content == SwiftUI.ImmersiveSpaceViewContent<V>, V : SwiftUICore.View
  nonisolated public init<V>(for type: Data.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<Data?>) -> V) where Content == SwiftUI.ImmersiveSpaceViewContent<V>, V : SwiftUICore.View
  nonisolated public init<V>(id: Swift.String, for type: Data.Type = Data.self, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<Data>) -> V, defaultValue: @escaping () -> Data) where Content == SwiftUI.ImmersiveSpaceViewContent<V>, V : SwiftUICore.View
  nonisolated public init<V>(for type: Data.Type = Data.self, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<Data>) -> V, defaultValue: @escaping () -> Data) where Content == SwiftUI.ImmersiveSpaceViewContent<V>, V : SwiftUICore.View
}
extension SwiftUICore.View {
  @available(iOS 16.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func defersSystemGestures(on edges: SwiftUICore.Edge.Set) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, watchOS 10.0, *)
@available(tvOS, unavailable)
extension SwiftUI.DatePickerStyle where Self == SwiftUI.DefaultDatePickerStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.DefaultDatePickerStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, watchOS 10.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct DefaultDatePickerStyle : SwiftUI.DatePickerStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @available(iOS 16.0, macOS 13.0, *)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.DefaultDatePickerStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 13.0, watchOS 10.0, macOS 10.15, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI22DefaultDatePickerStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
  @available(iOS 13.0, watchOS 10.0, macOS 10.15, *)
  @available(tvOS, unavailable)
  public typealias _Body = SwiftUICore.EmptyView
}
@available(*, unavailable)
extension SwiftUI.DefaultDatePickerStyle : Swift.Sendable {
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.DatePickerStyle where Self == SwiftUI.StepperFieldDatePickerStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var stepperField: SwiftUI.StepperFieldDatePickerStyle {
    get { .init() }
  }
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.DatePickerStyle where Self == SwiftUI.FieldDatePickerStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var field: SwiftUI.FieldDatePickerStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DatePickerStyle where Self == SwiftUI.GraphicalDatePickerStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var graphical: SwiftUI.GraphicalDatePickerStyle {
    get { .init() }
  }
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct StepperFieldDatePickerStyle : SwiftUI.DatePickerStyle {
  public init()
  @available(macOS 13.0, *)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.StepperFieldDatePickerStyle.Configuration) -> some SwiftUICore.View
  
  @available(macOS 10.15, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI27StepperFieldDatePickerStyleV8makeBody13configurationQrAA0efG13ConfigurationV_tF", 0) __
  @available(macOS 10.15, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias _Body = SwiftUICore.EmptyView
}
@available(*, unavailable)
extension SwiftUI.StepperFieldDatePickerStyle : Swift.Sendable {
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct FieldDatePickerStyle : SwiftUI.DatePickerStyle {
  public init()
  @available(macOS 13.0, *)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.FieldDatePickerStyle.Configuration) -> some SwiftUICore.View
  
  @available(macOS 10.15, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI20FieldDatePickerStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
  @available(macOS 10.15, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias _Body = SwiftUICore.EmptyView
}
@available(*, unavailable)
extension SwiftUI.FieldDatePickerStyle : Swift.Sendable {
}
@available(iOS 14.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct GraphicalDatePickerStyle : SwiftUI.DatePickerStyle {
  public init()
  @available(iOS 16.0, macOS 13.0, *)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.GraphicalDatePickerStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 14.0, macOS 10.15, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24GraphicalDatePickerStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
  @available(iOS 14.0, macOS 10.15, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias _Body = SwiftUICore.EmptyView
}
@available(*, unavailable)
extension SwiftUI.GraphicalDatePickerStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableStyle where Self == SwiftUI.AutomaticTableStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.AutomaticTableStyle {
    get { .init() }
  }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct AutomaticTableStyle : SwiftUI.TableStyle {
  @usableFromInline
  internal init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.AutomaticTableStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI19AutomaticTableStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.AutomaticTableStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct AccessoryLinearCapacityGaugeStyle : SwiftUI.GaugeStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.AccessoryLinearCapacityGaugeStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, watchOS 9.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI33AccessoryLinearCapacityGaugeStyleV8makeBody13configurationQrAA0fG13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.AccessoryLinearCapacityGaugeStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.GaugeStyle where Self == SwiftUI.AccessoryLinearCapacityGaugeStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var accessoryLinearCapacity: SwiftUI.AccessoryLinearCapacityGaugeStyle {
    get {
        .init()
    }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ToggleStyle where Self == SwiftUI.DefaultToggleStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.DefaultToggleStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct DefaultToggleStyle : SwiftUI.ToggleStyle {
  public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.DefaultToggleStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI18DefaultToggleStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.DefaultToggleStyle : Swift.Sendable {
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func digitalCrownAccessory<Content>(@SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  nonisolated public func digitalCrownAccessory(_ visibility: SwiftUICore.Visibility) -> some SwiftUICore.View
  
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use Color(uiColor:) when converting a UIColor, or create a standard Color directly")
@available(macOS, unavailable)
@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use Color(uiColor:) when converting a UIColor, or create a standard Color directly")
@available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use Color(uiColor:) when converting a UIColor, or create a standard Color directly")
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use Color(uiColor:) when converting a UIColor, or create a standard Color directly")
extension SwiftUICore.Color {
  @_disfavoredOverload public init(_ color: UIKit.UIColor)
}
@available(iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@available(macOS, unavailable)
extension SwiftUICore.Color {
  public init(uiColor: UIKit.UIColor)
}
extension UIKit.UIColor {
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, *)
  @available(macOS, unavailable)
  convenience public init(_ color: SwiftUICore.Color)
}
extension SwiftUICore.ColorScheme {
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init?(_ uiUserInterfaceStyle: UIKit.UIUserInterfaceStyle)
}
extension UIKit.UIUserInterfaceStyle {
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ colorScheme: SwiftUICore.ColorScheme?)
}
extension SwiftUICore.ColorSchemeContrast {
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init?(_ uiAccessibilityContrast: UIKit.UIAccessibilityContrast)
}
extension UIKit.UIAccessibilityContrast {
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ colorSchemeContrast: SwiftUICore.ColorSchemeContrast?)
}
extension SwiftUICore.ContentSizeCategory {
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init?(_ uiSizeCategory: UIKit.UIContentSizeCategory)
}
@available(iOS 15.0, tvOS 15.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.DynamicTypeSize {
  public init?(_ uiSizeCategory: UIKit.UIContentSizeCategory)
}
extension UIKit.UIContentSizeCategory {
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ sizeCategory: SwiftUICore.ContentSizeCategory?)
  @available(iOS 15.0, tvOS 15.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ dynamicTypeSize: SwiftUICore.DynamicTypeSize?)
}
extension SwiftUICore.LayoutDirection {
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init?(_ uiLayoutDirection: UIKit.UITraitEnvironmentLayoutDirection)
}
extension UIKit.UITraitEnvironmentLayoutDirection {
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ layoutDirection: SwiftUICore.LayoutDirection)
}
extension SwiftUICore.LegibilityWeight {
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init?(_ uiLegibilityWeight: UIKit.UILegibilityWeight)
}
extension UIKit.UILegibilityWeight {
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ legibilityWeight: SwiftUICore.LegibilityWeight?)
}
extension SwiftUICore.UserInterfaceSizeClass {
  @available(iOS 14.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init?(_ uiUserInterfaceSizeClass: UIKit.UIUserInterfaceSizeClass)
}
extension UIKit.UIUserInterfaceSizeClass {
  @available(iOS 14.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ sizeClass: SwiftUICore.UserInterfaceSizeClass?)
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.ListStyle where Self == SwiftUI.CarouselListStyle {
  @_alwaysEmitIntoClient public static var carousel: SwiftUI.CarouselListStyle {
    get { .init() }
  }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct CarouselListStyle : SwiftUI.ListStyle {
  public init()
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.CarouselListStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.CarouselListStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.CarouselListStyle : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@freestanding(declaration) public macro Preview(_ name: Swift.String? = nil, traits: DeveloperToolsSupport.PreviewTrait<DeveloperToolsSupport.Preview.ViewTraits>, _ additionalTraits: DeveloperToolsSupport.PreviewTrait<DeveloperToolsSupport.Preview.ViewTraits>..., @SwiftUICore.ViewBuilder body: @escaping @_Concurrency.MainActor () -> any SwiftUICore.View) = #externalMacro(module: "PreviewsMacros", type: "SwiftUIView")
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@freestanding(declaration) public macro Preview(_ name: Swift.String? = nil, @SwiftUICore.ViewBuilder body: @escaping @_Concurrency.MainActor () -> any SwiftUICore.View) = #externalMacro(module: "PreviewsMacros", type: "SwiftUIView")
extension DeveloperToolsSupport.Preview {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_Concurrency.MainActor public init(_ name: Swift.String? = nil, traits: DeveloperToolsSupport.PreviewTrait<DeveloperToolsSupport.Preview.ViewTraits>..., body: @escaping @_Concurrency.MainActor () -> any SwiftUICore.View)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
@attached(peer) public macro Previewable() = #externalMacro(
    module: "PreviewsMacros",
    type: "Previewable"
)
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct _Previewable {
  public init()
}
@available(*, unavailable)
extension SwiftUI._Previewable : Swift.Sendable {
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.ListStyle where Self == SwiftUI.BorderedListStyle {
  @_alwaysEmitIntoClient public static var bordered: SwiftUI.BorderedListStyle {
    get {
        .init(alternatesRowBackgrounds: false)
    }
  }
  @available(macOS, introduced: 12.0, deprecated: 100000.0, message: "Use the `.bordered` style with the `.alternatingRowBackgrounds()` view modifier")
  @_alwaysEmitIntoClient public static func bordered(alternatesRowBackgrounds: Swift.Bool) -> SwiftUI.BorderedListStyle {
        .init(alternatesRowBackgrounds: alternatesRowBackgrounds)
    }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct BorderedListStyle : SwiftUI.ListStyle {
  public init()
  @available(macOS, introduced: 12.0, deprecated: 100000.0, message: "Use the `.bordered` style with the `.alternatingRowBackgrounds()` view modifier")
  public init(alternatesRowBackgrounds: Swift.Bool)
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.BorderedListStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.BorderedListStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.BorderedListStyle : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _ContentShapeModifier<ContentShape> : SwiftUICore.ViewModifier where ContentShape : SwiftUICore.Shape {
  public var shape: ContentShape
  public var eoFill: Swift.Bool
  @inlinable public init(shape: ContentShape, eoFill: Swift.Bool = false) {
        self.shape = shape
        self.eoFill = eoFill
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._ContentShapeModifier<ContentShape>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._ContentShapeModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func contentShape<S>(_ shape: S, eoFill: Swift.Bool = false) -> some SwiftUICore.View where S : SwiftUICore.Shape {
        return modifier(_ContentShapeModifier(shape: shape, eoFill: eoFill))
    }
  
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol TableRowContent<TableRowValue> {
  associatedtype TableRowValue : Swift.Identifiable = Self.TableRowBody.TableRowValue
  associatedtype TableRowBody : SwiftUI.TableRowContent
  @_Concurrency.MainActor @preconcurrency var tableRowBody: Self.TableRowBody { get }
  nonisolated static func _makeRows(content: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  nonisolated static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  @available(iOS 17.0, macOS 14.0, *)
  nonisolated static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _TableRowInputs {
}
@available(*, unavailable)
extension SwiftUI._TableRowInputs : Swift.Sendable {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _TableRowOutputs {
}
@available(*, unavailable)
extension SwiftUI._TableRowOutputs : Swift.Sendable {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowContent {
  nonisolated public static func _makeRows(content: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  nonisolated public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Never {
  public typealias TableRowValue = Swift.Never
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Never : SwiftUI.TableRowContent {
  public typealias TableRowBody = Swift.Never
  @_Concurrency.MainActor @preconcurrency public var tableRowBody: Swift.Never {
    get
  }
  nonisolated public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_functionBuilder public struct TableRowBuilder<Value> where Value : Swift.Identifiable {
  @_alwaysEmitIntoClient public static func buildExpression<Content>(_ content: Content) -> Content where Value == Content.TableRowValue, Content : SwiftUI.TableRowContent {
       content
    }
  @available(*, unavailable, message: "this expression does not conform to 'TableRowContent'")
  @_disfavoredOverload @_alwaysEmitIntoClient public static func buildExpression(_ invalid: Any) -> some SwiftUI.TableRowContent<Value> {
        TupleTableRowContent((), ofType: Value.self)
    }
  
  @_alwaysEmitIntoClient public static func buildBlock<C>(_ content: C) -> C where Value == C.TableRowValue, C : SwiftUI.TableRowContent {
        content
    }
}
@available(*, unavailable)
extension SwiftUI.TableRowBuilder : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum _IdentifiedViewTree {
  case empty
  case proxy(SwiftUICore._IdentifiedViewProxy)
  case array([SwiftUI._IdentifiedViewTree])
  public func forEach(_ body: (SwiftUICore._IdentifiedViewProxy) -> Swift.Void)
}
@available(*, unavailable)
extension SwiftUI._IdentifiedViewTree : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _IdentifiedViewsKey {
  public typealias Value = SwiftUI._IdentifiedViewTree
  public static let defaultValue: SwiftUI._IdentifiedViewTree
  public static func reduce(value: inout SwiftUI._IdentifiedViewsKey.Value, nextValue: () -> SwiftUI._IdentifiedViewsKey.Value)
}
@available(*, unavailable)
extension SwiftUI._IdentifiedViewsKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _IdentifiedModifier<Identifier> : SwiftUICore.ViewModifier, Swift.Equatable where Identifier : Swift.Hashable {
  public var identifier: Identifier
  @inlinable public init(identifier: Identifier) {
        self.identifier = identifier
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._IdentifiedModifier<Identifier>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  public static func == (a: SwiftUI._IdentifiedModifier<Identifier>, b: SwiftUI._IdentifiedModifier<Identifier>) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._IdentifiedModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable @_Concurrency.MainActor @preconcurrency public func _identified<I>(by identifier: I) -> some SwiftUICore.View where I : Swift.Hashable {
        return modifier(_IdentifiedModifier(identifier: identifier))
    }
  
}
@available(iOS 18.4, macOS 15.4, tvOS 18.4, watchOS 11.4, visionOS 2.4, *)
extension SwiftUICore.View {
  nonisolated public func contentToolbar<Content>(for placement: SwiftUI.ContentToolbarPlacement, @SwiftUICore.ViewBuilder content: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  nonisolated public func contentToolbar<Content>(for placement: SwiftUI.ContentToolbarPlacement, @SwiftUI.ToolbarContentBuilder content: () -> Content) -> some SwiftUICore.View where Content : SwiftUI.ToolbarContent
  
}
@available(iOS 18.4, macOS 15.4, tvOS 18.4, watchOS 11.4, visionOS 2.4, *)
public struct ContentToolbarPlacement : Swift.Hashable, Swift.Sendable {
  @available(iOS 18.4, visionOS 2.4, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let tabViewSidebar: SwiftUI.ContentToolbarPlacement
  public static func == (a: SwiftUI.ContentToolbarPlacement, b: SwiftUI.ContentToolbarPlacement) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore.View {
  @available(iOS 13.0, tvOS 13.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @inlinable nonisolated public func textContentType(_ textContentType: UIKit.UITextContentType?) -> some SwiftUICore.View {
        environment(\.textContentType, textContentType?.rawValue)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.EnvironmentValues {
  @usableFromInline
  internal var textContentType: Swift.String? {
    get
    set
  }
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, tvOS 16.0, *)
public struct ToolbarTitleMenu<Content> : SwiftUI.ToolbarContent, SwiftUI.CustomizableToolbarContent where Content : SwiftUICore.View {
  public init() where Content == SwiftUICore.EmptyView
  public init(@SwiftUICore.ViewBuilder content: () -> Content)
  nonisolated public static func _makeToolbar(content: SwiftUICore._GraphValue<SwiftUI.ToolbarTitleMenu<Content>>, inputs: SwiftUI._ToolbarInputs) -> SwiftUI._ToolbarOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.ToolbarTitleMenu : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func toolbarTitleMenu<C>(@SwiftUICore.ViewBuilder content: () -> C) -> some SwiftUICore.View where C : SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct ScrollViewReader<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  public var content: (SwiftUI.ScrollViewProxy) -> Content
  @inlinable public init(@SwiftUICore.ViewBuilder content: @escaping (SwiftUI.ScrollViewProxy) -> Content) {
        self.content = content
    }
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI16ScrollViewReaderV4bodyQrvp", 0) __<Content>
}
@available(*, unavailable)
extension SwiftUI.ScrollViewReader : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct ScrollViewProxy {
  public func scrollTo<ID>(_ id: ID, anchor: SwiftUICore.UnitPoint? = nil) where ID : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.ScrollViewProxy : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityRepresentation<V>(@SwiftUICore.ViewBuilder representation: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
  nonisolated public func accessibilityChildren<V>(@SwiftUICore.ViewBuilder children: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
}
@available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
@available(macOS, unavailable)
extension SwiftUI.PickerStyle where Self == SwiftUI.NavigationLinkPickerStyle {
  @_alwaysEmitIntoClient public static var navigationLink: SwiftUI.NavigationLinkPickerStyle {
    get { .init() }
  }
}
@available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
@available(macOS, unavailable)
public struct NavigationLinkPickerStyle : SwiftUI.PickerStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.NavigationLinkPickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.NavigationLinkPickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.NavigationLinkPickerStyle : Swift.Sendable {
}
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, introduced: 6.0, deprecated: 11.0, message: "Please switch to a NavigationStack .navigationDestination")
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func _navigationDestination<Content>(isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func _navigationDestination<Item, Content>(item: SwiftUICore.Binding<Item?>, @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUICore.View where Item : Swift.Identifiable, Content : SwiftUICore.View
  
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func _navigationDestination(isPresented: SwiftUICore.Binding<Swift.Bool>, storyboardName: Swift.String) -> some SwiftUICore.View
  
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func _navigationDestination<Item>(item: SwiftUICore.Binding<Item?>, storyboardName: Swift.String) -> some SwiftUICore.View where Item : Swift.Identifiable
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct _AccessibilityQuickActionStyle {
}
@available(*, unavailable)
extension SwiftUI._AccessibilityQuickActionStyle : Swift.Sendable {
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public protocol AccessibilityQuickActionStyle {
  static var _style: SwiftUI._AccessibilityQuickActionStyle { get }
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct AccessibilityQuickActionPromptStyle : SwiftUI.AccessibilityQuickActionStyle {
  public static var _style: SwiftUI._AccessibilityQuickActionStyle {
    get
  }
  @usableFromInline
  internal init()
}
@available(*, unavailable)
extension SwiftUI.AccessibilityQuickActionPromptStyle : Swift.Sendable {
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.AccessibilityQuickActionStyle where Self == SwiftUI.AccessibilityQuickActionPromptStyle {
  @_alwaysEmitIntoClient public static var prompt: SwiftUI.AccessibilityQuickActionPromptStyle {
    get { .init() }
  }
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct AccessibilityQuickActionOutlineStyle : SwiftUI.AccessibilityQuickActionStyle {
  public static var _style: SwiftUI._AccessibilityQuickActionStyle {
    get
  }
  @usableFromInline
  internal init()
}
@available(*, unavailable)
extension SwiftUI.AccessibilityQuickActionOutlineStyle : Swift.Sendable {
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.AccessibilityQuickActionStyle where Self == SwiftUI.AccessibilityQuickActionOutlineStyle {
  @_alwaysEmitIntoClient public static var outline: SwiftUI.AccessibilityQuickActionOutlineStyle {
    get { .init() }
  }
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func accessibilityQuickAction<Style, Content>(style: Style, @SwiftUICore.ViewBuilder content: () -> Content) -> some SwiftUICore.View where Style : SwiftUI.AccessibilityQuickActionStyle, Content : SwiftUICore.View
  
  nonisolated public func accessibilityQuickAction<Style, Content>(style: Style, isActive: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: () -> Content) -> some SwiftUICore.View where Style : SwiftUI.AccessibilityQuickActionStyle, Content : SwiftUICore.View
  
}
extension SwiftUICore.EnvironmentValues {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public var accessibilityQuickActionsEnabled: Swift.Bool {
    get
  }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public var _accessibilityQuickActionsEnabled: Swift.Bool {
    get
    set
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func onKeyPress(_ key: SwiftUI.KeyEquivalent, action: @escaping () -> SwiftUI.KeyPress.Result) -> some SwiftUICore.View
  
  nonisolated public func onKeyPress(_ key: SwiftUI.KeyEquivalent, phases: SwiftUI.KeyPress.Phases, action: @escaping (SwiftUI.KeyPress) -> SwiftUI.KeyPress.Result) -> some SwiftUICore.View
  
  nonisolated public func onKeyPress(keys: Swift.Set<SwiftUI.KeyEquivalent>, phases: SwiftUI.KeyPress.Phases = [.down, .repeat], action: @escaping (SwiftUI.KeyPress) -> SwiftUI.KeyPress.Result) -> some SwiftUICore.View
  
  nonisolated public func onKeyPress(characters: Foundation.CharacterSet, phases: SwiftUI.KeyPress.Phases = [.down, .repeat], action: @escaping (SwiftUI.KeyPress) -> SwiftUI.KeyPress.Result) -> some SwiftUICore.View
  
  nonisolated public func onKeyPress(phases: SwiftUI.KeyPress.Phases = [.down, .repeat], action: @escaping (SwiftUI.KeyPress) -> SwiftUI.KeyPress.Result) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@available(watchOS, unavailable)
public struct KeyPress : Swift.Sendable {
  public let phase: SwiftUI.KeyPress.Phases
  public let key: SwiftUI.KeyEquivalent
  public let characters: Swift.String
  public let modifiers: SwiftUICore.EventModifiers
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.KeyPress : Swift.CustomDebugStringConvertible {
  public struct Phases : Swift.OptionSet, Swift.Sendable, Swift.CustomDebugStringConvertible {
    public static let down: SwiftUI.KeyPress.Phases
    public static let `repeat`: SwiftUI.KeyPress.Phases
    public static let up: SwiftUI.KeyPress.Phases
    public static let all: SwiftUI.KeyPress.Phases
    public var debugDescription: Swift.String {
      get
    }
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    @available(iOS 17.0, tvOS 17.0, macOS 14.0, *)
    @available(watchOS, unavailable)
    public typealias ArrayLiteralElement = SwiftUI.KeyPress.Phases
    @available(iOS 17.0, tvOS 17.0, macOS 14.0, *)
    @available(watchOS, unavailable)
    public typealias Element = SwiftUI.KeyPress.Phases
    @available(iOS 17.0, tvOS 17.0, macOS 14.0, *)
    @available(watchOS, unavailable)
    public typealias RawValue = Swift.Int
  }
  public enum Result : Swift.Sendable {
    case handled
    case ignored
    public static func == (a: SwiftUI.KeyPress.Result, b: SwiftUI.KeyPress.Result) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var debugDescription: Swift.String {
    get
  }
}
@available(iOS 16.0, macOS 13.0, watchOS 7.0, *)
@available(tvOS, unavailable)
public struct Gauge<Label, CurrentValueLabel, BoundsLabel, MarkedValueLabels> : SwiftUICore.View where Label : SwiftUICore.View, CurrentValueLabel : SwiftUICore.View, BoundsLabel : SwiftUICore.View, MarkedValueLabels : SwiftUICore.View {
  public init<V>(value: V, in bounds: Swift.ClosedRange<V> = 0...1, @SwiftUICore.ViewBuilder label: () -> Label) where CurrentValueLabel == SwiftUICore.EmptyView, BoundsLabel == SwiftUICore.EmptyView, MarkedValueLabels == SwiftUICore.EmptyView, V : Swift.BinaryFloatingPoint
  public init<V>(value: V, in bounds: Swift.ClosedRange<V> = 0...1, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder currentValueLabel: () -> CurrentValueLabel) where BoundsLabel == SwiftUICore.EmptyView, MarkedValueLabels == SwiftUICore.EmptyView, V : Swift.BinaryFloatingPoint
  public init<V>(value: V, in bounds: Swift.ClosedRange<V> = 0...1, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder currentValueLabel: () -> CurrentValueLabel, @SwiftUICore.ViewBuilder minimumValueLabel: () -> BoundsLabel, @SwiftUICore.ViewBuilder maximumValueLabel: () -> BoundsLabel) where MarkedValueLabels == SwiftUICore.EmptyView, V : Swift.BinaryFloatingPoint
  public init<V>(value: V, in bounds: Swift.ClosedRange<V> = 0...1, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder currentValueLabel: () -> CurrentValueLabel, @SwiftUICore.ViewBuilder markedValueLabels: () -> MarkedValueLabels) where BoundsLabel == SwiftUICore.EmptyView, V : Swift.BinaryFloatingPoint
  public init<V>(value: V, in bounds: Swift.ClosedRange<V> = 0...1, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder currentValueLabel: () -> CurrentValueLabel, @SwiftUICore.ViewBuilder minimumValueLabel: () -> BoundsLabel, @SwiftUICore.ViewBuilder maximumValueLabel: () -> BoundsLabel, @SwiftUICore.ViewBuilder markedValueLabels: () -> MarkedValueLabels) where V : Swift.BinaryFloatingPoint
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, watchOS 7.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI5GaugeV4bodyQrvp", 0) __<Label, CurrentValueLabel, BoundsLabel, MarkedValueLabels>
}
@available(*, unavailable)
extension SwiftUI.Gauge : Swift.Sendable {
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.WindowToolbarStyle where Self == SwiftUI.UnifiedWindowToolbarStyle {
  @_alwaysEmitIntoClient public static var unified: SwiftUI.UnifiedWindowToolbarStyle {
    get { .init() }
  }
  @_alwaysEmitIntoClient public static func unified(showsTitle: Swift.Bool) -> SwiftUI.UnifiedWindowToolbarStyle {
        .init(showsTitle: showsTitle)
    }
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct UnifiedWindowToolbarStyle : SwiftUI.WindowToolbarStyle {
  public typealias _Body = Swift.Never
  public init()
  public init(showsTitle: Swift.Bool)
}
@available(*, unavailable)
extension SwiftUI.UnifiedWindowToolbarStyle : Swift.Sendable {
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.BackgroundTask {
  public static var snapshot: SwiftUI.BackgroundTask<SwiftUI.SnapshotData, SwiftUI.SnapshotResponse> {
    get
  }
  public static var intentDidRun: SwiftUI.BackgroundTask<Swift.Void, Swift.Void> {
    get
  }
  public static var relevantShortcut: SwiftUI.BackgroundTask<Swift.Void, Swift.Void> {
    get
  }
  public static var watchConnectivity: SwiftUI.BackgroundTask<Swift.Void, Swift.Void> {
    get
  }
  public static var bluetoothAlert: SwiftUI.BackgroundTask<Swift.Void, Swift.Void> {
    get
  }
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct SnapshotResponse : Swift.Sendable {
  public init(restoredDefaultState: Swift.Bool = false, estimatedSnapshotExpiration: Foundation.Date? = nil, identifier: Swift.String? = nil)
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct SnapshotData : Swift.Sendable {
  public let reason: SwiftUI.SnapshotData.SnapshotReason
  public let identifier: Swift.String?
  @available(watchOS 9.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  public enum SnapshotReason : Swift.Sendable {
    case appScheduled
    case returnToDefaultState
    case complicationUpdate
    case prelaunch
    case appBackgrounded
    public static func == (a: SwiftUI.SnapshotData.SnapshotReason, b: SwiftUI.SnapshotData.SnapshotReason) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _HiddenModifier : SwiftUICore.ViewModifier {
  @inlinable public init() {}
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._HiddenModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func hidden() -> some SwiftUICore.View {
        return modifier(_HiddenModifier())
    }
  
}
@available(iOS 13.0, macOS 10.15, watchOS 10.0, *)
@available(tvOS, unavailable)
public struct DatePicker<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  public typealias Components = SwiftUI.DatePickerComponents
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, watchOS 10.0, macOS 10.15, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI10DatePickerV4bodyQrvp", 0) __<Label>
}
@available(*, unavailable)
extension SwiftUI.DatePicker : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, watchOS 10.0, *)
@available(tvOS, unavailable)
extension SwiftUI.DatePicker {
  nonisolated public init(selection: SwiftUICore.Binding<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date], @SwiftUICore.ViewBuilder label: () -> Label)
  nonisolated public init(selection: SwiftUICore.Binding<Foundation.Date>, in range: Swift.ClosedRange<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date], @SwiftUICore.ViewBuilder label: () -> Label)
  nonisolated public init(selection: SwiftUICore.Binding<Foundation.Date>, in range: Swift.PartialRangeFrom<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date], @SwiftUICore.ViewBuilder label: () -> Label)
  nonisolated public init(selection: SwiftUICore.Binding<Foundation.Date>, in range: Swift.PartialRangeThrough<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date], @SwiftUICore.ViewBuilder label: () -> Label)
}
@available(iOS 13.0, macOS 10.15, watchOS 10.0, *)
@available(tvOS, unavailable)
extension SwiftUI.DatePicker where Label == SwiftUICore.Text {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date])
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<Foundation.Date>, in range: Swift.ClosedRange<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date])
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<Foundation.Date>, in range: Swift.PartialRangeFrom<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date])
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<Foundation.Date>, in range: Swift.PartialRangeThrough<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date])
  @_disfavoredOverload nonisolated public init<S>(_ title: S, selection: SwiftUICore.Binding<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date]) where S : Swift.StringProtocol
  @_disfavoredOverload nonisolated public init<S>(_ title: S, selection: SwiftUICore.Binding<Foundation.Date>, in range: Swift.ClosedRange<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date]) where S : Swift.StringProtocol
  @_disfavoredOverload nonisolated public init<S>(_ title: S, selection: SwiftUICore.Binding<Foundation.Date>, in range: Swift.PartialRangeFrom<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date]) where S : Swift.StringProtocol
  @_disfavoredOverload nonisolated public init<S>(_ title: S, selection: SwiftUICore.Binding<Foundation.Date>, in range: Swift.PartialRangeThrough<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date]) where S : Swift.StringProtocol
}
@available(iOS 13.0, macOS 10.15, watchOS 10.0, *)
@available(tvOS, unavailable)
public struct DatePickerComponents : Swift.OptionSet, Swift.Sendable {
  public let rawValue: Swift.UInt
  public init(rawValue: Swift.UInt)
  public static let hourAndMinute: SwiftUI.DatePickerComponents
  public static let date: SwiftUI.DatePickerComponents
  @available(watchOS 10.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(visionOS, unavailable)
  public static let hourMinuteAndSecond: SwiftUI.DatePickerComponents
  @available(iOS 13.0, watchOS 10.0, macOS 10.15, *)
  @available(tvOS, unavailable)
  public typealias ArrayLiteralElement = SwiftUI.DatePickerComponents
  @available(iOS 13.0, watchOS 10.0, macOS 10.15, *)
  @available(tvOS, unavailable)
  public typealias Element = SwiftUI.DatePickerComponents
  @available(iOS 13.0, watchOS 10.0, macOS 10.15, *)
  @available(tvOS, unavailable)
  public typealias RawValue = Swift.UInt
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@usableFromInline
internal struct TouchBarItemPresenceTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.TouchBarItemPresence? {
    get { nil }
  }
  @available(macOS 10.15, *)
  @usableFromInline
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  internal typealias Value = SwiftUI.TouchBarItemPresence?
}
@available(*, unavailable)
extension SwiftUI.TouchBarItemPresenceTraitKey : Swift.Sendable {
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @inlinable nonisolated public func touchBarItemPresence(_ presence: SwiftUI.TouchBarItemPresence) -> some SwiftUICore.View {
        return _trait(TouchBarItemPresenceTraitKey.self, presence)
    }
  
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@usableFromInline
internal struct TouchBarItemPrincipalTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @available(macOS 10.15, *)
  @usableFromInline
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  internal typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.TouchBarItemPrincipalTraitKey : Swift.Sendable {
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @inlinable nonisolated public func touchBarItemPrincipal(_ principal: Swift.Bool = true) -> some SwiftUICore.View {
        return _trait(TouchBarItemPrincipalTraitKey.self, principal)
    }
  
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@usableFromInline
internal struct TouchBarCustomizationLabelTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUICore.Text {
    get { Text("") }
  }
  @available(macOS 10.15, *)
  @usableFromInline
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  internal typealias Value = SwiftUICore.Text
}
@available(*, unavailable)
extension SwiftUI.TouchBarCustomizationLabelTraitKey : Swift.Sendable {
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func touchBarCustomizationLabel(_ label: SwiftUICore.Text) -> some SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityChartDescriptor<R>(_ representable: R) -> some SwiftUICore.View where R : SwiftUICore.AXChartDescriptorRepresentable
  
}
@available(iOS 17.1, macOS 14.1, tvOS 17.1, watchOS 10.1, *)
public struct SearchPresentationToolbarBehavior {
  public static var automatic: SwiftUI.SearchPresentationToolbarBehavior {
    get
  }
  public static var avoidHidingContent: SwiftUI.SearchPresentationToolbarBehavior {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.SearchPresentationToolbarBehavior : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 17.1, macOS 14.1, tvOS 17.1, watchOS 10.1, *)
  nonisolated public func searchPresentationToolbarBehavior(_ behavior: SwiftUI.SearchPresentationToolbarBehavior) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 17.0, visionOS 1.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func searchDictationBehavior(_ dictationBehavior: SwiftUI.TextInputDictationBehavior) -> some SwiftUICore.View
  
}
@available(iOS 14.0, macCatalyst 13.4, macOS 10.15.4, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DatePickerStyle where Self == SwiftUI.CompactDatePickerStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var compact: SwiftUI.CompactDatePickerStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macCatalyst 13.4, macOS 10.15.4, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct CompactDatePickerStyle : SwiftUI.DatePickerStyle {
  public init()
  @available(iOS 16.0, macOS 13.0, *)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.CompactDatePickerStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 14.0, macOS 10.15.4, macCatalyst 13.4, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI22CompactDatePickerStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
  @available(iOS 14.0, macOS 10.15.4, macCatalyst 13.4, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias _Body = SwiftUICore.EmptyView
}
@available(*, unavailable)
extension SwiftUI.CompactDatePickerStyle : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _OverlayLayout : SwiftUICore._VariadicView.UnaryViewRoot, SwiftUICore.Animatable {
  public init(contentIndex: Swift.Int? = nil)
  nonisolated public static func _makeView(root: SwiftUICore._GraphValue<SwiftUI._OverlayLayout>, inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._OverlayLayout : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI._OverlayLayout : SwiftUICore.Layout {
  public func placeSubviews(in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUI._OverlayLayout.Subviews, cache: inout Swift.Void)
  public static var layoutProperties: SwiftUICore.LayoutProperties {
    get
  }
  public func sizeThatFits(proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUI._OverlayLayout.Subviews, cache: inout Swift.Void) -> CoreFoundation.CGSize
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Cache = Swift.Void
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityCustomContent(_ key: SwiftUICore.AccessibilityCustomContentKey, _ value: SwiftUICore.Text?, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityCustomContent(_ key: SwiftUICore.AccessibilityCustomContentKey, _ valueKey: SwiftUICore.LocalizedStringKey, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload nonisolated public func accessibilityCustomContent<V>(_ key: SwiftUICore.AccessibilityCustomContentKey, _ value: V, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where V : Swift.StringProtocol
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityCustomContent(_ label: SwiftUICore.Text, _ value: SwiftUICore.Text, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityCustomContent(_ labelKey: SwiftUICore.LocalizedStringKey, _ value: SwiftUICore.Text, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityCustomContent(_ labelKey: SwiftUICore.LocalizedStringKey, _ valueKey: SwiftUICore.LocalizedStringKey, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload nonisolated public func accessibilityCustomContent<V>(_ labelKey: SwiftUICore.LocalizedStringKey, _ value: V, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where V : Swift.StringProtocol
  @available(*, unavailable, message: "Using non-localized strings for labels is not directly supported. Instead, wrap both the label and the value in a Text struct.")
  @_disfavoredOverload nonisolated public func accessibilityCustomContent<L, V>(_ label: L, _ value: V, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where L : Swift.StringProtocol, V : Swift.StringProtocol
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityCustomContent(_ key: SwiftUICore.AccessibilityCustomContentKey, _ value: SwiftUICore.Text?, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Content, Modifier>
  nonisolated public func accessibilityCustomContent(_ key: SwiftUICore.AccessibilityCustomContentKey, _ valueKey: SwiftUICore.LocalizedStringKey, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_disfavoredOverload nonisolated public func accessibilityCustomContent<V>(_ key: SwiftUICore.AccessibilityCustomContentKey, _ value: V, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Content, Modifier> where V : Swift.StringProtocol
  nonisolated public func accessibilityCustomContent(_ label: SwiftUICore.Text, _ value: SwiftUICore.Text, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Content, Modifier>
  nonisolated public func accessibilityCustomContent(_ labelKey: SwiftUICore.LocalizedStringKey, _ value: SwiftUICore.Text, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Content, Modifier>
  nonisolated public func accessibilityCustomContent(_ labelKey: SwiftUICore.LocalizedStringKey, _ valueKey: SwiftUICore.LocalizedStringKey, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_disfavoredOverload nonisolated public func accessibilityCustomContent<V>(_ labelKey: SwiftUICore.LocalizedStringKey, _ value: V, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Content, Modifier> where V : Swift.StringProtocol
  @available(*, unavailable, message: "Using non-localized strings for labels is not directly supported. Instead, wrap both the label and the value in a Text struct.")
  @_disfavoredOverload nonisolated public func accessibilityCustomContent<L, V>(_ label: L, _ value: V, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Content, Modifier> where L : Swift.StringProtocol, V : Swift.StringProtocol
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct TextSelection : Swift.Equatable, Swift.Hashable {
  public enum Indices : Swift.Equatable, Swift.Hashable {
    case selection(Swift.Range<Swift.String.Index>)
    case multiSelection(Swift.RangeSet<Swift.String.Index>)
    public static func == (a: SwiftUI.TextSelection.Indices, b: SwiftUI.TextSelection.Indices) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var indices: SwiftUI.TextSelection.Indices
  public var affinity: SwiftUI.TextSelectionAffinity {
    get
  }
  public init(range: Swift.Range<Swift.String.Index>)
  public init(ranges: Swift.RangeSet<Swift.String.Index>)
  public init(insertionPoint: Swift.String.Index)
  public var isInsertion: Swift.Bool {
    get
  }
  public static func == (a: SwiftUI.TextSelection, b: SwiftUI.TextSelection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.TextSelection : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.TextSelection.Indices : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  nonisolated public func textSelectionAffinity(_ affinity: SwiftUI.TextSelectionAffinity) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public enum TextSelectionAffinity : Swift.Equatable, Swift.Hashable {
  case automatic
  case upstream
  case downstream
  public static func == (a: SwiftUI.TextSelectionAffinity, b: SwiftUI.TextSelectionAffinity) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.TextSelectionAffinity : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.EnvironmentValues {
  public var textSelectionAffinity: SwiftUI.TextSelectionAffinity {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var menuIndicatorVisibility: SwiftUICore.Visibility {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @inlinable nonisolated public func menuIndicator(_ visibility: SwiftUICore.Visibility) -> some SwiftUICore.View {
        environment(\.menuIndicatorVisibility, visibility)
    }
  
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@frozen public struct TupleTableColumnContent<RowValue, Sort, T> : SwiftUI.TableColumnContent where RowValue : Swift.Identifiable, Sort : Foundation.SortComparator {
  public typealias TableRowValue = RowValue
  public typealias TableColumnSortComparator = Sort
  public var value: T
  @inlinable internal init(_ value: T, valueType: RowValue.Type, sortType: Sort.Type) {
        self.value = value
    }
  nonisolated public static func _makeContent(content: SwiftUICore._GraphValue<SwiftUI.TupleTableColumnContent<RowValue, Sort, T>>, inputs: SwiftUI._TableColumnInputs) -> SwiftUI._TableColumnOutputs
  @available(iOS 17.4, macOS 14.4, visionOS 1.1, *)
  nonisolated public static func _tableColumnCount(inputs: SwiftUI._TableColumnInputs) -> Swift.Int?
  @available(iOS 16.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias TableColumnBody = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.TupleTableColumnContent : Swift.Sendable {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.Group : SwiftUI.TableColumnContent where Content : SwiftUI.TableColumnContent {
  public typealias TableRowValue = Content.TableRowValue
  public typealias TableColumnSortComparator = Content.TableColumnSortComparator
  public typealias TableColumnBody = Swift.Never
  @inlinable nonisolated public init<R, C>(@SwiftUI.TableColumnBuilder<R, C> content: () -> Content) where R == Content.TableRowValue, C == Content.TableColumnSortComparator {
        self.init(_content: content())
    }
  nonisolated public static func _makeContent(content: SwiftUICore._GraphValue<SwiftUICore.Group<Content>>, inputs: SwiftUI._TableColumnInputs) -> SwiftUI._TableColumnOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@propertyWrapper public struct FocusedValue<Value> : SwiftUICore.DynamicProperty {
  @usableFromInline
  @frozen internal enum Content {
    case keyPath(Swift.KeyPath<SwiftUI.FocusedValues, Value?>)
    case value(Value?)
  }
  @usableFromInline
  internal var content: SwiftUI.FocusedValue<Value>.Content
  public init(_ keyPath: Swift.KeyPath<SwiftUI.FocusedValues, Value?>)
  @inlinable public var wrappedValue: Value? {
    get {
        if case .value(let value) = content {
            return value
        } else {
            return nil
        }
    }
  }
  public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
}
@available(*, unavailable)
extension SwiftUI.FocusedValue : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.FocusedValue.Content : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@propertyWrapper public struct FocusedBinding<Value> : SwiftUICore.DynamicProperty {
  @usableFromInline
  @frozen internal enum Content {
    case keyPath(Swift.KeyPath<SwiftUI.FocusedValues, SwiftUICore.Binding<Value>?>)
    case value(SwiftUICore.Binding<Value>?)
  }
  @usableFromInline
  internal var content: SwiftUI.FocusedBinding<Value>.Content
  public init(_ keyPath: Swift.KeyPath<SwiftUI.FocusedValues, SwiftUICore.Binding<Value>?>)
  @inlinable public var wrappedValue: Value? {
    get {
            if case .value(let value) = content {
                return value?.wrappedValue
            } else {
                return nil
            }
        }
    nonmutating set {
            if case .value(let value) = content, let newValue = newValue {
                value?.wrappedValue = newValue
            }
        }
  }
  public var projectedValue: SwiftUICore.Binding<Value?> {
    get
  }
  public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
}
@available(*, unavailable)
extension SwiftUI.FocusedBinding : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.FocusedBinding.Content : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public func focusedValue<Value>(_ keyPath: Swift.WritableKeyPath<SwiftUI.FocusedValues, Value?>, _ value: Value) -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func focusedValue<Value>(_ keyPath: Swift.WritableKeyPath<SwiftUI.FocusedValues, Value?>, _ value: Value?) -> some SwiftUICore.View
  
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public func focusedSceneValue<T>(_ keyPath: Swift.WritableKeyPath<SwiftUI.FocusedValues, T?>, _ value: T) -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func focusedSceneValue<T>(_ keyPath: Swift.WritableKeyPath<SwiftUI.FocusedValues, T?>, _ value: T?) -> some SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol FocusedValueKey {
  associatedtype Value
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct FocusedValues {
  @usableFromInline
  internal init()
  public subscript<Key>(key: Key.Type) -> Key.Value? where Key : SwiftUI.FocusedValueKey {
    get
    set
  }
}
@available(*, unavailable)
extension SwiftUI.FocusedValues : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.FocusedValues : Swift.Equatable {
  public static func == (lhs: SwiftUI.FocusedValues, rhs: SwiftUI.FocusedValues) -> Swift.Bool
}
extension SwiftUICore.EnvironmentValues {
  @available(iOS 17.0, tvOS 17.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public subscript<K>(key: K.Type) -> K.Value where K : SwiftUI.UITraitBridgedEnvironmentKey {
    get
    set
  }
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.TabViewStyle where Self == SwiftUI.GroupedTabViewStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var grouped: SwiftUI.GroupedTabViewStyle {
    get { .init() }
  }
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct GroupedTabViewStyle : SwiftUI.TabViewStyle {
  public init()
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.GroupedTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.GroupedTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.GroupedTabViewStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol TableStyle {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.TableStyleConfiguration
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TableStyleConfiguration {
}
@available(*, unavailable)
extension SwiftUI.TableStyleConfiguration : Swift.Sendable {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func tableStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.TableStyle
  
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func modifierKeyAlternate<V>(_ modifiers: SwiftUICore.EventModifiers, @SwiftUICore.ViewBuilder _ alternate: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, watchOS 7.0, *)
@available(tvOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol GaugeStyle {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.GaugeStyleConfiguration
}
@available(iOS 16.0, macOS 13.0, watchOS 7.0, *)
@available(tvOS, unavailable)
public struct GaugeStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Label : SwiftUICore.View {
    @available(iOS 16.0, watchOS 7.0, macOS 13.0, *)
    @available(tvOS, unavailable)
    public typealias Body = Swift.Never
  }
  @_Concurrency.MainActor @preconcurrency public struct CurrentValueLabel : SwiftUICore.View {
    @available(iOS 16.0, watchOS 7.0, macOS 13.0, *)
    @available(tvOS, unavailable)
    public typealias Body = Swift.Never
  }
  @_Concurrency.MainActor @preconcurrency public struct MinimumValueLabel : SwiftUICore.View {
    @available(iOS 16.0, watchOS 7.0, macOS 13.0, *)
    @available(tvOS, unavailable)
    public typealias Body = Swift.Never
  }
  @_Concurrency.MainActor @preconcurrency public struct MaximumValueLabel : SwiftUICore.View {
    @available(iOS 16.0, watchOS 7.0, macOS 13.0, *)
    @available(tvOS, unavailable)
    public typealias Body = Swift.Never
  }
  @_Concurrency.MainActor @preconcurrency public struct MarkedValueLabel : SwiftUICore.View {
    @available(iOS 16.0, watchOS 7.0, macOS 13.0, *)
    @available(tvOS, unavailable)
    public typealias Body = Swift.Never
  }
  public var value: Swift.Double
  public var label: SwiftUI.GaugeStyleConfiguration.Label
  public var currentValueLabel: SwiftUI.GaugeStyleConfiguration.CurrentValueLabel?
  public var minimumValueLabel: SwiftUI.GaugeStyleConfiguration.MinimumValueLabel?
  public var maximumValueLabel: SwiftUI.GaugeStyleConfiguration.MaximumValueLabel?
}
@available(*, unavailable)
extension SwiftUI.GaugeStyleConfiguration : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.GaugeStyleConfiguration.MaximumValueLabel : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.GaugeStyleConfiguration.Label : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.GaugeStyleConfiguration.MinimumValueLabel : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.GaugeStyleConfiguration.CurrentValueLabel : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.GaugeStyleConfiguration.MarkedValueLabel : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, watchOS 7.0, *)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func gaugeStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.GaugeStyle
  
}
@available(iOS 13.0, macOS 10.15, watchOS 9.0, *)
@available(tvOS, unavailable)
public struct Stepper<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  @_alwaysEmitIntoClient public init(@SwiftUICore.ViewBuilder label: () -> Label, onIncrement: (() -> Swift.Void)?, onDecrement: (() -> Swift.Void)?, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) {
        self.init(
            onIncrement: onIncrement,
            onDecrement: onDecrement,
            onEditingChanged: onEditingChanged,
            label: label)
    }
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, watchOS 9.0, macOS 10.15, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI7StepperV4bodyQrvp", 0) __<Label>
}
@available(*, unavailable)
extension SwiftUI.Stepper : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.Stepper {
  @available(watchOS 9.0, *)
  @available(tvOS, unavailable)
  @_alwaysEmitIntoClient nonisolated public init<V>(value: SwiftUICore.Binding<V>, step: V.Stride = 1, @SwiftUICore.ViewBuilder label: () -> Label, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.Strideable {
        self.init(
            value: value,
            step: step,
            onEditingChanged: onEditingChanged,
            label: label)
    }
  @available(watchOS 9.0, *)
  @available(tvOS, unavailable)
  @_alwaysEmitIntoClient nonisolated public init<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, @SwiftUICore.ViewBuilder label: () -> Label, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.Strideable {
        self.init(
            value: value,
            in: bounds,
            step: step,
            onEditingChanged: onEditingChanged,
            label: label)
    }
}
@available(iOS 13.0, macOS 10.15, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.Stepper where Label == SwiftUICore.Text {
  @available(watchOS 9.0, *)
  @available(tvOS, unavailable)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, onIncrement: (() -> Swift.Void)?, onDecrement: (() -> Swift.Void)?, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in })
  @available(watchOS 9.0, *)
  @available(tvOS, unavailable)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, onIncrement: (() -> Swift.Void)?, onDecrement: (() -> Swift.Void)?, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where S : Swift.StringProtocol
  @available(watchOS 9.0, *)
  @available(tvOS, unavailable)
  nonisolated public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, value: SwiftUICore.Binding<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.Strideable
  @available(watchOS 9.0, *)
  @available(tvOS, unavailable)
  @_disfavoredOverload nonisolated public init<S, V>(_ title: S, value: SwiftUICore.Binding<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where S : Swift.StringProtocol, V : Swift.Strideable
  @available(watchOS 9.0, *)
  @available(tvOS, unavailable)
  nonisolated public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.Strideable
  @available(watchOS 9.0, *)
  @available(tvOS, unavailable)
  @_disfavoredOverload nonisolated public init<S, V>(_ title: S, value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where S : Swift.StringProtocol, V : Swift.Strideable
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.Stepper {
  nonisolated public init<F>(value: SwiftUICore.Binding<F.FormatInput>, step: F.FormatInput.Stride = 1, format: F, @SwiftUICore.ViewBuilder label: () -> Label, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where F : Foundation.ParseableFormatStyle, F.FormatInput : Swift.BinaryFloatingPoint, F.FormatOutput == Swift.String
  nonisolated public init<F>(value: SwiftUICore.Binding<F.FormatInput>, in bounds: Swift.ClosedRange<F.FormatInput>, step: F.FormatInput.Stride = 1, format: F, @SwiftUICore.ViewBuilder label: () -> Label, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where F : Foundation.ParseableFormatStyle, F.FormatInput : Swift.BinaryFloatingPoint, F.FormatOutput == Swift.String
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.Stepper where Label == SwiftUICore.Text {
  nonisolated public init<F>(_ titleKey: SwiftUICore.LocalizedStringKey, value: SwiftUICore.Binding<F.FormatInput>, step: F.FormatInput.Stride = 1, format: F, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where F : Foundation.ParseableFormatStyle, F.FormatInput : Swift.BinaryFloatingPoint, F.FormatOutput == Swift.String
  @_disfavoredOverload nonisolated public init<S, F>(_ title: S, value: SwiftUICore.Binding<F.FormatInput>, step: F.FormatInput.Stride = 1, format: F, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where S : Swift.StringProtocol, F : Foundation.ParseableFormatStyle, F.FormatInput : Swift.BinaryFloatingPoint, F.FormatOutput == Swift.String
  nonisolated public init<F>(_ titleKey: SwiftUICore.LocalizedStringKey, value: SwiftUICore.Binding<F.FormatInput>, in bounds: Swift.ClosedRange<F.FormatInput>, step: F.FormatInput.Stride = 1, format: F, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where F : Foundation.ParseableFormatStyle, F.FormatInput : Swift.BinaryFloatingPoint, F.FormatOutput == Swift.String
  @_disfavoredOverload nonisolated public init<S, F>(_ title: S, value: SwiftUICore.Binding<F.FormatInput>, in bounds: Swift.ClosedRange<F.FormatInput>, step: F.FormatInput.Stride = 1, format: F, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where S : Swift.StringProtocol, F : Foundation.ParseableFormatStyle, F.FormatInput : Swift.BinaryFloatingPoint, F.FormatOutput == Swift.String
}
@available(iOS 13.0, macOS 10.15, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.Stepper {
  @available(iOS, deprecated: 100000.0, renamed: "Stepper(label:onIncrement:onDecrement:onEditingChanged:)")
  @available(macOS, deprecated: 100000.0, renamed: "Stepper(label:onIncrement:onDecrement:onEditingChanged:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Stepper(label:onIncrement:onDecrement:onEditingChanged:)")
  @available(visionOS, deprecated: 100000.0, renamed: "Stepper(label:onIncrement:onDecrement:onEditingChanged:)")
  @_disfavoredOverload nonisolated public init(onIncrement: (() -> Swift.Void)?, onDecrement: (() -> Swift.Void)?, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, @SwiftUICore.ViewBuilder label: () -> Label)
  @available(iOS, deprecated: 100000.0, renamed: "Stepper(value:step:label:onEditingChanged:)")
  @available(macOS, deprecated: 100000.0, renamed: "Stepper(value:step:label:onEditingChanged:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Stepper(value:step:label:onEditingChanged:)")
  @available(visionOS, deprecated: 100000.0, renamed: "Stepper(value:step:label:onEditingChanged:)")
  @_disfavoredOverload nonisolated public init<V>(value: SwiftUICore.Binding<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, @SwiftUICore.ViewBuilder label: () -> Label) where V : Swift.Strideable
  @available(iOS, deprecated: 100000.0, renamed: "Stepper(value:in:step:label:onEditingChanged:)")
  @available(macOS, deprecated: 100000.0, renamed: "Stepper(value:in:step:label:onEditingChanged:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Stepper(value:in:step:label:onEditingChanged:)")
  @available(visionOS, deprecated: 100000.0, renamed: "Stepper(value:in:step:label:onEditingChanged:)")
  @_disfavoredOverload nonisolated public init<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, @SwiftUICore.ViewBuilder label: () -> Label) where V : Swift.Strideable
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _ShadowView<Content> : SwiftUICore.View where Content : SwiftUICore.Shape {
  public var shape: Content
  public var effect: SwiftUICore._ShadowEffect
  @inlinable public init(shape: Content, effect: SwiftUICore._ShadowEffect) {
        self.shape = shape
        self.effect = effect
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI._ShadowView<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._ShadowView : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func tableColumnHeaders(_ visibility: SwiftUICore.Visibility) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@preconcurrency @_Concurrency.MainActor public struct FetchedResults<Result> : @preconcurrency Swift.RandomAccessCollection where Result : CoreData.NSFetchRequestResult {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_Concurrency.MainActor @preconcurrency public var nsSortDescriptors: [Foundation.NSSortDescriptor] {
    get
    nonmutating set
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_Concurrency.MainActor @preconcurrency public var nsPredicate: Foundation.NSPredicate? {
    get
    nonmutating set
  }
  nonisolated public var startIndex: Swift.Int {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var endIndex: Swift.Int {
    get
  }
  @_Concurrency.MainActor @preconcurrency public subscript(position: Swift.Int) -> Result {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Element = Result
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Index = Swift.Int
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Indices = Swift.Range<Swift.Int>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Iterator = Swift.IndexingIterator<SwiftUI.FetchedResults<Result>>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias SubSequence = Swift.Slice<SwiftUI.FetchedResults<Result>>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@propertyWrapper @preconcurrency @_Concurrency.MainActor public struct FetchRequest<Result> where Result : CoreData.NSFetchRequestResult {
  @_Concurrency.MainActor @preconcurrency public var wrappedValue: SwiftUI.FetchedResults<Result> {
    get
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @preconcurrency @_Concurrency.MainActor public struct Configuration {
    @_Concurrency.MainActor @preconcurrency public var nsSortDescriptors: [Foundation.NSSortDescriptor]
    @_Concurrency.MainActor @preconcurrency public var nsPredicate: Foundation.NSPredicate?
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_Concurrency.MainActor @preconcurrency public var projectedValue: SwiftUICore.Binding<SwiftUI.FetchRequest<Result>.Configuration> {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.FetchRequest : SwiftUICore.DynamicProperty {
  @_Concurrency.MainActor @preconcurrency public mutating func update()
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.FetchRequest {
  @_Concurrency.MainActor @preconcurrency public static var _propertyBehaviors: Swift.UInt32 {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.FetchRequest {
  @_Concurrency.MainActor @preconcurrency public init(entity: CoreData.NSEntityDescription, sortDescriptors: [Foundation.NSSortDescriptor], predicate: Foundation.NSPredicate? = nil, animation: SwiftUICore.Animation? = nil)
  @_Concurrency.MainActor @preconcurrency public init(fetchRequest: CoreData.NSFetchRequest<Result>, animation: SwiftUICore.Animation? = nil)
  @_Concurrency.MainActor @preconcurrency public init(fetchRequest: CoreData.NSFetchRequest<Result>, transaction: SwiftUICore.Transaction)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.FetchRequest where Result : CoreData.NSManagedObject {
  @_Concurrency.MainActor @preconcurrency public init(sortDescriptors: [Foundation.NSSortDescriptor], predicate: Foundation.NSPredicate? = nil, animation: SwiftUICore.Animation? = nil)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.FetchRequest where Result : CoreData.NSManagedObject {
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init(sortDescriptors: [Foundation.SortDescriptor<Result>], predicate: Foundation.NSPredicate? = nil, animation: SwiftUICore.Animation? = nil)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.FetchRequest.Configuration where Result : CoreData.NSManagedObject {
  @_Concurrency.MainActor @preconcurrency public var sortDescriptors: [Foundation.SortDescriptor<Result>] {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.FetchedResults where Result : CoreData.NSManagedObject {
  @_Concurrency.MainActor @preconcurrency public var sortDescriptors: [Foundation.SortDescriptor<Result>] {
    get
    nonmutating set
  }
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TabViewCustomization : Swift.Equatable, Swift.Sendable, Swift.Codable {
  public init()
  @available(iOS 18.4, macOS 15.4, visionOS 2.4, *)
  public subscript(tab id: Swift.String) -> SwiftUI.TabViewCustomization.TabCustomization {
    get
    set
  }
  @available(iOS 18.4, macOS 15.4, visionOS 2.4, *)
  public subscript(section id: Swift.String) -> SwiftUI.TabViewCustomization.SectionCustomization {
    get
    set
  }
  public mutating func resetVisibility()
  public mutating func resetSectionOrder()
  @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use the `section` subscript and read `tabOrder` instead.")
  @available(macOS, introduced: 15.0, deprecated: 100000.0, message: "Use the `section` subscript and read `tabOrder` instead.")
  @available(visionOS, introduced: 2.0, deprecated: 100000.0, message: "Use the `section` subscript and read `tabOrder` instead.")
  public subscript(sectionID id: Swift.String) -> [Swift.String]? {
    get
  }
  @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use the `tab` subscript and read `sidebarVisibility` instead.")
  @available(macOS, introduced: 15.0, deprecated: 100000.0, message: "Use the `tab` subscript and read `sidebarVisibility` instead.")
  @available(visionOS, introduced: 2.0, deprecated: 100000.0, message: "Use the `tab` subscript and read `sidebarVisibility` instead.")
  public subscript(sidebarVisibility id: Swift.String) -> SwiftUICore.Visibility {
    get
    set
  }
  @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use the `section` subscript and call `resetTabOrder` instead.")
  @available(macOS, introduced: 15.0, deprecated: 100000.0, message: "Use the `section` subscript and call `resetTabOrder` instead.")
  @available(visionOS, introduced: 2.0, deprecated: 100000.0, message: "Use the `section` subscript and call `resetTabOrder` instead.")
  public mutating func resetSectionOrder(for sectionID: Swift.String)
  public static func == (a: SwiftUI.TabViewCustomization, b: SwiftUI.TabViewCustomization) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 18.4, macOS 15.4, visionOS 2.4, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TabViewCustomization {
  public struct TabCustomization {
    public var sidebarVisibility: SwiftUICore.Visibility {
      get
      set
    }
    @available(macOS, unavailable)
    @available(visionOS, unavailable)
    public var tabBarVisibility: SwiftUICore.Visibility {
      get
    }
  }
}
@available(*, unavailable)
extension SwiftUI.TabViewCustomization.TabCustomization : Swift.Sendable {
}
@available(iOS 18.4, macOS 15.4, visionOS 2.4, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TabViewCustomization {
  public struct SectionCustomization {
    public var tabOrder: [Swift.String]? {
      get
    }
    public mutating func resetTabOrder()
  }
}
@available(*, unavailable)
extension SwiftUI.TabViewCustomization.SectionCustomization : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.SceneStorage {
  public init(wrappedValue: Value = TabViewCustomization(), _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == SwiftUI.TabViewCustomization
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.AppStorage {
  public init(wrappedValue: Value = TabViewCustomization(), _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == SwiftUI.TabViewCustomization
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct ToolbarTitleDisplayMode {
  public static var automatic: SwiftUI.ToolbarTitleDisplayMode {
    get
  }
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public static var large: SwiftUI.ToolbarTitleDisplayMode {
    get
  }
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static var inlineLarge: SwiftUI.ToolbarTitleDisplayMode {
    get
  }
  public static var inline: SwiftUI.ToolbarTitleDisplayMode {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.ToolbarTitleDisplayMode : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func toolbarTitleDisplayMode(_ mode: SwiftUI.ToolbarTitleDisplayMode) -> some SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func badge(_ count: Swift.Int) -> some SwiftUICore.View
  
  nonisolated public func badge(_ label: SwiftUICore.Text?) -> some SwiftUICore.View
  
  nonisolated public func badge(_ key: SwiftUICore.LocalizedStringKey?) -> some SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func badge<S>(_ label: S?) -> some SwiftUICore.View where S : Swift.StringProtocol
  
}
@available(iOS 15.0, macOS 12.0, tvOS 17.0, *)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol ControlGroupStyle {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.ControlGroupStyleConfiguration
}
@available(iOS 15.0, macOS 12.0, tvOS 17.0, *)
@available(watchOS, unavailable)
public struct ControlGroupStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Content : SwiftUICore.View {
    @available(iOS 15.0, tvOS 17.0, macOS 12.0, *)
    @available(watchOS, unavailable)
    public typealias Body = Swift.Never
  }
  public let content: SwiftUI.ControlGroupStyleConfiguration.Content
  @available(iOS 16.0, macOS 13.0, *)
  @_Concurrency.MainActor @preconcurrency public struct Label : SwiftUICore.View {
    @available(iOS 16.0, tvOS 17.0, macOS 13.0, *)
    @available(watchOS, unavailable)
    public typealias Body = Swift.Never
  }
  @available(iOS 16.0, macOS 13.0, *)
  public let label: SwiftUI.ControlGroupStyleConfiguration.Label
}
@available(*, unavailable)
extension SwiftUI.ControlGroupStyleConfiguration : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.ControlGroupStyleConfiguration.Content : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.ControlGroupStyleConfiguration.Label : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func controlGroupStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.ControlGroupStyle
  
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@frozen @_Concurrency.MainActor @preconcurrency public struct EmptyControlWidgetTemplate {
  public typealias Body = Swift.Never
  @inlinable @_Concurrency.MainActor @preconcurrency public init() {}
  @_Concurrency.MainActor @preconcurrency public static var _controlType: any Any.Type {
    get
  }
  @_Concurrency.MainActor @preconcurrency public static func _makeControlWidgetTemplate(control: SwiftUICore._GraphValue<SwiftUI.EmptyControlWidgetTemplate>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
}
@available(*, unavailable)
extension SwiftUI.EmptyControlWidgetTemplate : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func keyboardShortcut(_ key: SwiftUI.KeyEquivalent, modifiers: SwiftUICore.EventModifiers = .command) -> some SwiftUICore.View
  
  nonisolated public func keyboardShortcut(_ shortcut: SwiftUI.KeyboardShortcut) -> some SwiftUICore.View
  
  @available(iOS 15.4, macOS 12.3, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func keyboardShortcut(_ shortcut: SwiftUI.KeyboardShortcut?) -> some SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func keyboardShortcut(_ key: SwiftUI.KeyEquivalent, modifiers: SwiftUICore.EventModifiers = .command, localization: SwiftUI.KeyboardShortcut.Localization) -> some SwiftUICore.View
  
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func keyboardShortcut(_ key: SwiftUI.KeyEquivalent, modifiers: SwiftUICore.EventModifiers = .command, localization: SwiftUI.KeyboardShortcut.Localization = .automatic) -> some SwiftUI.Scene
  
  nonisolated public func keyboardShortcut(_ shortcut: SwiftUI.KeyboardShortcut?) -> some SwiftUI.Scene
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct KeyboardShortcut : Swift.Sendable {
  @available(iOS 15.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public struct Localization : Swift.Sendable {
    public static let automatic: SwiftUI.KeyboardShortcut.Localization
    public static let withoutMirroring: SwiftUI.KeyboardShortcut.Localization
    public static let custom: SwiftUI.KeyboardShortcut.Localization
  }
  public static let defaultAction: SwiftUI.KeyboardShortcut
  public static let cancelAction: SwiftUI.KeyboardShortcut
  public var key: SwiftUI.KeyEquivalent
  public var modifiers: SwiftUICore.EventModifiers
  @available(iOS 15.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public var localization: SwiftUI.KeyboardShortcut.Localization
  public init(_ key: SwiftUI.KeyEquivalent, modifiers: SwiftUICore.EventModifiers = .command)
  @available(iOS 15.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ key: SwiftUI.KeyEquivalent, modifiers: SwiftUICore.EventModifiers = .command, localization: SwiftUI.KeyboardShortcut.Localization)
}
@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)
@available(watchOS, unavailable)
public struct KeyEquivalent : Swift.Sendable {
  public static let upArrow: SwiftUI.KeyEquivalent
  public static let downArrow: SwiftUI.KeyEquivalent
  public static let leftArrow: SwiftUI.KeyEquivalent
  public static let rightArrow: SwiftUI.KeyEquivalent
  public static let escape: SwiftUI.KeyEquivalent
  public static let delete: SwiftUI.KeyEquivalent
  public static let deleteForward: SwiftUI.KeyEquivalent
  public static let home: SwiftUI.KeyEquivalent
  public static let end: SwiftUI.KeyEquivalent
  public static let pageUp: SwiftUI.KeyEquivalent
  public static let pageDown: SwiftUI.KeyEquivalent
  public static let clear: SwiftUI.KeyEquivalent
  public static let tab: SwiftUI.KeyEquivalent
  public static let space: SwiftUI.KeyEquivalent
  public static let `return`: SwiftUI.KeyEquivalent
  public var character: Swift.Character
  public init(_ character: Swift.Character)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.KeyEquivalent : Swift.Hashable {
  public static func == (a: SwiftUI.KeyEquivalent, b: SwiftUI.KeyEquivalent) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.KeyEquivalent : Swift.ExpressibleByExtendedGraphemeClusterLiteral {
  public init(extendedGraphemeClusterLiteral: Swift.Character)
  @available(iOS 14.0, tvOS 17.0, macOS 11.0, *)
  @available(watchOS, unavailable)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.Character
  @available(iOS 14.0, tvOS 17.0, macOS 11.0, *)
  @available(watchOS, unavailable)
  public typealias UnicodeScalarLiteralType = Swift.Character
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var keyboardShortcut: SwiftUI.KeyboardShortcut? {
    get
  }
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.KeyboardShortcut : Swift.Hashable {
  public static func == (lhs: SwiftUI.KeyboardShortcut, rhs: SwiftUI.KeyboardShortcut) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore.View {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 8.0, *)
  @_alwaysEmitIntoClient nonisolated public func autocorrectionDisabled(_ disable: Swift.Bool = true) -> some SwiftUICore.View {
        return disableAutocorrection(disable)
    }
  
}
extension SwiftUICore.EnvironmentValues {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 8.0, *)
  @_alwaysEmitIntoClient public var autocorrectionDisabled: Swift.Bool {
    get { disableAutocorrection ?? false }
    set { disableAutocorrection = newValue }
  }
}
extension SwiftUICore.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "autocorrectionDisabled(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "autocorrectionDisabled(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "autocorrectionDisabled(_:)")
  @available(watchOS, introduced: 8.0, deprecated: 100000.0, renamed: "autocorrectionDisabled(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "autocorrectionDisabled(_:)")
  nonisolated public func disableAutocorrection(_ disable: Swift.Bool?) -> some SwiftUICore.View
  
}
extension SwiftUICore.EnvironmentValues {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "autocorrectionDisabled")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "autocorrectionDisabled")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "autocorrectionDisabled")
  @available(watchOS, introduced: 8.0, deprecated: 100000.0, renamed: "autocorrectionDisabled")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "autocorrectionDisabled")
  public var disableAutocorrection: Swift.Bool? {
    get
    set
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct NavigationSplitView<Sidebar, Content, Detail> : SwiftUICore.View where Sidebar : SwiftUICore.View, Content : SwiftUICore.View, Detail : SwiftUICore.View {
  public init(@SwiftUICore.ViewBuilder sidebar: () -> Sidebar, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder detail: () -> Detail)
  public init(columnVisibility: SwiftUICore.Binding<SwiftUI.NavigationSplitViewVisibility>, @SwiftUICore.ViewBuilder sidebar: () -> Sidebar, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder detail: () -> Detail)
  public init(@SwiftUICore.ViewBuilder sidebar: () -> Sidebar, @SwiftUICore.ViewBuilder detail: () -> Detail) where Content == SwiftUICore.EmptyView
  public init(columnVisibility: SwiftUICore.Binding<SwiftUI.NavigationSplitViewVisibility>, @SwiftUICore.ViewBuilder sidebar: () -> Sidebar, @SwiftUICore.ViewBuilder detail: () -> Detail) where Content == SwiftUICore.EmptyView
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI19NavigationSplitViewV4bodyQrvp", 0) __<Sidebar, Content, Detail>
}
@available(*, unavailable)
extension SwiftUI.NavigationSplitView : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.NavigationSplitView {
  nonisolated public init(preferredCompactColumn: SwiftUICore.Binding<SwiftUI.NavigationSplitViewColumn>, @SwiftUICore.ViewBuilder sidebar: () -> Sidebar, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder detail: () -> Detail)
  nonisolated public init(columnVisibility: SwiftUICore.Binding<SwiftUI.NavigationSplitViewVisibility>, preferredCompactColumn: SwiftUICore.Binding<SwiftUI.NavigationSplitViewColumn>, @SwiftUICore.ViewBuilder sidebar: () -> Sidebar, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder detail: () -> Detail)
  nonisolated public init(preferredCompactColumn: SwiftUICore.Binding<SwiftUI.NavigationSplitViewColumn>, @SwiftUICore.ViewBuilder sidebar: () -> Sidebar, @SwiftUICore.ViewBuilder detail: () -> Detail) where Content == SwiftUICore.EmptyView
  nonisolated public init(columnVisibility: SwiftUICore.Binding<SwiftUI.NavigationSplitViewVisibility>, preferredCompactColumn: SwiftUICore.Binding<SwiftUI.NavigationSplitViewColumn>, @SwiftUICore.ViewBuilder sidebar: () -> Sidebar, @SwiftUICore.ViewBuilder detail: () -> Detail) where Content == SwiftUICore.EmptyView
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct NavigationSplitViewVisibility : Swift.Equatable, Swift.Codable, Swift.Sendable {
  public static var detailOnly: SwiftUI.NavigationSplitViewVisibility {
    get
  }
  public static var doubleColumn: SwiftUI.NavigationSplitViewVisibility {
    get
  }
  public static var all: SwiftUI.NavigationSplitViewVisibility {
    get
  }
  public static var automatic: SwiftUI.NavigationSplitViewVisibility {
    get
  }
  public static func == (lhs: SwiftUI.NavigationSplitViewVisibility, rhs: SwiftUI.NavigationSplitViewVisibility) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.CustomHoverEffect {
  public func hoverEffectGroup(id: Swift.String? = nil, in namespace: SwiftUICore.Namespace.ID, behavior: SwiftUI.HoverEffectGroup.Behavior = .activatesGroup) -> some SwiftUICore.CustomHoverEffect
  
  public func hoverEffectGroup(_ group: SwiftUI.HoverEffectGroup?) -> some SwiftUICore.CustomHoverEffect
  
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func hoverEffectGroup(id: Swift.String? = nil, in namespace: SwiftUICore.Namespace.ID, behavior: SwiftUI.HoverEffectGroup.Behavior = .activatesGroup) -> some SwiftUICore.View
  
  nonisolated public func hoverEffectGroup(_ group: SwiftUI.HoverEffectGroup?) -> some SwiftUICore.View
  
  nonisolated public func hoverEffectGroup() -> some SwiftUICore.View
  
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct HoverEffectGroup : Swift.Equatable, Swift.Sendable {
  public struct Behavior : Swift.Equatable, Swift.Sendable {
    public static let activatesGroup: SwiftUI.HoverEffectGroup.Behavior
    public static let followsGroup: SwiftUI.HoverEffectGroup.Behavior
    public static let ignoresGroup: SwiftUI.HoverEffectGroup.Behavior
    public static func == (a: SwiftUI.HoverEffectGroup.Behavior, b: SwiftUI.HoverEffectGroup.Behavior) -> Swift.Bool
  }
  public init(_ namespace: SwiftUICore.Namespace.ID, behavior: SwiftUI.HoverEffectGroup.Behavior = .activatesGroup)
  public init(id: Swift.String?, in namespace: SwiftUICore.Namespace.ID, behavior: SwiftUI.HoverEffectGroup.Behavior = .activatesGroup)
  public func behavior(_ behavior: SwiftUI.HoverEffectGroup.Behavior) -> SwiftUI.HoverEffectGroup
  public static func == (a: SwiftUI.HoverEffectGroup, b: SwiftUI.HoverEffectGroup) -> Swift.Bool
}
@available(iOS 13.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct EditButton : SwiftUICore.View {
  public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI10EditButtonV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.EditButton : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct _IgnoredByLayoutEffect<Base> : SwiftUICore.GeometryEffect where Base : SwiftUICore.GeometryEffect {
  public var base: Base
  public static var _affectsLayout: Swift.Bool {
    get
  }
  @inlinable public init(_ base: Base) {
        self.base = base
    }
  public func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.ProjectionTransform
  public var animatableData: Base.AnimatableData {
    get
    set
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = Base.AnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._IgnoredByLayoutEffect : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._IgnoredByLayoutEffect : Swift.Equatable where Base : Swift.Equatable {
  public static func == (a: SwiftUI._IgnoredByLayoutEffect<Base>, b: SwiftUI._IgnoredByLayoutEffect<Base>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.GeometryEffect {
  @inlinable public func ignoredByLayout() -> SwiftUI._IgnoredByLayoutEffect<Self> {
        return _IgnoredByLayoutEffect(self)
    }
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.GaugeStyle where Self == SwiftUI.LinearGaugeStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var linear: SwiftUI.LinearGaugeStyle {
    get { .init() }
  }
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct LinearGaugeStyle : SwiftUI.GaugeStyle {
  public init()
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  public init(tint: SwiftUICore.Color)
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  public init(tint: SwiftUICore.Gradient)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.LinearGaugeStyle.Configuration) -> some SwiftUICore.View
  
  @available(watchOS 7.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI16LinearGaugeStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.LinearGaugeStyle : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public struct _EmptyScene : SwiftUI.Scene {
  @inlinable public init() {}
  nonisolated public static func _makeScene(scene: SwiftUICore._GraphValue<SwiftUI._EmptyScene>, inputs: SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollView.Main {
  public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI._ScrollView<Provider>.Main>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum _ScrollViewAnimationMode {
  case never
  case discreteChanges
  case always
  public static func == (a: SwiftUI._ScrollViewAnimationMode, b: SwiftUI._ScrollViewAnimationMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUI._ScrollViewAnimationMode : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.Transaction {
  public var _scrollViewAnimates: SwiftUI._ScrollViewAnimationMode {
    get
    set
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct CommandGroup<Content> : SwiftUI.Commands where Content : SwiftUICore.View {
  @available(iOS 15.0, macOS 12.0, *)
  nonisolated public static func _makeCommands(content: SwiftUICore._GraphValue<SwiftUI.CommandGroup<Content>>, inputs: SwiftUI._CommandsInputs) -> SwiftUI._CommandsOutputs
  public init(before group: SwiftUI.CommandGroupPlacement, @SwiftUICore.ViewBuilder addition: () -> Content)
  public init(after group: SwiftUI.CommandGroupPlacement, @SwiftUICore.ViewBuilder addition: () -> Content)
  public init(replacing group: SwiftUI.CommandGroupPlacement, @SwiftUICore.ViewBuilder addition: () -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Commands {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func _resolve(into resolved: inout SwiftUI._ResolvedCommands)
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI12CommandGroupV4bodyQrvp", 0) __<Content>
}
@available(*, unavailable)
extension SwiftUI.CommandGroup : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct CommandGroupPlacement {
  public static let appInfo: SwiftUI.CommandGroupPlacement
  public static let appSettings: SwiftUI.CommandGroupPlacement
  public static let systemServices: SwiftUI.CommandGroupPlacement
  public static let appVisibility: SwiftUI.CommandGroupPlacement
  public static let appTermination: SwiftUI.CommandGroupPlacement
  public static let newItem: SwiftUI.CommandGroupPlacement
  public static let saveItem: SwiftUI.CommandGroupPlacement
  public static let importExport: SwiftUI.CommandGroupPlacement
  public static let printItem: SwiftUI.CommandGroupPlacement
  public static let undoRedo: SwiftUI.CommandGroupPlacement
  public static let pasteboard: SwiftUI.CommandGroupPlacement
  public static let textEditing: SwiftUI.CommandGroupPlacement
  public static let textFormatting: SwiftUI.CommandGroupPlacement
  public static let toolbar: SwiftUI.CommandGroupPlacement
  public static let sidebar: SwiftUI.CommandGroupPlacement
  public static let windowSize: SwiftUI.CommandGroupPlacement
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  public static let windowList: SwiftUI.CommandGroupPlacement
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static let singleWindowList: SwiftUI.CommandGroupPlacement
  public static let windowArrangement: SwiftUI.CommandGroupPlacement
  public static let help: SwiftUI.CommandGroupPlacement
}
@available(*, unavailable)
extension SwiftUI.CommandGroupPlacement : Swift.Sendable {
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.TextFieldStyle where Self == SwiftUI.SquareBorderTextFieldStyle {
  @_alwaysEmitIntoClient public static var squareBorder: SwiftUI.SquareBorderTextFieldStyle {
    get { .init() }
  }
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct SquareBorderTextFieldStyle : SwiftUI.TextFieldStyle {
  public init()
  public func _body(configuration: SwiftUI.TextField<SwiftUI.SquareBorderTextFieldStyle._Label>) -> some SwiftUICore.View
  
  @available(macOS 10.15, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI26SquareBorderTextFieldStyleV5_body13configurationQrAA0eF0VyAA01_efG5LabelVG_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.SquareBorderTextFieldStyle : Swift.Sendable {
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use NavigationStack or NavigationSplitView instead")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "use NavigationStack or NavigationSplitView instead")
@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use NavigationStack or NavigationSplitView instead")
@available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "use NavigationStack or NavigationSplitView instead")
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use NavigationStack or NavigationSplitView instead")
public struct NavigationView<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  public init(@SwiftUICore.ViewBuilder content: () -> Content)
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use NavigationStack or NavigationSplitView instead")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use NavigationStack or NavigationSplitView instead")
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "use NavigationStack or NavigationSplitView instead")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use NavigationStack or NavigationSplitView instead")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "use NavigationStack or NavigationSplitView instead")
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.NavigationView : Swift.Sendable {
}
@available(iOS 14.0, tvOS 14.0, watchOS 8.0, *)
@available(macOS, unavailable)
extension SwiftUI.IndexViewStyle where Self == SwiftUI.PageIndexViewStyle {
  @_alwaysEmitIntoClient public static var page: SwiftUI.PageIndexViewStyle {
    get { .init() }
  }
  @_alwaysEmitIntoClient public static func page(backgroundDisplayMode: SwiftUI.PageIndexViewStyle.BackgroundDisplayMode) -> SwiftUI.PageIndexViewStyle {
        .init(backgroundDisplayMode: backgroundDisplayMode)
    }
}
@available(iOS 14.0, tvOS 14.0, watchOS 8.0, *)
@available(macOS, unavailable)
public struct PageIndexViewStyle : SwiftUI.IndexViewStyle {
  public struct BackgroundDisplayMode : Swift.Sendable {
    public static let automatic: SwiftUI.PageIndexViewStyle.BackgroundDisplayMode
    @available(watchOS, unavailable)
    public static let interactive: SwiftUI.PageIndexViewStyle.BackgroundDisplayMode
    @available(watchOS, unavailable)
    public static let always: SwiftUI.PageIndexViewStyle.BackgroundDisplayMode
    public static let never: SwiftUI.PageIndexViewStyle.BackgroundDisplayMode
  }
  public init(backgroundDisplayMode: SwiftUI.PageIndexViewStyle.BackgroundDisplayMode = .automatic)
  public func _makeBody(configuration: SwiftUI.PageIndexViewStyle._Configuration) -> some SwiftUICore.View
  
  @available(iOS 14.0, tvOS 14.0, watchOS 8.0, *)
  @available(macOS, unavailable)
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI18PageIndexViewStyleV9_makeBody13configurationQrAA01_deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.PageIndexViewStyle : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@propertyWrapper @frozen public struct AccessibilityFocusState<Value> : SwiftUICore.DynamicProperty where Value : Swift.Hashable {
  @propertyWrapper @frozen public struct Binding {
    private var _binding: SwiftUICore.Binding<Value>
    public var wrappedValue: Value {
      get
      nonmutating set
    }
    public var projectedValue: SwiftUI.AccessibilityFocusState<Value>.Binding {
      get
    }
  }
  internal var technologies: SwiftUI.AccessibilityTechnologies? = nil
  internal var value: Value
  internal var location: SwiftUICore.AnyLocation<Value>?
  internal var resetValue: Value
  public var wrappedValue: Value {
    get
    nonmutating set
  }
  public var projectedValue: SwiftUI.AccessibilityFocusState<Value>.Binding {
    get
  }
  public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
  public init() where Value == Swift.Bool
  public init(for technologies: SwiftUI.AccessibilityTechnologies) where Value == Swift.Bool
  public init<T>() where Value == T?, T : Swift.Hashable
  public init<T>(for technologies: SwiftUI.AccessibilityTechnologies) where Value == T?, T : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.AccessibilityFocusState.Binding : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityFocusState : Swift.Sendable where Value : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityFocused<Value>(_ binding: SwiftUI.AccessibilityFocusState<Value>.Binding, equals value: Value) -> some SwiftUICore.View where Value : Swift.Hashable
  
  nonisolated public func accessibilityFocused(_ condition: SwiftUI.AccessibilityFocusState<Swift.Bool>.Binding) -> some SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore._ConditionalContent : SwiftUI.ToolbarContent where TrueContent : SwiftUI.ToolbarContent, FalseContent : SwiftUI.ToolbarContent {
  nonisolated public static func _makeToolbar(content: SwiftUICore._GraphValue<SwiftUICore._ConditionalContent<TrueContent, FalseContent>>, inputs: SwiftUI._ToolbarInputs) -> SwiftUI._ToolbarOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore._ConditionalContent : SwiftUI.CustomizableToolbarContent where TrueContent : SwiftUI.CustomizableToolbarContent, FalseContent : SwiftUI.CustomizableToolbarContent {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension Swift.Optional : SwiftUI.ToolbarContent where Wrapped : SwiftUI.ToolbarContent {
  nonisolated public static func _makeToolbar(content: SwiftUICore._GraphValue<Swift.Optional<Wrapped>>, inputs: SwiftUI._ToolbarInputs) -> SwiftUI._ToolbarOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension Swift.Optional : SwiftUI.CustomizableToolbarContent where Wrapped : SwiftUI.CustomizableToolbarContent {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct ToolbarLabelStyle : Swift.Sendable, Swift.Equatable {
  public static var automatic: SwiftUI.ToolbarLabelStyle {
    get
  }
  @available(iOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public static var titleAndIcon: SwiftUI.ToolbarLabelStyle {
    get
  }
  @available(iOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public static var iconOnly: SwiftUI.ToolbarLabelStyle {
    get
  }
  @available(iOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public static var titleOnly: SwiftUI.ToolbarLabelStyle {
    get
  }
  public static func == (a: SwiftUI.ToolbarLabelStyle, b: SwiftUI.ToolbarLabelStyle) -> Swift.Bool
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.Scene {
  nonisolated public func windowToolbarLabelStyle(fixed: SwiftUI.ToolbarLabelStyle) -> some SwiftUI.Scene
  
  nonisolated public func windowToolbarLabelStyle(_ toolbarLabelStyle: SwiftUICore.Binding<SwiftUI.ToolbarLabelStyle>) -> some SwiftUI.Scene
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.EnvironmentValues {
  public var toolbarLabelStyle: SwiftUI.ToolbarLabelStyle? {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.PrimitiveButtonStyle where Self == SwiftUI.BorderedProminentButtonStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var borderedProminent: SwiftUI.BorderedProminentButtonStyle {
    get {
        .init()
    }
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct BorderedProminentButtonStyle : SwiftUI.PrimitiveButtonStyle {
  public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.BorderedProminentButtonStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI28BorderedProminentButtonStyleV8makeBody13configurationQrAA09PrimitiveeF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.BorderedProminentButtonStyle : Swift.Sendable {
}
@available(macOS 15.0, visionOS 2.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct PointerStyle : Swift.Sendable {
  public static let `default`: SwiftUI.PointerStyle
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  public static let horizontalText: SwiftUI.PointerStyle
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  public static let verticalText: SwiftUI.PointerStyle
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  public static let rectSelection: SwiftUI.PointerStyle
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  public static let grabIdle: SwiftUI.PointerStyle
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  public static let grabActive: SwiftUI.PointerStyle
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  public static let link: SwiftUI.PointerStyle
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  public static let zoomIn: SwiftUI.PointerStyle
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  public static let zoomOut: SwiftUI.PointerStyle
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  public static let columnResize: SwiftUI.PointerStyle
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  public static func columnResize(directions: SwiftUICore.HorizontalDirection.Set) -> SwiftUI.PointerStyle
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  public static let rowResize: SwiftUI.PointerStyle
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  public static func rowResize(directions: SwiftUICore.VerticalDirection.Set) -> SwiftUI.PointerStyle
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  public static func frameResize(position: SwiftUI.FrameResizePosition, directions: SwiftUI.FrameResizeDirection.Set = .all) -> SwiftUI.PointerStyle
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  public static func image(_ image: SwiftUICore.Image, hotSpot: SwiftUICore.UnitPoint) -> SwiftUI.PointerStyle
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  public static func image(_ resource: DeveloperToolsSupport.ImageResource, hotSpot: SwiftUICore.UnitPoint) -> SwiftUI.PointerStyle
  @available(visionOS 2.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  public static func shape(_ shape: some Shape, eoFill: Swift.Bool = false, size: CoreFoundation.CGSize) -> SwiftUI.PointerStyle
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol GroupBoxStyle {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.GroupBoxStyleConfiguration
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct GroupBoxStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Label : SwiftUICore.View {
    @available(iOS 14.0, macOS 11.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    public typealias Body = Swift.Never
  }
  @_Concurrency.MainActor @preconcurrency public struct Content : SwiftUICore.View {
    @available(iOS 14.0, macOS 11.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    public typealias Body = Swift.Never
  }
  public let label: SwiftUI.GroupBoxStyleConfiguration.Label
  public let content: SwiftUI.GroupBoxStyleConfiguration.Content
}
@available(*, unavailable)
extension SwiftUI.GroupBoxStyleConfiguration : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.GroupBoxStyleConfiguration.Content : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.GroupBoxStyleConfiguration.Label : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func groupBoxStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.GroupBoxStyle
  
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TabContent {
  nonisolated public func defaultVisibility(_ visibility: SwiftUICore.Visibility, for placements: SwiftUI.AdaptableTabBarPlacement...) -> some SwiftUI.TabContent<Self.TabValue>
  
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TabContent {
  nonisolated public func hidden(_ hidden: Swift.Bool = true) -> some SwiftUI.TabContent<Self.TabValue>
  
}
@available(iOS 18.4, macOS 15.4, tvOS 18.4, visionOS 2.4, *)
@available(watchOS, unavailable)
extension SwiftUI.TabContent {
  nonisolated public func disabled(_ disabled: Swift.Bool) -> some SwiftUI.TabContent<Self.TabValue>
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct TabPlacement : Swift.Hashable {
  public static let automatic: SwiftUI.TabPlacement
  public static let pinned: SwiftUI.TabPlacement
  public static let sidebarOnly: SwiftUI.TabPlacement
  public static func == (a: SwiftUI.TabPlacement, b: SwiftUI.TabPlacement) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.TabPlacement : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func sectionActions<Content>(@SwiftUICore.ViewBuilder content: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@_Concurrency.MainActor @preconcurrency open class _UIHostingView<Content> : UIKit.UIView where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency required public init(rootView: Content)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @_Concurrency.MainActor @preconcurrency final public var _rendererConfiguration: SwiftUICore._RendererConfiguration {
    get
    set
  }
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @_Concurrency.MainActor @preconcurrency final public var _rendererObject: Swift.AnyObject? {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func didMoveToWindow()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var frame: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var bounds: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var transform3D: QuartzCore.CATransform3D {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var transform: CoreFoundation.CGAffineTransform {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var clipsToBounds: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func tintColorDidChange()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func safeAreaInsetsDidChange()
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_Concurrency.MainActor @preconcurrency public var rootView: Content {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var safeAreaInsets: UIKit.UIEdgeInsets {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var automationElements: [Any]? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency final public func _viewDebugData() -> [SwiftUICore._ViewDebug.Data]
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var next: UIKit.UIResponder? {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func focusItems(in rect: CoreFoundation.CGRect) -> [any UIKit.UIFocusItem]
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var preferredFocusEnvironments: [any UIKit.UIFocusEnvironment] {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func didUpdateFocus(in context: UIKit.UIFocusUpdateContext, with coordinator: UIKit.UIFocusAnimationCoordinator)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func didAddSubview(_ subview: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func willRemoveSubview(_ subview: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
extension SwiftUI._UIHostingView {
  @_Concurrency.MainActor @preconcurrency public func _renderForTest(interval: Swift.Double)
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_Concurrency.MainActor @preconcurrency public func _renderAsyncForTest(interval: Swift.Double) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func _performScrollTest(startOffset: CoreFoundation.CGFloat = 0.0, iterations: Swift.Int = 0, delta: CoreFoundation.CGFloat = 0.0, length: CoreFoundation.CGFloat = 0.0, completion: (() -> Swift.Void)? = nil)
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
@_functionBuilder public struct WidgetBundleBuilder {
  @_alwaysEmitIntoClient public static func buildExpression<Content>(_ content: Content) -> Content where Content : SwiftUI.Widget {
       content
    }
  @available(*, unavailable, message: "this expression does not conform to 'Widget' or 'ControlWidget'")
  @_disfavoredOverload @_alwaysEmitIntoClient public static func buildExpression(_ invalid: Any) -> some SwiftUI.Widget {
        buildBlock()
    }
  
  public static func buildBlock() -> some SwiftUI.Widget
  
  public static func buildBlock<Content>(_ content: Content) -> some SwiftUI.Widget where Content : SwiftUI.Widget
  
  @_disfavoredOverload @_alwaysEmitIntoClient public static func buildBlock<each C>(_ c: repeat each C) -> some SwiftUI.Widget where repeat each C : SwiftUI.Widget {
        TupleWidget((repeat each c))
    }
  
}
@available(*, unavailable)
extension SwiftUI.WidgetBundleBuilder : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.WidgetBundleBuilder {
  @_alwaysEmitIntoClient public static func buildOptional(_ widget: (any SwiftUI.Widget & SwiftUI._LimitedAvailabilityWidgetMarker)?) -> some SwiftUI.Widget {
        if #available(iOS 16.1, macOS 13.0, watchOS 9.1, *) {
            return if let widget {
                widget as! LimitedAvailabilityWidget
            } else {
                LimitedAvailabilityWidget(buildBlock())
            }
        } else {
             
             
             
             
             
             
            return buildBlock()
        }
    }
  
  @available(*, unavailable, message: "if statements in a WidgetBundleBuilder can only be used with #available clauses")
  public static func buildOptional<W>(_ widget: W?) where W : SwiftUI.Widget
  @available(iOS 16.1, macOS 13.0, watchOS 9.1, *)
  @_alwaysEmitIntoClient public static func buildLimitedAvailability(_ widget: some Widget) -> any SwiftUI.Widget & SwiftUI._LimitedAvailabilityWidgetMarker {
        return LimitedAvailabilityWidget(widget)
    }
  @available(iOS, deprecated: 14.0, obsoleted: 16.1, message: "this code may crash on earlier versions of the OS; specify '#available(iOS 16.1, *)' or newer instead")
  @available(macOS, deprecated: 11.0, obsoleted: 13.0, message: "this code may crash on earlier versions of the OS; specify '#available(macOS 13.0, *)' or newer instead")
  @available(watchOS, deprecated: 9.0, obsoleted: 9.1, message: "this code may crash on earlier versions of the OS; specify '#available(watchOS 9.1, *)' or newer instead")
  @_disfavoredOverload @_alwaysEmitIntoClient public static func buildLimitedAvailability(_ widget: any SwiftUI.Widget) -> any SwiftUI.Widget & SwiftUI._LimitedAvailabilityWidgetMarker {
        fatalError("Unavailable")
    }
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
@_marker public protocol _LimitedAvailabilityWidgetMarker {
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.WidgetBundleBuilder {
  @_alwaysEmitIntoClient public static func buildExpression<Content>(_ content: Content) -> some SwiftUI.Widget where Content : SwiftUI.ControlWidget {
        _ControlWidgetAdaptor(content)
    }
  
  @_alwaysEmitIntoClient public static func buildLimitedAvailability(_ widget: some ControlWidget) -> any SwiftUI.Widget & SwiftUI._LimitedAvailabilityWidgetMarker {
        return LimitedAvailabilityWidget(_ControlWidgetAdaptor(widget))
    }
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@_Concurrency.MainActor @preconcurrency open class UIHostingController<Content> : UIKit.UIViewController where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var undoManager: Foundation.UndoManager? {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var keyCommands: [UIKit.UIKeyCommand]? {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency public init(rootView: Content)
  @_Concurrency.MainActor @preconcurrency public init?(coder aDecoder: Foundation.NSCoder, rootView: Content)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func loadView()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillLayoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var isModalInPresentation: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public var rootView: Content {
    get
    set
  }
  @available(iOS 16.0, tvOS 16.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public var sizingOptions: SwiftUI.UIHostingControllerSizingOptions {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func sizeThatFits(in size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency public func _render(seconds: Swift.Double)
  @_Concurrency.MainActor @preconcurrency public func _forEachIdentifiedView(body: (SwiftUICore._IdentifiedViewProxy) -> Swift.Void)
  @available(iOS, introduced: 13.0, deprecated: 16.4, message: "Use UIHostingController/safeAreaRegions or _UIHostingView/safeAreaRegions")
  @available(macOS, unavailable)
  @available(tvOS, introduced: 13.0, deprecated: 16.4, message: "Use UIHostingController/safeAreaRegions or _UIHostingView/safeAreaRegions")
  @available(watchOS, introduced: 6.0, deprecated: 9.4, message: "Use UIHostingController/safeAreaRegions or _UIHostingView/safeAreaRegions")
  @_Concurrency.MainActor @preconcurrency public var _disableSafeArea: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func preferredContentSizeDidChange(forChildContentContainer container: any UIKit.UIContentContainer)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var preferredStatusBarUpdateAnimation: UIKit.UIStatusBarAnimation {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var childForStatusBarStyle: UIKit.UIViewController? {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var childForStatusBarHidden: UIKit.UIViewController? {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func willMove(toParent parent: UIKit.UIViewController?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func didMove(toParent parent: UIKit.UIViewController?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var preferredScreenEdgesDeferringSystemGestures: UIKit.UIRectEdge {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var childForScreenEdgesDeferringSystemGestures: UIKit.UIViewController? {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var prefersHomeIndicatorAutoHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var childForHomeIndicatorAutoHidden: UIKit.UIViewController? {
    @objc get
  }
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @_Concurrency.MainActor @preconcurrency final public var _rendererConfiguration: SwiftUICore._RendererConfiguration {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var _rendererObject: Swift.AnyObject? {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func target(forAction action: ObjectiveC.Selector, withSender sender: Any?) -> Any?
  @objc deinit
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.ForEach : SwiftUI.TableRowContent where Content : SwiftUI.TableRowContent {
  public typealias TableRowValue = Content.TableRowValue
  public typealias TableRowBody = Swift.Never
  nonisolated public static func _makeRows(content: SwiftUICore._GraphValue<SwiftUICore.ForEach<Data, ID, Content>>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
  @_alwaysEmitIntoClient nonisolated public init<V>(_ data: Data, @SwiftUI.TableRowBuilder<V> content: @escaping (Data.Element) -> Content) where ID == Data.Element.ID, V == Content.TableRowValue, Data.Element : Swift.Identifiable {
        self.init(
            data, id: \Data.Element.id, content: content)
    }
  nonisolated public init<V>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUI.TableRowBuilder<V> content: @escaping (Data.Element) -> Content) where V == Content.TableRowValue
  @_alwaysEmitIntoClient nonisolated public init(_ data: Data) where ID == Data.Element.ID, Content == SwiftUI.TableRow<Data.Element>, Data.Element : Swift.Identifiable {
        self.init(data, id: \Data.Element.id) {
            TableRow($0)
        }
    }
  nonisolated public init<V>(_ data: Swift.Range<Swift.Int>, @SwiftUI.TableRowBuilder<V> content: @escaping (Swift.Int) -> Content) where Data == Swift.Range<Swift.Int>, ID == Swift.Int, V == Content.TableRowValue
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.ForEach where Content : SwiftUI.TableRowContent {
  @available(*, unavailable, message: "This symbol only exists for ABI compatibility and should never be used directly.")
  @usableFromInline
  internal init(_ data: Data, @SwiftUI.TableRowBuilder<Data.Element> content: @escaping (Data.Element) -> Content) where ID == Data.Element.ID, Data.Element == Content.TableRowValue
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol DynamicTableRowContent : SwiftUI.TableRowContent {
  associatedtype Data : Swift.Collection
  var data: Self.Data { get }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.ForEach : SwiftUI.DynamicTableRowContent where Content : SwiftUI.TableRowContent {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.EnvironmentValues {
  public var managedObjectContext: CoreData.NSManagedObjectContext {
    get
    set
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.View {
  nonisolated public func presentationDetents(_ detents: Swift.Set<SwiftUI.PresentationDetent>) -> some SwiftUICore.View
  
  nonisolated public func presentationDetents(_ detents: Swift.Set<SwiftUI.PresentationDetent>, selection: SwiftUICore.Binding<SwiftUI.PresentationDetent>) -> some SwiftUICore.View
  
  nonisolated public func presentationDragIndicator(_ visibility: SwiftUICore.Visibility) -> some SwiftUICore.View
  
}
@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
extension SwiftUICore.View {
  nonisolated public func presentationBackgroundInteraction(_ interaction: SwiftUI.PresentationBackgroundInteraction) -> some SwiftUICore.View
  
  nonisolated public func presentationCompactAdaptation(_ adaptation: SwiftUI.PresentationAdaptation) -> some SwiftUICore.View
  
  nonisolated public func presentationCompactAdaptation(horizontal horizontalAdaptation: SwiftUI.PresentationAdaptation, vertical verticalAdaptation: SwiftUI.PresentationAdaptation) -> some SwiftUICore.View
  
  nonisolated public func presentationCornerRadius(_ cornerRadius: CoreFoundation.CGFloat?) -> some SwiftUICore.View
  
  nonisolated public func presentationContentInteraction(_ behavior: SwiftUI.PresentationContentInteraction) -> some SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct PresentationDetent : Swift.Hashable, Swift.Sendable {
  public static let medium: SwiftUI.PresentationDetent
  public static let large: SwiftUI.PresentationDetent
  public static func fraction(_ fraction: CoreFoundation.CGFloat) -> SwiftUI.PresentationDetent
  public static func height(_ height: CoreFoundation.CGFloat) -> SwiftUI.PresentationDetent
  public static func custom<D>(_ type: D.Type) -> SwiftUI.PresentationDetent where D : SwiftUI.CustomPresentationDetent
  @dynamicMemberLookup public struct Context {
    public var maxDetentValue: CoreFoundation.CGFloat {
      get
    }
    public subscript<T>(dynamicMember keyPath: Swift.KeyPath<SwiftUICore.EnvironmentValues, T>) -> T {
      get
    }
  }
  public static func == (a: SwiftUI.PresentationDetent, b: SwiftUI.PresentationDetent) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.PresentationDetent.Context : Swift.Sendable {
}
@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
public struct PresentationAdaptation : Swift.Sendable {
  public static var automatic: SwiftUI.PresentationAdaptation {
    get
  }
  public static var none: SwiftUI.PresentationAdaptation {
    get
  }
  public static var popover: SwiftUI.PresentationAdaptation {
    get
  }
  public static var sheet: SwiftUI.PresentationAdaptation {
    get
  }
  public static var fullScreenCover: SwiftUI.PresentationAdaptation {
    get
  }
}
@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
public struct PresentationContentInteraction : Swift.Equatable, Swift.Sendable {
  public static var automatic: SwiftUI.PresentationContentInteraction {
    get
  }
  public static var resizes: SwiftUI.PresentationContentInteraction {
    get
  }
  public static var scrolls: SwiftUI.PresentationContentInteraction {
    get
  }
  public static func == (a: SwiftUI.PresentationContentInteraction, b: SwiftUI.PresentationContentInteraction) -> Swift.Bool
}
@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
public struct PresentationBackgroundInteraction : Swift.Sendable {
  public static var automatic: SwiftUI.PresentationBackgroundInteraction {
    get
  }
  public static var enabled: SwiftUI.PresentationBackgroundInteraction {
    get
  }
  public static func enabled(upThrough detent: SwiftUI.PresentationDetent) -> SwiftUI.PresentationBackgroundInteraction
  public static var disabled: SwiftUI.PresentationBackgroundInteraction {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public protocol CustomPresentationDetent {
  static func height(in context: Self.Context) -> CoreFoundation.CGFloat?
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.CustomPresentationDetent {
  public typealias Context = SwiftUI.PresentationDetent.Context
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.TabContent {
  nonisolated public func tabPlacement(_ placement: SwiftUI.TabPlacement) -> some SwiftUI.TabContent<Self.TabValue>
  
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.TableStyle where Self == SwiftUI.BorderedTableStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var bordered: SwiftUI.BorderedTableStyle {
    get { .init() }
  }
  @available(macOS, introduced: 12.0, deprecated: 100000.0, message: "Use the `.bordered` style with the `.alternatingRowBackgrounds()` view modifier")
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static func bordered(alternatesRowBackgrounds: Swift.Bool) -> SwiftUI.BorderedTableStyle {
        .init(alternatesRowBackgrounds: alternatesRowBackgrounds)
    }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct BorderedTableStyle : SwiftUI.TableStyle {
  public init()
  @available(macOS, introduced: 12.0, deprecated: 100000.0, message: "Use the `.bordered` style with the `.alternatingRowBackgrounds()` view modifier")
  public init(alternatesRowBackgrounds: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.BorderedTableStyle.Configuration) -> some SwiftUICore.View
  
  @available(macOS 12.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI18BorderedTableStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.BorderedTableStyle : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct ButtonRepeatBehavior : Swift.Hashable, Swift.Sendable {
  public static let automatic: SwiftUI.ButtonRepeatBehavior
  public static let enabled: SwiftUI.ButtonRepeatBehavior
  public static let disabled: SwiftUI.ButtonRepeatBehavior
  public static func == (a: SwiftUI.ButtonRepeatBehavior, b: SwiftUI.ButtonRepeatBehavior) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  nonisolated public func buttonRepeatBehavior(_ behavior: SwiftUI.ButtonRepeatBehavior) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.EnvironmentValues {
  public var buttonRepeatBehavior: SwiftUI.ButtonRepeatBehavior {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ButtonGesture : SwiftUICore.Gesture {
  @preconcurrency public var action: @_Concurrency.MainActor () -> Swift.Void
  @preconcurrency public var pressingAction: (@_Concurrency.MainActor (Swift.Bool) -> Swift.Void)?
  @preconcurrency public init(action: @escaping @_Concurrency.MainActor () -> Swift.Void, pressing: (@_Concurrency.MainActor (Swift.Bool) -> Swift.Void)? = nil)
  nonisolated public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUI._ButtonGesture>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Swift.Void>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Value = Swift.Void
}
@available(*, unavailable)
extension SwiftUI._ButtonGesture : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func _onButtonGesture(pressing: ((Swift.Bool) -> Swift.Void)? = nil, perform action: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func contextMenu<I, M>(forSelectionType itemType: I.Type = I.self, @SwiftUICore.ViewBuilder menu: @escaping (Swift.Set<I>) -> M, primaryAction: ((Swift.Set<I>) -> Swift.Void)? = nil) -> some SwiftUICore.View where I : Swift.Hashable, M : SwiftUICore.View
  
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol UIGestureRecognizerRepresentable {
  associatedtype UIGestureRecognizerType : UIKit.UIGestureRecognizer
  associatedtype Coordinator = Swift.Void
  typealias Context = SwiftUI.UIGestureRecognizerRepresentableContext<Self>
  typealias CoordinateSpaceConverter = SwiftUI.UIGestureRecognizerRepresentableCoordinateSpaceConverter
  @_Concurrency.MainActor @preconcurrency func makeCoordinator(converter: Self.CoordinateSpaceConverter) -> Self.Coordinator
  @_Concurrency.MainActor @preconcurrency func makeUIGestureRecognizer(context: Self.Context) -> Self.UIGestureRecognizerType
  @_Concurrency.MainActor @preconcurrency func updateUIGestureRecognizer(_ recognizer: Self.UIGestureRecognizerType, context: Self.Context)
  @_Concurrency.MainActor @preconcurrency func handleUIGestureRecognizerAction(_ recognizer: Self.UIGestureRecognizerType, context: Self.Context)
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.UIGestureRecognizerRepresentable {
  @_Concurrency.MainActor @preconcurrency public func updateUIGestureRecognizer(_ recognizer: Self.UIGestureRecognizerType, context: Self.Context)
  @_Concurrency.MainActor @preconcurrency public func handleUIGestureRecognizerAction(_ recognizer: Self.UIGestureRecognizerType, context: Self.Context)
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.UIGestureRecognizerRepresentable where Self.Coordinator == () {
  @_Concurrency.MainActor @preconcurrency public func makeCoordinator(converter: Self.CoordinateSpaceConverter)
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct UIGestureRecognizerRepresentableContext<Representable> where Representable : SwiftUI.UIGestureRecognizerRepresentable {
  public let coordinator: Representable.Coordinator
  public let converter: SwiftUI.UIGestureRecognizerRepresentableCoordinateSpaceConverter
}
@available(*, unavailable)
extension SwiftUI.UIGestureRecognizerRepresentableContext : Swift.Sendable {
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct UIGestureRecognizerRepresentableCoordinateSpaceConverter {
  @_alwaysEmitIntoClient public var localLocation: CoreFoundation.CGPoint {
    get { location(in: .local) }
  }
  public func convert(globalPoint: CoreFoundation.CGPoint, to coordinateSpace: some CoordinateSpaceProtocol = .local) -> CoreFoundation.CGPoint
  public func location(in coordinateSpace: some CoordinateSpaceProtocol) -> CoreFoundation.CGPoint
  @_alwaysEmitIntoClient public var localVelocity: CoreFoundation.CGPoint? {
    get { velocity(in: .local) }
  }
  public func velocity(in coordinateSpace: some CoordinateSpaceProtocol) -> CoreFoundation.CGPoint?
  @_alwaysEmitIntoClient public var localTranslation: CoreFoundation.CGPoint? {
    get { translation(in: .local) }
  }
  public func translation(in coordinateSpace: some CoordinateSpaceProtocol) -> CoreFoundation.CGPoint?
}
@available(*, unavailable)
extension SwiftUI.UIGestureRecognizerRepresentableCoordinateSpaceConverter : Swift.Sendable {
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func gesture(_ representable: some UIGestureRecognizerRepresentable) -> some SwiftUICore.View
  
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `MenuStyle` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public protocol MenuButtonStyle {
  associatedtype _Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder func _body(configuration: Self._Configuration) -> Self._Body
  typealias _Configuration = SwiftUI._MenuButtonStyleConfiguration
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `MenuStyle.Configuration` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct _MenuButtonStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Label : SwiftUICore.View {
    @available(iOS, unavailable, message: "Use `MenuStyle.Configuration` instead.")
    @available(tvOS, unavailable, message: "Use `MenuStyle.Configuration` instead.")
    @available(watchOS, unavailable, message: "Use `MenuStyle.Configuration` instead.")
    @available(visionOS, unavailable, message: "Use `MenuStyle.Configuration` instead.")
    @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `MenuStyle.Configuration` instead.")
    public typealias Body = Swift.Never
  }
  @_Concurrency.MainActor @preconcurrency public struct Content : SwiftUICore.View {
    @available(iOS, unavailable, message: "Use `MenuStyle.Configuration` instead.")
    @available(tvOS, unavailable, message: "Use `MenuStyle.Configuration` instead.")
    @available(watchOS, unavailable, message: "Use `MenuStyle.Configuration` instead.")
    @available(visionOS, unavailable, message: "Use `MenuStyle.Configuration` instead.")
    @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `MenuStyle.Configuration` instead.")
    public typealias Body = Swift.Never
  }
  public var label: SwiftUI._MenuButtonStyleConfiguration.Label
  public var content: SwiftUI._MenuButtonStyleConfiguration.Content
  public init()
}
@available(*, unavailable)
extension SwiftUI._MenuButtonStyleConfiguration.Label : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI._MenuButtonStyleConfiguration.Content : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI._MenuButtonStyleConfiguration : Swift.Sendable {
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `menuStyle(_:)` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func menuButtonStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.MenuButtonStyle
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct NavigationSplitViewColumn : Swift.Hashable, Swift.Sendable {
  public static var sidebar: SwiftUI.NavigationSplitViewColumn {
    get
  }
  public static var content: SwiftUI.NavigationSplitViewColumn {
    get
  }
  public static var detail: SwiftUI.NavigationSplitViewColumn {
    get
  }
  public static func == (a: SwiftUI.NavigationSplitViewColumn, b: SwiftUI.NavigationSplitViewColumn) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
@_Concurrency.MainActor @preconcurrency internal struct TupleCommandContent<T> : SwiftUI.Commands {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var body: Swift.Never {
    get
  }
  @available(iOS 15.0, macOS 12.0, *)
  @usableFromInline
  nonisolated internal static func _makeCommands(content: SwiftUICore._GraphValue<SwiftUI.TupleCommandContent<T>>, inputs: SwiftUI._CommandsInputs) -> SwiftUI._CommandsOutputs
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal init(_ value: T)
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal func _resolve(into resolved: inout SwiftUI._ResolvedCommands)
  @available(iOS 14.0, macOS 11.0, *)
  @usableFromInline
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  internal typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.TupleCommandContent : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.Group : SwiftUI.Commands where Content : SwiftUI.Commands {
  @available(iOS 15.0, macOS 12.0, *)
  nonisolated public static func _makeCommands(content: SwiftUICore._GraphValue<SwiftUICore.Group<Content>>, inputs: SwiftUI._CommandsInputs) -> SwiftUI._CommandsOutputs
  @inlinable nonisolated public init(@SwiftUI.CommandsBuilder content: () -> Content) {
        self.init(_content: content())
    }
  @_Concurrency.MainActor @preconcurrency public func _resolve(into resolved: inout SwiftUI._ResolvedCommands)
}
@available(iOS 16.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct PasteButton : SwiftUICore.View {
  @available(iOS 16.0, macOS 11.0, *)
  @_Concurrency.MainActor @preconcurrency public init(supportedContentTypes: [UniformTypeIdentifiers.UTType], payloadAction: @escaping ([Foundation.NSItemProvider]) -> Swift.Void)
  @available(iOS, unavailable)
  @available(macOS, introduced: 11.0, deprecated: 100000.0)
  @available(visionOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public init<Payload>(supportedContentTypes: [UniformTypeIdentifiers.UTType], validator: @escaping ([Foundation.NSItemProvider]) -> Payload?, payloadAction: @escaping (Payload) -> Swift.Void)
  @available(iOS 16.0, macOS 13.0, *)
  @_Concurrency.MainActor @preconcurrency public init<T>(payloadType: T.Type, onPaste: @escaping ([T]) -> Swift.Void) where T : CoreTransferable.Transferable
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, macOS 10.15, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11PasteButtonV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.PasteButton : Swift.Sendable {
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.PasteButton {
  @_Concurrency.MainActor @preconcurrency public init(supportedTypes: [Swift.String], payloadAction: @escaping ([Foundation.NSItemProvider]) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public init<Payload>(supportedTypes: [Swift.String], validator: @escaping ([Foundation.NSItemProvider]) -> Payload?, payloadAction: @escaping (Payload) -> Swift.Void)
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func fileMover(isPresented: SwiftUICore.Binding<Swift.Bool>, file: Foundation.URL?, onCompletion: @escaping (_ result: Swift.Result<Foundation.URL, any Swift.Error>) -> Swift.Void) -> some SwiftUICore.View
  
  nonisolated public func fileMover<C>(isPresented: SwiftUICore.Binding<Swift.Bool>, files: C, onCompletion: @escaping (_ result: Swift.Result<[Foundation.URL], any Swift.Error>) -> Swift.Void) -> some SwiftUICore.View where C : Swift.Collection, C.Element == Foundation.URL
  
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func fileMover(isPresented: SwiftUICore.Binding<Swift.Bool>, file: Foundation.URL?, onCompletion: @escaping (Swift.Result<Foundation.URL, any Swift.Error>) -> Swift.Void, onCancellation: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
  nonisolated public func fileMover<C>(isPresented: SwiftUICore.Binding<Swift.Bool>, files: C, onCompletion: @escaping (Swift.Result<[Foundation.URL], any Swift.Error>) -> Swift.Void, onCancellation: @escaping () -> Swift.Void) -> some SwiftUICore.View where C : Swift.Collection, C.Element == Foundation.URL
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DocumentGroup<Document, Content> : SwiftUI.Scene where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Scene {
    get
  }
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI13DocumentGroupV4bodyQrvp", 0) __<Document, Content>
}
@available(*, unavailable)
extension SwiftUI.DocumentGroup : Swift.Sendable {
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol UIViewRepresentable : SwiftUICore.View where Self.Body == Swift.Never {
  associatedtype UIViewType : UIKit.UIView
  @_Concurrency.MainActor @preconcurrency func makeUIView(context: Self.Context) -> Self.UIViewType
  @_Concurrency.MainActor @preconcurrency func updateUIView(_ uiView: Self.UIViewType, context: Self.Context)
  @_Concurrency.MainActor @preconcurrency static func dismantleUIView(_ uiView: Self.UIViewType, coordinator: Self.Coordinator)
  associatedtype Coordinator = Swift.Void
  @_Concurrency.MainActor @preconcurrency func makeCoordinator() -> Self.Coordinator
  @_Concurrency.MainActor @preconcurrency func _identifiedViewTree(in uiView: Self.UIViewType) -> SwiftUI._IdentifiedViewTree
  @available(iOS 16.0, tvOS 16.0, *)
  @_Concurrency.MainActor @preconcurrency func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize, uiView: Self.UIViewType, context: Self.Context) -> CoreFoundation.CGSize?
  @_Concurrency.MainActor @preconcurrency func _overrideSizeThatFits(_ size: inout CoreFoundation.CGSize, in proposedSize: SwiftUICore._ProposedSize, uiView: Self.UIViewType)
  @_Concurrency.MainActor @preconcurrency func _overrideLayoutTraits(_ layoutTraits: inout SwiftUICore._LayoutTraits, for uiView: Self.UIViewType)
  @available(iOS 15.0, tvOS 15.0, *)
  @_Concurrency.MainActor @preconcurrency static func _modifyBridgedViewInputs(_ inputs: inout SwiftUICore._ViewInputs)
  @available(iOS 17.0, tvOS 17.0, *)
  @_Concurrency.MainActor @preconcurrency static func _layoutOptions(_ provider: Self.UIViewType) -> Self.LayoutOptions
  typealias Context = SwiftUI.UIViewRepresentableContext<Self>
  @available(iOS 17.0, tvOS 17.0, *)
  typealias LayoutOptions = SwiftUI._PlatformViewRepresentableLayoutOptions
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
extension SwiftUI.UIViewRepresentable where Self.Coordinator == () {
  @_Concurrency.MainActor @preconcurrency public func makeCoordinator() -> Self.Coordinator
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
extension SwiftUI.UIViewRepresentable {
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @_Concurrency.MainActor @preconcurrency public func _resetUIView(_ uiView: Self.UIViewType, coordinator: Self.Coordinator, destroy: () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public static func dismantleUIView(_ uiView: Self.UIViewType, coordinator: Self.Coordinator)
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @_Concurrency.MainActor @preconcurrency public func _identifiedViewTree(in uiView: Self.UIViewType) -> SwiftUI._IdentifiedViewTree
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
  @available(macOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize, uiView: Self.UIViewType, context: Self.Context) -> CoreFoundation.CGSize?
  @_Concurrency.MainActor @preconcurrency public func _overrideSizeThatFits(_ size: inout CoreFoundation.CGSize, in proposedSize: SwiftUICore._ProposedSize, uiView: Self.UIViewType)
  @_Concurrency.MainActor @preconcurrency public func _overrideLayoutTraits(_ layoutTraits: inout SwiftUICore._LayoutTraits, for uiView: Self.UIViewType)
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @_Concurrency.MainActor @preconcurrency public static func _modifyBridgedViewInputs(_ inputs: inout SwiftUICore._ViewInputs)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, *)
  @_Concurrency.MainActor @preconcurrency public static func _layoutOptions(_ provider: Self.UIViewType) -> Self.LayoutOptions
  @_Concurrency.MainActor @preconcurrency public var body: Swift.Never {
    get
  }
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public struct UIViewRepresentableContext<Representable> where Representable : SwiftUI.UIViewRepresentable {
  @_Concurrency.MainActor @preconcurrency public let coordinator: Representable.Coordinator
  @_Concurrency.MainActor @preconcurrency public var transaction: SwiftUICore.Transaction {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var environment: SwiftUICore.EnvironmentValues {
    get
  }
  @available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func animate(changes: () -> Swift.Void, completion: (() -> Swift.Void)? = nil)
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@frozen public struct TupleTableRowContent<Value, T> : SwiftUI.TableRowContent where Value : Swift.Identifiable {
  public typealias TableRowValue = Value
  public var value: T
  @inlinable internal init(_ value: T, ofType: SwiftUI.TupleTableRowContent<Value, T>.TableRowValue.Type) { self.value = value }
  nonisolated public static func _makeRows(content: SwiftUICore._GraphValue<SwiftUI.TupleTableRowContent<Value, T>>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  nonisolated public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
  @available(iOS 16.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias TableRowBody = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.TupleTableRowContent : Swift.Sendable {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.Group : SwiftUI.TableRowContent where Content : SwiftUI.TableRowContent {
  public typealias TableRowValue = Content.TableRowValue
  public typealias TableRowBody = Swift.Never
  @inlinable nonisolated public init<R>(@SwiftUI.TableRowBuilder<R> content: () -> Content) where R == Content.TableRowValue {
        self.init(_content: content())
    }
  nonisolated public static func _makeRows(content: SwiftUICore._GraphValue<SwiftUICore.Group<Content>>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  nonisolated public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.LabelStyle where Self == SwiftUI.TitleOnlyLabelStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var titleOnly: SwiftUI.TitleOnlyLabelStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct TitleOnlyLabelStyle : SwiftUI.LabelStyle {
  public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.TitleOnlyLabelStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI19TitleOnlyLabelStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.TitleOnlyLabelStyle : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func scrollPosition(_ position: SwiftUICore.Binding<SwiftUICore.ScrollPosition>, anchor: SwiftUICore.UnitPoint? = nil) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func scrollPosition(id: SwiftUICore.Binding<(some Hashable)?>, anchor: SwiftUICore.UnitPoint? = nil) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func tabViewCustomization(_ customization: SwiftUICore.Binding<SwiftUI.TabViewCustomization>?) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public func focusable(_ isFocusable: Swift.Bool = true) -> some SwiftUICore.View
  
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func focusable(_ isFocusable: Swift.Bool = true, interactions: SwiftUI.FocusInteractions) -> some SwiftUICore.View
  
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func focusEffectDisabled(_ disabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct FocusInteractions : Swift.OptionSet, Swift.Sendable {
  public static let activate: SwiftUI.FocusInteractions
  public static let edit: SwiftUI.FocusInteractions
  public static var automatic: SwiftUI.FocusInteractions {
    get
  }
  public var rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias ArrayLiteralElement = SwiftUI.FocusInteractions
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Element = SwiftUI.FocusInteractions
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias RawValue = Swift.Int
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.EnvironmentValues {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public var isFocusEffectEnabled: Swift.Bool {
    get
    set
  }
}
@available(iOS 13.4, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _FocusableModifier : SwiftUICore.ViewModifier {
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._FocusableModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.4, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._FocusableModifier : Swift.Sendable {
}
extension SwiftUICore.EnvironmentValues {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public var isFocused: Swift.Bool {
    get
  }
}
extension SwiftUICore.View {
  @available(iOS, unavailable)
  @available(macOS, introduced: 10.15, deprecated: 12.0, message: "Use FocusState<T> and View.focused(_:equals) for functionality previously provided by the onChange parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 15.0, message: "Use FocusState<T> and View.focused(_:equals) for functionality previously provided by the onChange parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 8.0, message: "Use FocusState<T> and View.focused(_:equals) for functionality previously provided by the onChange parameter.")
  @available(visionOS, unavailable)
  nonisolated public func focusable(_ isFocusable: Swift.Bool = true, onFocusChange: @escaping (_ isFocused: Swift.Bool) -> Swift.Void = { _ in }) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func labelsVisibility(_ visibility: SwiftUICore.Visibility) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.EnvironmentValues {
  public var labelsVisibility: SwiftUICore.Visibility {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct TimelineView<Schedule, Content> where Schedule : SwiftUICore.TimelineSchedule {
  public struct Context {
    public enum Cadence : Swift.Comparable, Swift.Sendable {
      case live
      case seconds
      case minutes
      public static func < (a: SwiftUI.TimelineView<Schedule, Content>.Context.Cadence, b: SwiftUI.TimelineView<Schedule, Content>.Context.Cadence) -> Swift.Bool
      public static func == (a: SwiftUI.TimelineView<Schedule, Content>.Context.Cadence, b: SwiftUI.TimelineView<Schedule, Content>.Context.Cadence) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public let date: Foundation.Date
    public let cadence: SwiftUI.TimelineView<Schedule, Content>.Context.Cadence
  }
}
@available(*, unavailable)
extension SwiftUI.TimelineView : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.TimelineView.Context : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public typealias TimelineViewDefaultContext = SwiftUI.TimelineView<SwiftUICore.EveryMinuteTimelineSchedule, Swift.Never>.Context
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.TimelineView : SwiftUICore.View where Content : SwiftUICore.View {
  public typealias Body = Swift.Never
  @_alwaysEmitIntoClient nonisolated public init(_ schedule: Schedule, @SwiftUICore.ViewBuilder content: @escaping (SwiftUI.TimelineViewDefaultContext) -> Content) {
        self.init(schedule) { (context: Context) -> Content in
             
             
             
            content(unsafeBitCast(
                context,
                to: TimelineViewDefaultContext.self))
        }
    }
  @available(iOS, deprecated, introduced: 15.0, message: "Use TimelineViewDefaultContext for the type of the context parameter passed into TimelineView's content closure to resolve this warning. The new version of this initializer, using TimelineViewDefaultContext, improves compilation performance by using an independent generic type signature, which helps avoid unintended cyclical type dependencies.")
  @available(macOS, deprecated, introduced: 12.0, message: "Use TimelineViewDefaultContext for the type of the context parameter passed into TimelineView's content closure to resolve this warning. The new version of this initializer, using TimelineViewDefaultContext, improves compilation performance by using an independent generic type signature, which helps avoid unintended cyclical type dependencies.")
  @available(watchOS, deprecated, introduced: 8.0, message: "Use TimelineViewDefaultContext for the type of the context parameter passed into TimelineView's content closure to resolve this warning. The new version of this initializer, using TimelineViewDefaultContext, improves compilation performance by using an independent generic type signature, which helps avoid unintended cyclical type dependencies.")
  @available(tvOS, deprecated, introduced: 15.0, message: "Use TimelineViewDefaultContext for the type of the context parameter passed into TimelineView's content closure to resolve this warning. The new version of this initializer, using TimelineViewDefaultContext, improves compilation performance by using an independent generic type signature, which helps avoid unintended cyclical type dependencies.")
  @available(visionOS, deprecated, introduced: 1.0, message: "Use TimelineViewDefaultContext for the type of the context parameter passed into TimelineView's content closure to resolve this warning. The new version of this initializer, using TimelineViewDefaultContext, improves compilation performance by using an independent generic type signature, which helps avoid unintended cyclical type dependencies.")
  @_disfavoredOverload nonisolated public init(_ schedule: Schedule, @SwiftUICore.ViewBuilder content: @escaping (SwiftUI.TimelineView<Schedule, Content>.Context) -> Content)
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI.TimelineView<Schedule, Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
}
@available(iOS 16.0, macOS 13.0, watchOS 7.0, *)
@available(tvOS, unavailable)
extension SwiftUI.GaugeStyle where Self == SwiftUI.DefaultGaugeStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.DefaultGaugeStyle {
    get { .init() }
  }
}
@available(iOS 16.0, macOS 13.0, watchOS 7.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct DefaultGaugeStyle : SwiftUI.GaugeStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.DefaultGaugeStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, watchOS 7.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI17DefaultGaugeStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.DefaultGaugeStyle : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(visionOS 2.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func supportedVolumeViewpoints(_ viewpoints: SwiftUI.SquareAzimuth.Set) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Button<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  @preconcurrency public init(action: @escaping @_Concurrency.MainActor () -> Swift.Void, @SwiftUICore.ViewBuilder label: () -> Label)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI6ButtonV4bodyQrvp", 0) __<Label>
}
@available(*, unavailable)
extension SwiftUI.Button : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Button where Label == SwiftUICore.Text {
  @preconcurrency nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, action: @escaping @_Concurrency.MainActor () -> Swift.Void)
  @preconcurrency @_disfavoredOverload nonisolated public init<S>(_ title: S, action: @escaping @_Concurrency.MainActor () -> Swift.Void) where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Button where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  @_alwaysEmitIntoClient nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, action: @escaping @_Concurrency.MainActor () -> Swift.Void) {
        self.init(action: action) {
            SwiftUI.Label(titleKey, systemImage: systemImage)
        }
    }
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<S>(_ title: S, systemImage: Swift.String, action: @escaping @_Concurrency.MainActor () -> Swift.Void) where S : Swift.StringProtocol {
        self.init(action: action) {
            SwiftUI.Label(title, systemImage: systemImage)
        }
    }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Button where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  @preconcurrency nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: DeveloperToolsSupport.ImageResource, action: @escaping @_Concurrency.MainActor () -> Swift.Void)
  @preconcurrency @_disfavoredOverload nonisolated public init<S>(_ title: S, image: DeveloperToolsSupport.ImageResource, action: @escaping @_Concurrency.MainActor () -> Swift.Void) where S : Swift.StringProtocol
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Button where Label == SwiftUI.PrimitiveButtonStyleConfiguration.Label {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  nonisolated public init(_ configuration: SwiftUI.PrimitiveButtonStyleConfiguration)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Button {
  @preconcurrency nonisolated public init(role: SwiftUI.ButtonRole?, action: @escaping @_Concurrency.MainActor () -> Swift.Void, @SwiftUICore.ViewBuilder label: () -> Label)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Button where Label == SwiftUICore.Text {
  @preconcurrency nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, role: SwiftUI.ButtonRole?, action: @escaping @_Concurrency.MainActor () -> Swift.Void)
  @preconcurrency @_disfavoredOverload nonisolated public init<S>(_ title: S, role: SwiftUI.ButtonRole?, action: @escaping @_Concurrency.MainActor () -> Swift.Void) where S : Swift.StringProtocol
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Button where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  @_alwaysEmitIntoClient nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, role: SwiftUI.ButtonRole?, action: @escaping @_Concurrency.MainActor () -> Swift.Void) {
        self.init(role: role, action: action) {
            SwiftUI.Label(titleKey, systemImage: systemImage)
        }
    }
  @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public init<S>(_ title: S, systemImage: Swift.String, role: SwiftUI.ButtonRole?, action: @escaping @_Concurrency.MainActor () -> Swift.Void) where S : Swift.StringProtocol {
        self.init(role: role, action: action) {
            SwiftUI.Label(title, systemImage: systemImage)
        }
    }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Button where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  @preconcurrency nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: DeveloperToolsSupport.ImageResource, role: SwiftUI.ButtonRole?, action: @escaping @_Concurrency.MainActor () -> Swift.Void)
  @preconcurrency @_disfavoredOverload nonisolated public init<S>(_ title: S, image: DeveloperToolsSupport.ImageResource, role: SwiftUI.ButtonRole?, action: @escaping @_Concurrency.MainActor () -> Swift.Void) where S : Swift.StringProtocol
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct AccessibilityChildBehavior : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: SwiftUI.AccessibilityChildBehavior, rhs: SwiftUI.AccessibilityChildBehavior) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.AccessibilityChildBehavior : Swift.Sendable {
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use the `menu` style instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct PopUpButtonPickerStyle : SwiftUI.PickerStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.PopUpButtonPickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.PopUpButtonPickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.PopUpButtonPickerStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct ToolbarRole : Swift.Sendable {
  public static var automatic: SwiftUI.ToolbarRole {
    get
  }
  @available(macOS, unavailable)
  public static var navigationStack: SwiftUI.ToolbarRole {
    get
  }
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static var browser: SwiftUI.ToolbarRole {
    get
  }
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static var editor: SwiftUI.ToolbarRole {
    get
  }
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func toolbarRole(_ role: SwiftUI.ToolbarRole) -> some SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func fileExporter<D>(isPresented: SwiftUICore.Binding<Swift.Bool>, document: D?, contentType: UniformTypeIdentifiers.UTType, defaultFilename: Swift.String? = nil, onCompletion: @escaping (_ result: Swift.Result<Foundation.URL, any Swift.Error>) -> Swift.Void) -> some SwiftUICore.View where D : SwiftUI.FileDocument
  
  nonisolated public func fileExporter<C>(isPresented: SwiftUICore.Binding<Swift.Bool>, documents: C, contentType: UniformTypeIdentifiers.UTType, onCompletion: @escaping (_ result: Swift.Result<[Foundation.URL], any Swift.Error>) -> Swift.Void) -> some SwiftUICore.View where C : Swift.Collection, C.Element : SwiftUI.FileDocument
  
  nonisolated public func fileExporter<D>(isPresented: SwiftUICore.Binding<Swift.Bool>, document: D?, contentType: UniformTypeIdentifiers.UTType, defaultFilename: Swift.String? = nil, onCompletion: @escaping (_ result: Swift.Result<Foundation.URL, any Swift.Error>) -> Swift.Void) -> some SwiftUICore.View where D : SwiftUI.ReferenceFileDocument
  
  nonisolated public func fileExporter<C>(isPresented: SwiftUICore.Binding<Swift.Bool>, documents: C, contentType: UniformTypeIdentifiers.UTType, onCompletion: @escaping (_ result: Swift.Result<[Foundation.URL], any Swift.Error>) -> Swift.Void) -> some SwiftUICore.View where C : Swift.Collection, C.Element : SwiftUI.ReferenceFileDocument
  
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func fileExporter<T>(isPresented: SwiftUICore.Binding<Swift.Bool>, item: T?, contentTypes: [UniformTypeIdentifiers.UTType] = [], defaultFilename: Swift.String? = nil, onCompletion: @escaping (Swift.Result<Foundation.URL, any Swift.Error>) -> Swift.Void, onCancellation: @escaping () -> Swift.Void = { }) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
  nonisolated public func fileExporter<C, T>(isPresented: SwiftUICore.Binding<Swift.Bool>, items: C, contentTypes: [UniformTypeIdentifiers.UTType] = [], onCompletion: @escaping (Swift.Result<[Foundation.URL], any Swift.Error>) -> Swift.Void, onCancellation: @escaping () -> Swift.Void = { }) -> some SwiftUICore.View where C : Swift.Collection, T : CoreTransferable.Transferable, T == C.Element
  
  nonisolated public func fileExporter<D>(isPresented: SwiftUICore.Binding<Swift.Bool>, document: D?, contentTypes: [UniformTypeIdentifiers.UTType] = [], defaultFilename: Swift.String? = nil, onCompletion: @escaping (Swift.Result<Foundation.URL, any Swift.Error>) -> Swift.Void, onCancellation: @escaping () -> Swift.Void = {}) -> some SwiftUICore.View where D : SwiftUI.FileDocument
  
  nonisolated public func fileExporter<D>(isPresented: SwiftUICore.Binding<Swift.Bool>, document: D?, contentTypes: [UniformTypeIdentifiers.UTType] = [], defaultFilename: Swift.String? = nil, onCompletion: @escaping (Swift.Result<Foundation.URL, any Swift.Error>) -> Swift.Void, onCancellation: @escaping () -> Swift.Void = {}) -> some SwiftUICore.View where D : SwiftUI.ReferenceFileDocument
  
  nonisolated public func fileExporter<C>(isPresented: SwiftUICore.Binding<Swift.Bool>, documents: C, contentTypes: [UniformTypeIdentifiers.UTType] = [], onCompletion: @escaping (Swift.Result<[Foundation.URL], any Swift.Error>) -> Swift.Void, onCancellation: @escaping () -> Swift.Void = {}) -> some SwiftUICore.View where C : Swift.Collection, C.Element : SwiftUI.FileDocument
  
  nonisolated public func fileExporter<C>(isPresented: SwiftUICore.Binding<Swift.Bool>, documents: C, contentTypes: [UniformTypeIdentifiers.UTType] = [], onCompletion: @escaping (Swift.Result<[Foundation.URL], any Swift.Error>) -> Swift.Void, onCancellation: @escaping () -> Swift.Void = {}) -> some SwiftUICore.View where C : Swift.Collection, C.Element : SwiftUI.ReferenceFileDocument
  
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.HoverEffectContent {
  public func animation(_ animation: SwiftUICore.Animation?, body: (SwiftUICore.EmptyHoverEffectContent) -> some HoverEffectContent) -> some SwiftUICore.HoverEffectContent
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityAddTraits(_ traits: SwiftUICore.AccessibilityTraits) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityRemoveTraits(_ traits: SwiftUICore.AccessibilityTraits) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityAddTraits(_ traits: SwiftUICore.AccessibilityTraits) -> SwiftUICore.ModifiedContent<Content, Modifier>
  nonisolated public func accessibilityRemoveTraits(_ traits: SwiftUICore.AccessibilityTraits) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
extension SwiftUICore.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  nonisolated public func accessibility(addTraits traits: SwiftUICore.AccessibilityTraits) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  nonisolated public func accessibility(removeTraits traits: SwiftUICore.AccessibilityTraits) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  nonisolated public func accessibility(addTraits traits: SwiftUICore.AccessibilityTraits) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  nonisolated public func accessibility(removeTraits traits: SwiftUICore.AccessibilityTraits) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
internal struct NavigationSplitViewExtraWidePrimaryColumnTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @available(iOS 18.0, visionOS 2.0, *)
  @usableFromInline
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  internal typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.NavigationSplitViewExtraWidePrimaryColumnTraitKey : Swift.Sendable {
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
@available(visionOS, unavailable)
@available(macCatalyst, unavailable)
public struct DocumentLaunchView<Actions, DocumentView> : SwiftUICore.View where Actions : SwiftUICore.View, DocumentView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public init(_ title: SwiftUICore.LocalizedStringKey, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  public init(_ title: SwiftUICore.LocalizedStringKey, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  public init(_ title: SwiftUICore.LocalizedStringKey, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  public init(_ title: SwiftUICore.LocalizedStringKey, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> some View)
  @_disfavoredOverload public init(_ title: some StringProtocol, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  @_disfavoredOverload public init(_ title: some StringProtocol, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  @_disfavoredOverload public init(_ title: some StringProtocol, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  @_disfavoredOverload public init(_ title: some StringProtocol, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> some View)
  public init(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  public init(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  public init(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  public init(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> some View)
  public init<B>(_ title: SwiftUICore.LocalizedStringKey, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  public init<B>(_ title: SwiftUICore.LocalizedStringKey, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  public init<B>(_ title: SwiftUICore.LocalizedStringKey, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  public init<B>(_ title: SwiftUICore.LocalizedStringKey, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView) where B : SwiftUICore.ShapeStyle
  @_disfavoredOverload public init<B>(_ title: some StringProtocol, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  @_disfavoredOverload public init<B>(_ title: some StringProtocol, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  @_disfavoredOverload public init<B>(_ title: some StringProtocol, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  @_disfavoredOverload public init<B>(_ title: some StringProtocol, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView) where B : SwiftUICore.ShapeStyle
  public init<B>(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  public init<B>(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  public init<B>(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  public init<B>(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView) where B : SwiftUICore.ShapeStyle
  public init(_ title: SwiftUICore.LocalizedStringKey, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  public init(_ title: SwiftUICore.LocalizedStringKey, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  public init(_ title: SwiftUICore.LocalizedStringKey, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  public init(_ title: SwiftUICore.LocalizedStringKey, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView)
  @_disfavoredOverload public init(_ title: some StringProtocol, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  @_disfavoredOverload public init(_ title: some StringProtocol, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  @_disfavoredOverload public init(_ title: some StringProtocol, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  @_disfavoredOverload public init(_ title: some StringProtocol, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView)
  public init(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  public init(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  public init(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  public init(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView)
  @available(iOS 18.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI18DocumentLaunchViewV4bodyQrvp", 0) __<Actions, DocumentView>
}
@available(*, unavailable)
extension SwiftUI.DocumentLaunchView : Swift.Sendable {
}
@available(iOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DocumentLaunchGeometryProxy {
  public var frame: CoreFoundation.CGRect
  public var titleViewFrame: CoreFoundation.CGRect
}
@available(*, unavailable)
extension SwiftUI.DocumentLaunchGeometryProxy : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DefaultDocumentGroupLaunchActions : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public init()
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI33DefaultDocumentGroupLaunchActionsV4bodyQrvp", 0) __
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct GridItem : Swift.Sendable {
  public enum Size : Swift.Sendable {
    case fixed(_: CoreFoundation.CGFloat)
    case flexible(minimum: CoreFoundation.CGFloat = 10, maximum: CoreFoundation.CGFloat = .infinity)
    case adaptive(minimum: CoreFoundation.CGFloat, maximum: CoreFoundation.CGFloat = .infinity)
  }
  public var size: SwiftUI.GridItem.Size
  public var spacing: CoreFoundation.CGFloat?
  public var alignment: SwiftUICore.Alignment?
  public init(_ size: SwiftUI.GridItem.Size = .flexible(), spacing: CoreFoundation.CGFloat? = nil, alignment: SwiftUICore.Alignment? = nil)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct LazyHGrid<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  public init(rows: [SwiftUI.GridItem], alignment: SwiftUICore.VerticalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, pinnedViews: SwiftUICore.PinnedScrollableViews = .init(), @SwiftUICore.ViewBuilder content: () -> Content)
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI.LazyHGrid<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.LazyHGrid : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct LazyVGrid<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  public init(columns: [SwiftUI.GridItem], alignment: SwiftUICore.HorizontalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, pinnedViews: SwiftUICore.PinnedScrollableViews = .init(), @SwiftUICore.ViewBuilder content: () -> Content)
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI.LazyVGrid<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.LazyVGrid : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public struct DismissWindowAction {
  @_Concurrency.MainActor @preconcurrency public func callAsFunction()
  @_Concurrency.MainActor @preconcurrency public func callAsFunction(id: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func callAsFunction<D>(value: D) where D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable
  @_Concurrency.MainActor @preconcurrency public func callAsFunction<D>(id: Swift.String, value: D) where D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable
}
@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var dismissWindow: SwiftUI.DismissWindowAction {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func interactiveDismissDisabled(_ isDisabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@preconcurrency @_Concurrency.MainActor public struct SectionedFetchResults<SectionIdentifier, Result> : Swift.RandomAccessCollection where SectionIdentifier : Swift.Hashable, Result : CoreData.NSFetchRequestResult {
  @preconcurrency @_Concurrency.MainActor public struct Section : @preconcurrency Swift.Identifiable, Swift.RandomAccessCollection {
    nonisolated public var startIndex: Swift.Int {
      get
    }
    nonisolated public var endIndex: Swift.Int {
      get
    }
    nonisolated public subscript(position: Swift.Int) -> Result {
      get
    }
    @_Concurrency.MainActor @preconcurrency public let id: SectionIdentifier
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias Element = Result
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias ID = SectionIdentifier
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias Index = Swift.Int
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias Indices = Swift.Range<Swift.Int>
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias Iterator = Swift.IndexingIterator<SwiftUI.SectionedFetchResults<SectionIdentifier, Result>.Section>
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias SubSequence = Swift.Slice<SwiftUI.SectionedFetchResults<SectionIdentifier, Result>.Section>
  }
  @_Concurrency.MainActor @preconcurrency public var nsSortDescriptors: [Foundation.NSSortDescriptor] {
    get
    nonmutating set
  }
  @_Concurrency.MainActor @preconcurrency public var nsPredicate: Foundation.NSPredicate? {
    get
    nonmutating set
  }
  @_Concurrency.MainActor @preconcurrency public var sectionIdentifier: Swift.KeyPath<Result, SectionIdentifier> {
    get
    nonmutating set
  }
  nonisolated public var startIndex: Swift.Int {
    get
  }
  nonisolated public var endIndex: Swift.Int {
    get
  }
  nonisolated public subscript(position: Swift.Int) -> SwiftUI.SectionedFetchResults<SectionIdentifier, Result>.Section {
    get
  }
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Element = SwiftUI.SectionedFetchResults<SectionIdentifier, Result>.Section
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Index = Swift.Int
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Indices = Swift.Range<Swift.Int>
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Iterator = Swift.IndexingIterator<SwiftUI.SectionedFetchResults<SectionIdentifier, Result>>
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias SubSequence = Swift.Slice<SwiftUI.SectionedFetchResults<SectionIdentifier, Result>>
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@propertyWrapper @_Concurrency.MainActor @preconcurrency public struct SectionedFetchRequest<SectionIdentifier, Result> where SectionIdentifier : Swift.Hashable, Result : CoreData.NSFetchRequestResult {
  @_Concurrency.MainActor @preconcurrency public var wrappedValue: SwiftUI.SectionedFetchResults<SectionIdentifier, Result> {
    get
  }
  public struct Configuration {
    public var sectionIdentifier: Swift.KeyPath<Result, SectionIdentifier>
    public var nsSortDescriptors: [Foundation.NSSortDescriptor]
    public var nsPredicate: Foundation.NSPredicate?
  }
  @_Concurrency.MainActor @preconcurrency public var projectedValue: SwiftUICore.Binding<SwiftUI.SectionedFetchRequest<SectionIdentifier, Result>.Configuration> {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.SectionedFetchRequest : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.SectionedFetchRequest.Configuration : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.SectionedFetchRequest : SwiftUICore.DynamicProperty {
  @_Concurrency.MainActor @preconcurrency public static var _propertyBehaviors: Swift.UInt32 {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func update()
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.SectionedFetchRequest {
  @_Concurrency.MainActor @preconcurrency public init(entity: CoreData.NSEntityDescription, sectionIdentifier: Swift.KeyPath<Result, SectionIdentifier>, sortDescriptors: [Foundation.NSSortDescriptor], predicate: Foundation.NSPredicate? = nil, animation: SwiftUICore.Animation? = nil)
  @_Concurrency.MainActor @preconcurrency public init(fetchRequest: CoreData.NSFetchRequest<Result>, sectionIdentifier: Swift.KeyPath<Result, SectionIdentifier>, animation: SwiftUICore.Animation? = nil)
  @_Concurrency.MainActor @preconcurrency public init(fetchRequest: CoreData.NSFetchRequest<Result>, sectionIdentifier: Swift.KeyPath<Result, SectionIdentifier>, transaction: SwiftUICore.Transaction)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.SectionedFetchRequest where Result : CoreData.NSManagedObject {
  @_Concurrency.MainActor @preconcurrency public init(sectionIdentifier: Swift.KeyPath<Result, SectionIdentifier>, sortDescriptors: [Foundation.NSSortDescriptor], predicate: Foundation.NSPredicate? = nil, animation: SwiftUICore.Animation? = nil)
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init(sectionIdentifier: Swift.KeyPath<Result, SectionIdentifier>, sortDescriptors: [Foundation.SortDescriptor<Result>], predicate: Foundation.NSPredicate? = nil, animation: SwiftUICore.Animation? = nil)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.SectionedFetchRequest.Configuration where Result : CoreData.NSManagedObject {
  public var sortDescriptors: [Foundation.SortDescriptor<Result>] {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.SectionedFetchResults where Result : CoreData.NSManagedObject {
  @_Concurrency.MainActor @preconcurrency public var sortDescriptors: [Foundation.SortDescriptor<Result>] {
    get
    nonmutating set
  }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct _WKStoryboardContent : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(watchOS 6.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI20_WKStoryboardContentV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI._WKStoryboardContent : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityElement(children: SwiftUI.AccessibilityChildBehavior = .ignore) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.AccessibilityChildBehavior {
  public static let ignore: SwiftUI.AccessibilityChildBehavior
  public static let contain: SwiftUI.AccessibilityChildBehavior
  public static let combine: SwiftUI.AccessibilityChildBehavior
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct SearchSuggestionsPlacement : Swift.Equatable, Swift.Sendable {
  public static var automatic: SwiftUI.SearchSuggestionsPlacement {
    get
  }
  public static var menu: SwiftUI.SearchSuggestionsPlacement {
    get
  }
  public static var content: SwiftUI.SearchSuggestionsPlacement {
    get
  }
  public struct Set : Swift.OptionSet, Swift.Sendable {
    public typealias Element = SwiftUI.SearchSuggestionsPlacement.Set
    public var rawValue: Swift.Int
    public static var menu: SwiftUI.SearchSuggestionsPlacement.Set {
      get
    }
    public static var content: SwiftUI.SearchSuggestionsPlacement.Set {
      get
    }
    public init(rawValue: Swift.Int)
    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
    public typealias ArrayLiteralElement = SwiftUI.SearchSuggestionsPlacement.Set.Element
    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
    public typealias RawValue = Swift.Int
  }
  public static func == (a: SwiftUI.SearchSuggestionsPlacement, b: SwiftUI.SearchSuggestionsPlacement) -> Swift.Bool
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.FormStyle where Self == SwiftUI.AutomaticFormStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.AutomaticFormStyle {
    get { .init() }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct AutomaticFormStyle : SwiftUI.FormStyle {
  public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.AutomaticFormStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI18AutomaticFormStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.AutomaticFormStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@preconcurrency @_Concurrency.MainActor public protocol LabeledContentStyle {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.LabeledContentStyleConfiguration
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct LabeledContentStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Label : SwiftUICore.View {
    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
    public typealias Body = Swift.Never
  }
  @_Concurrency.MainActor @preconcurrency public struct Content : SwiftUICore.View {
    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
    public typealias Body = Swift.Never
  }
  public let label: SwiftUI.LabeledContentStyleConfiguration.Label
  public let content: SwiftUI.LabeledContentStyleConfiguration.Content
}
@available(*, unavailable)
extension SwiftUI.LabeledContentStyleConfiguration : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.LabeledContentStyleConfiguration.Label : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.LabeledContentStyleConfiguration.Content : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.View {
  nonisolated public func labeledContentStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.LabeledContentStyle
  
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.WindowToolbarStyle where Self == SwiftUI.ExpandedWindowToolbarStyle {
  @_alwaysEmitIntoClient public static var expanded: SwiftUI.ExpandedWindowToolbarStyle {
    get { .init() }
  }
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct ExpandedWindowToolbarStyle : SwiftUI.WindowToolbarStyle {
  public typealias _Body = Swift.Never
  public init()
}
@available(*, unavailable)
extension SwiftUI.ExpandedWindowToolbarStyle : Swift.Sendable {
}
@available(iOS 16.0, tvOS 16.0, *)
@available(macOS, unavailable)
public struct UIHostingControllerSizingOptions : Swift.OptionSet, Swift.Sendable {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let preferredContentSize: SwiftUI.UIHostingControllerSizingOptions
  public static let intrinsicContentSize: SwiftUI.UIHostingControllerSizingOptions
  @available(iOS 16.0, tvOS 16.0, *)
  @available(macOS, unavailable)
  public typealias ArrayLiteralElement = SwiftUI.UIHostingControllerSizingOptions
  @available(iOS 16.0, tvOS 16.0, *)
  @available(macOS, unavailable)
  public typealias Element = SwiftUI.UIHostingControllerSizingOptions
  @available(iOS 16.0, tvOS 16.0, *)
  @available(macOS, unavailable)
  public typealias RawValue = Swift.Int
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@available(visionOS, unavailable)
extension SwiftUICore.ShapeStyle where Self == SwiftUI.WindowBackgroundShapeStyle {
  @_alwaysEmitIntoClient public static var windowBackground: SwiftUI.WindowBackgroundShapeStyle {
    get { .init() }
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@available(visionOS, unavailable)
public struct WindowBackgroundShapeStyle : SwiftUICore.ShapeStyle {
  public init()
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  @available(visionOS, unavailable)
  public typealias Resolved = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.PickerStyle where Self == SwiftUI.MenuPickerStyle {
  @_alwaysEmitIntoClient public static var menu: SwiftUI.MenuPickerStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)
@available(watchOS, unavailable)
public struct MenuPickerStyle : SwiftUI.PickerStyle {
  public init()
  public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.MenuPickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.MenuPickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.MenuPickerStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, visionOS 1.0, *)
@available(tvOS, unavailable)
public struct SpatialTapGesture : SwiftUICore.Gesture {
  public struct Value : Swift.Equatable, @unchecked Swift.Sendable {
    public var location: CoreFoundation.CGPoint
    public static func == (a: SwiftUI.SpatialTapGesture.Value, b: SwiftUI.SpatialTapGesture.Value) -> Swift.Bool
  }
  public var count: Swift.Int
  public var coordinateSpace: SwiftUICore.CoordinateSpace
  @available(iOS, introduced: 16.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(macOS, introduced: 13.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(watchOS, introduced: 9.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(tvOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @_disfavoredOverload public init(count: Swift.Int = 1, coordinateSpace: SwiftUICore.CoordinateSpace = .local)
  @available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
  @available(tvOS, unavailable)
  public init(count: Swift.Int = 1, coordinateSpace: some CoordinateSpaceProtocol = .local)
  nonisolated public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUI.SpatialTapGesture>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<SwiftUI.SpatialTapGesture.Value>
  @available(iOS 16.0, watchOS 9.0, visionOS 1.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.SpatialTapGesture : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS, introduced: 16.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(macOS, introduced: 13.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(watchOS, introduced: 9.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(tvOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @_disfavoredOverload nonisolated public func onTapGesture(count: Swift.Int = 1, coordinateSpace: SwiftUICore.CoordinateSpace = .local, perform action: @escaping (CoreFoundation.CGPoint) -> Swift.Void) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
  @available(tvOS, unavailable)
  nonisolated public func onTapGesture(count: Swift.Int = 1, coordinateSpace: some CoordinateSpaceProtocol = .local, perform action: @escaping (CoreFoundation.CGPoint) -> Swift.Void) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func interactionActivityTrackingTag(_ tag: Swift.String) -> some SwiftUICore.View
  
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
public protocol _UIHostingViewable : AnyObject {
  var rootView: SwiftUICore.AnyView { get set }
  func _render(seconds: Swift.Double)
  func _forEachIdentifiedView(body: (SwiftUICore._IdentifiedViewProxy) -> Swift.Void)
  func sizeThatFits(in size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  var _disableSafeArea: Swift.Bool { get set }
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  var _rendererConfiguration: SwiftUICore._RendererConfiguration { get set }
  var _rendererObject: Swift.AnyObject? { get }
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
extension SwiftUI.UIHostingController : SwiftUI._UIHostingViewable where Content == SwiftUICore.AnyView {
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
public func _makeUIHostingController(_ view: SwiftUICore.AnyView) -> any ObjectiveC.NSObject & SwiftUI._UIHostingViewable
@available(iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@available(macOS, unavailable)
public func _makeUIHostingController(_ view: SwiftUICore.AnyView, tracksContentSize: Swift.Bool, secure: Swift.Bool = false) -> any ObjectiveC.NSObject & SwiftUI._UIHostingViewable
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public func _makeWatchKitUIHostingController(_ view: SwiftUICore.AnyView) -> any ObjectiveC.NSObject & SwiftUI._UIHostingViewable
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, visionOS 1.0, *)
extension SwiftUI.WindowGroup {
  @_alwaysEmitIntoClient nonisolated public init(id: Swift.String, @SwiftUICore.ViewBuilder makeContent: @escaping () -> Content) {
        if #available(
            iOS 17.5, macOS 14.5, tvOS 17.5, watchOS 10.5, visionOS 1.3, *
        ) {
            self.init(id: id, lazyContent: makeContent)
        } else {
            self.init(id: id, content: makeContent)
        }
    }
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init(_ title: SwiftUICore.Text, id: Swift.String, @SwiftUICore.ViewBuilder makeContent: @escaping () -> Content) {
        if #available(
            iOS 17.5, macOS 14.5, tvOS 17.5, watchOS 10.5, visionOS 1.3, *
        ) {
            self.init(id: id, title: title, lazyContent: makeContent)
        } else {
            self.init(title, id: id, content: makeContent)
        }
    }
  @_alwaysEmitIntoClient nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, id: Swift.String, @SwiftUICore.ViewBuilder makeContent: @escaping () -> Content) {
        self.init(Text(titleKey), id: id, makeContent: makeContent)
    }
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<S>(_ title: S, id: Swift.String, @SwiftUICore.ViewBuilder makeContent: @escaping () -> Content) where S : Swift.StringProtocol {
        self.init(Text(title), id: id, makeContent: makeContent)
    }
  @_alwaysEmitIntoClient nonisolated public init(@SwiftUICore.ViewBuilder makeContent: @escaping () -> Content) {
        if #available(
            iOS 17.5, macOS 14.5, tvOS 17.5, watchOS 10.5, visionOS 1.3, *
        ) {
            self.init(lazyContent: makeContent)
        } else {
            self.init(content: makeContent)
        }
    }
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init(_ title: SwiftUICore.Text, @SwiftUICore.ViewBuilder makeContent: @escaping () -> Content) {
        if #available(
            iOS 17.5, macOS 14.5, tvOS 17.5, watchOS 10.5, visionOS 1.3, *
        ) {
            self.init(title: title, lazyContent: makeContent)
        } else {
            self.init(title, content: makeContent)
        }
    }
  @_alwaysEmitIntoClient nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder makeContent: @escaping () -> Content) {
        self.init(Text(titleKey), makeContent: makeContent)
    }
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<S>(_ title: S, @SwiftUICore.ViewBuilder makeContent: @escaping () -> Content) where S : Swift.StringProtocol {
        self.init(Text(title), makeContent: makeContent)
    }
}
@available(iOS 17.5, macOS 14.5, tvOS 17.5, watchOS 10.5, visionOS 1.3, *)
extension SwiftUI.WindowGroup {
  @usableFromInline
  nonisolated internal init(id: Swift.String? = nil, title: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder lazyContent: @escaping () -> Content)
}
@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
extension SwiftUICore.View {
  nonisolated public func presentationBackground<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle
  
  nonisolated public func presentationBackground<V>(alignment: SwiftUICore.Alignment = .center, @SwiftUICore.ViewBuilder content: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct WindowDragGesture : SwiftUICore.Gesture {
  public struct Value : Swift.Equatable {
    public static func == (a: SwiftUI.WindowDragGesture.Value, b: SwiftUI.WindowDragGesture.Value) -> Swift.Bool
  }
  public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.Gesture<SwiftUI.WindowDragGesture.Value> {
    get
  }
  @available(macOS 15.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI17WindowDragGestureV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.WindowDragGesture : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.WindowDragGesture.Value : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct RenameButton<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  public init() where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image>
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI12RenameButtonV4bodyQrvp", 0) __<Label>
}
@available(*, unavailable)
extension SwiftUI.RenameButton : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func renameAction(_ isFocused: SwiftUI.FocusState<Swift.Bool>.Binding) -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func renameAction(_ action: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct RenameAction {
  public func callAsFunction()
}
@available(*, unavailable)
extension SwiftUI.RenameAction : Swift.Sendable {
}
extension SwiftUICore.EnvironmentValues {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public var rename: SwiftUI.RenameAction? {
    get
  }
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
@available(macOS, unavailable)
@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
@available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
extension SwiftUI.NavigationViewStyle where Self == SwiftUI.StackNavigationViewStyle {
  @_alwaysEmitIntoClient public static var stack: SwiftUI.StackNavigationViewStyle {
    get { .init() }
  }
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
@available(macOS, unavailable)
@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
@available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
public struct StackNavigationViewStyle : SwiftUI.NavigationViewStyle {
  public init()
  public func _body(configuration: SwiftUI._NavigationViewStyleConfiguration) -> some SwiftUICore.View
  
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @available(macOS, unavailable)
  public func _columnBasedBody(configuration: SwiftUI._NavigationViewStyleConfiguration) -> some SwiftUICore.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
  @available(macOS, unavailable, message: "replace stack-styled NavigationView with NavigationStack")
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI24StackNavigationViewStyleV5_body13configurationQrAA01_deF13ConfigurationV_tF", 0) __
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
  @available(macOS, unavailable, message: "replace stack-styled NavigationView with NavigationStack")
  public typealias _Body2 = @_opaqueReturnTypeOf("$s7SwiftUI24StackNavigationViewStyleV16_columnBasedBody13configurationQrAA01_deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.StackNavigationViewStyle : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct Label<Title, Icon> : SwiftUICore.View where Title : SwiftUICore.View, Icon : SwiftUICore.View {
  public init(@SwiftUICore.ViewBuilder title: () -> Title, @SwiftUICore.ViewBuilder icon: () -> Icon)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI5LabelV4bodyQrvp", 0) __<Title, Icon>
}
@available(*, unavailable)
extension SwiftUI.Label : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Label where Title == SwiftUICore.Text, Icon == SwiftUICore.Image {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, image name: Swift.String)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage name: Swift.String)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, image name: Swift.String) where S : Swift.StringProtocol
  @_disfavoredOverload nonisolated public init<S>(_ title: S, systemImage name: Swift.String) where S : Swift.StringProtocol
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Label where Title == SwiftUICore.Text, Icon == SwiftUICore.Image {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, image resource: DeveloperToolsSupport.ImageResource)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, image resource: DeveloperToolsSupport.ImageResource) where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Label where Title == SwiftUI.LabelStyleConfiguration.Title, Icon == SwiftUI.LabelStyleConfiguration.Icon {
  nonisolated public init(_ configuration: SwiftUI.LabelStyleConfiguration)
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DisclosureTableRow<Label, Content> : SwiftUI.TableRowContent where Label : SwiftUI.TableRowContent, Content : SwiftUI.TableRowContent, Label.TableRowValue == Content.TableRowValue {
  public typealias TableRowValue = Label.TableRowValue
  public init<Value>(_ value: Value, isExpanded: SwiftUICore.Binding<Swift.Bool>? = nil, @SwiftUI.TableRowBuilder<Value> content: @escaping () -> Content) where Label == SwiftUI.TableRow<Value>, Value == Content.TableRowValue
  @_Concurrency.MainActor @preconcurrency public var tableRowBody: some SwiftUI.TableRowContent {
    get
  }
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias TableRowBody = @_opaqueReturnTypeOf("$s7SwiftUI18DisclosureTableRowV05tableE4BodyQrvp", 0) __<Label, Content>
}
@available(*, unavailable)
extension SwiftUI.DisclosureTableRow : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct BadgeProminence : Swift.Hashable, Swift.Sendable {
  public static let decreased: SwiftUI.BadgeProminence
  public static let standard: SwiftUI.BadgeProminence
  public static let increased: SwiftUI.BadgeProminence
  public static func == (a: SwiftUI.BadgeProminence, b: SwiftUI.BadgeProminence) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macOS 14.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  @inlinable nonisolated public func badgeProminence(_ prominence: SwiftUI.BadgeProminence) -> some SwiftUICore.View {
        environment(\.badgeProminence, prominence)
    }
  
}
@available(iOS 17.0, macOS 14.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var badgeProminence: SwiftUI.BadgeProminence {
    get
    set
  }
}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
public struct AccessibilityZoomGestureAction {
  @frozen public enum Direction {
    case zoomIn
    case zoomOut
    public static func == (a: SwiftUI.AccessibilityZoomGestureAction.Direction, b: SwiftUI.AccessibilityZoomGestureAction.Direction) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let direction: SwiftUI.AccessibilityZoomGestureAction.Direction
  public let location: SwiftUICore.UnitPoint
  public let point: CoreFoundation.CGPoint
}
@available(*, unavailable)
extension SwiftUI.AccessibilityZoomGestureAction : Swift.Sendable {
}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityZoomAction(_ handler: @escaping (SwiftUI.AccessibilityZoomGestureAction) -> Swift.Void) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityZoomAction(_ handler: @escaping (SwiftUI.AccessibilityZoomGestureAction) -> Swift.Void) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 13.0, macOS 10.15, tvOS 18.0, watchOS 6.0, *)
extension SwiftUI.ToggleStyle where Self == SwiftUI.SwitchToggleStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var `switch`: SwiftUI.SwitchToggleStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 18.0, watchOS 6.0, *)
public struct SwitchToggleStyle : SwiftUI.ToggleStyle {
  public init()
  @available(iOS, introduced: 14.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(macOS, introduced: 11.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(tvOS, unavailable)
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  public init(tint: SwiftUICore.Color)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.SwitchToggleStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 18.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI17SwitchToggleStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.SwitchToggleStyle : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityActivationPoint(_ activationPoint: CoreFoundation.CGPoint, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityActivationPoint(_ activationPoint: SwiftUICore.UnitPoint, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityActivationPoint(_ activationPoint: CoreFoundation.CGPoint, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
  nonisolated public func accessibilityActivationPoint(_ activationPoint: SwiftUICore.UnitPoint, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func accessibilityDragPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.Text, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityDragPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.LocalizedStringKey, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload nonisolated public func accessibilityDragPoint<S>(_ point: SwiftUICore.UnitPoint, description: S, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
  nonisolated public func accessibilityDropPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.Text, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityDropPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.LocalizedStringKey, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload nonisolated public func accessibilityDropPoint<S>(_ point: SwiftUICore.UnitPoint, description: S, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityDragPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.Text, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
  nonisolated public func accessibilityDragPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.LocalizedStringKey, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_disfavoredOverload nonisolated public func accessibilityDragPoint<S>(_ point: SwiftUICore.UnitPoint, description: S, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
  nonisolated public func accessibilityDropPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.Text, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
  nonisolated public func accessibilityDropPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.LocalizedStringKey, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_disfavoredOverload nonisolated public func accessibilityDropPoint<S>(_ point: SwiftUICore.UnitPoint, description: S, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityActivationPoint(_ activationPoint: CoreFoundation.CGPoint) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityActivationPoint(_ activationPoint: SwiftUICore.UnitPoint) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityActivationPoint(_ activationPoint: CoreFoundation.CGPoint) -> SwiftUICore.ModifiedContent<Content, Modifier>
  nonisolated public func accessibilityActivationPoint(_ activationPoint: SwiftUICore.UnitPoint) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func accessibilityDragPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityDragPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.LocalizedStringKey) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload nonisolated public func accessibilityDragPoint<S>(_ point: SwiftUICore.UnitPoint, description: S) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
  nonisolated public func accessibilityDropPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityDropPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.LocalizedStringKey) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload nonisolated public func accessibilityDropPoint<S>(_ point: SwiftUICore.UnitPoint, description: S) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityDragPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Content, Modifier>
  nonisolated public func accessibilityDragPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.LocalizedStringKey) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_disfavoredOverload nonisolated public func accessibilityDragPoint<S>(_ point: SwiftUICore.UnitPoint, description: S) -> SwiftUICore.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
  nonisolated public func accessibilityDropPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Content, Modifier>
  nonisolated public func accessibilityDropPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.LocalizedStringKey) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_disfavoredOverload nonisolated public func accessibilityDropPoint<S>(_ point: SwiftUICore.UnitPoint, description: S) -> SwiftUICore.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func defaultAdaptableTabBarPlacement(_ defaultPlacement: SwiftUI.AdaptableTabBarPlacement = .automatic) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct AdaptableTabBarPlacement : Swift.Hashable {
  public static let automatic: SwiftUI.AdaptableTabBarPlacement
  public static let tabBar: SwiftUI.AdaptableTabBarPlacement
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let sidebar: SwiftUI.AdaptableTabBarPlacement
  public static func == (a: SwiftUI.AdaptableTabBarPlacement, b: SwiftUI.AdaptableTabBarPlacement) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.AdaptableTabBarPlacement : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ColorPicker<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  public init(selection: SwiftUICore.Binding<SwiftUICore.Color>, supportsOpacity: Swift.Bool = true, @SwiftUICore.ViewBuilder label: () -> Label)
  public init(selection: SwiftUICore.Binding<CoreGraphics.CGColor>, supportsOpacity: Swift.Bool = true, @SwiftUICore.ViewBuilder label: () -> Label)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11ColorPickerV4bodyQrvp", 0) __<Label>
}
@available(*, unavailable)
extension SwiftUI.ColorPicker : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ColorPicker where Label == SwiftUICore.Text {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<SwiftUICore.Color>, supportsOpacity: Swift.Bool = true)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, selection: SwiftUICore.Binding<SwiftUICore.Color>, supportsOpacity: Swift.Bool = true) where S : Swift.StringProtocol
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<CoreGraphics.CGColor>, supportsOpacity: Swift.Bool = true)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, selection: SwiftUICore.Binding<CoreGraphics.CGColor>, supportsOpacity: Swift.Bool = true) where S : Swift.StringProtocol
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@frozen @propertyWrapper @preconcurrency @_Concurrency.MainActor public struct FocusedObject<ObjectType> : SwiftUICore.DynamicProperty where ObjectType : Combine.ObservableObject {
  @preconcurrency @_Concurrency.MainActor @dynamicMemberLookup @frozen public struct Wrapper {
    @_Concurrency.MainActor @preconcurrency internal let root: ObjectType
    @_Concurrency.MainActor @preconcurrency public subscript<T>(dynamicMember keyPath: Swift.ReferenceWritableKeyPath<ObjectType, T>) -> SwiftUICore.Binding<T> {
      get
    }
  }
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var _store: ObjectType?
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var _seed: Swift.Int = 0
  @inlinable @_Concurrency.MainActor @preconcurrency public var wrappedValue: ObjectType? {
    get { _store }
  }
  @_Concurrency.MainActor @preconcurrency public var projectedValue: SwiftUI.FocusedObject<ObjectType>.Wrapper? {
    get
  }
  nonisolated public static var _propertyBehaviors: Swift.UInt32 {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init()
  nonisolated public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
}
@available(*, unavailable)
extension SwiftUI.FocusedObject.Wrapper : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.FocusedObject : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func focusedObject<T>(_ object: T) -> some SwiftUICore.View where T : Combine.ObservableObject {
        focusedValue(T.focusedValueKey, object)
    }
  
  @inlinable nonisolated public func focusedObject<T>(_ object: T?) -> some SwiftUICore.View where T : Combine.ObservableObject { focusedValue(T.focusedValueKey, object) }
  
  @inlinable nonisolated public func focusedSceneObject<T>(_ object: T) -> some SwiftUICore.View where T : Combine.ObservableObject {
        focusedSceneValue(T.focusedValueKey, object)
    }
  
  @inlinable nonisolated public func focusedSceneObject<T>(_ object: T?) -> some SwiftUICore.View where T : Combine.ObservableObject { focusedSceneValue(T.focusedValueKey, object) }
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension Combine.ObservableObject {
  @usableFromInline
  internal static var focusedValueKey: Swift.WritableKeyPath<SwiftUI.FocusedValues, Self?> {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct ToolbarPlacement {
  public static var automatic: SwiftUI.ToolbarPlacement {
    get
  }
  @available(watchOS 10.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public static var bottomBar: SwiftUI.ToolbarPlacement {
    get
  }
  @available(macOS, unavailable)
  public static var navigationBar: SwiftUI.ToolbarPlacement {
    get
  }
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static var windowToolbar: SwiftUI.ToolbarPlacement {
    get
  }
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public static var tabBar: SwiftUI.ToolbarPlacement {
    get
  }
  @backDeployed(before: macOS 14.0)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static func accessoryBar<ID>(id: ID) -> SwiftUI.ToolbarPlacement where ID : Swift.Hashable
  @available(macOS 14.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @usableFromInline
  internal static func backDeployable_accessoryBar<ID>(id: ID) -> SwiftUI.ToolbarPlacement where ID : Swift.Hashable
  @available(visionOS 1.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static var bottomOrnament: SwiftUI.ToolbarPlacement {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.ToolbarPlacement : Swift.Sendable {
}
extension SwiftUI.ToolbarPlacement {
  @available(iOS, unavailable)
  @available(macOS, introduced: 13.0, deprecated: 14.0, renamed: "accessoryBar")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public init<ID>(id: ID) where ID : Swift.Hashable
}
@available(iOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DocumentGroupLaunchScene<Actions> : SwiftUI.Scene where Actions : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Scene {
    get
  }
  @available(iOS 18.0, visionOS 2.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24DocumentGroupLaunchSceneV4bodyQrvp", 0) __<Actions>
}
@available(iOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DocumentGroupLaunchScene {
  nonisolated public init(_ title: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  nonisolated public init(_ title: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  nonisolated public init(_ title: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  nonisolated public init(_ title: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> some View)
  @_disfavoredOverload nonisolated public init(_ title: some StringProtocol, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  @_disfavoredOverload nonisolated public init(_ title: some StringProtocol, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  @_disfavoredOverload nonisolated public init(_ title: some StringProtocol, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  @_disfavoredOverload nonisolated public init(_ title: some StringProtocol, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> some View)
  nonisolated public init(_ title: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  nonisolated public init(_ title: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  nonisolated public init(_ title: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  nonisolated public init(_ title: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> some View)
}
@available(iOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DocumentGroupLaunchScene {
  nonisolated public init<B>(_ title: SwiftUICore.LocalizedStringKey, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions = { DefaultDocumentGroupLaunchActions() }, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  nonisolated public init<B>(_ title: SwiftUICore.LocalizedStringKey, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions = { DefaultDocumentGroupLaunchActions() }, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  nonisolated public init<B>(_ title: SwiftUICore.LocalizedStringKey, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions = { DefaultDocumentGroupLaunchActions() }, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  nonisolated public init<B>(_ title: SwiftUICore.LocalizedStringKey, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions = { DefaultDocumentGroupLaunchActions() }) where B : SwiftUICore.ShapeStyle
  @_disfavoredOverload nonisolated public init<B>(_ title: some StringProtocol, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions = { DefaultDocumentGroupLaunchActions() }, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  @_disfavoredOverload nonisolated public init<B>(_ title: some StringProtocol, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions = { DefaultDocumentGroupLaunchActions() }, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  @_disfavoredOverload nonisolated public init<B>(_ title: some StringProtocol, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions = { DefaultDocumentGroupLaunchActions() }, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  @_disfavoredOverload nonisolated public init<B>(_ title: some StringProtocol, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions = { DefaultDocumentGroupLaunchActions() }) where B : SwiftUICore.ShapeStyle
  nonisolated public init<B>(_ title: SwiftUICore.Text? = nil, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions = { DefaultDocumentGroupLaunchActions() }, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  nonisolated public init<B>(_ title: SwiftUICore.Text? = nil, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions = { DefaultDocumentGroupLaunchActions() }, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  nonisolated public init<B>(_ title: SwiftUICore.Text? = nil, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions = { DefaultDocumentGroupLaunchActions() }, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  nonisolated public init<B>(_ title: SwiftUICore.Text? = nil, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions = { DefaultDocumentGroupLaunchActions() }) where B : SwiftUICore.ShapeStyle
}
@available(*, unavailable)
extension SwiftUI.DocumentGroupLaunchScene : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct AccessibilityActionKind : Swift.Equatable, Swift.Sendable {
  public static let `default`: SwiftUI.AccessibilityActionKind
  public static let escape: SwiftUI.AccessibilityActionKind
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  @available(macOS, unavailable)
  public static let magicTap: SwiftUI.AccessibilityActionKind
  @available(macOS 10.15, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static let delete: SwiftUI.AccessibilityActionKind
  @available(macOS 10.15, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static let showMenu: SwiftUI.AccessibilityActionKind
  public init(named name: SwiftUICore.Text)
  public static func == (a: SwiftUI.AccessibilityActionKind, b: SwiftUI.AccessibilityActionKind) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityAction(_ actionKind: SwiftUI.AccessibilityActionKind = .default, _ handler: @escaping () -> Swift.Void) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityAction(named name: SwiftUICore.Text, _ handler: @escaping () -> Swift.Void) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityAction(_ actionKind: SwiftUI.AccessibilityActionKind = .default, _ handler: @escaping () -> Swift.Void) -> SwiftUICore.ModifiedContent<Content, Modifier>
  nonisolated public func accessibilityAction(named name: SwiftUICore.Text, _ handler: @escaping () -> Swift.Void) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityAction<Label>(action: @escaping () -> Swift.Void, @SwiftUICore.ViewBuilder label: () -> Label) -> some SwiftUICore.View where Label : SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityActions<Content>(@SwiftUICore.ViewBuilder _ content: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityAction(named nameKey: SwiftUICore.LocalizedStringKey, _ handler: @escaping () -> Swift.Void) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload nonisolated public func accessibilityAction<S>(named name: S, _ handler: @escaping () -> Swift.Void) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityAction(named nameKey: SwiftUICore.LocalizedStringKey, _ handler: @escaping () -> Swift.Void) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_disfavoredOverload nonisolated public func accessibilityAction<S>(named name: S, _ handler: @escaping () -> Swift.Void) -> SwiftUICore.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, *)
@available(watchOS, unavailable)
public struct _DisclosureIndicator : SwiftUICore.View {
  public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI20_DisclosureIndicatorV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI._DisclosureIndicator : Swift.Sendable {
}
@available(visionOS 1.0, iOS 18.0, macOS 15.0, watchOS 11.0, *)
@available(tvOS, unavailable)
public struct SpatialEventGesture : SwiftUICore.Gesture {
  public init(coordinateSpace: any SwiftUICore.CoordinateSpaceProtocol = .local)
  public typealias Value = SwiftUI.SpatialEventCollection
  public let coordinateSpace: SwiftUICore.CoordinateSpace
  nonisolated public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUI.SpatialEventGesture>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<SwiftUI.SpatialEventGesture.Value>
  @available(iOS 18.0, watchOS 11.0, visionOS 1.0, macOS 15.0, *)
  @available(tvOS, unavailable)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.SpatialEventGesture : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func help(_ textKey: SwiftUICore.LocalizedStringKey) -> some SwiftUICore.View
  
  nonisolated public func help(_ text: SwiftUICore.Text) -> some SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func help<S>(_ text: S) -> some SwiftUICore.View where S : Swift.StringProtocol
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct ListRowBackgroundTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUICore.AnyView? {
    get { nil }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  internal typealias Value = SwiftUICore.AnyView?
}
@available(*, unavailable)
extension SwiftUI.ListRowBackgroundTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func listRowBackground<V>(_ view: V?) -> some SwiftUICore.View where V : SwiftUICore.View {
        return _trait(ListRowBackgroundTraitKey.self, view.map { AnyView($0) })
    }
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@usableFromInline
internal struct ClipsListRowBackgroundTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.ClipsListRowBackgroundTraitKey : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol Widget {
  associatedtype Body : SwiftUI.WidgetConfiguration
  @_Concurrency.MainActor @preconcurrency init()
  @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.AppearsActiveKey : SwiftUI.UITraitBridgedEnvironmentKey {
  @usableFromInline
  package static func read(from traitCollection: UIKit.UITraitCollection) -> Swift.Bool
  @usableFromInline
  package static func write(to mutableTraits: inout any UIKit.UIMutableTraits, value: Swift.Bool)
}
@available(iOS 17.0, tvOS 17.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public protocol UITraitBridgedEnvironmentKey : SwiftUICore.EnvironmentKey {
  static func read(from traitCollection: UIKit.UITraitCollection) -> Self.Value
  static func write(to mutableTraits: inout any UIKit.UIMutableTraits, value: Self.Value)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _ScrollableLayout : SwiftUICore.Animatable {
  associatedtype StateType = Swift.Void
  static func initialState() -> Self.StateType
  func update(state: inout Self.StateType, proxy: inout SwiftUI._ScrollableLayoutProxy)
  associatedtype ItemModifier : SwiftUICore.ViewModifier = SwiftUICore.EmptyModifier
  func modifier(for item: SwiftUI._ScrollableLayoutItem, layout: SwiftUICore._ScrollLayout, state: Self.StateType) -> Self.ItemModifier
  func decelerationTarget(contentOffset: CoreFoundation.CGPoint, originalContentOffset: CoreFoundation.CGPoint, velocity: SwiftUICore._Velocity<CoreFoundation.CGSize>, size: CoreFoundation.CGSize) -> CoreFoundation.CGPoint?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollableLayout where Self.StateType == () {
  public static func initialState() -> Self.StateType
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollableLayout where Self.ItemModifier == SwiftUICore.EmptyModifier {
  public func modifier(for item: SwiftUI._ScrollableLayoutItem, layout: SwiftUICore._ScrollLayout, state: Self.StateType) -> Self.ItemModifier
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollableLayout {
  public func decelerationTarget(contentOffset: CoreFoundation.CGPoint, originalContentOffset: CoreFoundation.CGPoint, velocity: SwiftUICore._Velocity<CoreFoundation.CGSize>, size: CoreFoundation.CGSize) -> CoreFoundation.CGPoint?
  public subscript<T>(data: T) -> SwiftUI._ScrollView<SwiftUI._ScrollableLayoutView<T, Self>> where T : Swift.RandomAccessCollection, T.Element : SwiftUICore.View, T.Index : Swift.Hashable {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollableLayout where Self : Swift.RandomAccessCollection, Self.Element : SwiftUICore.View, Self.Index : Swift.Hashable {
  public subscript() -> SwiftUI._ScrollView<SwiftUI._ScrollableLayoutView<Self, Self>> {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollableLayoutProxy : Swift.RandomAccessCollection {
  public let size: CoreFoundation.CGSize
  public let visibleRect: CoreFoundation.CGRect
  public let count: Swift.Int
  public var visibleItems: [SwiftUI._ScrollableLayoutItem]
  public var contentSize: CoreFoundation.CGSize
  public var validRect: CoreFoundation.CGRect
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(index: Swift.Int) -> Swift.AnyHashable {
    get
  }
  public mutating func size(of identifier: Swift.AnyHashable, in size: CoreFoundation.CGSize, validatingContent: Swift.Bool = true) -> CoreFoundation.CGSize
  public mutating func size(at index: Swift.Int, in size: CoreFoundation.CGSize, validatingContent: Swift.Bool = true) -> CoreFoundation.CGSize
  public mutating func removeSize(of identifier: Swift.AnyHashable)
  public mutating func removeAllSizes()
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Element = Swift.AnyHashable
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Index = Swift.Int
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Indices = Swift.Range<Swift.Int>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Iterator = Swift.IndexingIterator<SwiftUI._ScrollableLayoutProxy>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias SubSequence = Swift.Slice<SwiftUI._ScrollableLayoutProxy>
}
@available(*, unavailable)
extension SwiftUI._ScrollableLayoutProxy : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollableLayoutItem : Swift.Equatable {
  public var id: Swift.AnyHashable
  public var proposedSize: CoreFoundation.CGSize {
    get
  }
  public var anchor: SwiftUICore.UnitPoint {
    get
  }
  public var anchorPosition: CoreFoundation.CGPoint {
    get
  }
  public init(id: Swift.AnyHashable, proposedSize: CoreFoundation.CGSize, anchoring anchor: SwiftUICore.UnitPoint = .topLeading, at position: CoreFoundation.CGPoint)
  public static func == (a: SwiftUI._ScrollableLayoutItem, b: SwiftUI._ScrollableLayoutItem) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUI._ScrollableLayoutItem : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@preconcurrency @_Concurrency.MainActor public protocol LabelStyle {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.LabelStyleConfiguration
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct LabelStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Title {
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    public typealias Body = Swift.Never
  }
  @_Concurrency.MainActor @preconcurrency public struct Icon {
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    public typealias Body = Swift.Never
  }
  public var title: SwiftUI.LabelStyleConfiguration.Title {
    get
  }
  public var icon: SwiftUI.LabelStyleConfiguration.Icon {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.LabelStyleConfiguration : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.LabelStyleConfiguration.Icon : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.LabelStyleConfiguration.Title : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func labelStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.LabelStyle
  
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.WindowToolbarStyle where Self == SwiftUI.UnifiedCompactWindowToolbarStyle {
  @_alwaysEmitIntoClient public static var unifiedCompact: SwiftUI.UnifiedCompactWindowToolbarStyle {
    get {
        .init()
    }
  }
  @_alwaysEmitIntoClient public static func unifiedCompact(showsTitle: Swift.Bool) -> SwiftUI.UnifiedCompactWindowToolbarStyle {
        .init(showsTitle: showsTitle)
    }
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct UnifiedCompactWindowToolbarStyle : SwiftUI.WindowToolbarStyle {
  public typealias _Body = Swift.Never
  public init()
  public init(showsTitle: Swift.Bool)
}
@available(*, unavailable)
extension SwiftUI.UnifiedCompactWindowToolbarStyle : Swift.Sendable {
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func onDrag(_ data: @escaping () -> Foundation.NSItemProvider) -> some SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func onDrag<V>(_ data: @escaping () -> Foundation.NSItemProvider, @SwiftUICore.ViewBuilder preview: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func draggable<T>(_ payload: @autoclosure @escaping () -> T) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
  nonisolated public func draggable<V, T>(_ payload: @autoclosure @escaping () -> T, @SwiftUICore.ViewBuilder preview: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View, T : CoreTransferable.Transferable
  
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _DraggingModifier : SwiftUICore.ViewModifier {
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._DraggingModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.4, macOS 10.15, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._DraggingModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollViewProxy : Swift.Equatable {
  public var config: SwiftUI._ScrollViewConfig {
    get
  }
  public var contentOffset: CoreFoundation.CGPoint {
    get
    set
  }
  public var minContentOffset: CoreFoundation.CGPoint {
    get
  }
  public var maxContentOffset: CoreFoundation.CGPoint {
    get
  }
  public var contentSize: CoreFoundation.CGSize {
    get
  }
  public var pageSize: CoreFoundation.CGSize {
    get
  }
  public var visibleRect: CoreFoundation.CGRect {
    get
  }
  public var isDragging: Swift.Bool {
    get
  }
  public var isDecelerating: Swift.Bool {
    get
  }
  public var isScrolling: Swift.Bool {
    get
  }
  public var isScrollingHorizontally: Swift.Bool {
    get
  }
  public var isScrollingVertically: Swift.Bool {
    get
  }
  public func setContentOffset(_ newOffset: CoreFoundation.CGPoint, animated: Swift.Bool, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func scrollRectToVisible(_ rect: CoreFoundation.CGRect, animated: Swift.Bool, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func contentOffsetOfNextPage(_ directions: SwiftUI._EventDirections) -> CoreFoundation.CGPoint
  public static func == (lhs: SwiftUI._ScrollViewProxy, rhs: SwiftUI._ScrollViewProxy) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUI._ScrollViewProxy : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ContainedScrollViewKey {
  public typealias Value = SwiftUI._ScrollViewProxy?
  public static func reduce(value: inout SwiftUI._ContainedScrollViewKey.Value, nextValue: () -> SwiftUI._ContainedScrollViewKey.Value)
}
@available(*, unavailable)
extension SwiftUI._ContainedScrollViewKey : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore._PreferenceWritingModifier : SwiftUI._SceneModifier {
  public static func _makeScene(modifier: SwiftUICore._GraphValue<SwiftUICore._PreferenceWritingModifier<Key>>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.Scene {
  @inlinable nonisolated internal func preference<K>(key: K.Type = K.self, value: K.Value) -> some SwiftUI.Scene where K : SwiftUICore.PreferenceKey {
        modifier(_PreferenceWritingModifier<K>(value: value))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore._PreferenceTransformModifier : SwiftUI._SceneModifier {
  public static func _makeScene(modifier: SwiftUICore._GraphValue<SwiftUICore._PreferenceTransformModifier<Key>>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.Scene {
  @inlinable nonisolated internal func transformPreference<K>(_ key: K.Type = K.self, _ callback: @escaping (inout K.Value) -> Swift.Void) -> some SwiftUI.Scene where K : SwiftUICore.PreferenceKey {
        modifier(_PreferenceTransformModifier<K>(transform: callback))
    }
  
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct AccessoryCircularGaugeStyle : SwiftUI.GaugeStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.AccessoryCircularGaugeStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, watchOS 9.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI27AccessoryCircularGaugeStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.AccessoryCircularGaugeStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.GaugeStyle where Self == SwiftUI.AccessoryCircularGaugeStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var accessoryCircular: SwiftUI.AccessoryCircularGaugeStyle {
    get { .init() }
  }
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct Window<Content> : SwiftUI.Scene where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Scene {
    get
  }
  public init(_ title: SwiftUICore.Text, id: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, id: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload public init<S>(_ title: S, id: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI6WindowV4bodyQrvp", 0) __<Content>
}
@available(*, unavailable)
extension SwiftUI.Window : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, watchOS 10.0, *)
@available(tvOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol DatePickerStyle {
  associatedtype Body : SwiftUICore.View
  @available(iOS 16.0, macOS 13.0, *)
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  @available(iOS 16.0, macOS 13.0, *)
  typealias Configuration = SwiftUI.DatePickerStyleConfiguration
  associatedtype _Body : SwiftUICore.View = SwiftUICore.EmptyView
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func _body(configuration: SwiftUI.DatePicker<Self._Label>) -> Self._Body
  typealias _Label = SwiftUI._DatePickerStyleLabel
}
@available(iOS 16.0, macOS 13.0, watchOS 10.0, *)
@available(tvOS, unavailable)
public struct DatePickerStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Label : SwiftUICore.View {
    @available(iOS 16.0, watchOS 10.0, macOS 13.0, *)
    @available(tvOS, unavailable)
    public typealias Body = Swift.Never
  }
  public let label: SwiftUI.DatePickerStyleConfiguration.Label
  @SwiftUICore.Binding @_projectedValueProperty($selection) public var selection: Foundation.Date {
    get
    @available(iOS 16.0, watchOS 10.0, macOS 13.0, *)
    @available(tvOS, unavailable)
    nonmutating set
    @available(iOS 16.0, watchOS 10.0, macOS 13.0, *)
    @available(tvOS, unavailable)
    nonmutating _modify
  }
  public var $selection: SwiftUICore.Binding<Foundation.Date> {
    get
  }
  public var minimumDate: Foundation.Date?
  public var maximumDate: Foundation.Date?
  public var displayedComponents: SwiftUI.DatePickerComponents
}
@available(*, unavailable)
extension SwiftUI.DatePickerStyleConfiguration : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.DatePickerStyleConfiguration.Label : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, watchOS 10.0, *)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func datePickerStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.DatePickerStyle
  
}
@available(iOS 13.0, macOS 10.15, watchOS 10.0, *)
@available(tvOS, unavailable)
public struct _DatePickerStyleLabel : SwiftUICore.View {
  @available(iOS 13.0, watchOS 10.0, macOS 10.15, *)
  @available(tvOS, unavailable)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._DatePickerStyleLabel : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, watchOS 10.0, *)
@available(tvOS, unavailable)
extension SwiftUI.DatePickerStyle where Self._Body == SwiftUICore.EmptyView {
  @_Concurrency.MainActor @preconcurrency public func _body(configuration: SwiftUI.DatePicker<Self._Label>) -> SwiftUICore.EmptyView
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> SwiftUI.TupleTableColumnContent<RowValue, Sort, (C0, C1)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C0.TableRowValue == C1.TableRowValue {
        TupleTableColumnContent((c0, c1), valueType: RowValue.self, sortType: Sort.self)
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> SwiftUI.TupleTableColumnContent<RowValue, Swift.Never, (C0, C1)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C0.TableColumnSortComparator == Swift.Never, C0.TableRowValue == C1.TableRowValue, C1.TableColumnSortComparator == Swift.Never {
        TupleTableColumnContent((c0, c1), valueType: RowValue.self, sortType: Never.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> SwiftUI.TupleTableColumnContent<RowValue, Sort, (C0, C1, C2)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue {
        TupleTableColumnContent((c0, c1, c2), valueType: RowValue.self, sortType: Sort.self)
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> SwiftUI.TupleTableColumnContent<RowValue, Swift.Never, (C0, C1, C2)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C0.TableColumnSortComparator == Swift.Never, C0.TableRowValue == C1.TableRowValue, C1.TableColumnSortComparator == Swift.Never, C1.TableRowValue == C2.TableRowValue, C2.TableColumnSortComparator == Swift.Never {
        TupleTableColumnContent((c0, c1, c2), valueType: RowValue.self, sortType: Never.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> SwiftUI.TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue {
        TupleTableColumnContent((c0, c1, c2, c3), valueType: RowValue.self, sortType: Sort.self)
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> SwiftUI.TupleTableColumnContent<RowValue, Swift.Never, (C0, C1, C2, C3)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C0.TableColumnSortComparator == Swift.Never, C0.TableRowValue == C1.TableRowValue, C1.TableColumnSortComparator == Swift.Never, C1.TableRowValue == C2.TableRowValue, C2.TableColumnSortComparator == Swift.Never, C2.TableRowValue == C3.TableRowValue, C3.TableColumnSortComparator == Swift.Never {
        TupleTableColumnContent((c0, c1, c2, c3), valueType: RowValue.self, sortType: Never.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> SwiftUI.TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue {
        TupleTableColumnContent((c0, c1, c2, c3, c4), valueType: RowValue.self, sortType: Sort.self)
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> SwiftUI.TupleTableColumnContent<RowValue, Swift.Never, (C0, C1, C2, C3, C4)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C0.TableColumnSortComparator == Swift.Never, C0.TableRowValue == C1.TableRowValue, C1.TableColumnSortComparator == Swift.Never, C1.TableRowValue == C2.TableRowValue, C2.TableColumnSortComparator == Swift.Never, C2.TableRowValue == C3.TableRowValue, C3.TableColumnSortComparator == Swift.Never, C3.TableRowValue == C4.TableRowValue, C4.TableColumnSortComparator == Swift.Never {
        TupleTableColumnContent((c0, c1, c2, c3, c4), valueType: RowValue.self, sortType: Never.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> SwiftUI.TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C5 : SwiftUI.TableColumnContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue, C4.TableRowValue == C5.TableRowValue {
        TupleTableColumnContent((c0, c1, c2, c3, c4, c5), valueType: RowValue.self, sortType: Sort.self)
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> SwiftUI.TupleTableColumnContent<RowValue, Swift.Never, (C0, C1, C2, C3, C4, C5)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C5 : SwiftUI.TableColumnContent, C0.TableColumnSortComparator == Swift.Never, C0.TableRowValue == C1.TableRowValue, C1.TableColumnSortComparator == Swift.Never, C1.TableRowValue == C2.TableRowValue, C2.TableColumnSortComparator == Swift.Never, C2.TableRowValue == C3.TableRowValue, C3.TableColumnSortComparator == Swift.Never, C3.TableRowValue == C4.TableRowValue, C4.TableColumnSortComparator == Swift.Never, C4.TableRowValue == C5.TableRowValue, C5.TableColumnSortComparator == Swift.Never {
        TupleTableColumnContent((c0, c1, c2, c3, c4, c5), valueType: RowValue.self, sortType: Never.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> SwiftUI.TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C5 : SwiftUI.TableColumnContent, C6 : SwiftUI.TableColumnContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue, C4.TableRowValue == C5.TableRowValue, C5.TableRowValue == C6.TableRowValue {
        TupleTableColumnContent((c0, c1, c2, c3, c4, c5, c6), valueType: RowValue.self, sortType: Sort.self)
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> SwiftUI.TupleTableColumnContent<RowValue, Swift.Never, (C0, C1, C2, C3, C4, C5, C6)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C5 : SwiftUI.TableColumnContent, C6 : SwiftUI.TableColumnContent, C0.TableColumnSortComparator == Swift.Never, C0.TableRowValue == C1.TableRowValue, C1.TableColumnSortComparator == Swift.Never, C1.TableRowValue == C2.TableRowValue, C2.TableColumnSortComparator == Swift.Never, C2.TableRowValue == C3.TableRowValue, C3.TableColumnSortComparator == Swift.Never, C3.TableRowValue == C4.TableRowValue, C4.TableColumnSortComparator == Swift.Never, C4.TableRowValue == C5.TableRowValue, C5.TableColumnSortComparator == Swift.Never, C5.TableRowValue == C6.TableRowValue, C6.TableColumnSortComparator == Swift.Never {
        TupleTableColumnContent((c0, c1, c2, c3, c4, c5, c6), valueType: RowValue.self, sortType: Never.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> SwiftUI.TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C5 : SwiftUI.TableColumnContent, C6 : SwiftUI.TableColumnContent, C7 : SwiftUI.TableColumnContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue, C4.TableRowValue == C5.TableRowValue, C5.TableRowValue == C6.TableRowValue, C6.TableRowValue == C7.TableRowValue {
        TupleTableColumnContent((c0, c1, c2, c3, c4, c5, c6, c7), valueType: RowValue.self, sortType: Sort.self)
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> SwiftUI.TupleTableColumnContent<RowValue, Swift.Never, (C0, C1, C2, C3, C4, C5, C6, C7)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C5 : SwiftUI.TableColumnContent, C6 : SwiftUI.TableColumnContent, C7 : SwiftUI.TableColumnContent, C0.TableColumnSortComparator == Swift.Never, C0.TableRowValue == C1.TableRowValue, C1.TableColumnSortComparator == Swift.Never, C1.TableRowValue == C2.TableRowValue, C2.TableColumnSortComparator == Swift.Never, C2.TableRowValue == C3.TableRowValue, C3.TableColumnSortComparator == Swift.Never, C3.TableRowValue == C4.TableRowValue, C4.TableColumnSortComparator == Swift.Never, C4.TableRowValue == C5.TableRowValue, C5.TableColumnSortComparator == Swift.Never, C5.TableRowValue == C6.TableRowValue, C6.TableColumnSortComparator == Swift.Never, C6.TableRowValue == C7.TableRowValue, C7.TableColumnSortComparator == Swift.Never {
        TupleTableColumnContent((c0, c1, c2, c3, c4, c5, c6, c7), valueType: RowValue.self, sortType: Never.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> SwiftUI.TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7, C8)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C5 : SwiftUI.TableColumnContent, C6 : SwiftUI.TableColumnContent, C7 : SwiftUI.TableColumnContent, C8 : SwiftUI.TableColumnContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue, C4.TableRowValue == C5.TableRowValue, C5.TableRowValue == C6.TableRowValue, C6.TableRowValue == C7.TableRowValue, C7.TableRowValue == C8.TableRowValue {
        TupleTableColumnContent((c0, c1, c2, c3, c4, c5, c6, c7, c8), valueType: RowValue.self, sortType: Sort.self)
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> SwiftUI.TupleTableColumnContent<RowValue, Swift.Never, (C0, C1, C2, C3, C4, C5, C6, C7, C8)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C5 : SwiftUI.TableColumnContent, C6 : SwiftUI.TableColumnContent, C7 : SwiftUI.TableColumnContent, C8 : SwiftUI.TableColumnContent, C0.TableColumnSortComparator == Swift.Never, C0.TableRowValue == C1.TableRowValue, C1.TableColumnSortComparator == Swift.Never, C1.TableRowValue == C2.TableRowValue, C2.TableColumnSortComparator == Swift.Never, C2.TableRowValue == C3.TableRowValue, C3.TableColumnSortComparator == Swift.Never, C3.TableRowValue == C4.TableRowValue, C4.TableColumnSortComparator == Swift.Never, C4.TableRowValue == C5.TableRowValue, C5.TableColumnSortComparator == Swift.Never, C5.TableRowValue == C6.TableRowValue, C6.TableColumnSortComparator == Swift.Never, C6.TableRowValue == C7.TableRowValue, C7.TableColumnSortComparator == Swift.Never, C7.TableRowValue == C8.TableRowValue, C8.TableColumnSortComparator == Swift.Never {
        TupleTableColumnContent((c0, c1, c2, c3, c4, c5, c6, c7, c8), valueType: RowValue.self, sortType: Never.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> SwiftUI.TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C5 : SwiftUI.TableColumnContent, C6 : SwiftUI.TableColumnContent, C7 : SwiftUI.TableColumnContent, C8 : SwiftUI.TableColumnContent, C9 : SwiftUI.TableColumnContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue, C4.TableRowValue == C5.TableRowValue, C5.TableRowValue == C6.TableRowValue, C6.TableRowValue == C7.TableRowValue, C7.TableRowValue == C8.TableRowValue, C8.TableRowValue == C9.TableRowValue {
        TupleTableColumnContent((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9), valueType: RowValue.self, sortType: Sort.self)
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> SwiftUI.TupleTableColumnContent<RowValue, Swift.Never, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C5 : SwiftUI.TableColumnContent, C6 : SwiftUI.TableColumnContent, C7 : SwiftUI.TableColumnContent, C8 : SwiftUI.TableColumnContent, C9 : SwiftUI.TableColumnContent, C0.TableColumnSortComparator == Swift.Never, C0.TableRowValue == C1.TableRowValue, C1.TableColumnSortComparator == Swift.Never, C1.TableRowValue == C2.TableRowValue, C2.TableColumnSortComparator == Swift.Never, C2.TableRowValue == C3.TableRowValue, C3.TableColumnSortComparator == Swift.Never, C3.TableRowValue == C4.TableRowValue, C4.TableColumnSortComparator == Swift.Never, C4.TableRowValue == C5.TableRowValue, C5.TableColumnSortComparator == Swift.Never, C5.TableRowValue == C6.TableRowValue, C6.TableColumnSortComparator == Swift.Never, C6.TableRowValue == C7.TableRowValue, C7.TableColumnSortComparator == Swift.Never, C7.TableRowValue == C8.TableRowValue, C8.TableColumnSortComparator == Swift.Never, C8.TableRowValue == C9.TableRowValue, C9.TableColumnSortComparator == Swift.Never {
        TupleTableColumnContent((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9), valueType: RowValue.self, sortType: Never.self)
    }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1)>((c0, c1))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2)>((c0, c1, c2))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent, C3 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3)>((c0, c1, c2, c3))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent, C3 : SwiftUI.ToolbarContent, C4 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4)>((c0, c1, c2, c3, c4))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent, C3 : SwiftUI.ToolbarContent, C4 : SwiftUI.ToolbarContent, C5 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5)>((c0, c1, c2, c3, c4, c5))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent, C3 : SwiftUI.ToolbarContent, C4 : SwiftUI.ToolbarContent, C5 : SwiftUI.ToolbarContent, C6 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6)>((c0, c1, c2, c3, c4, c5, c6))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent, C3 : SwiftUI.ToolbarContent, C4 : SwiftUI.ToolbarContent, C5 : SwiftUI.ToolbarContent, C6 : SwiftUI.ToolbarContent, C7 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6, C7)>((c0, c1, c2, c3, c4, c5, c6, c7))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent, C3 : SwiftUI.ToolbarContent, C4 : SwiftUI.ToolbarContent, C5 : SwiftUI.ToolbarContent, C6 : SwiftUI.ToolbarContent, C7 : SwiftUI.ToolbarContent, C8 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6, C7, C8)>((c0, c1, c2, c3, c4, c5, c6, c7, c8))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent, C3 : SwiftUI.ToolbarContent, C4 : SwiftUI.ToolbarContent, C5 : SwiftUI.ToolbarContent, C6 : SwiftUI.ToolbarContent, C7 : SwiftUI.ToolbarContent, C8 : SwiftUI.ToolbarContent, C9 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1)>((c0, c1))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2)>((c0, c1, c2))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent, C3 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3)>((c0, c1, c2, c3))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent, C3 : SwiftUI.CustomizableToolbarContent, C4 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4)>((c0, c1, c2, c3, c4))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent, C3 : SwiftUI.CustomizableToolbarContent, C4 : SwiftUI.CustomizableToolbarContent, C5 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5)>((c0, c1, c2, c3, c4, c5))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent, C3 : SwiftUI.CustomizableToolbarContent, C4 : SwiftUI.CustomizableToolbarContent, C5 : SwiftUI.CustomizableToolbarContent, C6 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6)>((c0, c1, c2, c3, c4, c5, c6))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent, C3 : SwiftUI.CustomizableToolbarContent, C4 : SwiftUI.CustomizableToolbarContent, C5 : SwiftUI.CustomizableToolbarContent, C6 : SwiftUI.CustomizableToolbarContent, C7 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6, C7)>((c0, c1, c2, c3, c4, c5, c6, c7))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent, C3 : SwiftUI.CustomizableToolbarContent, C4 : SwiftUI.CustomizableToolbarContent, C5 : SwiftUI.CustomizableToolbarContent, C6 : SwiftUI.CustomizableToolbarContent, C7 : SwiftUI.CustomizableToolbarContent, C8 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6, C7, C8)>((c0, c1, c2, c3, c4, c5, c6, c7, c8))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent, C3 : SwiftUI.CustomizableToolbarContent, C4 : SwiftUI.CustomizableToolbarContent, C5 : SwiftUI.CustomizableToolbarContent, C6 : SwiftUI.CustomizableToolbarContent, C7 : SwiftUI.CustomizableToolbarContent, C8 : SwiftUI.CustomizableToolbarContent, C9 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands {
        TupleCommandContent((c0, c1))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands, C3 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2, c3))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands, C3 : SwiftUI.Commands, C4 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2, c3, c4))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands, C3 : SwiftUI.Commands, C4 : SwiftUI.Commands, C5 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2, c3, c4, c5))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands, C3 : SwiftUI.Commands, C4 : SwiftUI.Commands, C5 : SwiftUI.Commands, C6 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2, c3, c4, c5, c6))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands, C3 : SwiftUI.Commands, C4 : SwiftUI.Commands, C5 : SwiftUI.Commands, C6 : SwiftUI.Commands, C7 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2, c3, c4, c5, c6, c7))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands, C3 : SwiftUI.Commands, C4 : SwiftUI.Commands, C5 : SwiftUI.Commands, C6 : SwiftUI.Commands, C7 : SwiftUI.Commands, C8 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2, c3, c4, c5, c6, c7, c8))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands, C3 : SwiftUI.Commands, C4 : SwiftUI.Commands, C5 : SwiftUI.Commands, C6 : SwiftUI.Commands, C7 : SwiftUI.Commands, C8 : SwiftUI.Commands, C9 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityRotorContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> some SwiftUI.AccessibilityRotorContent where C0 : SwiftUI.AccessibilityRotorContent, C1 : SwiftUI.AccessibilityRotorContent {
        AccessibilityTupleRotorContent<(C0, C1)>((c0, c1))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityRotorContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> some SwiftUI.AccessibilityRotorContent where C0 : SwiftUI.AccessibilityRotorContent, C1 : SwiftUI.AccessibilityRotorContent, C2 : SwiftUI.AccessibilityRotorContent {
        AccessibilityTupleRotorContent<(C0, C1, C2)>((c0, c1, c2))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityRotorContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> some SwiftUI.AccessibilityRotorContent where C0 : SwiftUI.AccessibilityRotorContent, C1 : SwiftUI.AccessibilityRotorContent, C2 : SwiftUI.AccessibilityRotorContent, C3 : SwiftUI.AccessibilityRotorContent {
        AccessibilityTupleRotorContent<(C0, C1, C2, C3)>((c0, c1, c2, c3))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityRotorContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> some SwiftUI.AccessibilityRotorContent where C0 : SwiftUI.AccessibilityRotorContent, C1 : SwiftUI.AccessibilityRotorContent, C2 : SwiftUI.AccessibilityRotorContent, C3 : SwiftUI.AccessibilityRotorContent, C4 : SwiftUI.AccessibilityRotorContent {
        AccessibilityTupleRotorContent<(C0, C1, C2, C3, C4)>((c0, c1, c2, c3, c4))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityRotorContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> some SwiftUI.AccessibilityRotorContent where C0 : SwiftUI.AccessibilityRotorContent, C1 : SwiftUI.AccessibilityRotorContent, C2 : SwiftUI.AccessibilityRotorContent, C3 : SwiftUI.AccessibilityRotorContent, C4 : SwiftUI.AccessibilityRotorContent, C5 : SwiftUI.AccessibilityRotorContent {
        AccessibilityTupleRotorContent<(C0, C1, C2, C3, C4, C5)>((c0, c1, c2, c3, c4, c5))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityRotorContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> some SwiftUI.AccessibilityRotorContent where C0 : SwiftUI.AccessibilityRotorContent, C1 : SwiftUI.AccessibilityRotorContent, C2 : SwiftUI.AccessibilityRotorContent, C3 : SwiftUI.AccessibilityRotorContent, C4 : SwiftUI.AccessibilityRotorContent, C5 : SwiftUI.AccessibilityRotorContent, C6 : SwiftUI.AccessibilityRotorContent {
        AccessibilityTupleRotorContent<(C0, C1, C2, C3, C4, C5, C6)>((c0, c1, c2, c3, c4, c5, c6))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityRotorContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> some SwiftUI.AccessibilityRotorContent where C0 : SwiftUI.AccessibilityRotorContent, C1 : SwiftUI.AccessibilityRotorContent, C2 : SwiftUI.AccessibilityRotorContent, C3 : SwiftUI.AccessibilityRotorContent, C4 : SwiftUI.AccessibilityRotorContent, C5 : SwiftUI.AccessibilityRotorContent, C6 : SwiftUI.AccessibilityRotorContent, C7 : SwiftUI.AccessibilityRotorContent {
        AccessibilityTupleRotorContent<(C0, C1, C2, C3, C4, C5, C6, C7)>((c0, c1, c2, c3, c4, c5, c6, c7))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityRotorContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> some SwiftUI.AccessibilityRotorContent where C0 : SwiftUI.AccessibilityRotorContent, C1 : SwiftUI.AccessibilityRotorContent, C2 : SwiftUI.AccessibilityRotorContent, C3 : SwiftUI.AccessibilityRotorContent, C4 : SwiftUI.AccessibilityRotorContent, C5 : SwiftUI.AccessibilityRotorContent, C6 : SwiftUI.AccessibilityRotorContent, C7 : SwiftUI.AccessibilityRotorContent, C8 : SwiftUI.AccessibilityRotorContent {
        AccessibilityTupleRotorContent<(C0, C1, C2, C3, C4, C5, C6, C7, C8)>((c0, c1, c2, c3, c4, c5, c6, c7, c8))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityRotorContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> some SwiftUI.AccessibilityRotorContent where C0 : SwiftUI.AccessibilityRotorContent, C1 : SwiftUI.AccessibilityRotorContent, C2 : SwiftUI.AccessibilityRotorContent, C3 : SwiftUI.AccessibilityRotorContent, C4 : SwiftUI.AccessibilityRotorContent, C5 : SwiftUI.AccessibilityRotorContent, C6 : SwiftUI.AccessibilityRotorContent, C7 : SwiftUI.AccessibilityRotorContent, C8 : SwiftUI.AccessibilityRotorContent, C9 : SwiftUI.AccessibilityRotorContent {
        AccessibilityTupleRotorContent<(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9))
    }
  
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> SwiftUI.TupleTableRowContent<Value, (C0, C1)> where Value == C0.TableRowValue, C0 : SwiftUI.TableRowContent, C1 : SwiftUI.TableRowContent, C0.TableRowValue == C1.TableRowValue {
        TupleTableRowContent((c0, c1), ofType: Value.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> SwiftUI.TupleTableRowContent<Value, (C0, C1, C2)> where Value == C0.TableRowValue, C0 : SwiftUI.TableRowContent, C1 : SwiftUI.TableRowContent, C2 : SwiftUI.TableRowContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue {
        TupleTableRowContent((c0, c1, c2), ofType: Value.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> SwiftUI.TupleTableRowContent<Value, (C0, C1, C2, C3)> where Value == C0.TableRowValue, C0 : SwiftUI.TableRowContent, C1 : SwiftUI.TableRowContent, C2 : SwiftUI.TableRowContent, C3 : SwiftUI.TableRowContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue {
        TupleTableRowContent((c0, c1, c2, c3), ofType: Value.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> SwiftUI.TupleTableRowContent<Value, (C0, C1, C2, C3, C4)> where Value == C0.TableRowValue, C0 : SwiftUI.TableRowContent, C1 : SwiftUI.TableRowContent, C2 : SwiftUI.TableRowContent, C3 : SwiftUI.TableRowContent, C4 : SwiftUI.TableRowContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue {
        TupleTableRowContent((c0, c1, c2, c3, c4), ofType: Value.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> SwiftUI.TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5)> where Value == C0.TableRowValue, C0 : SwiftUI.TableRowContent, C1 : SwiftUI.TableRowContent, C2 : SwiftUI.TableRowContent, C3 : SwiftUI.TableRowContent, C4 : SwiftUI.TableRowContent, C5 : SwiftUI.TableRowContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue, C4.TableRowValue == C5.TableRowValue {
        TupleTableRowContent((c0, c1, c2, c3, c4, c5), ofType: Value.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> SwiftUI.TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6)> where Value == C0.TableRowValue, C0 : SwiftUI.TableRowContent, C1 : SwiftUI.TableRowContent, C2 : SwiftUI.TableRowContent, C3 : SwiftUI.TableRowContent, C4 : SwiftUI.TableRowContent, C5 : SwiftUI.TableRowContent, C6 : SwiftUI.TableRowContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue, C4.TableRowValue == C5.TableRowValue, C5.TableRowValue == C6.TableRowValue {
        TupleTableRowContent((c0, c1, c2, c3, c4, c5, c6), ofType: Value.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> SwiftUI.TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7)> where Value == C0.TableRowValue, C0 : SwiftUI.TableRowContent, C1 : SwiftUI.TableRowContent, C2 : SwiftUI.TableRowContent, C3 : SwiftUI.TableRowContent, C4 : SwiftUI.TableRowContent, C5 : SwiftUI.TableRowContent, C6 : SwiftUI.TableRowContent, C7 : SwiftUI.TableRowContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue, C4.TableRowValue == C5.TableRowValue, C5.TableRowValue == C6.TableRowValue, C6.TableRowValue == C7.TableRowValue {
        TupleTableRowContent((c0, c1, c2, c3, c4, c5, c6, c7), ofType: Value.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> SwiftUI.TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8)> where Value == C0.TableRowValue, C0 : SwiftUI.TableRowContent, C1 : SwiftUI.TableRowContent, C2 : SwiftUI.TableRowContent, C3 : SwiftUI.TableRowContent, C4 : SwiftUI.TableRowContent, C5 : SwiftUI.TableRowContent, C6 : SwiftUI.TableRowContent, C7 : SwiftUI.TableRowContent, C8 : SwiftUI.TableRowContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue, C4.TableRowValue == C5.TableRowValue, C5.TableRowValue == C6.TableRowValue, C6.TableRowValue == C7.TableRowValue, C7.TableRowValue == C8.TableRowValue {
        TupleTableRowContent((c0, c1, c2, c3, c4, c5, c6, c7, c8), ofType: Value.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> SwiftUI.TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)> where Value == C0.TableRowValue, C0 : SwiftUI.TableRowContent, C1 : SwiftUI.TableRowContent, C2 : SwiftUI.TableRowContent, C3 : SwiftUI.TableRowContent, C4 : SwiftUI.TableRowContent, C5 : SwiftUI.TableRowContent, C6 : SwiftUI.TableRowContent, C7 : SwiftUI.TableRowContent, C8 : SwiftUI.TableRowContent, C9 : SwiftUI.TableRowContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue, C4.TableRowValue == C5.TableRowValue, C5.TableRowValue == C6.TableRowValue, C6.TableRowValue == C7.TableRowValue, C7.TableRowValue == C8.TableRowValue, C8.TableRowValue == C9.TableRowValue {
        TupleTableRowContent((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9), ofType: Value.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumn where RowValue : ObjectiveC.NSObject, Sort == Foundation.SortDescriptor<RowValue>, Label == SwiftUICore.Text {
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Bool>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Bool>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Bool>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Bool?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Bool?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Bool?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Double>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Double>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Double>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Double?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Double?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Double?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Float>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Float>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Float>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Float?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Float?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Float?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int8>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int8>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Int8>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int8?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int8?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Int8?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int16>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int16>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Int16>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int16?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int16?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Int16?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int32>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int32>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Int32>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int32?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int32?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Int32?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int64>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int64>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Int64>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int64?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int64?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Int64?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Int>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Int?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt8>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt8>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.UInt8>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt8?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt8?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.UInt8?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt16>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt16>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.UInt16>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt16?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt16?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.UInt16?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt32>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt32>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.UInt32>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt32?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt32?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.UInt32?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt64>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt64>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.UInt64>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt64?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt64?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.UInt64?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.UInt>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.UInt?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Foundation.Date>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Foundation.Date>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Foundation.Date>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Foundation.Date?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Foundation.Date?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Foundation.Date?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Foundation.UUID>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Foundation.UUID>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Foundation.UUID>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Foundation.UUID?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Foundation.UUID?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Foundation.UUID?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.String>, comparator: Swift.String.StandardComparator = .localizedStandard, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.String>, comparator: Swift.String.StandardComparator = .localizedStandard, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.String>, comparator: Swift.String.StandardComparator = .localizedStandard, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.String?>, comparator: Swift.String.StandardComparator = .localizedStandard, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.String?>, comparator: Swift.String.StandardComparator = .localizedStandard, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.String?>, comparator: Swift.String.StandardComparator = .localizedStandard, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.String>, comparator: Swift.String.StandardComparator = .localizedStandard) where Content == SwiftUICore.Text
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.String>, comparator: Swift.String.StandardComparator = .localizedStandard) where Content == SwiftUICore.Text, S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.String>, comparator: Swift.String.StandardComparator = .localizedStandard) where Content == SwiftUICore.Text
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.TabContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> some SwiftUI.TabContent<TabValue> where TabValue == C0.TabValue, C0 : SwiftUI.TabContent, C1 : SwiftUI.TabContent, C0.TabValue == C1.TabValue {
        return _TupleTabContent<TabValue, (C0._IdentifiedView, C1._IdentifiedView)>((c0._identifiedView, c1._identifiedView))
    }
  
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> some SwiftUI.TabContent<TabValue> where TabValue == C0.TabValue, C0 : SwiftUI.TabContent, C1 : SwiftUI.TabContent, C2 : SwiftUI.TabContent, C0.TabValue == C1.TabValue, C1.TabValue == C2.TabValue {
        return _TupleTabContent<TabValue, (C0._IdentifiedView, C1._IdentifiedView, C2._IdentifiedView)>((c0._identifiedView, c1._identifiedView, c2._identifiedView))
    }
  
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> some SwiftUI.TabContent<TabValue> where TabValue == C0.TabValue, C0 : SwiftUI.TabContent, C1 : SwiftUI.TabContent, C2 : SwiftUI.TabContent, C3 : SwiftUI.TabContent, C0.TabValue == C1.TabValue, C1.TabValue == C2.TabValue, C2.TabValue == C3.TabValue {
        return _TupleTabContent<TabValue, (C0._IdentifiedView, C1._IdentifiedView, C2._IdentifiedView, C3._IdentifiedView)>((c0._identifiedView, c1._identifiedView, c2._identifiedView, c3._identifiedView))
    }
  
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> some SwiftUI.TabContent<TabValue> where TabValue == C0.TabValue, C0 : SwiftUI.TabContent, C1 : SwiftUI.TabContent, C2 : SwiftUI.TabContent, C3 : SwiftUI.TabContent, C4 : SwiftUI.TabContent, C0.TabValue == C1.TabValue, C1.TabValue == C2.TabValue, C2.TabValue == C3.TabValue, C3.TabValue == C4.TabValue {
        return _TupleTabContent<TabValue, (C0._IdentifiedView, C1._IdentifiedView, C2._IdentifiedView, C3._IdentifiedView, C4._IdentifiedView)>((c0._identifiedView, c1._identifiedView, c2._identifiedView, c3._identifiedView, c4._identifiedView))
    }
  
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> some SwiftUI.TabContent<TabValue> where TabValue == C0.TabValue, C0 : SwiftUI.TabContent, C1 : SwiftUI.TabContent, C2 : SwiftUI.TabContent, C3 : SwiftUI.TabContent, C4 : SwiftUI.TabContent, C5 : SwiftUI.TabContent, C0.TabValue == C1.TabValue, C1.TabValue == C2.TabValue, C2.TabValue == C3.TabValue, C3.TabValue == C4.TabValue, C4.TabValue == C5.TabValue {
        return _TupleTabContent<TabValue, (C0._IdentifiedView, C1._IdentifiedView, C2._IdentifiedView, C3._IdentifiedView, C4._IdentifiedView, C5._IdentifiedView)>((c0._identifiedView, c1._identifiedView, c2._identifiedView, c3._identifiedView, c4._identifiedView, c5._identifiedView))
    }
  
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> some SwiftUI.TabContent<TabValue> where TabValue == C0.TabValue, C0 : SwiftUI.TabContent, C1 : SwiftUI.TabContent, C2 : SwiftUI.TabContent, C3 : SwiftUI.TabContent, C4 : SwiftUI.TabContent, C5 : SwiftUI.TabContent, C6 : SwiftUI.TabContent, C0.TabValue == C1.TabValue, C1.TabValue == C2.TabValue, C2.TabValue == C3.TabValue, C3.TabValue == C4.TabValue, C4.TabValue == C5.TabValue, C5.TabValue == C6.TabValue {
        return _TupleTabContent<TabValue, (C0._IdentifiedView, C1._IdentifiedView, C2._IdentifiedView, C3._IdentifiedView, C4._IdentifiedView, C5._IdentifiedView, C6._IdentifiedView)>((c0._identifiedView, c1._identifiedView, c2._identifiedView, c3._identifiedView, c4._identifiedView, c5._identifiedView, c6._identifiedView))
    }
  
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> some SwiftUI.TabContent<TabValue> where TabValue == C0.TabValue, C0 : SwiftUI.TabContent, C1 : SwiftUI.TabContent, C2 : SwiftUI.TabContent, C3 : SwiftUI.TabContent, C4 : SwiftUI.TabContent, C5 : SwiftUI.TabContent, C6 : SwiftUI.TabContent, C7 : SwiftUI.TabContent, C0.TabValue == C1.TabValue, C1.TabValue == C2.TabValue, C2.TabValue == C3.TabValue, C3.TabValue == C4.TabValue, C4.TabValue == C5.TabValue, C5.TabValue == C6.TabValue, C6.TabValue == C7.TabValue {
        return _TupleTabContent<TabValue, (C0._IdentifiedView, C1._IdentifiedView, C2._IdentifiedView, C3._IdentifiedView, C4._IdentifiedView, C5._IdentifiedView, C6._IdentifiedView, C7._IdentifiedView)>((c0._identifiedView, c1._identifiedView, c2._identifiedView, c3._identifiedView, c4._identifiedView, c5._identifiedView, c6._identifiedView, c7._identifiedView))
    }
  
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> some SwiftUI.TabContent<TabValue> where TabValue == C0.TabValue, C0 : SwiftUI.TabContent, C1 : SwiftUI.TabContent, C2 : SwiftUI.TabContent, C3 : SwiftUI.TabContent, C4 : SwiftUI.TabContent, C5 : SwiftUI.TabContent, C6 : SwiftUI.TabContent, C7 : SwiftUI.TabContent, C8 : SwiftUI.TabContent, C0.TabValue == C1.TabValue, C1.TabValue == C2.TabValue, C2.TabValue == C3.TabValue, C3.TabValue == C4.TabValue, C4.TabValue == C5.TabValue, C5.TabValue == C6.TabValue, C6.TabValue == C7.TabValue, C7.TabValue == C8.TabValue {
        return _TupleTabContent<TabValue, (C0._IdentifiedView, C1._IdentifiedView, C2._IdentifiedView, C3._IdentifiedView, C4._IdentifiedView, C5._IdentifiedView, C6._IdentifiedView, C7._IdentifiedView, C8._IdentifiedView)>((c0._identifiedView, c1._identifiedView, c2._identifiedView, c3._identifiedView, c4._identifiedView, c5._identifiedView, c6._identifiedView, c7._identifiedView, c8._identifiedView))
    }
  
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> some SwiftUI.TabContent<TabValue> where TabValue == C0.TabValue, C0 : SwiftUI.TabContent, C1 : SwiftUI.TabContent, C2 : SwiftUI.TabContent, C3 : SwiftUI.TabContent, C4 : SwiftUI.TabContent, C5 : SwiftUI.TabContent, C6 : SwiftUI.TabContent, C7 : SwiftUI.TabContent, C8 : SwiftUI.TabContent, C9 : SwiftUI.TabContent, C0.TabValue == C1.TabValue, C1.TabValue == C2.TabValue, C2.TabValue == C3.TabValue, C3.TabValue == C4.TabValue, C4.TabValue == C5.TabValue, C5.TabValue == C6.TabValue, C6.TabValue == C7.TabValue, C7.TabValue == C8.TabValue, C8.TabValue == C9.TabValue {
        return _TupleTabContent<TabValue, (C0._IdentifiedView, C1._IdentifiedView, C2._IdentifiedView, C3._IdentifiedView, C4._IdentifiedView, C5._IdentifiedView, C6._IdentifiedView, C7._IdentifiedView, C8._IdentifiedView, C9._IdentifiedView)>((c0._identifiedView, c1._identifiedView, c2._identifiedView, c3._identifiedView, c4._identifiedView, c5._identifiedView, c6._identifiedView, c7._identifiedView, c8._identifiedView, c9._identifiedView))
    }
  
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
extension SwiftUI._UIHostingView : SwiftUICore._BenchmarkHost {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.AccessibilityLabeledPairRole : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.AccessibilityLabeledPairRole : Swift.BitwiseCopyable {}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.EmptyControlWidgetConfiguration : Swift.BitwiseCopyable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.DismissAction : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.ExpansionState : Swift.Equatable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.ExpansionState : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.AccessibilityAdjustmentDirection : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.AccessibilityAdjustmentDirection : Swift.Hashable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.FillShapeStyle : Swift.BitwiseCopyable {}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DropOperation : Swift.Equatable {}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DropOperation : Swift.Hashable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI._SymbolEffectsRemovedModifier : Swift.Sendable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI._SymbolEffectsRemovedModifier : Swift.BitwiseCopyable {}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.OpenWindowAction : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._FlipForRTLEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._FlipForRTLEffect : Swift.BitwiseCopyable {}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.OpenDocumentAction : Swift.Sendable {}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.NewDocumentAction : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.EmptyWidgetConfiguration : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.EmptyWidgetConfiguration : Swift.BitwiseCopyable {}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.EmptyTableRowContent : SwiftUI.TableRowContent {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.PlaceholderTextShapeStyle : Swift.BitwiseCopyable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, *)
@available(watchOS, unavailable)
extension SwiftUI.HoverPhase : Swift.Sendable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, *)
@available(watchOS, unavailable)
extension SwiftUI.HoverPhase : Swift.BitwiseCopyable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI._LayoutDirectionBehaviorEffect : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI._TaskModifier : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ScenePhase : Swift.Hashable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI._GeometryActionModifier : SwiftUICore.ViewModifier {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 10.0, *)
extension SwiftUI._GeometryActionModifier2 : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._AllowsHitTestingModifier : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._AllowsHitTestingModifier : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._AllowsHitTestingModifier : Swift.BitwiseCopyable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.LinkShapeStyle : Swift.BitwiseCopyable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.ScrollTransitionPhase : Swift.Equatable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.ScrollTransitionPhase : Swift.Hashable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.ScrollTransitionPhase : Swift.BitwiseCopyable {}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.DigitalCrownRotationalSensitivity : Swift.Equatable {}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.DigitalCrownRotationalSensitivity : Swift.Hashable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.UserDefaultLocation : Swift.Equatable {}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
extension SwiftUI.NavigationBarItem.TitleDisplayMode : Swift.Equatable {}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
extension SwiftUI.NavigationBarItem.TitleDisplayMode : Swift.Hashable {}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.OpenImmersiveSpaceAction.Result : Swift.Equatable {}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.OpenImmersiveSpaceAction.Result : Swift.Hashable {}
@available(iOS 14.0, tvOS 14.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.UIApplicationDelegateAdaptor : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Never : SwiftUI.Commands {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityOptionalRotorContent : SwiftUI.AccessibilityRotorContent {}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.FrameResizePosition : Swift.Equatable {}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.FrameResizePosition : Swift.Hashable {}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.FrameResizePosition : Swift.RawRepresentable {}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.FrameResizePosition : Swift.Sendable {}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.FrameResizePosition : Swift.BitwiseCopyable {}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.FrameResizeDirection : Swift.Equatable {}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.FrameResizeDirection : Swift.Hashable {}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.FrameResizeDirection : Swift.RawRepresentable {}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.FrameResizeDirection : Swift.Sendable {}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.FrameResizeDirection : Swift.BitwiseCopyable {}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.FrameResizeDirection.Set : Swift.Sendable {}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.FrameResizeDirection.Set : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._PositionLayout : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._PositionLayout : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._PositionLayout : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._PositionLayout : Swift.BitwiseCopyable {}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.PushWindowAction : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ProjectionEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ProjectionEffect : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._TransformEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._TransformEffect : Swift.BitwiseCopyable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI._TupleTabContent : SwiftUI.TabContent {}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DismissImmersiveSpaceAction : Swift.Sendable {}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.UIViewControllerRepresentableContext : Swift.Sendable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI._SizeFittingRoot : Swift.Sendable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI._SizeFittingRoot : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._AligningContentProvider.AligningContentProviderLayout : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._AligningContentProvider.AligningContentProviderLayout : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._PagingViewConfig.Direction : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._PagingViewConfig.Direction : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.PreviewPlatform : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.PreviewPlatform : Swift.Hashable {}
@available(macOS 10.15, tvOS 13.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.MoveCommandDirection : Swift.Equatable {}
@available(macOS 10.15, tvOS 13.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.MoveCommandDirection : Swift.Hashable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.DismissSearchAction : Swift.Sendable {}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI._PullDownButton : SwiftUICore.View {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.ButtonBorderShape._Inset : Swift.BitwiseCopyable {}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.SquareAzimuth : Swift.Equatable {}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.SquareAzimuth : Swift.Hashable {}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.SquareAzimuth : Swift.BitwiseCopyable {}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.SquareAzimuth.Set : Swift.Sendable {}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.SquareAzimuth.Set : Swift.BitwiseCopyable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._AccessibilityIgnoresInvertColorsViewModifier : SwiftUICore.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._AccessibilityIgnoresInvertColorsViewModifier : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._AccessibilityIgnoresInvertColorsViewModifier : Swift.BitwiseCopyable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Foundation.NSUserActivity.TypedPayloadError : Swift.Equatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Foundation.NSUserActivity.TypedPayloadError : Swift.Hashable {}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.EditMode : Swift.Equatable {}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.EditMode : Swift.Hashable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.TimelineView.Context.Cadence : Swift.Hashable {}
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.OpenSettingsAction : Swift.Sendable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.Grid : SwiftUICore.View {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.GridRow : SwiftUICore.View {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI._GridCellSizeModifier : Swift.Sendable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI._GridCellSizeModifier : Swift.BitwiseCopyable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI._GridAnchorModifier : Swift.Sendable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI._GridAnchorModifier : Swift.BitwiseCopyable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI._GridAlignmentModifier : Swift.Sendable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI._GridAlignmentModifier : Swift.BitwiseCopyable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI._GridUnsizedAxesModifier : Swift.Sendable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI._GridUnsizedAxesModifier : Swift.BitwiseCopyable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.GridLayout : Swift.Sendable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.GridLayout : Swift.BitwiseCopyable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.KeyPress.Result : Swift.Equatable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.KeyPress.Result : Swift.Hashable {}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.SnapshotData.SnapshotReason : Swift.Equatable {}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.SnapshotData.SnapshotReason : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._HiddenModifier : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._HiddenModifier : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.FetchedResults : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.FetchRequest : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.FetchRequest.Configuration : Swift.Sendable {}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.EmptyControlWidgetTemplate : SwiftUI.ControlWidgetTemplate {}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.EmptyControlWidgetTemplate : Swift.BitwiseCopyable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._EmptyScene : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._EmptyScene : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollViewAnimationMode : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollViewAnimationMode : Swift.Hashable {}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.UIViewRepresentableContext : Swift.Sendable {}
@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DismissWindowAction : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.SectionedFetchResults : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.SectionedFetchResults.Section : Swift.Sendable {}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.AccessibilityZoomGestureAction.Direction : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.AccessibilityZoomGestureAction.Direction : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.AccessibilityZoomGestureAction.Direction : Swift.Sendable {}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.AccessibilityZoomGestureAction.Direction : Swift.BitwiseCopyable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.LabelStyleConfiguration.Title : SwiftUICore.View {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.LabelStyleConfiguration.Icon : SwiftUICore.View {}
