// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.5 clang-1700.0.13.3)
// swift-module-flags: -target arm64e-apple-ios18.4-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature ModuleInterfaceExportAs -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 366.100.14 -module-name _RealityKit_SwiftUI
// swift-module-flags-ignorable:  -interface-compiler-version 6.1
import ARKit
import Foundation
import Observation
import RealityFoundation
@_exported import RealityKit
import Swift
import SwiftUI
import SwiftUICore
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
@available(visionOS 2.0, macOS 15.0, iOS 18.0, *)
extension RealityFoundation.MeshResource.ShapeExtrusionOptions {
  public var chamferProfile: SwiftUICore.Path? {
    get
    set
  }
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, *)
extension RealityFoundation.MeshResource {
  @_Concurrency.MainActor @preconcurrency convenience public init(extruding path: SwiftUICore.Path, extrusionOptions: RealityFoundation.MeshResource.ShapeExtrusionOptions = ShapeExtrusionOptions()) throws
  nonisolated convenience public init(extruding path: SwiftUICore.Path, extrusionOptions: RealityFoundation.MeshResource.ShapeExtrusionOptions = ShapeExtrusionOptions()) async throws
}
@available(iOS 17.0, *)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ObjectCaptureView<Overlay> : SwiftUICore.View where Overlay : SwiftUICore.View {
  nonisolated public init(session: _RealityKit_SwiftUI.ObjectCaptureSession) where Overlay == SwiftUICore.EmptyView
  nonisolated public init(session: _RealityKit_SwiftUI.ObjectCaptureSession, @SwiftUICore.ViewBuilder cameraFeedOverlay: () -> Overlay)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 17.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s19_RealityKit_SwiftUI17ObjectCaptureViewV4bodyQrvp", 0) __<Overlay>
}
@available(iOS 18.0, *)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension _RealityKit_SwiftUI.ObjectCaptureView {
  @_Concurrency.MainActor @preconcurrency public func hideObjectReticle(_ value: Swift.Bool = true) -> _RealityKit_SwiftUI.ObjectCaptureView<Overlay>
}
@available(iOS 17.0, *)
@available(watchOS, unavailable)
@available(macOS, unavailable, introduced: 15.0)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor public class ObjectCaptureSession : Swift.Identifiable {
  public struct Updates<Element> : _Concurrency.AsyncSequence, Swift.Sendable where Element : Swift.Sendable {
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      public mutating func next() async -> Element?
      @available(iOS 18.0, *)
      @available(tvOS, unavailable, introduced: 18.0)
      @available(watchOS, unavailable, introduced: 11.0)
      @available(visionOS, unavailable, introduced: 2.0)
      @available(macOS, unavailable, introduced: 15.0)
      @available(macCatalyst, unavailable)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = Swift.Never
    }
    public func makeAsyncIterator() -> _RealityKit_SwiftUI.ObjectCaptureSession.Updates<Element>.Iterator
    @available(iOS 17.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(visionOS, unavailable)
    @available(macOS, unavailable, introduced: 15.0)
    @available(macCatalyst, unavailable)
    public typealias AsyncIterator = _RealityKit_SwiftUI.ObjectCaptureSession.Updates<Element>.Iterator
    @available(iOS 18.0, *)
    @available(tvOS, unavailable, introduced: 18.0)
    @available(watchOS, unavailable, introduced: 11.0)
    @available(visionOS, unavailable, introduced: 2.0)
    @available(macOS, unavailable, introduced: 15.0)
    @available(macCatalyst, unavailable)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  }
  public enum Error : Swift.Error, Foundation.LocalizedError {
    case directoryNotEmpty(Foundation.URL)
    case insufficientStorage(requiredBytes: Swift.Int64)
    case cancelled
    case sensorFailed
    case trackingFailed
    public var localizedDescription: Swift.String {
      get
    }
  }
  @_Concurrency.MainActor public static var isSupported: Swift.Bool {
    get
  }
  @_Concurrency.MainActor public init()
  public enum CaptureState : Swift.Equatable {
    case initializing
    case ready
    case detecting
    case capturing
    case finishing
    case completed
    case failed(any Swift.Error)
    public static func == (lhs: _RealityKit_SwiftUI.ObjectCaptureSession.CaptureState, rhs: _RealityKit_SwiftUI.ObjectCaptureSession.CaptureState) -> Swift.Bool
  }
  @_Concurrency.MainActor public var state: _RealityKit_SwiftUI.ObjectCaptureSession.CaptureState {
    get
  }
  @_Concurrency.MainActor public var stateUpdates: _RealityKit_SwiftUI.ObjectCaptureSession.Updates<_RealityKit_SwiftUI.ObjectCaptureSession.CaptureState> {
    get
  }
  public enum Feedback : Swift.Equatable {
    case objectTooClose
    case objectTooFar
    case movingTooFast
    case environmentLowLight
    case environmentTooDark
    case outOfFieldOfView
    case objectNotFlippable
    case overCapturing
    @available(iOS 17.4, *)
    @available(watchOS, unavailable)
    @available(macOS, unavailable)
    @available(macCatalyst, unavailable)
    @available(tvOS, unavailable)
    @available(visionOS, unavailable)
    case objectNotDetected
    public static func == (a: _RealityKit_SwiftUI.ObjectCaptureSession.Feedback, b: _RealityKit_SwiftUI.ObjectCaptureSession.Feedback) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor public var feedback: Swift.Set<_RealityKit_SwiftUI.ObjectCaptureSession.Feedback> {
    get
  }
  @_Concurrency.MainActor public var feedbackUpdates: _RealityKit_SwiftUI.ObjectCaptureSession.Updates<Swift.Set<_RealityKit_SwiftUI.ObjectCaptureSession.Feedback>> {
    get
  }
  public enum Tracking : Swift.Equatable {
    public enum Reason {
      case initializing
      case relocalizing
      case excessiveMotion
      case insufficientFeatures
      public static func == (a: _RealityKit_SwiftUI.ObjectCaptureSession.Tracking.Reason, b: _RealityKit_SwiftUI.ObjectCaptureSession.Tracking.Reason) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    case notAvailable
    case limited(reason: _RealityKit_SwiftUI.ObjectCaptureSession.Tracking.Reason)
    case normal
    public static func == (a: _RealityKit_SwiftUI.ObjectCaptureSession.Tracking, b: _RealityKit_SwiftUI.ObjectCaptureSession.Tracking) -> Swift.Bool
  }
  @_Concurrency.MainActor public var cameraTracking: _RealityKit_SwiftUI.ObjectCaptureSession.Tracking {
    get
  }
  @_Concurrency.MainActor public var cameraTrackingUpdates: _RealityKit_SwiftUI.ObjectCaptureSession.Updates<_RealityKit_SwiftUI.ObjectCaptureSession.Tracking> {
    get
  }
  @_Concurrency.MainActor public var isPaused: Swift.Bool {
    get
  }
  @_Concurrency.MainActor public var isPausedUpdates: _RealityKit_SwiftUI.ObjectCaptureSession.Updates<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor public var userCompletedScanPass: Swift.Bool {
    get
  }
  @_Concurrency.MainActor public var userCompletedScanPassUpdates: _RealityKit_SwiftUI.ObjectCaptureSession.Updates<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor public var canRequestImageCapture: Swift.Bool {
    get
  }
  @_Concurrency.MainActor public var canRequestImageCaptureUpdates: _RealityKit_SwiftUI.ObjectCaptureSession.Updates<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor public var numberOfShotsTaken: Swift.Int {
    get
  }
  @_Concurrency.MainActor public var numberOfShotsTakenUpdates: _RealityKit_SwiftUI.ObjectCaptureSession.Updates<Swift.Int> {
    get
  }
  @_Concurrency.MainActor public var maximumNumberOfInputImages: Swift.Int {
    get
  }
  public struct Configuration {
    public init()
    public var checkpointDirectory: Foundation.URL?
    public var isOverCaptureEnabled: Swift.Bool
  }
  @_Concurrency.MainActor public var configuration: _RealityKit_SwiftUI.ObjectCaptureSession.Configuration {
    get
  }
  @_Concurrency.MainActor public func start(imagesDirectory: Foundation.URL, configuration: _RealityKit_SwiftUI.ObjectCaptureSession.Configuration = Configuration())
  @_Concurrency.MainActor public func resume()
  @_Concurrency.MainActor public func pause()
  @_Concurrency.MainActor public func startDetecting() -> Swift.Bool
  @discardableResult
  @_Concurrency.MainActor public func resetDetection() -> Swift.Bool
  @_Concurrency.MainActor public func startCapturing()
  @_Concurrency.MainActor public func beginNewScanPassAfterFlip()
  @_Concurrency.MainActor public func beginNewScanPass()
  @_Concurrency.MainActor public func finish()
  @_Concurrency.MainActor public func cancel()
  @_Concurrency.MainActor public func requestImageCapture()
  @available(iOS 17.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @available(macOS, unavailable, introduced: 15.0)
  @available(macCatalyst, unavailable)
  public typealias ID = Swift.ObjectIdentifier
  @objc deinit
}
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(visionOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _RealityKit_SwiftUI.ObjectCaptureSession.CaptureState : Swift.Sendable {
}
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(visionOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _RealityKit_SwiftUI.ObjectCaptureSession.Feedback : Swift.Sendable {
}
@available(iOS 17.0, *)
@available(watchOS, unavailable)
@available(macOS, unavailable, introduced: 15.0)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension _RealityKit_SwiftUI.ObjectCaptureSession : Observation.Observable {
}
@available(iOS 18.0, macOS 15.0, macCatalyst 18.0, *)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public protocol RealityCoordinateSpaceProjecting {
  func project(point: Swift.SIMD3<Swift.Float>, to space: some CoordinateSpaceProtocol) -> CoreFoundation.CGPoint?
  func unproject(_ point: CoreFoundation.CGPoint, from space: some CoordinateSpaceProtocol, to realitySpace: some RealityCoordinateSpace, ontoPlane planeTransform: simd.float4x4) -> Swift.SIMD3<Swift.Float>?
  func ray(through point: CoreFoundation.CGPoint, in space: some CoordinateSpaceProtocol, to realitySpace: some RealityCoordinateSpace) -> (origin: Swift.SIMD3<Swift.Float>, direction: Swift.SIMD3<Swift.Float>)?
  func entity(at point: CoreFoundation.CGPoint, in space: some CoordinateSpaceProtocol) -> RealityFoundation.Entity?
  func entities(at point: CoreFoundation.CGPoint, in space: some CoordinateSpaceProtocol) -> [RealityFoundation.Entity]
  func hitTest(point: CoreFoundation.CGPoint, in space: some CoordinateSpaceProtocol, query: RealityFoundation.CollisionCastQueryType, mask: RealityFoundation.CollisionGroup) -> [RealityFoundation.CollisionCastHit]
}
@available(iOS 18.0, macOS 15.0, macCatalyst 18.0, *)
@available(visionOS, unavailable, introduced: 2.0)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension _RealityKit_SwiftUI.RealityViewCameraContent : _RealityKit_SwiftUI.RealityCoordinateSpaceProjecting {
  @available(visionOS, introduced: 2.0, deprecated: 2.0)
  public func project(point: Swift.SIMD3<Swift.Float>, to space: some CoordinateSpaceProtocol) -> CoreFoundation.CGPoint?
  @available(visionOS, introduced: 2.0, deprecated: 2.0)
  public func unproject(_ point: CoreFoundation.CGPoint, from space: some CoordinateSpaceProtocol, to realitySpace: some RealityCoordinateSpace, ontoPlane: simd.float4x4) -> Swift.SIMD3<Swift.Float>?
  @available(visionOS, introduced: 2.0, deprecated: 2.0)
  public func ray(through: CoreFoundation.CGPoint, in space: some CoordinateSpaceProtocol, to realitySpace: some RealityCoordinateSpace) -> (origin: Swift.SIMD3<Swift.Float>, direction: Swift.SIMD3<Swift.Float>)?
  @available(visionOS, introduced: 2.0, deprecated: 2.0)
  public func entity(at point: CoreFoundation.CGPoint, in space: some CoordinateSpaceProtocol) -> RealityFoundation.Entity?
  @available(visionOS, introduced: 2.0, deprecated: 2.0)
  public func entities(at point: CoreFoundation.CGPoint, in space: some CoordinateSpaceProtocol) -> [RealityFoundation.Entity]
  @available(visionOS, introduced: 2.0, deprecated: 2.0)
  public func hitTest(point: CoreFoundation.CGPoint, in space: some CoordinateSpaceProtocol, query: RealityFoundation.CollisionCastQueryType = .all, mask: RealityFoundation.CollisionGroup = .all) -> [RealityFoundation.CollisionCastHit]
}
@available(iOS 18.0, macOS 15.0, macCatalyst 18.0, *)
@available(visionOS, unavailable, introduced: 2.0)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension _RealityKit_SwiftUI.EntityTargetValue : _RealityKit_SwiftUI.RealityCoordinateSpaceProjecting {
  @available(visionOS, introduced: 2.0, deprecated: 2.0)
  public func project(point: Swift.SIMD3<Swift.Float>, to space: some CoordinateSpaceProtocol) -> CoreFoundation.CGPoint?
  @available(visionOS, introduced: 2.0, deprecated: 2.0)
  public func unproject(_ point: CoreFoundation.CGPoint, from space: some CoordinateSpaceProtocol, to realitySpace: some RealityCoordinateSpace, ontoPlane: simd.float4x4) -> Swift.SIMD3<Swift.Float>?
  @available(visionOS, introduced: 2.0, deprecated: 2.0)
  public func ray(through: CoreFoundation.CGPoint, in space: some CoordinateSpaceProtocol, to realitySpace: some RealityCoordinateSpace) -> (origin: Swift.SIMD3<Swift.Float>, direction: Swift.SIMD3<Swift.Float>)?
  @available(visionOS, introduced: 2.0, deprecated: 2.0)
  public func entity(at point: CoreFoundation.CGPoint, in space: some CoordinateSpaceProtocol) -> RealityFoundation.Entity?
  @available(visionOS, introduced: 2.0, deprecated: 2.0)
  public func entities(at point: CoreFoundation.CGPoint, in space: some CoordinateSpaceProtocol) -> [RealityFoundation.Entity]
  @available(visionOS, introduced: 2.0, deprecated: 2.0)
  public func hitTest(point: CoreFoundation.CGPoint, in space: some CoordinateSpaceProtocol, query: RealityFoundation.CollisionCastQueryType = .all, mask: RealityFoundation.CollisionGroup = .all) -> [RealityFoundation.CollisionCastHit]
}
@available(iOS 18.0, macOS 15.0, macCatalyst 18.0, *)
@available(visionOS, unavailable, introduced: 2.0)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension _RealityKit_SwiftUI.EntityTargetValue {
  @available(visionOS, introduced: 2.0, deprecated: 2.0)
  public func unproject(_ keyPath: Swift.KeyPath<Value, CoreFoundation.CGPoint>, to realitySpace: some RealityCoordinateSpace) -> Swift.SIMD3<Swift.Float>?
  @available(visionOS, introduced: 2.0, deprecated: 2.0)
  public func unproject(_ point: CoreFoundation.CGPoint, from space: some CoordinateSpaceProtocol, to realitySpace: some RealityCoordinateSpace) -> Swift.SIMD3<Swift.Float>?
}
@available(iOS 17.0, *)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor public struct ObjectCapturePointCloudView : SwiftUICore.View {
  @_Concurrency.MainActor public init(session: _RealityKit_SwiftUI.ObjectCaptureSession)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 17.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s19_RealityKit_SwiftUI27ObjectCapturePointCloudViewV4bodyQrvp", 0) __
}
@available(iOS 18.0, *)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension _RealityKit_SwiftUI.ObjectCapturePointCloudView {
  @_Concurrency.MainActor public func showShotLocations(_ value: Swift.Bool = true) -> _RealityKit_SwiftUI.ObjectCapturePointCloudView
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ResolvedModel3D : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func resizable(_ isResizable: Swift.Bool = true) -> _RealityKit_SwiftUI.ResolvedModel3D
  @available(visionOS 1.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s19_RealityKit_SwiftUI15ResolvedModel3DV4bodyQrvp", 0) __
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct RealityView<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  public typealias DefaultPlaceholder = _RealityKit_SwiftUI.RealityViewDefaultPlaceholder
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 18.0, visionOS 1.0, macOS 15.0, macCatalyst 18.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s19_RealityKit_SwiftUI0A4ViewV4bodyQrvp", 0) __<Content>
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct RealityViewDefaultPlaceholder : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 18.0, visionOS 1.0, macOS 15.0, macCatalyst 18.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s19_RealityKit_SwiftUI0A22ViewDefaultPlaceholderV4bodyQrvp", 0) __
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public protocol RealityViewContentProtocol {
  associatedtype Entities : RealityFoundation.EntityCollection
  var entities: Self.Entities { get nonmutating set }
  func subscribe<E>(to event: E.Type, on sourceObject: (any RealityFoundation.EventSource)?, componentType: (any RealityFoundation.Component.Type)?, _ handler: @escaping (E) -> Swift.Void) -> RealityFoundation.EventSubscription where E : RealityFoundation.Event
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension _RealityKit_SwiftUI.RealityViewContentProtocol {
  public func subscribe<E>(to event: E.Type, on sourceObject: (any RealityFoundation.EventSource)?, _ handler: @escaping (E) -> Swift.Void) -> RealityFoundation.EventSubscription where E : RealityFoundation.Event
  public func subscribe<E>(to event: E.Type, componentType: (any RealityFoundation.Component.Type)? = nil, _ handler: @escaping (E) -> Swift.Void) -> RealityFoundation.EventSubscription where E : RealityFoundation.Event
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct RealityViewEntityCollection : RealityFoundation.EntityCollection {
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public var count: Swift.Int {
    get
  }
  public subscript(index: Swift.Int) -> RealityFoundation.Entity {
    get
  }
  public func index(after i: Swift.Int) -> Swift.Int
  public mutating func insert<S>(contentsOf sequence: S, beforeIndex index: Swift.Int) where S : Swift.Sequence, S.Element : RealityFoundation.Entity
  public mutating func append<S>(contentsOf sequence: S) where S : Swift.Sequence, S.Element : RealityFoundation.Entity
  public mutating func remove(_ child: RealityFoundation.Entity)
  public mutating func remove(at index: Swift.Int)
  public mutating func removeAll()
  public mutating func replaceAll<S>(_ children: S) where S : Swift.Sequence, S.Element : RealityFoundation.Entity
  @available(iOS 18.0, visionOS 1.0, macOS 15.0, macCatalyst 18.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Element = RealityFoundation.Entity
  @available(iOS 18.0, visionOS 1.0, macOS 15.0, macCatalyst 18.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Index = Swift.Int
  @available(iOS 18.0, visionOS 1.0, macOS 15.0, macCatalyst 18.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Indices = Swift.DefaultIndices<_RealityKit_SwiftUI.RealityViewEntityCollection>
  @available(iOS 18.0, visionOS 1.0, macOS 15.0, macCatalyst 18.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Iterator = Swift.IndexingIterator<_RealityKit_SwiftUI.RealityViewEntityCollection>
  @available(iOS 18.0, visionOS 1.0, macOS 15.0, macCatalyst 18.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias SubSequence = Swift.Slice<_RealityKit_SwiftUI.RealityViewEntityCollection>
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension _RealityKit_SwiftUI.RealityViewContentProtocol {
  public func add(_ entity: RealityFoundation.Entity)
  public func remove(_ entity: RealityFoundation.Entity)
}
@available(iOS 18.0, macOS 15.0, macCatalyst 18.0, *)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension _RealityKit_SwiftUI.RealityView {
  @available(iOS 18.0, macOS 15.0, macCatalyst 18.0, *)
  @available(visionOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public init<P>(make: @escaping @_Concurrency.MainActor @Sendable (inout _RealityKit_SwiftUI.RealityViewCameraContent) async -> Swift.Void, update: (@_Concurrency.MainActor (inout _RealityKit_SwiftUI.RealityViewCameraContent) -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder placeholder: () -> P) where Content == _RealityKit_SwiftUI.RealityViewCameraContent.Body<P>, P : SwiftUICore.View
  @available(iOS 18.0, macOS 15.0, macCatalyst 18.0, *)
  @available(visionOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public init(make: @escaping @_Concurrency.MainActor @Sendable (inout _RealityKit_SwiftUI.RealityViewCameraContent) async -> Swift.Void, update: (@_Concurrency.MainActor (inout _RealityKit_SwiftUI.RealityViewCameraContent) -> Swift.Void)? = nil) where Content == _RealityKit_SwiftUI.RealityViewCameraContent.Body<_RealityKit_SwiftUI.RealityViewDefaultPlaceholder>
}
@available(iOS 18.0, macOS 15.0, macCatalyst 18.0, *)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension _RealityKit_SwiftUI.RealityViewCameraContent {
  @_Concurrency.MainActor @preconcurrency public struct Body<Placeholder> : SwiftUICore.View where Placeholder : SwiftUICore.View {
    @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
      get
    }
    @available(iOS 18.0, macOS 15.0, macCatalyst 18.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(visionOS, unavailable)
    public typealias Body = @_opaqueReturnTypeOf("$s19_RealityKit_SwiftUI0A17ViewCameraContentV4BodyV4bodyQrvp", 0) __<Placeholder>
  }
}
@available(iOS 18.0, macOS 15.0, macCatalyst 18.0, *)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct RealityViewCameraContent : _RealityKit_SwiftUI.RealityViewContentProtocol {
  public var entities: _RealityKit_SwiftUI.RealityViewEntityCollection {
    get
    nonmutating set
  }
  @available(visionOS, unavailable)
  public var camera: _RealityKit_SwiftUI.RealityViewCamera {
    get
    set
  }
  @available(visionOS, unavailable)
  public var cameraTarget: RealityFoundation.Entity? {
    get
    set
  }
  @available(visionOS, unavailable)
  public var environment: _RealityKit_SwiftUI.RealityViewEnvironment {
    get
    set
  }
  @available(visionOS, unavailable)
  public var audioListener: RealityFoundation.Entity? {
    get
    set
  }
  @available(visionOS, unavailable)
  public var renderingEffects: _RealityKit_SwiftUI.RealityViewRenderingEffects {
    get
    set
  }
  public func subscribe<E>(to event: E.Type, on sourceObject: (any RealityFoundation.EventSource)?, componentType: (any RealityFoundation.Component.Type)?, _ handler: @escaping (E) -> Swift.Void) -> RealityFoundation.EventSubscription where E : RealityFoundation.Event
  @available(iOS 18.0, macOS 15.0, macCatalyst 18.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Entities = _RealityKit_SwiftUI.RealityViewEntityCollection
}
@available(iOS 18.0, macOS 15.0, macCatalyst 18.0, *)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func realityViewCameraControls(_ controls: RealityFoundation.CameraControls) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, macCatalyst 18.0, *)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var realityViewCameraControls: RealityFoundation.CameraControls {
    get
    set
  }
}
@available(iOS 18.0, macOS 15.0, macCatalyst 18.0, *)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct RealityViewCamera : Swift.Sendable {
  public static var virtual: _RealityKit_SwiftUI.RealityViewCamera {
    get
  }
}
@available(iOS 18.0, *)
@available(macCatalyst, unavailable, introduced: 18.0)
@available(macOS, unavailable, introduced: 15.0)
@available(visionOS, unavailable, introduced: 2.0)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension _RealityKit_SwiftUI.RealityViewCamera {
  public static var spatialTracking: _RealityKit_SwiftUI.RealityViewCamera {
    get
  }
}
@available(iOS 18.0, macOS 15.0, macCatalyst 18.0, *)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct RealityViewEnvironment : Swift.Sendable {
  public static var `default`: _RealityKit_SwiftUI.RealityViewEnvironment {
    get
  }
  public static func skybox(_ skybox: RealityFoundation.EnvironmentResource) -> _RealityKit_SwiftUI.RealityViewEnvironment
}
@available(iOS 18.0, macOS 15.0, macCatalyst 18.0, *)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct RealityViewRenderingEffects : Swift.Sendable {
  public var motionBlur: _RealityKit_SwiftUI.RealityViewRenderingEffectMode
  public var depthOfField: _RealityKit_SwiftUI.RealityViewRenderingEffectMode
  public var cameraGrain: _RealityKit_SwiftUI.RealityViewRenderingEffectMode
  public var antialiasing: RealityFoundation.AntialiasingMode
  public var dynamicRange: _RealityKit_SwiftUI.RealityViewDynamicRange
}
@available(iOS 18.0, macOS 15.0, macCatalyst 18.0, *)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct RealityViewRenderingEffectMode : Swift.Hashable, Swift.Sendable {
  public static var `default`: _RealityKit_SwiftUI.RealityViewRenderingEffectMode {
    get
  }
  public static var enabled: _RealityKit_SwiftUI.RealityViewRenderingEffectMode {
    get
  }
  public static var disabled: _RealityKit_SwiftUI.RealityViewRenderingEffectMode {
    get
  }
  public static func == (a: _RealityKit_SwiftUI.RealityViewRenderingEffectMode, b: _RealityKit_SwiftUI.RealityViewRenderingEffectMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 18.0, macOS 15.0, macCatalyst 18.0, *)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct RealityViewDynamicRange : Swift.Hashable, Swift.Sendable {
  public static var `default`: _RealityKit_SwiftUI.RealityViewDynamicRange {
    get
  }
  public static var standard: _RealityKit_SwiftUI.RealityViewDynamicRange {
    get
  }
  @usableFromInline
  internal static var _hdrRendering: _RealityKit_SwiftUI.RealityViewDynamicRange {
    get
  }
  public static func == (a: _RealityKit_SwiftUI.RealityViewDynamicRange, b: _RealityKit_SwiftUI.RealityViewDynamicRange) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public enum Model3DPhase {
  case empty
  case success(_RealityKit_SwiftUI.ResolvedModel3D)
  case failure(any Swift.Error)
  public var model: _RealityKit_SwiftUI.ResolvedModel3D? {
    get
  }
  public var error: (any Swift.Error)? {
    get
  }
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct Model3D<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  nonisolated public init(url: Foundation.URL) where Content == _RealityKit_SwiftUI.ResolvedModel3D
  nonisolated public init<Model, Placeholder>(url: Foundation.URL, @SwiftUICore.ViewBuilder content: @escaping (_RealityKit_SwiftUI.ResolvedModel3D) -> Model, @SwiftUICore.ViewBuilder placeholder: @escaping () -> Placeholder) where Content == _RealityKit_SwiftUI.Model3DPlaceholderContent<Model, Placeholder>, Model : SwiftUICore.View, Placeholder : SwiftUICore.View
  nonisolated public init(url: Foundation.URL, transaction: SwiftUICore.Transaction = Transaction(), @SwiftUICore.ViewBuilder content: @escaping (_RealityKit_SwiftUI.Model3DPhase) -> Content)
  nonisolated public init(named name: Swift.String, bundle: Foundation.Bundle? = nil) where Content == _RealityKit_SwiftUI.ResolvedModel3D
  nonisolated public init<Model, Placeholder>(named name: Swift.String, bundle: Foundation.Bundle? = nil, @SwiftUICore.ViewBuilder content: @escaping (_RealityKit_SwiftUI.ResolvedModel3D) -> Model, @SwiftUICore.ViewBuilder placeholder: @escaping () -> Placeholder) where Content == _RealityKit_SwiftUI.Model3DPlaceholderContent<Model, Placeholder>, Model : SwiftUICore.View, Placeholder : SwiftUICore.View
  nonisolated public init(named name: Swift.String, bundle: Foundation.Bundle? = nil, transaction: SwiftUICore.Transaction = Transaction(), @SwiftUICore.ViewBuilder content: @escaping (_RealityKit_SwiftUI.Model3DPhase) -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(visionOS 1.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s19_RealityKit_SwiftUI7Model3DV4bodyQrvp", 0) __<Content>
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct Model3DPlaceholderContent<Model, Placeholder> : SwiftUICore.View where Model : SwiftUICore.View, Placeholder : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(visionOS 1.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s19_RealityKit_SwiftUI25Model3DPlaceholderContentV4bodyQrvp", 0) __<Model, Placeholder>
}
@available(visionOS 1.0, macOS 15.0, macCatalyst 18.0, iOS 18.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.Gesture {
  @available(visionOS 1.0, macOS 15.0, macCatalyst 18.0, iOS 18.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func targetedToAnyEntity() -> some SwiftUICore.Gesture<_RealityKit_SwiftUI.EntityTargetValue<Self.Value>>
  
  @available(visionOS 1.0, macOS 15.0, macCatalyst 18.0, iOS 18.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func targetedToEntity(_ entity: RealityFoundation.Entity) -> some SwiftUICore.Gesture<_RealityKit_SwiftUI.EntityTargetValue<Self.Value>>
  
  @available(visionOS 1.0, macOS 15.0, macCatalyst 18.0, iOS 18.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func targetedToEntity(where query: RealityFoundation.QueryPredicate<RealityFoundation.Entity>) -> some SwiftUICore.Gesture<_RealityKit_SwiftUI.EntityTargetValue<Self.Value>>
  
}
@available(visionOS 1.0, macOS 15.0, macCatalyst 18.0, iOS 18.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@dynamicMemberLookup public struct EntityTargetValue<Value> {
  public var gestureValue: Value
  public var entity: RealityFoundation.Entity
  public subscript<T>(dynamicMember keyPath: Swift.KeyPath<Value, T>) -> T {
    get
  }
}
@available(visionOS 1.0, macOS 15.0, macCatalyst 18.0, iOS 18.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension _RealityKit_SwiftUI.EntityTargetValue : Swift.Equatable where Value : Swift.Equatable {
  public static func == (lhs: _RealityKit_SwiftUI.EntityTargetValue<Value>, rhs: _RealityKit_SwiftUI.EntityTargetValue<Value>) -> Swift.Bool
}
@available(iOS 17.0, *)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension _RealityKit_SwiftUI.ObjectCaptureView : Swift.Sendable {}
@available(iOS 17.0, *)
@available(watchOS, unavailable)
@available(macOS, unavailable, introduced: 15.0)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension _RealityKit_SwiftUI.ObjectCaptureSession : Swift.Sendable {}
@available(iOS 17.0, *)
@available(watchOS, unavailable)
@available(macOS, unavailable, introduced: 15.0)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension _RealityKit_SwiftUI.ObjectCaptureSession.Feedback : Swift.Hashable {}
@available(iOS 17.0, *)
@available(watchOS, unavailable)
@available(macOS, unavailable, introduced: 15.0)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension _RealityKit_SwiftUI.ObjectCaptureSession.Tracking.Reason : Swift.Equatable {}
@available(iOS 17.0, *)
@available(watchOS, unavailable)
@available(macOS, unavailable, introduced: 15.0)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension _RealityKit_SwiftUI.ObjectCaptureSession.Tracking.Reason : Swift.Hashable {}
@available(iOS 17.0, *)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension _RealityKit_SwiftUI.ObjectCapturePointCloudView : Swift.Sendable {}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension _RealityKit_SwiftUI.ResolvedModel3D : Swift.Sendable {}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension _RealityKit_SwiftUI.RealityView : Swift.Sendable {}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension _RealityKit_SwiftUI.RealityViewDefaultPlaceholder : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, macCatalyst 18.0, *)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension _RealityKit_SwiftUI.RealityViewCameraContent.Body : Swift.Sendable {}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension _RealityKit_SwiftUI.Model3D : Swift.Sendable {}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension _RealityKit_SwiftUI.Model3DPlaceholderContent : Swift.Sendable {}
