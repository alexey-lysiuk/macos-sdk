// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.5 clang-1700.0.13.3)
// swift-module-flags: -target x86_64-apple-ios18.4-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 1591.5.17.3 -module-name _PassKit_SwiftUI
// swift-module-flags-ignorable:  -interface-compiler-version 6.1
import Foundation
@_exported import PassKit
import Swift
@_exported import SwiftUI
import _Concurrency
@_exported import _PassKit_SwiftUI
import _StringProcessing
import _SwiftConcurrencyShims
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _PassKit_SwiftUI.AddPassToWalletButton {
  nonisolated public init(carKeyPassword: Swift.String, supportedRadioTechnologies: PassKit.PKRadioTechnology, issuerIdentifier: Swift.String, onCompletion: @escaping (Swift.Result<PassKit.PKSecureElementPass, any Swift.Error>) -> Swift.Void, @SwiftUICore.ViewBuilder fallback: () -> Fallback)
  nonisolated public init(_ configuration: PassKit.PKAddSecureElementPassConfiguration, onCompletion: @escaping (Swift.Result<[PassKit.PKSecureElementPass], any Swift.Error>) -> Swift.Void, @SwiftUICore.ViewBuilder fallback: () -> Fallback)
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _PassKit_SwiftUI.AddPassToWalletButton where Fallback == SwiftUICore.EmptyView {
  nonisolated public init(carKeyPassword: Swift.String, supportedRadioTechnologies: PassKit.PKRadioTechnology, issuerIdentifier: Swift.String, onCompletion: @escaping (Swift.Result<PassKit.PKSecureElementPass, any Swift.Error>) -> Swift.Void)
  nonisolated public init(_ configuration: PassKit.PKAddSecureElementPassConfiguration, onCompletion: @escaping (Swift.Result<[PassKit.PKSecureElementPass], any Swift.Error>) -> Swift.Void)
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct PayWithApplePayButton<Fallback> : SwiftUICore.View where Fallback : SwiftUICore.View {
  nonisolated public init(_ label: _PassKit_SwiftUI.PayWithApplePayButtonLabel = .plain, action: @escaping () -> Swift.Void, @SwiftUICore.ViewBuilder fallback: () -> Fallback)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, watchOS 9.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s16_PassKit_SwiftUI012PayWithAppleE6ButtonV4bodyQrvp", 0) __<Fallback>
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension _PassKit_SwiftUI.PayWithApplePayButton where Fallback == SwiftUICore.EmptyView {
  nonisolated public init(_ label: _PassKit_SwiftUI.PayWithApplePayButtonLabel = .plain, action: @escaping () -> Swift.Void)
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct AddPassToWalletButton<Fallback> : SwiftUICore.View where Fallback : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s16_PassKit_SwiftUI03AddA14ToWalletButtonV4bodyQrvp", 0) __<Fallback>
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _PassKit_SwiftUI.AddPassToWalletButton where Fallback == SwiftUICore.EmptyView {
  nonisolated public init(action: @escaping () -> Swift.Void)
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct VerifyIdentityWithWalletButton<Fallback> : SwiftUICore.View where Fallback : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s16_PassKit_SwiftUI30VerifyIdentityWithWalletButtonV4bodyQrvp", 0) __<Fallback>
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct AddPassToWalletButtonStyle {
  public static let black: _PassKit_SwiftUI.AddPassToWalletButtonStyle
  public static let blackOutline: _PassKit_SwiftUI.AddPassToWalletButtonStyle
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func addPassToWalletButtonStyle(_ style: _PassKit_SwiftUI.AddPassToWalletButtonStyle) -> some SwiftUICore.View
  
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct AsyncShareablePassConfiguration<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  public enum Result : Swift.Sendable {
    case success(PassKit.PKAddShareablePassConfiguration)
    case failure(any Swift.Error)
    case loading
  }
  nonisolated public init(metadata: [PassKit.PKShareablePassMetadata], action: PassKit.PKAddShareablePassConfigurationPrimaryAction, @SwiftUICore.ViewBuilder content: @escaping (_PassKit_SwiftUI.AsyncShareablePassConfiguration<Content>.Result) -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s16_PassKit_SwiftUI014AsyncShareableA13ConfigurationV4bodyQrvp", 0) __<Content>
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _PassKit_SwiftUI.AddPassToWalletButton {
  nonisolated public init(_ passes: [PassKit.PKPass], onCompletion: @escaping (_ didAdd: Swift.Bool) -> Swift.Void, @SwiftUICore.ViewBuilder fallback: () -> Fallback)
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _PassKit_SwiftUI.AddPassToWalletButton where Fallback == SwiftUICore.EmptyView {
  nonisolated public init(_ passes: [PassKit.PKPass], onCompletion: @escaping (_ didAdd: Swift.Bool) -> Swift.Void)
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
public enum PayWithApplePayButtonPaymentAuthorizationPhase {
  case willAuthorize
  case didAuthorize(payment: PassKit.PKPayment, resultHandler: (PassKit.PKPaymentAuthorizationResult) -> Swift.Void)
  case didFinish
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension _PassKit_SwiftUI.PayWithApplePayButton {
  @available(macCatalyst, unavailable)
  @available(macOS, unavailable)
  nonisolated public init(_ label: _PassKit_SwiftUI.PayWithApplePayButtonLabel = .plain, request: PassKit.PKPaymentRequest, onPaymentAuthorizationChange: @escaping (_PassKit_SwiftUI.PayWithApplePayButtonPaymentAuthorizationPhase) -> Swift.Void, @SwiftUICore.ViewBuilder fallback: () -> Fallback)
  nonisolated public init(_ label: _PassKit_SwiftUI.PayWithApplePayButtonLabel = .plain, request: PassKit.PKPaymentRequest, onPaymentAuthorizationChange: @escaping (_PassKit_SwiftUI.PayWithApplePayButtonPaymentAuthorizationPhase) -> Swift.Void, onMerchantSessionRequested: @escaping () async -> PassKit.PKPaymentRequestMerchantSessionUpdate, @SwiftUICore.ViewBuilder fallback: () -> Fallback)
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension _PassKit_SwiftUI.PayWithApplePayButton where Fallback == SwiftUICore.EmptyView {
  @available(macCatalyst, unavailable)
  @available(macOS, unavailable)
  nonisolated public init(_ label: _PassKit_SwiftUI.PayWithApplePayButtonLabel = .plain, request: PassKit.PKPaymentRequest, onPaymentAuthorizationChange: @escaping (_PassKit_SwiftUI.PayWithApplePayButtonPaymentAuthorizationPhase) -> Swift.Void)
  nonisolated public init(_ label: _PassKit_SwiftUI.PayWithApplePayButtonLabel = .plain, request: PassKit.PKPaymentRequest, onPaymentAuthorizationChange: @escaping (_PassKit_SwiftUI.PayWithApplePayButtonPaymentAuthorizationPhase) -> Swift.Void, onMerchantSessionRequested: @escaping () async -> PassKit.PKPaymentRequestMerchantSessionUpdate)
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _PassKit_SwiftUI.VerifyIdentityWithWalletButton {
  nonisolated public init(_ label: _PassKit_SwiftUI.VerifyIdentityWithWalletButtonLabel = .verifyIdentity, request: PassKit.PKIdentityRequest, onCompletion: @escaping (Swift.Result<PassKit.PKIdentityDocument, any Swift.Error>) -> Swift.Void, @SwiftUICore.ViewBuilder fallback: () -> Fallback)
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _PassKit_SwiftUI.VerifyIdentityWithWalletButton where Fallback == SwiftUICore.EmptyView {
  nonisolated public init(_ label: _PassKit_SwiftUI.VerifyIdentityWithWalletButtonLabel = .verifyIdentity, action: @escaping () -> Swift.Void)
  nonisolated public init(_ label: _PassKit_SwiftUI.VerifyIdentityWithWalletButtonLabel = .verifyIdentity, request: PassKit.PKIdentityRequest, onCompletion: @escaping (Swift.Result<PassKit.PKIdentityDocument, any Swift.Error>) -> Swift.Void)
}
@available(iOS 15.5, macOS 12.5, watchOS 8.5, *)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func onApplePayPaymentMethodChange(perform action: @escaping (PassKit.PKPaymentMethod) async -> PassKit.PKPaymentRequestPaymentMethodUpdate) -> some SwiftUICore.View
  
  nonisolated public func onApplePayShippingContactChange(perform action: @escaping (PassKit.PKContact) async -> PassKit.PKPaymentRequestShippingContactUpdate) -> some SwiftUICore.View
  
  nonisolated public func onApplePayShippingMethodChange(perform action: @escaping (PassKit.PKShippingMethod) async -> PassKit.PKPaymentRequestShippingMethodUpdate) -> some SwiftUICore.View
  
  @available(watchOS, unavailable)
  nonisolated public func onApplePayCouponCodeChange(perform action: @escaping (Swift.String) async -> PassKit.PKPaymentRequestCouponCodeUpdate) -> some SwiftUICore.View
  
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _PassKit_SwiftUI.AddPassToWalletButton {
  nonisolated public init(_ configuration: PassKit.PKAddPaymentPassRequestConfiguration, onRequest: @escaping (_PassKit_SwiftUI.AddPassToWalletButtonResponse) async -> PassKit.PKAddPaymentPassRequest, onCompletion: @escaping (Swift.Result<PassKit.PKSecureElementPass, any Swift.Error>) -> Swift.Void, @SwiftUICore.ViewBuilder fallback: () -> Fallback)
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct AddPassToWalletButtonResponse {
  public var certificates: [Foundation.Data]
  public var nonce: Foundation.Data
  public var nonceSignature: Foundation.Data
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _PassKit_SwiftUI.AddPassToWalletButton where Fallback == SwiftUICore.EmptyView {
  @_Concurrency.MainActor @preconcurrency public init(_ configuration: PassKit.PKAddPaymentPassRequestConfiguration, onRequest: @escaping (_PassKit_SwiftUI.AddPassToWalletButtonResponse) async -> PassKit.PKAddPaymentPassRequest, onCompletion: @escaping (Swift.Result<PassKit.PKSecureElementPass, any Swift.Error>) -> Swift.Void)
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
public struct PayWithApplePayButtonLabel {
  public static let plain: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let buy: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let addMoney: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let book: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let checkout: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let `continue`: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let contribute: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let donate: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let inStore: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let order: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let reload: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let rent: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let setUp: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let subscribe: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let support: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let tip: _PassKit_SwiftUI.PayWithApplePayButtonLabel
  public static let topUp: _PassKit_SwiftUI.PayWithApplePayButtonLabel
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
public struct PayWithApplePayButtonStyle {
  public static let white: _PassKit_SwiftUI.PayWithApplePayButtonStyle
  public static let whiteOutline: _PassKit_SwiftUI.PayWithApplePayButtonStyle
  public static let black: _PassKit_SwiftUI.PayWithApplePayButtonStyle
  public static let automatic: _PassKit_SwiftUI.PayWithApplePayButtonStyle
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func payWithApplePayButtonStyle(_ style: _PassKit_SwiftUI.PayWithApplePayButtonStyle) -> some SwiftUICore.View
  
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct VerifyIdentityWithWalletButtonLabel {
  public static let verifyIdentity: _PassKit_SwiftUI.VerifyIdentityWithWalletButtonLabel
  public static let `continue`: _PassKit_SwiftUI.VerifyIdentityWithWalletButtonLabel
  public static let verify: _PassKit_SwiftUI.VerifyIdentityWithWalletButtonLabel
  public static let verifyAge: _PassKit_SwiftUI.VerifyIdentityWithWalletButtonLabel
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct VerifyIdentityWithWalletButtonStyle {
  public static let black: _PassKit_SwiftUI.VerifyIdentityWithWalletButtonStyle
  public static let blackOutline: _PassKit_SwiftUI.VerifyIdentityWithWalletButtonStyle
  @_silgen_name("$s16_PassKit_SwiftUI35VerifyIdentityWithWalletButtonStyleV12blackOutlineACvsZ")
  @usableFromInline
  internal func _setVerifyIdentityWithWalletButtonStyleBlackOutline(_ blackOutline: _PassKit_SwiftUI.VerifyIdentityWithWalletButtonStyle)
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func verifyIdentityWithWalletButtonStyle(_ style: _PassKit_SwiftUI.VerifyIdentityWithWalletButtonStyle) -> some SwiftUICore.View
  
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct AddPassToWalletButtonFilter {
  public static func paymentNetwork(_ paymentNetwork: PassKit.PKPaymentNetwork) -> _PassKit_SwiftUI.AddPassToWalletButtonFilter
  public static func productIdentifier(_ productIdentifier: Swift.String) -> _PassKit_SwiftUI.AddPassToWalletButtonFilter
  public static func primaryAccountIdentifier(_ primaryAccountIdentifier: Swift.String) -> _PassKit_SwiftUI.AddPassToWalletButtonFilter
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _PassKit_SwiftUI.AddPassToWalletButton {
  nonisolated public init(_ encryptionScheme: PassKit.PKEncryptionScheme, cardholderName: Swift.String, passStyle: PassKit.PKAddPaymentPassStyle = .payment, primaryAccountSuffix: Swift.String? = nil, cardDetails: [PassKit.PKLabeledValue]? = nil, description: Swift.String? = nil, filters: [_PassKit_SwiftUI.AddPassToWalletButtonFilter] = [], onRequest: @escaping (_PassKit_SwiftUI.AddPassToWalletButtonResponse) async -> PassKit.PKAddPaymentPassRequest, onCompletion: @escaping (Swift.Result<PassKit.PKSecureElementPass, any Swift.Error>) -> Swift.Void, @SwiftUICore.ViewBuilder fallback: () -> Fallback)
  nonisolated public init(_ encryptionScheme: PassKit.PKEncryptionScheme, primaryAccountSuffix: Swift.String, passStyle: PassKit.PKAddPaymentPassStyle = .payment, cardDetails: [PassKit.PKLabeledValue]? = nil, description: Swift.String? = nil, filters: [_PassKit_SwiftUI.AddPassToWalletButtonFilter] = [], onRequest: @escaping (_PassKit_SwiftUI.AddPassToWalletButtonResponse) async -> PassKit.PKAddPaymentPassRequest, onCompletion: @escaping (Swift.Result<PassKit.PKSecureElementPass, any Swift.Error>) -> Swift.Void, @SwiftUICore.ViewBuilder fallback: () -> Fallback)
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _PassKit_SwiftUI.AddPassToWalletButton where Fallback == SwiftUICore.EmptyView {
  nonisolated public init(_ encryptionScheme: PassKit.PKEncryptionScheme, cardholderName: Swift.String, passStyle: PassKit.PKAddPaymentPassStyle = .payment, primaryAccountSuffix: Swift.String? = nil, cardDetails: [PassKit.PKLabeledValue]? = nil, description: Swift.String? = nil, filters: [_PassKit_SwiftUI.AddPassToWalletButtonFilter] = [], onRequest: @escaping (_PassKit_SwiftUI.AddPassToWalletButtonResponse) async -> PassKit.PKAddPaymentPassRequest, onCompletion: @escaping (Swift.Result<PassKit.PKSecureElementPass, any Swift.Error>) -> Swift.Void)
  nonisolated public init(_ encryptionScheme: PassKit.PKEncryptionScheme, primaryAccountSuffix: Swift.String, passStyle: PassKit.PKAddPaymentPassStyle = .payment, cardDetails: [PassKit.PKLabeledValue]? = nil, description: Swift.String? = nil, filters: [_PassKit_SwiftUI.AddPassToWalletButtonFilter] = [], onRequest: @escaping (_PassKit_SwiftUI.AddPassToWalletButtonResponse) async -> PassKit.PKAddPaymentPassRequest, onCompletion: @escaping (Swift.Result<PassKit.PKSecureElementPass, any Swift.Error>) -> Swift.Void)
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _PassKit_SwiftUI.AddPassToWalletButton : Swift.Sendable {}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension _PassKit_SwiftUI.PayWithApplePayButton : Swift.Sendable {}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _PassKit_SwiftUI.VerifyIdentityWithWalletButton : Swift.Sendable {}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _PassKit_SwiftUI.AsyncShareablePassConfiguration : Swift.Sendable {}
