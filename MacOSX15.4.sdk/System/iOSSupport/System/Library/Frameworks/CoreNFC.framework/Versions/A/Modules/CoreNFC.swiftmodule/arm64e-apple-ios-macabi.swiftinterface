// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.5 clang-1700.0.13.3)
// swift-module-flags: -target arm64e-apple-ios18.4-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 354.27 -module-name CoreNFC
// swift-module-flags-ignorable:  -interface-compiler-version 6.1
@_exported import CoreNFC
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(iOS 13.0, *)
@available(visionOS, unavailable)
public protocol NFCTagReaderSessionDelegate : ObjectiveC.NSObjectProtocol {
  @available(iOS 13.0, *)
  func tagReaderSessionDidBecomeActive(_ session: CoreNFC.NFCTagReaderSession)
  @available(iOS 13.0, *)
  func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didInvalidateWithError error: any Swift.Error)
  @available(iOS 13.0, *)
  func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didDetect tags: [CoreNFC.NFCTag])
}
@available(iOS 14.0, *)
@available(visionOS, unavailable)
public struct NFCISO7816ResponseAPDU {
  public var statusWord1: Swift.UInt8
  public var statusWord2: Swift.UInt8
  public var payload: Foundation.Data?
  @available(iOS 14.0, *)
  @backDeployed(before: iOS 18.0)
  public init(statusWord1 _statusWord1: Swift.UInt8, statusWord2 _statusWord2: Swift.UInt8, payload _payload: Foundation.Data?) {
        self.init(statusWord1: _statusWord1, statusWord2: _statusWord2, paylaod: _payload)
    }
  @available(*, deprecated, renamed: "init(statusWord1:statusWord2:payload:)")
  public init(statusWord1 _statusWord1: Swift.UInt8, statusWord2 _statusWord2: Swift.UInt8, paylaod _paylaod: Foundation.Data?)
}
@available(iOS 14.0, *)
@available(visionOS, unavailable)
extension CoreNFC.NFCISO7816Tag {
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  public func sendCommand(apdu: CoreNFC.NFCISO7816APDU, resultHandler: @escaping (Swift.Result<CoreNFC.NFCISO7816ResponseAPDU, any Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  @_alwaysEmitIntoClient public func sendCommand(apdu: CoreNFC.NFCISO7816APDU) async throws -> CoreNFC.NFCISO7816ResponseAPDU {
        let (data, sw1, sw2) = try await self.sendCommand(apdu: apdu)
        return NFCISO7816ResponseAPDU(statusWord1: sw1, statusWord2: sw2, payload: (data.count > 0) ? data : nil)
    }
}
@available(iOS 14.0, *)
@available(visionOS, unavailable)
extension CoreNFC.NFCMiFareTag {
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  public func sendMiFareCommand(commandPacket command: Foundation.Data, resultHandler: @escaping (Swift.Result<Foundation.Data, any Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  public func sendMiFareISO7816Command(_ apdu: CoreNFC.NFCISO7816APDU, resultHandler: @escaping (Swift.Result<CoreNFC.NFCISO7816ResponseAPDU, any Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  @_alwaysEmitIntoClient public func sendMiFareISO7816Command(_ apdu: CoreNFC.NFCISO7816APDU) async throws -> CoreNFC.NFCISO7816ResponseAPDU {
        let (responseData, sw1, sw2) = try await self.sendMiFareISO7816Command(apdu)
        return NFCISO7816ResponseAPDU(statusWord1: sw1,
                                      statusWord2: sw2,
                                      payload: (responseData.count > 0) ? responseData : nil)
    }
}
@_hasMissingDesignatedInitializers @available(iOS 17.4, *)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
final public class NFCPresentmentIntentAssertion : Swift.Sendable {
  public enum Error : Swift.Error {
    case systemEligibilityFailed
    case systemNotAvailable
    public static func == (a: CoreNFC.NFCPresentmentIntentAssertion.Error, b: CoreNFC.NFCPresentmentIntentAssertion.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public var isValid: Swift.Bool {
    get
  }
  @objc deinit
  public static func acquire() async throws -> CoreNFC.NFCPresentmentIntentAssertion
}
@available(iOS 17.4, *)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
open class CardSession {
  public enum Error : Swift.Error, Swift.Sendable {
    case invalidated
    case userInvalidated
    case maxSessionDurationReached
    case transmissionError
    case systemNotAvailable
    case accessNotAccepted
    case systemEligibilityFailed
    case emulationStopped
    case radioDisabled
    public static func == (a: CoreNFC.CardSession.Error, b: CoreNFC.CardSession.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Event : Swift.Sendable {
    case sessionStarted
    case readerDetected
    case received(CoreNFC.CardSession.APDU)
    case readerDeselected
    case sessionInvalidated(reason: CoreNFC.CardSession.Error)
  }
  @_hasMissingDesignatedInitializers final public class APDU : Swift.Sendable, Swift.Equatable {
    final public let payload: Foundation.Data
    final public func respond(response: Foundation.Data) async throws
    public static func == (lhs: CoreNFC.CardSession.APDU, rhs: CoreNFC.CardSession.APDU) -> Swift.Bool
    @objc deinit
  }
  public var isEmulationInProgress: Swift.Bool {
    get async
  }
  public static var isEligible: Swift.Bool {
    get async
  }
  public class var isSupported: Swift.Bool {
    get
  }
  public init() async throws
  public func startEmulation() async throws
  public enum EmulationUIStatus {
    case success
    case failure
    public static func == (a: CoreNFC.CardSession.EmulationUIStatus, b: CoreNFC.CardSession.EmulationUIStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func stopEmulation(status: CoreNFC.CardSession.EmulationUIStatus) async
  public func invalidate()
  @_hasMissingDesignatedInitializers final public class EventStream : _Concurrency.AsyncSequence {
    public typealias AsyncIterator = CoreNFC.CardSession.EventStream.Iterator
    public typealias Element = CoreNFC.CardSession.Event
    final public func makeAsyncIterator() -> CoreNFC.CardSession.EventStream.Iterator
    @_hasMissingDesignatedInitializers public class Iterator : _Concurrency.AsyncIteratorProtocol {
      public func next() async throws -> CoreNFC.CardSession.Event?
      public typealias Element = CoreNFC.CardSession.Event
      @available(iOS 18.0, *)
      @available(tvOS, unavailable, introduced: 18.0)
      @available(watchOS, unavailable, introduced: 11.0)
      @available(visionOS, unavailable, introduced: 2.0)
      @available(macOS, unavailable, introduced: 15.0)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
      @objc deinit
    }
    @available(iOS 18.0, *)
    @available(tvOS, unavailable, introduced: 18.0)
    @available(watchOS, unavailable, introduced: 11.0)
    @available(visionOS, unavailable, introduced: 2.0)
    @available(macOS, unavailable, introduced: 15.0)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
    @objc deinit
  }
  public var alertMessage: Swift.String {
    get
    set
  }
  public var eventStream: CoreNFC.CardSession.EventStream {
    get
  }
  @objc deinit
}
@available(iOS 17.4, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(visionOS, unavailable)
extension CoreNFC.CardSession.APDU : Swift.CustomDebugStringConvertible {
  final public var debugDescription: Swift.String {
    get
  }
}
@available(iOS 13.0, *)
@available(visionOS, unavailable)
extension CoreNFC.NFCTagReaderSession {
  @available(iOS 15.0, *)
  @usableFromInline
  @available(visionOS, unavailable)
  internal func upcastTag(_ tag: CoreNFC.NFCTag) -> any CoreNFC.__NFCTag
  @available(iOS 13.0, *)
  @available(visionOS, unavailable)
  public var connectedTag: CoreNFC.NFCTag? {
    get
  }
  @available(iOS 13.0, *)
  @available(visionOS, unavailable)
  convenience public init?(pollingOption: CoreNFC.NFCTagReaderSession.PollingOption, delegate: any CoreNFC.NFCTagReaderSessionDelegate, queue: Dispatch.DispatchQueue? = nil)
  @available(iOS 13.0, *)
  @available(visionOS, unavailable)
  public func connect(to tag: CoreNFC.NFCTag, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  @available(iOS 13.0, *)
  @available(visionOS, unavailable)
  @_alwaysEmitIntoClient public func connect(to tag: CoreNFC.NFCTag) async throws {
        var upcastedTag: CoreNFC.__NFCTag
        
        if #available(iOS 15.0, *) {
             
            upcastedTag = self.upcastTag(tag)
        } else {
             
            switch (tag) {
            case let .feliCa(t):
                upcastedTag = t
            case let .iso7816(t):
                upcastedTag = t
            case let .iso15693(t):
                upcastedTag = t
            case let .miFare(t):
                upcastedTag = t
            @unknown case _:
                fatalError("Please recompile with a newer SDK")
            }
        }
        
        return try await self.__connect(to:upcastedTag)
    }
}
@available(iOS 14.0, *)
@available(visionOS, unavailable)
public struct NFCFeliCaPollingResponse {
  public var manufactureParameter: Foundation.Data
  public var requestData: Foundation.Data?
  public init(manufactureParameter _manufactureParameter: Foundation.Data, requestData _requestData: Foundation.Data?)
}
@available(iOS 14.0, *)
@available(visionOS, unavailable)
public struct NFCFeliCaStatusFlag {
  public var statusFlag1: Swift.Int
  public var statusFlag2: Swift.Int
  public init(statusFlag1 _statusFlag1: Swift.Int, statusFlag2 _statusFlag2: Swift.Int)
}
@available(iOS 14.0, *)
@available(visionOS, unavailable)
public struct NFCFeliCaRequsetServiceV2Response {
  public var statusFlag1: Swift.Int
  public var statusFlag2: Swift.Int
  public var encryptionIdentifier: CoreNFC.NFCFeliCaEncryptionId
  public var nodeKeyVersionListAES: [Foundation.Data]?
  public var nodeKeyVersionListDES: [Foundation.Data]?
  public init(statusFlag1 _statusFlag1: Swift.Int, statusFlag2 _statusFlag2: Swift.Int, encryptionIdentifier _encryptionIdentifier: CoreNFC.NFCFeliCaEncryptionId, nodeKeyVersionListAES _nodeKeyVersionListAES: [Foundation.Data]?, nodeKeyVersionListDES _nodeKeyVersionListDES: [Foundation.Data]?)
}
@available(iOS 14.0, *)
@available(visionOS, unavailable)
public struct NFCFeliCaRequestSpecificationVersionResponse {
  public var statusFlag1: Swift.Int
  public var statusFlag2: Swift.Int
  public var basicVersion: Foundation.Data?
  public var optionVersion: Foundation.Data?
  public init(statusFlag1 _statusFlag1: Swift.Int, statusFlag2 _statusFlag2: Swift.Int, basicVersion _basicVersion: Foundation.Data?, optionVersion _optionVersion: Foundation.Data?)
}
@available(iOS 14.0, *)
@available(visionOS, unavailable)
extension CoreNFC.NFCFeliCaTag {
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  public func polling(systemCode: Foundation.Data, requestCode: CoreNFC.NFCFeliCaPollingRequestCode, timeSlot: CoreNFC.NFCFeliCaPollingTimeSlot, resultHandler: @escaping (Swift.Result<CoreNFC.NFCFeliCaPollingResponse, any Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  public func requestService(nodeCodeList: [Foundation.Data], resultHandler: @escaping (Swift.Result<[Foundation.Data], any Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  public func requestResponse(resultHandler: @escaping (Swift.Result<Swift.Int, any Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  public func readWithoutEncryption(serviceCodeList: [Foundation.Data], blockList: [Foundation.Data], resultHandler: @escaping (Swift.Result<(CoreNFC.NFCFeliCaStatusFlag, [Foundation.Data]), any Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  public func writeWithoutEncryption(serviceCodeList: [Foundation.Data], blockList: [Foundation.Data], blockData: [Foundation.Data], resultHandler: @escaping (Swift.Result<CoreNFC.NFCFeliCaStatusFlag, any Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  public func requestSystemCode(resultHandler: @escaping (Swift.Result<[Foundation.Data], any Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  public func requestServiceV2(nodeCodeList: [Foundation.Data], resultHandler: @escaping (Swift.Result<CoreNFC.NFCFeliCaRequsetServiceV2Response, any Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  public func requestSpecificationVersion(resultHandler: @escaping (Swift.Result<CoreNFC.NFCFeliCaRequestSpecificationVersionResponse, any Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  public func resetMode(resultHandler: @escaping (Swift.Result<CoreNFC.NFCFeliCaStatusFlag, any Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  public func sendFeliCaCommand(commandPacket: Foundation.Data, resultHandler: @escaping (Swift.Result<Foundation.Data, any Swift.Error>) -> Swift.Void)
}
@available(iOS 11.0, *)
@available(visionOS, unavailable)
extension CoreNFC.NFCNDEFPayload {
  @available(iOS 13.0, *)
  @available(visionOS, unavailable)
  public func wellKnownTypeTextPayload() -> (Swift.String?, Foundation.Locale?)
}
@available(iOS 13.0, *)
@available(visionOS, unavailable)
public enum NFCTag {
  case feliCa(any CoreNFC.NFCFeliCaTag)
  case iso7816(any CoreNFC.NFCISO7816Tag)
  case iso15693(any CoreNFC.NFCISO15693Tag)
  case miFare(any CoreNFC.NFCMiFareTag)
  public var isAvailable: Swift.Bool {
    get
  }
}
@available(iOS 14.0, *)
@available(visionOS, unavailable)
public struct NFCISO15693SystemInfo {
  public var uniqueIdentifier: Foundation.Data
  public var dataStorageFormatIdentifier: Swift.Int
  public var applicationFamilyIdentifier: Swift.Int
  public var blockSize: Swift.Int
  public var totalBlocks: Swift.Int
  public var icReference: Swift.Int
  public init(uniqueIdentifier _uniqueIdentifier: Foundation.Data, dataStorageFormatIdentifier _dataStorageFormatIdentifier: Swift.Int, applicationFamilyIdentifier _applicationFamilyIdentifier: Swift.Int, blockSize _blockSize: Swift.Int, totalBlocks _totalBlocks: Swift.Int, icReference _icReference: Swift.Int)
}
@available(iOS 14.0, *)
@available(visionOS, unavailable)
public struct NFCISO15693MultipleBlockSecurityStatus {
  public var blockSecurityStatus: [Swift.Int]
  public init(blockSecurityStatus _blockSecurityStatus: [Swift.Int])
}
@available(iOS 11.0, *)
@available(visionOS, unavailable)
extension CoreNFC.NFCISO15693Tag {
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  public func readSingleBlock(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, blockNumber: Swift.UInt8, resultHandler: @escaping (Swift.Result<Foundation.Data, any Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  public func readMultipleBlocks(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, blockRange: Foundation.NSRange, resultHandler: @escaping (Swift.Result<[Foundation.Data], any Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  public func getSystemInfo(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, resultHandler: @escaping (Swift.Result<CoreNFC.NFCISO15693SystemInfo, any Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  @_alwaysEmitIntoClient public func systemInfo(requestFlags flags: CoreNFC.NFCISO15693RequestFlag) async throws -> CoreNFC.NFCISO15693SystemInfo {
        let (uid, dsfid, afi, blockSize, blockCount, icReference) = try await self.__systemInfoAndUID(with: flags)
        return NFCISO15693SystemInfo(uniqueIdentifier: uid,
                                     dataStorageFormatIdentifier: dsfid,
                                     applicationFamilyIdentifier: afi,
                                     blockSize: blockSize,
                                     totalBlocks: blockCount,
                                     icReference: icReference)
    }
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  public func fastReadMultipleBlocks(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, blockRange: Foundation.NSRange, resultHandler: @escaping (Swift.Result<[Foundation.Data], any Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  @_alwaysEmitIntoClient public func fastReadMultipleBlocks(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, blockRange: Foundation.NSRange) async throws -> [Foundation.Data] {
        return try await self.__fastReadMultipleBlocks(with: flags, blockRange: blockRange)
    }
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  public func customCommand(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, customCommandCode: Swift.Int, customRequestParameters: Foundation.Data, resultHandler: @escaping (Swift.Result<Foundation.Data, any Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  public func extendedReadSingleBlock(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, blockNumber: Swift.Int, resultHandler: @escaping (Swift.Result<Foundation.Data, any Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  public func extendedWriteMultipleBlocks(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, blockRange: Foundation.NSRange, dataBlocks: [Foundation.Data], completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  @_alwaysEmitIntoClient public func extendedWriteMultipleBlocks(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, blockRange: Foundation.NSRange, dataBlocks: [Foundation.Data]) async throws {
        return try await self.__extendedWriteMultipleBlocks(withRequestFlags: flags, blockRange: blockRange, dataBlocks: dataBlocks)
    }
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  public func authenticate(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, cryptoSuiteIdentifier: Swift.Int, message: Foundation.Data, resultHandler: @escaping (Swift.Result<(CoreNFC.NFCISO15693ResponseFlag, Foundation.Data), any Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  @_alwaysEmitIntoClient public func authenticate(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, cryptoSuiteIdentifier: Swift.Int, message: Foundation.Data) async throws -> (CoreNFC.NFCISO15693ResponseFlag, Foundation.Data) {
        return try await self.__authenticate(withRequestFlags: flags, cryptoSuiteIdentifier: cryptoSuiteIdentifier, message: message)
    }
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  public func keyUpdate(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, keyIdentifier: Swift.Int, message: Foundation.Data, resultHandler: @escaping (Swift.Result<(CoreNFC.NFCISO15693ResponseFlag, Foundation.Data), any Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  @_alwaysEmitIntoClient public func keyUpdate(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, keyIdentifier: Swift.Int, message: Foundation.Data) async throws -> (CoreNFC.NFCISO15693ResponseFlag, Foundation.Data) {
        return try await self.__keyUpdate(withRequestFlags: flags, keyIdentifier: keyIdentifier, message: message)
    }
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  public func challenge(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, cryptoSuiteIdentifier: Swift.Int, message: Foundation.Data, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  @_alwaysEmitIntoClient public func challenge(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, cryptoSuiteIdentifier: Swift.Int, message: Foundation.Data) async throws {
        return try await self.__challenge(withRequestFlags: flags, cryptoSuiteIdentifier: cryptoSuiteIdentifier, message: message)
    }
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  public func readBuffer(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, resultHandler: @escaping (Swift.Result<(CoreNFC.NFCISO15693ResponseFlag, Foundation.Data), any Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  @_alwaysEmitIntoClient public func readBuffer(requestFlags flags: CoreNFC.NFCISO15693RequestFlag) async throws -> (CoreNFC.NFCISO15693ResponseFlag, Foundation.Data) {
        return try await self.__readBuffer(withRequestFlags: flags)
    }
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  public func extendedGetMultipleBlockSecurityStatus(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, blockRange: Foundation.NSRange, resultHandler: @escaping (Swift.Result<CoreNFC.NFCISO15693MultipleBlockSecurityStatus, any Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  @_alwaysEmitIntoClient public func extendedGetMultipleBlockSecurityStatus(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, blockRange: Foundation.NSRange) async throws -> CoreNFC.NFCISO15693MultipleBlockSecurityStatus {
        let listOfStatus = try await self.__extendedGetMultipleBlockSecurityStatus(with: flags, blockRange: blockRange)
        return NFCISO15693MultipleBlockSecurityStatus(blockSecurityStatus: listOfStatus.map { $0.intValue } )
    }
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  public func extendedFastReadMultipleBlocks(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, blockRange: Foundation.NSRange, resultHandler: @escaping (Swift.Result<[Foundation.Data], any Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  @_alwaysEmitIntoClient public func extendedFastReadMultipleBlocks(requestFlags flags: CoreNFC.NFCISO15693RequestFlag, blockRange: Foundation.NSRange) async throws -> [Foundation.Data] {
        return try await self.__extendedFastReadMultipleBlocks(with: flags, blockRange: blockRange)
    }
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  public func sendRequest(requestFlags flags: Swift.Int, commandCode: Swift.Int, data: Foundation.Data?, resultHandler: @escaping (Swift.Result<(CoreNFC.NFCISO15693ResponseFlag, Foundation.Data?), any Swift.Error>) -> Swift.Void)
  @available(iOS 14.0, *)
  @available(visionOS, unavailable)
  @_alwaysEmitIntoClient public func sendRequest(requestFlags flags: Swift.Int, commandCode: Swift.Int, data: Foundation.Data?) async throws -> (CoreNFC.NFCISO15693ResponseFlag, Foundation.Data?) {
        return try await self.__sendRequest(withFlag: flags, commandCode: commandCode, data: data)
    }
}
@available(iOS 17.4, *)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension CoreNFC.NFCPresentmentIntentAssertion.Error : Swift.Equatable {}
@available(iOS 17.4, *)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension CoreNFC.NFCPresentmentIntentAssertion.Error : Swift.Hashable {}
@available(iOS 17.4, *)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension CoreNFC.CardSession.Error : Swift.Equatable {}
@available(iOS 17.4, *)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension CoreNFC.CardSession.Error : Swift.Hashable {}
@available(iOS 17.4, *)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension CoreNFC.CardSession.EmulationUIStatus : Swift.Equatable {}
@available(iOS 17.4, *)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension CoreNFC.CardSession.EmulationUIStatus : Swift.Hashable {}
