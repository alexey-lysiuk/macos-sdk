// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.5 clang-1700.0.13.3)
// swift-module-flags: -target arm64e-apple-macos15.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-upcoming-feature StrictConcurrency -enable-bare-slash-regex -user-module-version 2115.100.21 -module-name CoreHID
// swift-module-flags-ignorable:  -interface-compiler-version 6.1
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(macOS 15, *)
public struct HIDElementCollection : Swift.Sendable {
  public enum CollectionType : Swift.Sendable {
    case physical
    case application
    case logical
    case report
    case namedArray
    case usageSwitch
    case usageModifier
    public static func == (a: CoreHID.HIDElementCollection.CollectionType, b: CoreHID.HIDElementCollection.CollectionType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  unowned public var client: CoreHID.HIDDeviceClient
  public var parentCollection: CoreHID.HIDElementCollection? {
    get
  }
  public var childCollections: [CoreHID.HIDElementCollection] {
    get
  }
  public var childElements: [CoreHID.HIDElement] {
    get
  }
  public var type: CoreHID.HIDElementCollection.CollectionType
  public var usage: CoreHID.HIDUsage
}
@available(macOS 15, *)
extension CoreHID.HIDElementCollection : Swift.Equatable {
  public static func == (lhs: CoreHID.HIDElementCollection, rhs: CoreHID.HIDElementCollection) -> Swift.Bool
}
@available(macOS 15, *)
extension CoreHID.HIDElementCollection : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 15, *)
extension CoreHID.HIDElementCollection : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 15, *)
public struct HIDElement : Swift.Sendable {
  public struct Value : Swift.Sendable {
    public var element: CoreHID.HIDElement
    public var timestamp: _Concurrency.SuspendingClock.Instant
    public var bytes: Foundation.Data
    public init(element: CoreHID.HIDElement, fromBytes: Foundation.Data, timestamp: _Concurrency.SuspendingClock.Instant)
  }
  unowned public var client: CoreHID.HIDDeviceClient
  public var parentCollection: CoreHID.HIDElementCollection {
    get
  }
  public var type: CoreHID.HIDReportType
  public var usage: CoreHID.HIDUsage
  public var reportID: CoreHID.HIDReportID?
  public var reportSize: Swift.UInt32
  public var unit: Swift.UInt32?
  public var unitExponent: Swift.Int8?
  public var logicalMinimum: Swift.Int64?
  public var logicalMaximum: Swift.Int64?
  public var physicalMinimum: Swift.Int64?
  public var physicalMaximum: Swift.Int64?
}
@available(macOS 15, *)
extension CoreHID.HIDElement : Swift.Equatable {
  public static func == (lhs: CoreHID.HIDElement, rhs: CoreHID.HIDElement) -> Swift.Bool
}
@available(macOS 15, *)
extension CoreHID.HIDElement : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 15, *)
extension CoreHID.HIDElement : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 15, *)
extension CoreHID.HIDElement.Value : Swift.Hashable {
  public static func == (lhs: CoreHID.HIDElement.Value, rhs: CoreHID.HIDElement.Value) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 15, *)
extension CoreHID.HIDElement.Value {
  public func integerValue<IntegerType>(asTypeTruncatingIfNeeded: IntegerType.Type) -> IntegerType where IntegerType : Swift.FixedWidthInteger
  public func logicalValue<IntegerType>(asTypeTruncatingIfNeeded: IntegerType.Type) -> IntegerType? where IntegerType : Swift.FixedWidthInteger
  public func physicalValue<IntegerType, FloatingType>(fromTypeTruncatingIfNeeded: IntegerType.Type, as: FloatingType.Type) -> FloatingType? where IntegerType : Swift.FixedWidthInteger, FloatingType : Swift.BinaryFloatingPoint
  public init<IntegerType>(element: CoreHID.HIDElement, fromIntegerTruncatingIfNeeded: IntegerType, timestamp: _Concurrency.SuspendingClock.Instant) where IntegerType : Swift.FixedWidthInteger
  public init?<IntegerType>(element: CoreHID.HIDElement, fromLogicalValueTruncatingIfNeeded: IntegerType, timestamp: _Concurrency.SuspendingClock.Instant) where IntegerType : Swift.FixedWidthInteger
  public init?<FloatingPointType>(element: CoreHID.HIDElement, fromPhysicalValue: FloatingPointType, timestamp: _Concurrency.SuspendingClock.Instant) where FloatingPointType : Swift.BinaryFloatingPoint
}
@available(macOS 15, *)
extension CoreHID.HIDElement.Value : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 15, *)
public actor HIDVirtualDevice {
  public struct Properties : Swift.Sendable {
    public let descriptor: Foundation.Data
    public let vendorID: Swift.UInt32
    public let productID: Swift.UInt32?
    public let transport: CoreHID.HIDDeviceTransport?
    public let product: Swift.String?
    public let manufacturer: Swift.String?
    public let modelNumber: Swift.String?
    public let versionNumber: Swift.UInt64?
    public let serialNumber: Swift.String?
    public let uniqueID: Swift.String?
    public let locationID: Swift.UInt64?
    public let localizationCode: CoreHID.HIDDeviceLocalizationCode?
    public init(descriptor: Foundation.Data, vendorID: Swift.UInt32, productID: Swift.UInt32? = nil, transport: CoreHID.HIDDeviceTransport? = nil, product: Swift.String? = nil, manufacturer: Swift.String? = nil, modelNumber: Swift.String? = nil, versionNumber: Swift.UInt64? = nil, serialNumber: Swift.String? = nil, uniqueID: Swift.String? = nil, locationID: Swift.UInt64? = nil, localizationCode: CoreHID.HIDDeviceLocalizationCode? = nil, extraProperties: Swift.Dictionary<Swift.String, Swift.AnyObject>? = nil)
  }
  nonisolated final public let deviceReference: CoreHID.HIDDeviceClient.DeviceReference
  public init?(properties: CoreHID.HIDVirtualDevice.Properties)
  @objc deinit
  public func activate(delegate: any CoreHID.HIDVirtualDeviceDelegate)
  public func dispatchInputReport(data: Foundation.Data, timestamp: _Concurrency.SuspendingClock.Instant) async throws
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 15, *)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
@available(macOS 15, *)
extension CoreHID.HIDVirtualDevice : Swift.Equatable {
  public static func == (lhs: CoreHID.HIDVirtualDevice, rhs: CoreHID.HIDVirtualDevice) -> Swift.Bool
}
@available(macOS 15, *)
extension CoreHID.HIDVirtualDevice : Swift.Hashable {
  nonisolated public func hash(into hasher: inout Swift.Hasher)
  nonisolated public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 15, *)
extension CoreHID.HIDVirtualDevice : Swift.CustomStringConvertible {
  nonisolated public var description: Swift.String {
    get
  }
}
@available(macOS 15, *)
public protocol HIDVirtualDeviceDelegate : Swift.Sendable {
  func hidVirtualDevice(_ device: CoreHID.HIDVirtualDevice, receivedSetReportRequestOfType type: CoreHID.HIDReportType, id: CoreHID.HIDReportID?, data: Foundation.Data) async throws
  func hidVirtualDevice(_ device: CoreHID.HIDVirtualDevice, receivedGetReportRequestOfType type: CoreHID.HIDReportType, id: CoreHID.HIDReportID?, maxSize: Swift.Int) async throws -> Foundation.Data
}
@available(macOS 15, *)
public actor HIDDeviceManager {
  public struct DeviceMatchingCriteria : Swift.Sendable {
    public var primaryUsage: CoreHID.HIDUsage?
    public var deviceUsages: [CoreHID.HIDUsage]?
    public var vendorID: Swift.UInt32?
    public var productID: Swift.UInt32?
    public var transport: CoreHID.HIDDeviceTransport?
    public var product: Swift.String?
    public var manufacturer: Swift.String?
    public var modelNumber: Swift.String?
    public var versionNumber: Swift.UInt64?
    public var serialNumber: Swift.String?
    public var uniqueID: Swift.String?
    public var locationID: Swift.UInt64?
    public var localizationCode: CoreHID.HIDDeviceLocalizationCode?
    public var isBuiltIn: Swift.Bool?
    public init(primaryUsage: CoreHID.HIDUsage? = nil, deviceUsages: [CoreHID.HIDUsage]? = nil, vendorID: Swift.UInt32? = nil, productID: Swift.UInt32? = nil, transport: CoreHID.HIDDeviceTransport? = nil, product: Swift.String? = nil, manufacturer: Swift.String? = nil, modelNumber: Swift.String? = nil, versionNumber: Swift.UInt64? = nil, serialNumber: Swift.String? = nil, uniqueID: Swift.String? = nil, locationID: Swift.UInt64? = nil, localizationCode: CoreHID.HIDDeviceLocalizationCode? = nil, isBuiltIn: Swift.Bool? = nil, extraProperties: Swift.Dictionary<Swift.String, Swift.AnyObject>? = nil)
  }
  public init()
  public enum Notification : Swift.Sendable {
    case deviceMatched(CoreHID.HIDDeviceClient.DeviceReference)
    case deviceRemoved(CoreHID.HIDDeviceClient.DeviceReference)
  }
  public func monitorNotifications(matchingCriteria: [CoreHID.HIDDeviceManager.DeviceMatchingCriteria]) -> _Concurrency.AsyncThrowingStream<CoreHID.HIDDeviceManager.Notification, any Swift.Error>
  @objc deinit
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 15, *)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
@available(macOS 15, *)
extension CoreHID.HIDDeviceManager : Swift.Equatable {
  public static func == (lhs: CoreHID.HIDDeviceManager, rhs: CoreHID.HIDDeviceManager) -> Swift.Bool
}
@available(macOS 15, *)
extension CoreHID.HIDDeviceManager : Swift.Hashable {
  nonisolated public func hash(into hasher: inout Swift.Hasher)
  nonisolated public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 15, *)
public enum HIDUsage : Swift.Hashable, Swift.Sendable {
  case genericDesktop(CoreHID.HIDUsage.GenericDesktopUsage?)
  case simulationControls(CoreHID.HIDUsage.SimulationControlsUsage?)
  case vrControls(CoreHID.HIDUsage.VRControlsUsage?)
  case sportControls(CoreHID.HIDUsage.SportControlsUsage?)
  case gameControls(CoreHID.HIDUsage.GameControlsUsage?)
  case genericDeviceControls(CoreHID.HIDUsage.GenericDeviceControlsUsage?)
  case keyboardOrKeypad(CoreHID.HIDUsage.KeyboardOrKeypadUsage?)
  case led(CoreHID.HIDUsage.LEDUsage?)
  case button(Swift.UInt16?)
  case ordinal(Swift.UInt16?)
  case telephonyDevice(CoreHID.HIDUsage.TelephonyDeviceUsage?)
  case consumer(CoreHID.HIDUsage.ConsumerUsage?)
  case digitizers(CoreHID.HIDUsage.DigitizersUsage?)
  case haptics(CoreHID.HIDUsage.HapticsUsage?)
  case physicalInputDevice(CoreHID.HIDUsage.PhysicalInputDeviceUsage?)
  case soc(CoreHID.HIDUsage.SOCUsage?)
  case eyeAndHeadTrackers(CoreHID.HIDUsage.EyeAndHeadTrackersUsage?)
  case auxiliaryDisplay(CoreHID.HIDUsage.AuxiliaryDisplayUsage?)
  case sensors(CoreHID.HIDUsage.SensorsUsage?)
  case medicalInstrument(CoreHID.HIDUsage.MedicalInstrumentUsage?)
  case brailleDisplay(CoreHID.HIDUsage.BrailleDisplayUsage?)
  case lightingAndIllumination(CoreHID.HIDUsage.LightingAndIlluminationUsage?)
  case monitor(CoreHID.HIDUsage.MonitorUsage?)
  case monitorEnumerated(Swift.UInt16?)
  case vesaVirtualControls(CoreHID.HIDUsage.VESAVirtualControlsUsage?)
  case power(CoreHID.HIDUsage.PowerUsage?)
  case batterySystem(CoreHID.HIDUsage.BatterySystemUsage?)
  case barcodeScanner(CoreHID.HIDUsage.BarcodeScannerUsage?)
  case scales(CoreHID.HIDUsage.ScalesUsage?)
  case magneticStripeReader(CoreHID.HIDUsage.MagneticStripeReaderUsage?)
  case cameraControl(CoreHID.HIDUsage.CameraControlUsage?)
  case arcade(CoreHID.HIDUsage.ArcadeUsage?)
  case fidoAlliance(CoreHID.HIDUsage.FIDOAllianceUsage?)
  case generic(Swift.UInt16, Swift.UInt16?)
  public var page: Swift.UInt16 {
    get
  }
  public var usage: Swift.UInt16? {
    get
  }
  public init(page: Swift.UInt16, usage: Swift.UInt16?)
  public static func == (lhs: CoreHID.HIDUsage, rhs: CoreHID.HIDUsage) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 15, *)
extension CoreHID.HIDUsage : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum GenericDesktopUsage : Swift.UInt16, Swift.Sendable {
    case pointer
    case mouse
    case joystick
    case gamepad
    case keyboard
    case keypad
    case multiAxisController
    case tabletPCSystemControls
    case waterCoolingDevice
    case computerChassisDevice
    case wirelessRadioControls
    case portableDeviceControl
    case systemMultiAxisController
    case spatialController
    case assistiveControl
    case deviceDock
    case dockableDevice
    case callStateManagementControl
    case x
    case y
    case z
    case rx
    case ry
    case rz
    case slider
    case dial
    case wheel
    case hatSwitch
    case countedBuffer
    case byteCount
    case motionWakeup
    case start
    case select
    case vx
    case vy
    case vz
    case vbrx
    case vbry
    case vbrz
    case vno
    case featureNotification
    case resolutionMultiplier
    case qx
    case qy
    case qz
    case qw
    case systemControl
    case systemPowerDown
    case systemSleep
    case systemWakeUp
    case systemContextMenu
    case systemMainMenu
    case systemAppMenu
    case systemMenuHelp
    case systemMenuExit
    case systemMenuSelect
    case systemMenuRight
    case systemMenuLeft
    case systemMenuUp
    case systemMenuDown
    case systemColdRestart
    case systemWarmRestart
    case dPadUp
    case dPadDown
    case dPadRight
    case dPadLeft
    case indexTrigger
    case palmTrigger
    case thumbstick
    case systemFunctionShift
    case systemFunctionShiftLock
    case systemFunctionShiftLockIndicator
    case systemDismissNotification
    case systemDoNotDisturb
    case systemDock
    case systemUndock
    case systemSetup
    case systemBreak
    case systemDebuggerBreak
    case applicationBreak
    case applicationDebuggerBreak
    case systemSpeakerMute
    case systemHibernate
    case systemMicrophoneMute
    case systemDisplayInvert
    case systemDisplayInternal
    case systemDisplayExternal
    case systemDisplayBoth
    case systemDisplayDual
    case systemDisplayToggleIntOrExtMode
    case systemDisplaySwapPrimaryOrSecondary
    case systemDisplayToggleLCDAutoscale
    case sensorZone
    case rpm
    case coolantLevel
    case coolantCriticalLevel
    case coolantPump
    case chassisEnclosure
    case wirelessRadioButton
    case wirelessRadioLED
    case wirelessRadioSliderSwitch
    case systemDisplayRotationLockButton
    case systemDisplayRotationLockSliderSwitch
    case controlEnable
    case dockableDeviceUniqueID
    case dockableDeviceVendorID
    case dockableDevicePrimaryUsagePage
    case dockableDevicePrimaryUsageID
    case dockableDeviceDockingState
    case dockableDeviceDisplayOcclusion
    case dockableDeviceObjectType
    case callActiveLED
    case callMuteToggle
    case callMuteLED
    public static let page: Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    @available(macOS 15.0, *)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum SimulationControlsUsage : Swift.UInt16, Swift.Sendable {
    case flightSimulationDevice
    case automobileSimulationDevice
    case tankSimulationDevice
    case spaceshipSimulationDevice
    case submarineSimulationDevice
    case sailingSimulationDevice
    case motorcycleSimulationDevice
    case sportsSimulationDevice
    case airplaneSimulationDevice
    case helicopterSimulationDevice
    case magicCarpetSimulationDevice
    case bicycleSimulationDevice
    case flightControlStick
    case flightStick
    case cyclicControl
    case cyclicTrim
    case flightYoke
    case trackControl
    case aileron
    case aileronTrim
    case antiTorqueControl
    case autopilotEnable
    case chaffRelease
    case collectiveControl
    case diveBrake
    case electronicCountermeasures
    case elevator
    case elevatorTrim
    case rudder
    case throttle
    case flightCommunications
    case flareRelease
    case landingGear
    case toeBrake
    case trigger
    case weaponsArm
    case weaponsSelect
    case wingFlaps
    case accelerator
    case brake
    case clutch
    case shifter
    case steering
    case turretDirection
    case barrelElevation
    case divePlane
    case ballast
    case bicycleCrank
    case handleBars
    case frontBrake
    case rearBrake
    public static let page: Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    @available(macOS 15.0, *)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum VRControlsUsage : Swift.UInt16, Swift.Sendable {
    case belt
    case bodySuit
    case flexor
    case glove
    case headTracker
    case headMountedDisplay
    case handTracker
    case oculometer
    case vest
    case animatronicDevice
    case stereoEnable
    case displayEnable
    public static let page: Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    @available(macOS 15.0, *)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum SportControlsUsage : Swift.UInt16, Swift.Sendable {
    case baseballBat
    case golfClub
    case rowingMachine
    case treadmill
    case oar
    case slope
    case rate
    case stickSpeed
    case stickFaceAngle
    case stickHeelOrToe
    case stickFollowThrough
    case stickTempo
    case stickType
    case stickHeight
    case putter
    case oneIron
    case twoIron
    case threeIron
    case fourIron
    case fiveIron
    case sixIron
    case sevenIron
    case eightIron
    case nineIron
    case tenIron
    case elevenIron
    case sandWedge
    case loftWedge
    case powerWedge
    case oneWood
    case threeWood
    case fiveWood
    case sevenWood
    case nineWood
    public static let page: Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    @available(macOS 15.0, *)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum GameControlsUsage : Swift.UInt16, Swift.Sendable {
    case gameController3D
    case pinballDevice
    case gunDevice
    case pointOfView
    case turnRightOrLeft
    case pitchForwardOrBackward
    case rollRightOrLeft
    case moveRightOrLeft
    case moveForwardOrBackward
    case moveUpOrDown
    case leanRightOrLeft
    case leanForwardOrBackward
    case heightOfPOV
    case flipper
    case secondaryFlipper
    case bump
    case newGame
    case shootBall
    case player
    case gunBolt
    case gunClip
    case gunSelector
    case gunSingleShot
    case gunBurst
    case gunAutomatic
    case gunSafety
    case gamepadFireOrJump
    case gamepadTrigger
    case formFittingGamepad
    public static let page: Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    @available(macOS 15.0, *)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum GenericDeviceControlsUsage : Swift.UInt16, Swift.Sendable {
    case backgroundOrNonuserControls
    case batteryStrength
    case wirelessChannel
    case wirelessID
    case discoverWirelessControl
    case securityCodeCharacterEntered
    case securityCodeCharacterErased
    case securityCodeCleared
    case sequenceID
    case sequenceIDReset
    case rfSignalStrength
    case softwareVersion
    case protocolVersion
    case hardwareVersion
    case major
    case minor
    case revision
    case handedness
    case eitherHand
    case leftHand
    case rightHand
    case bothHands
    case gripPoseOffset
    case pointerPoseOffset
    public static let page: Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    @available(macOS 15.0, *)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum KeyboardOrKeypadUsage : Swift.UInt16, Swift.Sendable {
    case errorRollOver
    case postFail
    case errorUndefined
    case keyboardA
    case keyboardB
    case keyboardC
    case keyboardD
    case keyboardE
    case keyboardF
    case keyboardG
    case keyboardH
    case keyboardI
    case keyboardJ
    case keyboardK
    case keyboardL
    case keyboardM
    case keyboardN
    case keyboardO
    case keyboardP
    case keyboardQ
    case keyboardR
    case keyboardS
    case keyboardT
    case keyboardU
    case keyboardV
    case keyboardW
    case keyboardX
    case keyboardY
    case keyboardZ
    case keyboard1AndBang
    case keyboard2AndAt
    case keyboard3AndHash
    case keyboard4AndDollar
    case keyboard5AndPercent
    case keyboard6AndCaret
    case keyboard7AndAmpersand
    case keyboard8AndStar
    case keyboard9AndLeftBracket
    case keyboard0AndRightBracket
    case keyboardReturnEnter
    case keyboardEscape
    case keyboardDelete
    case keyboardTab
    case keyboardSpacebar
    case keyboardDashAndUnderscore
    case keyboardEqualsAndPlus
    case keyboardLeftBrace
    case keyboardRightBrace
    case keyboardBackslashAndPipe
    case keyboardNonUSHashAndTilde
    case keyboardSemiColonAndColon
    case keyboardLeftAposAndDouble
    case keyboardGraveAccentAndTilde
    case keyboardCommaAndLessThan
    case keyboardPeriodAndGreaterThan
    case keyboardForwardSlashAndQuestionMark
    case keyboardCapsLock
    case keyboardF1
    case keyboardF2
    case keyboardF3
    case keyboardF4
    case keyboardF5
    case keyboardF6
    case keyboardF7
    case keyboardF8
    case keyboardF9
    case keyboardF10
    case keyboardF11
    case keyboardF12
    case keyboardPrintScreen
    case keyboardScrollLock
    case keyboardPause
    case keyboardInsert
    case keyboardHome
    case keyboardPageUp
    case keyboardDeleteForward
    case keyboardEnd
    case keyboardPageDown
    case keyboardRightArrow
    case keyboardLeftArrow
    case keyboardDownArrow
    case keyboardUpArrow
    case keypadNumLockAndClear
    case keypadForwardSlash
    case keypadStar
    case keypadDash
    case keypadPlus
    case keypadENTER
    case keypad1AndEnd
    case keypad2AndDownArrow
    case keypad3AndPageDn
    case keypad4AndLeftArrow
    case keypad5
    case keypad6AndRightArrow
    case keypad7AndHome
    case keypad8AndUpArrow
    case keypad9AndPageUp
    case keypad0AndInsert
    case keypadPeriodAndDelete
    case keyboardNonUSBackslashAndPipe
    case keyboardApplication
    case keyboardPower
    case keypadEquals
    case keyboardF13
    case keyboardF14
    case keyboardF15
    case keyboardF16
    case keyboardF17
    case keyboardF18
    case keyboardF19
    case keyboardF20
    case keyboardF21
    case keyboardF22
    case keyboardF23
    case keyboardF24
    case keyboardExecute
    case keyboardHelp
    case keyboardMenu
    case keyboardSelect
    case keyboardStop
    case keyboardAgain
    case keyboardUndo
    case keyboardCut
    case keyboardCopy
    case keyboardPaste
    case keyboardFind
    case keyboardMute
    case keyboardVolumeUp
    case keyboardVolumeDown
    case keyboardLockingCapsLock
    case keyboardLockingNumLock
    case keyboardLockingScrollLock
    case keypadComma
    case keypadEqualSign
    case keyboardInternational1
    case keyboardInternational2
    case keyboardInternational3
    case keyboardInternational4
    case keyboardInternational5
    case keyboardInternational6
    case keyboardInternational7
    case keyboardInternational8
    case keyboardInternational9
    case keyboardLANG1
    case keyboardLANG2
    case keyboardLANG3
    case keyboardLANG4
    case keyboardLANG5
    case keyboardLANG6
    case keyboardLANG7
    case keyboardLANG8
    case keyboardLANG9
    case keyboardAlternateErase
    case keyboardSysReqAttention
    case keyboardCancel
    case keyboardClear
    case keyboardPrior
    case keyboardReturn
    case keyboardSeparator
    case keyboardOut
    case keyboardOper
    case keyboardClearAgain
    case keyboardCrSelProps
    case keyboardExSel
    case keypadDouble0
    case keypadTriple0
    case thousandsSeparator
    case decimalSeparator
    case currencyUnit
    case currencySubUnit
    case keypadLeftBracket
    case keypadRightBracket
    case keypadLeftBrace
    case keypadRightBrace
    case keypadTab
    case keypadBackspace
    case keypadA
    case keypadB
    case keypadC
    case keypadD
    case keypadE
    case keypadF
    case keypadXOR
    case keypadCaret
    case keypadPercentage
    case keypadLess
    case keypadGreater
    case keypadAmpersand
    case keypadDoubleAmpersand
    case keypadBar
    case keypadDoubleBar
    case keypadColon
    case keypadHash
    case keypadSpace
    case keypadAt
    case keypadBang
    case keypadMemoryStore
    case keypadMemoryRecall
    case keypadMemoryClear
    case keypadMemoryAdd
    case keypadMemorySubtract
    case keypadMemoryMultiply
    case keypadMemoryDivide
    case keypadPlusMinus
    case keypadClear
    case keypadClearEntry
    case keypadBinary
    case keypadOctal
    case keypadDecimal
    case keypadHexadecimal
    case keyboardLeftControl
    case keyboardLeftShift
    case keyboardLeftAlt
    case keyboardLeftGUI
    case keyboardRightControl
    case keyboardRightShift
    case keyboardRightAlt
    case keyboardRightGUI
    public static let page: Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    @available(macOS 15.0, *)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum LEDUsage : Swift.UInt16, Swift.Sendable {
    case numLock
    case capsLock
    case scrollLock
    case compose
    case kana
    case power
    case shift
    case doNotDisturb
    case mute
    case toneEnable
    case highCutFilter
    case lowCutFilter
    case equalizerEnable
    case soundFieldOn
    case surroundOn
    case repeatTrack
    case stereo
    case samplingRateDetect
    case spinning
    case cav
    case clv
    case recordingFormatDetect
    case offHook
    case ring
    case messageWaiting
    case dataMode
    case batteryOperation
    case batteryOK
    case batteryLow
    case speaker
    case headset
    case hold
    case microphone
    case coverage
    case nightMode
    case sendCalls
    case callPickup
    case conference
    case standBy
    case cameraOn
    case cameraOff
    case onLine
    case offLine
    case busy
    case ready
    case paperOut
    case paperJam
    case remote
    case forward
    case reverse
    case stop
    case rewind
    case fastForward
    case play
    case pause
    case record
    case error
    case usageSelectedIndicator
    case usageInUseIndicator
    case usageMultiModeIndicator
    case indicatorOn
    case indicatorFlash
    case indicatorSlowBlink
    case indicatorFastBlink
    case indicatorOff
    case flashOnTime
    case slowBlinkOnTime
    case slowBlinkOffTime
    case fastBlinkOnTime
    case fastBlinkOffTime
    case usageIndicatorColor
    case indicatorRed
    case indicatorGreen
    case indicatorAmber
    case genericIndicator
    case systemSuspend
    case externalPowerConnected
    case indicatorBlue
    case indicatorOrange
    case goodStatus
    case warningStatus
    case rgbLED
    case redLEDChannel
    case blueLEDChannel
    case greenLEDChannel
    case ledIntensity
    case systemMicrophoneMute
    case playerIndicator
    case player1
    case player2
    case player3
    case player4
    case player5
    case player6
    case player7
    case player8
    public static let page: Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    @available(macOS 15.0, *)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum ButtonUsage : Swift.Sendable {
    public static let page: Swift.UInt16
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum OrdinalUsage : Swift.Sendable {
    public static let page: Swift.UInt16
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum TelephonyDeviceUsage : Swift.UInt16, Swift.Sendable {
    case phone
    case answeringMachine
    case messageControls
    case handset
    case headset
    case telephonyKeyPad
    case programmableButton
    case hookSwitch
    case flash
    case feature
    case hold
    case redial
    case transfer
    case drop
    case park
    case forwardCalls
    case alternateFunction
    case line
    case speakerPhone
    case conference
    case ringEnable
    case ringSelect
    case phoneMute
    case callerID
    case send
    case speedDial
    case storeNumber
    case recallNumber
    case phoneDirectory
    case voiceMail
    case screenCalls
    case doNotDisturb
    case message
    case answerOnOrOff
    case insideDialTone
    case outsideDialTone
    case insideRingTone
    case outsideRingTone
    case priorityRingTone
    case insideRingback
    case priorityRingback
    case lineBusyTone
    case reorderTone
    case callWaitingTone
    case confirmationTone1
    case confirmationTone2
    case tonesOff
    case outsideRingback
    case ringer
    case phoneKey0
    case phoneKey1
    case phoneKey2
    case phoneKey3
    case phoneKey4
    case phoneKey5
    case phoneKey6
    case phoneKey7
    case phoneKey8
    case phoneKey9
    case phoneKeyStar
    case phoneKeyPound
    case phoneKeyA
    case phoneKeyB
    case phoneKeyC
    case phoneKeyD
    case phoneCallHistoryKey
    case phoneCallerIDKey
    case phoneSettingsKey
    case hostControl
    case hostAvailable
    case hostCallActive
    case activateHandsetAudio
    case ringType
    case reDialablePhoneNumber
    case stopRingTone
    case pstnRingTone
    case hostRingTone
    case alertSoundError
    case alertSoundConfirm
    case alertSoundNotification
    case silentRing
    case emailMessageWaiting
    case voicemailMessageWaiting
    case hostHold
    case incomingCallHistoryCount
    case outgoingCallHistoryCount
    case incomingCallHistory
    case outgoingCallHistory
    case phoneLocale
    case phoneTimeSecond
    case phoneTimeMinute
    case phoneTimeHour
    case phoneDateDay
    case phoneDateMonth
    case phoneDateYear
    case handsetNickname
    case addressBookID
    case callDuration
    case dualModePhone
    public static let page: Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    @available(macOS 15.0, *)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum ConsumerUsage : Swift.UInt16, Swift.Sendable {
    case consumerControl
    case numericKeyPad
    case programmableButtons
    case microphone
    case headphone
    case graphicEqualizer
    case plus10
    case plus100
    case amOrPM
    case power
    case reset
    case sleep
    case sleepAfter
    case sleepMode
    case illumination
    case functionButtons
    case menu
    case menuPick
    case menuUp
    case menuDown
    case menuLeft
    case menuRight
    case menuEscape
    case menuValueIncrease
    case menuValueDecrease
    case dataOnScreen
    case closedCaption
    case closedCaptionSelect
    case vcrOrTV
    case broadcastMode
    case snapshot
    case still
    case pictureInPictureToggle
    case pictureInPictureSwap
    case redMenuButton
    case greenMenuButton
    case blueMenuButton
    case yellowMenuButton
    case aspect
    case modeSelect3D
    case displayBrightnessIncrement
    case displayBrightnessDecrement
    case displayBrightness
    case displayBacklightToggle
    case displaySetBrightnessToMinimum
    case displaySetBrightnessToMaximum
    case displaySetAutoBrightness
    case cameraAccessEnabled
    case cameraAccessDisabled
    case cameraAccessToggle
    case keyboardBrightnessIncrement
    case keyboardBrightnessDecrement
    case keyboardBacklightSetLevel
    case keyboardBacklightOOC
    case keyboardBacklightSetMinimum
    case keyboardBacklightSetMaximum
    case keyboardBacklightAuto
    case selection
    case assignSelection
    case modeStep
    case recallLast
    case enterChannel
    case orderMovie
    case channel
    case mediaSelection
    case mediaSelectComputer
    case mediaSelectTV
    case mediaSelectWWW
    case mediaSelectDVD
    case mediaSelectTelephone
    case mediaSelectProgramGuide
    case mediaSelectVideoPhone
    case mediaSelectGames
    case mediaSelectMessages
    case mediaSelectCD
    case mediaSelectVCR
    case mediaSelectTuner
    case quit
    case help
    case mediaSelectTape
    case mediaSelectCable
    case mediaSelectSatellite
    case mediaSelectSecurity
    case mediaSelectHome
    case mediaSelectCall
    case channelIncrement
    case channelDecrement
    case mediaSelectSAP
    case vcrPlus
    case once
    case daily
    case weekly
    case monthly
    case play
    case pause
    case record
    case fastForward
    case rewind
    case scanNextTrack
    case scanPreviousTrack
    case stop
    case eject
    case randomPlay
    case selectDisc
    case enterDisc
    case repeatTrack
    case tracking
    case trackNormal
    case slowTracking
    case frameForward
    case frameBack
    case mark
    case clearMark
    case repeatFromMark
    case returnToMark
    case searchMarkForward
    case searchMarkBackwards
    case counterReset
    case showCounter
    case trackingIncrement
    case trackingDecrement
    case stopOrEject
    case playOrPause
    case playOrSkip
    case voiceCommand
    case invokeCaptureInterface
    case startOrStopGameRecording
    case historicalGameCapture
    case captureGameScreenshot
    case showOrHideRecordingIndicator
    case startOrStopMicrophoneCapture
    case startOrStopCameraCapture
    case startOrStopGameBroadcast
    case startOrStopVoiceDictationSession
    case invokeOrDismissEmojiPicker
    case volume
    case balance
    case mute
    case bass
    case treble
    case bassBoost
    case surroundMode
    case loudness
    case mpx
    case volumeIncrement
    case volumeDecrement
    case speedSelect
    case playbackSpeed
    case standardPlay
    case longPlay
    case extendedPlay
    case slow
    case fanEnable
    case fanSpeed
    case lightEnable
    case lightIlluminationLevel
    case climateControlEnable
    case roomTemperature
    case securityEnable
    case fireAlarm
    case policeAlarm
    case proximity
    case motion
    case duressAlarm
    case holdupAlarm
    case medicalAlarm
    case balanceRight
    case balanceLeft
    case bassIncrement
    case bassDecrement
    case trebleIncrement
    case trebleDecrement
    case speakerSystem
    case channelLeft
    case channelRight
    case channelCenter
    case channelFront
    case channelCenterFront
    case channelSide
    case channelSurround
    case channelLowFrequencyEnhancement
    case channelTop
    case channelUnknown
    case subChannel
    case subChannelIncrement
    case subChannelDecrement
    case alternateAudioIncrement
    case alternateAudioDecrement
    case applicationLaunchButtons
    case alLaunchButtonConfigurationTool
    case alProgrammableButtonConfiguration
    case alConsumerControlConfiguration
    case alWordProcessor
    case alTextEditor
    case alSpreadsheet
    case alGraphicsEditor
    case alPresentationApp
    case alDatabaseApp
    case alEmailReader
    case alNewsreader
    case alVoicemail
    case alContactsOrAddressBook
    case alCalendarOrSchedule
    case alTaskOrProjectManager
    case alLogOrJournalOrTimecard
    case alCheckbookOrFinance
    case alCalculator
    case alAVCaptureOrPlayback
    case alLocalMachineBrowser
    case alLANOrWANBrowser
    case alInternetBrowser
    case alRemoteNetworkingOrISPConnect
    case alNetworkConference
    case alNetworkChat
    case alTelephonyOrDialer
    case alLogon
    case alLogoff
    case alLogonOrLogoff
    case alTerminalLockOrScreensaver
    case alControlPanel
    case alCommandLineProcessorOrRun
    case alProcessOrTaskManager
    case alSelectTaskOrApplication
    case alNextTaskOrApplication
    case alPreviousTaskOrApplication
    case alPreemptiveHaltTaskOrApplication
    case alIntegratedHelpCenter
    case alDocuments
    case alThesaurus
    case alDictionary
    case alDesktop
    case alSpellCheck
    case alGrammarCheck
    case alWirelessStatus
    case alKeyboardLayout
    case alVirusProtection
    case alEncryption
    case alScreenSaver
    case alAlarms
    case alClock
    case alFileBrowser
    case alPowerStatus
    case alImageBrowser
    case alAudioBrowser
    case alMovieBrowser
    case alDigitalRightsManager
    case alDigitalWallet
    case alInstantMessaging
    case alOEMFeaturesOrTipsOrTutorialBrowser
    case alOEMHelp
    case alOnlineCommunity
    case alEntertainmentContentBrowser
    case alOnlineShoppingBrowser
    case alSmartCardInformationOrHelp
    case alMarketMonitorOrFinanceBrowser
    case alCustomizedCorporateNewsBrowser
    case alOnlineActivityBrowser
    case alResearchOrSearchBrowser
    case alAudioPlayer
    case alMessageStatus
    case alContactSync
    case alNavigation
    case alContextAwareDesktopAssistant
    case genericGUIApplicationControls
    case acNew
    case acOpen
    case acClose
    case acExit
    case acMaximize
    case acMinimize
    case acSave
    case acPrint
    case acProperties
    case acUndo
    case acCopy
    case acCut
    case acPaste
    case acSelectAll
    case acFind
    case acFindAndReplace
    case acSearch
    case acGoTo
    case acHome
    case acBack
    case acForward
    case acStop
    case acRefresh
    case acPreviousLink
    case acNextLink
    case acBookmarks
    case acHistory
    case acSubscriptions
    case acZoomIn
    case acZoomOut
    case acZoom
    case acFullScreenView
    case acNormalView
    case acViewToggle
    case acScrollUp
    case acScrollDown
    case acScroll
    case acPanLeft
    case acPanRight
    case acPan
    case acNewWindow
    case acTileHorizontally
    case acTileVertically
    case acFormat
    case acEdit
    case acBold
    case acItalics
    case acUnderline
    case acStrikethrough
    case acSubscript
    case acSuperscript
    case acAllCaps
    case acRotate
    case acResize
    case acFlipHorizontal
    case acFlipVertical
    case acMirrorHorizontal
    case acMirrorVertical
    case acFontSelect
    case acFontColor
    case acFontSize
    case acJustifyLeft
    case acJustifyCenterH
    case acJustifyRight
    case acJustifyBlockH
    case acJustifyTop
    case acJustifyCenterV
    case acJustifyBottom
    case acJustifyBlockV
    case acIndentDecrease
    case acIndentIncrease
    case acNumberedList
    case acRestartNumbering
    case acBulletedList
    case acPromote
    case acDemote
    case acYes
    case acNo
    case acCancel
    case acCatalog
    case acBuyOrCheckout
    case acAddToCart
    case acExpand
    case acExpandAll
    case acCollapse
    case acCollapseAll
    case acPrintPreview
    case acPasteSpecial
    case acInsertMode
    case acDelete
    case acLock
    case acUnlock
    case acProtect
    case acUnprotect
    case acAttachComment
    case acDeleteComment
    case acViewComment
    case acSelectWord
    case acSelectSentence
    case acSelectParagraph
    case acSelectColumn
    case acSelectRow
    case acSelectTable
    case acSelectObject
    case acRedoOrRepeat
    case acSort
    case acSortAscending
    case acSortDescending
    case acFilter
    case acSetClock
    case acViewClock
    case acSelectTimeZone
    case acEditTimeZones
    case acSetAlarm
    case acClearAlarm
    case acSnoozeAlarm
    case acResetAlarm
    case acSynchronize
    case acSendOrReceive
    case acSendTo
    case acReply
    case acReplyAll
    case acForwardMsg
    case acSend
    case acAttachFile
    case acUpload
    case acDownloadSaveTargetAs
    case acSetBorders
    case acInsertRow
    case acInsertColumn
    case acInsertFile
    case acInsertPicture
    case acInsertObject
    case acInsertSymbol
    case acSaveAndClose
    case acRename
    case acMerge
    case acSplit
    case acDisributeHorizontally
    case acDistributeVertically
    case acNextKeyboardLayoutSelect
    case acNavigationGuidance
    case acDesktopShowAllWindows
    case acSoftKeyLeft
    case acSoftKeyRight
    case acDesktopShowAllApplications
    case acIdleKeepAlive
    case extendedKeyboardAttributesCollection
    case keyboardFormFactor
    case keyboardKeyType
    case keyboardPhysicalLayout
    case vendorSpecificKeyboardPhysicalLayout
    case keyboardIETFLanguageTagIndex
    case implementedKeyboardInputAssistControls
    case keyboardInputAssistPrevious
    case keyboardInputAssistNext
    case keyboardInputAssistPreviousGroup
    case keyboardInputAssistNextGroup
    case keyboardInputAssistAccept
    case keyboardInputAssistCancel
    case privacyScreenToggle
    case privacyScreenLevelDecrement
    case privacyScreenLevelIncrement
    case privacyScreenLevelMinimum
    case privacyScreenLevelMaximum
    case contactEdited
    case contactAdded
    case contactRecordActive
    case contactIndex
    case contactNickname
    case contactFirstName
    case contactLastName
    case contactFullName
    case contactPhoneNumberPersonal
    case contactPhoneNumberBusiness
    case contactPhoneNumberMobile
    case contactPhoneNumberPager
    case contactPhoneNumberFax
    case contactPhoneNumberOther
    case contactEmailPersonal
    case contactEmailBusiness
    case contactEmailOther
    case contactEmailMain
    case contactSpeedDialNumber
    case contactStatusFlag
    case contactMiscellaneous
    public static let page: Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    @available(macOS 15.0, *)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum DigitizersUsage : Swift.UInt16, Swift.Sendable {
    case digitizer
    case pen
    case lightPen
    case touchScreen
    case touchPad
    case whiteboard
    case coordinateMeasuringMachine
    case digitizer3D
    case stereoPlotter
    case articulatedArm
    case armature
    case multiplePointDigitizer
    case freeSpaceWand
    case deviceConfiguration
    case capacitiveHeatMapDigitizer
    case stylus
    case puck
    case finger
    case deviceSettings
    case characterGesture
    case tipPressure
    case barrelPressure
    case inRange
    case touch
    case untouch
    case tap
    case quality
    case dataValid
    case transducerIndex
    case tabletFunctionKeys
    case programChangeKeys
    case batteryStrength
    case invert
    case xTilt
    case yTilt
    case azimuth
    case altitude
    case twist
    case tipSwitch
    case secondaryTipSwitch
    case barrelSwitch
    case eraser
    case tabletPick
    case touchValid
    case width
    case height
    case contactIdentifier
    case deviceMode
    case deviceIdentifier
    case contactCount
    case contactCountMaximum
    case scanTime
    case surfaceSwitch
    case buttonSwitch
    case padType
    case secondaryBarrelSwitch
    case transducerSerialNumber
    case preferredColor
    case preferredColorIsLocked
    case preferredLineWidth
    case preferredLineWidthIsLocked
    case latencyMode
    case gestureCharacterQuality
    case characterGestureDataLength
    case characterGestureData
    case gestureCharacterEncoding
    case utf8CharacterGestureEncoding
    case utf16LittleEndianCharacterGestureEncoding
    case utf16BigEndianCharacterGestureEncoding
    case utf32LittleEndianCharacterGestureEncoding
    case utf32BigEndianCharacterGestureEncoding
    case capacitiveHeatMapProtocolVendorID
    case capacitiveHeatMapProtocolVersion
    case capacitiveHeatMapFrameData
    case gestureCharacterEnable
    case transducerSerialNumberPart2
    case noPreferredColor
    case preferredLineStyle
    case preferredLineStyleIsLocked
    case ink
    case pencil
    case highlighter
    case chiselMarker
    case brush
    case noPreference
    case digitizerDiagnostic
    case digitizerError
    case errorNormalStatus
    case errorTransducersExceeded
    case errorFullTransFeaturesUnavailable
    case errorChargeLow
    case transducerSoftwareInfo
    case transducerVendorId
    case transducerProductId
    case deviceSupportedProtocols
    case transducerSupportedProtocols
    case noProtocol
    case wacomAESProtocol
    case usiProtocol
    case microsoftPenProtocol
    case supportedReportRates
    case reportRate
    case transducerConnected
    case switchDisabled
    case switchUnimplemented
    case transducerSwitches
    case transducerIndexSelector
    case buttonPressThreshold
    public static let page: Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    @available(macOS 15.0, *)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum HapticsUsage : Swift.UInt16, Swift.Sendable {
    case simpleHapticController
    case waveformList
    case durationList
    case autoTrigger
    case manualTrigger
    case autoTriggerAssociatedControl
    case intensity
    case repeatCount
    case retriggerPeriod
    case waveformVendorPage
    case waveformVendorID
    case waveformCutoffTime
    case waveformNone
    case waveformStop
    case waveformClick
    case waveformBuzzContinuous
    case waveformRumbleContinuous
    case waveformPress
    case waveformRelease
    case waveformHover
    case waveformSuccess
    case waveformError
    case waveformInkContinuous
    case waveformPencilContinuous
    case waveformMarkerContinuous
    case waveformChiselMarkerContinuous
    case waveformBrushContinuous
    case waveformEraserContinuous
    case waveformSparkleContinuous
    public static let page: Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    @available(macOS 15.0, *)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum PhysicalInputDeviceUsage : Swift.UInt16, Swift.Sendable {
    case physicalInputDevice
    case normal
    case setEffectReport
    case effectParameterBlockIndex
    case parameterBlockOffset
    case romFlag
    case effectType
    case etConstantForce
    case etRamp
    case etCustomForce
    case etSquare
    case etSine
    case etTriangle
    case etSawtoothUp
    case etSawtoothDown
    case etSpring
    case etDamper
    case etInertia
    case etFriction
    case duration
    case samplePeriod
    case gain
    case triggerButton
    case triggerRepeatInterval
    case axesEnable
    case directionEnable
    case direction
    case typeSpecificBlockOffset
    case blockType
    case setEnvelopeReport
    case attackLevel
    case attackTime
    case fadeLevel
    case fadeTime
    case setConditionReport
    case centerPointOffset
    case positiveCoefficient
    case negativeCoefficient
    case positiveSaturation
    case negativeSaturation
    case deadBand
    case downloadForceSample
    case isochCustomForceEnable
    case customForceDataReport
    case customForceData
    case customForceVendorDefinedData
    case setCustomForceReport
    case customForceDataOffset
    case sampleCount
    case setPeriodicReport
    case offset
    case magnitude
    case phase
    case period
    case setConstantForceReport
    case setRampForceReport
    case rampStart
    case rampEnd
    case effectOperationReport
    case effectOperation
    case opEffectStart
    case opEffectStartSolo
    case opEffectStop
    case loopCount
    case deviceGainReport
    case deviceGain
    case parameterBlockPoolsReport
    case ramPoolSize
    case romPoolSize
    case romEffectBlockCount
    case simultaneousEffectsMax
    case poolAlignment
    case parameterBlockMoveReport
    case moveSource
    case moveDestination
    case moveLength
    case effectParameterBlockLoadReport
    case effectParameterBlockLoadStatus
    case blockLoadSuccess
    case blockLoadFull
    case blockLoadError
    case blockHandle
    case effectParameterBlockFreeReport
    case typeSpecificBlockHandle
    case pidStateReport
    case effectPlaying
    case pidDeviceControlReport
    case pidDeviceControl
    case dcEnableActuators
    case dcDisableActuators
    case dcStopAllEffects
    case dcReset
    case dcPause
    case dcContinue
    case devicePaused
    case actuatorsEnabled
    case safetySwitch
    case actuatorOverrideSwitch
    case actuatorPower
    case startDelay
    case parameterBlockSize
    case deviceManagedPool
    case sharedParameterBlocks
    case createNewEffectParameterBlockReport
    case ramPoolAvailable
    public static let page: Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    @available(macOS 15.0, *)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum SOCUsage : Swift.UInt16, Swift.Sendable {
    case socControl
    case firmwareTransfer
    case firmwareFileId
    case fileOffsetInBytes
    case fileTransferSizeMaxInBytes
    case filePayload
    case filePayloadSizeInBytes
    case filePayloadContainsLastBytes
    case fileTransferStop
    case fileTransferTillEnd
    public static let page: Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    @available(macOS 15.0, *)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum EyeAndHeadTrackersUsage : Swift.UInt16, Swift.Sendable {
    case eyeTracker
    case headTracker
    case trackingData
    case capabilities
    case configuration
    case status
    case control
    case sensorTimestamp
    case positionX
    case positionY
    case positionZ
    case gazePoint
    case leftEyePosition
    case rightEyePosition
    case headPosition
    case headDirectionPoint
    case rotationAboutXAxis
    case rotationAboutYAxis
    case rotationAboutZAxis
    case trackerQuality
    case minimumTrackingDistance
    case optimumTrackingDistance
    case maximumTrackingDistance
    case maximumScreenPlaneWidth
    case maximumScreenPlaneHeight
    case displayManufacturerID
    case displayProductID
    case displaySerialNumber
    case displayManufacturerDate
    case calibratedScreenWidth
    case calibratedScreenHeight
    case samplingFrequency
    case configurationStatus
    case deviceModeRequest
    public static let page: Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    @available(macOS 15.0, *)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum AuxiliaryDisplayUsage : Swift.UInt16, Swift.Sendable {
    case alphanumericDisplay
    case auxiliaryDisplay
    case displayAttributesReport
    case asciiCharacterSet
    case dataReadBack
    case fontReadBack
    case displayControlReport
    case clearDisplay
    case displayEnable
    case screenSaverDelay
    case screenSaverEnable
    case verticalScroll
    case horizontalScroll
    case characterReport
    case displayData
    case displayStatus
    case statNotReady
    case statReady
    case errorNotALoadableCharacter
    case errorFontDataCannotBeRead
    case cursorPositionReport
    case row
    case column
    case rows
    case columns
    case cursorPixelPositioning
    case cursorMode
    case cursorEnable
    case cursorBlink
    case fontReport
    case fontData
    case characterWidth
    case characterHeight
    case characterSpacingHorizontal
    case characterSpacingVertical
    case unicodeCharacterSet
    case font7Segment
    case sevenSegmentDirectMap
    case font14Segment
    case fourteenSegmentDirectMap
    case displayBrightness
    case displayContrast
    case characterAttribute
    case attributeReadback
    case attributeData
    case charAttrEnhance
    case charAttrUnderline
    case charAttrBlink
    case bitmapSizeX
    case bitmapSizeY
    case maxBlitSize
    case bitDepthFormat
    case displayOrientation
    case paletteReport
    case paletteDataSize
    case paletteDataOffset
    case paletteData
    case blitReport
    case blitRectangleX1
    case blitRectangleY1
    case blitRectangleX2
    case blitRectangleY2
    case blitData
    case softButton
    case softButtonID
    case softButtonSide
    case softButtonOffset1
    case softButtonOffset2
    case softButtonReport
    case softKeys
    case displayDataExtensions
    case characterMapping
    case unicodeEquivalent
    case characterPageMapping
    case requestReport
    public static let page: Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    @available(macOS 15.0, *)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum SensorsUsage : Swift.UInt16, Swift.Sendable {
    case sensor
    case biometric
    case biometricHumanPresence
    case biometricHumanProximity
    case biometricHumanTouch
    case biometricBloodPressure
    case biometricBodyTemperature
    case biometricHeartRate
    case biometricHeartRateVariability
    case biometricPeripheralOxygenSaturation
    case biometricRespiratoryRate
    case electrical
    case electricalCapacitance
    case electricalCurrent
    case electricalPower
    case electricalInductance
    case electricalResistance
    case electricalVoltage
    case electricalPotentiometer
    case electricalFrequency
    case electricalPeriod
    case environmental
    case environmentalAtmosphericPressure
    case environmentalHumidity
    case environmentalTemperature
    case environmentalWindDirection
    case environmentalWindSpeed
    case environmentalAirQuality
    case environmentalHeatIndex
    case environmentalSurfaceTemperature
    case environmentalVolatileOrganicCompounds
    case environmentalObjectPresence
    case environmentalObjectProximity
    case light
    case lightAmbientLight
    case lightConsumerInfrared
    case lightInfraredLight
    case lightVisibleLight
    case lightUltravioletLight
    case location
    case locationBroadcast
    case locationDeadReckoning
    case locationGPSGlobalPositioningSystem
    case locationLookup
    case locationOther
    case locationStatic
    case locationTriangulation
    case mechanical
    case mechanicalBooleanSwitch
    case mechanicalBooleanSwitchArray
    case mechanicalMultivalueSwitch
    case mechanicalForce
    case mechanicalPressure
    case mechanicalStrain
    case mechanicalWeight
    case mechanicalHapticVibrator
    case mechanicalHallEffectSwitch
    case motion
    case motionAccelerometer1D
    case motionAccelerometer2D
    case motionAccelerometer3D
    case motionGyrometer1D
    case motionGyrometer2D
    case motionGyrometer3D
    case motionMotionDetector
    case motionSpeedometer
    case motionAccelerometer
    case motionGyrometer
    case motionGravityVector
    case motionLinearAccelerometer
    case orientation
    case orientationCompass1D
    case orientationCompass2D
    case orientationCompass3D
    case orientationInclinometer1D
    case orientationInclinometer2D
    case orientationInclinometer3D
    case orientationDistance1D
    case orientationDistance2D
    case orientationDistance3D
    case orientationDeviceOrientation
    case orientationCompass
    case orientationInclinometer
    case orientationDistance
    case orientationRelativeOrientation
    case orientationSimpleOrientation
    case scanner
    case scannerBarcode
    case scannerRFID
    case scannerNFC
    case time
    case timeAlarmTimer
    case timeRealTimeClock
    case personalActivity
    case personalActivityActivityDetection
    case personalActivityDevicePosition
    case personalActivityPedometer
    case personalActivityStepDetection
    case orientationExtended
    case orientationExtendedGeomagneticOrientation
    case orientationExtendedMagnetometer
    case gesture
    case gestureChassisFlipGesture
    case gestureHingeFoldGesture
    case other
    case otherCustom
    case otherGeneric
    case otherGenericEnumerator
    case otherHingeAngle
    case vendorReserved1
    case vendorReserved2
    case vendorReserved3
    case vendorReserved4
    case vendorReserved5
    case vendorReserved6
    case vendorReserved7
    case vendorReserved8
    case vendorReserved9
    case vendorReserved10
    case vendorReserved11
    case vendorReserved12
    case vendorReserved13
    case vendorReserved14
    case vendorReserved15
    case vendorReserved16
    case event
    case eventSensorState
    case eventSensorEvent
    case property
    case propertyFriendlyName
    case propertyPersistentUniqueID
    case propertySensorStatus
    case propertyMinimumReportInterval
    case propertySensorManufacturer
    case propertySensorModel
    case propertySensorSerialNumber
    case propertySensorDescription
    case propertySensorConnectionType
    case propertySensorDevicePath
    case propertyHardwareRevision
    case propertyFirmwareVersion
    case propertyReleaseDate
    case propertyReportInterval
    case propertyChangeSensitivityAbsolute
    case propertyChangeSensitivityPercentOfRange
    case propertyChangeSensitivityPercentRelative
    case propertyAccuracy
    case propertyResolution
    case propertyMaximum
    case propertyMinimum
    case propertyReportingState
    case propertySamplingRate
    case propertyResponseCurve
    case propertyPowerState
    case propertyMaximumFIFOEvents
    case propertyReportLatency
    case propertyFlushFIFOEvents
    case propertyMaximumPowerConsumption
    case propertyIsPrimary
    case propertyHumanPresenceDetectionType
    case dataFieldLocation
    case dataFieldAltitudeAntennaSeaLevel
    case dataFieldDifferentialReferenceStationID
    case dataFieldAltitudeEllipsoidError
    case dataFieldAltitudeEllipsoid
    case dataFieldAltitudeSeaLevelError
    case dataFieldAltitudeSeaLevel
    case dataFieldDifferentialGPSDataAge
    case dataFieldErrorRadius
    case dataFieldFixQuality
    case dataFieldFixType
    case dataFieldGeoidalSeparation
    case dataFieldGPSOperationMode
    case dataFieldGPSSelectionMode
    case dataFieldGPSStatus
    case dataFieldPositionDilutionOfPrecision
    case dataFieldHorizontalDilutionOfPrecision
    case dataFieldVerticalDilutionOfPrecision
    case dataFieldLatitude
    case dataFieldLongitude
    case dataFieldTrueHeading
    case dataFieldMagneticHeading
    case dataFieldMagneticVariation
    case dataFieldSpeed
    case dataFieldSatellitesInView
    case dataFieldSatellitesInViewAzimuth
    case dataFieldSatellitesInViewElevation
    case dataFieldSatellitesInViewIDs
    case dataFieldSatellitesInViewPRNs
    case dataFieldSatellitesInViewSOrNRatios
    case dataFieldSatellitesUsedCount
    case dataFieldSatellitesUsedPRNs
    case dataFieldNMEASentence
    case dataFieldAddressLine1
    case dataFieldAddressLine2
    case dataFieldCity
    case dataFieldStateOrProvince
    case dataFieldCountryOrRegion
    case dataFieldPostalCode
    case propertyLocation
    case propertyLocationDesiredAccuracy
    case dataFieldEnvironmental
    case dataFieldAtmosphericPressure
    case dataFieldRelativeHumidity
    case dataFieldTemperature
    case dataFieldWindDirection
    case dataFieldWindSpeed
    case dataFieldAirQualityIndex
    case dataFieldEquivalentCO2
    case dataFieldVolatileOrganicCompoundConcentration
    case dataFieldObjectPresence
    case dataFieldObjectProximityRange
    case dataFieldObjectProximityOutOfRange
    case propertyEnvironmental
    case propertyReferencePressure
    case dataFieldMotion
    case dataFieldMotionState
    case dataFieldAcceleration
    case dataFieldAccelerationAxisX
    case dataFieldAccelerationAxisY
    case dataFieldAccelerationAxisZ
    case dataFieldAngularVelocity
    case dataFieldAngularVelocityAboutXAxis
    case dataFieldAngularVelocityAboutYAxis
    case dataFieldAngularVelocityAboutZAxis
    case dataFieldAngularPosition
    case dataFieldAngularPositionAboutXAxis
    case dataFieldAngularPositionAboutYAxis
    case dataFieldAngularPositionAboutZAxis
    case dataFieldMotionSpeed
    case dataFieldMotionIntensity
    case dataFieldOrientation
    case dataFieldHeading
    case dataFieldHeadingXAxis
    case dataFieldHeadingYAxis
    case dataFieldHeadingZAxis
    case dataFieldHeadingCompensatedMagneticNorth
    case dataFieldHeadingCompensatedTrueNorth
    case dataFieldHeadingMagneticNorth
    case dataFieldHeadingTrueNorth
    case dataFieldDistance
    case dataFieldDistanceXAxis
    case dataFieldDistanceYAxis
    case dataFieldDistanceZAxis
    case dataFieldDistanceOutOfRange
    case dataFieldTilt
    case dataFieldTiltXAxis
    case dataFieldTiltYAxis
    case dataFieldTiltZAxis
    case dataFieldRotationMatrix
    case dataFieldQuaternion
    case dataFieldMagneticFlux
    case dataFieldMagneticFluxXAxis
    case dataFieldMagneticFluxYAxis
    case dataFieldMagneticFluxZAxis
    case dataFieldMagnetometerAccuracy
    case dataFieldSimpleOrientationDirection
    case dataFieldMechanical
    case dataFieldBooleanSwitchState
    case dataFieldBooleanSwitchArrayStates
    case dataFieldMultivalueSwitchValue
    case dataFieldForce
    case dataFieldAbsolutePressure
    case dataFieldGaugePressure
    case dataFieldStrain
    case dataFieldWeight
    case propertyMechanical
    case propertyVibrationState
    case propertyForwardVibrationSpeed
    case propertyBackwardVibrationSpeed
    case dataFieldBiometric
    case dataFieldHumanPresence
    case dataFieldHumanProximityRange
    case dataFieldHumanProximityOutOfRange
    case dataFieldHumanTouchState
    case dataFieldBloodPressure
    case dataFieldBloodPressureDiastolic
    case dataFieldBloodPressureSystolic
    case dataFieldHeartRate
    case dataFieldRestingHeartRate
    case dataFieldHeartbeatInterval
    case dataFieldRespiratoryRate
    case dataFieldSpO2
    case dataFieldHumanAttentionDetected
    case dataFieldLight
    case dataFieldIlluminance
    case dataFieldColorTemperature
    case dataFieldChromaticity
    case dataFieldChromaticityX
    case dataFieldChromaticityY
    case dataFieldConsumerIRSentenceReceive
    case dataFieldInfraredLight
    case dataFieldRedLight
    case dataFieldGreenLight
    case dataFieldBlueLight
    case dataFieldUltravioletALight
    case dataFieldUltravioletBLight
    case dataFieldUltravioletIndex
    case dataFieldNearInfraredLight
    case propertyLight
    case propertyConsumerIRSentenceSend
    case propertyAutoBrightnessPreferred
    case propertyAutoColorPreferred
    case dataFieldScanner
    case dataFieldRFIDTag40Bit
    case dataFieldNFCSentenceReceive
    case propertyScanner
    case propertyNFCSentenceSend
    case dataFieldElectrical
    case dataFieldCapacitance
    case dataFieldCurrent
    case dataFieldElectricalPower
    case dataFieldInductance
    case dataFieldResistance
    case dataFieldVoltage
    case dataFieldFrequency
    case dataFieldPeriod
    case dataFieldPercentOfRange
    case dataFieldTime
    case dataFieldYear
    case dataFieldMonth
    case dataFieldDay
    case dataFieldDayOfWeek
    case dataFieldHour
    case dataFieldMinute
    case dataFieldSecond
    case dataFieldMillisecond
    case dataFieldTimestamp
    case dataFieldJulianDayOfYear
    case dataFieldTimeSinceSystemBoot
    case propertyTime
    case propertyTimeZoneOffsetFromUTC
    case propertyTimeZoneName
    case propertyDaylightSavingsTimeObserved
    case propertyTimeTrimAdjustment
    case propertyArmAlarm
    case dataFieldCustom
    case dataFieldCustomUsage
    case dataFieldCustomBooleanArray
    case dataFieldCustomValue
    case dataFieldCustomValue1
    case dataFieldCustomValue2
    case dataFieldCustomValue3
    case dataFieldCustomValue4
    case dataFieldCustomValue5
    case dataFieldCustomValue6
    case dataFieldCustomValue7
    case dataFieldCustomValue8
    case dataFieldCustomValue9
    case dataFieldCustomValue10
    case dataFieldCustomValue11
    case dataFieldCustomValue12
    case dataFieldCustomValue13
    case dataFieldCustomValue14
    case dataFieldCustomValue15
    case dataFieldCustomValue16
    case dataFieldCustomValue17
    case dataFieldCustomValue18
    case dataFieldCustomValue19
    case dataFieldCustomValue20
    case dataFieldCustomValue21
    case dataFieldCustomValue22
    case dataFieldCustomValue23
    case dataFieldCustomValue24
    case dataFieldCustomValue25
    case dataFieldCustomValue26
    case dataFieldCustomValue27
    case dataFieldCustomValue28
    case dataFieldGeneric
    case dataFieldGenericGUIDOrPropertyKey
    case dataFieldGenericCategoryGUID
    case dataFieldGenericTypeGUID
    case dataFieldGenericEventPropertyKey
    case dataFieldGenericPropertyPropertyKey
    case dataFieldGenericDataFieldPropertyKey
    case dataFieldGenericEvent
    case dataFieldGenericProperty
    case dataFieldGenericDataField
    case dataFieldEnumeratorTableRowIndex
    case dataFieldEnumeratorTableRowCount
    case dataFieldGenericGUIDOrPropertyKeyKind
    case dataFieldGenericGUID
    case dataFieldGenericPropertyKey
    case dataFieldGenericTopLevelCollectionID
    case dataFieldGenericReportID
    case dataFieldGenericReportItemPositionIndex
    case dataFieldGenericFirmwareVARTYPE
    case dataFieldGenericUnitOfMeasure
    case dataFieldGenericUnitExponent
    case dataFieldGenericReportSize
    case dataFieldGenericReportCount
    case propertyGeneric
    case propertyEnumeratorTableRowIndex
    case propertyEnumeratorTableRowCount
    case dataFieldPersonalActivity
    case dataFieldActivityType
    case dataFieldActivityState
    case dataFieldDevicePosition
    case dataFieldStepCount
    case dataFieldStepCountReset
    case dataFieldStepDuration
    case dataFieldStepType
    case propertyMinimumActivityDetectionInterval
    case propertySupportedActivityTypes
    case propertySubscribedActivityTypes
    case propertySupportedStepTypes
    case propertySubscribedStepTypes
    case propertyFloorHeight
    case dataFieldCustomTypeID
    case propertyCustom
    case propertyCustomValue1
    case propertyCustomValue2
    case propertyCustomValue3
    case propertyCustomValue4
    case propertyCustomValue5
    case propertyCustomValue6
    case propertyCustomValue7
    case propertyCustomValue8
    case propertyCustomValue9
    case propertyCustomValue10
    case propertyCustomValue11
    case propertyCustomValue12
    case propertyCustomValue13
    case propertyCustomValue14
    case propertyCustomValue15
    case propertyCustomValue16
    case dataFieldHinge
    case dataFieldHingeAngle
    case dataFieldGestureSensor
    case dataFieldGestureState
    case dataFieldHingeFoldInitialAngle
    case dataFieldHingeFoldFinalAngle
    case dataFieldHingeFoldContributingPanel
    case dataFieldHingeFoldType
    case sensorStateUndefined
    case sensorStateReady
    case sensorStateNotAvailable
    case sensorStateNoData
    case sensorStateInitializing
    case sensorStateAccessDenied
    case sensorStateError
    case sensorEventUnknown
    case sensorEventStateChanged
    case sensorEventPropertyChanged
    case sensorEventDataUpdated
    case sensorEventPollResponse
    case sensorEventChangeSensitivity
    case sensorEventRangeMaximumReached
    case sensorEventRangeMinimumReached
    case sensorEventHighThresholdCrossUpward
    case sensorEventHighThresholdCrossDownward
    case sensorEventLowThresholdCrossUpward
    case sensorEventLowThresholdCrossDownward
    case sensorEventZeroThresholdCrossUpward
    case sensorEventZeroThresholdCrossDownward
    case sensorEventPeriodExceeded
    case sensorEventFrequencyExceeded
    case sensorEventComplexTrigger
    case connectionTypePCIntegrated
    case connectionTypePCAttached
    case connectionTypePCExternal
    case reportingStateReportNoEvents
    case reportingStateReportAllEvents
    case reportingStateReportThresholdEvents
    case reportingStateWakeOnNoEvents
    case reportingStateWakeOnAllEvents
    case reportingStateWakeOnThresholdEvents
    case powerStateUndefined
    case powerStateD0FullPower
    case powerStateD1LowPower
    case powerStateD2StandbyPowerWithWakeup
    case powerStateD3SleepWithWakeup
    case powerStateD4PowerOff
    case accuracyDefault
    case accuracyHigh
    case accuracyMedium
    case accuracyLow
    case fixQualityNoFix
    case fixQualityGPS
    case fixQualityDGPS
    case fixTypeNoFix
    case fixTypeGPSSPSModeFixValid
    case fixTypeDGPSSPSModeFixValid
    case fixTypeGPSPPSModeFixValid
    case fixTypeRealTimeKinematic
    case fixTypeFloatRTK
    case fixTypeEstimatedDeadReckoned
    case fixTypeManualInputMode
    case fixTypeSimulatorMode
    case gpsOperationModeManual
    case gpsOperationModeAutomatic
    case gpsSelectionModeAutonomous
    case gpsSelectionModeDGPS
    case gpsSelectionModeEstimatedDeadReckoned
    case gpsSelectionModeManualInput
    case gpsSelectionModeSimulator
    case gpsSelectionModeDataNotValid
    case gpsStatusDataValid
    case gpsStatusDataNotValid
    case dayOfWeekSunday
    case dayOfWeekMonday
    case dayOfWeekTuesday
    case dayOfWeekWednesday
    case dayOfWeekThursday
    case dayOfWeekFriday
    case dayOfWeekSaturday
    case kindCategory
    case kindType
    case kindEvent
    case kindProperty
    case kindDataField
    case magnetometerAccuracyLow
    case magnetometerAccuracyMedium
    case magnetometerAccuracyHigh
    case simpleOrientationDirectionNotRotated
    case simpleOrientationDirectionRotated90DegreesCCW
    case simpleOrientationDirectionRotated180DegreesCCW
    case simpleOrientationDirectionRotated270DegreesCCW
    case simpleOrientationDirectionFaceUp
    case simpleOrientationDirectionFaceDown
    case variableTypeNULL
    case variableTypeBool
    case variableTypeUI1
    case variableTypeI1
    case variableTypeUI2
    case variableTypeI2
    case variableTypeUI4
    case variableTypeI4
    case variableTypeUI8
    case variableTypeI8
    case variableTypeR4
    case variableTypeR8
    case variableTypeWSTR
    case variableTypeSTR
    case variableTypeCLSID
    case variableTypeVectorVariableTypeUI1
    case variableTypeF16E0
    case variableTypeF16E1
    case variableTypeF16E2
    case variableTypeF16E3
    case variableTypeF16E4
    case variableTypeF16E5
    case variableTypeF16E6
    case variableTypeF16E7
    case variableTypeF16E8
    case variableTypeF16E9
    case variableTypeF16EA
    case variableTypeF16EB
    case variableTypeF16EC
    case variableTypeF16ED
    case variableTypeF16EE
    case variableTypeF16EF
    case variableTypeF32E0
    case variableTypeF32E1
    case variableTypeF32E2
    case variableTypeF32E3
    case variableTypeF32E4
    case variableTypeF32E5
    case variableTypeF32E6
    case variableTypeF32E7
    case variableTypeF32E8
    case variableTypeF32E9
    case variableTypeF32EA
    case variableTypeF32EB
    case variableTypeF32EC
    case variableTypeF32ED
    case variableTypeF32EE
    case variableTypeF32EF
    case activityTypeUnknown
    case activityTypeStationary
    case activityTypeFidgeting
    case activityTypeWalking
    case activityTypeRunning
    case activityTypeInVehicle
    case activityTypeBiking
    case activityTypeIdle
    case unitNotSpecified
    case unitLux
    case unitDegreesKelvin
    case unitDegreesCelsius
    case unitPascal
    case unitNewton
    case unitMetersOrSecond
    case unitKilogram
    case unitMeter
    case unitMetersOrSecondOrSecond
    case unitFarad
    case unitAmpere
    case unitWatt
    case unitHenry
    case unitOhm
    case unitVolt
    case unitHertz
    case unitBar
    case unitDegreesAntiClockwise
    case unitDegreesClockwise
    case unitDegrees
    case unitDegreesOrSecond
    case unitDegreesOrSecondOrSecond
    case unitKnot
    case unitPercent
    case unitSecond
    case unitMillisecond
    case unitG
    case unitBytes
    case unitMilligauss
    case unitBits
    case activityStateNoStateChange
    case activityStateStartActivity
    case activityStateEndActivity
    case exponent0
    case exponent1
    case exponent2
    case exponent3
    case exponent4
    case exponent5
    case exponent6
    case exponent7
    case exponent8
    case exponent9
    case exponentA
    case exponentB
    case exponentC
    case exponentD
    case exponentE
    case exponentF
    case devicePositionUnknown
    case devicePositionUnchanged
    case devicePositionOnDesk
    case devicePositionInHand
    case devicePositionMovingInBag
    case devicePositionStationaryInBag
    case stepTypeUnknown
    case stepTypeRunning
    case stepTypeWalking
    case gestureStateUnknown
    case gestureStateStarted
    case gestureStateCompleted
    case gestureStateCancelled
    case hingeFoldContributingPanelUnknown
    case hingeFoldContributingPanelPanel1
    case hingeFoldContributingPanelPanel2
    case hingeFoldContributingPanelBoth
    case hingeFoldTypeUnknown
    case hingeFoldTypeIncreasing
    case hingeFoldTypeDecreasing
    case humanPresenceDetectionTypeVendorDefinedNonBiometric
    case humanPresenceDetectionTypeVendorDefinedBiometric
    case humanPresenceDetectionTypeFacialBiometric
    case humanPresenceDetectionTypeAudioBiometric
    case modifierChangeSensitivityAbsolute
    case modifierMaximum
    case modifierMinimum
    case modifierAccuracy
    case modifierResolution
    case modifierThresholdHigh
    case modifierThresholdLow
    case modifierCalibrationOffset
    case modifierCalibrationMultiplier
    case modifierReportInterval
    case modifierFrequencyMax
    case modifierPeriodMax
    case modifierChangeSensitivityPercentOfRange
    case modifierChangeSensitivityPercentRelative
    case modifierVendorReserved
    public static let page: Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    @available(macOS 15.0, *)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum MedicalInstrumentUsage : Swift.UInt16, Swift.Sendable {
    case medicalUltrasound
    case vcrOrAcquisition
    case freezeOrThaw
    case clipStore
    case update
    case next
    case save
    case print
    case microphoneEnable
    case cine
    case transmitPower
    case volume
    case focus
    case depth
    case softStepPrimary
    case softStepSecondary
    case depthGainCompensation
    case zoomSelect
    case zoomAdjust
    case spectralDopplerModeSelect
    case spectralDopplerAdjust
    case colorDopplerModeSelect
    case colorDopplerAdjust
    case motionModeSelect
    case motionModeAdjust
    case twoDModeSelect
    case twoDModeAdjust
    case softControlSelect
    case softControlAdjust
    public static let page: Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    @available(macOS 15.0, *)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum BrailleDisplayUsage : Swift.UInt16, Swift.Sendable {
    case brailleDisplay
    case brailleRow
    case eightDotBrailleCell
    case sixDotBrailleCell
    case numberOfBrailleCells
    case screenReaderControl
    case screenReaderIdentifier
    case routerSet1
    case routerSet2
    case routerSet3
    case routerKey
    case rowRouterKey
    case brailleButtons
    case brailleKeyboardDot1
    case brailleKeyboardDot2
    case brailleKeyboardDot3
    case brailleKeyboardDot4
    case brailleKeyboardDot5
    case brailleKeyboardDot6
    case brailleKeyboardDot7
    case brailleKeyboardDot8
    case brailleKeyboardSpace
    case brailleKeyboardLeftSpace
    case brailleKeyboardRightSpace
    case brailleFaceControls
    case brailleLeftControls
    case brailleRightControls
    case brailleTopControls
    case brailleJoystickCenter
    case brailleJoystickUp
    case brailleJoystickDown
    case brailleJoystickLeft
    case brailleJoystickRight
    case brailleDPadCenter
    case brailleDPadUp
    case brailleDPadDown
    case brailleDPadLeft
    case brailleDPadRight
    case braillePanLeft
    case braillePanRight
    case brailleRockerUp
    case brailleRockerDown
    case brailleRockerPress
    public static let page: Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    @available(macOS 15.0, *)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum LightingAndIlluminationUsage : Swift.UInt16, Swift.Sendable {
    case lampArray
    case lampArrayAttributesReport
    case lampCount
    case boundingBoxWidthInMicrometers
    case boundingBoxHeightInMicrometers
    case boundingBoxDepthInMicrometers
    case lampArrayKind
    case minUpdateIntervalInMicroseconds
    case lampAttributesRequestReport
    case lampId
    case lampAttributesResponseReport
    case positionXInMicrometers
    case positionYInMicrometers
    case positionZInMicrometers
    case lampPurposes
    case updateLatencyInMicroseconds
    case redLevelCount
    case greenLevelCount
    case blueLevelCount
    case intensityLevelCount
    case isProgrammable
    case inputBinding
    case lampMultiUpdateReport
    case redUpdateChannel
    case greenUpdateChannel
    case blueUpdateChannel
    case intensityUpdateChannel
    case lampUpdateFlags
    case lampRangeUpdateReport
    case lampIdStart
    case lampIdEnd
    case lampArrayControlReport
    case autonomousMode
    public static let page: Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    @available(macOS 15.0, *)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum MonitorUsage : Swift.UInt16, Swift.Sendable {
    case monitorControl
    case edidInformation
    case vdifInformation
    case vesaVersion
    public static let page: Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    @available(macOS 15.0, *)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum MonitorEnumeratedUsage : Swift.Sendable {
    public static let page: Swift.UInt16
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum VESAVirtualControlsUsage : Swift.UInt16, Swift.Sendable {
    case degauss
    case brightness
    case contrast
    case redVideoGain
    case greenVideoGain
    case blueVideoGain
    case focus
    case horizontalPosition
    case horizontalSize
    case horizontalPincushion
    case horizontalPincushionBalance
    case horizontalMisconvergence
    case horizontalLinearity
    case horizontalLinearityBalance
    case verticalPosition
    case verticalSize
    case verticalPincushion
    case verticalPincushionBalance
    case verticalMisconvergence
    case verticalLinearity
    case verticalLinearityBalance
    case parallelogramDistortionKeyBalance
    case trapezoidalDistortionKey
    case tiltRotation
    case topCornerDistortionControl
    case topCornerDistortionBalance
    case bottomCornerDistortionControl
    case bottomCornerDistortionBalance
    case horizontalMoiré
    case verticalMoiré
    case inputLevelSelect
    case inputSourceSelect
    case redVideoBlackLevel
    case greenVideoBlackLevel
    case blueVideoBlackLevel
    case autoSizeCenter
    case polarityHorizontalSynchronization
    case polarityVerticalSynchronization
    case synchronizationType
    case screenOrientation
    case horizontalFrequency
    case verticalFrequency
    case settings
    case onScreenDisplay
    case stereoMode
    public static let page: Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    @available(macOS 15.0, *)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum PowerUsage : Swift.UInt16, Swift.Sendable {
    case iName
    case presentStatus
    case changedStatus
    case ups
    case powerSupply
    case batterySystem
    case batterySystemId
    case battery
    case batteryId
    case charger
    case chargerId
    case powerConverter
    case powerConverterId
    case outletSystem
    case outletSystemId
    case input
    case inputId
    case output
    case outputId
    case flow
    case flowId
    case outlet
    case outletId
    case gang
    case gangId
    case powerSummary
    case powerSummaryId
    case voltage
    case current
    case frequency
    case apparentPower
    case activePower
    case percentLoad
    case temperature
    case humidity
    case badCount
    case configVoltage
    case configCurrent
    case configFrequency
    case configApparentPower
    case configActivePower
    case configPercentLoad
    case configTemperature
    case configHumidity
    case switchOnControl
    case switchOffControl
    case toggleControl
    case lowVoltageTransfer
    case highVoltageTransfer
    case delayBeforeReboot
    case delayBeforeStartup
    case delayBeforeShutdown
    case test
    case moduleReset
    case audibleAlarmControl
    case present
    case good
    case internalFailure
    case voltagOutOfRange
    case frequencyOutOfRange
    case overload
    case overCharged
    case overTemperature
    case shutdownRequested
    case shutdownImminent
    case switchOnOrOff
    case switchable
    case used
    case boost
    case buck
    case initialized
    case tested
    case awaitingPower
    case communicationLost
    case iManufacturer
    case iProduct
    case iSerialNumber
    public static let page: Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    @available(macOS 15.0, *)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum BatterySystemUsage : Swift.UInt16, Swift.Sendable {
    case smartBatteryBatteryMode
    case smartBatteryBatteryStatus
    case smartBatteryAlarmWarning
    case smartBatteryChargerMode
    case smartBatteryChargerStatus
    case smartBatteryChargerSpecInfo
    case smartBatterySelectorState
    case smartBatterySelectorPresets
    case smartBatterySelectorInfo
    case optionalManufacturingFunction1
    case optionalManufacturingFunction2
    case optionalManufacturingFunction3
    case optionalManufacturingFunction4
    case optionalManufacturingFunction5
    case connectionToSMBus
    case outputConnection
    case chargerConnection
    case batteryInsertion
    case useNext
    case okToUse
    case batterySupported
    case selectorRevision
    case chargingIndicator
    case manufacturerAccess
    case remainingCapacityLimit
    case remainingTimeLimit
    case atRate
    case capacityMode
    case broadcastToCharger
    case primaryBattery
    case chargeController
    case terminateCharge
    case terminateDischarge
    case belowRemainingCapacityLimit
    case remainingTimeLimitExpired
    case charging
    case discharging
    case fullyCharged
    case fullyDischarged
    case conditioningFlag
    case atRateOK
    case smartBatteryErrorCode
    case needReplacement
    case atRateTimeToFull
    case atRateTimeToEmpty
    case averageCurrent
    case maxError
    case relativeStateOfCharge
    case absoluteStateOfCharge
    case remainingCapacity
    case fullChargeCapacity
    case runTimeToEmpty
    case averageTimeToEmpty
    case averageTimeToFull
    case cycleCount
    case batteryPackModelLevel
    case internalChargeController
    case primaryBatterySupport
    case designCapacity
    case specificationInfo
    case manufactureDate
    case serialNumber
    case iManufacturerName
    case iDeviceName
    case iDeviceChemistry
    case manufacturerData
    case rechargable
    case warningCapacityLimit
    case capacityGranularity1
    case capacityGranularity2
    case ioemInformation
    case inhibitCharge
    case enablePolling
    case resetToZero
    case acPresent
    case batteryPresent
    case powerFail
    case alarmInhibited
    case thermistorUnderRange
    case thermistorHot
    case thermistorCold
    case thermistorOverRange
    case voltageOutOfRange
    case currentOutOfRange
    case currentNotRegulated
    case voltageNotRegulated
    case masterMode
    case chargerSelectorSupport
    case chargerSpec
    case level2
    case level3
    public static let page: Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    @available(macOS 15.0, *)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum BarcodeScannerUsage : Swift.UInt16, Swift.Sendable {
    case barcodeBadgeReader
    case barcodeScanner
    case dumbBarCodeScanner
    case cordlessScannerBase
    case barCodeScannerCradle
    case attributeReport
    case settingsReport
    case scannedDataReport
    case rawScannedDataReport
    case triggerReport
    case statusReport
    case upcOrEANControlReport
    case ean2Of3LabelControlReport
    case code39ControlReport
    case interleaved2Of5ControlReport
    case standard2Of5ControlReport
    case msiPlesseyControlReport
    case codabarControlReport
    case code128ControlReport
    case miscellaneous1DControlReport
    case controlReport2D
    case aimingOrPointerMode
    case barCodePresentSensor
    case class1ALaser
    case class2Laser
    case heaterPresent
    case contactScanner
    case electronicArticleSurveillanceNotification
    case constantElectronicArticleSurveillance
    case errorIndication
    case fixedBeeper
    case goodDecodeIndication
    case handsFreeScanning
    case intrinsicallySafe
    case klasseEinsLaser
    case longRangeScanner
    case mirrorSpeedControl
    case notOnFileIndication
    case programmableBeeper
    case triggerless
    case wand
    case waterResistant
    case multiRangeScanner
    case proximitySensor
    case fragmentDecoding
    case scannerReadConfidence
    case dataPrefix
    case prefixAIMI
    case prefixNone
    case prefixProprietary
    case activeTime
    case aimingLaserPattern
    case barCodePresent
    case beeperState
    case laserOnTime
    case laserState
    case lockoutTime
    case motorState
    case motorTimeout
    case powerOnResetScanner
    case preventReadOfBarcodes
    case initiateBarcodeRead
    case triggerState
    case triggerMode
    case triggerModeBlinkingLaserOn
    case triggerModeContinuousLaserOn
    case triggerModeLaserOnWhilePulled
    case triggerModeLaserStaysOnAfterRelease
    case commitParametersToNVM
    case parameterScanning
    case parametersChanged
    case setParameterDefaultValues
    case scannerInCradle
    case scannerInRange
    case aimDuration
    case goodReadLampDuration
    case goodReadLampIntensity
    case goodReadLED
    case goodReadToneFrequency
    case goodReadToneLength
    case goodReadToneVolume
    case noReadMessage
    case notOnFileVolume
    case powerupBeep
    case soundErrorBeep
    case soundGoodReadBeep
    case soundNotOnFileBeep
    case goodReadWhenToWrite
    case grwtiAfterDecode
    case grwtiBeepOrLampAfterTransmit
    case grwtiNoBeepOrLampUseAtAll
    case booklandEAN
    case convertEAN8To13Type
    case convertUPCAToEAN13
    case convertUPCEToA
    case ean13
    case ean8
    case ean99128Mandatory
    case ean99P5Or128Optional
    case enableEANTwoLabel
    case upcOrEAN
    case upcOrEANCouponCode
    case upcOrEANPeriodicals
    case upcA
    case upcAWith128Mandatory
    case upcAWith128Optional
    case upcAWithP5Optional
    case upcE
    case upcE1
    case periodical
    case periodicalAutoDiscriminatePlus2
    case periodicalOnlyDecodeWithPlus2
    case periodicalIgnorePlus2
    case periodicalAutoDiscriminatePlus5
    case periodicalOnlyDecodeWithPlus5
    case periodicalIgnorePlus5
    case check
    case checkDisablePrice
    case checkEnable4DigitPrice
    case checkEnable5DigitPrice
    case checkEnableEuropean4DigitPrice
    case checkEnableEuropean5DigitPrice
    case eanTwoLabel
    case eanThreeLabel
    case ean8FlagDigit1
    case ean8FlagDigit2
    case ean8FlagDigit3
    case ean13FlagDigit1
    case ean13FlagDigit2
    case ean13FlagDigit3
    case addEAN2Of3LabelDefinition
    case clearAllEAN2Of3LabelDefinitions
    case codabar
    case code128
    case code39
    case code93
    case fullASCIIConversion
    case interleaved2Of5
    case italianPharmacyCode
    case msiOrPlessey
    case standard2Of5IATA
    case standard2Of5
    case transmitStartOrStop
    case triOptic
    case uccOrEAN128
    case checkDigit
    case checkDigitDisable
    case checkDigitEnableInterleaved2Of5OPCC
    case checkDigitEnableInterleaved2Of5USS
    case checkDigitEnableStandard2Of5OPCC
    case checkDigitEnableStandard2Of5USS
    case checkDigitEnableOneMSIPlessey
    case checkDigitEnableTwoMSIPlessey
    case checkDigitCodabarEnable
    case checkDigitCode39Enable
    case transmitCheckDigit
    case disableCheckDigitTransmit
    case enableCheckDigitTransmit
    case symbologyIdentifier1
    case symbologyIdentifier2
    case symbologyIdentifier3
    case decodedData
    case decodeDataContinued
    case barSpaceData
    case scannerDataAccuracy
    case rawDataPolarity
    case polarityInvertedBarCode
    case polarityNormalBarCode
    case minimumLengthToDecode
    case maximumLengthToDecode
    case discreteLengthToDecode1
    case discreteLengthToDecode2
    case dataLengthMethod
    case dlMethodReadAny
    case dlMethodCheckInRange
    case dlMethodCheckForDiscrete
    case aztecCode
    case bc412
    case channelCode
    case code16
    case code32
    case code49
    case codeOne
    case colorcode
    case dataMatrix
    case maxiCode
    case microPDF
    case pdf417
    case posiCode
    case qrCode
    case superCode
    case ultraCode
    case usd5SlugCode
    case veriCode
    public static let page: Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    @available(macOS 15.0, *)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum ScalesUsage : Swift.UInt16, Swift.Sendable {
    case scales
    case scaleDevice
    case scaleClass
    case scaleClassIMetric
    case scaleClassIIMetric
    case scaleClassIIIMetric
    case scaleClassIIILMetric
    case scaleClassIVMetric
    case scaleClassIIIEnglish
    case scaleClassIIILEnglish
    case scaleClassIVEnglish
    case scaleClassGeneric
    case scaleAttributeReport
    case scaleControlReport
    case scaleDataReport
    case scaleStatusReport
    case scaleWeightLimitReport
    case scaleStatisticsReport
    case dataWeight
    case dataScaling
    case weightUnit
    case weightUnitMilligram
    case weightUnitGram
    case weightUnitKilogram
    case weightUnitCarats
    case weightUnitTaels
    case weightUnitGrains
    case weightUnitPennyweights
    case weightUnitMetricTon
    case weightUnitAvoirTon
    case weightUnitTroyOunce
    case weightUnitOunce
    case weightUnitPound
    case calibrationCount
    case reZeroCount
    case scaleStatus
    case scaleStatusFault
    case scaleStatusStableAtCenterOfZero
    case scaleStatusInMotion
    case scaleStatusWeightStable
    case scaleStatusUnderZero
    case scaleStatusOverWeightLimit
    case scaleStatusRequiresCalibration
    case scaleStatusRequiresRezeroing
    case zeroScale
    case enforcedZeroReturn
    public static let page: Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    @available(macOS 15.0, *)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum MagneticStripeReaderUsage : Swift.UInt16, Swift.Sendable {
    case msrDeviceReadOnly
    case track1Length
    case track2Length
    case track3Length
    case trackJISLength
    case trackData
    case track1Data
    case track2Data
    case track3Data
    case trackJISData
    public static let page: Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    @available(macOS 15.0, *)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum CameraControlUsage : Swift.UInt16, Swift.Sendable {
    case cameraAutoFocus
    case cameraShutter
    public static let page: Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    @available(macOS 15.0, *)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum ArcadeUsage : Swift.UInt16, Swift.Sendable {
    case generalPurposeIOCard
    case coinDoor
    case watchdogTimer
    case generalPurposeAnalogInputState
    case generalPurposeDigitalInputState
    case generalPurposeOpticalInputState
    case generalPurposeDigitalOutputState
    case numberOfCoinDoors
    case coinDrawerDropCount
    case coinDrawerStart
    case coinDrawerService
    case coinDrawerTilt
    case coinDoorTest
    case coinDoorLockout
    case watchdogTimeout
    case watchdogAction
    case watchdogReboot
    case watchdogRestart
    case alarmInput
    case coinDoorCounter
    case ioDirectionMapping
    case setIODirectionMapping
    case extendedOpticalInputState
    case pinPadInputState
    case pinPadStatus
    case pinPadOutput
    case pinPadCommand
    public static let page: Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    @available(macOS 15.0, *)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage {
  public enum FIDOAllianceUsage : Swift.UInt16, Swift.Sendable {
    case u2fAuthenticatorDevice
    case inputReportData
    case outputReportData
    public static let page: Swift.UInt16
    public init?(rawValue: Swift.UInt16)
    @available(macOS 15.0, *)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
}
@available(macOS 15, *)
public struct HIDReportID : Swift.RawRepresentable, Swift.Comparable, Swift.Hashable, Swift.Sendable {
  public typealias RawValue = Swift.UInt8
  public var rawValue: CoreHID.HIDReportID.RawValue
  public init?(rawValue: Swift.UInt8)
  public static func < (lhs: CoreHID.HIDReportID, rhs: CoreHID.HIDReportID) -> Swift.Bool
  public static let allReports: Swift.ClosedRange<CoreHID.HIDReportID>
}
@available(macOS 15, *)
extension CoreHID.HIDReportID : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 15, *)
public enum HIDReportType : Swift.Sendable {
  case input
  case output
  case feature
  public static func == (a: CoreHID.HIDReportType, b: CoreHID.HIDReportType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 15, *)
public enum HIDDeviceTransport : Swift.Equatable, Swift.Sendable {
  case usb
  case bluetooth
  case bluetoothLowEnergy
  case bluetoothAACP
  case aid
  case i2c
  case spi
  case serial
  case iap
  case airPlay
  case spu
  case fifo
  case virtual
  case unknown(Swift.String)
  public static func == (a: CoreHID.HIDDeviceTransport, b: CoreHID.HIDDeviceTransport) -> Swift.Bool
}
@available(macOS 15, *)
public enum HIDDeviceLocalizationCode : Swift.Equatable, Swift.Sendable {
  case unsupported
  case arabic
  case belgium
  case canada
  case canadaFrench
  case czechia
  case denmark
  case finland
  case france
  case germany
  case greece
  case hebrew
  case hungary
  case unitedStatesISO
  case italy
  case japan
  case korea
  case latinAmerica
  case netherlands
  case norway
  case persian
  case poland
  case portugal
  case russia
  case slovakia
  case spain
  case sweden
  case switzerlandFrench
  case switzerlandGerman
  case switzerland
  case chineseZhuyin
  case turkeyQWERTY
  case unitedKingdom
  case unitedStates
  case yugoslavia
  case turkeyStandard
  public static func == (a: CoreHID.HIDDeviceLocalizationCode, b: CoreHID.HIDDeviceLocalizationCode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 15, *)
public enum HIDDeviceError : Swift.Equatable, Swift.Sendable, Foundation.LocalizedError {
  case noResources
  case notPrivileged
  case badArgument
  case exclusiveAccess
  case unsupported
  case ioError
  case busy
  case timeout
  case notReady
  case messageTooLarge
  case notPermitted
  case noPower
  case deviceError
  case aborted
  case notResponding
  case unknown(Swift.Int32)
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (a: CoreHID.HIDDeviceError, b: CoreHID.HIDDeviceError) -> Swift.Bool
}
@available(macOS 15, *)
public actor HIDDeviceClient {
  public struct DeviceReference : Swift.Hashable, Swift.Sendable {
    public let deviceID: Swift.UInt64
    public static func == (a: CoreHID.HIDDeviceClient.DeviceReference, b: CoreHID.HIDDeviceClient.DeviceReference) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  nonisolated final public let deviceReference: CoreHID.HIDDeviceClient.DeviceReference
  public var descriptor: Foundation.Data {
    get
  }
  final public let primaryUsage: CoreHID.HIDUsage
  public var deviceUsages: [CoreHID.HIDUsage] {
    get
  }
  final public let vendorID: Swift.UInt32
  final public let productID: Swift.UInt32
  public var transport: CoreHID.HIDDeviceTransport? {
    get
  }
  public var product: Swift.String? {
    get
  }
  public var manufacturer: Swift.String? {
    get
  }
  public var modelNumber: Swift.String? {
    get
  }
  public var versionNumber: Swift.UInt64? {
    get
  }
  public var serialNumber: Swift.String? {
    get
  }
  public var uniqueID: Swift.String? {
    get
  }
  public var locationID: Swift.UInt64? {
    get
  }
  public var localizationCode: CoreHID.HIDDeviceLocalizationCode {
    get
  }
  public var isBuiltIn: Swift.Bool {
    get
  }
  public var elements: [CoreHID.HIDElement] {
    get
  }
  public init?(deviceReference: CoreHID.HIDDeviceClient.DeviceReference)
  @objc deinit
  public func seizeDevice() throws
  public enum Notification : Swift.Sendable {
    case inputReport(id: CoreHID.HIDReportID?, data: Foundation.Data, timestamp: _Concurrency.SuspendingClock.Instant)
    case elementUpdates(values: [CoreHID.HIDElement.Value])
    case deviceSeized
    case deviceUnseized
    case deviceRemoved
  }
  public func monitorNotifications(reportIDsToMonitor: [Swift.ClosedRange<CoreHID.HIDReportID>], elementsToMonitor: [CoreHID.HIDElement]) -> _Concurrency.AsyncThrowingStream<CoreHID.HIDDeviceClient.Notification, any Swift.Error>
  public struct UnsafeProperty : @unchecked Swift.Sendable {
    public let unsafeObject: Swift.AnyObject
  }
  public subscript(key: Swift.String) -> CoreHID.HIDDeviceClient.UnsafeProperty? {
    get
    set
  }
  public func dispatchSetReportRequest(type: CoreHID.HIDReportType, id: CoreHID.HIDReportID? = nil, data: Foundation.Data, timeout: Swift.Duration? = nil) async throws
  public func dispatchGetReportRequest(type: CoreHID.HIDReportType, id: CoreHID.HIDReportID? = nil, timeout: Swift.Duration? = nil) async throws -> Foundation.Data
  public struct ProvideElementUpdate : CoreHID.HIDElementUpdate {
    public var values: [CoreHID.HIDElement.Value]
    public init(values: [CoreHID.HIDElement.Value])
    public static func == (a: CoreHID.HIDDeviceClient.ProvideElementUpdate, b: CoreHID.HIDDeviceClient.ProvideElementUpdate) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct RequestElementUpdate : CoreHID.HIDElementUpdate {
    public var elements: [CoreHID.HIDElement]
    public var pollDevice: Swift.Bool
    public init(elements: [CoreHID.HIDElement], pollDevice: Swift.Bool = true)
    public static func == (a: CoreHID.HIDDeviceClient.RequestElementUpdate, b: CoreHID.HIDDeviceClient.RequestElementUpdate) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct HIDElementUpdateResult : Swift.Sendable {
    public subscript(originalRequest: CoreHID.HIDDeviceClient.ProvideElementUpdate) -> Swift.Result<Swift.Void, any Swift.Error>? {
      get
    }
    public subscript(originalRequest: CoreHID.HIDDeviceClient.RequestElementUpdate) -> Swift.Result<[CoreHID.HIDElement.Value], any Swift.Error>? {
      get
    }
  }
  public func updateElements(_ updates: [any CoreHID.HIDElementUpdate], timeout: Swift.Duration? = nil) async -> CoreHID.HIDDeviceClient.HIDElementUpdateResult
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 15, *)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
@available(macOS 15, *)
extension CoreHID.HIDDeviceClient : Swift.Equatable {
  public static func == (lhs: CoreHID.HIDDeviceClient, rhs: CoreHID.HIDDeviceClient) -> Swift.Bool
}
@available(macOS 15, *)
extension CoreHID.HIDDeviceClient : Swift.Hashable {
  nonisolated public func hash(into hasher: inout Swift.Hasher)
  nonisolated public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 15, *)
extension CoreHID.HIDDeviceClient : Swift.CustomStringConvertible {
  nonisolated public var description: Swift.String {
    get
  }
}
@available(macOS 15, *)
extension CoreHID.HIDDeviceClient.DeviceReference : Swift.CustomStringConvertible {
  nonisolated public var description: Swift.String {
    get
  }
}
@available(macOS 15, *)
public protocol HIDElementUpdate : Swift.Hashable, Swift.Sendable {
}
@available(macOS 15, *)
extension CoreHID.HIDElementCollection.CollectionType : Swift.Equatable {}
@available(macOS 15, *)
extension CoreHID.HIDElementCollection.CollectionType : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.GenericDesktopUsage : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.GenericDesktopUsage : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.GenericDesktopUsage : Swift.RawRepresentable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.SimulationControlsUsage : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.SimulationControlsUsage : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.SimulationControlsUsage : Swift.RawRepresentable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.VRControlsUsage : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.VRControlsUsage : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.VRControlsUsage : Swift.RawRepresentable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.SportControlsUsage : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.SportControlsUsage : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.SportControlsUsage : Swift.RawRepresentable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.GameControlsUsage : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.GameControlsUsage : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.GameControlsUsage : Swift.RawRepresentable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.GenericDeviceControlsUsage : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.GenericDeviceControlsUsage : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.GenericDeviceControlsUsage : Swift.RawRepresentable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.KeyboardOrKeypadUsage : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.KeyboardOrKeypadUsage : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.KeyboardOrKeypadUsage : Swift.RawRepresentable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.LEDUsage : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.LEDUsage : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.LEDUsage : Swift.RawRepresentable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.TelephonyDeviceUsage : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.TelephonyDeviceUsage : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.TelephonyDeviceUsage : Swift.RawRepresentable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.ConsumerUsage : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.ConsumerUsage : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.ConsumerUsage : Swift.RawRepresentable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.DigitizersUsage : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.DigitizersUsage : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.DigitizersUsage : Swift.RawRepresentable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.HapticsUsage : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.HapticsUsage : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.HapticsUsage : Swift.RawRepresentable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.PhysicalInputDeviceUsage : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.PhysicalInputDeviceUsage : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.PhysicalInputDeviceUsage : Swift.RawRepresentable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.SOCUsage : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.SOCUsage : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.SOCUsage : Swift.RawRepresentable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.EyeAndHeadTrackersUsage : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.EyeAndHeadTrackersUsage : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.EyeAndHeadTrackersUsage : Swift.RawRepresentable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.AuxiliaryDisplayUsage : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.AuxiliaryDisplayUsage : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.AuxiliaryDisplayUsage : Swift.RawRepresentable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.SensorsUsage : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.SensorsUsage : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.SensorsUsage : Swift.RawRepresentable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.MedicalInstrumentUsage : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.MedicalInstrumentUsage : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.MedicalInstrumentUsage : Swift.RawRepresentable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.BrailleDisplayUsage : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.BrailleDisplayUsage : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.BrailleDisplayUsage : Swift.RawRepresentable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.LightingAndIlluminationUsage : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.LightingAndIlluminationUsage : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.LightingAndIlluminationUsage : Swift.RawRepresentable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.MonitorUsage : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.MonitorUsage : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.MonitorUsage : Swift.RawRepresentable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.VESAVirtualControlsUsage : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.VESAVirtualControlsUsage : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.VESAVirtualControlsUsage : Swift.RawRepresentable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.PowerUsage : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.PowerUsage : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.PowerUsage : Swift.RawRepresentable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.BatterySystemUsage : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.BatterySystemUsage : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.BatterySystemUsage : Swift.RawRepresentable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.BarcodeScannerUsage : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.BarcodeScannerUsage : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.BarcodeScannerUsage : Swift.RawRepresentable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.ScalesUsage : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.ScalesUsage : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.ScalesUsage : Swift.RawRepresentable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.MagneticStripeReaderUsage : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.MagneticStripeReaderUsage : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.MagneticStripeReaderUsage : Swift.RawRepresentable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.CameraControlUsage : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.CameraControlUsage : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.CameraControlUsage : Swift.RawRepresentable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.ArcadeUsage : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.ArcadeUsage : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.ArcadeUsage : Swift.RawRepresentable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.FIDOAllianceUsage : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.FIDOAllianceUsage : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreHID.HIDUsage.FIDOAllianceUsage : Swift.RawRepresentable {}
@available(macOS 15, *)
extension CoreHID.HIDReportType : Swift.Equatable {}
@available(macOS 15, *)
extension CoreHID.HIDReportType : Swift.Hashable {}
@available(macOS 15, *)
extension CoreHID.HIDDeviceLocalizationCode : Swift.Hashable {}
