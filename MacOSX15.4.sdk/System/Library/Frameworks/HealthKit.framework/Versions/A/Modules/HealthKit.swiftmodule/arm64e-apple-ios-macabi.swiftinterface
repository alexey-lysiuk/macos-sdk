// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.5 clang-1700.0.13.3)
// swift-module-flags: -target arm64e-apple-ios18.4-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature AccessLevelOnImport -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 5200.4.25 -module-name HealthKit
// swift-module-flags-ignorable:  -interface-compiler-version 6.1
import CoreLocation
import Foundation
@_exported import HealthKit
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import notify
import os
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
public struct HKSampleQueryDescriptor<Sample> where Sample : HealthKit.HKSample {
  public var predicates: [HKSamplePredicate<Sample>] {
    get
    set
  }
  public var sortDescriptors: [SortDescriptor<Sample>]
  public var limit: Int?
  public init(predicates: [HKSamplePredicate<Sample>], sortDescriptors: [SortDescriptor<Sample>], limit: Int? = nil)
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
extension HKSampleQueryDescriptor : HKAsyncQuery {
  public func result(for healthStore: HKHealthStore) async throws -> [Sample]
  @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
  public typealias Output = [Sample]
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
public struct HKStatisticsCollectionQueryDescriptor {
  public var predicate: HKSamplePredicate<HKQuantitySample>
  public var options: HKStatisticsOptions
  public var anchorDate: Date
  public var intervalComponents: DateComponents
  public init(predicate: HKSamplePredicate<HKQuantitySample>, options: HKStatisticsOptions, anchorDate: Date, intervalComponents: DateComponents)
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
extension HKStatisticsCollectionQueryDescriptor : HKAsyncQuery {
  public func result(for healthStore: HKHealthStore) async throws -> HKStatisticsCollection
  @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
  public typealias Output = HealthKit.HKStatisticsCollection
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
extension HKStatisticsCollectionQueryDescriptor : HKAsyncSequenceQuery {
  public struct Result {
    public let statisticsCollection: HKStatisticsCollection
    public let updatedStatistics: [HKStatistics]?
  }
  public struct Results : AsyncSequence {
    public typealias Element = HKStatisticsCollectionQueryDescriptor.Result
    public struct Iterator : AsyncIteratorProtocol {
      public mutating func next() async throws -> Element?
      @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
      public typealias Element = HealthKit.HKStatisticsCollectionQueryDescriptor.Results.Element
      @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 15.4, *)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
    }
    public func makeAsyncIterator() -> Iterator
    @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
    public typealias AsyncIterator = HealthKit.HKStatisticsCollectionQueryDescriptor.Results.Iterator
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 15.4, *)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
  }
  public func results(for healthStore: HKHealthStore) -> Results
  @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
  public typealias Sequence = HealthKit.HKStatisticsCollectionQueryDescriptor.Results
}
@available(iOS 15.4, macCatalyst 15.4, macOS 13.0, *)
@available(watchOS, unavailable)
public struct HKVerifiableClinicalRecordQueryDescriptor {
  public var recordTypes: [HKVerifiableClinicalRecordCredentialType]
  public var sourceTypes: [HKVerifiableClinicalRecordSourceType]
  public var predicate: NSPredicate?
  public init(recordTypes: [HKVerifiableClinicalRecordCredentialType], sourceTypes: [HKVerifiableClinicalRecordSourceType], predicate: NSPredicate? = nil)
}
@available(iOS 15.4, macCatalyst 15.4, macOS 13.0, *)
@available(watchOS, unavailable)
extension HKVerifiableClinicalRecordQueryDescriptor : HKAsyncQuery {
  public func result(for healthStore: HKHealthStore) async throws -> [HKVerifiableClinicalRecord]
  @available(iOS 15.4, macOS 13.0, macCatalyst 15.4, *)
  @available(watchOS, unavailable)
  public typealias Output = [HealthKit.HKVerifiableClinicalRecord]
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HKAttachmentStore {
  public func addAttachment(to object: HKObject, name: String, contentType: UTType, url: URL, metadata: [String : Any] = [:], completion: @escaping (HKAttachment?, Error?) -> Void)
  public func addAttachment(to object: HKObject, name: String, contentType: UTType, url: URL, metadata: [String : Any] = [:]) async throws -> HKAttachment
  public func dataReader(for attachment: HKAttachment) -> HKAttachmentDataReader
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
public struct HKWorkoutRouteQueryDescriptor {
  public var workoutRoute: HKWorkoutRoute
  public init(_ workoutRoute: HKWorkoutRoute)
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
extension HKWorkoutRouteQueryDescriptor : HKAsyncSequenceQuery {
  public struct Results : AsyncSequence {
    public typealias Element = CLLocation
    public struct Iterator : AsyncIteratorProtocol {
      @usableFromInline
      internal var locationIterator: Array<CLLocation>.Iterator?
      @usableFromInline
      internal mutating func nextLocationIterator() async throws -> Array<CLLocation>.Iterator?
      @inlinable public mutating func next() async throws -> Element? {
                 
                 
                guard let next = locationIterator?.next() else {
                    locationIterator = try await nextLocationIterator()
                    return locationIterator?.next()
                }
                return next
            }
      @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
      public typealias Element = HealthKit.HKWorkoutRouteQueryDescriptor.Results.Element
      @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 15.4, *)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
    }
    public func makeAsyncIterator() -> Iterator
    @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
    public typealias AsyncIterator = HealthKit.HKWorkoutRouteQueryDescriptor.Results.Iterator
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 15.4, *)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
  }
  public func results(for healthStore: HKHealthStore) -> Results
  @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
  public typealias Sequence = HealthKit.HKWorkoutRouteQueryDescriptor.Results
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
public struct HKHeartbeatSeriesQueryDescriptor {
  public var sample: HKHeartbeatSeriesSample
  public init(_ sample: HKHeartbeatSeriesSample)
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
extension HKHeartbeatSeriesQueryDescriptor : HKAsyncSequenceQuery {
  public struct Heartbeat : Equatable, Hashable {
    public let timeIntervalSinceStart: TimeInterval
    public let precededByGap: Bool
    public static func == (a: HealthKit.HKHeartbeatSeriesQueryDescriptor.Heartbeat, b: HealthKit.HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Results : AsyncSequence {
    public typealias Element = Heartbeat
    public struct Iterator : AsyncIteratorProtocol {
      @usableFromInline
      internal var heartbeatIterator: HeartbeatIterator?
      @usableFromInline
      internal mutating func nextHeartbeatIterator() async throws -> HeartbeatIterator?
      @inlinable public mutating func next() async throws -> Element? {
                 
                 
                guard let next = heartbeatIterator?.next() else {
                    heartbeatIterator = try await nextHeartbeatIterator()
                    return heartbeatIterator?.next()
                }
                return next
            }
      @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
      public typealias Element = HealthKit.HKHeartbeatSeriesQueryDescriptor.Results.Element
      @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 15.4, *)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
    }
    public func makeAsyncIterator() -> Iterator
    @usableFromInline
    internal struct HeartbeatIterator : IteratorProtocol {
      @usableFromInline
      internal mutating func next() -> HKHeartbeatSeriesQueryDescriptor.Heartbeat?
      @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
      @usableFromInline
      internal typealias Element = HealthKit.HKHeartbeatSeriesQueryDescriptor.Heartbeat
    }
    @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
    public typealias AsyncIterator = HealthKit.HKHeartbeatSeriesQueryDescriptor.Results.Iterator
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 15.4, *)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
  }
  public func results(for healthStore: HKHealthStore) -> Results
  @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
  public typealias Sequence = HealthKit.HKHeartbeatSeriesQueryDescriptor.Results
}
@available(iOS 18.0, watchOS 11.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
extension HKSamplePredicate {
  public static func stateOfMind(_ predicate: NSPredicate? = nil) -> HKSamplePredicate<HKStateOfMind>
}
@available(iOS 18.0, watchOS 11.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
extension HKStateOfMind.ValenceClassification {
  public init?(valence: Double)
}
@available(iOS 18.0, watchOS 11.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
extension HKStateOfMind {
  public var labels: [HKStateOfMind.Label] {
    get
  }
  public var associations: [HKStateOfMind.Association] {
    get
  }
  convenience public init(date: Date, kind: HKStateOfMind.Kind, valence: Double, labels: [HKStateOfMind.Label], associations: [HKStateOfMind.Association], metadata: [String : Any]? = [:])
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
public struct HKStatisticsQueryDescriptor {
  public var predicate: HKSamplePredicate<HKQuantitySample>
  public var options: HKStatisticsOptions
  public init(predicate: HKSamplePredicate<HKQuantitySample>, options: HKStatisticsOptions)
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
extension HKStatisticsQueryDescriptor : HKAsyncQuery {
  public func result(for healthStore: HKHealthStore) async throws -> HKStatistics?
  @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
  public typealias Output = HealthKit.HKStatistics?
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
public struct HKActivitySummaryQueryDescriptor {
  public var predicate: NSPredicate?
  public init(predicate: NSPredicate?)
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
extension HKActivitySummaryQueryDescriptor : HKAsyncQuery {
  public func result(for healthStore: HKHealthStore) async throws -> [HKActivitySummary]
  @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
  public typealias Output = [HealthKit.HKActivitySummary]
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
extension HKActivitySummaryQueryDescriptor : HKAsyncSequenceQuery {
  public struct Results : AsyncSequence {
    public typealias Element = [HKActivitySummary]
    public struct Iterator : AsyncIteratorProtocol {
      public mutating func next() async throws -> Element?
      @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
      public typealias Element = HealthKit.HKActivitySummaryQueryDescriptor.Results.Element
      @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 15.4, *)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
    }
    public func makeAsyncIterator() -> Iterator
    @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
    public typealias AsyncIterator = HealthKit.HKActivitySummaryQueryDescriptor.Results.Iterator
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 15.4, *)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
  }
  public func results(for healthStore: HKHealthStore) -> Results
  @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
  public typealias Sequence = HealthKit.HKActivitySummaryQueryDescriptor.Results
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
public struct HKElectrocardiogramQueryDescriptor {
  public var electrocardiogram: HKElectrocardiogram
  public init(_ electrocardiogram: HKElectrocardiogram)
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
extension HKElectrocardiogramQueryDescriptor : HKAsyncSequenceQuery {
  public struct Results : AsyncSequence {
    public typealias Element = HKElectrocardiogram.VoltageMeasurement
    public struct Iterator : AsyncIteratorProtocol {
      @inlinable public mutating func next() async throws -> Element? {
                 
                 
                guard let next = nextMeasurement() else {
                    try await awaitMeasurementEnumerator()
                    return nextMeasurement()
                }
                return next
            }
      @usableFromInline
      internal func nextMeasurement() -> HKElectrocardiogram.VoltageMeasurement?
      @usableFromInline
      internal mutating func awaitMeasurementEnumerator() async throws
      @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
      public typealias Element = HealthKit.HKElectrocardiogramQueryDescriptor.Results.Element
      @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 15.4, *)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
    }
    public func makeAsyncIterator() -> Iterator
    @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
    public typealias AsyncIterator = HealthKit.HKElectrocardiogramQueryDescriptor.Results.Iterator
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 15.4, *)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
  }
  public func results(for healthStore: HKHealthStore) -> Results
  @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
  public typealias Sequence = HealthKit.HKElectrocardiogramQueryDescriptor.Results
}
public enum HKMCPregnancyDatesConstants {
  public static let physiologicalWashoutDuration: Swift.Int
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
public protocol HKAsyncQuery {
  associatedtype Output
  func result(for healthStore: HKHealthStore) async throws -> Output
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
public protocol HKAsyncSequenceQuery {
  associatedtype Sequence : _Concurrency.AsyncSequence
  func results(for healthStore: HKHealthStore) -> Sequence
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
public struct HKAnchoredObjectQueryDescriptor<Sample> where Sample : HealthKit.HKSample {
  public var predicates: [HKSamplePredicate<Sample>] {
    get
    set
  }
  public var anchor: HKQueryAnchor?
  public var limit: Int?
  public struct Result {
    public let addedSamples: [Sample]
    public let deletedObjects: [HKDeletedObject]
    public let newAnchor: HKQueryAnchor
  }
  public init(predicates: [HKSamplePredicate<Sample>], anchor: HKQueryAnchor?, limit: Int? = nil)
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
extension HKAnchoredObjectQueryDescriptor : HKAsyncQuery {
  public func result(for healthStore: HKHealthStore) async throws -> Result
  @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
  public typealias Output = HealthKit.HKAnchoredObjectQueryDescriptor<Sample>.Result
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
extension HKAnchoredObjectQueryDescriptor : HKAsyncSequenceQuery {
  public struct Results : AsyncSequence {
    public typealias Element = HKAnchoredObjectQueryDescriptor.Result
    public struct Iterator : AsyncIteratorProtocol {
      public mutating func next() async throws -> Element?
      @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
      public typealias Element = HealthKit.HKAnchoredObjectQueryDescriptor<Sample>.Results.Element
      @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 15.4, *)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
    }
    public func makeAsyncIterator() -> Iterator
    @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
    public typealias AsyncIterator = HealthKit.HKAnchoredObjectQueryDescriptor<Sample>.Results.Iterator
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 15.4, *)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
  }
  public func results(for healthStore: HKHealthStore) -> Results
  @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
  public typealias Sequence = HealthKit.HKAnchoredObjectQueryDescriptor<Sample>.Results
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HKAttachment {
  public struct AsyncBytes : AsyncSequence {
    public typealias Element = UInt8
    public func makeAsyncIterator() -> BufferedAsyncByteIterator
    @available(iOS 16.0, watchOS 9.0, macOS 13.0, macCatalyst 16.0, *)
    public typealias AsyncIterator = HealthKit.BufferedAsyncByteIterator
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 16.0, *)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
  }
}
extension HKHealthStore {
  @available(iOS 15.0, watchOS 8.0, macCatalyst 15.0, macOS 13.0, *)
  public func requestAuthorization(toShare typesToShare: Set<HKSampleType>, read typesToRead: Set<HKObjectType>) async throws
}
@available(iOS 18.0, watchOS 11.0, macCatalyst 18.0, macOS 15.0, *)
public struct HKWorkoutEffortRelationshipQueryDescriptor {
  public var predicate: NSPredicate?
  public var anchor: HKQueryAnchor?
  public var option: HKWorkoutEffortRelationshipQueryOptions
  public struct Result {
    public let relationships: [HKWorkoutEffortRelationship]
    public let newAnchor: HKQueryAnchor
  }
  public init(predicate: NSPredicate?, anchor: HKQueryAnchor?, option: HKWorkoutEffortRelationshipQueryOptions)
}
@available(iOS 18.0, watchOS 11.0, macCatalyst 18.0, macOS 15.0, *)
extension HKWorkoutEffortRelationshipQueryDescriptor : HKAsyncQuery {
  public func result(for healthStore: HKHealthStore) async throws -> Result
  @available(iOS 18.0, watchOS 11.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias Output = HealthKit.HKWorkoutEffortRelationshipQueryDescriptor.Result
}
@available(iOS 18.0, watchOS 11.0, macCatalyst 18.0, macOS 15.0, *)
extension HKWorkoutEffortRelationshipQueryDescriptor : HKAsyncSequenceQuery {
  public struct Results : AsyncSequence {
    public typealias Element = HKWorkoutEffortRelationshipQueryDescriptor.Result
    public struct Iterator : AsyncIteratorProtocol {
      public mutating func next() async throws -> Element?
      @available(iOS 18.0, watchOS 11.0, macOS 15.0, macCatalyst 18.0, *)
      public typealias Element = HealthKit.HKWorkoutEffortRelationshipQueryDescriptor.Results.Element
      @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
    }
    public func makeAsyncIterator() -> Iterator
    @available(iOS 18.0, watchOS 11.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias AsyncIterator = HealthKit.HKWorkoutEffortRelationshipQueryDescriptor.Results.Iterator
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
  }
  public func results(for healthStore: HKHealthStore) -> Results
  @available(iOS 18.0, watchOS 11.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias Sequence = HealthKit.HKWorkoutEffortRelationshipQueryDescriptor.Results
}
@available(iOS 14.0, watchOS 7.0, macCatalyst 14.0, macOS 13.0, *)
extension HKElectrocardiogramQuery {
  public enum Result {
    case measurement(HKElectrocardiogram.VoltageMeasurement)
    case error(Error)
    case done
  }
  convenience public init(_ ecg: HKElectrocardiogram, dataHandler: @escaping (HKElectrocardiogramQuery, HKElectrocardiogramQuery.Result) -> Void)
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
public struct HKSamplePredicate<Sample> : Equatable, Hashable where Sample : HealthKit.HKSample {
  public let sampleType: HKSampleType
  public let nsPredicate: NSPredicate?
  public static func audiogram(_ predicate: NSPredicate? = nil) -> HKSamplePredicate<HKAudiogramSample>
  public static func categorySample(type categoryType: HKCategoryType, predicate: NSPredicate? = nil) -> HKSamplePredicate<HKCategorySample>
  @available(watchOS, unavailable)
  public static func clinicalRecord(type clinicalType: HKClinicalType, predicate: NSPredicate? = nil) -> HKSamplePredicate<HKClinicalRecord>
  public static func correlation(type correlationType: HKCorrelationType, predicate: NSPredicate? = nil) -> HKSamplePredicate<HKCorrelation>
  public static func electrocardiogram(_ predicate: NSPredicate? = nil) -> HKSamplePredicate<HKElectrocardiogram>
  public static func heartbeatSeries(_ predicate: NSPredicate? = nil) -> HKSamplePredicate<HKHeartbeatSeriesSample>
  public static func quantitySample(type quantityType: HKQuantityType, predicate: NSPredicate? = nil) -> HKSamplePredicate<HKQuantitySample>
  public static func sample(type sampleType: HKSampleType, predicate: NSPredicate? = nil) -> HKSamplePredicate<HKSample>
  public static func workout(_ predicate: NSPredicate? = nil) -> HKSamplePredicate<HKWorkout>
  public static func workoutRoute(_ predicate: NSPredicate? = nil) -> HKSamplePredicate<HKWorkoutRoute>
  public static func == (a: HealthKit.HKSamplePredicate<Sample>, b: HealthKit.HKSamplePredicate<Sample>) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HKSamplePredicate {
  public static func visionPrescription(_ predicate: NSPredicate? = nil) -> HKSamplePredicate<HKVisionPrescription>
}
@available(iOS 18.0, watchOS 11.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
extension HKAppleSleepingBreathingDisturbancesClassification {
  public init?(classifying appleSleepingBreathingDisturbances: HKQuantity)
}
@available(iOS 18.0, watchOS 11.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
extension HKAppleSleepingBreathingDisturbancesClassification : CaseIterable {
  public static var allCases: [HKAppleSleepingBreathingDisturbancesClassification] {
    get
  }
  @available(iOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias AllCases = [HealthKit.HKAppleSleepingBreathingDisturbancesClassification]
}
@available(iOS 15.0, watchOS 8.0, macCatalyst 15.0, macOS 13.0, *)
extension HKAppleWalkingSteadinessClassification {
  public init(for appleWalkingSteadiness: HKQuantity) throws
  public var minimum: HKQuantity {
    get
  }
  public var maximum: HKQuantity {
    get
  }
}
@available(iOS 15.0, watchOS 8.0, macCatalyst 15.0, macOS 13.0, *)
extension HKAppleWalkingSteadinessClassification : CaseIterable {
  public static var allCases: [HKAppleWalkingSteadinessClassification] {
    get
  }
  @available(iOS 15.0, watchOS 8.0, macOS 13.0, macCatalyst 15.0, *)
  public typealias AllCases = [HealthKit.HKAppleWalkingSteadinessClassification]
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
public struct HKQuantitySeriesSampleQueryDescriptor {
  public var predicate: HKSamplePredicate<HKQuantitySample>
  public struct Options : OptionSet {
    public static let includeSample: HealthKit.HKQuantitySeriesSampleQueryDescriptor.Options
    public static let orderByQuantitySampleStartDate: HealthKit.HKQuantitySeriesSampleQueryDescriptor.Options
    public let rawValue: Int
    public init(rawValue: Int)
    @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
    public typealias ArrayLiteralElement = HealthKit.HKQuantitySeriesSampleQueryDescriptor.Options
    @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
    public typealias Element = HealthKit.HKQuantitySeriesSampleQueryDescriptor.Options
    @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
    public typealias RawValue = Swift.Int
  }
  public var options: Options
  public init(predicate: HKSamplePredicate<HKQuantitySample>, options: Options = [])
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
extension HKQuantitySeriesSampleQueryDescriptor : HKAsyncSequenceQuery {
  public struct Result : Equatable, Hashable {
    public let quantity: HKQuantity
    public let dateInterval: DateInterval
    public let sample: HKQuantitySample?
    public static func == (a: HealthKit.HKQuantitySeriesSampleQueryDescriptor.Result, b: HealthKit.HKQuantitySeriesSampleQueryDescriptor.Result) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Results : AsyncSequence {
    public typealias Element = Result
    public struct Iterator : AsyncIteratorProtocol {
      @usableFromInline
      internal var resultIterator: Array<Result>.Iterator?
      @inlinable public mutating func next() async throws -> Element? {
                 
                 
                guard let next = resultIterator?.next() else {
                    resultIterator = try await nextResultIterator()
                    return resultIterator?.next()
                }
                return next
            }
      @usableFromInline
      internal mutating func nextResultIterator() async throws -> Array<Result>.Iterator?
      @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
      public typealias Element = HealthKit.HKQuantitySeriesSampleQueryDescriptor.Results.Element
      @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 15.4, *)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
    }
    public func makeAsyncIterator() -> Iterator
    @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
    public typealias AsyncIterator = HealthKit.HKQuantitySeriesSampleQueryDescriptor.Results.Iterator
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 15.4, *)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
  }
  public func results(for healthStore: HKHealthStore) -> Results
  @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
  public typealias Sequence = HealthKit.HKQuantitySeriesSampleQueryDescriptor.Results
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
public protocol HKCategoryValuePredicateProviding : Swift.Hashable, Swift.RawRepresentable {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HKCategoryValuePredicateProviding where Self.RawValue == Swift.Int {
  public static func predicateForSamples(_ operatorType: NSComparisonPredicate.Operator, value: Self) -> NSPredicate
  public static func predicateForSamples(equalTo values: Set<Self>) -> NSPredicate
}
@_hasMissingDesignatedInitializers @available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
public class HKAttachmentDataReader {
  public var attachment: HKAttachment {
    get
  }
  public var progress: Progress {
    get
  }
  public var data: Data {
    get async throws
  }
  public var bytes: HKAttachment.AsyncBytes {
    get
  }
  @objc deinit
}
extension HKCategoryType {
  @available(iOS 15.0, watchOS 8.0, macCatalyst 15.0, macOS 13.0, *)
  convenience public init(_ identifier: HKCategoryTypeIdentifier)
}
extension HKCharacteristicType {
  @available(iOS 15.0, watchOS 8.0, macCatalyst 15.0, macOS 13.0, *)
  convenience public init(_ identifier: HKCharacteristicTypeIdentifier)
}
@available(iOS 15.0, watchOS 8.0, macCatalyst 15.0, macOS 13.0, *)
extension HKClinicalType {
  @available(iOS 15.0, watchOS 8.0, macCatalyst 15.0, macOS 13.0, *)
  convenience public init(_ identifier: HKClinicalTypeIdentifier)
}
extension HKCorrelationType {
  @available(iOS 15.0, watchOS 8.0, macCatalyst 15.0, macOS 13.0, *)
  convenience public init(_ identifier: HKCorrelationTypeIdentifier)
}
extension HKDocumentType {
  @available(iOS 15.0, watchOS 8.0, macCatalyst 15.0, macOS 13.0, *)
  convenience public init(_ identifier: HKDocumentTypeIdentifier)
}
extension HKQuantityType {
  @available(iOS 15.0, watchOS 8.0, macCatalyst 15.0, macOS 13.0, *)
  convenience public init(_ identifier: HKQuantityTypeIdentifier)
}
extension HKScoredAssessmentType {
  @available(iOS 18.0, watchOS 11.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
  convenience public init(_ identifier: HKScoredAssessmentTypeIdentifier)
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
@usableFromInline
@frozen internal struct _AsyncBytesBuffer {
  internal var storage: AnyObject?
  @usableFromInline
  internal var nextPointer: UnsafeRawPointer
  @usableFromInline
  internal var endPointer: UnsafeRawPointer
  internal var totalBytesRead: Swift.Int = 0
  @usableFromInline
  internal init(capacity: Int, readFunction: @escaping (UnsafeMutableRawBufferPointer, Int) async throws -> Int)
  @usableFromInline
  @inline(never) internal mutating func reloadBufferAndNext() async throws -> UInt8?
  @inlinable @inline(__always) internal mutating func next() async throws -> UInt8? {
        if _fastPath(nextPointer != endPointer) {
            let byte = nextPointer.load(fromByteOffset: 0, as: UInt8.self)
            nextPointer += 1
            return byte
        }
        return try await reloadBufferAndNext()
    }
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
public struct BufferedAsyncByteIterator : AsyncIteratorProtocol {
  public typealias Element = UInt8
  @usableFromInline
  internal var buffer: _AsyncBytesBuffer
  @inlinable @inline(__always) public mutating func next() async throws -> UInt8? {
        return try await buffer.next()
    }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 16.0, *)
  @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
public struct HKSourceQueryDescriptor<Sample> where Sample : HealthKit.HKSample {
  public var predicate: HKSamplePredicate<Sample>
  public init(predicate: HKSamplePredicate<Sample>)
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
extension HKSourceQueryDescriptor : HKAsyncQuery {
  public func result(for healthStore: HKHealthStore) async throws -> [HKSource]
  @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
  public typealias Output = [HealthKit.HKSource]
}
@available(iOS 18.0, watchOS 11.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
extension HKSamplePredicate {
  public static func gad7Assessment(_ predicate: NSPredicate? = nil) -> HKSamplePredicate<HKGAD7Assessment>
}
@available(iOS 18.0, watchOS 11.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
extension HKGAD7Assessment {
  convenience public init(date: Date, answers: [HKGAD7Assessment.Answer], metadata: [String : Any]? = [:])
  public var answers: [HKGAD7Assessment.Answer] {
    get
  }
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HKCategoryValue : HKCategoryValuePredicateProviding {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HKCategoryValueAppetiteChanges : HKCategoryValuePredicateProviding {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HKCategoryValueAppleStandHour : HKCategoryValuePredicateProviding {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HKCategoryValueAppleWalkingSteadinessEvent : HKCategoryValuePredicateProviding {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HKCategoryValueCervicalMucusQuality : HKCategoryValuePredicateProviding {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HKCategoryValueContraceptive : HKCategoryValuePredicateProviding {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HKCategoryValueEnvironmentalAudioExposureEvent : HKCategoryValuePredicateProviding {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HKCategoryValueHeadphoneAudioExposureEvent : HKCategoryValuePredicateProviding {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HKCategoryValueLowCardioFitnessEvent : HKCategoryValuePredicateProviding {
}
@available(iOS, introduced: 16.0, deprecated: 18.0, renamed: "HKCategoryValueVaginalBleeding")
@available(watchOS, introduced: 9.0, deprecated: 11.0, renamed: "HKCategoryValueVaginalBleeding")
@available(macCatalyst, introduced: 16.0, deprecated: 18.0, renamed: "HKCategoryValueVaginalBleeding")
@available(macOS, introduced: 13.0, deprecated: 15.0, renamed: "HKCategoryValueVaginalBleeding")
@available(visionOS, introduced: 1.0, deprecated: 2.0, renamed: "HKCategoryValueVaginalBleeding")
extension HKCategoryValueMenstrualFlow : HKCategoryValuePredicateProviding {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HKCategoryValueOvulationTestResult : HKCategoryValuePredicateProviding {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HKCategoryValuePregnancyTestResult : HKCategoryValuePredicateProviding {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HKCategoryValuePresence : HKCategoryValuePredicateProviding {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HKCategoryValueProgesteroneTestResult : HKCategoryValuePredicateProviding {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HKCategoryValueSeverity : HKCategoryValuePredicateProviding {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HKCategoryValueSleepAnalysis : HKCategoryValuePredicateProviding {
}
@available(iOS 18.0, watchOS 11.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
extension HKCategoryValueVaginalBleeding : HKCategoryValuePredicateProviding {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HKCategoryValueSleepAnalysis {
  public static var allAsleepValues: Set<HKCategoryValueSleepAnalysis> {
    get
  }
}
@available(iOS 18.0, watchOS 11.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
extension HKSamplePredicate {
  public static func phq9Assessment(_ predicate: NSPredicate? = nil) -> HKSamplePredicate<HKPHQ9Assessment>
}
@available(iOS 18.0, watchOS 11.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
extension HKPHQ9Assessment {
  convenience public init(date: Date, answers: [HKPHQ9Assessment.Answer], metadata: [String : Any]? = [:])
  public var answers: [HKPHQ9Assessment.Answer] {
    get
  }
}
