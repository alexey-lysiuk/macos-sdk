// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.5 clang-1700.0.13.3)
// swift-module-flags: -target x86_64-apple-ios18.4-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 2960.0.57 -module-name CoreMotion
// swift-module-flags-ignorable:  -interface-compiler-version 6.1
@_exported import CoreMotion
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
extension CoreMotion.CMOdometerData {
  @available(iOS 15.4, watchOS 8.4, *)
  public var slope: Swift.Double? {
    get
  }
  @available(iOS 15.4, watchOS 8.4, *)
  public var maxAbsSlope: Swift.Double? {
    get
  }
}
@available(watchOS 10.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension CoreMotion.CMBatchedSensorManager {
  public struct AccelerometerUpdates : _Concurrency.AsyncSequence {
    public typealias Element = [CoreMotion.CMAccelerometerData]
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      public mutating func next() async throws -> CoreMotion.CMBatchedSensorManager.AccelerometerUpdates.Element?
      @available(watchOS 10.0, *)
      @available(iOS, unavailable)
      @available(tvOS, unavailable)
      @available(macOS, unavailable)
      public typealias Element = CoreMotion.CMBatchedSensorManager.AccelerometerUpdates.Element
      @available(watchOS 11.0, visionOS 2.0, *)
      @available(iOS, unavailable, introduced: 18.0)
      @available(tvOS, unavailable, introduced: 18.0)
      @available(macOS, unavailable, introduced: 15.0)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
    }
    public func makeAsyncIterator() -> CoreMotion.CMBatchedSensorManager.AccelerometerUpdates.Iterator
    @available(watchOS 10.0, *)
    @available(iOS, unavailable)
    @available(tvOS, unavailable)
    @available(macOS, unavailable)
    public typealias AsyncIterator = CoreMotion.CMBatchedSensorManager.AccelerometerUpdates.Iterator
    @available(watchOS 11.0, visionOS 2.0, *)
    @available(iOS, unavailable, introduced: 18.0)
    @available(tvOS, unavailable, introduced: 18.0)
    @available(macOS, unavailable, introduced: 15.0)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
  }
  public func accelerometerUpdates() -> CoreMotion.CMBatchedSensorManager.AccelerometerUpdates
  public struct DeviceMotionUpdates : _Concurrency.AsyncSequence {
    public typealias Element = [CoreMotion.CMDeviceMotion]
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      public mutating func next() async throws -> CoreMotion.CMBatchedSensorManager.DeviceMotionUpdates.Element?
      @available(watchOS 10.0, *)
      @available(iOS, unavailable)
      @available(tvOS, unavailable)
      @available(macOS, unavailable)
      public typealias Element = CoreMotion.CMBatchedSensorManager.DeviceMotionUpdates.Element
      @available(watchOS 11.0, visionOS 2.0, *)
      @available(iOS, unavailable, introduced: 18.0)
      @available(tvOS, unavailable, introduced: 18.0)
      @available(macOS, unavailable, introduced: 15.0)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
    }
    public func makeAsyncIterator() -> CoreMotion.CMBatchedSensorManager.DeviceMotionUpdates.Iterator
    @available(watchOS 10.0, *)
    @available(iOS, unavailable)
    @available(tvOS, unavailable)
    @available(macOS, unavailable)
    public typealias AsyncIterator = CoreMotion.CMBatchedSensorManager.DeviceMotionUpdates.Iterator
    @available(watchOS 11.0, visionOS 2.0, *)
    @available(iOS, unavailable, introduced: 18.0)
    @available(tvOS, unavailable, introduced: 18.0)
    @available(macOS, unavailable, introduced: 15.0)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
  }
  public func deviceMotionUpdates() -> CoreMotion.CMBatchedSensorManager.DeviceMotionUpdates
}
