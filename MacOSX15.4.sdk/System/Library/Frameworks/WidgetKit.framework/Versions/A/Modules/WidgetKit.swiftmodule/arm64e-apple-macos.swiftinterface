// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.5 clang-1700.0.13.3)
// swift-module-flags: -target arm64e-apple-macos15.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-upcoming-feature InternalImportsByDefault -enable-bare-slash-regex -user-module-version 537.5.41 -module-name WidgetKit -package-name com.apple.chrono.internal
// swift-module-flags-ignorable:  -interface-compiler-version 6.1
public import AppIntents
@_exported public import DeveloperToolsSupport
public import Intents
public import Swift
public import SwiftUI
@_exported public import WidgetKit
public import _AppIntents_SwiftUI
public import _Concurrency
public import _StringProcessing
public import _SwiftConcurrencyShims
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
public struct TimelineEntryRelevance : Swift.Codable, Swift.Hashable {
  public var score: Swift.Float
  public var duration: Foundation.TimeInterval
  public init(score: Swift.Float, duration: Foundation.TimeInterval = 0.0)
  public static func == (a: WidgetKit.TimelineEntryRelevance, b: WidgetKit.TimelineEntryRelevance) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
public protocol TimelineEntry {
  var date: Foundation.Date { get }
  var relevance: WidgetKit.TimelineEntryRelevance? { get }
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension WidgetKit.TimelineEntry {
  public var relevance: WidgetKit.TimelineEntryRelevance? {
    get
  }
}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
@available(tvOS, unavailable)
public struct WidgetRelevance<Configuration> {
  public init(_ attributes: [WidgetKit.WidgetRelevanceAttribute<Configuration>])
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct AppIntentConfiguration<Intent, Content> : SwiftUI.WidgetConfiguration where Intent : AppIntents.WidgetConfigurationIntent, Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.WidgetConfiguration {
    get
  }
  @available(iOS 17.0, watchOS 10.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit22AppIntentConfigurationV4bodyQrvp", 0) __<Intent, Content>
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
@available(tvOS, unavailable)
public struct AppIntentRecommendation<Intent> where Intent : AppIntents.WidgetConfigurationIntent {
  public init(intent: Intent, description: SwiftUICore.Text)
  public init(intent: Intent, description: SwiftUICore.LocalizedStringKey)
  @_disfavoredOverload public init(intent: Intent, description: some StringProtocol)
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
@available(tvOS, unavailable)
extension WidgetKit.AppIntentConfiguration {
  @_Concurrency.MainActor @preconcurrency public init<Provider>(kind: Swift.String, intent: Intent.Type = Intent.self, provider: Provider, @SwiftUICore.ViewBuilder content: @escaping (Provider.Entry) -> Content) where Intent == Provider.Intent, Provider : WidgetKit.AppIntentTimelineProvider
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
@preconcurrency public struct WidgetInfo : Swift.Sendable {
  public let configuration: Intents.INIntent?
  @available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
  @available(tvOS, unavailable)
  public func widgetConfigurationIntent<Intent>(of intentType: Intent.Type = Intent.self) -> Intent? where Intent : AppIntents.WidgetConfigurationIntent
  public let family: WidgetKit.WidgetFamily
  public let kind: Swift.String
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension WidgetKit.WidgetInfo : Swift.Identifiable, Swift.Hashable, Swift.Equatable {
  public var id: WidgetKit.WidgetInfo {
    get
  }
  public static func == (a: WidgetKit.WidgetInfo, b: WidgetKit.WidgetInfo) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @available(iOS 14.0, watchOS 9.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  public typealias ID = WidgetKit.WidgetInfo
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension WidgetKit.WidgetInfo : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct StaticConfiguration<Content> : SwiftUI.WidgetConfiguration where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.WidgetConfiguration {
    get
  }
  @available(iOS 14.0, watchOS 9.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit19StaticConfigurationV4bodyQrvp", 0) __<Content>
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension WidgetKit.StaticConfiguration {
  @_Concurrency.MainActor @preconcurrency public init<Provider>(kind: Swift.String, provider: Provider, @SwiftUICore.ViewBuilder content: @escaping (Provider.Entry) -> Content) where Provider : WidgetKit.TimelineProvider
}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
@available(tvOS, unavailable)
public struct WidgetRelevanceGroup {
}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
@available(tvOS, unavailable)
extension WidgetKit.WidgetRelevanceGroup {
  public static func named(_ name: Swift.String) -> WidgetKit.WidgetRelevanceGroup
  public static let ungrouped: WidgetKit.WidgetRelevanceGroup
  public static let automatic: WidgetKit.WidgetRelevanceGroup
}
@available(iOS 18.0, watchOS 11.0, macOS 15.0, *)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct WidgetAccentedRenderingMode : Swift.Hashable {
  public static let accented: WidgetKit.WidgetAccentedRenderingMode
  public static let desaturated: WidgetKit.WidgetAccentedRenderingMode
  public static let accentedDesaturated: WidgetKit.WidgetAccentedRenderingMode
  public static let fullColor: WidgetKit.WidgetAccentedRenderingMode
  public static func == (a: WidgetKit.WidgetAccentedRenderingMode, b: WidgetKit.WidgetAccentedRenderingMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 18.0, watchOS 11.0, macOS 15.0, *)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.Image {
  public func widgetAccentedRenderingMode(_ renderingMode: WidgetKit.WidgetAccentedRenderingMode?) -> some SwiftUICore.View
  
}
@_hasMissingDesignatedInitializers @available(iOS 18.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public class ControlCenter {
  public static let shared: WidgetKit.ControlCenter
  public func currentControls() async throws -> [WidgetKit.ControlInfo]
  public func reloadControls(ofKind kind: Swift.String)
  public func reloadAllControls()
  @objc deinit
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct ControlInfo {
  public func configurationIntent<Intent>(of intentType: Intent.Type = Intent.self) -> Intent? where Intent : AppIntents.ControlConfigurationIntent
  public let kind: Swift.String
  public var pushInfo: WidgetKit.ControlPushInfo?
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension WidgetKit.ControlInfo : Swift.Identifiable, Swift.Hashable, Swift.Equatable {
  public var id: Swift.String {
    get
  }
  public static func == (lhs: WidgetKit.ControlInfo, rhs: WidgetKit.ControlInfo) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @available(iOS 18.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @available(macOS, unavailable)
  public typealias ID = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var widgetFamily: WidgetKit.WidgetFamily {
    get
  }
}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
@available(tvOS, unavailable)
public struct WidgetRelevanceAttribute<Configuration> {
}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
@available(tvOS, unavailable)
extension WidgetKit.WidgetRelevanceAttribute where Configuration == () {
  public init(context: AppIntents.RelevantContext)
  public init(group: WidgetKit.WidgetRelevanceGroup)
}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
@available(tvOS, unavailable)
extension WidgetKit.WidgetRelevanceAttribute where Configuration : AppIntents.WidgetConfigurationIntent {
  public init(configuration: Configuration, context: AppIntents.RelevantContext)
  public init(configuration: Configuration, group: WidgetKit.WidgetRelevanceGroup)
}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
@available(tvOS, unavailable)
extension WidgetKit.WidgetRelevanceAttribute where Configuration : Intents.INIntent {
  public init(configuration: Configuration, context: AppIntents.RelevantContext)
  public init(configuration: Configuration, group: WidgetKit.WidgetRelevanceGroup)
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.ControlWidgetTemplate {
  @_Concurrency.MainActor @preconcurrency public func tint(_ tint: SwiftUICore.Color?) -> some SwiftUI.ControlWidgetTemplate
  
  @_Concurrency.MainActor @preconcurrency public func privacySensitive(_ sensitive: Swift.Bool = true) -> some SwiftUI.ControlWidgetTemplate
  
  @available(iOS 18.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func disabled(_ disabled: Swift.Bool) -> some SwiftUI.ControlWidgetTemplate
  
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public protocol AppIntentControlValueProvider {
  associatedtype Value
  associatedtype Configuration : AppIntents.ControlConfigurationIntent
  func previewValue(configuration: Self.Configuration) -> Self.Value
  func currentValue(configuration: Self.Configuration) async throws -> Self.Value
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct AppIntentControlConfiguration<Configuration, Content> : SwiftUI.ControlWidgetConfiguration where Configuration : AppIntents.ControlConfigurationIntent, Content : SwiftUI.ControlWidgetTemplate {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.ControlWidgetConfiguration {
    get
  }
  @available(iOS 18.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit29AppIntentControlConfigurationV4bodyQrvp", 0) __<Configuration, Content>
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension WidgetKit.AppIntentControlConfiguration {
  @_Concurrency.MainActor @preconcurrency public init<Provider>(kind: Swift.String, provider: Provider, @SwiftUI.ControlWidgetTemplateBuilder content: @escaping (Provider.Value) -> Content) where Configuration == Provider.Configuration, Provider : WidgetKit.AppIntentControlValueProvider
  @_Concurrency.MainActor @preconcurrency public init(kind: Swift.String, intent: Configuration.Type = Configuration.self, @SwiftUI.ControlWidgetTemplateBuilder content: @escaping (Configuration) -> Content)
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
public struct WidgetPreviewContext : SwiftUI.PreviewContext {
  public subscript<Key>(key: Key.Type) -> Key.Value where Key : SwiftUI.PreviewContextKey {
    get
  }
  public init(family: WidgetKit.WidgetFamily)
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func controlWidgetStatus(_ status: SwiftUICore.Text) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func controlWidgetStatus(_ statusKey: SwiftUICore.LocalizedStringKey) -> some SwiftUICore.View
  
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public func controlWidgetStatus<S>(_ status: S) -> some SwiftUICore.View where S : Swift.StringProtocol
  
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func controlWidgetActionHint(_ hint: SwiftUICore.Text) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func controlWidgetActionHint(_ hintKey: SwiftUICore.LocalizedStringKey) -> some SwiftUICore.View
  
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public func controlWidgetActionHint<S>(_ hint: S) -> some SwiftUICore.View where S : Swift.StringProtocol
  
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public protocol ControlPushHandler {
  init()
  func pushTokensDidChange(controls: [WidgetKit.ControlInfo])
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
public protocol TimelineProvider {
  associatedtype Entry : WidgetKit.TimelineEntry
  typealias Context = WidgetKit.TimelineProviderContext
  func placeholder(in context: Self.Context) -> Self.Entry
  @preconcurrency func getSnapshot(in context: Self.Context, completion: @escaping @Sendable (Self.Entry) -> Swift.Void)
  @preconcurrency func getTimeline(in context: Self.Context, completion: @escaping @Sendable (WidgetKit.Timeline<Self.Entry>) -> Swift.Void)
  @available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
  @available(tvOS, unavailable)
  func relevance() async -> WidgetKit.WidgetRelevance<Swift.Void>
}
extension WidgetKit.TimelineProvider {
  @available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
  @available(tvOS, unavailable)
  public func relevance() async -> WidgetKit.WidgetRelevance<Swift.Void>
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
public class WidgetCenter {
  public static let shared: WidgetKit.WidgetCenter
  public struct UserInfoKey {
    public static let kind: Swift.String
    public static let family: Swift.String
    public static let activityID: Swift.String
  }
  @available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
  @available(tvOS, unavailable)
  public func invalidateConfigurationRecommendations()
  @preconcurrency public func getCurrentConfigurations(_ completion: @escaping @Sendable (Swift.Result<[WidgetKit.WidgetInfo], any Swift.Error>) -> Swift.Void)
  @available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
  @available(tvOS, unavailable)
  public func currentConfigurations() async throws -> [WidgetKit.WidgetInfo]
  public func reloadTimelines(ofKind kind: Swift.String)
  public func reloadAllTimelines()
  @objc deinit
}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
@available(tvOS, unavailable)
extension WidgetKit.WidgetCenter {
  public func invalidateRelevance(ofKind kind: Swift.String)
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func widgetURL(_ url: Foundation.URL?) -> some SwiftUICore.View
  
}
@available(iOS 16.0, watchOS 9.0, macOS 13.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct AccessoryWidgetBackground : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, watchOS 9.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit09AccessoryA10BackgroundV4bodyQrvp", 0) __
}
extension SwiftUICore.EnvironmentValues {
  @available(iOS 17.0, watchOS 10.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  public var widgetContentMargins: SwiftUICore.EdgeInsets {
    get
  }
  @available(iOS 17.0, watchOS 10.0, macOS 14.0, tvOS 18.0, *)
  @usableFromInline
  internal struct WidgetContentMarginsKey : SwiftUICore.EnvironmentKey {
    @usableFromInline
    internal static var defaultValue: SwiftUICore.EdgeInsets {
      get
    }
    @available(iOS 17.0, tvOS 18.0, watchOS 10.0, macOS 14.0, *)
    @usableFromInline
    internal typealias Value = SwiftUICore.EdgeInsets
  }
}
@available(iOS 15.0, macOS 12.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.WidgetConfiguration {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public func contentMarginsDisabled() -> some SwiftUI.WidgetConfiguration {
        if #available(iOS 17.0, watchOS 10.0, macOS 14.0, *) {
            return _contentMarginsDisabled()
        } else {
            return self
        }
    }
  
  @available(iOS 17.0, watchOS 10.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func _contentMarginsDisabled() -> some SwiftUI.WidgetConfiguration
  
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
@available(tvOS, unavailable)
extension DeveloperToolsSupport.Preview {
  @_Concurrency.MainActor public init(_ name: Swift.String? = nil, as family: WidgetKit.WidgetFamily, widget: @escaping () -> some Widget, @WidgetKit.PreviewTimelineBuilder timeline: @escaping @_Concurrency.MainActor () async -> [any WidgetKit.TimelineEntry])
  @_Concurrency.MainActor public init(_ name: Swift.String? = nil, as family: WidgetKit.WidgetFamily, widget: @escaping () -> some Widget, timelineProvider: @escaping () -> some TimelineProvider)
  @available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 18.0, *)
  @_Concurrency.MainActor public init<Provider>(_ name: Swift.String? = nil, as family: WidgetKit.WidgetFamily, using intent: Provider.Intent, widget: @escaping () -> some Widget, timelineProvider: @escaping () -> Provider) where Provider : WidgetKit.IntentTimelineProvider
  @_Concurrency.MainActor public init<Provider>(_ name: Swift.String? = nil, as family: WidgetKit.WidgetFamily, using intent: Provider.Intent, widget: @escaping () -> some Widget, timelineProvider: @escaping () -> Provider) where Provider : WidgetKit.AppIntentTimelineProvider
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
@available(tvOS, unavailable)
@freestanding(declaration) public macro Preview<Widget>(_ name: Swift.String? = nil, as family: WidgetKit.WidgetFamily, widget: @escaping () -> Widget, @WidgetKit.PreviewTimelineBuilder timeline: @escaping @_Concurrency.MainActor () async -> [any WidgetKit.TimelineEntry]) = #externalMacro(module: "PreviewsMacros", type: "Common") where Widget : SwiftUI.Widget
@available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
@available(tvOS, unavailable)
@freestanding(declaration) public macro Preview<Widget, Provider>(_ name: Swift.String? = nil, as family: WidgetKit.WidgetFamily, widget: @escaping () -> Widget, timelineProvider: @escaping () -> Provider) = #externalMacro(module: "PreviewsMacros", type: "Common") where Widget : SwiftUI.Widget, Provider : WidgetKit.TimelineProvider
@available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
@available(tvOS, unavailable)
@freestanding(declaration) public macro Preview<Widget, Provider>(_ name: Swift.String? = nil, as family: WidgetKit.WidgetFamily, using intent: Provider.Intent, widget: @escaping () -> Widget, timelineProvider: @escaping () -> Provider) = #externalMacro(module: "PreviewsMacros", type: "Common") where Widget : SwiftUI.Widget, Provider : WidgetKit.IntentTimelineProvider
@available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
@available(tvOS, unavailable)
@freestanding(declaration) public macro Preview<Widget, Provider>(_ name: Swift.String? = nil, as family: WidgetKit.WidgetFamily, using intent: Provider.Intent, widget: @escaping () -> Widget, timelineProvider: @escaping () -> Provider) = #externalMacro(module: "PreviewsMacros", type: "Common") where Widget : SwiftUI.Widget, Provider : WidgetKit.AppIntentTimelineProvider
@available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
@available(tvOS, unavailable)
@_functionBuilder public struct PreviewTimelineBuilder {
  @available(*, unavailable, message: "Please provide at lease one timeline entry to preview your widget.")
  @_alwaysEmitIntoClient public static func buildBlock() -> [any WidgetKit.TimelineEntry] {
        fatalError("Unreachable")
    }
  public static func buildExpression(_ entry: some TimelineEntry) -> [any WidgetKit.TimelineEntry]
  public static func buildPartialBlock(first: [any WidgetKit.TimelineEntry]) -> [any WidgetKit.TimelineEntry]
  public static func buildPartialBlock(accumulated: [any WidgetKit.TimelineEntry], next: [any WidgetKit.TimelineEntry]) -> [any WidgetKit.TimelineEntry]
  public static func buildArray(_ components: [[any WidgetKit.TimelineEntry]]) -> [any WidgetKit.TimelineEntry]
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.Widget {
  @_Concurrency.MainActor @preconcurrency public static func main()
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.ControlWidget {
  @_Concurrency.MainActor @preconcurrency public static func main()
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.WidgetBundle {
  @_Concurrency.MainActor @preconcurrency public static func main()
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
@preconcurrency public enum WidgetFamily : Swift.Int, Swift.RawRepresentable, Swift.CustomDebugStringConvertible, Swift.CustomStringConvertible, Swift.Sendable {
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  case systemSmall
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  case systemMedium
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  case systemLarge
  @available(iOS 15.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  case systemExtraLarge
  @available(watchOS 9.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  case accessoryCorner
  @available(iOS 16.0, watchOS 9.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  case accessoryCircular
  @available(iOS 16.0, watchOS 9.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  case accessoryRectangular
  @available(iOS 16.0, watchOS 9.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  case accessoryInline
  public var debugDescription: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  @available(iOS 14.0, watchOS 9.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, watchOS 9.0, macOS 12.0, *)
@available(tvOS, unavailable)
extension SwiftUI.WidgetConfiguration {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public func containerBackgroundRemovable(_ isRemovable: Swift.Bool = true) -> some SwiftUI.WidgetConfiguration {
        if #available(iOS 17.0, watchOS 10.0, macOS 14.0, *) {
            return _containerBackgroundRemovable(isRemovable)
        } else {
            return self
        }
    }
  
}
@available(iOS 17.0, watchOS 10.0, macOS 14.0, *)
@available(tvOS, unavailable)
extension SwiftUI.WidgetConfiguration {
  @_Concurrency.MainActor @preconcurrency public func _containerBackgroundRemovable(_ isRemovable: Swift.Bool) -> some SwiftUI.WidgetConfiguration
  
}
extension SwiftUI.ContainerBackgroundPlacement {
  @available(iOS 17.0, watchOS 10.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  public static let widget: SwiftUI.ContainerBackgroundPlacement
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
@available(tvOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  @usableFromInline
  internal struct ShowsWidgetBackgroundKey : SwiftUICore.EnvironmentKey {
    @usableFromInline
    internal static var defaultValue: Swift.Bool
    @available(iOS 17.0, watchOS 10.0, macOS 14.0, *)
    @usableFromInline
    @available(tvOS, unavailable, introduced: 13.0)
    internal typealias Value = Swift.Bool
  }
}
extension SwiftUICore.EnvironmentValues {
  @available(iOS 15.0, macOS 12.0, watchOS 8.0, *)
  @available(tvOS, unavailable)
  @_alwaysEmitIntoClient public var showsWidgetContainerBackground: Swift.Bool {
    get {
            if #available(iOS 17, watchOS 10.0, macOS 14.0, *) {
                return self[ShowsWidgetBackgroundKey.self]
            } else {
                return true
            }
        }
  }
}
@available(iOS 16.0, watchOS 9.0, macOS 13.0, *)
@available(tvOS, unavailable)
public struct WidgetRenderingMode : Swift.Equatable, Swift.CustomStringConvertible {
  public static let fullColor: WidgetKit.WidgetRenderingMode
  public static let accented: WidgetKit.WidgetRenderingMode
  public static let vibrant: WidgetKit.WidgetRenderingMode
  public var description: Swift.String {
    get
  }
  public static func == (a: WidgetKit.WidgetRenderingMode, b: WidgetKit.WidgetRenderingMode) -> Swift.Bool
}
@available(iOS 16.0, watchOS 9.0, macOS 13.0, *)
@available(tvOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var widgetRenderingMode: WidgetKit.WidgetRenderingMode {
    get
    set
  }
}
@available(iOS 16.0, watchOS 9.0, macOS 13.0, *)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func widgetAccentable(_ accentable: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
public protocol IntentTimelineProvider {
  associatedtype Entry : WidgetKit.TimelineEntry
  associatedtype Intent : Intents.INIntent
  typealias Context = WidgetKit.TimelineProviderContext
  @available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
  @available(tvOS, unavailable)
  func recommendations() -> [WidgetKit.IntentRecommendation<Self.Intent>]
  func placeholder(in context: Self.Context) -> Self.Entry
  @preconcurrency func getSnapshot(for configuration: Self.Intent, in context: Self.Context, completion: @escaping @Sendable (Self.Entry) -> Swift.Void)
  @preconcurrency func getTimeline(for configuration: Self.Intent, in context: Self.Context, completion: @escaping @Sendable (WidgetKit.Timeline<Self.Entry>) -> Swift.Void)
  @available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
  @available(tvOS, unavailable)
  func relevance() async -> WidgetKit.WidgetRelevance<Self.Intent>
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension WidgetKit.IntentTimelineProvider {
  public func recommendations() -> [WidgetKit.IntentRecommendation<Self.Intent>]
}
extension WidgetKit.IntentTimelineProvider {
  @available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
  @available(tvOS, unavailable)
  public func relevance() async -> WidgetKit.WidgetRelevance<Self.Intent>
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public protocol ControlValueProvider {
  associatedtype Value
  var previewValue: Self.Value { get }
  func currentValue() async throws -> Self.Value
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct StaticControlConfiguration<Content> : SwiftUI.ControlWidgetConfiguration where Content : SwiftUI.ControlWidgetTemplate {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.ControlWidgetConfiguration {
    get
  }
  @available(iOS 18.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit26StaticControlConfigurationV4bodyQrvp", 0) __<Content>
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension WidgetKit.StaticControlConfiguration {
  @_Concurrency.MainActor @preconcurrency public init(kind: Swift.String, @SwiftUI.ControlWidgetTemplateBuilder content: @escaping () -> Content)
  @_Concurrency.MainActor @preconcurrency public init<Provider>(kind: Swift.String, provider: Provider, @SwiftUI.ControlWidgetTemplateBuilder content: @escaping (Provider.Value) -> Content) where Provider : WidgetKit.ControlValueProvider
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct ControlPushInfo {
  public let token: Foundation.Data
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ControlWidgetToggle<Label, ValueLabel, Action> : SwiftUI.ControlWidgetTemplate where Label : SwiftUICore.View, ValueLabel : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.ControlWidgetTemplate {
    get
  }
  @_Concurrency.MainActor @preconcurrency public static var _controlType: any Any.Type {
    get
  }
  @available(iOS 18.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit07ControlA6ToggleV4bodyQrvp", 0) __<Label, ValueLabel, Action>
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension WidgetKit.ControlWidgetToggle {
  @_Concurrency.MainActor @preconcurrency public init(isOn: Swift.Bool, action: Action, @SwiftUICore.ViewBuilder label: @escaping () -> Label, @SwiftUICore.ViewBuilder valueLabel: @escaping (Swift.Bool) -> ValueLabel) where Action : AppIntents.SetValueIntent, Action.ValueType == Swift.Bool
  @_Concurrency.MainActor @preconcurrency public init(isOn: Swift.Bool, action: Action, @SwiftUICore.ViewBuilder label: @escaping () -> Label) where ValueLabel == WidgetKit.ControlWidgetToggleDefaultLabel, Action : AppIntents.SetValueIntent, Action.ValueType == Swift.Bool
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ControlWidgetToggleDefaultLabel : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 18.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit07ControlA18ToggleDefaultLabelV4bodyQrvp", 0) __
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension WidgetKit.ControlWidgetToggle where Label == SwiftUICore.Text {
  @_Concurrency.MainActor @preconcurrency public init(_ titleKey: SwiftUICore.LocalizedStringKey, isOn: Swift.Bool, action: Action, @SwiftUICore.ViewBuilder valueLabel: @escaping (Swift.Bool) -> ValueLabel) where Action : AppIntents.SetValueIntent, Action.ValueType == Swift.Bool
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init(_ title: some StringProtocol, isOn: Swift.Bool, action: Action, @SwiftUICore.ViewBuilder valueLabel: @escaping (Swift.Bool) -> ValueLabel) where Action : AppIntents.SetValueIntent, Action.ValueType == Swift.Bool
}
@available(*, unavailable)
extension WidgetKit.ControlWidgetToggle : Swift.Sendable {
}
@available(*, unavailable)
extension WidgetKit.ControlWidgetToggleDefaultLabel : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct IntentConfiguration<Intent, Content> : SwiftUI.WidgetConfiguration where Intent : Intents.INIntent, Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.WidgetConfiguration {
    get
  }
  @available(iOS 14.0, watchOS 9.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit19IntentConfigurationV4bodyQrvp", 0) __<Intent, Content>
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
public struct IntentRecommendation<T> where T : Intents.INIntent {
  public init(intent: T, description: SwiftUICore.Text)
  public init(intent: T, description: SwiftUICore.LocalizedStringKey)
  @_disfavoredOverload public init<S>(intent: T, description: S) where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension WidgetKit.IntentConfiguration {
  @_Concurrency.MainActor @preconcurrency public init<Provider>(kind: Swift.String, intent: Intent.Type, provider: Provider, @SwiftUICore.ViewBuilder content: @escaping (Provider.Entry) -> Content) where Intent == Provider.Intent, Provider : WidgetKit.IntentTimelineProvider
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.ControlWidgetConfiguration {
  @_Concurrency.MainActor @preconcurrency public func displayName(_ displayName: Foundation.LocalizedStringResource) -> some SwiftUI.ControlWidgetConfiguration
  
  @_Concurrency.MainActor @preconcurrency public func description(_ description: Foundation.LocalizedStringResource) -> some SwiftUI.ControlWidgetConfiguration
  
  @_Concurrency.MainActor @preconcurrency public func promptsForUserConfiguration() -> some SwiftUI.ControlWidgetConfiguration
  
  @_Concurrency.MainActor @preconcurrency public func pushHandler(_ pushHandlerType: any WidgetKit.ControlPushHandler.Type) -> some SwiftUI.ControlWidgetConfiguration
  
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ControlWidgetButton<Label, ActionLabel, Action> : SwiftUI.ControlWidgetTemplate where Label : SwiftUICore.View, ActionLabel : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.ControlWidgetTemplate {
    get
  }
  @_Concurrency.MainActor @preconcurrency public static var _controlType: any Any.Type {
    get
  }
  @available(iOS 18.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit07ControlA6ButtonV4bodyQrvp", 0) __<Label, ActionLabel, Action>
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension WidgetKit.ControlWidgetButton {
  @_Concurrency.MainActor @preconcurrency public init(action: Action, @SwiftUICore.ViewBuilder label: @escaping () -> Label, @SwiftUICore.ViewBuilder actionLabel: @escaping (Swift.Bool) -> ActionLabel) where Action : AppIntents.AppIntent
  @_Concurrency.MainActor @preconcurrency public init(action: Action, @SwiftUICore.ViewBuilder label: @escaping () -> Label) where ActionLabel == WidgetKit.ControlWidgetButtonDefaultActionLabel, Action : AppIntents.AppIntent
  @_Concurrency.MainActor @preconcurrency public init(action: Action, @SwiftUICore.ViewBuilder label: @escaping () -> Label) where ActionLabel == WidgetKit.ControlWidgetButtonDefaultActionLabel, Action : AppIntents.OpenIntent
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension WidgetKit.ControlWidgetButton where Label == SwiftUICore.Text {
  @_Concurrency.MainActor @preconcurrency public init(_ titleKey: SwiftUICore.LocalizedStringKey, action: Action, @SwiftUICore.ViewBuilder actionLabel: @escaping (Swift.Bool) -> ActionLabel) where Action : AppIntents.AppIntent
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init(_ title: some StringProtocol, action: Action, @SwiftUICore.ViewBuilder actionLabel: @escaping (Swift.Bool) -> ActionLabel) where Action : AppIntents.AppIntent
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ControlWidgetButtonDefaultActionLabel : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 18.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit07ControlA24ButtonDefaultActionLabelV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension WidgetKit.ControlWidgetButton : Swift.Sendable {
}
@available(*, unavailable)
extension WidgetKit.ControlWidgetButtonDefaultActionLabel : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
public struct Timeline<EntryType> where EntryType : WidgetKit.TimelineEntry {
  public let entries: [EntryType]
  public let policy: WidgetKit.TimelineReloadPolicy
  public init(entries: [EntryType], policy: WidgetKit.TimelineReloadPolicy)
}
@available(watchOS 11.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct AccessoryWidgetGroup<Label, Content> : SwiftUICore.View where Label : SwiftUICore.View, Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(watchOS 11.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit09AccessoryA5GroupV4bodyQrvp", 0) __<Label, Content>
}
@available(*, unavailable)
extension WidgetKit.AccessoryWidgetGroup : Swift.Sendable {
}
@available(watchOS 11.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension WidgetKit.AccessoryWidgetGroup {
  @_Concurrency.MainActor @preconcurrency public init(@SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder content: () -> Content)
}
@available(watchOS 11.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension WidgetKit.AccessoryWidgetGroup where Label == SwiftUICore.Text {
  @_Concurrency.MainActor @preconcurrency public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init(_ title: some StringProtocol, @SwiftUICore.ViewBuilder content: () -> Content)
}
@available(watchOS 11.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension WidgetKit.AccessoryWidgetGroup where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  @_Concurrency.MainActor @preconcurrency public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init(_ titleKey: some StringProtocol, systemImage: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content)
}
@available(watchOS 11.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension WidgetKit.AccessoryWidgetGroup where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  @_Concurrency.MainActor @preconcurrency public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: DeveloperToolsSupport.ImageResource, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init(_ title: some StringProtocol, image: DeveloperToolsSupport.ImageResource, @SwiftUICore.ViewBuilder content: () -> Content)
}
@available(watchOS 11.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct AccessoryWidgetGroupStyle {
  public static let circular: WidgetKit.AccessoryWidgetGroupStyle
  public static let roundedSquare: WidgetKit.AccessoryWidgetGroupStyle
  public static let automatic: WidgetKit.AccessoryWidgetGroupStyle
}
@available(watchOS 11.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func accessoryWidgetGroupStyle(_ style: WidgetKit.AccessoryWidgetGroupStyle = .automatic) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
@available(tvOS, unavailable)
public protocol AppIntentTimelineProvider {
  associatedtype Entry : WidgetKit.TimelineEntry
  associatedtype Intent : AppIntents.WidgetConfigurationIntent
  typealias Context = WidgetKit.TimelineProviderContext
  func recommendations() -> [WidgetKit.AppIntentRecommendation<Self.Intent>]
  func placeholder(in context: Self.Context) -> Self.Entry
  func snapshot(for configuration: Self.Intent, in context: Self.Context) async -> Self.Entry
  func timeline(for configuration: Self.Intent, in context: Self.Context) async -> WidgetKit.Timeline<Self.Entry>
  @available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
  @available(tvOS, unavailable)
  func relevance() async -> WidgetKit.WidgetRelevance<Self.Intent>
}
extension WidgetKit.AppIntentTimelineProvider {
  @available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
  @available(tvOS, unavailable)
  public func relevance() async -> WidgetKit.WidgetRelevance<Self.Intent>
}
extension WidgetKit.AppIntentTimelineProvider {
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func recommendations() -> [WidgetKit.AppIntentRecommendation<Self.Intent>]
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.WidgetConfiguration {
  @_Concurrency.MainActor @preconcurrency public func configurationDisplayName(_ displayName: SwiftUICore.Text) -> some SwiftUI.WidgetConfiguration
  
  @_Concurrency.MainActor @preconcurrency public func configurationDisplayName(_ displayNameKey: SwiftUICore.LocalizedStringKey) -> some SwiftUI.WidgetConfiguration
  
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public func configurationDisplayName<S>(_ displayName: S) -> some SwiftUI.WidgetConfiguration where S : Swift.StringProtocol
  
  @_Concurrency.MainActor @preconcurrency public func description(_ description: SwiftUICore.Text) -> some SwiftUI.WidgetConfiguration
  
  @_Concurrency.MainActor @preconcurrency public func description(_ descriptionKey: SwiftUICore.LocalizedStringKey) -> some SwiftUI.WidgetConfiguration
  
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public func description<S>(_ description: S) -> some SwiftUI.WidgetConfiguration where S : Swift.StringProtocol
  
  @_Concurrency.MainActor @preconcurrency public func supportedFamilies(_ families: [WidgetKit.WidgetFamily]) -> some SwiftUI.WidgetConfiguration
  
  @_Concurrency.MainActor @preconcurrency public func onBackgroundURLSessionEvents(matching matchingString: Swift.String, _ urlSessionEvent: @escaping (_ identifier: Swift.String, _ completion: @escaping () -> Swift.Void) -> Swift.Void) -> some SwiftUI.WidgetConfiguration
  
  @_Concurrency.MainActor @preconcurrency public func onBackgroundURLSessionEvents(matching matchingBlock: ((_ identifier: Swift.String) -> Swift.Bool)? = nil, _ urlSessionEvent: @escaping (_ identifier: Swift.String, _ completion: @escaping () -> Swift.Void) -> Swift.Void) -> some SwiftUI.WidgetConfiguration
  
  @available(iOS 18.0, macOS 15.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func promptsForUserConfiguration() -> some SwiftUI.WidgetConfiguration
  
}
@available(iOS 17.0, *)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct WidgetLocation : Swift.Sendable, Swift.Hashable {
  public static func == (a: WidgetKit.WidgetLocation, b: WidgetKit.WidgetLocation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, *)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension WidgetKit.WidgetLocation {
  @available(iOS 17.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public static let homeScreen: WidgetKit.WidgetLocation
  @available(iOS 17.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public static let lockScreen: WidgetKit.WidgetLocation
  @available(iOS 17.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public static let standBy: WidgetKit.WidgetLocation
  @available(iOS 17.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public static let iPhoneWidgetsOnMac: WidgetKit.WidgetLocation
}
@available(iOS 17.0, *)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.WidgetConfiguration {
  @_Concurrency.MainActor @preconcurrency public func disfavoredLocations(_ locations: [WidgetKit.WidgetLocation], for families: [WidgetKit.WidgetFamily]) -> some SwiftUI.WidgetConfiguration
  
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
public struct TimelineReloadPolicy : Swift.Equatable {
  public static let atEnd: WidgetKit.TimelineReloadPolicy
  public static let never: WidgetKit.TimelineReloadPolicy
  public static func after(_ date: Foundation.Date) -> WidgetKit.TimelineReloadPolicy
  public static func == (a: WidgetKit.TimelineReloadPolicy, b: WidgetKit.TimelineReloadPolicy) -> Swift.Bool
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
public struct TimelineProviderContext {
  @dynamicMemberLookup public struct EnvironmentVariants {
    public subscript<T>(dynamicMember keyPath: Swift.WritableKeyPath<SwiftUICore.EnvironmentValues, T>) -> [T]? {
      get
    }
    public subscript<T>(keyPath: Swift.WritableKeyPath<SwiftUICore.EnvironmentValues, T>) -> [T]? {
      get
    }
  }
  public let environmentVariants: WidgetKit.TimelineProviderContext.EnvironmentVariants
  public let family: WidgetKit.WidgetFamily
  public let isPreview: Swift.Bool
  public let displaySize: CoreFoundation.CGSize
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
@available(tvOS, unavailable)
extension WidgetKit.AppIntentConfiguration : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension WidgetKit.StaticConfiguration : Swift.Sendable {}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension WidgetKit.AppIntentControlConfiguration : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension WidgetKit.IntentConfiguration : Swift.Sendable {}
@available(iOS 16.0, watchOS 9.0, macOS 13.0, *)
@available(tvOS, unavailable)
extension WidgetKit.AccessoryWidgetBackground : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension WidgetKit.WidgetFamily : Swift.Hashable {}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension WidgetKit.StaticControlConfiguration : Swift.Sendable {}
