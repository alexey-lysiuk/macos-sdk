// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.5 clang-1700.0.13.3)
// swift-module-flags: -target arm64e-apple-macos15.4 -target-variant arm64e-apple-ios18.4-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 502.7.5 -module-name Accessibility
// swift-module-flags-ignorable:  -interface-compiler-version 6.1
@_exported import Accessibility
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(macOS 12.2, iOS 15.2, tvOS 15.2, watchOS 8.2, *)
extension Accessibility.AXBrailleMap {
  public subscript(point: CoreFoundation.CGPoint) -> Swift.Float {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Accessibility.AXNumericDataAxisDescriptor {
  public var range: Swift.ClosedRange<Swift.Double> {
    get
    set(newRange)
  }
  public var gridlinePositions: [Swift.Double] {
    get
    set(newPositions)
  }
  convenience public init(title: Swift.String, range: Swift.ClosedRange<Swift.Double>, gridlinePositions: [Swift.Double], valueDescriptionProvider: @escaping (Swift.Double) -> Swift.String)
  convenience public init(attributedTitle: Foundation.NSAttributedString, range: Swift.ClosedRange<Swift.Double>, gridlinePositions: [Swift.Double], valueDescriptionProvider: @escaping (Swift.Double) -> Swift.String)
}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Accessibility.AXDataPoint {
  public enum Value {
    case number(Swift.Double)
    case category(Swift.String)
  }
  convenience public init(x: Swift.Double, y: Swift.Double? = nil, additionalValues: [Accessibility.AXDataPoint.Value] = [], label: Swift.String? = nil)
  convenience public init(x: Swift.String, y: Swift.Double? = nil, additionalValues: [Accessibility.AXDataPoint.Value] = [], label: Swift.String? = nil)
}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Accessibility.AXChartDescriptor {
  public var xAxis: any Accessibility.AXDataAxisDescriptor {
    get
    set(newAxis)
  }
  public var additionalAxes: [any Accessibility.AXDataAxisDescriptor] {
    get
    set(newAdditionalAxes)
  }
  convenience public init(title: Swift.String? = nil, summary: Swift.String? = nil, xAxis: any Accessibility.AXDataAxisDescriptor, yAxis: Accessibility.AXNumericDataAxisDescriptor? = nil, additionalAxes: [any Accessibility.AXDataAxisDescriptor] = [], series: [Accessibility.AXDataSeriesDescriptor])
  convenience public init(attributedTitle: Foundation.NSAttributedString? = nil, summary: Swift.String? = nil, xAxis: any Accessibility.AXDataAxisDescriptor, yAxis: Accessibility.AXNumericDataAxisDescriptor? = nil, additionalAxes: [any Accessibility.AXDataAxisDescriptor] = [], series: [Accessibility.AXDataSeriesDescriptor])
}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes {
  public var accessibility: Foundation.AttributeScopes.AccessibilityAttributes.Type {
    get
  }
  public struct AccessibilityAttributes : Foundation.AttributeScope {
    public let accessibilityHeadingLevel: Foundation.AttributeScopes.AccessibilityAttributes.HeadingLevelAttribute
    public let accessibilityTextCustom: Foundation.AttributeScopes.AccessibilityAttributes.TextCustomAttribute
    public let accessibilityTextualContext: Foundation.AttributeScopes.AccessibilityAttributes.TextualContextAttribute
    public let accessibilitySpeechIncludesPunctuation: Foundation.AttributeScopes.AccessibilityAttributes.IncludesPunctuationAttribute
    public let accessibilitySpeechAdjustedPitch: Foundation.AttributeScopes.AccessibilityAttributes.AdjustedPitchAttribute
    public let accessibilitySpeechSpellsOutCharacters: Foundation.AttributeScopes.AccessibilityAttributes.SpellOutAttribute
    @available(*, deprecated, renamed: "accessibilitySpeechAnnouncementPriority")
    public let accessibilitySpeechAnnouncementsQueued: Foundation.AttributeScopes.AccessibilityAttributes.QueueAnnouncementAttribute
    public let accessibilitySpeechPhoneticNotation: Foundation.AttributeScopes.AccessibilityAttributes.IPANotationAttribute
    @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
    public let accessibilitySpeechAnnouncementPriority: Foundation.AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias DecodingConfiguration = Foundation.AttributeScopeCodableConfiguration
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias EncodingConfiguration = Foundation.AttributeScopeCodableConfiguration
  }
}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeDynamicLookup {
  public subscript<T>(dynamicMember keyPath: Swift.KeyPath<Foundation.AttributeScopes.AccessibilityAttributes, T>) -> T where T : Foundation.AttributedStringKey {
    get
  }
}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes {
  @frozen public enum HeadingLevelAttribute : Foundation.CodableAttributedStringKey, Foundation.MarkdownDecodableAttributedStringKey, Foundation.ObjectiveCConvertibleAttributedStringKey {
    public typealias Value = Foundation.AttributeScopes.AccessibilityAttributes.HeadingLevelAttribute.HeadingLevel
    public typealias ObjectiveCValue = Foundation.NSNumber
    public static var name: Swift.String {
      get
    }
    public static let markdownName: Swift.String
    public static func decodeMarkdown(from decoder: any Swift.Decoder) throws -> Foundation.AttributeScopes.AccessibilityAttributes.HeadingLevelAttribute.HeadingLevel
    public static func objectiveCValue(for value: Foundation.AttributeScopes.AccessibilityAttributes.HeadingLevelAttribute.HeadingLevel) throws -> Foundation.NSNumber
    public static func value(for object: Foundation.NSNumber) throws -> Foundation.AttributeScopes.AccessibilityAttributes.HeadingLevelAttribute.HeadingLevel
    public enum HeadingLevel : Swift.Int, Swift.Codable, Swift.Sendable {
      case unspecified, h1, h2, h3, h4, h5, h6
      public init?(rawValue: Swift.Int)
      @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
      public typealias RawValue = Swift.Int
      public var rawValue: Swift.Int {
        get
      }
    }
  }
  @frozen public enum TextCustomAttribute : Foundation.CodableAttributedStringKey, Foundation.MarkdownDecodableAttributedStringKey {
    public typealias Value = [Swift.String]
    public static var name: Swift.String {
      get
    }
    public static let markdownName: Swift.String
  }
  @frozen public enum TextualContextAttribute : Foundation.CodableAttributedStringKey, Foundation.MarkdownDecodableAttributedStringKey, Foundation.ObjectiveCConvertibleAttributedStringKey {
    public typealias Value = Foundation.AttributeScopes.AccessibilityAttributes.TextualContextAttribute.TextualContext
    public typealias ObjectiveCValue = Foundation.NSString
    public static var name: Swift.String {
      get
    }
    public static let markdownName: Swift.String
    public static func decodeMarkdown(from decoder: any Swift.Decoder) throws -> Foundation.AttributeScopes.AccessibilityAttributes.TextualContextAttribute.TextualContext
    public static func objectiveCValue(for value: Foundation.AttributeScopes.AccessibilityAttributes.TextualContextAttribute.TextualContext) throws -> Foundation.NSString
    public static func value(for object: Foundation.NSString) throws -> Foundation.AttributeScopes.AccessibilityAttributes.TextualContextAttribute.TextualContext
    public enum TextualContext : Swift.String, Swift.Codable, Swift.Sendable {
      case plain
      case console
      case fileSystem
      case messaging
      case narrative
      case sourceCode
      case spreadsheet
      case wordProcessing
      public init?(rawValue: Swift.String)
      @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
  }
  @frozen public enum IncludesPunctuationAttribute : Foundation.CodableAttributedStringKey, Foundation.MarkdownDecodableAttributedStringKey {
    public typealias Value = Swift.Bool
    public static var name: Swift.String {
      get
    }
    public static let markdownName: Swift.String
  }
  @frozen public enum AdjustedPitchAttribute : Foundation.CodableAttributedStringKey, Foundation.MarkdownDecodableAttributedStringKey, Foundation.ObjectiveCConvertibleAttributedStringKey {
    public typealias Value = Swift.Double
    public typealias ObjectiveCValue = Foundation.NSNumber
    public static var name: Swift.String {
      get
    }
    public static let markdownName: Swift.String
    public static func objectiveCValue(for value: Swift.Double) throws -> Foundation.NSNumber
    public static func value(for object: Foundation.NSNumber) throws -> Swift.Double
  }
  @frozen public enum SpellOutAttribute : Foundation.CodableAttributedStringKey, Foundation.MarkdownDecodableAttributedStringKey {
    public typealias Value = Swift.Bool
    public static var name: Swift.String {
      get
    }
    public static let markdownName: Swift.String
  }
  @available(*, deprecated, renamed: "AnnouncementPriorityAttribute")
  @frozen public enum QueueAnnouncementAttribute : Foundation.CodableAttributedStringKey, Foundation.MarkdownDecodableAttributedStringKey {
    public typealias Value = Swift.Bool
    public static var name: Swift.String {
      get
    }
    public static let markdownName: Swift.String
  }
  @frozen public enum IPANotationAttribute : Foundation.CodableAttributedStringKey, Foundation.MarkdownDecodableAttributedStringKey {
    public typealias Value = Swift.String
    public static var name: Swift.String {
      get
    }
    public static let markdownName: Swift.String
  }
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @frozen public enum AnnouncementPriorityAttribute : Foundation.CodableAttributedStringKey, Foundation.MarkdownDecodableAttributedStringKey, Foundation.ObjectiveCConvertibleAttributedStringKey {
    public typealias Value = Foundation.AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute.AnnouncementPriority
    public typealias ObjectiveCValue = Foundation.NSString
    public static var name: Swift.String {
      get
    }
    public static let markdownName: Swift.String
    public static func objectiveCValue(for value: Foundation.AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute.AnnouncementPriority) throws -> Foundation.NSString
    public static func value(for object: Foundation.NSString) throws -> Foundation.AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute.AnnouncementPriority
    public enum AnnouncementPriority : Swift.String, Swift.Codable, Swift.Sendable {
      case low
      case `default`
      case high
      public init?(rawValue: Swift.String)
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public enum AccessibilityNotification {
  public struct Announcement : Accessibility._AccessibilityNotifications {
    public init(_ announcement: Foundation.AttributedString)
    public init(_ announcement: Swift.String)
    public init(_ announcement: Foundation.NSAttributedString)
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias _Info = Foundation.NSAttributedString
  }
  public struct LayoutChanged : Accessibility._AccessibilityNotifications {
    public init(_ element: Any? = nil)
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias _Info = Any?
  }
  public struct ScreenChanged : Accessibility._AccessibilityNotifications {
    public init(_ element: Any? = nil)
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias _Info = Any?
  }
  public struct PageScrolled : Accessibility._AccessibilityNotifications {
    public init(_ announcement: Foundation.AttributedString)
    public init(_ announcement: Swift.String)
    public init(_ announcement: Foundation.NSAttributedString)
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias _Info = Foundation.NSAttributedString
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public protocol _AccessibilityNotifications {
  associatedtype _Info
  func post()
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension Accessibility._AccessibilityNotifications {
  public func post()
}
extension Accessibility.AccessibilitySettings {
  @available(macOS 15.0, iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public static var prefersNonBlinkingTextInsertionIndicator: Swift.Bool {
    get
  }
}
@available(iOS, introduced: 17.0, deprecated: 18.0, renamed: "AccessibilitySettings.prefersHorizontalTextLayout")
@available(macOS, introduced: 14.0, deprecated: 15.0, renamed: "AccessibilitySettings.prefersHorizontalTextLayout")
@available(tvOS, introduced: 17.0, deprecated: 18.0, renamed: "AccessibilitySettings.prefersHorizontalTextLayout")
@available(watchOS, introduced: 10.0, deprecated: 11.0, renamed: "AccessibilitySettings.prefersHorizontalTextLayout")
public func AXPrefersHorizontalTextLayout() -> Swift.Bool
extension Accessibility.AccessibilitySettings {
  @available(macOS 15.0, iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public static var prefersHorizontalTextLayout: Swift.Bool {
    get
  }
  @available(macOS 15.0, iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public static var prefersHorizontalTextLayoutDidChangeNotification: Foundation.Notification.Name {
    get
  }
}
@available(iOS, introduced: 17.0, deprecated: 18.0, renamed: "AccessibilitySettings.animatedImagesEnabled")
@available(macOS, introduced: 14.0, deprecated: 15.0, renamed: "AccessibilitySettings.animatedImagesEnabled")
@available(tvOS, introduced: 17.0, deprecated: 18.0, renamed: "AccessibilitySettings.animatedImagesEnabled")
@available(watchOS, introduced: 10.0, deprecated: 11.0, renamed: "AccessibilitySettings.animatedImagesEnabled")
public func AXAnimatedImagesEnabled() -> Swift.Bool
extension Accessibility.AccessibilitySettings {
  @available(macOS 15.0, iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public static var animatedImagesEnabled: Swift.Bool {
    get
  }
  @available(macOS 15.0, iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public static var animatedImagesEnabledDidChangeNotification: Foundation.Notification.Name {
    get
  }
}
extension Accessibility.AccessibilitySettings {
  @available(macOS 15.0, iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public static func openSettings(for feature: Accessibility.AccessibilitySettings.Feature) async throws
}
extension Foundation.NSNotification.Name {
  @available(iOS, introduced: 17.0, deprecated: 18.0, renamed: "AccessibilitySettings.prefersHorizontalTextLayout")
  @available(macOS, introduced: 14.0, deprecated: 15.0, renamed: "AccessibilitySettings.prefersHorizontalTextLayoutDidChangeNotification")
  @available(tvOS, introduced: 17.0, deprecated: 18.0, renamed: "AccessibilitySettings.prefersHorizontalTextLayoutDidChangeNotification")
  @available(watchOS, introduced: 10.0, deprecated: 11.0, renamed: "AccessibilitySettings.prefersHorizontalTextLayoutDidChangeNotification")
  public static let AXPrefersHorizontalTextLayoutDidChange: Foundation.Notification.Name
  @available(iOS, introduced: 17.0, deprecated: 18.0, renamed: "AccessibilitySettings.animatedImagesEnabledDidChangeNotification")
  @available(macOS, introduced: 14.0, deprecated: 15.0, renamed: "AccessibilitySettings.animatedImagesEnabledDidChangeNotification")
  @available(tvOS, introduced: 17.0, deprecated: 18.0, renamed: "AccessibilitySettings.animatedImagesEnabledDidChangeNotification")
  @available(watchOS, introduced: 10.0, deprecated: 11.0, renamed: "AccessibilitySettings.animatedImagesEnabledDidChangeNotification")
  public static let AXAnimatedImagesEnabledDidChange: Foundation.Notification.Name
}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.HeadingLevelAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.HeadingLevelAttribute : Swift.BitwiseCopyable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.HeadingLevelAttribute.HeadingLevel : Swift.Equatable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.HeadingLevelAttribute.HeadingLevel : Swift.Hashable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.HeadingLevelAttribute.HeadingLevel : Swift.RawRepresentable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.TextCustomAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.TextCustomAttribute : Swift.BitwiseCopyable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.TextualContextAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.TextualContextAttribute : Swift.BitwiseCopyable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.TextualContextAttribute.TextualContext : Swift.Equatable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.TextualContextAttribute.TextualContext : Swift.Hashable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.TextualContextAttribute.TextualContext : Swift.RawRepresentable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.IncludesPunctuationAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.IncludesPunctuationAttribute : Swift.BitwiseCopyable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.AdjustedPitchAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.AdjustedPitchAttribute : Swift.BitwiseCopyable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.SpellOutAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.SpellOutAttribute : Swift.BitwiseCopyable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@available(*, deprecated, renamed: "AnnouncementPriorityAttribute")
extension Foundation.AttributeScopes.AccessibilityAttributes.QueueAnnouncementAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@available(*, deprecated, renamed: "AnnouncementPriorityAttribute")
extension Foundation.AttributeScopes.AccessibilityAttributes.QueueAnnouncementAttribute : Swift.BitwiseCopyable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.IPANotationAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.IPANotationAttribute : Swift.BitwiseCopyable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute : Swift.Sendable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute : Swift.BitwiseCopyable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute.AnnouncementPriority : Swift.Equatable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute.AnnouncementPriority : Swift.Hashable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension Foundation.AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute.AnnouncementPriority : Swift.RawRepresentable {}
