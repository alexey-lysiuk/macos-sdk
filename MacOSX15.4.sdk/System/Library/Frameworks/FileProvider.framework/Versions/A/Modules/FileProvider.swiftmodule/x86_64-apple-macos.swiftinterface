// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.5 clang-1700.0.13.3)
// swift-module-flags: -target x86_64-apple-macos15.4 -target-variant x86_64-apple-ios18.4-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 2882.101.2 -module-name FileProvider
// swift-module-flags-ignorable:  -interface-compiler-version 6.1
@_exported import FileProvider
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(macOS 11.3, iOS 16.0, *)
@available(macCatalyst, unavailable)
extension FileProvider.NSFileProviderDomainVersion : Swift.Comparable {
  public static func < (lhs: FileProvider.NSFileProviderDomainVersion, rhs: FileProvider.NSFileProviderDomainVersion) -> Swift.Bool
}
@available(macOS 13.0, iOS 16.0, *)
@available(macCatalyst, unavailable)
extension FileProvider.NSFileProviderManager {
  public func requestDownloadForItem(withIdentifier itemIdentifier: FileProvider.NSFileProviderItemIdentifier, requestedRange: Foundation.NSRange? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  public func requestDownloadForItem(withIdentifier itemIdentifier: FileProvider.NSFileProviderItemIdentifier, requestedRange: Foundation.NSRange? = nil) async throws
}
@available(macOS 15.0, *)
@available(macCatalyst, unavailable)
extension FileProvider.NSFileProviderManager {
  public enum EligibilityResult : Swift.Equatable {
    case eligible
    case ineligible(FileProvider.NSFileProviderVolumeUnsupportedReason)
    public static func == (a: FileProvider.NSFileProviderManager.EligibilityResult, b: FileProvider.NSFileProviderManager.EligibilityResult) -> Swift.Bool
  }
  public class func checkDomainsCanBeStoredOnVolume(at url: Foundation.URL) throws -> FileProvider.NSFileProviderManager.EligibilityResult
}
