// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.5 clang-1700.0.13.3)
// swift-module-flags: -target x86_64-apple-macos15.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature ModuleInterfaceExportAs -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 366.100.14 -module-name RealityFoundation
// swift-module-flags-ignorable:  -interface-compiler-version 6.1
import AVFAudio
import AVFoundation
import Accessibility
import AudioToolbox
import Combine
import CoreAudio
import CoreFoundation
import CoreGraphics
import CoreMedia
import CoreMotion
import CoreText
import CoreVideo
import Foundation
import Metal.MTLDevice
import Metal
import OSLog
import QuartzCore
import Spatial
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
@_exported import simd
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityInteractionsComponent {
  @_hasMissingDesignatedInitializers public class Registration {
    final public let componentType: Swift.OpaquePointer
    @objc deinit
  }
  public static var registration: RealityFoundation.__RKEntityInteractionsComponent.Registration?
  public static var componentType: Swift.OpaquePointer? {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  @_Concurrency.MainActor @preconcurrency public var __interactions: [RealityFoundation.__RKEntityInteractionSpecification] {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct DirectionalLightComponent : RealityFoundation.Component, Swift.Equatable {
  public struct Shadow : RealityFoundation.Component, Swift.Equatable {
    public var depthBias: Swift.Float
    @available(macOS, introduced: 10.15, deprecated: 15.0, message: "Use .shadowProjection = .automatic(maximumDistance:)")
    @available(iOS, introduced: 13.0, deprecated: 18.0, message: "Use .shadowProjection = .automatic(maximumDistance:)")
    @available(macCatalyst, introduced: 13.0, deprecated: 18.0, message: "Use .shadowProjection = .automatic(maximumDistance:)")
    @available(visionOS, unavailable, introduced: 2.0, message: "Use .shadowProjection = .automatic(maximumDistance:)")
    public var maximumDistance: Swift.Float {
      get
      set
    }
    public init()
    public init(maximumDistance: Swift.Float = 5.0, depthBias: Swift.Float = 1.0)
    @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.DirectionalLightComponent.Shadow
    @_Concurrency.MainActor @preconcurrency public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
    public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
      get
    }
    public static func == (a: RealityFoundation.DirectionalLightComponent.Shadow, b: RealityFoundation.DirectionalLightComponent.Shadow) -> Swift.Bool
  }
  public var __color: CoreGraphics.CGColor
  public var intensity: Swift.Float
  @available(visionOS, unavailable)
  public var isRealWorldProxy: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.DirectionalLightComponent
  @_Concurrency.MainActor @preconcurrency public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
  public static func == (a: RealityFoundation.DirectionalLightComponent, b: RealityFoundation.DirectionalLightComponent) -> Swift.Bool
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.DirectionalLightComponent.Shadow {
  public typealias ShadowMapCullMode = RealityFoundation.MaterialParameterTypes.FaceCulling
  public var cullModeOverride: RealityFoundation.DirectionalLightComponent.Shadow.ShadowMapCullMode? {
    get
    set
  }
  public enum ShadowProjectionType : Swift.Equatable {
    case fixed(zNear: Swift.Float = 0.01, zFar: Swift.Float = 10, orthographicScale: Swift.Float = 1)
    case automatic(maximumDistance: Swift.Float = 5)
    public static func == (a: RealityFoundation.DirectionalLightComponent.Shadow.ShadowProjectionType, b: RealityFoundation.DirectionalLightComponent.Shadow.ShadowProjectionType) -> Swift.Bool
  }
  public var shadowProjection: RealityFoundation.DirectionalLightComponent.Shadow.ShadowProjectionType {
    get
    set
  }
  public init(shadowProjection: RealityFoundation.DirectionalLightComponent.Shadow.ShadowProjectionType, depthBias: Swift.Float, cullMode: RealityFoundation.DirectionalLightComponent.Shadow.ShadowMapCullMode? = nil)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __REOSLog {
  public static let UpdateLoop: os.OSLog
  public static let ARQL: os.OSLog
  public static let RealityComposer: os.OSLog
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RESignpostID {
  public static let UpdateLoop: os.OSSignpostID
  public static let ARQL: os.OSSignpostID
  public static let RealityComposer: os.OSSignpostID
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __REOSSignpostScope {
  public init(osLog: os.OSLog, signpostID: os.OSSignpostID, name: Swift.StaticString)
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol __RKSimulationSceneCoordinatorDelegate : AnyObject {
  func coordinator(_ coordinator: RealityFoundation.__RKSimulationSceneCoordinator, didRequestToChangeToScene sceneIdentifier: Foundation.UUID) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RKSimulationSceneCoordinatorState {
  case stopped
  case running
  public static func == (a: RealityFoundation.__RKSimulationSceneCoordinatorState, b: RealityFoundation.__RKSimulationSceneCoordinatorState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKSimulationSceneCoordinator {
  @available(*, deprecated, message: "Please use the per-interaction-service scene coordinator.")
  public static var shared: RealityFoundation.__RKSimulationSceneCoordinator
  public init()
  weak public var delegate: (any RealityFoundation.__RKSimulationSceneCoordinatorDelegate)?
  public var simulationState: RealityFoundation.__RKSimulationSceneCoordinatorState
  public func changeToScene(with identifier: Foundation.UUID) -> Swift.Bool
  @objc deinit
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct FromToByAnimation<Value> : RealityFoundation.AnimationDefinition where Value : RealityFoundation.AnimatableData {
  public var name: Swift.String {
    get
    set
  }
  public var blendLayer: Swift.Int32 {
    get
    set
  }
  public var bindTarget: RealityFoundation.BindTarget {
    get
    set
  }
  public var fillMode: RealityFoundation.AnimationFillMode {
    get
    set
  }
  public var isAdditive: Swift.Bool {
    get
    set
  }
  public var timing: RealityFoundation.AnimationTimingFunction {
    get
    set
  }
  public var trimStart: Foundation.TimeInterval? {
    get
    set
  }
  public var trimEnd: Foundation.TimeInterval? {
    get
    set
  }
  public var trimDuration: Foundation.TimeInterval? {
    get
    set
  }
  public var offset: Foundation.TimeInterval {
    get
    set
  }
  public var delay: Foundation.TimeInterval {
    get
    set
  }
  public var speed: Swift.Float {
    get
    set
  }
  public var repeatMode: RealityFoundation.AnimationRepeatMode {
    get
    set
  }
  public var duration: Foundation.TimeInterval {
    get
    set
  }
  public init(name: Swift.String = "", from: Value? = nil, to: Value? = nil, by: Value? = nil, duration: Foundation.TimeInterval = 1.0, timing: RealityFoundation.AnimationTimingFunction = .linear, isAdditive: Swift.Bool = false, bindTarget: RealityFoundation.BindTarget? = nil, blendLayer: Swift.Int32 = 0, repeatMode: RealityFoundation.AnimationRepeatMode = .none, fillMode: RealityFoundation.AnimationFillMode = [], trimStart: Foundation.TimeInterval? = nil, trimEnd: Foundation.TimeInterval? = nil, trimDuration: Foundation.TimeInterval? = nil, offset: Foundation.TimeInterval = 0, delay: Foundation.TimeInterval = 0, speed: Swift.Float = 1.0)
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.FromToByAnimation where Value == Swift.Float {
  public var fromValue: Swift.Float? {
    get
    set
  }
  public var toValue: Swift.Float? {
    get
    set
  }
  public var byValue: Swift.Float? {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.FromToByAnimation where Value == Swift.Double {
  public var fromValue: Swift.Double? {
    get
    set
  }
  public var toValue: Swift.Double? {
    get
    set
  }
  public var byValue: Swift.Double? {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.FromToByAnimation where Value == Swift.SIMD2<Swift.Float> {
  public var fromValue: Swift.SIMD2<Swift.Float>? {
    get
    set
  }
  public var toValue: Swift.SIMD2<Swift.Float>? {
    get
    set
  }
  public var byValue: Swift.SIMD2<Swift.Float>? {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.FromToByAnimation where Value == Swift.SIMD3<Swift.Float> {
  public var fromValue: Swift.SIMD3<Swift.Float>? {
    get
    set
  }
  public var toValue: Swift.SIMD3<Swift.Float>? {
    get
    set
  }
  public var byValue: Swift.SIMD3<Swift.Float>? {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.FromToByAnimation where Value == Swift.SIMD4<Swift.Float> {
  public var fromValue: Swift.SIMD4<Swift.Float>? {
    get
    set
  }
  public var toValue: Swift.SIMD4<Swift.Float>? {
    get
    set
  }
  public var byValue: Swift.SIMD4<Swift.Float>? {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.FromToByAnimation where Value == simd.simd_quatf {
  public var fromValue: simd.simd_quatf? {
    get
    set
  }
  public var toValue: simd.simd_quatf? {
    get
    set
  }
  public var byValue: simd.simd_quatf? {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.FromToByAnimation where Value == RealityFoundation.Transform {
  public var fromValue: RealityFoundation.Transform? {
    get
    set
  }
  public var toValue: RealityFoundation.Transform? {
    get
    set
  }
  public var byValue: RealityFoundation.Transform? {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.FromToByAnimation where Value == RealityFoundation.JointTransforms {
  public var jointNames: [Swift.String] {
    get
    set
  }
  public var fromValue: RealityFoundation.JointTransforms? {
    get
    set
  }
  public var toValue: RealityFoundation.JointTransforms? {
    get
    set
  }
  public var byValue: RealityFoundation.JointTransforms? {
    get
    set
  }
  public var isScaleAnimated: Swift.Bool {
    get
    set
  }
  public var isRotationAnimated: Swift.Bool {
    get
    set
  }
  public var isTranslationAnimated: Swift.Bool {
    get
    set
  }
  public init(jointNames: [Swift.String], name: Swift.String = "", isScaleAnimated: Swift.Bool = true, isRotationAnimated: Swift.Bool = true, isTranslationAnimated: Swift.Bool = true, from: Value? = nil, to: Value? = nil, by: Value? = nil, duration: Foundation.TimeInterval = 1.0, timing: RealityFoundation.AnimationTimingFunction = .linear, isAdditive: Swift.Bool = false, bindTarget: RealityFoundation.BindTarget? = nil, blendLayer: Swift.Int32 = 0, repeatMode: RealityFoundation.AnimationRepeatMode = .none, fillMode: RealityFoundation.AnimationFillMode = [], trimStart: Foundation.TimeInterval? = nil, trimEnd: Foundation.TimeInterval? = nil, trimDuration: Foundation.TimeInterval? = nil, offset: Foundation.TimeInterval = 0, delay: Foundation.TimeInterval = 0, speed: Swift.Float = 1.0)
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.FromToByAnimation where Value == RealityFoundation.BlendShapeWeights {
  public var weightNames: [Swift.String] {
    get
    set
  }
  public var fromValue: RealityFoundation.BlendShapeWeights? {
    get
    set
  }
  public var toValue: RealityFoundation.BlendShapeWeights? {
    get
    set
  }
  public var byValue: RealityFoundation.BlendShapeWeights? {
    get
    set
  }
  public init(weightNames: [Swift.String], name: Swift.String = "", from: Value? = nil, to: Value? = nil, by: Value? = nil, duration: Foundation.TimeInterval = 1.0, timing: RealityFoundation.AnimationTimingFunction = .linear, isAdditive: Swift.Bool = false, bindTarget: RealityFoundation.BindTarget? = nil, blendLayer: Swift.Int32 = 0, repeatMode: RealityFoundation.AnimationRepeatMode = .none, fillMode: RealityFoundation.AnimationFillMode = [], trimStart: Foundation.TimeInterval? = nil, trimEnd: Foundation.TimeInterval? = nil, trimDuration: Foundation.TimeInterval? = nil, offset: Foundation.TimeInterval = 0, delay: Foundation.TimeInterval = 0, speed: Swift.Float = 1.0)
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct BindPath {
  public enum Part : Swift.Equatable {
    case scene(_: Swift.String)
    case anchorEntity(_: Swift.String)
    case entity(_: Swift.String)
    case parameter(_: Swift.String)
    case transform
    case jointTransforms
    @available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
    case opacity
    @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
    case blendShapeWeights
    @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
    case blendShapeWeightsAtIndex(_: Swift.Int = 0)
    @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
    case blendShapeWeightsWithID(_: RealityFoundation.BlendShapeWeightsData.ID)
    @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
    case billboardBlendFactor
    @available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
    case ikSolver(_: RealityFoundation.IKComponent.Solver.ID?)
    @available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
    case ikConstraintTarget(_: RealityFoundation.IKComponent.Constraint.ID)
    @available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
    case ikConstraintLookAtTarget(_: RealityFoundation.IKComponent.Constraint.ID)
    @available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
    case material(_: Swift.Int)
    @available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
    case materialParameter(_: Swift.String)
    @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
    case skeletalPose(_: RealityFoundation.SkeletalPose.ID)
    public static func == (lhs: RealityFoundation.BindPath.Part, rhs: RealityFoundation.BindPath.Part) -> Swift.Bool
  }
  public var parts: [RealityFoundation.BindPath.Part] {
    get
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public enum BindTarget : Swift.Equatable {
  case `internal`(_: RealityFoundation.InternalBindPath)
  case transform
  case jointTransforms
  case parameter(_: Swift.String)
  case path(_: RealityFoundation.BindPath)
  @available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  case opacity
  @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
  case blendShapeWeights
  @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
  case blendShapeWeightsAtIndex(_: Swift.Int = 0)
  @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
  case blendShapeWeightsWithID(_: RealityFoundation.BlendShapeWeightsData.ID)
  @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
  case billboardBlendFactor
  @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
  case skeletalPose(_: Swift.String)
  public struct ScenePath {
    public func anchorEntity(_ name: Swift.String) -> RealityFoundation.BindTarget.EntityPath
    public var `self`: RealityFoundation.BindTarget {
      get
    }
  }
  @available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  public struct TextureCoordinateTransformPath {
    public var offset: RealityFoundation.BindTarget {
      get
    }
  }
  @available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  public struct MaterialPath {
    public var baseColorTint: RealityFoundation.BindTarget {
      get
    }
    public var roughnessScale: RealityFoundation.BindTarget {
      get
    }
    public var metallicScale: RealityFoundation.BindTarget {
      get
    }
    public var specularScale: RealityFoundation.BindTarget {
      get
    }
    public var sheenTint: RealityFoundation.BindTarget {
      get
    }
    public var clearcoatScale: RealityFoundation.BindTarget {
      get
    }
    public var clearcoatRoughnessScale: RealityFoundation.BindTarget {
      get
    }
    public var anisotropyLevelScale: RealityFoundation.BindTarget {
      get
    }
    public var anisotropyAngleScale: RealityFoundation.BindTarget {
      get
    }
    public var emissiveColor: RealityFoundation.BindTarget {
      get
    }
    public var emissiveIntensity: RealityFoundation.BindTarget {
      get
    }
    public var opacityThreshold: RealityFoundation.BindTarget {
      get
    }
    public var textureCoordinate: RealityFoundation.BindTarget.TextureCoordinateTransformPath {
      get
    }
    public var secondaryTextureCoordinate: RealityFoundation.BindTarget.TextureCoordinateTransformPath {
      get
    }
    public var customValue: RealityFoundation.BindTarget {
      get
    }
  }
  public struct EntityPath {
    public func entity(_ name: Swift.String) -> RealityFoundation.BindTarget.EntityPath
    public var transform: RealityFoundation.BindTarget {
      get
    }
    public var jointTransforms: RealityFoundation.BindTarget {
      get
    }
    @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
    public func blendShapeWeights() -> RealityFoundation.BindTarget
    @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
    public func blendShapeWeightsAtIndex(_ index: Swift.Int = 0) -> RealityFoundation.BindTarget
    @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
    public func blendShapeWeightsWithID(_ id: RealityFoundation.BlendShapeWeightsData.ID) -> RealityFoundation.BindTarget
    @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
    public var billboardBlendFactor: RealityFoundation.BindTarget {
      get
    }
    @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
    public func skeletalPose(_ name: RealityFoundation.SkeletalPose.ID) -> RealityFoundation.BindTarget
    @available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
    public var opacity: RealityFoundation.BindTarget {
      get
    }
    public func parameter(_ name: Swift.String) -> RealityFoundation.BindTarget
    @available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
    public func material(_ index: Swift.Int) -> RealityFoundation.BindTarget.MaterialPath
    public var `self`: RealityFoundation.BindTarget {
      get
    }
    @available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
    public func ikSolver(_ id: RealityFoundation.IKComponent.Solver.ID? = nil) -> RealityFoundation.BindTarget.IkSolverPath
  }
  @available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  public struct IkSolverPath {
    public func constraintTarget(_ constraintName: Swift.String) -> RealityFoundation.BindTarget
    public func constraintLookAtTarget(_ constraintName: Swift.String) -> RealityFoundation.BindTarget
  }
  public static func scene(_ name: Swift.String) -> RealityFoundation.BindTarget.ScenePath
  public static func anchorEntity(_ name: Swift.String) -> RealityFoundation.BindTarget.EntityPath
  public static func entity(_ name: Swift.String) -> RealityFoundation.BindTarget.EntityPath
  @available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  public static func material(_ index: Swift.Int) -> RealityFoundation.BindTarget.MaterialPath
  public static func == (lhs: RealityFoundation.BindTarget, rhs: RealityFoundation.BindTarget) -> Swift.Bool
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct InternalBindPath {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public protocol BindableData {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension Swift.Float : RealityFoundation.BindableData {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension Swift.Double : RealityFoundation.BindableData {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension Swift.SIMD2 : RealityFoundation.BindableData where Scalar == Swift.Float {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension Swift.SIMD3 : RealityFoundation.BindableData where Scalar == Swift.Float {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension Swift.SIMD4 : RealityFoundation.BindableData where Scalar == Swift.Float {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension simd.simd_quatf : RealityFoundation.BindableData {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.Transform : RealityFoundation.BindableData {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension Swift.Bool : RealityFoundation.BindableData {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension Swift.Int : RealityFoundation.BindableData {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension Swift.String : RealityFoundation.BindableData {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct BindableValue<T> where T : RealityFoundation.BindableData {
  public init(_ value: T, animatedValue: T? = nil)
  public var value: T {
    get
    set
  }
  public var baseValue: T
  public var animatedValue: T?
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct BindableValuesReference {
  @preconcurrency @_Concurrency.MainActor public subscript<T>(bindTarget: RealityFoundation.BindTarget, type: T.Type = T.self) -> RealityFoundation.BindableValue<T>? where T : RealityFoundation.BindableData {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct ParameterSet {
  @preconcurrency @_Concurrency.MainActor public subscript<T>(name: Swift.String, type: T.Type = T.self) -> RealityFoundation.BindableValue<T>? where T : RealityFoundation.BindableData {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.Entity {
  @_Concurrency.MainActor @preconcurrency public var bindableValues: RealityFoundation.BindableValuesReference {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.Entity {
  public struct ParameterSet {
    @preconcurrency @_Concurrency.MainActor public subscript<T>(name: Swift.String, type: T.Type = T.self) -> RealityFoundation.BindableValue<T>? where T : RealityFoundation.BindableData {
      get
      set
    }
  }
  @_Concurrency.MainActor @preconcurrency public var parameters: RealityFoundation.Entity.ParameterSet {
    get
    set
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.Entity {
  @_Concurrency.MainActor @preconcurrency public subscript(entityPath: RealityFoundation.BindTarget.EntityPath) -> RealityFoundation.Entity? {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __AmbientLightComponent : RealityFoundation.Component, Swift.Equatable {
  public var color: CoreGraphics.CGColor
  public var intensity: Swift.Float
  public init()
  @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.__AmbientLightComponent
  @_Concurrency.MainActor @preconcurrency public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
  public static func == (a: RealityFoundation.__AmbientLightComponent, b: RealityFoundation.__AmbientLightComponent) -> Swift.Bool
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEmphasisPopAnimation : RealityFoundation.__RKEmphasisBaseAnimation {
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityLookAtCameraAction : RealityFoundation.__RKEntityAction {
  @preconcurrency @_Concurrency.MainActor convenience public init(targetEntity: RealityFoundation.Entity?, duration: Swift.Float = 1.0, direction: Swift.SIMD3<Swift.Float> = SIMD3<Float>(0, 1, 0), upVector: Swift.SIMD3<Swift.Float> = SIMD3<Float>(0, 1, 0))
  @preconcurrency @_Concurrency.MainActor public init(targetEntity: RealityFoundation.Entity?, duration: Swift.Float = 1.0, animationDuration: Swift.Float = 0.0, direction: Swift.SIMD3<Swift.Float> = SIMD3<Float>(0, 1, 0), rotation: Swift.Float = 0, upVector: Swift.SIMD3<Swift.Float> = SIMD3<Float>(0, 1, 0), loops: Swift.Bool = false)
  @preconcurrency @_Concurrency.MainActor override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RealityFileURLResolver {
  @available(*, deprecated, message: "Don't use this variable")
  public static var weakShared: RealityFoundation.__RealityFileURLResolver? {
    get
    set
  }
  @available(*, deprecated, message: "use the \"instance(for assetService: __REAssetService)\" instead")
  public static var shared: RealityFoundation.__RealityFileURLResolver {
    get
  }
  public static func instance(for assetService: any RealityFoundation.__REAssetService) -> RealityFoundation.__RealityFileURLResolver
  @available(*, deprecated, message: "use the \"init(_ assetService: __REAssetService)\" instead")
  public init()
  @objc deinit
  public static let assetPathPrefix: Swift.String
  public static let schemePrefix: Swift.String
  public func registerRealityFileResolver(assetService: any RealityFoundation.__REAssetService)
  public func registerRealityFileResolver()
  public func unregisterRealityFileResolver()
  public func resolvedURL(for subpath: Swift.String) -> Foundation.URL?
  public func resolvedURL(group: Swift.String, name: Swift.String) -> Foundation.URL?
  public func setResolvedURLPath(_ resolvedURLPath: Swift.String, for key: Swift.String)
  public func createSchemePrefix(with realityFileName: Swift.String) -> Swift.String
  public func createSubAssetPath(with assetName: Swift.String) -> Swift.String
  @available(*, deprecated, message: "use the static version instead")
  public func createFullSchemePath(group: Swift.String, name: Swift.String) -> Swift.String
  public static func createFullSchemePath(group: Swift.String, name: Swift.String) -> Swift.String
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.AudioFileResource {
  public enum LoadingStrategy {
    case stream
    case preload
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.AudioFileResource.LoadingStrategy : Swift.Hashable {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.AudioFileResource.LoadingStrategy : Swift.Codable {
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AudioFileResource.LoadingStrategy : Swift.Sendable {
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AudioFileResource.LoadingStrategy : Swift.RawRepresentable {
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  @available(iOS 18.0, visionOS 1.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias RawValue = Swift.String
}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
public struct ReverbComponent : RealityFoundation.Component, Swift.Hashable, Swift.Sendable {
  public var reverb: RealityFoundation.Reverb
  public init(reverb: RealityFoundation.Reverb)
  public static func == (a: RealityFoundation.ReverbComponent, b: RealityFoundation.ReverbComponent) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
extension RealityFoundation.ReverbComponent {
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.ReverbComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension Swift.SIMD3 where Scalar == Swift.Float {
  @inlinable internal static var one: Swift.SIMD3<Swift.Float> {
    get { return SIMD3<Float>(1, 1, 1) }
  }
  @inlinable internal static var positiveInfinity: Swift.SIMD3<Swift.Float> {
    get { return SIMD3<Float>(+.infinity, +.infinity, +.infinity) }
  }
  @inlinable internal static var negativeInfinity: Swift.SIMD3<Swift.Float> {
    get { return SIMD3<Float>(-.infinity, -.infinity, -.infinity) }
  }
}
extension simd.simd_float4x4 {
  @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
  @inlinable internal var identity: simd.float4x4 {
    get {
        return matrix_identity_float4x4
    }
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension simd.simd_quatf {
  @usableFromInline
  internal static let identity: simd.simd_quatf
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEmphasisFlipAnimation : RealityFoundation.__RKEmphasisBaseAnimation {
  @objc deinit
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.Audio {
  public enum DistanceAttenuation {
    case rolloff(factor: Swift.Double)
  }
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.Audio.DistanceAttenuation {
  public static let `default`: RealityFoundation.Audio.DistanceAttenuation
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.Audio.DistanceAttenuation : Swift.Equatable, Swift.Hashable, Swift.Codable {
  public static func == (a: RealityFoundation.Audio.DistanceAttenuation, b: RealityFoundation.Audio.DistanceAttenuation) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.AudioResource {
  @available(visionOS, unavailable)
  @available(macOS, introduced: 10.15, deprecated: 13.3, message: "Use the ChannelAudioComponent, AmbientAudioComponent, or SpatialAudioComponent instead.")
  @available(macCatalyst, introduced: 13.0, deprecated: 16.3, message: "Use the ChannelAudioComponent, AmbientAudioComponent, or SpatialAudioComponent instead.")
  @available(iOS, introduced: 13.0, deprecated: 16.3, message: "Use the ChannelAudioComponent, AmbientAudioComponent, or SpatialAudioComponent instead.")
  public enum InputMode {
    case nonSpatial
    case spatial
    case ambient
    public static func == (a: RealityFoundation.AudioResource.InputMode, b: RealityFoundation.AudioResource.InputMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct AudioLibraryComponent : RealityFoundation.Component, Swift.ExpressibleByDictionaryLiteral {
  public var resources: [Swift.String : RealityFoundation.AudioResource]
  public init(resources: [Swift.String : RealityFoundation.AudioResource] = [:])
  public init(dictionaryLiteral elements: (Swift.String, RealityFoundation.AudioResource)...)
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias Key = Swift.String
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias Value = RealityFoundation.AudioResource
}
extension RealityFoundation.AudioLibraryComponent {
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.AudioLibraryComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public protocol __ARReferenceProviding {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol __RKSpecificationHasTarget {
  var target: Foundation.UUID { get set }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RKEntityTriggerSpecification : Swift.Codable, Swift.Equatable {
  case drag
  case light
  case lookAt
  case placement
  case proximity(target: Foundation.UUID, distance: Swift.Float, type: RealityFoundation.__RKEntityProximityTrigger.ExitType)
  case removal
  case sound
  case start
  case tapTarget(target: Foundation.UUID)
  case timer
  case collision(target: Foundation.UUID, collidingEntities: [Foundation.UUID], tags: [Swift.String])
  case custom(tag: Swift.String)
  case customWithArguments(identifier: Swift.String, customArguments: [Swift.String : Swift.String]?)
  case group(triggers: [RealityFoundation.__RKEntityTriggerSpecification])
  public enum Name : Swift.String {
    case drag
    case light
    case lookAt
    case placement
    case proximity
    case removal
    case sound
    case start
    case tapTarget
    case timer
    case collision
    case custom
    case customWithArguments
    case group
    public init?(rawValue: Swift.String)
    @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var name: RealityFoundation.__RKEntityTriggerSpecification.Name {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (a: RealityFoundation.__RKEntityTriggerSpecification, b: RealityFoundation.__RKEntityTriggerSpecification) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RKEntityActionSpecification : Swift.Codable, Swift.Equatable {
  case audio(RealityFoundation.__RKEntityAudioActionArguments)
  case changeScene(RealityFoundation.__RKChangeSceneActionArguments)
  case custom(RealityFoundation.__RKEntityCustomActionArguments)
  case emphasis(RealityFoundation.__RKEntityEmphasisActionArguments)
  case fadeEntity(RealityFoundation.__RKEntityFadeActionArguments)
  case fadeScene(RealityFoundation.__RKFadeSceneActionArguments)
  case group(RealityFoundation.__RKEntityActionGroupArguments)
  case hide(RealityFoundation.__RKEntityHideActionArguments)
  case force(RealityFoundation.__RKEntityForceActionArguments)
  case show(RealityFoundation.__RKEntityShowActionArguments)
  case startAnimate(RealityFoundation.__RKEntityStartAnimateActionArguments)
  case stopAnimate(RealityFoundation.__RKEntityStopAnimateActionArguments)
  case toggleAnimate(RealityFoundation.__RKEntityToggleAnimateActionArguments)
  case toggleVisibility(RealityFoundation.__RKEntityToggleVisibilityActionArguments)
  case transform(RealityFoundation.__RKEntityTransformActionArguments)
  case wait(RealityFoundation.__RKWaitActionArguments)
  case orbitEntity(RealityFoundation.__RKEntityOrbitEntityActionArguments)
  case lookAtCamera(RealityFoundation.__RKEntityLookAtCameraActionArguments)
  case swapEntity(RealityFoundation.__RKEntitySwapEntityActionArguments)
  case spin(RealityFoundation.__RKEntitySpinActionArguments)
  @available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
  case setOpacity(RealityFoundation.__RKEntitySetOpacityActionArguments)
  public enum Name : Swift.String {
    case audio
    case changeScene
    case custom
    case emphasis
    case fadeEntity
    case fadeScene
    case force
    case group
    case hide
    case lookAtCamera
    case orbitEntity
    @available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
    case setOpacity
    case show
    case spin
    case startAnimate
    case stopAnimate
    case swapEntity
    case toggleAnimate
    case toggleVisibility
    case transform
    case wait
    public init?(rawValue: Swift.String)
    @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var name: RealityFoundation.__RKEntityActionSpecification.Name {
    get
  }
  public var target: Foundation.UUID? {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (a: RealityFoundation.__RKEntityActionSpecification, b: RealityFoundation.__RKEntityActionSpecification) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RKEntityGroupActionOrder : Swift.String, Swift.Codable, Swift.Equatable {
  case concurrent
  case sequenced
  public init?(rawValue: Swift.String)
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityActionGroupArguments : Swift.Codable, Swift.Equatable {
  public var order: RealityFoundation.__RKEntityGroupActionOrder
  public var actions: [RealityFoundation.__RKEntityActionSpecification]
  public var exclusive: Swift.Bool?
  public var loopCount: Swift.Int?
  public var exclusiveBlocks: Swift.Bool?
  public init(order: RealityFoundation.__RKEntityGroupActionOrder, actions: [RealityFoundation.__RKEntityActionSpecification], exclusive: Swift.Bool = false, loopCount: Swift.Int = 1)
  @available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
  public init(order: RealityFoundation.__RKEntityGroupActionOrder, actions: [RealityFoundation.__RKEntityActionSpecification], exclusive: Swift.Bool = false, loopCount: Swift.Int = 1, exclusiveBlocks: Swift.Bool = false)
  public static func == (a: RealityFoundation.__RKEntityActionGroupArguments, b: RealityFoundation.__RKEntityActionGroupArguments) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKWaitActionArguments : Swift.Codable, Swift.Equatable {
  public var duration: Swift.Float
  public init(duration: Swift.Float)
  public static func == (a: RealityFoundation.__RKWaitActionArguments, b: RealityFoundation.__RKWaitActionArguments) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityCustomActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public var actionIdentifier: Swift.String
  public var customArguments: [Swift.String : Swift.String]
  public var optionalTarget: Foundation.UUID? {
    get
    set
  }
  public init(target: Foundation.UUID?, actionIdentifier: Swift.String, customArguments: [Swift.String : Swift.String]? = [:])
  public static func == (a: RealityFoundation.__RKEntityCustomActionArguments, b: RealityFoundation.__RKEntityCustomActionArguments) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKChangeSceneActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID {
    get
    set
  }
  public var sceneRoot: Foundation.UUID
  public var targetSceneIdentifier: Foundation.UUID
  public init(sceneRoot: Foundation.UUID, targetSceneIdentifier: Foundation.UUID)
  public static func == (a: RealityFoundation.__RKChangeSceneActionArguments, b: RealityFoundation.__RKChangeSceneActionArguments) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKFadeSceneActionArguments : Swift.Codable, Swift.Equatable {
  public var targetOpacity: Swift.Float
  public var duration: Swift.Float?
  public init(targetOpacity: Swift.Float, duration: Swift.Float = 0.0)
  public static func == (a: RealityFoundation.__RKFadeSceneActionArguments, b: RealityFoundation.__RKFadeSceneActionArguments) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityFadeActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public var targetOpacity: Swift.Float
  public var duration: Swift.Float?
  public init(target: Foundation.UUID, targetOpacity: Swift.Float, duration: Swift.Float = 1.0)
  public static func == (a: RealityFoundation.__RKEntityFadeActionArguments, b: RealityFoundation.__RKEntityFadeActionArguments) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityToggleAnimateActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public init(target: Foundation.UUID)
  public static func == (a: RealityFoundation.__RKEntityToggleAnimateActionArguments, b: RealityFoundation.__RKEntityToggleAnimateActionArguments) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityStartAnimateActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public let loopCount: Swift.Int
  public let multiplePerformBehavior: RealityFoundation.__RKEntityActionMultiplePerformBehavior
  public let clipStart: Swift.Double
  public let clipDuration: Swift.Double
  public let clipReverses: Swift.Bool
  public let clipReversed: Swift.Bool
  public let animationSpeed: Swift.Float
  public let muteAudio: Swift.Bool?
  public let audioGain: Swift.Double?
  public var targetAnimation: Foundation.UUID?
  public init(target: Foundation.UUID, loopCount: Swift.Int = 1, multiplePerformBehavior: RealityFoundation.__RKEntityActionMultiplePerformBehavior = .ignore, clipStart: Swift.Double = 0.0, clipDuration: Swift.Double = 0.0, clipReversed: Swift.Bool = false, animationSpeed: Swift.Float = 1.0, clipReverses: Swift.Bool = false)
  @available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
  public init(target: Foundation.UUID, loopCount: Swift.Int = 1, multiplePerformBehavior: RealityFoundation.__RKEntityActionMultiplePerformBehavior = .ignore, clipStart: Swift.Double = 0.0, clipDuration: Swift.Double = 0.0, clipReversed: Swift.Bool = false, animationSpeed: Swift.Float = 1.0, clipReverses: Swift.Bool = false, muteAudio: Swift.Bool = false, audioGain: Swift.Double = 1.0, targetAnimation: Foundation.UUID? = nil)
  public static func == (a: RealityFoundation.__RKEntityStartAnimateActionArguments, b: RealityFoundation.__RKEntityStartAnimateActionArguments) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityStopAnimateActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public init(target: Foundation.UUID)
  public static func == (a: RealityFoundation.__RKEntityStopAnimateActionArguments, b: RealityFoundation.__RKEntityStopAnimateActionArguments) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityToggleVisibilityActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public init(target: Foundation.UUID)
  public static func == (a: RealityFoundation.__RKEntityToggleVisibilityActionArguments, b: RealityFoundation.__RKEntityToggleVisibilityActionArguments) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityShowActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public var duration: Swift.Float?
  public var distance: Swift.Float?
  public var ease: RealityFoundation.__RKEntityMoveEase?
  public var easeType: RealityFoundation.__RKEntityMoveEaseType?
  public var fadeIn: Swift.Bool?
  public var finalOpacity: Swift.Float?
  public var respectPhysics: Swift.Bool?
  public var physicsLinearCoefficient: Swift.Float?
  public var physicsAngularCoefficient: Swift.Float?
  public var animationStyle: RealityFoundation.__RKEntityActionAnimationStyle?
  public var buildInAnimationType: RealityFoundation.__RKEntityShowActionBuildInAnimationType?
  public init(target: Foundation.UUID, duration: Swift.Float = 1.0, distance: Swift.Float = 10.0, ease: RealityFoundation.__RKEntityMoveEase = .none, easeType: RealityFoundation.__RKEntityMoveEaseType = .easeIn, fadeIn: Swift.Bool = false, finalOpacity: Swift.Float = 1.0, respectPhysics: Swift.Bool = false, physicsLinearCoefficient: Swift.Float = 0.0, physicsAngularCoefficient: Swift.Float = 0.0, animationStyle: RealityFoundation.__RKEntityActionAnimationStyle = .basic, buildInAnimationType: RealityFoundation.__RKEntityShowActionBuildInAnimationType = .none)
  public static func == (a: RealityFoundation.__RKEntityShowActionArguments, b: RealityFoundation.__RKEntityShowActionArguments) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityHideActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public var duration: Swift.Float?
  public var distance: Swift.Float?
  public var ease: RealityFoundation.__RKEntityMoveEase?
  public var easeType: RealityFoundation.__RKEntityMoveEaseType?
  public var fadeOut: Swift.Bool?
  public var finalOpacity: Swift.Float?
  public var respectPhysics: Swift.Bool?
  public var physicsLinearCoefficient: Swift.Float?
  public var physicsAngularCoefficient: Swift.Float?
  public var animationStyle: RealityFoundation.__RKEntityActionAnimationStyle?
  public var buildOutAnimationType: RealityFoundation.__RKEntityHideActionBuildOutAnimationType?
  public init(target: Foundation.UUID, duration: Swift.Float = 1.0, distance: Swift.Float = 10.0, ease: RealityFoundation.__RKEntityMoveEase = .none, easeType: RealityFoundation.__RKEntityMoveEaseType = .easeIn, fadeOut: Swift.Bool = false, finalOpacity: Swift.Float = 1.0, respectPhysics: Swift.Bool = false, physicsLinearCoefficient: Swift.Float = 0.0, physicsAngularCoefficient: Swift.Float = 0.0, animationStyle: RealityFoundation.__RKEntityActionAnimationStyle = .basic, buildOutAnimationType: RealityFoundation.__RKEntityHideActionBuildOutAnimationType = .none)
  public static func == (a: RealityFoundation.__RKEntityHideActionArguments, b: RealityFoundation.__RKEntityHideActionArguments) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityEmphasisActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public var duration: Swift.Float?
  public var iterations: Swift.Float?
  public var animationStyle: RealityFoundation.__RKEntityActionAnimationStyle?
  public var emphasisAnimationType: RealityFoundation.__RKEntityEmphasisAnimationType?
  public init(target: Foundation.UUID, duration: Swift.Float = 1.0, iterations: Swift.Float = 1.0, animationStyle: RealityFoundation.__RKEntityActionAnimationStyle = .basic, emphasisAnimationType: RealityFoundation.__RKEntityEmphasisAnimationType = .pop)
  public static func == (a: RealityFoundation.__RKEntityEmphasisActionArguments, b: RealityFoundation.__RKEntityEmphasisActionArguments) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityAudioActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public var path: Swift.String
  public var type: RealityFoundation.__RKEntityAudioActionType?
  public var volume: Swift.Double?
  public var loops: Swift.Bool?
  public var spatialMode: RealityFoundation.__RKAudioSpatialModeSelection?
  public let multiplePerformBehavior: RealityFoundation.__RKEntityActionMultiplePerformBehavior?
  public init(target: Foundation.UUID, path: Swift.String, type: RealityFoundation.__RKEntityAudioActionType, spatialMode: RealityFoundation.__RKAudioSpatialModeSelection, volume: Swift.Double = 0.5, loops: Swift.Bool = false, multiplePerformBehavior: RealityFoundation.__RKEntityActionMultiplePerformBehavior = .ignore)
  public static func == (a: RealityFoundation.__RKEntityAudioActionArguments, b: RealityFoundation.__RKEntityAudioActionArguments) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityTransformActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public var location: Swift.SIMD3<Swift.Float>?
  public var orientation: simd.simd_quatf? {
    get
    set
  }
  public var scale: Swift.Float?
  public var duration: Swift.Float?
  public var moveType: RealityFoundation.__RKEntityMoveSelection?
  public var ease: RealityFoundation.__RKEntityMoveEase?
  public var easeType: RealityFoundation.__RKEntityMoveEaseType?
  public var respectPhysics: Swift.Bool?
  public var physicsLinearCoefficient: Swift.Float?
  public var physicsAngularCoefficient: Swift.Float?
  public var relativeToEntity: Foundation.UUID?
  public init(target: Foundation.UUID, location: Swift.SIMD3<Swift.Float>?, orientation: simd.simd_quatf?, scale: Swift.Float?, duration: Swift.Float = 1.0, moveType: RealityFoundation.__RKEntityMoveSelection = .local, ease: RealityFoundation.__RKEntityMoveEase = .none, easeType: RealityFoundation.__RKEntityMoveEaseType = .easeIn, respectPhysics: Swift.Bool = false, physicsLinearCoefficient: Swift.Float = 0.0, physicsAngularCoefficient: Swift.Float = 0.0)
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public init(target: Foundation.UUID, location: Swift.SIMD3<Swift.Float>?, orientation: simd.simd_quatf?, scale: Swift.Float?, duration: Swift.Float = 1.0, moveType: RealityFoundation.__RKEntityMoveSelection = .local, ease: RealityFoundation.__RKEntityMoveEase = .none, easeType: RealityFoundation.__RKEntityMoveEaseType = .easeIn, respectPhysics: Swift.Bool = false, physicsLinearCoefficient: Swift.Float = 0.0, physicsAngularCoefficient: Swift.Float = 0.0, relativeToEntity: Foundation.UUID? = nil)
  public static func == (a: RealityFoundation.__RKEntityTransformActionArguments, b: RealityFoundation.__RKEntityTransformActionArguments) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityForceActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public var force: Swift.SIMD3<Swift.Float>?
  public var velocity: Swift.SIMD3<Swift.Float>?
  public init(target: Foundation.UUID, force: Swift.SIMD3<Swift.Float>? = nil, velocity: Swift.SIMD3<Swift.Float>? = nil)
  public static func == (a: RealityFoundation.__RKEntityForceActionArguments, b: RealityFoundation.__RKEntityForceActionArguments) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntitySwapEntityActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public var newTarget: Foundation.UUID
  public var buildOutAction: RealityFoundation.__RKEntityHideActionArguments
  public var buildInAction: RealityFoundation.__RKEntityShowActionArguments
  public init(target: Foundation.UUID, newTarget: Foundation.UUID, buildOutAction: RealityFoundation.__RKEntityHideActionArguments, buildInAction: RealityFoundation.__RKEntityShowActionArguments)
  public static func == (a: RealityFoundation.__RKEntitySwapEntityActionArguments, b: RealityFoundation.__RKEntitySwapEntityActionArguments) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntitySpinActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public var duration: Swift.Float?
  public var iterations: Swift.Float?
  public var direction: RealityFoundation.__RKEntitySpinDirectionType?
  public var axis: Swift.SIMD3<Swift.Float>?
  public init(target: Foundation.UUID, duration: Swift.Float = 1.0, iterations: Swift.Float = 1, direction: RealityFoundation.__RKEntitySpinDirectionType = .clockwise, axis: Swift.SIMD3<Swift.Float> = SIMD3<Float>(0,1,0))
  public static func == (a: RealityFoundation.__RKEntitySpinActionArguments, b: RealityFoundation.__RKEntitySpinActionArguments) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityOrbitEntityActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public var pivotTarget: Foundation.UUID
  public var duration: Swift.Float?
  public var rotations: Swift.Float?
  public var orbitalAxis: Swift.SIMD3<Swift.Float>?
  public var orientToPath: Swift.Bool?
  public var spinDirection: RealityFoundation.__RKEntitySpinDirectionType?
  public var respectPhysics: Swift.Bool?
  public var physicsLinearCoefficient: Swift.Float?
  public var physicsAngularCoefficient: Swift.Float?
  public init(target: Foundation.UUID, pivotTarget: Foundation.UUID, duration: Swift.Float = 1.0, rotations: Swift.Float = 1.0, orbitalAxis: Swift.SIMD3<Swift.Float> = SIMD3<Float>(0, 1, 0), orientToPath: Swift.Bool = false, spinDirection: RealityFoundation.__RKEntitySpinDirectionType = .clockwise, respectPhysics: Swift.Bool = false, physicsLinearCoefficient: Swift.Float = 0.0, physicsAngularCoefficient: Swift.Float = 0.0)
  public static func == (a: RealityFoundation.__RKEntityOrbitEntityActionArguments, b: RealityFoundation.__RKEntityOrbitEntityActionArguments) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityLookAtCameraActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public var duration: Swift.Float?
  public var animationDuration: Swift.Float?
  public var direction: Swift.SIMD3<Swift.Float>?
  public var rotation: Swift.Float?
  public var upVector: Swift.SIMD3<Swift.Float>?
  public var loops: Swift.Bool?
  public init(target: Foundation.UUID, duration: Swift.Float = 1.0, animationDuration: Swift.Float = 0.0, direction: Swift.SIMD3<Swift.Float> = SIMD3<Float>(0, 1, 0), rotation: Swift.Float = 0.0, upVector: Swift.SIMD3<Swift.Float> = SIMD3<Float>(0, 1, 0), loops: Swift.Bool = false)
  public static func == (a: RealityFoundation.__RKEntityLookAtCameraActionArguments, b: RealityFoundation.__RKEntityLookAtCameraActionArguments) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntitySetOpacityActionArguments : Swift.Codable, Swift.Equatable, RealityFoundation.__RKSpecificationHasTarget {
  public var target: Foundation.UUID
  public var duration: Swift.Float
  public var opacity: Swift.Float
  public init(target: Foundation.UUID, duration: Swift.Float = 1.0, opacity: Swift.Float = 1.0)
  public static func == (a: RealityFoundation.__RKEntitySetOpacityActionArguments, b: RealityFoundation.__RKEntitySetOpacityActionArguments) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityInteractionSpecification : Swift.Codable, Swift.Equatable, Swift.CustomStringConvertible {
  public var trigger: RealityFoundation.__RKEntityTriggerSpecification
  public var action: RealityFoundation.__RKEntityActionSpecification
  public var accessibilityDescription: Swift.String?
  public init(trigger: RealityFoundation.__RKEntityTriggerSpecification, action: RealityFoundation.__RKEntityActionSpecification)
  public init(_ trigger: RealityFoundation.__RKEntityTriggerSpecification, _ action: RealityFoundation.__RKEntityActionSpecification)
  public init(trigger: RealityFoundation.__RKEntityTriggerSpecification, action: RealityFoundation.__RKEntityActionSpecification, accessibilityDescription: Swift.String? = nil)
  public init(_ trigger: RealityFoundation.__RKEntityTriggerSpecification, _ action: RealityFoundation.__RKEntityActionSpecification, _ accessibilityDescription: Swift.String? = nil)
  public var description: Swift.String {
    get
  }
  public static func == (a: RealityFoundation.__RKEntityInteractionSpecification, b: RealityFoundation.__RKEntityInteractionSpecification) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct ImageBasedLightComponent : RealityFoundation.Component, Swift.Equatable {
  public enum Source {
    case none
    case single(RealityFoundation.EnvironmentResource)
    case blend(RealityFoundation.EnvironmentResource, RealityFoundation.EnvironmentResource, Swift.Float)
  }
  public var source: RealityFoundation.ImageBasedLightComponent.Source
  public var inheritsRotation: Swift.Bool
  public var intensityExponent: Swift.Float
  public init(source: RealityFoundation.ImageBasedLightComponent.Source, intensityExponent: Swift.Float = 0)
  public static func == (lhs: RealityFoundation.ImageBasedLightComponent, rhs: RealityFoundation.ImageBasedLightComponent) -> Swift.Bool
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.ImageBasedLightComponent {
  @preconcurrency @_Concurrency.MainActor public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.ImageBasedLightComponent
  @preconcurrency @_Concurrency.MainActor public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct ImageBasedLightReceiverComponent : RealityFoundation.Component, Swift.Equatable {
  public var imageBasedLight: RealityFoundation.Entity
  public init(imageBasedLight: RealityFoundation.Entity)
  public static func == (a: RealityFoundation.ImageBasedLightReceiverComponent, b: RealityFoundation.ImageBasedLightReceiverComponent) -> Swift.Bool
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.ImageBasedLightReceiverComponent {
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.ImageBasedLightReceiverComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(iOS, deprecated, introduced: 15.0, renamed: "ImageBasedLightComponent")
@available(macOS, deprecated, introduced: 12.0, renamed: "ImageBasedLightComponent")
@available(macCatalyst, deprecated, introduced: 15.0, renamed: "ImageBasedLightComponent")
public struct __ImageBasedLightComponent : RealityFoundation.Component, Swift.Equatable {
  public var environment: RealityFoundation.EnvironmentResource?
  public var intensityExponent: Swift.Float
  public init(environment: RealityFoundation.EnvironmentResource?, intensityExponent: Swift.Float = 0)
  public static func == (lhs: RealityFoundation.__ImageBasedLightComponent, rhs: RealityFoundation.__ImageBasedLightComponent) -> Swift.Bool
}
@available(iOS, deprecated, introduced: 15.0, renamed: "ImageBasedLightComponent")
@available(macOS, deprecated, introduced: 12.0, renamed: "ImageBasedLightComponent")
@available(macCatalyst, deprecated, introduced: 15.0, renamed: "ImageBasedLightComponent")
extension RealityFoundation.__ImageBasedLightComponent {
  @preconcurrency @_Concurrency.MainActor public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.__ImageBasedLightComponent
  @preconcurrency @_Concurrency.MainActor public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public protocol HasModel : RealityFoundation.HasTransform {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasModel {
  @_Concurrency.MainActor @preconcurrency public var model: RealityFoundation.ModelComponent? {
    get
    set
    _modify
  }
  @available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
  @_Concurrency.MainActor @preconcurrency public var modelDebugOptions: RealityFoundation.ModelDebugOptionsComponent? {
    get
    set
  }
  @available(*, unavailable, renamed: "modelDebugOptions")
  @_Concurrency.MainActor @preconcurrency public var debugModel: RealityFoundation.ModelDebugOptionsComponent? {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct EntityQuery : @unchecked Swift.Sendable {
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public init()
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public init(where predicate: RealityFoundation.QueryPredicate<RealityFoundation.Entity>)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RKEntityEmphasisAnimationType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case pop
  case blink
  case bounce
  case flip
  case float
  case jiggle
  case pulse
  case spin
  public init?(rawValue: Swift.String)
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias AllCases = [RealityFoundation.__RKEntityEmphasisAnimationType]
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [RealityFoundation.__RKEntityEmphasisAnimationType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityEmphasisAction : RealityFoundation.__RKEntityAction {
  public init(targetEntity: RealityFoundation.Entity?, duration: Swift.Float, iterations: Swift.Float = 1.0, animationStyle: RealityFoundation.__RKEntityActionAnimationStyle = .basic, emphasisAnimationType: RealityFoundation.__RKEntityEmphasisAnimationType = .pop)
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  override public var description: Swift.String {
    get
  }
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKSceneUUIDComponent {
  @_hasMissingDesignatedInitializers final public class Registration : Swift.Sendable {
    final public let componentType: Swift.OpaquePointer
    @objc deinit
  }
  public static var registration: RealityFoundation.__RKSceneUUIDComponent.Registration?
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Scene {
  @_Concurrency.MainActor @preconcurrency public var __sceneIdentifier: Foundation.UUID? {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol SynchronizationPeerID {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension Swift.UInt64 : RealityFoundation.SynchronizationPeerID {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol SynchronizationService : AnyObject {
  typealias Identifier = Swift.UInt64
  @preconcurrency @_Concurrency.MainActor func entity(for identifier: Self.Identifier) -> RealityFoundation.Entity?
  @preconcurrency @_Concurrency.MainActor func owner(of entity: RealityFoundation.Entity) -> (any RealityFoundation.SynchronizationPeerID)?
  @discardableResult
  @preconcurrency @_Concurrency.MainActor func giveOwnership(of entity: RealityFoundation.Entity, toPeer: any RealityFoundation.SynchronizationPeerID) -> Swift.Bool
  func __fromCore(peerID: RealityFoundation.__PeerIDRef) -> (any RealityFoundation.SynchronizationPeerID)?
  func __toCore(peerID: any RealityFoundation.SynchronizationPeerID) -> RealityFoundation.__PeerIDRef
}
@_hasMissingDesignatedInitializers @available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
final public class NetworkCompatibilityToken : Swift.Codable {
  public enum Compatibility {
    case compatible
    case sessionProtocolVersionMismatch
    public static func == (a: RealityFoundation.NetworkCompatibilityToken.Compatibility, b: RealityFoundation.NetworkCompatibilityToken.Compatibility) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let local: RealityFoundation.NetworkCompatibilityToken
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  final public func compatibilityWith(_ otherToken: RealityFoundation.NetworkCompatibilityToken) -> RealityFoundation.NetworkCompatibilityToken.Compatibility
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public class TextureResource : RealityFoundation.Resource {
  @_Concurrency.MainActor @preconcurrency public var __coreAsset: RealityFoundation.__AssetRef {
    get
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public enum Semantic {
    case raw
    case scalar
    case color
    case hdrColor
    case normal
    public static func == (a: RealityFoundation.TextureResource.Semantic, b: RealityFoundation.TextureResource.Semantic) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public enum MipmapsMode {
    case none
    case allocateAll
    case allocateAndGenerateAll
    public static func == (a: RealityFoundation.TextureResource.MipmapsMode, b: RealityFoundation.TextureResource.MipmapsMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct CreateOptions {
    public var semantic: RealityFoundation.TextureResource.Semantic?
    public var mipmapsMode: RealityFoundation.TextureResource.MipmapsMode
    @available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
    public var compression: RealityFoundation.TextureResource.Compression
    public init(semantic: RealityFoundation.TextureResource.Semantic?, mipmapsMode: RealityFoundation.TextureResource.MipmapsMode = .allocateAndGenerateAll)
    @available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
    public init(semantic: RealityFoundation.TextureResource.Semantic?, compression: RealityFoundation.TextureResource.Compression, mipmapsMode: RealityFoundation.TextureResource.MipmapsMode = .allocateAndGenerateAll)
  }
  @objc deinit
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  @_Concurrency.MainActor @preconcurrency public var semantic: RealityFoundation.TextureResource.Semantic? {
    get
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  @_Concurrency.MainActor @preconcurrency public var width: Swift.Int {
    get
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  @_Concurrency.MainActor @preconcurrency public var height: Swift.Int {
    get
  }
  @available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  @_Concurrency.MainActor @preconcurrency public var depth: Swift.Int {
    get
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  @_Concurrency.MainActor @preconcurrency public var mipmapLevelCount: Swift.Int {
    get
  }
  @available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  @_Concurrency.MainActor @preconcurrency public var pixelFormat: Metal.MTLPixelFormat {
    get
  }
  @available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  @_Concurrency.MainActor @preconcurrency public var textureType: Metal.MTLTextureType {
    get
  }
  @available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  @_Concurrency.MainActor @preconcurrency public var arrayLength: Swift.Int {
    get
  }
  @available(*, noasync, message: "Synchronous loading APIs block the main actor and should not be used in async contexts.  Use init(...) async instead")
  @_Concurrency.MainActor @preconcurrency public static func load(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil) throws -> RealityFoundation.TextureResource
  @available(macOS, introduced: 10.15, deprecated: 15.0, renamed: "init(contentsOf:withName:)")
  @available(iOS, introduced: 13.0, deprecated: 18.0, renamed: "init(contentsOf:withName:)")
  @available(macCatalyst, introduced: 13.0, deprecated: 18.0, renamed: "init(contentsOf:withName:)")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, renamed: "init(contentsOf:withName:)")
  @_Concurrency.MainActor @preconcurrency public static func loadAsync(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil) -> RealityFoundation.LoadRequest<RealityFoundation.TextureResource>
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  @available(*, noasync, message: "Synchronous loading APIs block the main actor and should not be used in async contexts.  Use init(...) async instead")
  @_Concurrency.MainActor @preconcurrency public static func load(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil, options: RealityFoundation.TextureResource.CreateOptions) throws -> RealityFoundation.TextureResource
  @available(macOS, introduced: 12.0, deprecated: 15.0, renamed: "init(contentsOf:withName:options:)")
  @available(iOS, introduced: 15.0, deprecated: 18.0, renamed: "init(contentsOf:withName:options:)")
  @available(macCatalyst, introduced: 15.0, deprecated: 18.0, renamed: "init(contentsOf:withName:options:)")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, renamed: "init(contentsOf:withName:options:)")
  @_Concurrency.MainActor @preconcurrency public static func loadAsync(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil, options: RealityFoundation.TextureResource.CreateOptions) -> RealityFoundation.LoadRequest<RealityFoundation.TextureResource>
  @available(macOS, introduced: 12.0, deprecated: 15.0, renamed: "init(image:withName:options:)")
  @available(iOS, introduced: 15.0, deprecated: 18.0, renamed: "init(image:withName:options:)")
  @available(macCatalyst, introduced: 15.0, deprecated: 18.0, renamed: "init(image:withName:options:)")
  @available(visionOS, introduced: 1.0, deprecated: 2.0, renamed: "init(image:withName:options:)")
  @_Concurrency.MainActor @preconcurrency public static func generate(from cgImage: CoreGraphics.CGImage, withName resourceName: Swift.String? = nil, options: RealityFoundation.TextureResource.CreateOptions) throws -> RealityFoundation.TextureResource
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  @available(macOS, introduced: 12.0, deprecated: 15.0, renamed: "init(image:withName:options:)")
  @available(iOS, introduced: 15.0, deprecated: 18.0, renamed: "init(image:withName:options:)")
  @available(macCatalyst, introduced: 15.0, deprecated: 18.0, renamed: "init(image:withName:options:)")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, renamed: "init(image:withName:options:)")
  @_Concurrency.MainActor @preconcurrency public static func generateAsync(from cgImage: CoreGraphics.CGImage, withName resourceName: Swift.String? = nil, options: RealityFoundation.TextureResource.CreateOptions) -> RealityFoundation.LoadRequest<RealityFoundation.TextureResource>
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  @_Concurrency.MainActor @preconcurrency public func replace(withImage cgImage: CoreGraphics.CGImage, options: RealityFoundation.TextureResource.CreateOptions) throws
  @available(macOS, introduced: 12.0, deprecated: 15.0, renamed: "replace(using:options:)")
  @available(iOS, introduced: 15.0, deprecated: 18.0, renamed: "replace(using:options:)")
  @available(macCatalyst, introduced: 15.0, deprecated: 18.0, renamed: "replace(using:options:)")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, renamed: "replace(using:options:)")
  @_Concurrency.MainActor @preconcurrency public func replaceAsync(withImage cgImage: CoreGraphics.CGImage, options: RealityFoundation.TextureResource.CreateOptions) -> RealityFoundation.LoadRequest<RealityFoundation.TextureResource>
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  @_Concurrency.MainActor @preconcurrency public func copy(to texture: any Metal.MTLTexture) throws
  @available(macOS, introduced: 12.0, deprecated: 15.0, renamed: "copy(to:)")
  @available(iOS, introduced: 15.0, deprecated: 18.0, renamed: "copy(to:)")
  @available(macCatalyst, introduced: 15.0, deprecated: 18.0, renamed: "copy(to:)")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, renamed: "copy(to:)")
  @preconcurrency @_Concurrency.MainActor public func copyAsync(to texture: any Metal.MTLTexture, completionHandler: @escaping @_Concurrency.MainActor ((any Swift.Error)?) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public static func __texture(from mtlTexture: any Metal.MTLTexture) -> RealityFoundation.TextureResource
  @available(*, deprecated, message: "Use generate(from: CGImage, ...), and for color images specify `CreateOptions.Semantic = .color`")
  @_Concurrency.MainActor @preconcurrency public static func __texture(from cgImage: CoreGraphics.CGImage, label: Swift.String? = nil) -> RealityFoundation.TextureResource
  @_hasMissingDesignatedInitializers @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public class Drawable {
    public var drawableQueue: RealityFoundation.TextureResource.DrawableQueue {
      get
    }
    public var texture: any Metal.MTLTexture {
      get
    }
    public func present()
    @available(visionOS 1.0, *)
    @_Concurrency.MainActor public func presentOnSceneUpdate()
    @objc deinit
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public class DrawableQueue {
    public struct Descriptor {
      public var pixelFormat: Metal.MTLPixelFormat
      public var width: Swift.Int
      public var height: Swift.Int
      public var usage: Metal.MTLTextureUsage
      public var mipmapsMode: RealityFoundation.TextureResource.MipmapsMode
      public init(pixelFormat: Metal.MTLPixelFormat, width: Swift.Int, height: Swift.Int, usage: Metal.MTLTextureUsage, mipmapsMode: RealityFoundation.TextureResource.MipmapsMode)
    }
    public var pixelFormat: Metal.MTLPixelFormat {
      get
    }
    public var width: Swift.Int {
      get
    }
    public var height: Swift.Int {
      get
    }
    public var usage: Metal.MTLTextureUsage {
      get
    }
    public var mipmapsMode: RealityFoundation.TextureResource.MipmapsMode {
      get
    }
    @preconcurrency @_Concurrency.MainActor public init(_ descriptor: RealityFoundation.TextureResource.DrawableQueue.Descriptor) throws
    @objc deinit
    public func nextDrawable() throws -> RealityFoundation.TextureResource.Drawable
    public var allowsNextDrawableTimeout: Swift.Bool
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  @_Concurrency.MainActor @preconcurrency public func replace(withDrawables drawableQueue: RealityFoundation.TextureResource.DrawableQueue)
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  @_Concurrency.MainActor @preconcurrency public var drawableQueue: RealityFoundation.TextureResource.DrawableQueue? {
    get
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.TextureResource.Semantic : Swift.Sendable {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.TextureResource.MipmapsMode : Swift.Sendable {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension Metal.MTLCommandBuffer {
  public func present(_ drawable: RealityFoundation.TextureResource.Drawable)
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource {
  @_Concurrency.MainActor @preconcurrency convenience public init(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil) async throws
  @_Concurrency.MainActor @preconcurrency convenience public init(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil, options: RealityFoundation.TextureResource.CreateOptions) async throws
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource : Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public static func == (lhs: RealityFoundation.TextureResource, rhs: RealityFoundation.TextureResource) -> Swift.Bool
}
@available(visionOS 1.0, macOS 15.0, macCatalyst 18.0, iOS 18.0, *)
extension RealityFoundation.TextureResource {
  @available(macOS, unavailable, introduced: 15.0, renamed: "init(image:withName:options:)")
  @available(iOS, unavailable, introduced: 18.0, renamed: "init(image:withName:options:)")
  @available(macCatalyst, unavailable, introduced: 18.0, renamed: "init(image:withName:options:)")
  @available(visionOS, introduced: 1.0, deprecated: 2.0, renamed: "init(image:withName:options:)")
  @_Concurrency.MainActor @preconcurrency public static func generate(from cgImage: CoreGraphics.CGImage, named resourceName: Swift.String? = nil, options: RealityFoundation.TextureResource.CreateOptions) async throws -> RealityFoundation.TextureResource
  @_Concurrency.MainActor @preconcurrency public func replace(using cgImage: CoreGraphics.CGImage, options: RealityFoundation.TextureResource.CreateOptions) async throws
  @_Concurrency.MainActor @preconcurrency public func copy(to texture: any Metal.MTLTexture) async throws
}
@available(visionOS 2.0, macOS 15.0, macCatalyst 18.0, iOS 18.0, *)
extension RealityFoundation.TextureResource {
  @_Concurrency.MainActor @preconcurrency public static func texture2DArray(slices: [CoreGraphics.CGImage], named resourceName: Swift.String? = nil, options: RealityFoundation.TextureResource.CreateOptions) throws -> RealityFoundation.TextureResource
  @_Concurrency.MainActor @preconcurrency public static func texture2DArray(slices: [CoreGraphics.CGImage], named resourceName: Swift.String? = nil, options: RealityFoundation.TextureResource.CreateOptions) async throws -> RealityFoundation.TextureResource
  @_Concurrency.MainActor @preconcurrency public static func cube(slices: [CoreGraphics.CGImage], named resourceName: Swift.String? = nil, options: RealityFoundation.TextureResource.CreateOptions) throws -> RealityFoundation.TextureResource
  @_Concurrency.MainActor @preconcurrency public static func cube(slices: [CoreGraphics.CGImage], named resourceName: Swift.String? = nil, options: RealityFoundation.TextureResource.CreateOptions) async throws -> RealityFoundation.TextureResource
  @_Concurrency.MainActor @preconcurrency public static func texture3D(slices: [CoreGraphics.CGImage], named resourceName: Swift.String? = nil, options: RealityFoundation.TextureResource.CreateOptions) throws -> RealityFoundation.TextureResource
  @_Concurrency.MainActor @preconcurrency public static func texture3D(slices: [CoreGraphics.CGImage], named resourceName: Swift.String? = nil, options: RealityFoundation.TextureResource.CreateOptions) async throws -> RealityFoundation.TextureResource
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource {
  public struct Compression : Swift.Hashable, Swift.Sendable {
    public static var none: RealityFoundation.TextureResource.Compression {
      get
    }
    public static var `default`: RealityFoundation.TextureResource.Compression {
      get
    }
    public enum ASTCBlockSize : Swift.Hashable, Swift.Sendable {
      case block4x4
      case block5x4
      case block5x5
      case block6x5
      case block6x6
      case block8x5
      case block8x6
      case block8x8
      case block10x5
      case block10x6
      case block10x8
      case block10x10
      case block12x10
      case block12x12
      public static func == (a: RealityFoundation.TextureResource.Compression.ASTCBlockSize, b: RealityFoundation.TextureResource.Compression.ASTCBlockSize) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public enum ASTCQuality : Swift.Hashable, Swift.Sendable {
      case fast
      case normal
      case high
      case exhaustive
      public static func == (a: RealityFoundation.TextureResource.Compression.ASTCQuality, b: RealityFoundation.TextureResource.Compression.ASTCQuality) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @available(iOS, unavailable)
    @available(tvOS, unavailable)
    @available(visionOS, unavailable)
    public static func astc(blockSize: RealityFoundation.TextureResource.Compression.ASTCBlockSize, quality: RealityFoundation.TextureResource.Compression.ASTCQuality = .fast) -> RealityFoundation.TextureResource.Compression
    public static func == (a: RealityFoundation.TextureResource.Compression, b: RealityFoundation.TextureResource.Compression) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public typealias SamplingQuality = RealityFoundation.EnvironmentResource.CreateOptions.SamplingQuality
  @_Concurrency.MainActor @preconcurrency convenience public init(cubeFromEquirectangular cgImage: CoreGraphics.CGImage, named resourceName: Swift.String? = nil, quality: RealityFoundation.TextureResource.SamplingQuality = .fast, faceSize: Swift.Int? = nil, options: RealityFoundation.TextureResource.CreateOptions) throws
  @_Concurrency.MainActor @preconcurrency convenience public init(cubeFromEquirectangular cgImage: CoreGraphics.CGImage, named resourceName: Swift.String? = nil, quality: RealityFoundation.TextureResource.SamplingQuality = .fast, faceSize: Swift.Int? = nil, options: RealityFoundation.TextureResource.CreateOptions) async throws
  @_Concurrency.MainActor @preconcurrency convenience public init(cubeFromImage cgImage: CoreGraphics.CGImage, named resourceName: Swift.String? = nil, options: RealityFoundation.TextureResource.CreateOptions) throws
  @_Concurrency.MainActor @preconcurrency convenience public init(cubeFromImage cgImage: CoreGraphics.CGImage, named resourceName: Swift.String? = nil, options: RealityFoundation.TextureResource.CreateOptions) async throws
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource.DrawableQueue.Descriptor {
  public var timeout: Swift.Duration {
    get
    set
  }
  public init(pixelFormat: Metal.MTLPixelFormat, width: Swift.Int, height: Swift.Int, usage: Metal.MTLTextureUsage, mipmapsMode: RealityFoundation.TextureResource.MipmapsMode, timeout: Swift.Duration)
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource {
  @_Concurrency.MainActor @preconcurrency convenience public init(image cgImage: CoreGraphics.CGImage, withName resourceName: Swift.String? = nil, options: RealityFoundation.TextureResource.CreateOptions) throws
  @_Concurrency.MainActor @preconcurrency convenience public init(image cgImage: CoreGraphics.CGImage, withName resourceName: Swift.String? = nil, options: RealityFoundation.TextureResource.CreateOptions) async throws
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public class RealityRenderer {
  @_Concurrency.MainActor public struct EntityCollection : RealityFoundation.EntityCollection {
    @_Concurrency.MainActor public var startIndex: Swift.Int {
      get
    }
    @_Concurrency.MainActor public var endIndex: Swift.Int {
      get
    }
    @_Concurrency.MainActor public var count: Swift.Int {
      get
    }
    @_Concurrency.MainActor public subscript(index: Swift.Int) -> RealityFoundation.Entity {
      get
    }
    @_Concurrency.MainActor public func index(after i: Swift.Int) -> Swift.Int
    @_Concurrency.MainActor public mutating func insert<S>(contentsOf sequence: S, beforeIndex index: Swift.Int) where S : Swift.Sequence, S.Element : RealityFoundation.Entity
    @_Concurrency.MainActor public mutating func append<S>(contentsOf sequence: S) where S : Swift.Sequence, S.Element : RealityFoundation.Entity
    @_Concurrency.MainActor public mutating func remove(_ child: RealityFoundation.Entity)
    @_Concurrency.MainActor public mutating func remove(at index: Swift.Int)
    @_Concurrency.MainActor public mutating func removeAll()
    @_Concurrency.MainActor public mutating func replaceAll<S>(_ children: S) where S : Swift.Sequence, S.Element : RealityFoundation.Entity
    @available(iOS 18.0, visionOS 1.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias Element = RealityFoundation.Entity
    @available(iOS 18.0, visionOS 1.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias Index = Swift.Int
    @available(iOS 18.0, visionOS 1.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias Indices = Swift.DefaultIndices<RealityFoundation.RealityRenderer.EntityCollection>
    @available(iOS 18.0, visionOS 1.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias Iterator = Swift.IndexingIterator<RealityFoundation.RealityRenderer.EntityCollection>
    @available(iOS 18.0, visionOS 1.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias SubSequence = Swift.Slice<RealityFoundation.RealityRenderer.EntityCollection>
  }
  public struct CameraSettings {
    public var isToneMappingEnabled: Swift.Bool
    public struct ColorBackground {
      public static func color(_ color: CoreGraphics.CGColor) -> RealityFoundation.RealityRenderer.CameraSettings.ColorBackground
      public static func outputTexture() -> RealityFoundation.RealityRenderer.CameraSettings.ColorBackground
    }
    public var colorBackground: RealityFoundation.RealityRenderer.CameraSettings.ColorBackground
  }
  public struct CameraOutput {
    public struct RelativeViewport {
      public var originX: Swift.Double
      public var originY: Swift.Double
      public var width: Swift.Double
      public var height: Swift.Double
      public init(originX: Swift.Double, originY: Swift.Double, width: Swift.Double, height: Swift.Double)
    }
    public struct Descriptor {
      public var colorTextures: [any Metal.MTLTexture]
      public var viewports: [RealityFoundation.RealityRenderer.CameraOutput.RelativeViewport]
      public static func singleProjection(colorTexture: any Metal.MTLTexture) -> RealityFoundation.RealityRenderer.CameraOutput.Descriptor
    }
    public var colorTextures: [any Metal.MTLTexture] {
      get
    }
    public var viewports: [RealityFoundation.RealityRenderer.CameraOutput.RelativeViewport] {
      get
    }
    public init(_ descriptor: RealityFoundation.RealityRenderer.CameraOutput.Descriptor) throws
  }
  @_Concurrency.MainActor public var entities: RealityFoundation.RealityRenderer.EntityCollection {
    get
    set
  }
  public func subscribe<E>(to event: E.Type, on sourceObject: (any RealityFoundation.EventSource)? = nil, componentType: (any RealityFoundation.Component.Type)? = nil, _ handler: @escaping (E) -> Swift.Void) -> RealityFoundation.EventSubscription where E : RealityFoundation.Event
  public struct ImageBasedLight {
    public var resource: RealityFoundation.EnvironmentResource?
    public var intensityExponent: Swift.Float
  }
  @_Concurrency.MainActor public var lighting: RealityFoundation.RealityRenderer.ImageBasedLight {
    get
    set
  }
  public var activeCamera: RealityFoundation.Entity?
  public var cameraSettings: RealityFoundation.RealityRenderer.CameraSettings
  public struct MetalEventAction {
    public let event: any Metal.MTLEvent
    public let value: Swift.UInt64
    public static func wait(for event: any Metal.MTLEvent, value: Swift.UInt64) -> RealityFoundation.RealityRenderer.MetalEventAction
    public static func signal(_ event: any Metal.MTLEvent, value: Swift.UInt64) -> RealityFoundation.RealityRenderer.MetalEventAction
  }
  @available(visionOS, unavailable)
  public var extendedDynamicRangeOutput: Swift.Bool {
    get
    set
  }
  @available(visionOS, unavailable)
  public var extendedDynamicRangeHeadroom: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor public init() throws
  @objc deinit
  @_Concurrency.MainActor public func update(_ deltaTime: Foundation.TimeInterval) throws
  @preconcurrency @_Concurrency.MainActor public func updateAndRender(deltaTime: Foundation.TimeInterval, cameraOutput: RealityFoundation.RealityRenderer.CameraOutput, whenScheduled: (@Sendable (RealityFoundation.RealityRenderer) -> Swift.Void)? = nil, onComplete: (@Sendable (RealityFoundation.RealityRenderer) -> Swift.Void)? = nil, actionsBeforeRender: [RealityFoundation.RealityRenderer.MetalEventAction] = [], actionsAfterRender: [RealityFoundation.RealityRenderer.MetalEventAction] = []) throws
}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
extension RealityFoundation.RealityRenderer.CameraSettings {
  public var antialiasing: RealityFoundation.AntialiasingMode {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityActionGroup : RealityFoundation.__RKEntityAction {
  public enum Ordering {
    case concurrent
    case sequenced
    public static func == (a: RealityFoundation.__RKEntityActionGroup.Ordering, b: RealityFoundation.__RKEntityActionGroup.Ordering) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let infiniteLoopCount: Swift.Int
  public static let noLoopCount: Swift.Int
  public var actions: [RealityFoundation.__RKEntityAction] {
    get
  }
  public var ordering: RealityFoundation.__RKEntityActionGroup.Ordering {
    get
  }
  public var loopCount: Swift.Int {
    get
  }
  public init(actions: [RealityFoundation.__RKEntityAction], ordering: RealityFoundation.__RKEntityActionGroup.Ordering, loopCount: Swift.Int? = __RKEntityActionGroup.noLoopCount)
  override public func preloadAssets()
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  public func allActions() -> [RealityFoundation.__RKEntityAction]
  override public func isExclusiveWith(action: RealityFoundation.__RKEntityAction) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  override public func stop() -> Swift.Bool
  override public var description: Swift.String {
    get
  }
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct PhysicsBodyComponent : RealityFoundation.Component, Swift.Equatable {
  public var mode: RealityFoundation.PhysicsBodyMode
  public var massProperties: RealityFoundation.PhysicsMassProperties
  public var material: RealityFoundation.PhysicsMaterialResource
  public var isTranslationLocked: (x: Swift.Bool, y: Swift.Bool, z: Swift.Bool)
  public var isRotationLocked: (x: Swift.Bool, y: Swift.Bool, z: Swift.Bool)
  public var isContinuousCollisionDetectionEnabled: Swift.Bool
  public init()
  public init(massProperties: RealityFoundation.PhysicsMassProperties = .default, material: RealityFoundation.PhysicsMaterialResource? = nil, mode: RealityFoundation.PhysicsBodyMode = .dynamic)
  @preconcurrency @_Concurrency.MainActor public init(shapes: [RealityFoundation.ShapeResource], density: Swift.Float, material: RealityFoundation.PhysicsMaterialResource? = nil, mode: RealityFoundation.PhysicsBodyMode = .dynamic)
  @preconcurrency @_Concurrency.MainActor public init(shapes: [RealityFoundation.ShapeResource], mass: Swift.Float, material: RealityFoundation.PhysicsMaterialResource? = nil, mode: RealityFoundation.PhysicsBodyMode = .dynamic)
  @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.PhysicsBodyComponent
  @_Concurrency.MainActor @preconcurrency public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
  public static func == (lhs: RealityFoundation.PhysicsBodyComponent, rhs: RealityFoundation.PhysicsBodyComponent) -> Swift.Bool
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.PhysicsBodyComponent {
  public var isAffectedByGravity: Swift.Bool {
    get
    set
  }
  public var linearDamping: Swift.Float {
    get
    set
  }
  public var angularDamping: Swift.Float {
    get
    set
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct EmphasizeAction : RealityFoundation.EntityAction, Swift.Codable {
  public enum EmphasisAnimationStyle : Swift.Int, Swift.Codable {
    case basic
    case playful
    case wild
    public init?(rawValue: Swift.Int)
    @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum EmphasisMotionType : Swift.Int, Swift.Codable {
    case pop
    case blink
    case bounce
    case flip
    case float
    case jiggle
    case pulse
    case spin
    public init?(rawValue: Swift.Int)
    @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var motionType: RealityFoundation.EmphasizeAction.EmphasisMotionType
  public var style: RealityFoundation.EmphasizeAction.EmphasisAnimationStyle
  public var animatedValueType: (any RealityFoundation.AnimatableData.Type)? {
    get
  }
  public var isAdditive: Swift.Bool
  public init(motionType: RealityFoundation.EmphasizeAction.EmphasisMotionType, style: RealityFoundation.EmphasizeAction.EmphasisAnimationStyle = .basic, isAdditive: Swift.Bool = false)
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias EventParameterType = Swift.Never
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol __RKRuntimeSceneCoordinatorObserver : AnyObject {
  @available(macOS 10.15, iOS 13.0, macCatalyst 14.0, *)
  func runtimeSceneCoordinator(_ coordinator: RealityFoundation.__RKRuntimeSceneCoordinator, willSwapFromEntity fromEntity: RealityFoundation.Entity, toEntity: RealityFoundation.Entity?, anchoringTarget: RealityFoundation.AnchoringComponent.Target?)
  @available(macOS 10.15, iOS 13.0, macCatalyst 14.0, *)
  func runtimeSceneCoordinator(_ coordinator: RealityFoundation.__RKRuntimeSceneCoordinator, didSwapFromEntity fromEntity: RealityFoundation.Entity, toEntity: RealityFoundation.Entity?, anchoringTarget: RealityFoundation.AnchoringComponent.Target?)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKRuntimeSceneCoordinator {
  public init()
  @available(macOS 10.15, iOS 13.0, macCatalyst 14.0, *)
  public func willSwap(fromEntity: RealityFoundation.Entity, toEntity: RealityFoundation.Entity?, anchoringTarget: RealityFoundation.AnchoringComponent.Target?)
  @available(macOS 10.15, iOS 13.0, macCatalyst 14.0, *)
  public func didSwap(fromEntity: RealityFoundation.Entity, toEntity: RealityFoundation.Entity?, anchoringTarget: RealityFoundation.AnchoringComponent.Target?)
  public func addObserver(observer: any RealityFoundation.__RKRuntimeSceneCoordinatorObserver)
  public func removeObserver(observer: any RealityFoundation.__RKRuntimeSceneCoordinatorObserver)
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __REAnchoring {
  public var type: RealityFoundation.__REAnchoringType? {
    get
    set
  }
  @_hasMissingDesignatedInitializers public class Registration {
    final public let componentType: Swift.OpaquePointer
    @objc deinit
  }
  public static var registration: RealityFoundation.__REAnchoring.Registration?
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Scene {
  @_Concurrency.MainActor @preconcurrency public var __anchoringType: RealityFoundation.__REAnchoringType? {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  @_Concurrency.MainActor @preconcurrency public var __anchoringType: RealityFoundation.__REAnchoringType? {
    get
    set
  }
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityDragTrigger : RealityFoundation.__RKEntityTrigger {
  override public init()
  @objc deinit
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct BillboardAction : RealityFoundation.EntityAction, Swift.Codable {
  public struct Transition : Swift.Codable {
    public var duration: Foundation.TimeInterval
    public var timingFunction: RealityFoundation.AnimationTimingFunction
    public init(duration: Foundation.TimeInterval = 0, timingFunction: RealityFoundation.AnimationTimingFunction = .default)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public var transitionIn: RealityFoundation.BillboardAction.Transition
  public var transitionOut: RealityFoundation.BillboardAction.Transition
  public var animatedValueType: (any RealityFoundation.AnimatableData.Type)? {
    get
  }
  public init(transitionIn: RealityFoundation.BillboardAction.Transition = .init(), transitionOut: RealityFoundation.BillboardAction.Transition = .init())
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias EventParameterType = Swift.Never
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKVisibilityShowScaleAnimation : RealityFoundation.__RKVisibilityBaseAnimation {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKVisibilityShowScaleDownAnimation : RealityFoundation.__RKVisibilityBaseAnimation {
  @objc deinit
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public protocol PhysicsJoint : Swift.Equatable {
  var pin0: RealityFoundation.GeometricPin { get set }
  var pin1: RealityFoundation.GeometricPin { get set }
  var checksForInternalCollisions: Swift.Bool { get }
  var isActive: Swift.Bool { get }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.PhysicsJoint {
  @discardableResult
  @_Concurrency.MainActor public func addToSimulation() throws -> RealityFoundation.Entity
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct PhysicsFixedJoint : RealityFoundation.PhysicsJoint {
  public var pin0: RealityFoundation.GeometricPin
  public var pin1: RealityFoundation.GeometricPin
  public let checksForInternalCollisions: Swift.Bool
  public var isActive: Swift.Bool {
    get
  }
  public init(pin0: RealityFoundation.GeometricPin, pin1: RealityFoundation.GeometricPin)
  public static func == (a: RealityFoundation.PhysicsFixedJoint, b: RealityFoundation.PhysicsFixedJoint) -> Swift.Bool
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct PhysicsSphericalJoint : RealityFoundation.PhysicsJoint {
  public var pin0: RealityFoundation.GeometricPin
  public var pin1: RealityFoundation.GeometricPin
  public var checksForInternalCollisions: Swift.Bool
  public var isActive: Swift.Bool {
    get
  }
  public var angularLimitInYZ: (Swift.Float, Swift.Float)?
  public init(pin0: RealityFoundation.GeometricPin, pin1: RealityFoundation.GeometricPin, angularLimitInYZ: (Swift.Float, Swift.Float)? = nil, checksForInternalCollisions: Swift.Bool = false)
  public static func == (lhs: RealityFoundation.PhysicsSphericalJoint, rhs: RealityFoundation.PhysicsSphericalJoint) -> Swift.Bool
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct PhysicsRevoluteJoint : RealityFoundation.PhysicsJoint {
  public var pin0: RealityFoundation.GeometricPin
  public var pin1: RealityFoundation.GeometricPin
  public var checksForInternalCollisions: Swift.Bool
  public var isActive: Swift.Bool {
    get
  }
  public var angularLimit: Swift.ClosedRange<Swift.Float>?
  public init(pin0: RealityFoundation.GeometricPin, pin1: RealityFoundation.GeometricPin, angularLimit: Swift.ClosedRange<Swift.Float>? = nil, checksForInternalCollisions: Swift.Bool = false)
  public static func == (a: RealityFoundation.PhysicsRevoluteJoint, b: RealityFoundation.PhysicsRevoluteJoint) -> Swift.Bool
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct PhysicsPrismaticJoint : RealityFoundation.PhysicsJoint {
  public var pin0: RealityFoundation.GeometricPin
  public var pin1: RealityFoundation.GeometricPin
  public var checksForInternalCollisions: Swift.Bool
  public var isActive: Swift.Bool {
    get
  }
  public var linearLimit: Swift.ClosedRange<Swift.Float>?
  public init(pin0: RealityFoundation.GeometricPin, pin1: RealityFoundation.GeometricPin, linearLimit: Swift.ClosedRange<Swift.Float>? = nil, checksForInternalCollisions: Swift.Bool = false)
  public static func == (a: RealityFoundation.PhysicsPrismaticJoint, b: RealityFoundation.PhysicsPrismaticJoint) -> Swift.Bool
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct PhysicsDistanceJoint : RealityFoundation.PhysicsJoint {
  public var pin0: RealityFoundation.GeometricPin
  public var pin1: RealityFoundation.GeometricPin
  public var checksForInternalCollisions: Swift.Bool
  public var isActive: Swift.Bool {
    get
  }
  public var distanceLimit: Swift.ClosedRange<Swift.Float>
  public var tolerance: Swift.Float
  public init(pin0: RealityFoundation.GeometricPin, pin1: RealityFoundation.GeometricPin, distanceLimit: Swift.ClosedRange<Swift.Float>, checksForInternalCollisions: Swift.Bool = false)
  public static func == (a: RealityFoundation.PhysicsDistanceJoint, b: RealityFoundation.PhysicsDistanceJoint) -> Swift.Bool
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct PhysicsCustomJoint : RealityFoundation.PhysicsJoint {
  public var pin0: RealityFoundation.GeometricPin
  public var pin1: RealityFoundation.GeometricPin
  public var checksForInternalCollisions: Swift.Bool
  public var isActive: Swift.Bool {
    get
  }
  public enum MotionLimit : Swift.Equatable {
    case fixed
    case unlimited
    case range(Swift.ClosedRange<Swift.Float>)
    public static func == (a: RealityFoundation.PhysicsCustomJoint.MotionLimit, b: RealityFoundation.PhysicsCustomJoint.MotionLimit) -> Swift.Bool
  }
  public var linearMotionAlongX: RealityFoundation.PhysicsCustomJoint.MotionLimit
  public var linearMotionAlongY: RealityFoundation.PhysicsCustomJoint.MotionLimit
  public var linearMotionAlongZ: RealityFoundation.PhysicsCustomJoint.MotionLimit
  public var angularMotionAroundX: RealityFoundation.PhysicsCustomJoint.MotionLimit
  public var angularMotionAroundY: RealityFoundation.PhysicsCustomJoint.MotionLimit
  public var angularMotionAroundZ: RealityFoundation.PhysicsCustomJoint.MotionLimit
  public init(pin0: RealityFoundation.GeometricPin, pin1: RealityFoundation.GeometricPin, linearMotionAlongX: RealityFoundation.PhysicsCustomJoint.MotionLimit = .fixed, linearMotionAlongY: RealityFoundation.PhysicsCustomJoint.MotionLimit = .fixed, linearMotionAlongZ: RealityFoundation.PhysicsCustomJoint.MotionLimit = .fixed, angularMotionAroundX: RealityFoundation.PhysicsCustomJoint.MotionLimit = .fixed, angularMotionAroundY: RealityFoundation.PhysicsCustomJoint.MotionLimit = .fixed, angularMotionAroundZ: RealityFoundation.PhysicsCustomJoint.MotionLimit = .fixed, checksForInternalCollisions: Swift.Bool = false)
  public static func == (a: RealityFoundation.PhysicsCustomJoint, b: RealityFoundation.PhysicsCustomJoint) -> Swift.Bool
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct PhysicsJoints : Swift.BidirectionalCollection, Swift.MutableCollection, Swift.RangeReplaceableCollection, Swift.Equatable, Swift.ExpressibleByArrayLiteral {
  public init()
  public init(arrayLiteral: any RealityFoundation.PhysicsJoint...)
  public init(_ sequence: any Swift.Sequence<any RealityFoundation.PhysicsJoint>)
  public let startIndex: Swift.Int
  public var endIndex: Swift.Int {
    get
  }
  public typealias Element = RealityFoundation.PhysicsJoint
  public typealias Index = Swift.Int
  public func index(before i: Swift.Int) -> Swift.Int
  public func index(after i: Swift.Int) -> Swift.Int
  public var count: Swift.Int {
    get
  }
  public subscript(index: Swift.Int) -> any RealityFoundation.PhysicsJoint {
    get
    set
  }
  public mutating func replaceSubrange<C>(_ subrange: Swift.Range<Swift.Int>, with newElements: C) where C : Swift.Collection, C.Element == any RealityFoundation.PhysicsJoint
  public static func == (lhs: RealityFoundation.PhysicsJoints, rhs: RealityFoundation.PhysicsJoints) -> Swift.Bool
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias ArrayLiteralElement = any RealityFoundation.PhysicsJoint
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias Indices = Swift.DefaultIndices<RealityFoundation.PhysicsJoints>
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias Iterator = Swift.IndexingIterator<RealityFoundation.PhysicsJoints>
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias SubSequence = Swift.Slice<RealityFoundation.PhysicsJoints>
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEmphasisSpinAnimation : RealityFoundation.__RKEmphasisBaseAnimation {
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityTagsComponent {
  public var tags: [Swift.String] {
    mutating get
    set(newTags)
  }
  @_hasMissingDesignatedInitializers public class Registration {
    @objc deinit
  }
  public static var registration: RealityFoundation.__RKEntityTagsComponent.Registration?
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  @_Concurrency.MainActor @preconcurrency public var __tags: [Swift.String] {
    get
    set
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKVisibilityShowDropAnimation : RealityFoundation.__RKVisibilityBaseAnimation {
  @objc deinit
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
@available(visionOS, unavailable)
extension RealityFoundation.CustomMaterial {
  @_hasMissingDesignatedInitializers final public class Program : Swift.Equatable, Swift.Hashable, Swift.Sendable {
    final public let surfaceShader: RealityFoundation.CustomMaterial.SurfaceShader
    final public let geometryModifier: RealityFoundation.CustomMaterial.GeometryModifier?
    final public let descriptor: RealityFoundation.CustomMaterial.Program.Descriptor
    public struct Descriptor : Swift.Equatable, Swift.Hashable, Swift.Sendable {
      public var lightingModel: RealityFoundation.CustomMaterial.LightingModel
      public var blendMode: RealityFoundation.MaterialParameterTypes.BlendMode?
      public init()
      public static func == (a: RealityFoundation.CustomMaterial.Program.Descriptor, b: RealityFoundation.CustomMaterial.Program.Descriptor) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public init(surfaceShader: RealityFoundation.CustomMaterial.SurfaceShader, geometryModifier: RealityFoundation.CustomMaterial.GeometryModifier? = nil, descriptor: RealityFoundation.CustomMaterial.Program.Descriptor) async throws
    public static func == (lhs: RealityFoundation.CustomMaterial.Program, rhs: RealityFoundation.CustomMaterial.Program) -> Swift.Bool
    final public func hash(into hasher: inout Swift.Hasher)
    @objc deinit
    final public var hashValue: Swift.Int {
      get
    }
  }
  public init(program: RealityFoundation.CustomMaterial.Program)
  public var program: RealityFoundation.CustomMaterial.Program {
    get
    set
  }
}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
public struct EnvironmentLightingConfigurationComponent : RealityFoundation.Component, Swift.Equatable {
  public var environmentLightingWeight: Swift.Float
  public init(environmentLightingWeight: Swift.Float = 1.0)
  public static func == (lhs: RealityFoundation.EnvironmentLightingConfigurationComponent, rhs: RealityFoundation.EnvironmentLightingConfigurationComponent) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.EnvironmentLightingConfigurationComponent
  @_Concurrency.MainActor @preconcurrency public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public class AudioPlaybackController {
  @_Concurrency.MainActor @preconcurrency weak public var entity: RealityFoundation.Entity? {
    get
  }
  @_Concurrency.MainActor @preconcurrency final public let resource: RealityFoundation.AudioResource
  @objc deinit
  @_Concurrency.MainActor @preconcurrency public var completionHandler: (() -> Swift.Void)? {
    get
    set
  }
}
extension RealityFoundation.AudioPlaybackController {
  @available(macOS, introduced: 10.15, deprecated: 15.0, renamed: "Audio.Decibel")
  @available(iOS, introduced: 13, deprecated: 18.0, renamed: "Audio.Decibel")
  @available(visionOS, deprecated, renamed: "Audio.Decibel")
  public typealias Decibel = Swift.Double
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.AudioPlaybackController {
  @_Concurrency.MainActor @preconcurrency public var speed: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var gain: RealityFoundation.AudioPlaybackController.Decibel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func fade(to newValue: RealityFoundation.AudioPlaybackController.Decibel, duration: Foundation.TimeInterval)
  @available(visionOS, unavailable)
  @available(macOS, introduced: 10.15, deprecated: 15.0, message: "Use SpatialAudioComponent.reverbLevel instead.")
  @available(macCatalyst, introduced: 13.0, deprecated: 18.0, message: "Use SpatialAudioComponent.reverbLevel instead.")
  @available(iOS, introduced: 13.0, deprecated: 18.0, message: "Use SpatialAudioComponent.reverbLevel instead.")
  @_Concurrency.MainActor @preconcurrency public var reverbSendLevel: RealityFoundation.AudioPlaybackController.Decibel {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.AudioPlaybackController {
  @_Concurrency.MainActor @preconcurrency public var isPlaying: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func play()
  @_Concurrency.MainActor @preconcurrency public func pause()
  @_Concurrency.MainActor @preconcurrency public func stop()
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.AudioPlaybackController {
  @_Concurrency.MainActor @preconcurrency public var __playbackPosition: Foundation.TimeInterval {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.AudioPlaybackController : Swift.Identifiable {
  @_Concurrency.MainActor @preconcurrency public var id: Swift.UInt64 {
    get
  }
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias ID = Swift.UInt64
}
@available(visionOS 1.0, macOS 15.0, macCatalyst 18.0, iOS 18.0, *)
extension RealityFoundation.AudioPlaybackController {
  @_Concurrency.MainActor @preconcurrency public func seek(to time: Swift.Duration)
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct __ResolvedRealityCoordinateSpace {
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct __RealityCoordinateSpaceContext {
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public protocol RealityCoordinateSpace {
  func _resolve(in context: RealityFoundation.__RealityCoordinateSpaceContext) -> RealityFoundation.__ResolvedRealityCoordinateSpace
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.Entity : RealityFoundation.RealityCoordinateSpace {
  @_Concurrency.MainActor @preconcurrency public func _resolve(in context: RealityFoundation.__RealityCoordinateSpaceContext) -> RealityFoundation.__ResolvedRealityCoordinateSpace
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct SceneRealityCoordinateSpace : RealityFoundation.RealityCoordinateSpace {
  public init()
  public func _resolve(in context: RealityFoundation.__RealityCoordinateSpaceContext) -> RealityFoundation.__ResolvedRealityCoordinateSpace
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.RealityCoordinateSpace where Self == RealityFoundation.SceneRealityCoordinateSpace {
  @_alwaysEmitIntoClient public static var scene: RealityFoundation.SceneRealityCoordinateSpace {
    get { SceneRealityCoordinateSpace() }
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
@available(visionOS, unavailable)
public struct CameraRealityCoordinateSpace : RealityFoundation.RealityCoordinateSpace {
  public init()
  public func _resolve(in context: RealityFoundation.__RealityCoordinateSpaceContext) -> RealityFoundation.__ResolvedRealityCoordinateSpace
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
@available(visionOS, unavailable)
extension RealityFoundation.RealityCoordinateSpace where Self == RealityFoundation.CameraRealityCoordinateSpace {
  @_alwaysEmitIntoClient public static var camera: RealityFoundation.CameraRealityCoordinateSpace {
    get { CameraRealityCoordinateSpace() }
  }
}
@available(iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
@available(visionOS, unavailable)
extension RealityFoundation.CustomMaterial.GeometryModifier {
  public var constantValues: Metal.MTLFunctionConstantValues {
    get
    set
  }
  public init(named name: Swift.String, in library: any Metal.MTLLibrary, constantValues: Metal.MTLFunctionConstantValues)
}
@available(iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
@available(visionOS, unavailable)
extension RealityFoundation.CustomMaterial.SurfaceShader {
  public var constantValues: Metal.MTLFunctionConstantValues {
    get
    set
  }
  public init(named name: Swift.String, in library: any Metal.MTLLibrary, constantValues: Metal.MTLFunctionConstantValues)
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct PlayAnimationAction : RealityFoundation.EntityAction, Swift.Codable {
  public var animationName: Swift.String
  public var transitionDuration: Foundation.TimeInterval
  public var blendLayer: Swift.Int
  public var separateAnimatedValue: Swift.Bool
  public var handoffType: RealityFoundation.AnimationHandoffType
  public var targetEntity: RealityFoundation.ActionEntityResolution
  public var useParentedControllers: Swift.Bool
  public var animatedValueType: (any RealityFoundation.AnimatableData.Type)? {
    get
  }
  public init(animationName: Swift.String, targetEntity: RealityFoundation.ActionEntityResolution = .sourceEntity, transitionDuration: Foundation.TimeInterval = 0.0, blendLayer: Swift.Int = 0, separateAnimatedValue: Swift.Bool = true, useParentedControllers: Swift.Bool = false, handoffType: RealityFoundation.AnimationHandoffType = .compose)
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias EventParameterType = Swift.Never
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __REAssetIdentifier : Swift.ExpressibleByStringLiteral, Swift.Codable, Swift.Sendable {
  public typealias StringLiteralType = Swift.String
  public init(stringLiteral value: Swift.String)
  public init(_ value: Swift.String)
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias ExtendedGraphemeClusterLiteralType = RealityFoundation.__REAssetIdentifier.StringLiteralType
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias UnicodeScalarLiteralType = RealityFoundation.__REAssetIdentifier.StringLiteralType
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __REAsset : Swift.CustomDebugStringConvertible {
  public static func __fromHandle(_ assetRef: RealityFoundation.__AssetRef) -> RealityFoundation.__REAsset
  public static func __fromHandleTransfer(_ assetRef: RealityFoundation.__AssetRef) -> RealityFoundation.__REAsset
  @objc deinit
  public var debugDescription: Swift.String {
    get
  }
  public var sanitizedDescription: Swift.String {
    get
  }
  public var __handle: RealityFoundation.__AssetRef {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__REAsset : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: RealityFoundation.__REAsset, rhs: RealityFoundation.__REAsset) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol __REAssetService {
  var mainBundle: RealityFoundation.__REAssetBundle { get }
  func loadBundle(at url: Foundation.URL) throws -> RealityFoundation.__REAssetBundle
  func makeBundle() -> RealityFoundation.__REAssetBundle
  var __handle: Swift.OpaquePointer { get }
  func __getDependencies(asset: RealityFoundation.__REAsset) -> [RealityFoundation.__REAsset]
  @available(*, deprecated, message: "This value is now unused by RealityKit")
  var syncLoadsShouldWaitForResourceSharing: Swift.Bool { get }
  var asyncLoadsShouldWaitForResourceSharing: Swift.Bool { get }
  var syncLoadsShouldInitiateResourceSharing: Swift.Bool { get }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__REAssetService {
  public func assetRef(named name: Swift.String, in realityArchiveURL: Foundation.URL) throws -> RealityFoundation.__REAsset
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@available(*, deprecated)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__REAssetService {
  public func resource<T>(ofType type: T.Type, at path: RealityFoundation.__REAssetIdentifier) -> T?
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency final public class __AssetLoadRequest {
  @objc deinit
  public enum ResourceSharingSchedulingRequirement : Swift.Equatable {
    case none
    case initiateNow
    case initiateNowAndWaitForPeers(blockECSUpdateSends: Swift.Bool = false)
    public static func == (a: RealityFoundation.__AssetLoadRequest.ResourceSharingSchedulingRequirement, b: RealityFoundation.__AssetLoadRequest.ResourceSharingSchedulingRequirement) -> Swift.Bool
  }
  convenience public init(serviceLocator: RealityFoundation.__ServiceLocator)
  convenience public init(assetService: any RealityFoundation.__REAssetService)
  @available(*, deprecated, renamed: "init(assetService:resourceSharingScheduling:)", message: "Use enum-based API instead")
  convenience public init(assetService: any RealityFoundation.__REAssetService, shouldWaitForPeers: Swift.Bool)
  @available(*, deprecated, renamed: "init(assetService:resourceSharingScheduling:)", message: "Use enum-based API instead")
  convenience public init(assetService: any RealityFoundation.__REAssetService, shouldLoadOnPeers: Swift.Bool, shouldWaitForPeers: Swift.Bool) throws
  convenience public init(assetService: any RealityFoundation.__REAssetService, resourceSharingScheduling scheduling: RealityFoundation.__AssetLoadRequest.ResourceSharingSchedulingRequirement) throws
  final public func add(asset: RealityFoundation.__AssetRef)
  final public func add(asset: RealityFoundation.__REAsset)
  @preconcurrency @_Concurrency.MainActor final public func add(_ entity: RealityFoundation.Entity, includeDescendants: Swift.Bool = true)
  final public var progress: Swift.Float {
    get
  }
  final public var error: (any Swift.Error)? {
    get
  }
  public typealias CompletionHandler = @convention(block) (_ success: Swift.Bool) -> Swift.Void
  @preconcurrency final public func setCompletionHandler(_ handler: @escaping RealityFoundation.__AssetLoadRequest.CompletionHandler)
  final public func waitForCompletion()
  final public func waitForCompletionFromNonEngineQueue()
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.Entity.ComponentSet : Swift.Sequence {
  @_Concurrency.MainActor @preconcurrency public __consuming func makeIterator() -> RealityFoundation.Entity.ComponentSet.Iterator
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> (any RealityFoundation.Component)?
    @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias Element = any RealityFoundation.Component
  }
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.Entity.ComponentSet : Swift.Collection {
  public typealias Element = any RealityFoundation.Component
  public struct Index : Swift.Comparable, Swift.Sendable {
    public static func < (lhs: RealityFoundation.Entity.ComponentSet.Index, rhs: RealityFoundation.Entity.ComponentSet.Index) -> Swift.Bool
    public static func == (a: RealityFoundation.Entity.ComponentSet.Index, b: RealityFoundation.Entity.ComponentSet.Index) -> Swift.Bool
  }
  @_Concurrency.MainActor @preconcurrency public var startIndex: RealityFoundation.Entity.ComponentSet.Index {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var endIndex: RealityFoundation.Entity.ComponentSet.Index {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var isEmpty: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func index(after index: RealityFoundation.Entity.ComponentSet.Index) -> RealityFoundation.Entity.ComponentSet.Index
  @_Concurrency.MainActor @preconcurrency public func formIndex(after i: inout RealityFoundation.Entity.ComponentSet.Index)
  @_Concurrency.MainActor @preconcurrency public func distance(from start: RealityFoundation.Entity.ComponentSet.Index, to end: RealityFoundation.Entity.ComponentSet.Index) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency public subscript(position: RealityFoundation.Entity.ComponentSet.Index) -> any RealityFoundation.Component {
    get
  }
  public struct Indices : Swift.Collection, Swift.Sendable {
    public typealias Index = RealityFoundation.Entity.ComponentSet.Index
    public typealias Element = RealityFoundation.Entity.ComponentSet.Index
    public typealias Indices = RealityFoundation.Entity.ComponentSet.Indices
    public typealias SubSequence = RealityFoundation.Entity.ComponentSet.Indices
    public var startIndex: RealityFoundation.Entity.ComponentSet.Indices.Index {
      get
    }
    public var endIndex: RealityFoundation.Entity.ComponentSet.Indices.Index {
      get
    }
    public func index(after i: RealityFoundation.Entity.ComponentSet.Indices.Index) -> RealityFoundation.Entity.ComponentSet.Indices.Index
    public func formIndex(after i: inout RealityFoundation.Entity.ComponentSet.Indices.Index)
    @inlinable public subscript(position: RealityFoundation.Entity.ComponentSet.Indices.Index) -> RealityFoundation.Entity.ComponentSet.Indices.Index {
      get { position }
    }
    public func distance(from start: RealityFoundation.Entity.ComponentSet.Indices.Index, to end: RealityFoundation.Entity.ComponentSet.Indices.Index) -> Swift.Int
    public subscript(bounds: Swift.Range<RealityFoundation.Entity.ComponentSet.Indices.Index>) -> RealityFoundation.Entity.ComponentSet.Indices {
      get
    }
    @inlinable public var indices: RealityFoundation.Entity.ComponentSet.Indices {
      get { self }
    }
    @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias Iterator = Swift.IndexingIterator<RealityFoundation.Entity.ComponentSet.Indices>
  }
  @_Concurrency.MainActor @preconcurrency public var indices: RealityFoundation.Entity.ComponentSet.Indices {
    get
  }
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias SubSequence = Swift.Slice<RealityFoundation.Entity.ComponentSet>
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public protocol HasSynchronization : RealityFoundation.Entity {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasSynchronization {
  @_Concurrency.MainActor @preconcurrency public var synchronization: RealityFoundation.SynchronizationComponent? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var isOwner: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func requestOwnership(timeout: Foundation.TimeInterval = 15, _ callback: @escaping (_ failure: RealityFoundation.SynchronizationComponent.OwnershipTransferCompletionResult) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func withUnsynchronized(_ changes: () -> Swift.Void)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct SynchronizationComponent : RealityFoundation.Component, Swift.Equatable {
  public enum OwnershipTransferMode {
    case autoAccept
    case manual
    public static func == (a: RealityFoundation.SynchronizationComponent.OwnershipTransferMode, b: RealityFoundation.SynchronizationComponent.OwnershipTransferMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum OwnershipTransferCompletionResult {
    case granted
    case timedOut
    public static func == (a: RealityFoundation.SynchronizationComponent.OwnershipTransferCompletionResult, b: RealityFoundation.SynchronizationComponent.OwnershipTransferCompletionResult) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var identifier: Swift.UInt64 {
    get
  }
  public var isOwner: Swift.Bool {
    get
  }
  public var ownershipTransferMode: RealityFoundation.SynchronizationComponent.OwnershipTransferMode
  public init()
  @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.SynchronizationComponent
  @_Concurrency.MainActor @preconcurrency public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
  public static func == (lhs: RealityFoundation.SynchronizationComponent, rhs: RealityFoundation.SynchronizationComponent) -> Swift.Bool
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct OrbitEntityAction : RealityFoundation.EntityAction, Swift.Codable {
  public var pivotEntity: RealityFoundation.ActionEntityResolution
  public var revolutions: Swift.Float
  public var orbitalAxis: Swift.SIMD3<Swift.Float>
  public var isOrientedToPath: Swift.Bool
  public var animatedValueType: (any RealityFoundation.AnimatableData.Type)? {
    get
  }
  public var isAdditive: Swift.Bool
  public init(pivotEntity: RealityFoundation.ActionEntityResolution, revolutions: Swift.Float, orbitalAxis: Swift.SIMD3<Swift.Float> = [0, 1, 0], isOrientedToPath: Swift.Bool = false, isAdditive: Swift.Bool = false)
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias EventParameterType = Swift.Never
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasModel {
  @_Concurrency.MainActor @preconcurrency public var jointNames: [Swift.String] {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var jointTransforms: [RealityFoundation.Transform] {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public enum BlendWeight : Swift.Equatable {
  case value(_: Swift.Float)
  case parameter(_: Swift.String, defaultWeight: Swift.Float = 1.0)
  case bindTarget(_: RealityFoundation.BindTarget, defaultWeight: Swift.Float = 1.0)
  public static func == (lhs: RealityFoundation.BlendWeight, rhs: RealityFoundation.BlendWeight) -> Swift.Bool
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public protocol BlendTreeNode {
  var name: Swift.String { get set }
  var weight: RealityFoundation.BlendWeight { get set }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct BlendTreeSourceNode : RealityFoundation.BlendTreeNode {
  public init(source: any RealityFoundation.AnimationDefinition, name: Swift.String = "", weight: RealityFoundation.BlendWeight = .value(1.0))
  public var source: (any RealityFoundation.AnimationDefinition)?
  public var name: Swift.String
  public var weight: RealityFoundation.BlendWeight
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct BlendTreeBlendNode : RealityFoundation.BlendTreeNode {
  public init(sources: [any RealityFoundation.BlendTreeNode], name: Swift.String = "", weight: RealityFoundation.BlendWeight = .value(1.0), isAdditive: Swift.Bool = false)
  public var sources: [any RealityFoundation.BlendTreeNode]
  public var isAdditive: Swift.Bool
  public var name: Swift.String
  public var weight: RealityFoundation.BlendWeight
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct BlendTreeInvalidNode : RealityFoundation.BlendTreeNode {
  public var name: Swift.String
  public var weight: RealityFoundation.BlendWeight
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public func blend(_ x: any RealityFoundation.BlendTreeNode, _ y: any RealityFoundation.BlendTreeNode, name: Swift.String = "", isAdditive: Swift.Bool = false) -> any RealityFoundation.BlendTreeNode
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public func blend(sources: [any RealityFoundation.BlendTreeNode], name: Swift.String = "", isAdditive: Swift.Bool = false) -> any RealityFoundation.BlendTreeNode
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct BlendTreeAnimation<Value> : RealityFoundation.AnimationDefinition where Value : RealityFoundation.AnimatableData {
  public init(_ root: any RealityFoundation.BlendTreeNode, name: Swift.String = "", isAdditive: Swift.Bool = false, bindTarget: RealityFoundation.BindTarget? = nil, blendLayer: Swift.Int32 = 0, repeatMode: RealityFoundation.AnimationRepeatMode = .none, fillMode: RealityFoundation.AnimationFillMode = [], trimStart: Foundation.TimeInterval? = nil, trimEnd: Foundation.TimeInterval? = nil, trimDuration: Foundation.TimeInterval? = nil, offset: Foundation.TimeInterval = 0, delay: Foundation.TimeInterval = 0, speed: Swift.Float = 1)
  public var root: any RealityFoundation.BlendTreeNode {
    get
    set
  }
  public var name: Swift.String {
    get
    set
  }
  public var blendLayer: Swift.Int32 {
    get
    set
  }
  public var bindTarget: RealityFoundation.BindTarget {
    get
    set
  }
  public var fillMode: RealityFoundation.AnimationFillMode {
    get
    set
  }
  public var isAdditive: Swift.Bool {
    get
    set
  }
  public var trimStart: Foundation.TimeInterval? {
    get
    set
  }
  public var trimEnd: Foundation.TimeInterval? {
    get
    set
  }
  public var trimDuration: Foundation.TimeInterval? {
    get
    set
  }
  public var offset: Foundation.TimeInterval {
    get
    set
  }
  public var delay: Foundation.TimeInterval {
    get
    set
  }
  public var speed: Swift.Float {
    get
    set
  }
  public var repeatMode: RealityFoundation.AnimationRepeatMode {
    get
    set
  }
  public var duration: Foundation.TimeInterval {
    get
  }
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKSceneAssetLookupTable {
  public static let shared: RealityFoundation.__RKSceneAssetLookupTable
  public func reSceneAsset(for uuid: Foundation.UUID) -> RealityFoundation.__REAsset?
  public func registerRESceneAsset(_ reSceneAsset: RealityFoundation.__REAsset, for uuid: Foundation.UUID)
  public func removeAllRESceneAssets()
  @objc deinit
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct QueryResult<Element> {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.QueryResult : Swift.Sequence {
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> Element?
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public func makeIterator() -> RealityFoundation.QueryResult<Element>.Iterator
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKVisibilityShowRiseAnimation : RealityFoundation.__RKVisibilityBaseAnimation {
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension Swift.SIMD3 where Scalar == Swift.Float {
  @usableFromInline
  internal var _xy: Swift.SIMD2<Swift.Float> {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension Swift.SIMD4 where Scalar == Swift.Float {
  @usableFromInline
  internal var _xyz: Swift.SIMD3<Swift.Float> {
    get
    set
  }
}
@available(iOS 17.0, macOS 12.0, macCatalyst 15.0, *)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct PhotogrammetrySample : Swift.Identifiable {
  public let id: Swift.Int
  public let image: CoreVideo.CVPixelBuffer
  public var metadata: [Swift.String : Any] {
    get
    set
  }
  public var depthDataMap: CoreVideo.CVPixelBuffer? {
    get
    set
  }
  public var gravity: CoreMotion.CMAcceleration? {
    get
    set
  }
  public var objectMask: CoreVideo.CVPixelBuffer? {
    get
    set
  }
  public init(id: Swift.Int, image: CoreVideo.CVPixelBuffer)
  @available(iOS 17.0, macOS 12.0, macCatalyst 15.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias ID = Swift.Int
}
@available(macOS 12.0, macCatalyst 15.0, iOS 18.0, *)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension RealityFoundation.PhotogrammetrySample : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension RealityFoundation.PhotogrammetrySample {
  @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  @available(visionOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public init(contentsOf url: Foundation.URL) throws
  @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  @available(visionOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public init(contentsOf url: Foundation.URL) async throws
  @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  @available(visionOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public var captureTime: Foundation.Date? {
    get
  }
  @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  @available(visionOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public var boundingBox: simd.simd_float4x4? {
    get
  }
  @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  @available(visionOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public var depthConfidenceMap: CoreVideo.CVPixelBuffer? {
    get
  }
  @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  @available(visionOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public struct Camera {
    public var id: Swift.UInt32
    public var intrinsics: simd.simd_float3x3
    public var transform: simd.simd_float4x4
    public var calibrationData: AVFoundation.AVCameraCalibrationData?
  }
  @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  @available(visionOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public var camera: RealityFoundation.PhotogrammetrySample.Camera? {
    get
  }
  @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  @available(visionOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public var sessionID: Foundation.UUID? {
    get
  }
  @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  @available(visionOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public var scanPassID: Swift.Int? {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __REAnchoringType : Swift.Codable, Swift.Equatable {
  case surface(alignment: RealityFoundation.__REAnchoringType.Alignment, classification: RealityFoundation.__REAnchoringType.Classification)
  case image(url: Foundation.URL, physicalWidth: Foundation.Measurement<Foundation.UnitLength>)
  case face(meshVertex: Swift.Int)
  case object(url: Foundation.URL)
  public enum Name : Swift.String, Swift.CaseIterable {
    case surface
    case image
    case face
    case object
    public init?(rawValue: Swift.String)
    @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
    public typealias AllCases = [RealityFoundation.__REAnchoringType.Name]
    @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
    public typealias RawValue = Swift.String
    nonisolated public static var allCases: [RealityFoundation.__REAnchoringType.Name] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var name: RealityFoundation.__REAnchoringType.Name {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public struct Alignment : Swift.OptionSet, Swift.Codable {
    public init(rawValue: Swift.Int)
    public let rawValue: Swift.Int
    public static let horizontal: RealityFoundation.__REAnchoringType.Alignment
    public static let vertical: RealityFoundation.__REAnchoringType.Alignment
    public static let any: RealityFoundation.__REAnchoringType.Alignment
    @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
    public typealias ArrayLiteralElement = RealityFoundation.__REAnchoringType.Alignment
    @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
    public typealias Element = RealityFoundation.__REAnchoringType.Alignment
    @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
    public typealias RawValue = Swift.Int
  }
  public struct Classification : Swift.OptionSet, Swift.Codable {
    public init(rawValue: Swift.Int)
    public let rawValue: Swift.Int
    public static let wall: RealityFoundation.__REAnchoringType.Classification
    public static let floor: RealityFoundation.__REAnchoringType.Classification
    public static let ceiling: RealityFoundation.__REAnchoringType.Classification
    public static let table: RealityFoundation.__REAnchoringType.Classification
    public static let seat: RealityFoundation.__REAnchoringType.Classification
    public static let any: RealityFoundation.__REAnchoringType.Classification
    @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
    public typealias ArrayLiteralElement = RealityFoundation.__REAnchoringType.Classification
    @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
    public typealias Element = RealityFoundation.__REAnchoringType.Classification
    @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
    public typealias RawValue = Swift.Int
  }
  public static func == (a: RealityFoundation.__REAnchoringType, b: RealityFoundation.__REAnchoringType) -> Swift.Bool
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
@available(visionOS, unavailable)
extension RealityFoundation.CustomMaterial {
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public typealias Texture = RealityFoundation.CustomMaterial.CustomMaterialTexture
  public typealias FaceCulling = RealityFoundation.MaterialParameterTypes.FaceCulling
  public typealias TextureCoordinateTransform = RealityFoundation.MaterialParameterTypes.TextureCoordinateTransform
  @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  @available(visionOS, unavailable)
  public typealias TriangleFillMode = RealityFoundation.MaterialParameterTypes.TriangleFillMode
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct CustomMaterialTexture {
    public var resource: RealityFoundation.TextureResource
    @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
    @available(visionOS, unavailable)
    public var swizzle: Metal.MTLTextureSwizzleChannels
    public init(_ resource: RealityFoundation.TextureResource)
    @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
    @available(visionOS, unavailable)
    public init(_ resource: RealityFoundation.TextureResource, _ swizzle: Metal.MTLTextureSwizzleChannels)
    public init(_ texture: RealityFoundation.MaterialParameters.Texture)
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct BaseColor {
    public static let __tintKey: Swift.String
    public var __tint: CoreGraphics.CGColor
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.CustomMaterial.Texture?
    @available(*, deprecated, message: "Default textures are no longer needed")
    public static var __defaultTexture: (any RealityFoundation.__REAssetService) -> RealityFoundation.TextureResource {
      get
    }
    public init(_ value: RealityFoundation.PhysicallyBasedMaterial.BaseColor)
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct Metallic : Swift.ExpressibleByFloatLiteral {
    public static let __scaleKey: Swift.String
    public var scale: Swift.Float
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.CustomMaterial.Texture?
    @available(*, deprecated, message: "Default textures are no longer needed")
    public static var __defaultTexture: (any RealityFoundation.__REAssetService) -> RealityFoundation.TextureResource {
      get
    }
    public init(scale: Swift.Float = 1.0, texture: RealityFoundation.CustomMaterial.Texture? = nil)
    public init(floatLiteral value: Swift.Float)
    public init(_ value: RealityFoundation.PhysicallyBasedMaterial.Metallic)
    @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
    public typealias FloatLiteralType = Swift.Float
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct Roughness : Swift.ExpressibleByFloatLiteral {
    public static let __scaleKey: Swift.String
    public var scale: Swift.Float
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.CustomMaterial.Texture?
    @available(*, deprecated, message: "Default textures are no longer needed")
    public static var __defaultTexture: (any RealityFoundation.__REAssetService) -> RealityFoundation.TextureResource {
      get
    }
    public init(scale: Swift.Float = 1.0, texture: RealityFoundation.CustomMaterial.Texture? = nil)
    public init(floatLiteral value: Swift.Float)
    public init(_ value: RealityFoundation.PhysicallyBasedMaterial.Roughness)
    @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
    public typealias FloatLiteralType = Swift.Float
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct EmissiveColor {
    public static let __colorKey: Swift.String
    public var __color: CoreGraphics.CGColor
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.CustomMaterial.Texture?
    @available(*, deprecated, message: "Default textures are no longer needed")
    public static var __defaultTexture: (any RealityFoundation.__REAssetService) -> RealityFoundation.TextureResource {
      get
    }
    public init(_ value: RealityFoundation.PhysicallyBasedMaterial.EmissiveColor)
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct Specular : Swift.ExpressibleByFloatLiteral {
    public static let __scaleKey: Swift.String
    public var scale: Swift.Float
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.CustomMaterial.Texture?
    @available(*, deprecated, message: "Default textures are no longer needed")
    public static var __defaultTexture: (any RealityFoundation.__REAssetService) -> RealityFoundation.TextureResource {
      get
    }
    public init(scale: Swift.Float = 1.0, texture: RealityFoundation.CustomMaterial.Texture? = nil)
    public init(floatLiteral value: Swift.Float)
    public init(_ value: RealityFoundation.PhysicallyBasedMaterial.Specular)
    @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
    public typealias FloatLiteralType = Swift.Float
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public enum Blending {
    case opaque
    case transparent(opacity: RealityFoundation.CustomMaterial.Opacity)
    public init(blending value: RealityFoundation.PhysicallyBasedMaterial.Blending)
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct Opacity : Swift.ExpressibleByFloatLiteral {
    public static let __scaleKey: Swift.String
    public var scale: Swift.Float
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.CustomMaterial.Texture?
    @available(*, deprecated, message: "Default textures are no longer needed")
    public static var __defaultTexture: (any RealityFoundation.__REAssetService) -> RealityFoundation.TextureResource {
      get
    }
    public init(scale: Swift.Float = 1.0, texture: RealityFoundation.CustomMaterial.Texture? = nil)
    public init(floatLiteral value: Swift.Float)
    public init(_ value: RealityFoundation.PhysicallyBasedMaterial.Opacity)
    @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
    public typealias FloatLiteralType = Swift.Float
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct Clearcoat : Swift.ExpressibleByFloatLiteral {
    public static let __scaleKey: Swift.String
    public var scale: Swift.Float
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.CustomMaterial.Texture?
    @available(*, deprecated, message: "Default textures are no longer needed")
    public static var __defaultTexture: (any RealityFoundation.__REAssetService) -> RealityFoundation.TextureResource {
      get
    }
    public init(scale: Swift.Float = 1.0, texture: RealityFoundation.CustomMaterial.Texture? = nil)
    public init(floatLiteral value: Swift.Float)
    public init(_ value: RealityFoundation.PhysicallyBasedMaterial.Clearcoat)
    @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
    public typealias FloatLiteralType = Swift.Float
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct ClearcoatRoughness : Swift.ExpressibleByFloatLiteral {
    public static let __scaleKey: Swift.String
    public var scale: Swift.Float
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.CustomMaterial.Texture?
    @available(*, deprecated, message: "Default textures are no longer needed")
    public static var __defaultTexture: (any RealityFoundation.__REAssetService) -> RealityFoundation.TextureResource {
      get
    }
    public init(scale: Swift.Float = 1.0, texture: RealityFoundation.CustomMaterial.Texture? = nil)
    public init(floatLiteral value: Swift.Float)
    public init(_ value: RealityFoundation.PhysicallyBasedMaterial.ClearcoatRoughness)
    @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
    public typealias FloatLiteralType = Swift.Float
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct Normal {
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.CustomMaterial.Texture?
    @available(*, deprecated, message: "Default textures are no longer needed")
    public static var __defaultTexture: (any RealityFoundation.__REAssetService) -> RealityFoundation.TextureResource {
      get
    }
    public init(texture: RealityFoundation.CustomMaterial.Texture? = nil)
    public init(_ value: RealityFoundation.PhysicallyBasedMaterial.Normal)
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct AmbientOcclusion {
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.CustomMaterial.Texture?
    @available(*, deprecated, message: "Default textures are no longer needed")
    public static var __defaultTexture: (any RealityFoundation.__REAssetService) -> RealityFoundation.TextureResource {
      get
    }
    public init(texture: RealityFoundation.CustomMaterial.Texture? = nil)
    public init(_ value: RealityFoundation.PhysicallyBasedMaterial.AmbientOcclusion)
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
@available(visionOS, unavailable)
extension RealityFoundation.CustomMaterial {
  public struct ClearcoatNormal {
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.CustomMaterial.Texture?
    public init(texture: RealityFoundation.CustomMaterial.Texture? = nil)
    public init(_ value: RealityFoundation.PhysicallyBasedMaterial.ClearcoatNormal)
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEmphasisPulseAnimation : RealityFoundation.__RKEmphasisBaseAnimation {
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol __SceneService {
  var scenes: [RealityFoundation.Scene] { get }
  @preconcurrency @_Concurrency.MainActor func append(scene: RealityFoundation.Scene)
  @preconcurrency @_Concurrency.MainActor func remove(scene: RealityFoundation.Scene)
  var coreECSManager: RealityFoundation.__REECSManagerRef { get }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RKEntityMoveSelection : Swift.String, Swift.Codable, Swift.CaseIterable {
  case local
  case absolute
  public init?(rawValue: Swift.String)
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias AllCases = [RealityFoundation.__RKEntityMoveSelection]
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [RealityFoundation.__RKEntityMoveSelection] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RKEntityMoveEase : Swift.String, Swift.Codable, Swift.CaseIterable {
  case none
  case back
  case bounce
  case circle
  case elastic
  case exponential
  case hermite
  case log
  case power
  case sine
  public init?(rawValue: Swift.String)
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias AllCases = [RealityFoundation.__RKEntityMoveEase]
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [RealityFoundation.__RKEntityMoveEase] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RKEntityMoveEaseType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case easeIn
  case easeOut
  case easeInEaseOut
  public init?(rawValue: Swift.String)
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias AllCases = [RealityFoundation.__RKEntityMoveEaseType]
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [RealityFoundation.__RKEntityMoveEaseType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityTransformAction : RealityFoundation.__RKEntityAction {
  public var relativeToEntity: RealityFoundation.Entity?
  convenience public init(targetEntity: RealityFoundation.Entity?, location: Swift.SIMD3<Swift.Float>?, orientation: simd.simd_quatf?, scale: Swift.Float?, duration: Swift.Float, moveType: RealityFoundation.__RKEntityMoveSelection, ease: RealityFoundation.__RKEntityMoveEase = .none, easeType: RealityFoundation.__RKEntityMoveEaseType = .easeIn, respectPhysics: Swift.Bool = false, physicsAngularCoefficient: Swift.Float = 0.0, physicsLinearCoefficient: Swift.Float = 0.0)
  @available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
  public init(targetEntity: RealityFoundation.Entity?, location: Swift.SIMD3<Swift.Float>?, orientation: simd.simd_quatf?, scale: Swift.Float?, duration: Swift.Float, moveType: RealityFoundation.__RKEntityMoveSelection, ease: RealityFoundation.__RKEntityMoveEase = .none, easeType: RealityFoundation.__RKEntityMoveEaseType = .easeIn, respectPhysics: Swift.Bool = false, physicsAngularCoefficient: Swift.Float = 0.0, physicsLinearCoefficient: Swift.Float = 0.0, relativeToEntity: RealityFoundation.Entity? = nil)
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  override public func prefersInitialOrdering() -> Swift.Bool
  @objc deinit
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AudioFileGroupResource {
  @_Concurrency.MainActor @preconcurrency public static func load(named name: Swift.String, from scene: Swift.String, in bundle: Foundation.Bundle? = nil) throws -> RealityFoundation.AudioFileGroupResource
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct AnimationGroup : RealityFoundation.AnimationDefinition {
  public var group: [any RealityFoundation.AnimationDefinition] {
    get
    set
  }
  public var name: Swift.String {
    get
    set
  }
  public var blendLayer: Swift.Int32 {
    get
    set
  }
  public var bindTarget: RealityFoundation.BindTarget {
    get
    set
  }
  public var fillMode: RealityFoundation.AnimationFillMode {
    get
    set
  }
  public var additive: Swift.Bool {
    get
    set
  }
  public var trimStart: Foundation.TimeInterval? {
    get
    set
  }
  public var trimEnd: Foundation.TimeInterval? {
    get
    set
  }
  public var trimDuration: Foundation.TimeInterval? {
    get
    set
  }
  public var offset: Foundation.TimeInterval {
    get
    set
  }
  public var delay: Foundation.TimeInterval {
    get
    set
  }
  public var speed: Swift.Float {
    get
    set
  }
  public var repeatMode: RealityFoundation.AnimationRepeatMode {
    get
    set
  }
  public var duration: Foundation.TimeInterval {
    get
  }
  public init(group: [any RealityFoundation.AnimationDefinition], name: Swift.String = "", repeatMode: RealityFoundation.AnimationRepeatMode = .none, fillMode: RealityFoundation.AnimationFillMode = [], trimStart: Foundation.TimeInterval? = nil, trimEnd: Foundation.TimeInterval? = nil, trimDuration: Foundation.TimeInterval? = nil, offset: Foundation.TimeInterval = 0, delay: Foundation.TimeInterval = 0, speed: Swift.Float = 1.0)
  @available(*, deprecated, renamed: "group")
  public var group_: [any RealityFoundation.AnimationDefinition]? {
    get
    set
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AudioBufferResource {
  public struct Configuration {
    public var shouldLoop: Swift.Bool
    public var shouldRandomizeStartTime: Swift.Bool
    public var normalization: RealityFoundation.AudioResource.Normalization?
    public var calibration: RealityFoundation.AudioResource.Calibration?
    public var mixGroupName: Swift.String?
    public init(shouldLoop: Swift.Bool = false, shouldRandomizeStartTime: Swift.Bool = false, normalization: RealityFoundation.AudioResource.Normalization? = nil, calibration: RealityFoundation.AudioResource.Calibration? = nil, mixGroupName: Swift.String? = nil)
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AudioBufferResource.Configuration : Swift.Equatable, Swift.Hashable, Swift.Sendable {
  public static func == (a: RealityFoundation.AudioBufferResource.Configuration, b: RealityFoundation.AudioBufferResource.Configuration) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKVisibilityHideMoveOutAnimation : RealityFoundation.__RKVisibilityBaseAnimation {
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  @_Concurrency.MainActor @preconcurrency public func __remapUUIDs(entityIdentifierMapping: @escaping (Foundation.UUID) -> Foundation.UUID, interactionIdentifierMapping: @escaping (Foundation.UUID) -> Foundation.UUID)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol Material {
  var __resource: RealityFoundation.__MaterialResource { get }
  var __parameterBlock: RealityFoundation.__RKMaterialParameterBlock { get set }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.Material {
  public typealias Parameters = RealityFoundation.MaterialParameters
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.Material {
  public var name: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __MaterialResource {
  public var __coreAsset: RealityFoundation.__AssetRef {
    get
  }
  public var name: Swift.String {
    get
  }
  public var cullMode: Metal.MTLCullMode? {
    get
  }
  @available(visionOS, deprecated: 2.0, message: "Loading JSON based material assets is no longer supported. Please use our public material APIs instead.")
  @available(macOS, deprecated: 15.0, message: "Loading JSON based material assets is no longer supported. Please use our public material APIs instead.")
  @available(macCatalyst, deprecated: 18.0, message: "Loading JSON based material assets is no longer supported. Please use our public material APIs instead.")
  @available(iOS, deprecated: 18.0, message: "Loading JSON based material assets is no longer supported. Please use our public material APIs instead.")
  public static func __load(named name: Swift.String, in bundle: Foundation.Bundle? = nil) throws -> any RealityFoundation.Material
  @available(visionOS, deprecated: 2.0, message: "Loading JSON based material assets is no longer supported. Please use our public material APIs instead.")
  @available(macOS, deprecated: 15.0, message: "Loading JSON based material assets is no longer supported. Please use our public material APIs instead.")
  @available(macCatalyst, deprecated: 18.0, message: "Loading JSON based material assets is no longer supported. Please use our public material APIs instead.")
  @available(iOS, deprecated: 18.0, message: "Loading JSON based material assets is no longer supported. Please use our public material APIs instead.")
  public static func loadAsync(named name: Swift.String, in bundle: Foundation.Bundle? = nil) -> RealityFoundation.LoadRequest<any RealityFoundation.Material>
  public struct BuildParameters {
    public enum Value : Swift.Hashable {
      case bool(Swift.Bool)
      case int(Swift.Int)
      case float(Swift.Float)
      case simd2Float(Swift.SIMD2<Swift.Float>)
      case simd3Float(Swift.SIMD3<Swift.Float>)
      case simd4Float(Swift.SIMD4<Swift.Float>)
      public var asString: Swift.String {
        get
      }
      public static func == (a: RealityFoundation.__MaterialResource.BuildParameters.Value, b: RealityFoundation.__MaterialResource.BuildParameters.Value) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public var materialDefinition: RealityFoundation.__REAsset?
    public var functionConstants: [Swift.String : RealityFoundation.__MaterialResource.BuildParameters.Value]
    public var cullMode: Metal.MTLCullMode?
    public var passthroughBlur: Swift.Bool?
    public var vcaBlur: Swift.Bool?
    public var multiUVs: Swift.Bool?
    public var materialTextureParameterBindings: [Swift.String : Swift.String]
    public var materialBufferParameterBindings: [Swift.String : Swift.String]
    public init(materialDefinition: RealityFoundation.__REAsset? = nil, functionConstants: [Swift.String : RealityFoundation.__MaterialResource.BuildParameters.Value] = [:])
  }
  @available(visionOS, deprecated: 2.0, message: "Manually building material assets is no longer supported. Please use our public material APIs instead.")
  @available(macOS, deprecated: 15.0, message: "Manually building material assets is no longer supported. Please use our public material APIs instead.")
  @available(macCatalyst, deprecated: 18.0, message: "Manually building material assets is no longer supported. Please use our public material APIs instead.")
  @available(iOS, deprecated: 18.0, message: "Manually building material assets is no longer supported. Please use our public material APIs instead.")
  public static func load(_ params: RealityFoundation.__MaterialResource.BuildParameters, services: RealityFoundation.__ServiceLocator = .shared) throws -> any RealityFoundation.Material
  @available(visionOS, deprecated: 2.0, message: "Loading JSON based material assets is no longer supported. Please use our public material APIs instead.")
  @available(macOS, deprecated: 15.0, message: "Loading JSON based material assets is no longer supported. Please use our public material APIs instead.")
  @available(macCatalyst, deprecated: 18.0, message: "Loading JSON based material assets is no longer supported. Please use our public material APIs instead.")
  @available(iOS, deprecated: 18.0, message: "Loading JSON based material assets is no longer supported. Please use our public material APIs instead.")
  public static func loadAsync(_ params: RealityFoundation.__MaterialResource.BuildParameters, services: RealityFoundation.__ServiceLocator = .shared) -> RealityFoundation.LoadRequest<any RealityFoundation.Material>
  @available(visionOS, deprecated: 2.0, message: "Loading JSON based material assets is no longer supported. Please use our public material APIs instead.")
  @available(macOS, deprecated: 15.0, message: "Loading JSON based material assets is no longer supported. Please use our public material APIs instead.")
  @available(macCatalyst, deprecated: 18.0, message: "Loading JSON based material assets is no longer supported. Please use our public material APIs instead.")
  @available(iOS, deprecated: 18.0, message: "Loading JSON based material assets is no longer supported. Please use our public material APIs instead.")
  public static func load(named name: Swift.String, in file: Foundation.URL, services: RealityFoundation.__ServiceLocator = .shared) throws -> any RealityFoundation.Material
  @available(visionOS, deprecated: 2.0, message: "Loading JSON based material assets is no longer supported. Please use our public material APIs instead.")
  @available(macOS, deprecated: 15.0, message: "Loading JSON based material assets is no longer supported. Please use our public material APIs instead.")
  @available(macCatalyst, deprecated: 18.0, message: "Loading JSON based material assets is no longer supported. Please use our public material APIs instead.")
  @available(iOS, deprecated: 18.0, message: "Loading JSON based material assets is no longer supported. Please use our public material APIs instead.")
  public static func loadAsync(named name: Swift.String, in file: Foundation.URL, services: RealityFoundation.__ServiceLocator = .shared) -> RealityFoundation.LoadRequest<any RealityFoundation.Material>
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct SimpleMaterial : RealityFoundation.Material {
  public var __resource: RealityFoundation.__MaterialResource {
    get
  }
  public var __parameterBlock: RealityFoundation.__RKMaterialParameterBlock
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var color: RealityFoundation.SimpleMaterial.BaseColor {
    get
    set
  }
  @available(macOS, deprecated: 12.0, renamed: "color")
  @available(iOS, deprecated: 15.0, renamed: "color")
  @available(macCatalyst, deprecated: 15.0, renamed: "color")
  @available(visionOS, deprecated: 1.0, renamed: "color")
  public var __tintColor: CoreGraphics.CGColor {
    get
    set
  }
  @available(macOS, deprecated: 12.0, renamed: "color")
  @available(iOS, deprecated: 15.0, renamed: "color")
  @available(macCatalyst, deprecated: 15.0, renamed: "color")
  @available(visionOS, deprecated: 1.0, renamed: "color")
  public var __baseColor: RealityFoundation.__MaterialColorParameter {
    get
    set
  }
  public var roughness: RealityFoundation.MaterialScalarParameter {
    get
    set
  }
  public var metallic: RealityFoundation.MaterialScalarParameter {
    get
    set
  }
  public var __emissive: RealityFoundation.__MaterialColorParameter {
    get
    set
  }
  public var __usesTransparency: Swift.Bool {
    get
    set
  }
  public init()
  @available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  public typealias TriangleFillMode = RealityFoundation.MaterialParameterTypes.TriangleFillMode
  @available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  public var triangleFillMode: RealityFoundation.SimpleMaterial.TriangleFillMode {
    get
    set
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.SimpleMaterial {
  public var writesDepth: Swift.Bool {
    get
    set
  }
  public var readsDepth: Swift.Bool {
    get
    set
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.SimpleMaterial {
  public typealias FaceCulling = RealityFoundation.MaterialParameterTypes.FaceCulling
  public var faceCulling: RealityFoundation.SimpleMaterial.FaceCulling {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct OcclusionMaterial : RealityFoundation.Material, Swift.Sendable {
  public let __resource: RealityFoundation.__MaterialResource
  public var __parameterBlock: RealityFoundation.__RKMaterialParameterBlock
  @available(visionOS, unavailable)
  public let receivesDynamicLighting: Swift.Bool
  @available(visionOS, unavailable)
  public init(receivesDynamicLighting: Swift.Bool = false)
}
extension RealityFoundation.OcclusionMaterial {
  @available(visionOS 1.0, *)
  @available(macOS, unavailable)
  @available(iOS, unavailable)
  public init()
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.OcclusionMaterial {
  public var readsDepth: Swift.Bool {
    get
    set
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.OcclusionMaterial {
  public typealias FaceCulling = RealityFoundation.MaterialParameterTypes.FaceCulling
  public var faceCulling: RealityFoundation.OcclusionMaterial.FaceCulling {
    get
    set
  }
}
@available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct VideoMaterial : RealityFoundation.Material {
  public var __resource: RealityFoundation.__MaterialResource
  public var __parameterBlock: RealityFoundation.__RKMaterialParameterBlock
  public var __videoResource: RealityFoundation.__VideoResource
  @preconcurrency @_Concurrency.MainActor public init(avPlayer: AVFoundation.AVPlayer)
  @preconcurrency @_Concurrency.MainActor public var avPlayer: AVFoundation.AVPlayer? {
    get
    set
  }
  public var controller: RealityFoundation.VideoPlaybackController {
    get
  }
  @preconcurrency @_Concurrency.MainActor public static func __makeVideoMaterial(videoResource: RealityFoundation.__VideoResource) -> RealityFoundation.VideoMaterial
  @available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  public typealias TriangleFillMode = RealityFoundation.MaterialParameterTypes.TriangleFillMode
  @available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  public var triangleFillMode: RealityFoundation.VideoMaterial.TriangleFillMode {
    get
    set
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.VideoMaterial {
  public var writesDepth: Swift.Bool {
    get
    set
  }
  public var readsDepth: Swift.Bool {
    get
    set
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.VideoMaterial {
  public typealias FaceCulling = RealityFoundation.MaterialParameterTypes.FaceCulling
  public var faceCulling: RealityFoundation.VideoMaterial.FaceCulling {
    get
    set
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.VideoMaterial {
  public var videoRenderer: AVFoundation.AVSampleBufferVideoRenderer? {
    get
  }
  public init(videoRenderer: AVFoundation.AVSampleBufferVideoRenderer)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum MaterialScalarParameter : Swift.ExpressibleByFloatLiteral, Swift.ExpressibleByIntegerLiteral, Swift.Hashable {
  case float(Swift.Float)
  case texture(RealityFoundation.TextureResource)
  public init(floatLiteral value: Swift.Float)
  public init(integerLiteral value: Swift.Int)
  public static func == (lhs: RealityFoundation.MaterialScalarParameter, rhs: RealityFoundation.MaterialScalarParameter) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias FloatLiteralType = Swift.Float
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias IntegerLiteralType = Swift.Int
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __MaterialColorParameter : Swift._ExpressibleByColorLiteral, Swift.Hashable {
  case color(CoreGraphics.CGColor)
  case texture(RealityFoundation.TextureResource)
  public init(_colorLiteralRed red: Swift.Float, green: Swift.Float, blue: Swift.Float, alpha: Swift.Float)
  public static func == (lhs: RealityFoundation.__MaterialColorParameter, rhs: RealityFoundation.__MaterialColorParameter) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct PortalMaterial : RealityFoundation.Material, Swift.Sendable {
  public var __resource: RealityFoundation.__MaterialResource
  public var __parameterBlock: RealityFoundation.__RKMaterialParameterBlock
  public init()
  @available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  public typealias TriangleFillMode = RealityFoundation.MaterialParameterTypes.TriangleFillMode
  @available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  public var triangleFillMode: RealityFoundation.PortalMaterial.TriangleFillMode {
    get
    set
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.PortalMaterial {
  public typealias FaceCulling = RealityFoundation.MaterialParameterTypes.FaceCulling
  public var faceCulling: RealityFoundation.PortalMaterial.FaceCulling {
    get
    set
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct PortalComponent : RealityFoundation.Component {
  public var targetEntity: RealityFoundation.Entity? {
    get
    set
  }
  public struct ClippingPlane {
    public var position: Swift.SIMD3<Swift.Float>
    public var normal: Swift.SIMD3<Swift.Float>
    public init(position: Swift.SIMD3<Swift.Float>, normal: Swift.SIMD3<Swift.Float>)
  }
  public var clippingPlane: RealityFoundation.PortalComponent.ClippingPlane? {
    get
    set(newPlane)
  }
  public init(target: RealityFoundation.Entity, clippingPlane: RealityFoundation.PortalComponent.ClippingPlane? = nil)
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.PortalComponent {
  public struct Plane : Swift.Equatable {
    public var position: Swift.SIMD3<Swift.Float>
    public var normal: Swift.SIMD3<Swift.Float>
    public init(position: Swift.SIMD3<Swift.Float>, normal: Swift.SIMD3<Swift.Float>)
    public static func == (a: RealityFoundation.PortalComponent.Plane, b: RealityFoundation.PortalComponent.Plane) -> Swift.Bool
  }
  public enum ClippingMode : Swift.Equatable {
    case disabled
    case plane(RealityFoundation.PortalComponent.Plane)
    public static func == (a: RealityFoundation.PortalComponent.ClippingMode, b: RealityFoundation.PortalComponent.ClippingMode) -> Swift.Bool
  }
  public var clippingMode: RealityFoundation.PortalComponent.ClippingMode {
    get
    set
  }
  public enum CrossingMode : Swift.Equatable {
    case disabled
    case plane(RealityFoundation.PortalComponent.Plane)
    public static func == (a: RealityFoundation.PortalComponent.CrossingMode, b: RealityFoundation.PortalComponent.CrossingMode) -> Swift.Bool
  }
  public var crossingMode: RealityFoundation.PortalComponent.CrossingMode {
    get
    set
  }
  public init(target: RealityFoundation.Entity, clippingMode: RealityFoundation.PortalComponent.ClippingMode, crossingMode: RealityFoundation.PortalComponent.CrossingMode)
  public struct Options : Swift.OptionSet {
    public init(rawValue: Swift.UInt)
    public let rawValue: Swift.UInt
    public static let clipContents: RealityFoundation.PortalComponent.Options
    public static let allowCrossing: RealityFoundation.PortalComponent.Options
    @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias ArrayLiteralElement = RealityFoundation.PortalComponent.Options
    @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias Element = RealityFoundation.PortalComponent.Options
    @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias RawValue = Swift.UInt
  }
  public init(target: RealityFoundation.Entity, plane: RealityFoundation.PortalComponent.Plane, options: RealityFoundation.PortalComponent.Options)
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.PortalComponent.Plane {
  public static let positiveX: RealityFoundation.PortalComponent.Plane
  public static let negativeX: RealityFoundation.PortalComponent.Plane
  public static let positiveY: RealityFoundation.PortalComponent.Plane
  public static let negativeY: RealityFoundation.PortalComponent.Plane
  public static let positiveZ: RealityFoundation.PortalComponent.Plane
  public static let negativeZ: RealityFoundation.PortalComponent.Plane
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.PortalComponent {
  @preconcurrency @_Concurrency.MainActor public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.PortalComponent
  @preconcurrency @_Concurrency.MainActor public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity : Swift.CustomDebugStringConvertible {
  @_Concurrency.MainActor @preconcurrency public var debugDescription: Swift.String {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityUUIDComponent {
  @_hasMissingDesignatedInitializers public class Registration {
    final public let componentType: Swift.OpaquePointer
    @objc deinit
  }
  public static var registration: RealityFoundation.__RKEntityUUIDComponent.Registration?
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  @_Concurrency.MainActor @preconcurrency public var __interactionIdentifier: Foundation.UUID? {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol __RKEntityActionStateObserver : AnyObject {
  func action(_ action: RealityFoundation.__RKEntityAction, didChangeStateFrom fromState: RealityFoundation.__RKEntityAction.State, to toState: RealityFoundation.__RKEntityAction.State)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RKEntityActionMultiplePerformBehavior : Swift.String, Swift.Codable, Swift.CaseIterable {
  case allow
  case ignore
  case stopsAction
  public init?(rawValue: Swift.String)
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias AllCases = [RealityFoundation.__RKEntityActionMultiplePerformBehavior]
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [RealityFoundation.__RKEntityActionMultiplePerformBehavior] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKEntityActionContext {
  public var trigger: RealityFoundation.__RKEntityTrigger
  public var scene: RealityFoundation.Scene
  public init(trigger: RealityFoundation.__RKEntityTrigger, scene: RealityFoundation.Scene)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
open class __RKEntityAction : Swift.CustomStringConvertible, Foundation.NSCopying {
  public enum State : Swift.Equatable {
    case notStarted
    case running
    case progress(Swift.Double)
    case finished
    case stopped
    case failed
    public static func == (a: RealityFoundation.__RKEntityAction.State, b: RealityFoundation.__RKEntityAction.State) -> Swift.Bool
  }
  @preconcurrency @_Concurrency.MainActor public init(targetEntity: RealityFoundation.Entity? = nil)
  @objc deinit
  public typealias CompletionHandler = (_ success: Swift.Bool) -> Swift.Void
  public var targetEntity: RealityFoundation.Entity?
  public var completionHandler: RealityFoundation.__RKEntityAction.CompletionHandler?
  public var isAlternate: Swift.Bool
  public var isExclusive: Swift.Bool
  public var exclusiveBlocksForCompletion: Swift.Bool
  public var state: RealityFoundation.__RKEntityAction.State {
    get
    set
  }
  public var multiplePerformBehaviour: RealityFoundation.__RKEntityActionMultiplePerformBehavior
  public func performAction(with context: RealityFoundation.__RKEntityActionContext)
  public func shouldContinueOnPerform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  public func preloadAssets()
  @discardableResult
  @preconcurrency @_Concurrency.MainActor open func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  public func addStateObserver(_ observer: any RealityFoundation.__RKEntityActionStateObserver)
  public func removeStateObserver(_ observer: any RealityFoundation.__RKEntityActionStateObserver)
  public func reversed() -> RealityFoundation.__RKEntityAction?
  @preconcurrency @_Concurrency.MainActor public var description: Swift.String {
    get
  }
  @discardableResult
  @preconcurrency @_Concurrency.MainActor public func stop() -> Swift.Bool
  public func isExclusiveWith(action: RealityFoundation.__RKEntityAction) -> Swift.Bool
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  public func prefersInitialOrdering() -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityAction {
  public struct ActionStateObservation {
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct AdaptiveResolutionComponent : RealityFoundation.Component {
  public init()
  public var pixelsPerMeter: Swift.Float {
    get
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AdaptiveResolutionComponent {
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.AdaptiveResolutionComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@usableFromInline
internal struct RETransform {
  @usableFromInline
  internal var position: Swift.SIMD3<Swift.Float>
  @usableFromInline
  internal var orientation: simd.simd_quatf
  @usableFromInline
  internal var scale: Swift.SIMD3<Swift.Float>
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.RETransform {
  @inlinable internal var matrix: RealityFoundation.REMatrix4x4F {
    get {
            return REMatrix4x4F(translation: position, rotation: orientation, scale: scale)
        }
    set {
            (position, orientation, scale) = newValue.decompose()
        }
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct SpotLightComponent : RealityFoundation.Component, Swift.Equatable {
  public struct Shadow : RealityFoundation.Component, Swift.Equatable {
    public init()
    @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.SpotLightComponent.Shadow
    @_Concurrency.MainActor @preconcurrency public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
    public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
      get
    }
    public static func == (a: RealityFoundation.SpotLightComponent.Shadow, b: RealityFoundation.SpotLightComponent.Shadow) -> Swift.Bool
  }
  public var __color: CoreGraphics.CGColor
  public var intensity: Swift.Float
  public var innerAngleInDegrees: Swift.Float
  public var outerAngleInDegrees: Swift.Float
  public var attenuationRadius: Swift.Float
  @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.SpotLightComponent
  @_Concurrency.MainActor @preconcurrency public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
  public static func == (a: RealityFoundation.SpotLightComponent, b: RealityFoundation.SpotLightComponent) -> Swift.Bool
}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
extension RealityFoundation.SpotLightComponent {
  public var attenuationFalloffExponent: Swift.Float {
    get
    set
  }
}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
extension RealityFoundation.SpotLightComponent.Shadow {
  public typealias ShadowMapCullMode = RealityFoundation.MaterialParameterTypes.FaceCulling
  public var depthBias: Swift.Float {
    get
    set
  }
  public var cullModeOverride: RealityFoundation.SpotLightComponent.Shadow.ShadowMapCullMode? {
    get
    set
  }
  public enum ShadowClippingPlane : Swift.Equatable {
    case automatic
    case fixed(Swift.Float)
    public static func == (a: RealityFoundation.SpotLightComponent.Shadow.ShadowClippingPlane, b: RealityFoundation.SpotLightComponent.Shadow.ShadowClippingPlane) -> Swift.Bool
  }
  public var zNear: RealityFoundation.SpotLightComponent.Shadow.ShadowClippingPlane {
    get
    set
  }
  public var zFar: RealityFoundation.SpotLightComponent.Shadow.ShadowClippingPlane {
    get
    set
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct AudioMixGroupsComponent {
  public init(mixGroups: [RealityFoundation.AudioMixGroup] = [])
  public mutating func set(_ mixGroup: RealityFoundation.AudioMixGroup)
  public mutating func remove(named name: Swift.String)
  public func mixGroup(named name: Swift.String) -> RealityFoundation.AudioMixGroup?
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AudioMixGroupsComponent : Swift.Hashable {
  public static func == (a: RealityFoundation.AudioMixGroupsComponent, b: RealityFoundation.AudioMixGroupsComponent) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AudioMixGroupsComponent : RealityFoundation.Component {
  @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.AudioMixGroupsComponent
  @_Concurrency.MainActor @preconcurrency public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
@_Concurrency.MainActor @preconcurrency public class AudioFileGroupResource : RealityFoundation.AudioResource {
  @_Concurrency.MainActor @preconcurrency final public let resources: [RealityFoundation.AudioFileResource]
  @_Concurrency.MainActor @preconcurrency convenience public init(named name: Swift.String, from scene: Swift.String, in bundle: Foundation.Bundle) async throws
  @_Concurrency.MainActor @preconcurrency public init(_ resources: [RealityFoundation.AudioFileResource]) throws
  @_Concurrency.MainActor @preconcurrency public static func == (lhs: RealityFoundation.AudioFileGroupResource, rhs: RealityFoundation.AudioFileGroupResource) -> Swift.Bool
  @objc deinit
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AudioFileGroupResource : Swift.Hashable {
  @_Concurrency.MainActor @preconcurrency public func hash(into hasher: inout Swift.Hasher)
  nonisolated public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
open class __RKEntityTrigger : Swift.CustomStringConvertible {
  public init()
  public var reversible: Swift.Bool
  public var shouldReverse: Swift.Bool
  public var shouldFireAlternate: Swift.Bool
  @preconcurrency @_Concurrency.MainActor open func matches(with trigger: RealityFoundation.__RKEntityTrigger) -> Swift.Bool
  public var description: Swift.String {
    get
  }
  public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> RealityFoundation.__RKEntityTrigger?
  @objc deinit
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.__RKEntityTrigger : Foundation.NSCopying {
  @objc dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
extension RealityFoundation.AnimationView {
  @available(*, unavailable, renamed: "init(source:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)")
  public init(name: Swift.String, source: any RealityFoundation.AnimationDefinition, targetPath: RealityFoundation.BindTarget?, blendLayer: Swift.Int32, repeatMode: RealityFoundation.AnimationRepeatMode, fillMode: RealityFoundation.AnimationFillMode, trimStart: Foundation.TimeInterval?, trimEnd: Foundation.TimeInterval?, trimDuration: Foundation.TimeInterval?, offset: Foundation.TimeInterval, delay: Foundation.TimeInterval, speed: Swift.Float)
}
extension RealityFoundation.FromToByAnimation {
  @available(*, unavailable, renamed: "init(name:from:to:by:duration:timing:isAdditive:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)")
  public init(name: Swift.String = "", from: Value? = nil, to: Value? = nil, by: Value? = nil, duration: Foundation.TimeInterval = 1.0, additive: Swift.Bool = false, targetPath: RealityFoundation.BindTarget? = nil, blendLayer: Swift.Int32 = 0, repeatMode: RealityFoundation.AnimationRepeatMode = .none, fillMode: RealityFoundation.AnimationFillMode = [], trimStart: Foundation.TimeInterval? = nil, trimEnd: Foundation.TimeInterval? = nil, trimDuration: Foundation.TimeInterval? = nil, offset: Foundation.TimeInterval = 0, delay: Foundation.TimeInterval = 0, speed: Swift.Float = 1.0)
}
extension RealityFoundation.OrbitAnimation {
  @available(*, unavailable, renamed: "init(name:duration:axis:startTransform:spinClockwise:orientToPath:rotationCount:bindTarget:blendLayer:repeatMode:fillMode:isAdditive:trimStart:trimEnd:trimDuration:offset:delay:speed:)")
  public init(name: Swift.String = "", duration: Foundation.TimeInterval = 1.0, axis: Swift.SIMD3<Swift.Float> = .init(x: 0.0, y: 1.0, z: 0.0), startTransform: RealityFoundation.Transform = .identity, spinClockwise: Swift.Bool = true, orientToPath: Swift.Bool = false, rotationCount: Swift.Float = 1.0, additive: Swift.Bool = false, targetPath: RealityFoundation.BindTarget? = nil, blendLayer: Swift.Int32 = 0, repeatMode: RealityFoundation.AnimationRepeatMode = .none, fillMode: RealityFoundation.AnimationFillMode = [], trimStart: Foundation.TimeInterval? = nil, trimEnd: Foundation.TimeInterval? = nil, trimDuration: Foundation.TimeInterval? = nil, offset: Foundation.TimeInterval = 0, delay: Foundation.TimeInterval = 0, speed: Swift.Float = 1)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __REEventSubscriber<CoreEvent> : Combine.Subscriber where CoreEvent : Swift.Sendable {
  public typealias Input = CoreEvent
  public typealias Failure = Swift.Never
  public var combineIdentifier: Combine.CombineIdentifier {
    get
  }
  public func receive(subscription: any Combine.Subscription)
  public func receive(_ input: RealityFoundation.__REEventSubscriber<CoreEvent>.Input) -> Combine.Subscribers.Demand
  public func receive(completion: Combine.Subscribers.Completion<Swift.Never>)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKCustomTriggerNotification {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKCustomTrigger : RealityFoundation.__RKEntityTrigger {
  public init(identifier: Swift.String, customArguments: [Swift.String : Swift.String]? = [:])
  override public func matches(with trigger: RealityFoundation.__RKEntityTrigger) -> Swift.Bool
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityCustomTrigger : RealityFoundation.__RKEntityTrigger {
  public var targetEntity: RealityFoundation.Entity?
  public init(targetEntity: RealityFoundation.Entity?, identifier: Swift.String, customArguments: [Swift.String : Swift.String]? = [:])
  override public func matches(with trigger: RealityFoundation.__RKEntityTrigger) -> Swift.Bool
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> RealityFoundation.__RKEntityTrigger?
  @objc deinit
}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
public struct IKSolverDefinition : Swift.Identifiable {
  public typealias ID = Swift.Int
  public let id: RealityFoundation.IKSolverDefinition.ID
  public var rigDefinition: RealityFoundation.IKRig
  public init(id: RealityFoundation.IKSolverDefinition.ID, rig: RealityFoundation.IKRig)
}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
public struct IKRig {
  public var maxIterations: Swift.Int
  public var globalFkWeight: Swift.Float
  public var globalLimitsWeight: Swift.Float
  public var joints: RealityFoundation.IKRig.JointCollection
  public var constraints: RealityFoundation.IKRig.ConstraintsCollection
  public init(for skeleton: RealityFoundation.MeshResource.Skeleton) throws
  public struct Joint : Swift.Identifiable {
    public struct ID : Swift.Hashable, Swift.Equatable {
      public static func == (a: RealityFoundation.IKRig.Joint.ID, b: RealityFoundation.IKRig.Joint.ID) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public init(name: Swift.String, parentID: RealityFoundation.IKRig.Joint.ID? = nil, restTransform: RealityFoundation.Transform = .identity)
    public var id: RealityFoundation.IKRig.Joint.ID {
      get
    }
    public let name: Swift.String
    public var parentID: RealityFoundation.IKRig.Joint.ID?
    public var restTransform: RealityFoundation.Transform
    public var active: Swift.Bool
    public var fkWeightPerAxis: Swift.SIMD3<Swift.Float>
    public var rotationStiffness: Swift.SIMD3<Swift.Float>
    public var limits: RealityFoundation.IKRig.Joint.LimitsDefinition?
    public struct LimitsDefinition {
      public enum Axis {
        case x
        case y
        case z
        public static func == (a: RealityFoundation.IKRig.Joint.LimitsDefinition.Axis, b: RealityFoundation.IKRig.Joint.LimitsDefinition.Axis) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var weight: Swift.Float
      public var boneAxis: RealityFoundation.IKRig.Joint.LimitsDefinition.Axis
      public var minimumAngles: Swift.SIMD3<Swift.Float>
      public var maximumAngles: Swift.SIMD3<Swift.Float>
      public init(weight: Swift.Float = 1.0, boneAxis: RealityFoundation.IKRig.Joint.LimitsDefinition.Axis = .x, minimumAngles: Swift.SIMD3<Swift.Float> = [-2.0 * .pi, -2.0 * .pi, -2.0 * .pi], maximumAngles: Swift.SIMD3<Swift.Float> = [2.0 * .pi, 2.0 * .pi, 2.0 * .pi])
    }
  }
  public struct Constraint : Swift.Identifiable {
    public struct ID : Swift.Hashable, Swift.Equatable {
      public static func == (a: RealityFoundation.IKRig.Constraint.ID, b: RealityFoundation.IKRig.Constraint.ID) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public var id: RealityFoundation.IKRig.Constraint.ID {
      get
    }
    public var name: Swift.String
    public var jointName: Swift.String
    public var offset: RealityFoundation.Transform
    public var positionDemand: RealityFoundation.IKRig.Constraint.IKPositionDemand?
    public var orientationDemand: RealityFoundation.IKRig.Constraint.IKOrientationDemand?
    public struct IKPositionDemand {
      public init()
      public enum Mode {
        case reach
        case poleVector
        public static func == (a: RealityFoundation.IKRig.Constraint.IKPositionDemand.Mode, b: RealityFoundation.IKRig.Constraint.IKPositionDemand.Mode) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var mode: RealityFoundation.IKRig.Constraint.IKPositionDemand.Mode
      public var influenceDepthMaxJointCount: Swift.Int
      public var weight: Swift.SIMD3<Swift.Float>
    }
    public struct IKOrientationDemand {
      public init()
      public enum Mode {
        case orientation
        case additiveLookAt(targetAxis: Swift.SIMD3<Swift.Float>)
        case absoluteLookAt(targetAxis: Swift.SIMD3<Swift.Float>)
      }
      public var mode: RealityFoundation.IKRig.Constraint.IKOrientationDemand.Mode
      public var influenceDepthMaxJointCount: Swift.Int
      public var weight: Swift.SIMD3<Swift.Float>
    }
    public static func point(named name: Swift.String, on jointName: Swift.String, positionWeight: Swift.SIMD3<Swift.Float> = [1, 1, 1]) -> RealityFoundation.IKRig.Constraint
    public static func orient(named name: Swift.String, on jointName: Swift.String, orientationWeight: Swift.SIMD3<Swift.Float> = [1, 1, 1]) -> RealityFoundation.IKRig.Constraint
    public static func parent(named name: Swift.String, on jointName: Swift.String, positionWeight: Swift.SIMD3<Swift.Float> = [1, 1, 1], orientationWeight: Swift.SIMD3<Swift.Float> = [1, 1, 1]) -> RealityFoundation.IKRig.Constraint
    public static func lookAtAdditive(named name: Swift.String, on jointName: Swift.String, lookingAlong targetAxis: Swift.SIMD3<Swift.Float>, orientationWeight: Swift.SIMD3<Swift.Float> = [1, 1, 1]) -> RealityFoundation.IKRig.Constraint
    public static func lookAtAbsolute(named name: Swift.String, on jointName: Swift.String, lookingAlong targetAxis: Swift.SIMD3<Swift.Float>, orientationWeight: Swift.SIMD3<Swift.Float> = [1, 1, 1]) -> RealityFoundation.IKRig.Constraint
  }
  public struct JointCollection : Swift.Collection, Swift.Sequence {
    public typealias Element = RealityFoundation.IKRig.Joint
    public subscript(id: RealityFoundation.IKRig.JointCollection.Element.ID) -> RealityFoundation.IKRig.JointCollection.Element? {
      get
      set
    }
    public subscript(name: Swift.String) -> RealityFoundation.IKRig.JointCollection.Element? {
      get
      set
    }
    public mutating func forEach(descendantOf rootJointName: Swift.String, inclusive: Swift.Bool = false, update: (inout RealityFoundation.IKRig.JointCollection.Element) -> Swift.Void)
    public var count: Swift.Int {
      get
    }
    public var isEmpty: Swift.Bool {
      get
    }
    public func contains(_ id: RealityFoundation.IKRig.JointCollection.Element.ID) -> Swift.Bool
    @discardableResult
    public mutating func set(_ newValue: RealityFoundation.IKRig.JointCollection.Element) -> RealityFoundation.IKRig.JointCollection.Element?
    public typealias Index = Swift.Int
    public var startIndex: RealityFoundation.IKRig.JointCollection.Index {
      get
    }
    public var endIndex: RealityFoundation.IKRig.JointCollection.Index {
      get
    }
    public subscript(position: RealityFoundation.IKRig.JointCollection.Index) -> RealityFoundation.IKRig.JointCollection.Element {
      get
      set
      _modify
    }
    public func index(after: RealityFoundation.IKRig.JointCollection.Index) -> RealityFoundation.IKRig.JointCollection.Index
    public struct Iterator : Swift.IteratorProtocol {
      public mutating func next() -> RealityFoundation.IKRig.JointCollection.Element?
      @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
      public typealias Element = RealityFoundation.IKRig.JointCollection.Element
    }
    public __consuming func makeIterator() -> RealityFoundation.IKRig.JointCollection.Iterator
    @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias Indices = Swift.DefaultIndices<RealityFoundation.IKRig.JointCollection>
    @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias SubSequence = Swift.Slice<RealityFoundation.IKRig.JointCollection>
  }
  public struct ConstraintsCollection : Swift.Collection, Swift.Sequence, Swift.ExpressibleByArrayLiteral {
    public typealias Element = RealityFoundation.IKRig.Constraint
    public init(_ elements: [RealityFoundation.IKRig.ConstraintsCollection.Element])
    public subscript(name: Swift.String) -> RealityFoundation.IKRig.ConstraintsCollection.Element? {
      get
      set
    }
    public subscript(id: RealityFoundation.IKRig.ConstraintsCollection.Element.ID) -> RealityFoundation.IKRig.ConstraintsCollection.Element? {
      get
      set
    }
    public var count: Swift.Int {
      get
    }
    public var isEmpty: Swift.Bool {
      get
    }
    public func contains(_ id: RealityFoundation.IKRig.ConstraintsCollection.Element.ID) -> Swift.Bool
    @discardableResult
    public mutating func set(_ newValue: RealityFoundation.IKRig.ConstraintsCollection.Element) -> RealityFoundation.IKRig.ConstraintsCollection.Element?
    public typealias Index = Swift.Int
    public var startIndex: RealityFoundation.IKRig.ConstraintsCollection.Index {
      get
    }
    public var endIndex: RealityFoundation.IKRig.ConstraintsCollection.Index {
      get
    }
    public subscript(position: RealityFoundation.IKRig.ConstraintsCollection.Index) -> RealityFoundation.IKRig.ConstraintsCollection.Element {
      get
      set
      _modify
    }
    public func index(after: RealityFoundation.IKRig.ConstraintsCollection.Index) -> RealityFoundation.IKRig.ConstraintsCollection.Index
    public struct Iterator : Swift.IteratorProtocol {
      public mutating func next() -> RealityFoundation.IKRig.ConstraintsCollection.Element?
      @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
      public typealias Element = RealityFoundation.IKRig.ConstraintsCollection.Element
    }
    public __consuming func makeIterator() -> RealityFoundation.IKRig.ConstraintsCollection.Iterator
    public typealias ArrayLiteralElement = RealityFoundation.IKRig.ConstraintsCollection.Element
    public init(arrayLiteral elements: RealityFoundation.IKRig.ConstraintsCollection.Element...)
    @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias Indices = Swift.DefaultIndices<RealityFoundation.IKRig.ConstraintsCollection>
    @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias SubSequence = Swift.Slice<RealityFoundation.IKRig.ConstraintsCollection>
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct ImpulseAction : RealityFoundation.EntityAction, Swift.Codable {
  public var targetEntity: RealityFoundation.ActionEntityResolution
  public var linearImpulse: Swift.SIMD3<Swift.Float>
  public var animatedValueType: (any RealityFoundation.AnimatableData.Type)? {
    get
  }
  public init(targetEntity: RealityFoundation.ActionEntityResolution = .sourceEntity, linearImpulse: Swift.SIMD3<Swift.Float> = [0, 1, 0])
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias EventParameterType = Swift.Never
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKVisibilityHideLaunchAnimation : RealityFoundation.__RKVisibilityBaseAnimation {
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __Engine {
  public struct Configuration {
    public var clockMode: RealityFoundation.__EngineClockModeRef {
      get
      set
    }
    public var useMetal: Swift.Bool {
      get
      set
    }
    public var forExportOnly: Swift.Bool {
      get
      set
    }
    public var useRealityIO: Swift.Bool {
      get
      set
    }
    public var usePhysicsSceneSystem: Swift.Bool {
      get
      set
    }
    public var assetRuntimeSizeLimit: Swift.UInt64 {
      get
      set
    }
    public var device: (any Metal.MTLDevice)? {
      get
      set
    }
    public var isHostingSharedAudioSimulation: Swift.Bool {
      get
      set
    }
    @available(*, deprecated, message: "Custom engine queues are no longer supported in Swift. Use CoreRE instead.")
    public var queue: Dispatch.DispatchQueue? {
      get
      set
    }
    public var __createServices: RealityFoundation.__EngineServiceMaskRef {
      get
      set
    }
    public var __updateServices: RealityFoundation.__EngineServiceMaskRef {
      get
      set
    }
    public var __startupOptions: RealityFoundation.__StartupOptionsRef {
      get
      set
    }
    public var __renderFlags: RealityFoundation.__RenderFlagsRef {
      get
      set
    }
    public init()
  }
  final public let configuration: RealityFoundation.__Engine.Configuration
  public var __coreEngine: RealityFoundation.__EngineRef {
    get
  }
  @available(*, deprecated, message: "Custom engine queues are no longer supported in Swift. Use CoreRE instead.")
  final public let queue: Dispatch.DispatchQueue
  public var services: RealityFoundation.__ServiceLocator! {
    get
  }
  public init(configuration: RealityFoundation.__Engine.Configuration)
  @objc deinit
  public static func __fromCore(_ coreEngine: RealityFoundation.__EngineRef) -> RealityFoundation.__Engine
  public func start()
  public func __start()
  public func __stop()
  public static func __ensureBuiltInComponentsAreRegistered()
  public static func __ensureInteractionsComponentIsRegistered()
  public static func __registerInteractionComponent() throws
  public static func __registerREKitComponents() throws
  public static func __unregisterREKitComponents()
  public static func __unregisterInteractionComponent()
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct OrbitAnimation : RealityFoundation.AnimationDefinition {
  public var name: Swift.String {
    get
    set
  }
  public var blendLayer: Swift.Int32 {
    get
    set
  }
  public var bindTarget: RealityFoundation.BindTarget {
    get
    set
  }
  public var fillMode: RealityFoundation.AnimationFillMode {
    get
    set
  }
  public var additive: Swift.Bool {
    get
    set
  }
  public var trimStart: Foundation.TimeInterval? {
    get
    set
  }
  public var trimEnd: Foundation.TimeInterval? {
    get
    set
  }
  public var trimDuration: Foundation.TimeInterval? {
    get
    set
  }
  public var offset: Foundation.TimeInterval {
    get
    set
  }
  public var delay: Foundation.TimeInterval {
    get
    set
  }
  public var speed: Swift.Float {
    get
    set
  }
  public var repeatMode: RealityFoundation.AnimationRepeatMode {
    get
    set
  }
  public var duration: Foundation.TimeInterval {
    get
    set
  }
  public var axis: Swift.SIMD3<Swift.Float> {
    get
    set
  }
  public var startTransform: RealityFoundation.Transform {
    get
    set
  }
  public var spinClockwise: Swift.Bool {
    get
    set
  }
  public var orientToPath: Swift.Bool {
    get
    set
  }
  public var rotationCount: Swift.Float {
    get
    set
  }
  public init(name: Swift.String = "", duration: Foundation.TimeInterval = 1.0, axis: Swift.SIMD3<Swift.Float> = .init(x: 0.0, y: 1.0, z: 0.0), startTransform: RealityFoundation.Transform = .identity, spinClockwise: Swift.Bool = true, orientToPath: Swift.Bool = false, rotationCount: Swift.Float = 1.0, bindTarget: RealityFoundation.BindTarget? = nil, blendLayer: Swift.Int32 = 0, repeatMode: RealityFoundation.AnimationRepeatMode = .none, fillMode: RealityFoundation.AnimationFillMode = [], isAdditive: Swift.Bool = false, trimStart: Foundation.TimeInterval? = nil, trimEnd: Foundation.TimeInterval? = nil, trimDuration: Foundation.TimeInterval? = nil, offset: Foundation.TimeInterval = 0, delay: Foundation.TimeInterval = 0, speed: Swift.Float = 1)
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public enum TweenMode {
  case hold
  case linear
  public static func == (a: RealityFoundation.TweenMode, b: RealityFoundation.TweenMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct SampledAnimation<Value> : RealityFoundation.AnimationDefinition where Value : RealityFoundation.AnimatableData {
  public var name: Swift.String {
    get
    set
  }
  public var blendLayer: Swift.Int32 {
    get
    set
  }
  public var bindTarget: RealityFoundation.BindTarget {
    get
    set
  }
  public var fillMode: RealityFoundation.AnimationFillMode {
    get
    set
  }
  public var additive: Swift.Bool {
    get
    set
  }
  public var trimStart: Foundation.TimeInterval? {
    get
    set
  }
  public var trimEnd: Foundation.TimeInterval? {
    get
    set
  }
  public var trimDuration: Foundation.TimeInterval? {
    get
    set
  }
  public var offset: Foundation.TimeInterval {
    get
    set
  }
  public var delay: Foundation.TimeInterval {
    get
    set
  }
  public var speed: Swift.Float {
    get
    set
  }
  public var repeatMode: RealityFoundation.AnimationRepeatMode {
    get
    set
  }
  public var tweenMode: RealityFoundation.TweenMode {
    get
    set
  }
  public var frameInterval: Swift.Float {
    get
    set
  }
  public var start: Foundation.TimeInterval {
    get
    set
  }
  public var end: Foundation.TimeInterval {
    get
    set
  }
  public var duration: Foundation.TimeInterval {
    get
    set
  }
  public init(frames: [Value], name: Swift.String = "", tweenMode: RealityFoundation.TweenMode = .linear, frameInterval: Swift.Float = 1.0 / 30.0, isAdditive: Swift.Bool = false, bindTarget: RealityFoundation.BindTarget? = nil, blendLayer: Swift.Int32 = 0, repeatMode: RealityFoundation.AnimationRepeatMode = .none, fillMode: RealityFoundation.AnimationFillMode = [], trimStart: Foundation.TimeInterval? = nil, trimEnd: Foundation.TimeInterval? = nil, trimDuration: Foundation.TimeInterval? = nil, offset: Foundation.TimeInterval = 0, delay: Foundation.TimeInterval = 0, speed: Swift.Float = 1.0)
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.SampledAnimation where Value == Swift.Float {
  public var frames: [Swift.Float] {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.SampledAnimation where Value == Swift.Double {
  public var frames: [Swift.Double] {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.SampledAnimation where Value == Swift.SIMD2<Swift.Float> {
  public var frames: [Swift.SIMD2<Swift.Float>] {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.SampledAnimation where Value == Swift.SIMD3<Swift.Float> {
  public var frames: [Swift.SIMD3<Swift.Float>] {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.SampledAnimation where Value == Swift.SIMD4<Swift.Float> {
  public var frames: [Swift.SIMD4<Swift.Float>] {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.SampledAnimation where Value == simd.simd_quatf {
  public var frames: [simd.simd_quatf] {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.SampledAnimation where Value == RealityFoundation.Transform {
  public var frames: [RealityFoundation.Transform] {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.SampledAnimation where Value == RealityFoundation.JointTransforms {
  public init(jointNames: [Swift.String], frames: [Value], name: Swift.String = "", tweenMode: RealityFoundation.TweenMode = .linear, frameInterval: Swift.Float = 1.0 / 30.0, isAdditive: Swift.Bool = false, isScaleAnimated: Swift.Bool = true, isRotationAnimated: Swift.Bool = true, isTranslationAnimated: Swift.Bool = true, bindTarget: RealityFoundation.BindTarget? = nil, blendLayer: Swift.Int32 = 0, repeatMode: RealityFoundation.AnimationRepeatMode = .none, fillMode: RealityFoundation.AnimationFillMode = [], trimStart: Foundation.TimeInterval? = nil, trimEnd: Foundation.TimeInterval? = nil, trimDuration: Foundation.TimeInterval? = nil, offset: Foundation.TimeInterval = 0, delay: Foundation.TimeInterval = 0, speed: Swift.Float = 1.0)
  public var isScaleAnimated: Swift.Bool {
    get
    set
  }
  public var isRotationAnimated: Swift.Bool {
    get
    set
  }
  public var isTranslationAnimated: Swift.Bool {
    get
    set
  }
  public var frames: [RealityFoundation.JointTransforms] {
    get
    set
  }
  public var jointNames: [Swift.String] {
    get
    set
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.SampledAnimation where Value == RealityFoundation.BlendShapeWeights {
  public init(weightNames: [Swift.String], frames: [Value], name: Swift.String = "", tweenMode: RealityFoundation.TweenMode = .linear, frameInterval: Swift.Float = 1.0 / 30.0, isAdditive: Swift.Bool = false, bindTarget: RealityFoundation.BindTarget? = nil, blendLayer: Swift.Int32 = 0, repeatMode: RealityFoundation.AnimationRepeatMode = .none, fillMode: RealityFoundation.AnimationFillMode = [], trimStart: Foundation.TimeInterval? = nil, trimEnd: Foundation.TimeInterval? = nil, trimDuration: Foundation.TimeInterval? = nil, offset: Foundation.TimeInterval = 0, delay: Foundation.TimeInterval = 0, speed: Swift.Float = 1.0)
  public var frames: [RealityFoundation.BlendShapeWeights] {
    get
    set
  }
  public var weightNames: [Swift.String] {
    get
    set
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct FromToByAction<Value> : RealityFoundation.EntityAction, Swift.Codable where Value : RealityFoundation.AnimatableData {
  public let from: Value?
  public let to: Value?
  public let by: Value?
  public var timingFunction: RealityFoundation.AnimationTimingFunction
  public enum TransformMode : Swift.Equatable, Swift.Codable {
    case parent
    case local
    case scene
    case relative(to: RealityFoundation.ActionEntityResolution)
    public static var `default`: RealityFoundation.FromToByAction<Value>.TransformMode {
      get
    }
    public static func == (a: RealityFoundation.FromToByAction<Value>.TransformMode, b: RealityFoundation.FromToByAction<Value>.TransformMode) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public var isAdditive: Swift.Bool
  public init(from: Value? = nil, to: Value, timing: RealityFoundation.AnimationTimingFunction = .linear, isAdditive: Swift.Bool = false)
  public init(from: Value? = nil, by: Value, timing: RealityFoundation.AnimationTimingFunction = .linear, isAdditive: Swift.Bool = false)
  public init(from: Value, timing: RealityFoundation.AnimationTimingFunction = .linear, isAdditive: Swift.Bool = false)
  public init(to: Value, by: Value, timing: RealityFoundation.AnimationTimingFunction = .linear, isAdditive: Swift.Bool = false)
  public let isReversible: Swift.Bool
  public let animatedValueType: (any RealityFoundation.AnimatableData.Type)?
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias EventParameterType = Swift.Never
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.FromToByAction where Value == RealityFoundation.Transform {
  public var mode: RealityFoundation.FromToByAction<RealityFoundation.Transform>.TransformMode? {
    get
  }
  public init(from: Value? = nil, to: Value, mode: RealityFoundation.FromToByAction<Value>.TransformMode = .default, timing: RealityFoundation.AnimationTimingFunction = .linear, isAdditive: Swift.Bool = false)
  public init(from: Value, by: Value? = nil, mode: RealityFoundation.FromToByAction<Value>.TransformMode = .default, timing: RealityFoundation.AnimationTimingFunction = .linear, isAdditive: Swift.Bool = false)
  public init(to: Value, by: Value, mode: RealityFoundation.FromToByAction<Value>.TransformMode = .default, timing: RealityFoundation.AnimationTimingFunction = .linear, isAdditive: Swift.Bool = false)
  public init(by: Value, timing: RealityFoundation.AnimationTimingFunction = .linear, isAdditive: Swift.Bool = false)
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.FromToByAction {
  public enum DecodingErrors : Swift.Error {
    case unsupportedValueType
    public static func == (a: RealityFoundation.FromToByAction<Value>.DecodingErrors, b: RealityFoundation.FromToByAction<Value>.DecodingErrors) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct AnimationTimingFunction : Swift.Hashable {
  public enum __Mode {
    case easeIn
    case easeOut
    case easeInOut
    public static func == (a: RealityFoundation.AnimationTimingFunction.__Mode, b: RealityFoundation.AnimationTimingFunction.__Mode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(*, deprecated, message: "Will be hidden in RealityKit 2019.")
  public static func __smooth(_ mode: RealityFoundation.AnimationTimingFunction.__Mode = .easeInOut) -> RealityFoundation.AnimationTimingFunction
  @available(*, deprecated, message: "Will be hidden in RealityKit 2019.")
  public static func __back(_ mode: RealityFoundation.AnimationTimingFunction.__Mode = .easeIn, amplitude: Swift.Float = 1) -> RealityFoundation.AnimationTimingFunction
  @available(*, deprecated, message: "Will be hidden in RealityKit 2019.")
  public static func __bounce(_ mode: RealityFoundation.AnimationTimingFunction.__Mode = .easeOut, bounces: Swift.Int = 3, bounciness: Swift.Float = 2) -> RealityFoundation.AnimationTimingFunction
  @available(*, deprecated, message: "Will be hidden in RealityKit 2019.")
  public static func __circle(_ mode: RealityFoundation.AnimationTimingFunction.__Mode = .easeIn) -> RealityFoundation.AnimationTimingFunction
  @available(*, deprecated, message: "Will be hidden in RealityKit 2019.")
  public static func __exponential(_ mode: RealityFoundation.AnimationTimingFunction.__Mode = .easeIn, exponent: Swift.Float = 2) -> RealityFoundation.AnimationTimingFunction
  @available(*, deprecated, message: "Will be hidden in RealityKit 2019.")
  public static func __logarithmic(_ mode: RealityFoundation.AnimationTimingFunction.__Mode = .easeIn, base: Swift.Float = 2) -> RealityFoundation.AnimationTimingFunction
  @available(*, deprecated, message: "Will be hidden in RealityKit 2019.")
  public static func __power(_ mode: RealityFoundation.AnimationTimingFunction.__Mode = .easeIn, power: Swift.Float = 2) -> RealityFoundation.AnimationTimingFunction
  @available(*, deprecated, message: "Will be hidden in RealityKit 2019.")
  public static func __sine(_ mode: RealityFoundation.AnimationTimingFunction.__Mode = .easeIn) -> RealityFoundation.AnimationTimingFunction
  @available(*, deprecated, message: "Renamed to `elastic`.")
  public static func __spring(_ mode: RealityFoundation.AnimationTimingFunction.__Mode = .easeOut, oscillations: Swift.Int = 2, springiness: Swift.Float = 2) -> RealityFoundation.AnimationTimingFunction
  @available(*, deprecated, message: "Will be hidden in RealityKit 2019.")
  public static func __elastic(_ mode: RealityFoundation.AnimationTimingFunction.__Mode = .easeOut, oscillations: Swift.Int = 2, springiness: Swift.Float = 2) -> RealityFoundation.AnimationTimingFunction
  public static var `default`: RealityFoundation.AnimationTimingFunction {
    get
  }
  public static var linear: RealityFoundation.AnimationTimingFunction {
    get
  }
  public static var easeIn: RealityFoundation.AnimationTimingFunction {
    get
  }
  public static var easeOut: RealityFoundation.AnimationTimingFunction {
    get
  }
  public static var easeInOut: RealityFoundation.AnimationTimingFunction {
    get
  }
  public static func cubicBezier(controlPoint1: Swift.SIMD2<Swift.Float>, controlPoint2: Swift.SIMD2<Swift.Float>) -> RealityFoundation.AnimationTimingFunction
  public static func == (a: RealityFoundation.AnimationTimingFunction, b: RealityFoundation.AnimationTimingFunction) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.AnimationTimingFunction : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency public protocol Resource : Swift.Sendable {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Resource {
  public static func __fromCore(_ coreAsset: RealityFoundation.__AssetRef) -> Self
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension RealityFoundation.__RKMaterialParameterBlock {
  @available(*, deprecated, message: "The parameters dictionary is deprecated. Please use our public material APIs directly, or __RKMaterialParameterBlock.get and __RKMaterialParameterBlock.set instead.")
  public var parameters: [Swift.String : RealityFoundation.__RKMaterialParameterBlock.Parameter] {
    get
    set
    _modify
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct HoverEffectComponent : RealityFoundation.Component {
  @available(iOS 18.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
  public struct HoverEffect {
    public static func spotlight(_ style: RealityFoundation.HoverEffectComponent.SpotlightHoverEffectStyle) -> RealityFoundation.HoverEffectComponent.HoverEffect
    public static func highlight(_ style: RealityFoundation.HoverEffectComponent.HighlightHoverEffectStyle) -> RealityFoundation.HoverEffectComponent.HoverEffect
    public static func shader(_ inputs: RealityFoundation.HoverEffectComponent.ShaderHoverEffectInputs) -> RealityFoundation.HoverEffectComponent.HoverEffect
  }
  @available(iOS 18.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
  public var hoverEffect: RealityFoundation.HoverEffectComponent.HoverEffect
  @available(iOS 18.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
  public enum OpacityFunction : Swift.Hashable, Swift.Sendable {
    case full
    case mask
    case blend
    public static func == (a: RealityFoundation.HoverEffectComponent.OpacityFunction, b: RealityFoundation.HoverEffectComponent.OpacityFunction) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(iOS 18.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
  public struct SpotlightHoverEffectStyle : Swift.Equatable {
    public static let `default`: RealityFoundation.HoverEffectComponent.SpotlightHoverEffectStyle
    public var strength: Swift.Float
    public var opacityFunction: RealityFoundation.HoverEffectComponent.OpacityFunction
    public static func == (a: RealityFoundation.HoverEffectComponent.SpotlightHoverEffectStyle, b: RealityFoundation.HoverEffectComponent.SpotlightHoverEffectStyle) -> Swift.Bool
  }
  @available(iOS 18.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
  public struct HighlightHoverEffectStyle : Swift.Equatable {
    public static let `default`: RealityFoundation.HoverEffectComponent.HighlightHoverEffectStyle
    public var strength: Swift.Float
    public var opacityFunction: RealityFoundation.HoverEffectComponent.OpacityFunction
    public static func == (a: RealityFoundation.HoverEffectComponent.HighlightHoverEffectStyle, b: RealityFoundation.HoverEffectComponent.HighlightHoverEffectStyle) -> Swift.Bool
  }
  @available(iOS 18.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
  public struct ShaderHoverEffectInputs : Swift.Equatable {
    public static let `default`: RealityFoundation.HoverEffectComponent.ShaderHoverEffectInputs
    public var fadeInDuration: Foundation.TimeInterval {
      get
      set
    }
    public var fadeOutDuration: Foundation.TimeInterval {
      get
      set
    }
    public init(fadeInDuration: Foundation.TimeInterval, fadeOutDuration: Foundation.TimeInterval)
    public static func == (a: RealityFoundation.HoverEffectComponent.ShaderHoverEffectInputs, b: RealityFoundation.HoverEffectComponent.ShaderHoverEffectInputs) -> Swift.Bool
  }
  public init()
  @available(iOS 18.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
  public init(_ hoverEffect: RealityFoundation.HoverEffectComponent.HoverEffect)
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.HoverEffectComponent {
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.HoverEffectComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
public struct SkeletalPosesComponent : RealityFoundation.Component {
  public var poses: RealityFoundation.SkeletalPoseSet
  public init(poses: [RealityFoundation.SkeletalPose])
}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
extension RealityFoundation.SkeletalPosesComponent {
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.SkeletalPosesComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
extension RealityFoundation.Scene {
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  @_Concurrency.MainActor @preconcurrency public func performQuery(_ query: RealityFoundation.EntityQuery) -> RealityFoundation.QueryResult<RealityFoundation.Entity>
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityTriggerGroup : RealityFoundation.__RKEntityTrigger {
  public var triggers: [RealityFoundation.__RKEntityTrigger] {
    get
  }
  public init(triggers: [RealityFoundation.__RKEntityTrigger])
  override public func matches(with trigger: RealityFoundation.__RKEntityTrigger) -> Swift.Bool
  override public var description: Swift.String {
    get
  }
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> RealityFoundation.__RKEntityTrigger?
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntitySwapEntityAction : RealityFoundation.__RKEntityAction {
  public init(targetEntity: RealityFoundation.Entity?, newEntity: RealityFoundation.Entity?, buildOutAction: RealityFoundation.__RKEntityHideAction, buildInAction: RealityFoundation.__RKEntityShowAction)
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  @_Concurrency.MainActor @preconcurrency public var availableAnimations: [RealityFoundation.AnimationResource] {
    get
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.PhysicallyBasedMaterial {
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public typealias Texture = RealityFoundation.MaterialParameters.Texture
  public typealias FaceCulling = RealityFoundation.MaterialParameterTypes.FaceCulling
  public typealias TextureCoordinateTransform = RealityFoundation.MaterialParameterTypes.TextureCoordinateTransform
  @available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  public typealias TriangleFillMode = RealityFoundation.MaterialParameterTypes.TriangleFillMode
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct BaseColor {
    public static let __tintKey: Swift.String
    public var __tint: CoreGraphics.CGColor
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.PhysicallyBasedMaterial.Texture?
    @available(*, deprecated, message: "Default textures are no longer needed")
    public static var __defaultTexture: (any RealityFoundation.__REAssetService) -> RealityFoundation.TextureResource {
      get
    }
    public static let textureSemantic: RealityFoundation.TextureResource.Semantic
    @available(visionOS, unavailable)
    public init(_ value: RealityFoundation.CustomMaterial.BaseColor)
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct Metallic : Swift.ExpressibleByFloatLiteral {
    public static let __scaleKey: Swift.String
    public var scale: Swift.Float
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.PhysicallyBasedMaterial.Texture?
    @available(*, deprecated, message: "Default textures are no longer needed")
    public static var __defaultTexture: (any RealityFoundation.__REAssetService) -> RealityFoundation.TextureResource {
      get
    }
    public static let textureSemantic: RealityFoundation.TextureResource.Semantic
    public init(scale: Swift.Float = 1.0, texture: RealityFoundation.PhysicallyBasedMaterial.Texture? = nil)
    public init(floatLiteral value: Swift.Float)
    @available(visionOS, unavailable)
    public init(_ value: RealityFoundation.CustomMaterial.Metallic)
    @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
    public typealias FloatLiteralType = Swift.Float
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct Roughness : Swift.ExpressibleByFloatLiteral {
    public static let __scaleKey: Swift.String
    public var scale: Swift.Float
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.PhysicallyBasedMaterial.Texture?
    @available(*, deprecated, message: "Default textures are no longer needed")
    public static var __defaultTexture: (any RealityFoundation.__REAssetService) -> RealityFoundation.TextureResource {
      get
    }
    public static let textureSemantic: RealityFoundation.TextureResource.Semantic
    public init(scale: Swift.Float = 1.0, texture: RealityFoundation.PhysicallyBasedMaterial.Texture? = nil)
    public init(floatLiteral value: Swift.Float)
    @available(visionOS, unavailable)
    public init(_ value: RealityFoundation.CustomMaterial.Roughness)
    @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
    public typealias FloatLiteralType = Swift.Float
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct EmissiveColor {
    public static let __colorKey: Swift.String
    public var __color: CoreGraphics.CGColor
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.PhysicallyBasedMaterial.Texture?
    @available(*, deprecated, message: "Default textures are no longer needed")
    public static var __defaultTexture: (any RealityFoundation.__REAssetService) -> RealityFoundation.TextureResource {
      get
    }
    public static let textureSemantic: RealityFoundation.TextureResource.Semantic
    @available(visionOS, unavailable)
    public init(_ value: RealityFoundation.CustomMaterial.EmissiveColor)
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct Specular : Swift.ExpressibleByFloatLiteral {
    public static let __scaleKey: Swift.String
    public var scale: Swift.Float
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.PhysicallyBasedMaterial.Texture?
    @available(*, deprecated, message: "Default textures are no longer needed")
    public static var __defaultTexture: (any RealityFoundation.__REAssetService) -> RealityFoundation.TextureResource {
      get
    }
    public static let textureSemantic: RealityFoundation.TextureResource.Semantic
    public init(scale: Swift.Float = 1.0, texture: RealityFoundation.PhysicallyBasedMaterial.Texture? = nil)
    public init(floatLiteral value: Swift.Float)
    @available(visionOS, unavailable)
    public init(_ value: RealityFoundation.CustomMaterial.Specular)
    @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
    public typealias FloatLiteralType = Swift.Float
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public enum Blending {
    case opaque
    case transparent(opacity: RealityFoundation.PhysicallyBasedMaterial.Opacity)
    @available(visionOS, unavailable)
    public init(blending value: RealityFoundation.CustomMaterial.Blending)
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct Opacity : Swift.ExpressibleByFloatLiteral {
    public static let __scaleKey: Swift.String
    public var scale: Swift.Float
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.PhysicallyBasedMaterial.Texture?
    @available(*, deprecated, message: "Default textures are no longer needed")
    public static var __defaultTexture: (any RealityFoundation.__REAssetService) -> RealityFoundation.TextureResource {
      get
    }
    public static var textureSemantic: RealityFoundation.TextureResource.Semantic {
      get
    }
    public init(scale: Swift.Float = 1.0, texture: RealityFoundation.PhysicallyBasedMaterial.Texture? = nil)
    public init(floatLiteral value: Swift.Float)
    @available(visionOS, unavailable)
    public init(_ value: RealityFoundation.CustomMaterial.Opacity)
    @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
    public typealias FloatLiteralType = Swift.Float
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct Clearcoat : Swift.ExpressibleByFloatLiteral {
    public static let __scaleKey: Swift.String
    public var scale: Swift.Float
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.PhysicallyBasedMaterial.Texture?
    @available(*, deprecated, message: "Default textures are no longer needed")
    public static var __defaultTexture: (any RealityFoundation.__REAssetService) -> RealityFoundation.TextureResource {
      get
    }
    public static let textureSemantic: RealityFoundation.TextureResource.Semantic
    public init(scale: Swift.Float = 1.0, texture: RealityFoundation.PhysicallyBasedMaterial.Texture? = nil)
    public init(floatLiteral value: Swift.Float)
    @available(visionOS, unavailable)
    public init(_ value: RealityFoundation.CustomMaterial.Clearcoat)
    @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
    public typealias FloatLiteralType = Swift.Float
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct ClearcoatRoughness : Swift.ExpressibleByFloatLiteral {
    public static let __scaleKey: Swift.String
    public var scale: Swift.Float
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.PhysicallyBasedMaterial.Texture?
    @available(*, deprecated, message: "Default textures are no longer needed")
    public static var __defaultTexture: (any RealityFoundation.__REAssetService) -> RealityFoundation.TextureResource {
      get
    }
    public static let textureSemantic: RealityFoundation.TextureResource.Semantic
    public init(scale: Swift.Float = 1.0, texture: RealityFoundation.PhysicallyBasedMaterial.Texture? = nil)
    public init(floatLiteral value: Swift.Float)
    @available(visionOS, unavailable)
    public init(_ value: RealityFoundation.CustomMaterial.ClearcoatRoughness)
    @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
    public typealias FloatLiteralType = Swift.Float
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct Normal {
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.PhysicallyBasedMaterial.Texture?
    @available(*, deprecated, message: "Default textures are no longer needed")
    public static var __defaultTexture: (any RealityFoundation.__REAssetService) -> RealityFoundation.TextureResource {
      get
    }
    public static let textureSemantic: RealityFoundation.TextureResource.Semantic
    public init(texture: RealityFoundation.PhysicallyBasedMaterial.Texture? = nil)
    @available(visionOS, unavailable)
    public init(_ value: RealityFoundation.CustomMaterial.Normal)
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct AmbientOcclusion {
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.PhysicallyBasedMaterial.Texture?
    @available(*, deprecated, message: "Default textures are no longer needed")
    public static var __defaultTexture: (any RealityFoundation.__REAssetService) -> RealityFoundation.TextureResource {
      get
    }
    public static let textureSemantic: RealityFoundation.TextureResource.Semantic
    public init(texture: RealityFoundation.PhysicallyBasedMaterial.Texture? = nil)
    @available(visionOS, unavailable)
    public init(_ value: RealityFoundation.CustomMaterial.AmbientOcclusion)
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct AnisotropyLevel : Swift.ExpressibleByFloatLiteral {
    public static let __scaleKey: Swift.String
    public var scale: Swift.Float
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.PhysicallyBasedMaterial.Texture?
    @available(*, deprecated, message: "Default textures are no longer needed")
    public static var __defaultTexture: (any RealityFoundation.__REAssetService) -> RealityFoundation.TextureResource {
      get
    }
    public static let textureSemantic: RealityFoundation.TextureResource.Semantic
    public init(scale: Swift.Float = 1.0, texture: RealityFoundation.PhysicallyBasedMaterial.Texture? = nil)
    public init(floatLiteral value: Swift.Float)
    @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
    public typealias FloatLiteralType = Swift.Float
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct AnisotropyAngle : Swift.ExpressibleByFloatLiteral {
    public static let __scaleKey: Swift.String
    public var scale: Swift.Float
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.PhysicallyBasedMaterial.Texture?
    @available(*, deprecated, message: "Default textures are no longer needed")
    public static var __defaultTexture: (any RealityFoundation.__REAssetService) -> RealityFoundation.TextureResource {
      get
    }
    public static let textureSemantic: RealityFoundation.TextureResource.Semantic
    public init(scale: Swift.Float = 1.0, texture: RealityFoundation.PhysicallyBasedMaterial.Texture? = nil)
    public init(floatLiteral value: Swift.Float)
    @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
    public typealias FloatLiteralType = Swift.Float
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct SheenColor {
    public static let __tintKey: Swift.String
    public var __tint: CoreGraphics.CGColor
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.PhysicallyBasedMaterial.Texture?
    @available(*, deprecated, message: "Default textures are no longer needed")
    public static var __defaultTexture: (any RealityFoundation.__REAssetService) -> RealityFoundation.TextureResource {
      get
    }
    public static let textureSemantic: RealityFoundation.TextureResource.Semantic
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.PhysicallyBasedMaterial {
  @_hasMissingDesignatedInitializers final public class Program : Swift.Equatable, Swift.Hashable, Swift.Sendable {
    final public let descriptor: RealityFoundation.PhysicallyBasedMaterial.Program.Descriptor
    public struct Descriptor : Swift.Equatable, Swift.Hashable, Swift.Sendable {
      public var blendMode: RealityFoundation.MaterialParameterTypes.BlendMode?
      public init()
      public static func == (a: RealityFoundation.PhysicallyBasedMaterial.Program.Descriptor, b: RealityFoundation.PhysicallyBasedMaterial.Program.Descriptor) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public init(descriptor: RealityFoundation.PhysicallyBasedMaterial.Program.Descriptor) async
    public static func == (lhs: RealityFoundation.PhysicallyBasedMaterial.Program, rhs: RealityFoundation.PhysicallyBasedMaterial.Program) -> Swift.Bool
    final public func hash(into hasher: inout Swift.Hasher)
    @objc deinit
    final public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.PhysicallyBasedMaterial {
  public struct ClearcoatNormal {
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.PhysicallyBasedMaterial.Texture?
    public static let textureSemantic: RealityFoundation.TextureResource.Semantic
    public init(texture: RealityFoundation.PhysicallyBasedMaterial.Texture? = nil)
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
@available(visionOS, unavailable)
extension RealityFoundation.PhysicallyBasedMaterial.ClearcoatNormal {
  public init(_ value: RealityFoundation.CustomMaterial.ClearcoatNormal)
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public class AnchorEntity : RealityFoundation.Entity, RealityFoundation.HasAnchoring {
  @_Concurrency.MainActor @preconcurrency required public init()
  @available(macOS 10.15, iOS 13.0, macCatalyst 14.0, *)
  @_Concurrency.MainActor @preconcurrency public init(_ target: RealityFoundation.AnchoringComponent.Target)
  @_Concurrency.MainActor @preconcurrency convenience public init(world position: Swift.SIMD3<Swift.Float>)
  @_Concurrency.MainActor @preconcurrency convenience public init(world transform: simd.float4x4)
  @available(macOS 10.15, iOS 13.0, macCatalyst 14.0, *)
  @_Concurrency.MainActor @preconcurrency convenience public init(plane alignment: RealityFoundation.AnchoringComponent.Target.Alignment, classification: RealityFoundation.AnchoringComponent.Target.Classification = .any, minimumBounds: Swift.SIMD2<Swift.Float> = [0, 0])
  @objc deinit
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AnchorEntity {
  @_Concurrency.MainActor @preconcurrency convenience public init(_ target: RealityFoundation.AnchoringComponent.Target, trackingMode: RealityFoundation.AnchoringComponent.TrackingMode)
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.AnchorEntity {
  @_Concurrency.MainActor @preconcurrency convenience public init(_ target: RealityFoundation.AnchoringComponent.Target, trackingMode: RealityFoundation.AnchoringComponent.TrackingMode, physicsSimulation: RealityFoundation.AnchoringComponent.PhysicsSimulation = .isolated)
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public class PerspectiveCamera : RealityFoundation.Entity, RealityFoundation.HasPerspectiveCamera {
  @_Concurrency.MainActor @preconcurrency required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public class SpotLight : RealityFoundation.Entity, RealityFoundation.HasSpotLight {
  @_Concurrency.MainActor @preconcurrency required public init()
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency override internal init(_coreEntity: RealityFoundation.__EntityRef)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public class DirectionalLight : RealityFoundation.Entity, RealityFoundation.HasDirectionalLight {
  @_Concurrency.MainActor @preconcurrency required public init()
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency override internal init(_coreEntity: RealityFoundation.__EntityRef)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public class PointLight : RealityFoundation.Entity, RealityFoundation.HasPointLight {
  @_Concurrency.MainActor @preconcurrency required public init()
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency override internal init(_coreEntity: RealityFoundation.__EntityRef)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public class ModelEntity : RealityFoundation.Entity, RealityFoundation.HasModel, RealityFoundation.HasPhysics {
  @_Concurrency.MainActor @preconcurrency required public init()
  @_Concurrency.MainActor @preconcurrency public init(mesh: RealityFoundation.MeshResource, materials: [any RealityFoundation.Material] = [])
  @_Concurrency.MainActor @preconcurrency public init(mesh: RealityFoundation.MeshResource, materials: [any RealityFoundation.Material] = [], collisionShape: RealityFoundation.ShapeResource, mass: Swift.Float)
  @_Concurrency.MainActor @preconcurrency public init(mesh: RealityFoundation.MeshResource, materials: [any RealityFoundation.Material] = [], collisionShapes: [RealityFoundation.ShapeResource], mass: Swift.Float)
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public class TriggerVolume : RealityFoundation.Entity, RealityFoundation.HasCollision {
  @_Concurrency.MainActor @preconcurrency required public init()
  @_Concurrency.MainActor @preconcurrency convenience public init(shape: RealityFoundation.ShapeResource, filter: RealityFoundation.CollisionFilter = .sensor)
  @_Concurrency.MainActor @preconcurrency public init(shapes: [RealityFoundation.ShapeResource], filter: RealityFoundation.CollisionFilter = .sensor)
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct PointLightComponent : RealityFoundation.Component, Swift.Equatable {
  public var __color: CoreGraphics.CGColor
  public var intensity: Swift.Float
  public var attenuationRadius: Swift.Float
  public init(cgColor: CoreGraphics.CGColor, intensity: Swift.Float = 26963.76, attenuationRadius: Swift.Float = 10.0)
  @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.PointLightComponent
  @_Concurrency.MainActor @preconcurrency public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
  public static func == (a: RealityFoundation.PointLightComponent, b: RealityFoundation.PointLightComponent) -> Swift.Bool
}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
extension RealityFoundation.PointLightComponent {
  public var attenuationFalloffExponent: Swift.Float {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKChangeSceneAction : RealityFoundation.__RKEntityAction {
  public static let noTargetSceneIdentifier: Foundation.UUID
  public var rootEntity: RealityFoundation.Entity?
  public init(rootEntity: RealityFoundation.Entity?, targetSceneIdentifier: Foundation.UUID)
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __REECSManagerRef {
  public func __as<T>(_ type: T.Type) -> T
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __EntityRef : Swift.Equatable {
  public func __as<T>(_ type: T.Type) -> T
  public static func __fromCore(_ core: Any) -> RealityFoundation.__EntityRef
  public static func == (a: RealityFoundation.__EntityRef, b: RealityFoundation.__EntityRef) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __SceneRef {
  public func __as<T>(_ type: T.Type) -> T
  public static func __fromCore(_ core: Any) -> RealityFoundation.__SceneRef
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __SceneImportOperationRef : Swift.Equatable {
  public func __as<T>(_ type: T.Type) -> T
  public static func __fromCore(_ core: Any) -> RealityFoundation.__SceneImportOperationRef
  public static func == (a: RealityFoundation.__SceneImportOperationRef, b: RealityFoundation.__SceneImportOperationRef) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __ComponentRef {
  public func __as<T>(_ type: T.Type) -> T
  public static func __fromCore(_ core: Any) -> RealityFoundation.__ComponentRef
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __ComponentTypeRef {
  public static func __fromCore(_ core: Any) -> RealityFoundation.__ComponentTypeRef
  public func __as<T>(_ type: T.Type) -> T
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __AssetRef {
  public func __as<T>(_ type: T.Type) -> T
  public static func __fromCore(_ core: Any) -> RealityFoundation.__AssetRef
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __EngineRef {
  public func __as<T>(_ type: T.Type) -> T
  public static func __fromCore(_ core: Any) -> RealityFoundation.__EngineRef
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __EngineClockModeRef {
  public func __as<T>(_ type: T.Type) -> T
  public static func __fromCore(_ core: Any) -> RealityFoundation.__EngineClockModeRef
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __EngineServiceMaskRef {
  public func __as<T>(_ type: T.Type) -> T
  public static func __fromCore(_ core: Any) -> RealityFoundation.__EngineServiceMaskRef
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RenderFlagsRef {
  public func __as<T>(_ type: T.Type) -> T
  public static func __fromCore(_ core: Any) -> RealityFoundation.__RenderFlagsRef
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __StartupOptionsRef {
  public func __as<T>(_ type: T.Type) -> T
  public static func __fromCore(_ core: Any) -> RealityFoundation.__StartupOptionsRef
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __PeerIDRef {
  public func __as<T>(_ type: T.Type) -> T
  public static func __fromCore(_ core: Any) -> RealityFoundation.__PeerIDRef
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __AABBRef {
  public func __as<T>(_ type: T.Type) -> T
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __SRTRef {
  public func __as<T>(_ type: T.Type) -> T
  public static func __fromCore(_ core: Any) -> RealityFoundation.__SRTRef
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __AnimationPlaybackTokenRef {
  public var core: Swift.UInt64
  public func __as<T>(_ type: T.Type) -> T
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@inlinable internal func convertToDegrees(radians: Swift.Float) -> Swift.Float {
    return radians * Float(180.0) / Float.pi
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@inlinable internal func convertToRadians(degrees: Swift.Float) -> Swift.Float {
    return degrees * Float.pi / Float(180.0)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@inlinable internal func log2RoundUp(_ v: Swift.Int32) -> Swift.Int32 {
    return Int32(ceil(log2(Double(v))))
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct WorldComponent : RealityFoundation.Component {
  public init()
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.WorldComponent {
  @preconcurrency @_Concurrency.MainActor public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.WorldComponent
  @preconcurrency @_Concurrency.MainActor public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEmphasisLeanAnimation : RealityFoundation.__RKEmphasisBaseAnimation {
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol __RenderService {
  var device: any Metal.MTLDevice { get }
  var commandQueue: (any Metal.MTLCommandQueue)? { get }
  var __coreRenderManager: Swift.OpaquePointer { get }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public protocol HasTransform : RealityFoundation.Entity {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasTransform {
  @_Concurrency.MainActor @preconcurrency public var transform: RealityFoundation.Transform {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var scale: Swift.SIMD3<Swift.Float> {
    get
    set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public func scale(relativeTo referenceEntity: RealityFoundation.Entity?) -> Swift.SIMD3<Swift.Float>
  @_Concurrency.MainActor @preconcurrency public func setScale(_ scale: Swift.SIMD3<Swift.Float>, relativeTo referenceEntity: RealityFoundation.Entity?)
  @_Concurrency.MainActor @preconcurrency public var position: Swift.SIMD3<Swift.Float> {
    get
    set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public func position(relativeTo referenceEntity: RealityFoundation.Entity?) -> Swift.SIMD3<Swift.Float>
  @_Concurrency.MainActor @preconcurrency public func setPosition(_ position: Swift.SIMD3<Swift.Float>, relativeTo referenceEntity: RealityFoundation.Entity?)
  @_Concurrency.MainActor @preconcurrency public var orientation: simd.simd_quatf {
    get
    set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public func orientation(relativeTo referenceEntity: RealityFoundation.Entity?) -> simd.simd_quatf
  @_Concurrency.MainActor @preconcurrency public func setOrientation(_ orientation: simd.simd_quatf, relativeTo referenceEntity: RealityFoundation.Entity?)
  @_Concurrency.MainActor @preconcurrency public func transformMatrix(relativeTo referenceEntity: RealityFoundation.Entity?) -> simd.float4x4
  @_Concurrency.MainActor @preconcurrency public func setTransformMatrix(_ transform: simd.float4x4, relativeTo referenceEntity: RealityFoundation.Entity?)
  @_Concurrency.MainActor @preconcurrency public func convert(position: Swift.SIMD3<Swift.Float>, from referenceEntity: RealityFoundation.Entity?) -> Swift.SIMD3<Swift.Float>
  @_Concurrency.MainActor @preconcurrency public func convert(direction: Swift.SIMD3<Swift.Float>, from referenceEntity: RealityFoundation.Entity?) -> Swift.SIMD3<Swift.Float>
  @_Concurrency.MainActor @preconcurrency public func convert(normal: Swift.SIMD3<Swift.Float>, from referenceEntity: RealityFoundation.Entity?) -> Swift.SIMD3<Swift.Float>
  @_Concurrency.MainActor @preconcurrency public func convert(transform: RealityFoundation.Transform, from referenceEntity: RealityFoundation.Entity?) -> RealityFoundation.Transform
  @_Concurrency.MainActor @preconcurrency public func convert(position: Swift.SIMD3<Swift.Float>, to referenceEntity: RealityFoundation.Entity?) -> Swift.SIMD3<Swift.Float>
  @_Concurrency.MainActor @preconcurrency public func convert(direction: Swift.SIMD3<Swift.Float>, to referenceEntity: RealityFoundation.Entity?) -> Swift.SIMD3<Swift.Float>
  @_Concurrency.MainActor @preconcurrency public func convert(normal: Swift.SIMD3<Swift.Float>, to referenceEntity: RealityFoundation.Entity?) -> Swift.SIMD3<Swift.Float>
  @_Concurrency.MainActor @preconcurrency public func convert(transform: RealityFoundation.Transform, to referenceEntity: RealityFoundation.Entity?) -> RealityFoundation.Transform
  @_Concurrency.MainActor @preconcurrency public func look(at target: Swift.SIMD3<Swift.Float>, from position: Swift.SIMD3<Swift.Float>, upVector: Swift.SIMD3<Swift.Float> = SIMD3<Float>(0, 1, 0), relativeTo referenceEntity: RealityFoundation.Entity?)
  @available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  @_Concurrency.MainActor @preconcurrency public func look(at target: Swift.SIMD3<Swift.Float>, from position: Swift.SIMD3<Swift.Float>, upVector: Swift.SIMD3<Swift.Float> = SIMD3<Float>(0, 1, 0), relativeTo referenceEntity: RealityFoundation.Entity?, forward: RealityFoundation.Entity.ForwardDirection = .negativeZ)
  @_Concurrency.MainActor @preconcurrency public func move(to transform: RealityFoundation.Transform, relativeTo referenceEntity: RealityFoundation.Entity?)
  @_Concurrency.MainActor @preconcurrency public func move(to transform: simd.float4x4, relativeTo referenceEntity: RealityFoundation.Entity?)
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func move(to target: RealityFoundation.Transform, relativeTo referenceEntity: RealityFoundation.Entity?, duration: Foundation.TimeInterval, timingFunction: RealityFoundation.AnimationTimingFunction = .default) -> RealityFoundation.AnimationPlaybackController
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func move(to target: simd.float4x4, relativeTo referenceEntity: RealityFoundation.Entity?, duration: Foundation.TimeInterval, timingFunction: RealityFoundation.AnimationTimingFunction = .default) -> RealityFoundation.AnimationPlaybackController
  @_Concurrency.MainActor @preconcurrency public func visualBounds(recursive: Swift.Bool = true, relativeTo referenceEntity: RealityFoundation.Entity?, excludeInactive: Swift.Bool = false) -> RealityFoundation.BoundingBox
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct ActionEvent<ActionType> where ActionType : RealityFoundation.EntityAction {
  public let playbackController: RealityFoundation.AnimationPlaybackController
  public let action: ActionType
  public let parameter: ActionType.EventParameterType?
  public var animationState: (any RealityFoundation.AnimationStateProtocol)? {
    get
  }
  public let targetEntity: RealityFoundation.Entity?
  public let reversed: Swift.Bool
  public let startTime: Foundation.TimeInterval
  public let duration: Foundation.TimeInterval
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct ActionEventType : Swift.OptionSet, Swift.Hashable {
  public static var started: RealityFoundation.ActionEventType {
    get
  }
  public static var updated: RealityFoundation.ActionEventType {
    get
  }
  public static var ended: RealityFoundation.ActionEventType {
    get
  }
  public static var skipped: RealityFoundation.ActionEventType {
    get
  }
  public static var paused: RealityFoundation.ActionEventType {
    get
  }
  public static var resumed: RealityFoundation.ActionEventType {
    get
  }
  public static var terminated: RealityFoundation.ActionEventType {
    get
  }
  public init(rawValue: Swift.UInt)
  public let rawValue: Swift.UInt
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias ArrayLiteralElement = RealityFoundation.ActionEventType
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias Element = RealityFoundation.ActionEventType
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias RawValue = Swift.UInt
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public protocol ActionHandlerProtocol {
  associatedtype ActionType : RealityFoundation.EntityAction
  typealias EventType = RealityFoundation.ActionEvent<Self.ActionType>
  mutating func actionStarted(event: Self.EventType)
  mutating func actionUpdated(event: Self.EventType)
  mutating func actionEnded(event: Self.EventType)
  mutating func actionSkipped(event: Self.EventType)
  mutating func actionPaused(event: Self.EventType)
  mutating func actionResumed(event: Self.EventType)
  mutating func actionTerminated(event: Self.EventType)
  static func register(_ creationHandler: @escaping (Self.EventType) -> (any RealityFoundation.ActionHandlerProtocol)?)
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.ActionHandlerProtocol {
  public mutating func actionStarted(event: Self.EventType)
  public mutating func actionUpdated(event: Self.EventType)
  public mutating func actionEnded(event: Self.EventType)
  public mutating func actionSkipped(event: Self.EventType)
  public mutating func actionPaused(event: Self.EventType)
  public mutating func actionResumed(event: Self.EventType)
  public mutating func actionTerminated(event: Self.EventType)
  public static func register(_ creationHandler: @escaping (Self.EventType) -> (any RealityFoundation.ActionHandlerProtocol)?)
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.ActionHandlerProtocol where Self.ActionType : Swift.Decodable, Self.ActionType : Swift.Encodable, Self.ActionType.EventParameterType : Swift.Decodable, Self.ActionType.EventParameterType : Swift.Encodable {
  public static func register(_ creationHandler: @escaping (Self.EventType) -> (any RealityFoundation.ActionHandlerProtocol)?)
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public protocol EntityAction {
  associatedtype EventParameterType = Swift.Never
  var isReversible: Swift.Bool { get }
  var isAdditive: Swift.Bool { get }
  var animatedValueType: (any RealityFoundation.AnimatableData.Type)? { get }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.EntityAction {
  public var isReversible: Swift.Bool {
    get
  }
  public var isAdditive: Swift.Bool {
    get
  }
  public static func registerAction()
  @preconcurrency @_Concurrency.MainActor public static func subscribe(to eventType: RealityFoundation.ActionEventType, _ handler: @escaping @_Concurrency.MainActor (RealityFoundation.ActionEvent<Self>) -> Swift.Void)
  @preconcurrency @_Concurrency.MainActor public static func unsubscribe(from eventType: RealityFoundation.ActionEventType)
  @preconcurrency @_Concurrency.MainActor public static func unsubscribeAll()
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.EntityAction where Self : Swift.Decodable, Self : Swift.Encodable, Self.EventParameterType : Swift.Decodable, Self.EventParameterType : Swift.Encodable {
  public static func registerAction()
  @preconcurrency @_Concurrency.MainActor public static func subscribe(to eventType: RealityFoundation.ActionEventType, _ handler: @escaping @_Concurrency.MainActor (RealityFoundation.ActionEvent<Self>) -> Swift.Void)
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct ActionEventDefinition<ActionType> where ActionType : RealityFoundation.EntityAction {
  public typealias EventParameterType = ActionType.EventParameterType
  public init(startTime: Foundation.TimeInterval, duration: Foundation.TimeInterval, parameter: RealityFoundation.ActionEventDefinition<ActionType>.EventParameterType? = nil)
  public var startTime: Foundation.TimeInterval
  public var duration: Foundation.TimeInterval
  public var parameter: RealityFoundation.ActionEventDefinition<ActionType>.EventParameterType?
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct ActionAnimation<ActionType> : RealityFoundation.AnimationDefinition where ActionType : RealityFoundation.EntityAction {
  public typealias EventDefinitionType = RealityFoundation.ActionEventDefinition<ActionType>
  public typealias EventParameterType = ActionType.EventParameterType
  public var name: Swift.String {
    get
    set
  }
  public var blendLayer: Swift.Int32 {
    get
    set
  }
  public var bindTarget: RealityFoundation.BindTarget {
    get
    set
  }
  public var fillMode: RealityFoundation.AnimationFillMode {
    get
    set
  }
  public var trimStart: Foundation.TimeInterval? {
    get
    set
  }
  public var trimEnd: Foundation.TimeInterval? {
    get
    set
  }
  public var trimDuration: Foundation.TimeInterval? {
    get
    set
  }
  public var offset: Foundation.TimeInterval {
    get
    set
  }
  public var delay: Foundation.TimeInterval {
    get
    set
  }
  public var speed: Swift.Float {
    get
    set
  }
  public var repeatMode: RealityFoundation.AnimationRepeatMode {
    get
    set
  }
  public var duration: Foundation.TimeInterval {
    get
  }
  public init(for action: ActionType, events: [RealityFoundation.ActionAnimation<ActionType>.EventDefinitionType], name: Swift.String = "", bindTarget: RealityFoundation.BindTarget? = nil, blendLayer: Swift.Int32 = 0, repeatMode: RealityFoundation.AnimationRepeatMode = .none, fillMode: RealityFoundation.AnimationFillMode = [], trimStart: Foundation.TimeInterval? = nil, trimEnd: Foundation.TimeInterval? = nil, trimDuration: Foundation.TimeInterval? = nil, offset: Foundation.TimeInterval = 0, delay: Foundation.TimeInterval = 0, speed: Swift.Float = 1.0)
  public var action: ActionType? {
    get
    set
  }
  public var eventDefinitions: [RealityFoundation.ActionEventDefinition<ActionType>] {
    get
    set
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKVisibilityHidePopAnimation : RealityFoundation.__RKVisibilityBaseAnimation {
  @objc deinit
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct AudioMixGroup {
  public let name: Swift.String
  public var gain: RealityFoundation.Audio.Decibel {
    get
    set
  }
  public var speed: Swift.Double
  public var isMuted: Swift.Bool
  public init(name: Swift.String)
  public mutating func fade(to gain: RealityFoundation.Audio.Decibel, duration: Foundation.TimeInterval)
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AudioMixGroup : Swift.Equatable {
  public static func == (lhs: RealityFoundation.AudioMixGroup, rhs: RealityFoundation.AudioMixGroup) -> Swift.Bool
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AudioMixGroup : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(visionOS 2.0, *)
@available(macOS, unavailable)
@available(iOS, unavailable)
public struct DockingRegionComponent : RealityFoundation.Component {
  public var width: Swift.Float {
    get
    set
  }
  public init()
}
@available(visionOS 2.0, *)
@available(macOS, unavailable)
@available(iOS, unavailable)
extension RealityFoundation.DockingRegionComponent {
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.DockingRegionComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityTapTrigger : RealityFoundation.__RKEntityTrigger {
  public var targetEntity: RealityFoundation.Entity?
  public init(targetEntity: RealityFoundation.Entity?, reversible: Swift.Bool? = false)
  override public func matches(with trigger: RealityFoundation.__RKEntityTrigger) -> Swift.Bool
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> RealityFoundation.__RKEntityTrigger?
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityOrbitEntityAction : RealityFoundation.__RKEntityAction {
  @preconcurrency @_Concurrency.MainActor public init(targetEntity: RealityFoundation.Entity?, pivotEntity: RealityFoundation.Entity?, duration: Swift.Float = 1.0, rotations: Swift.Float = 1.0, orbitalAxis: Swift.SIMD3<Swift.Float> = SIMD3<Float>(0, 1, 0), orientToPath: Swift.Bool = false, spinDirection: RealityFoundation.__RKEntitySpinDirectionType = .clockwise, respectPhysics: Swift.Bool = false, physicsAngularCoefficient: Swift.Float = 0, physicsLinearCoefficient: Swift.Float = 0, loop: Swift.Bool = false)
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func prefersInitialOrdering() -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  @objc deinit
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct SpatialAudioComponent {
  public var gain: RealityFoundation.Audio.Decibel
  public var directLevel: RealityFoundation.Audio.Decibel
  public var reverbLevel: RealityFoundation.Audio.Decibel
  public var directivity: RealityFoundation.Audio.Directivity
  public init(gain: RealityFoundation.Audio.Decibel = .zero, directLevel: RealityFoundation.Audio.Decibel = .zero, reverbLevel: RealityFoundation.Audio.Decibel = .zero, directivity: RealityFoundation.Audio.Directivity = .beam(focus: .zero))
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.Entity {
  @_Concurrency.MainActor @preconcurrency public var spatialAudio: RealityFoundation.SpatialAudioComponent? {
    get
    set
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.SpatialAudioComponent : RealityFoundation.Component {
  @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.SpatialAudioComponent
  @_Concurrency.MainActor @preconcurrency public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.SpatialAudioComponent : Swift.Equatable, Swift.Hashable, Swift.Codable {
  public static func == (a: RealityFoundation.SpatialAudioComponent, b: RealityFoundation.SpatialAudioComponent) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.SpatialAudioComponent {
  public init(gain: RealityFoundation.Audio.Decibel = .zero, directLevel: RealityFoundation.Audio.Decibel = .zero, reverbLevel: RealityFoundation.Audio.Decibel = .zero, directivity: RealityFoundation.Audio.Directivity = .beam(focus: .zero), distanceAttenuation: RealityFoundation.Audio.DistanceAttenuation)
  public var distanceAttenuation: RealityFoundation.Audio.DistanceAttenuation {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  @_Concurrency.MainActor @preconcurrency public func __setLoadContext(_ loadContext: RealityFoundation.__SceneResourceLoadResultLoadContext?)
  @_Concurrency.MainActor @preconcurrency public func __fetchLoadContext() -> RealityFoundation.__SceneResourceLoadResultLoadContext?
  @_Concurrency.MainActor @preconcurrency public func __setSceneResourceCacheEntry(_ sceneResourceCache: RealityFoundation.__SceneResourceCache.Entry?)
  @_Concurrency.MainActor @preconcurrency public func __fetchSceneResourceCacheEntry() -> RealityFoundation.__SceneResourceCache.Entry?
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __SceneResourceLoadResultLoadContext {
}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __SceneResourceLoadResult {
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
final public class __SceneResourceCache {
  @_hasMissingDesignatedInitializers final public class Entry {
    @objc deinit
  }
  @available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
  public static func __init() -> RealityFoundation.__SceneResourceCache
  @available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
  final public func __registerImportedScenes(url: Foundation.URL, importedScenes: [RealityFoundation.__SceneImportOperation.__ImportedScene]) throws -> RealityFoundation.__SceneResourceLoadResult
  @objc deinit
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct OpacityComponent : RealityFoundation.Component, Swift.Equatable {
  public var opacity: Swift.Float
  public init(opacity: Swift.Float = 1.0)
  public static func == (lhs: RealityFoundation.OpacityComponent, rhs: RealityFoundation.OpacityComponent) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.OpacityComponent
  @_Concurrency.MainActor @preconcurrency public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
public struct ProjectiveTransformCameraComponent : RealityFoundation.Component, Swift.Equatable {
  public var transform: simd.float4x4
  @available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
  public init(projectionMatrix: simd.float4x4)
  @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.ProjectiveTransformCameraComponent
  @_Concurrency.MainActor @preconcurrency public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
  public static func == (a: RealityFoundation.ProjectiveTransformCameraComponent, b: RealityFoundation.ProjectiveTransformCameraComponent) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __Downsampling {
  public struct Factor {
    public init(mipmapOffset: Swift.Int)
    public init(value: Swift.Int)
  }
  public enum Resolution {
    case noDownsampling
    case downsampling(factors: [RealityFoundation.__Downsampling.Factor])
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol __DownsamplingStrategy {
  func resolve(_ descriptors: [Metal.MTLTextureDescriptor]) throws -> RealityFoundation.__Downsampling.Resolution
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __DownsamplingStrategyClosure : RealityFoundation.__DownsamplingStrategy {
  public func resolve(_ descriptors: [Metal.MTLTextureDescriptor]) throws -> RealityFoundation.__Downsampling.Resolution
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__Downsampling {
  public struct Minimal : RealityFoundation.__DownsamplingStrategy {
    public init()
    public func resolve(_ descriptors: [Metal.MTLTextureDescriptor]) throws -> RealityFoundation.__Downsampling.Resolution
  }
  public typealias ByteSize = Swift.UInt64
  public enum Error : Swift.Error, Swift.CustomDebugStringConvertible {
    case noSufficientDownsamplingStrategy(budget: RealityFoundation.__Downsampling.ByteSize, minimalSize: RealityFoundation.__Downsampling.ByteSize)
    public var debugDescription: Swift.String {
      get
    }
  }
  public struct Budgeted : RealityFoundation.__DownsamplingStrategy {
    public init(availableBytes: RealityFoundation.__Downsampling.ByteSize, device: any Metal.MTLDevice)
    public func resolve(_ descriptors: [Metal.MTLTextureDescriptor]) throws -> RealityFoundation.__Downsampling.Resolution
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__Downsampling {
  public static func getMipmapByteSizes(_ descriptor: Metal.MTLTextureDescriptor, device: any Metal.MTLDevice) -> [RealityFoundation.__Downsampling.ByteSize]
}
@_hasMissingDesignatedInitializers @available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public class VideoPlaybackController {
  @available(visionOS, unavailable)
  @available(macOS, introduced: 11, deprecated: 14, message: "Use the ChannelAudioComponent, AmbientAudioComponent, or SpatialAudioComponent instead.")
  @available(macCatalyst, introduced: 14, deprecated: 17, message: "Use the ChannelAudioComponent, AmbientAudioComponent, or SpatialAudioComponent instead.")
  @available(iOS, introduced: 14, deprecated: 17, message: "Use the ChannelAudioComponent, AmbientAudioComponent, or SpatialAudioComponent instead.")
  @_Concurrency.MainActor @preconcurrency public var audioInputMode: RealityFoundation.AudioResource.InputMode {
    get
    set
  }
  @objc deinit
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.VideoPlaybackController {
  public enum ViewingMode {
    case mono
    @available(visionOS 1.0, *)
    @available(macOS, unavailable)
    @available(iOS, unavailable)
    @available(tvOS, unavailable)
    case stereo
    public static func == (a: RealityFoundation.VideoPlaybackController.ViewingMode, b: RealityFoundation.VideoPlaybackController.ViewingMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public var preferredViewingMode: RealityFoundation.VideoPlaybackController.ViewingMode {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var currentViewingMode: RealityFoundation.VideoPlaybackController.ViewingMode? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var currentImageSize: CoreFoundation.CGSize? {
    get
  }
}
@available(visionOS, unavailable)
@available(macOS, introduced: 12.0, deprecated: 15.0, message: "Use ChannelAudioComponent, AmbientAudioComponent, or SpatialAudioComponent instead.")
@available(macCatalyst, introduced: 15.0, deprecated: 18.0, message: "Use ChannelAudioComponent, AmbientAudioComponent, or SpatialAudioComponent instead.")
@available(iOS, introduced: 15.0, deprecated: 18.0, message: "Use ChannelAudioComponent, AmbientAudioComponent, or SpatialAudioComponent instead.")
extension RealityFoundation.VideoPlaybackController {
  @_Concurrency.MainActor @preconcurrency public var reverbSendLevel: RealityFoundation.AudioPlaybackController.Decibel {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityProximityTrigger : RealityFoundation.__RKEntityTrigger {
  public enum ExitType : Swift.Int, Swift.Codable {
    case none
    case sequence
    case reverse
    public init?(rawValue: Swift.Int)
    @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var targetEntity: RealityFoundation.Entity?
  public var __targetEntity: RealityFoundation.Entity? {
    get
  }
  public var distance: Swift.Float
  public var type: RealityFoundation.__RKEntityProximityTrigger.ExitType
  public var enterFired: Swift.Bool {
    get
  }
  public var exitFired: Swift.Bool {
    get
  }
  public init(targetEntity: RealityFoundation.Entity?, distance: Swift.Float, type: RealityFoundation.__RKEntityProximityTrigger.ExitType)
  override public func matches(with trigger: RealityFoundation.__RKEntityTrigger) -> Swift.Bool
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> RealityFoundation.__RKEntityTrigger?
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol Component {
  @available(macOS, deprecated: 13.0, renamed: "componentName")
  @available(iOS, deprecated: 16.0, renamed: "componentName")
  static var __typeName: Swift.String { get }
  static var __size: Swift.Int { get }
  @available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
  static func __store(attribute: any RealityFoundation.Component, to buffer: Swift.UnsafeMutableRawPointer, offset: Swift.Int, deinitialize: Swift.Bool)
  @available(macOS, deprecated: 11.0, message: "Use __store(attribute:to:offset:deinitialize:) instead.")
  @available(iOS, deprecated: 14.0, message: "Use __store(attribute:to:offset:deinitialize:) instead.")
  static func __store(attribute: any RealityFoundation.Component, to buffer: Swift.UnsafeMutableRawPointer, offset: Swift.Int)
  static func __free(to buffer: Swift.UnsafeMutableRawPointer, offset: Swift.Int)
  @preconcurrency @_Concurrency.MainActor static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> Self
  @preconcurrency @_Concurrency.MainActor func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  static var __coreComponentType: RealityFoundation.__ComponentTypeRef { get }
  @preconcurrency @_Concurrency.MainActor static func __addIntrospectionData(_ builder: Swift.OpaquePointer?)
  @available(macOS, deprecated: 15.0)
  @available(iOS, deprecated: 18.0)
  @available(visionOS, deprecated: 1.0)
  static func __load(from buffer: Swift.UnsafeRawPointer, offset: Swift.Int) -> any RealityFoundation.Component
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Component {
  @available(macOS, deprecated: 13.0, renamed: "componentName")
  @available(iOS, deprecated: 16.0, renamed: "componentName")
  public static var __typeName: Swift.String {
    get
  }
  public static var __size: Swift.Int {
    get
  }
  public static func __load(from buffer: Swift.UnsafeRawPointer, offset: Swift.Int) -> any RealityFoundation.Component
  public static func __store(attribute: any RealityFoundation.Component, to buffer: Swift.UnsafeMutableRawPointer, offset: Swift.Int, deinitialize: Swift.Bool)
  @available(macOS, deprecated: 11.0, message: "Use __store(attribute:to:offset:deinitialize:) instead.")
  @available(iOS, deprecated: 14.0, message: "Use __store(attribute:to:offset:deinitialize:) instead.")
  public static func __store(attribute: any RealityFoundation.Component, to buffer: Swift.UnsafeMutableRawPointer, offset: Swift.Int)
  public static func __free(to buffer: Swift.UnsafeMutableRawPointer, offset: Swift.Int)
  @preconcurrency @_Concurrency.MainActor public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> Self
  @preconcurrency @_Concurrency.MainActor public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
  public static func __addIntrospectionData(_ builder: Swift.OpaquePointer?)
  public static func registerComponent()
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public protocol TransientComponent : RealityFoundation.Component {
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKVisibilityBaseAnimation {
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol __RKActiveSceneObserver : AnyObject {
  @preconcurrency @_Concurrency.MainActor func manager(_ manager: RealityFoundation.__RKActiveSceneManager, activeSceneDidChange scene: RealityFoundation.Scene?)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@available(*, deprecated, message: "Please use the per-interaction-service runtime scene coordinator. __RKRuntimeSceneCoordinator")
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKActiveSceneManager {
  public static let shared: RealityFoundation.__RKActiveSceneManager
  public init()
  public var activeScene: RealityFoundation.Scene? {
    get
    set
  }
  public func addObserver(observer: any RealityFoundation.__RKActiveSceneObserver)
  public func removeObserver(observer: any RealityFoundation.__RKActiveSceneObserver)
  @objc deinit
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.SimpleMaterial {
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public typealias BaseColor = RealityFoundation.PhysicallyBasedMaterial.BaseColor
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public typealias Texture = RealityFoundation.PhysicallyBasedMaterial.Texture
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.UnlitMaterial {
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public typealias BaseColor = RealityFoundation.PhysicallyBasedMaterial.BaseColor
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public typealias Texture = RealityFoundation.PhysicallyBasedMaterial.Texture
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public typealias Blending = RealityFoundation.PhysicallyBasedMaterial.Blending
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.HasModel {
  @_Concurrency.MainActor @preconcurrency public var blendWeights: [[Swift.Float]] {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var blendWeightNames: [[Swift.String]] {
    get
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct __SkyboxComponent : RealityFoundation.Component, Swift.Equatable {
  public var environment: RealityFoundation.EnvironmentResource?
  public init()
  public init(environment: RealityFoundation.EnvironmentResource?)
  public static func == (lhs: RealityFoundation.__SkyboxComponent, rhs: RealityFoundation.__SkyboxComponent) -> Swift.Bool
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.__SkyboxComponent {
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.__SkyboxComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public class BlendShapeWeightsMapping : RealityFoundation.Resource {
  public init(meshResource: RealityFoundation.MeshResource)
  public init(blendShapeName: Swift.String, weightNames: [Swift.String])
  public var __coreAsset: RealityFoundation.__AssetRef {
    get
  }
  @objc deinit
}
@available(visionOS 1.0, macOS 15.0, macCatalyst 18.0, iOS 18.0, *)
extension RealityFoundation.Transform {
  public init(_ transform: Spatial.AffineTransform3D)
}
@available(visionOS 1.0, macOS 15.0, macCatalyst 18.0, iOS 18.0, *)
extension Spatial.AffineTransform3D {
  public init(_ transform: RealityFoundation.Transform)
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct MeshJointInfluence {
  public init()
  public init(jointIndex: Swift.Int, weight: Swift.Float)
  public var jointIndex: Swift.Int {
    get
    set
  }
  public var weight: Swift.Float {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public enum MeshBuffers {
  public struct Identifier : Swift.Hashable, Swift.Equatable, Swift.CustomStringConvertible, Swift.Sendable {
    public let name: Swift.String
    public let isCustom: Swift.Bool
    @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
    public let isBlendShape: Swift.Bool
    public static let positions: RealityFoundation.MeshBuffers.Identifier
    public static let normals: RealityFoundation.MeshBuffers.Identifier
    public static let tangents: RealityFoundation.MeshBuffers.Identifier
    public static let bitangents: RealityFoundation.MeshBuffers.Identifier
    public static let textureCoordinates: RealityFoundation.MeshBuffers.Identifier
    public static let triangleIndices: RealityFoundation.MeshBuffers.Identifier
    public var description: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (lhs: RealityFoundation.MeshBuffers.Identifier, rhs: RealityFoundation.MeshBuffers.Identifier) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Rate {
    case vertex
    case face
    case faceVarying
    public static func == (a: RealityFoundation.MeshBuffers.Rate, b: RealityFoundation.MeshBuffers.Rate) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ElementType {
    case uInt8
    case uInt16
    case uInt32
    case int8
    case int16
    case int32
    case float
    case double
    case simd2Float
    case simd3Float
    case simd4Float
    @available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
    case jointInfluence
    public static func == (a: RealityFoundation.MeshBuffers.ElementType, b: RealityFoundation.MeshBuffers.ElementType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public protocol MeshBufferSemantic : Swift.Identifiable {
  associatedtype Element
  var id: RealityFoundation.MeshBuffers.Identifier { get }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffers {
  public struct Semantic<Element> : RealityFoundation.MeshBufferSemantic {
    public let id: RealityFoundation.MeshBuffers.Identifier
    @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
    public typealias ID = RealityFoundation.MeshBuffers.Identifier
  }
  public static let positions: RealityFoundation.MeshBuffers.Semantic<Swift.SIMD3<Swift.Float>>
  public static let normals: RealityFoundation.MeshBuffers.Semantic<Swift.SIMD3<Swift.Float>>
  public static let tangents: RealityFoundation.MeshBuffers.Semantic<Swift.SIMD3<Swift.Float>>
  public static let bitangents: RealityFoundation.MeshBuffers.Semantic<Swift.SIMD3<Swift.Float>>
  public static let textureCoordinates: RealityFoundation.MeshBuffers.Semantic<Swift.SIMD2<Swift.Float>>
  public static let triangleIndices: RealityFoundation.MeshBuffers.Semantic<Swift.UInt32>
  public static func custom<Value>(_ name: Swift.String, type: Value.Type) -> RealityFoundation.MeshBuffers.Semantic<Value>
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.MeshBuffers {
  public static let jointInfluences: RealityFoundation.MeshBuffers.Semantic<RealityFoundation.MeshJointInfluence>
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.MeshBuffers.Identifier {
  public static let jointInfluences: RealityFoundation.MeshBuffers.Identifier
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct MeshBuffer<Element> : Swift.Sequence {
  public typealias Element = Element
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> Element?
  }
  public __consuming func makeIterator() -> RealityFoundation.MeshBuffer<Element>.Iterator
  public let count: Swift.Int
  public var rate: RealityFoundation.MeshBuffers.Rate
  public var elements: [Element] {
    get
  }
  public func usingRate(_ rate: RealityFoundation.MeshBuffers.Rate) -> RealityFoundation.MeshBuffer<Element>
  public func forEach(_ body: (Element, Element) throws -> Swift.Void) rethrows
  public func forEach(_ body: (Element, Element, Element) throws -> Swift.Void) rethrows
  public func forEach(_ body: (Element, Element, Element, Element) throws -> Swift.Void) rethrows
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffer where Element == Swift.Int8 {
  public init(_ array: [Element])
  public init(elements: [Element], indices: [Swift.UInt32])
  public init<S>(_ sequence: S) where S : Swift.Sequence, S.Element == Swift.Int8
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffer where Element == Swift.UInt8 {
  public init(_ array: [Element])
  public init(elements: [Element], indices: [Swift.UInt32])
  public init<S>(_ sequence: S) where S : Swift.Sequence, S.Element == Swift.UInt8
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffer where Element == Swift.Int16 {
  public init(_ array: [Element])
  public init(elements: [Element], indices: [Swift.UInt32])
  public init<S>(_ sequence: S) where S : Swift.Sequence, S.Element == Swift.Int16
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffer where Element == Swift.UInt16 {
  public init(_ array: [Element])
  public init(elements: [Element], indices: [Swift.UInt32])
  public init<S>(_ sequence: S) where S : Swift.Sequence, S.Element == Swift.UInt16
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffer where Element == Swift.Int32 {
  public init(_ array: [Element])
  public init(elements: [Element], indices: [Swift.UInt32])
  public init<S>(_ sequence: S) where S : Swift.Sequence, S.Element == Swift.Int32
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffer where Element == Swift.UInt32 {
  public init(_ array: [Element])
  public init(elements: [Element], indices: [Swift.UInt32])
  public init<S>(_ sequence: S) where S : Swift.Sequence, S.Element == Swift.UInt32
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffer where Element == Swift.Float {
  public init(_ array: [Element])
  public init(elements: [Element], indices: [Swift.UInt32])
  public init<S>(_ sequence: S) where S : Swift.Sequence, S.Element == Swift.Float
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffer where Element == Swift.Double {
  public init(_ array: [Element])
  public init(elements: [Element], indices: [Swift.UInt32])
  public init<S>(_ sequence: S) where S : Swift.Sequence, S.Element == Swift.Double
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffer where Element == Swift.SIMD2<Swift.Float> {
  public init(_ array: [Element])
  public init(elements: [Element], indices: [Swift.UInt32])
  public init<S>(_ sequence: S) where S : Swift.Sequence, S.Element == Swift.SIMD2<Swift.Float>
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffer where Element == Swift.SIMD3<Swift.Float> {
  public init(_ array: [Element])
  public init(elements: [Element], indices: [Swift.UInt32])
  public init<S>(_ sequence: S) where S : Swift.Sequence, S.Element == Swift.SIMD3<Swift.Float>
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffer where Element == Swift.SIMD4<Swift.Float> {
  public init(_ array: [Element])
  public init(elements: [Element], indices: [Swift.UInt32])
  public init<S>(_ sequence: S) where S : Swift.Sequence, S.Element == Swift.SIMD4<Swift.Float>
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.MeshBuffer where Element == RealityFoundation.MeshJointInfluence {
  public init(_ array: [Element])
  public init(elements: [Element], indices: [Swift.UInt32])
  public init<S>(_ sequence: S) where S : Swift.Sequence, S.Element == RealityFoundation.MeshJointInfluence
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffers {
  public typealias Positions = RealityFoundation.MeshBuffer<Swift.SIMD3<Swift.Float>>
  public typealias Normals = RealityFoundation.MeshBuffer<Swift.SIMD3<Swift.Float>>
  public typealias Tangents = RealityFoundation.MeshBuffer<Swift.SIMD3<Swift.Float>>
  public typealias TextureCoordinates = RealityFoundation.MeshBuffer<Swift.SIMD2<Swift.Float>>
  public typealias TriangleIndices = RealityFoundation.MeshBuffer<Swift.UInt32>
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.MeshBuffers {
  public static func blendShapeOffsets(named: Swift.String) -> RealityFoundation.MeshBuffers.Semantic<Swift.SIMD3<Swift.Float>>
  public typealias BlendShapeOffsets = RealityFoundation.MeshBuffer<Swift.SIMD3<Swift.Float>>
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.MeshBuffers {
  public typealias JointInfluences = RealityFoundation.MeshBuffer<RealityFoundation.MeshJointInfluence>
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct AnyMeshBuffer {
  public var id: RealityFoundation.MeshBuffers.Identifier {
    get
  }
  public var count: Swift.Int {
    get
  }
  public var rate: RealityFoundation.MeshBuffers.Rate {
    get
  }
  public var elementType: RealityFoundation.MeshBuffers.ElementType {
    get
  }
  public func get<Value>(_: Value.Type = Value.self) -> RealityFoundation.MeshBuffer<Value>?
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public protocol MeshBufferContainer {
  var buffers: [RealityFoundation.MeshBuffers.Identifier : RealityFoundation.AnyMeshBuffer] { get }
  subscript<S>(semantic: S) -> RealityFoundation.MeshBuffer<S.Element>? where S : RealityFoundation.MeshBufferSemantic { get set }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBufferContainer {
  public var positions: RealityFoundation.MeshBuffers.Positions {
    get
    set
  }
  public var normals: RealityFoundation.MeshBuffers.Normals? {
    get
    set
  }
  public var tangents: RealityFoundation.MeshBuffers.Tangents? {
    get
    set
  }
  public var bitangents: RealityFoundation.MeshBuffers.Tangents? {
    get
    set
  }
  public var textureCoordinates: RealityFoundation.MeshBuffers.TextureCoordinates? {
    get
    set
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.MeshBufferContainer {
  public func blendShapeOffsets(named: Swift.String) -> RealityFoundation.MeshBuffers.BlendShapeOffsets?
  public mutating func setBlendShapeOffsets(named: Swift.String, buffer: RealityFoundation.MeshBuffers.BlendShapeOffsets?)
  public var blendShapeNames: [Swift.String] {
    get
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct MeshDescriptor : RealityFoundation.MeshBufferContainer {
  public enum Materials {
    case allFaces(Swift.UInt32)
    case perFace([Swift.UInt32])
  }
  public enum Primitives {
    case triangles([Swift.UInt32])
    case polygons([Swift.UInt8], [Swift.UInt32])
    case trianglesAndQuads(triangles: [Swift.UInt32], quads: [Swift.UInt32])
  }
  public init(name: Swift.String = "")
  public var name: Swift.String
  public var materials: RealityFoundation.MeshDescriptor.Materials
  public var primitives: RealityFoundation.MeshDescriptor.Primitives?
  public var buffers: [RealityFoundation.MeshBuffers.Identifier : RealityFoundation.AnyMeshBuffer] {
    get
  }
  public subscript<S>(semantic: S) -> RealityFoundation.MeshBuffer<S.Element>? where S : RealityFoundation.MeshBufferSemantic {
    get
    set
  }
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.Entity {
  @_Concurrency.MainActor @preconcurrency public func playAudio(configuration: RealityFoundation.AudioGeneratorConfiguration = .init(), _ generatorRenderHandler: @escaping RealityFoundation.Audio.GeneratorRenderHandler) throws -> RealityFoundation.AudioGeneratorController
  @_Concurrency.MainActor @preconcurrency public func prepareAudio(configuration: RealityFoundation.AudioGeneratorConfiguration = .init(), _ generatorRenderHandler: @escaping RealityFoundation.Audio.GeneratorRenderHandler) throws -> RealityFoundation.AudioGeneratorController
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEmphasisBlinkAnimation : RealityFoundation.__RKEmphasisBaseAnimation {
  @objc deinit
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
@available(visionOS, unavailable)
extension RealityFoundation.CustomMaterial {
  public struct ResourceStorage<UniformsType> : ~Swift.Copyable {
    public subscript(textureResource path: Swift.KeyPath<UniformsType, Swift.UInt64>) -> RealityFoundation.TextureResource {
      get
      set
    }
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
@available(visionOS, unavailable)
public enum CustomShaderStage : Swift.Equatable, Swift.Hashable, Swift.Sendable {
  case geometryModifier
  case surfaceShader
  public static func == (a: RealityFoundation.CustomShaderStage, b: RealityFoundation.CustomShaderStage) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
@available(visionOS, unavailable)
extension RealityFoundation.CustomMaterial {
  public mutating func withMutableUniforms<UniformsType>(ofType: UniformsType.Type, stage: RealityFoundation.CustomShaderStage, _ callback: (inout UniformsType, inout RealityFoundation.CustomMaterial.ResourceStorage<UniformsType>) -> Swift.Void)
  public mutating func withMutableUniforms<UniformsType>(ofType: UniformsType.Type, _ callback: (inout UniformsType, inout RealityFoundation.CustomMaterial.ResourceStorage<UniformsType>) -> Swift.Void)
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKLightTrigger : RealityFoundation.__RKEntityTrigger {
  override public init()
  @objc deinit
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct TextComponent : RealityFoundation.Component {
  public var size: CoreFoundation.CGSize {
    get
    set
  }
  public var text: Foundation.AttributedString?
  public var backgroundColor: CoreGraphics.CGColor?
  public var cornerRadius: Swift.Float
  public init()
  @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.TextComponent
  @_Concurrency.MainActor @preconcurrency public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@_hasMissingDesignatedInitializers @available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
@_Concurrency.MainActor public class AudioGeneratorController {
  @_Concurrency.MainActor weak public var entity: RealityFoundation.Entity? {
    get
  }
  @_Concurrency.MainActor final public let configuration: RealityFoundation.AudioGeneratorConfiguration
  @objc deinit
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AudioGeneratorController {
  @_Concurrency.MainActor public var gain: RealityFoundation.Audio.Decibel {
    get
    set
  }
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AudioGeneratorController {
  @_Concurrency.MainActor public var isPlaying: Swift.Bool {
    get
  }
  @_Concurrency.MainActor public func play()
  @_Concurrency.MainActor public func stop()
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol Event : Swift.Sendable {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol EventSource {
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public enum PhysicsSimulationEvents {
  public struct WillSimulate : RealityFoundation.Event {
    public let deltaTime: Foundation.TimeInterval
    public let simulationEntity: RealityFoundation.Entity
  }
  public struct DidSimulate : RealityFoundation.Event {
    public let deltaTime: Foundation.TimeInterval
    public let simulationEntity: RealityFoundation.Entity
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum SceneEvents {
  public struct Update : RealityFoundation.Event {
    public let scene: RealityFoundation.Scene
    public let deltaTime: Foundation.TimeInterval
  }
  public struct AnchoredStateChanged : RealityFoundation.Event {
    public let isAnchored: Swift.Bool
    public let anchor: any RealityFoundation.HasAnchoring
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.SceneEvents {
  public struct DidAddEntity : RealityFoundation.Event {
    public let entity: RealityFoundation.Entity
  }
  public struct DidActivateEntity : RealityFoundation.Event {
    public let entity: RealityFoundation.Entity
  }
  public struct WillDeactivateEntity : RealityFoundation.Event {
    public let entity: RealityFoundation.Entity
  }
  public struct WillRemoveEntity : RealityFoundation.Event {
    public let entity: RealityFoundation.Entity
  }
  public struct DidReparentEntity : RealityFoundation.Event {
    public let child: RealityFoundation.Entity
    public let previousParent: RealityFoundation.Entity?
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum AnimationEvents {
  public struct PlaybackCompleted : RealityFoundation.Event {
    public let playbackController: RealityFoundation.AnimationPlaybackController
  }
  public struct PlaybackLooped : RealityFoundation.Event {
    public let playbackController: RealityFoundation.AnimationPlaybackController
  }
  public struct PlaybackTerminated : RealityFoundation.Event {
    public let playbackController: RealityFoundation.AnimationPlaybackController
  }
}
@available(visionOS 1.0, macOS 15.0, macCatalyst 18.0, iOS 18.0, *)
extension RealityFoundation.AnimationEvents {
  public struct PlaybackStarted : RealityFoundation.Event {
    public let playbackController: RealityFoundation.AnimationPlaybackController
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.AnimationEvents {
  public struct SkeletalPoseUpdateComplete : RealityFoundation.Event {
    public let deltaTime: Swift.Float
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum AudioEvents {
  public struct PlaybackCompleted : RealityFoundation.Event {
    public var playbackController: RealityFoundation.AudioPlaybackController
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct Contact : Swift.Sendable {
  public let point: Swift.SIMD3<Swift.Float>
  public let normal: Swift.SIMD3<Swift.Float>
  public let impulse: Swift.Float
  public let impulseDirection: Swift.SIMD3<Swift.Float>
  public let penetrationDistance: Swift.Float
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum CollisionEvents {
  public struct Began : RealityFoundation.Event {
    public let entityA: RealityFoundation.Entity
    public let entityB: RealityFoundation.Entity
    public let position: Swift.SIMD3<Swift.Float>
    public let impulse: Swift.Float
  }
  public struct Updated : RealityFoundation.Event {
    public let entityA: RealityFoundation.Entity
    public let entityB: RealityFoundation.Entity
    public let position: Swift.SIMD3<Swift.Float>
    public let impulse: Swift.Float
  }
  public struct Ended : RealityFoundation.Event {
    public let entityA: RealityFoundation.Entity
    public let entityB: RealityFoundation.Entity
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.CollisionEvents.Began {
  public var penetrationDistance: Swift.Float {
    get
  }
  public var impulseDirection: Swift.SIMD3<Swift.Float> {
    get
  }
  public var contacts: [RealityFoundation.Contact] {
    get
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.CollisionEvents.Updated {
  public var penetrationDistance: Swift.Float {
    get
  }
  public var impulseDirection: Swift.SIMD3<Swift.Float> {
    get
  }
  public var contacts: [RealityFoundation.Contact] {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum SynchronizationEvents {
  public struct OwnershipRequest : RealityFoundation.Event {
    public let entity: RealityFoundation.Entity
    public let requester: any RealityFoundation.SynchronizationPeerID
    public let accept: () -> Swift.Void
  }
  public struct OwnershipChanged : RealityFoundation.Event {
    public let entity: RealityFoundation.Entity
    public let newOwner: (any RealityFoundation.SynchronizationPeerID)?
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public enum ComponentEvents {
  public struct DidAdd : RealityFoundation.Event {
    public let entity: RealityFoundation.Entity
    public let componentType: any RealityFoundation.Component.Type
  }
  public struct DidActivate : RealityFoundation.Event {
    public let entity: RealityFoundation.Entity
    public let componentType: any RealityFoundation.Component.Type
  }
  public struct WillDeactivate : RealityFoundation.Event {
    public let entity: RealityFoundation.Entity
    public let componentType: any RealityFoundation.Component.Type
  }
  public struct WillRemove : RealityFoundation.Event {
    public let entity: RealityFoundation.Entity
    public let componentType: any RealityFoundation.Component.Type
  }
  public struct DidChange : RealityFoundation.Event {
    public let entity: RealityFoundation.Entity
    public let componentType: any RealityFoundation.Component.Type
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public enum VideoPlayerEvents {
  public struct ContentTypeDidChange : RealityFoundation.Event {
    public enum ContentType : Swift.UInt8, Swift.Sendable {
      case invalid
      case mono
      public init?(rawValue: Swift.UInt8)
      @available(iOS 18.0, visionOS 1.0, macOS 15.0, macCatalyst 18.0, *)
      public typealias RawValue = Swift.UInt8
      public var rawValue: Swift.UInt8 {
        get
      }
    }
    public let contentType: RealityFoundation.VideoPlayerEvents.ContentTypeDidChange.ContentType
    public let previousType: RealityFoundation.VideoPlayerEvents.ContentTypeDidChange.ContentType
  }
  public struct ViewingModeDidChange : RealityFoundation.Event {
    public let currentViewingMode: RealityFoundation.VideoPlaybackController.ViewingMode?
    public let previousViewingMode: RealityFoundation.VideoPlaybackController.ViewingMode?
  }
  @available(visionOS 2.0, *)
  @available(macOS, unavailable)
  @available(iOS, unavailable)
  @available(macCatalyst, unavailable)
  public struct ImmersiveViewingModeDidChange : RealityFoundation.Event {
    public let previousMode: RealityFoundation.VideoPlayerComponent.ImmersiveViewingMode?
    public let currentMode: RealityFoundation.VideoPlayerComponent.ImmersiveViewingMode?
  }
  @available(visionOS 2.0, *)
  @available(macOS, unavailable)
  @available(iOS, unavailable)
  @available(macCatalyst, unavailable)
  public struct ImmersiveViewingModeWillTransition : RealityFoundation.Event {
    public let previousMode: RealityFoundation.VideoPlayerComponent.ImmersiveViewingMode?
    public let currentMode: RealityFoundation.VideoPlayerComponent.ImmersiveViewingMode?
  }
  @available(visionOS 2.0, *)
  @available(macOS, unavailable)
  @available(iOS, unavailable)
  @available(macCatalyst, unavailable)
  public struct ImmersiveViewingModeDidTransition : RealityFoundation.Event {
    public let previousMode: RealityFoundation.VideoPlayerComponent.ImmersiveViewingMode?
    public let currentMode: RealityFoundation.VideoPlayerComponent.ImmersiveViewingMode?
  }
  public struct VideoSizeDidChange : RealityFoundation.Event {
    public let screenMeshSize: Swift.SIMD2<Swift.Float>
    public let videoDimension: Swift.SIMD2<Swift.Float>
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Scene {
  @_Concurrency.MainActor @preconcurrency public func subscribe<E>(to event: E.Type, on sourceObject: (any RealityFoundation.EventSource)? = nil, _ handler: @escaping (E) -> Swift.Void) -> any Combine.Cancellable where E : RealityFoundation.Event
  @_Concurrency.MainActor @preconcurrency public func publisher<E>(for event: E.Type, on sourceObject: (any RealityFoundation.EventSource)? = nil) -> RealityFoundation.Scene.Publisher<E> where E : RealityFoundation.Event
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension RealityFoundation.Scene {
  @preconcurrency @_Concurrency.MainActor public func subscribe<E>(to event: E.Type, on sourceObject: (any RealityFoundation.EventSource)? = nil, componentType: (any RealityFoundation.Component.Type)?, _ handler: @escaping (E) -> Swift.Void) -> any Combine.Cancellable where E : RealityFoundation.Event
  @preconcurrency @_Concurrency.MainActor public func publisher<E>(for event: E.Type, on sourceObject: (any RealityFoundation.EventSource)? = nil, componentType: (any RealityFoundation.Component.Type)?) -> RealityFoundation.Scene.Publisher<E> where E : RealityFoundation.Event
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Scene {
  public struct Publisher<E> : Combine.Publisher where E : RealityFoundation.Event {
    public typealias Output = E
    public typealias Failure = Swift.Never
    public func receive<S>(subscriber: S) where E == S.Input, S : Combine.Subscriber, S.Failure == Swift.Never
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __REAssetBundle {
  public static let __sdkBundleID: Swift.String
  public static let __sdkBundleVersionKey: Swift.String
  public static let __sdkBundleVersion: Swift.String
  public static let __sdkBundleVersionInvalid: Swift.String
  public static let __platform: Swift.String
  public static let __fileExtension: Swift.String
  public static var fileExtension: Swift.String {
    get
  }
  @available(*, deprecated, message: "do not use")
  public struct Header : Swift.Codable {
    public struct VersionInfo : Swift.Codable {
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public var versionInfo: RealityFoundation.__REAssetBundle.Header.VersionInfo
    public var minVersion: Swift.Int
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public var sceneAssets: [RealityFoundation.__REAsset] {
    get
  }
  public let __sceneAssets: [RealityFoundation.__REAsset]
  public var mainSceneAsset: RealityFoundation.__REAsset? {
    get
  }
  public var __mainSceneAsset: RealityFoundation.__REAsset? {
    get
  }
  public static func frameworkVersion(key: Swift.String) -> Swift.String
  @available(*, deprecated, message: "Will be removed by end of January 2025 - rdar://136600358. Please use use __platform instead")
  public static func platform() -> Swift.String
  public func mainSceneIdentifier() -> RealityFoundation.__REAssetIdentifier?
  public enum QueueOptions : Swift.Equatable {
    case fromEngineQueue
    case notFromEngineQueue(canUseEngineQueue: Swift.Bool)
    public static func == (a: RealityFoundation.__REAssetBundle.QueueOptions, b: RealityFoundation.__REAssetBundle.QueueOptions) -> Swift.Bool
  }
  public struct ExportOptions {
    public struct AssetRemapping {
      public let rawAssetPath: Swift.String
      public let replacementName: Swift.String
      public init(rawAssetPath: Swift.String, replacement: Swift.String)
    }
    public var queueOptions: RealityFoundation.__REAssetBundle.QueueOptions
    public var compressionLevel: Swift.Int?
    public var progress: Foundation.Progress?
    public var generateIdentifier: Swift.Bool
    public var deduplicateAssets: Swift.Bool
    public var __envelopeVersion: RealityFoundation.__AssetBundleEnvelopeVersion
    @available(macOS 13.0, iOS 16.0, macCatalyst 16.0, *)
    public var deploymentTarget: RealityFoundation.__REAssetBundle.ExportOptions.DeploymentTarget?
    public var versionOverride: Swift.Int?
    public var useAutoVersioning: Swift.Bool
    public var restrictToSeed: Swift.Bool
    public var configurationSetNames: [Swift.String]?
    public var defaultConfigurationNames: [Swift.String]?
    public var sceneNamesToConfigurationSpecifications: [Swift.String : [Swift.String]]?
    @available(*, deprecated, message: "Will be removed by end of January 2023 - rdar://102083565. Please use assetsRemapping instead.")
    public var remapSingleFile: ((Foundation.URL) -> RealityFoundation.__REAssetBundle.ExportOptions.AssetRemapping?)?
    @available(*, deprecated, message: "Will be removed by end of January 2023 - rdar://102083565. Please use assetsRemapping instead.")
    public var remapMultipleFiles: ((Foundation.URL) -> [RealityFoundation.__REAssetBundle.ExportOptions.AssetRemapping]?)?
    public var assetsRemapping: [RealityFoundation.__REAssetBundle.ExportOptions.AssetRemapping]?
    public var makeSnapshotOfDynamicTextures: Swift.Bool
    public init(queueOptions: RealityFoundation.__REAssetBundle.QueueOptions)
  }
  public struct LoadOptions {
    public var queueOptions: RealityFoundation.__REAssetBundle.QueueOptions
    @available(*, deprecated, message: "will be removed")
    public var materialDefinition: RealityFoundation.__REAssetBundle.__MaterialDefinitionOverride?
    public var downsamplingStrategy: (any RealityFoundation.__DownsamplingStrategy)?
    public var performanceReport: RealityFoundation.__REArchivalStats?
    public var loadDedupeFile: Swift.Bool
    public var waitForResourceSharingClients: Swift.Bool
    public var loadOnResourceSharingClients: Swift.Bool
    public enum ContentRequest {
      case allScenes
      case mainScene
      case namedScene(Swift.String)
    }
    public var contentRequest: RealityFoundation.__REAssetBundle.LoadOptions.ContentRequest
    public init(queueOptions: RealityFoundation.__REAssetBundle.QueueOptions)
  }
  @available(*, deprecated, message: "will be removed")
  public struct __MaterialDefinitionOverride {
    public init(materialDefinition: Swift.String, serviceLocator: Swift.OpaquePointer)
  }
  @available(*, deprecated, message: "Deprecated, kept only for compatibility. Use RERealityFileMountFileAtURL instead")
  public struct AssetMap : Swift.Codable {
    @available(*, deprecated, message: "Use RESceneDescriptorRef")
    public struct SceneDescriptor : Swift.Codable, Swift.Equatable {
      public static func == (a: RealityFoundation.__REAssetBundle.AssetMap.SceneDescriptor, b: RealityFoundation.__REAssetBundle.AssetMap.SceneDescriptor) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    @available(*, deprecated, message: "Use REAssetDescriptorRef")
    public struct AssetDescriptor : Swift.Codable {
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public var scenes: [RealityFoundation.__REAssetBundle.AssetMap.SceneDescriptor]
    public var assets: [RealityFoundation.__REAssetBundle.AssetMap.AssetDescriptor]?
    public var certifiedFreeOfChangeSceneActions: Swift.Bool?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public static func __init(sceneAssets: [RealityFoundation.__REAsset], assetService: any RealityFoundation.__REAssetService) throws -> RealityFoundation.__REAssetBundle
  @available(*, deprecated, message: "Do not use, kept only for compatibility. Use __init that accepts [__REAsset: RESceneDescriptor] instead.")
  public static func __init(sceneAssets: [RealityFoundation.__REAsset], assetService: any RealityFoundation.__REAssetService, assetMapSceneDescriptorsByAsset: [RealityFoundation.__REAsset : RealityFoundation.__REAssetBundle.AssetMap.SceneDescriptor] = [:]) -> RealityFoundation.__REAssetBundle
  @available(*, deprecated, message: "Use __init(URL:__ServiceLocator:LoadOptions)")
  public init(url: Foundation.URL, assetService: any RealityFoundation.__REAssetService, with queueOptions: RealityFoundation.__REAssetBundle.QueueOptions = .fromEngineQueue) throws
  @available(*, deprecated, message: "Use __init(URL:__ServiceLocator:LoadOptions)")
  public static func __init(url: Foundation.URL, assetService: any RealityFoundation.__REAssetService, _ options: RealityFoundation.__REAssetBundle.LoadOptions) throws -> RealityFoundation.__REAssetBundle
  public static func __init(url: Foundation.URL, serviceLocator: RealityFoundation.__ServiceLocator, _ options: RealityFoundation.__REAssetBundle.LoadOptions) throws -> RealityFoundation.__REAssetBundle
  @available(*, deprecated, message: "Use __init(Bundle:String:__ServiceLocator:LoadOptions)")
  public static func __init(bundle: Foundation.Bundle, entryName: Swift.String, assetService: any RealityFoundation.__REAssetService, _ options: RealityFoundation.__REAssetBundle.LoadOptions) throws -> RealityFoundation.__REAssetBundle
  public static func __init(bundle: Foundation.Bundle, entryName: Swift.String, serviceLocator: RealityFoundation.__ServiceLocator, _ options: RealityFoundation.__REAssetBundle.LoadOptions) throws -> RealityFoundation.__REAssetBundle
  @available(*, deprecated, message: "Use __init(URL:__ServiceLocator:LoadOptions)")
  public static func __init(url: Foundation.URL, assetService: any RealityFoundation.__REAssetService, materialDefinition: RealityFoundation.__REAssetBundle.__MaterialDefinitionOverride? = nil, with queueOptions: RealityFoundation.__REAssetBundle.QueueOptions = .fromEngineQueue) throws -> RealityFoundation.__REAssetBundle
  @available(*, deprecated, message: "will be moved to internal; use __init(URL:__ServiceLocator:LoadOptions)")
  public init(url: Foundation.URL, assetService: any RealityFoundation.__REAssetService, downsamplingStrategy: (any RealityFoundation.__DownsamplingStrategy)?, with options: RealityFoundation.__REAssetBundle.QueueOptions) throws
  @available(*, deprecated, message: "use load(url:assetService:completionHandler:) instead")
  public static func load(url: Foundation.URL, assetService: any RealityFoundation.__REAssetService, materialDefinition: RealityFoundation.__REAssetBundle.__MaterialDefinitionOverride? = nil, completionHandler: @escaping (Swift.Result<RealityFoundation.__REAssetBundle, any Swift.Error>) -> Swift.Void)
  public static func load(url: Foundation.URL, serviceLocator: RealityFoundation.__ServiceLocator, completionHandler: @escaping (Swift.Result<RealityFoundation.__REAssetBundle, any Swift.Error>) -> Swift.Void)
  @available(*, deprecated, message: "Use load(Bundle:String:__ServiceLocator:LoadOptions)")
  public static func load(bundle: Foundation.Bundle, entryName: Swift.String, assetService: any RealityFoundation.__REAssetService, completionHandler: @escaping (Swift.Result<RealityFoundation.__REAssetBundle, any Swift.Error>) -> Swift.Void)
  public static func load(bundle: Foundation.Bundle, entryName: Swift.String, serviceLocator: RealityFoundation.__ServiceLocator, completionHandler: @escaping (Swift.Result<RealityFoundation.__REAssetBundle, any Swift.Error>) -> Swift.Void)
  @available(*, deprecated, message: "Use getSceneDescriptors")
  public var sceneDescriptors: [RealityFoundation.__REAssetBundle.AssetMap.SceneDescriptor] {
    get
  }
  @available(*, deprecated, message: "Use sceneAsset(for sceneDescriptor: RESceneDescriptor)")
  public func sceneAsset(for sceneDescriptor: RealityFoundation.__REAssetBundle.AssetMap.SceneDescriptor) -> RealityFoundation.__REAsset?
  public static var temporaryURL: Foundation.URL {
    get
  }
  public func write(to url: Foundation.URL) throws
  public func __write(to url: Foundation.URL, fromEngineQueue: Swift.Bool = true) throws
  public func write(to url: Foundation.URL, with options: RealityFoundation.__REAssetBundle.ExportOptions) throws
  @available(*, deprecated, message: "use __write(to:with:) instead")
  public func __write(to url: Foundation.URL, with queueOptions: RealityFoundation.__REAssetBundle.QueueOptions, compressionLevel: Swift.Int? = 1, progress: Foundation.Progress? = nil) throws
  public func __write(to url: Foundation.URL, with options: RealityFoundation.__REAssetBundle.ExportOptions) throws
  public func __write(to url: Foundation.URL, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RealityFileError : Swift.Error, Swift.CustomDebugStringConvertible {
  case unsupportedVersion(Swift.Int)
  case archiveLoadFailed
  case headerParseFailed
  case assetMapParseFailed
  case deduplicationInformationParseFailed
  case contentsLoadFailed
  case assetBundleCreationFailed
  case invalidVersion(Swift.Int)
  @available(macOS 13.0, iOS 16.0, macCatalyst 16.0, *)
  case invalidTargetPlatform(RealityFoundation.__REAssetBundle.ExportOptions.PlatformOS)
  case generic(Swift.String)
  public var debugDescription: Swift.String {
    get
  }
}
public typealias __REArchivalStats = Swift.OpaquePointer
public typealias __REArchiveEnvelopeVersion = Swift.UInt8
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __AssetBundleEnvelopeVersion {
  case defaultVersion
  case specificVersion(versionNumber: RealityFoundation.__REArchiveEnvelopeVersion)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __Archiving {
  public static func archivePackage(source: Foundation.URL, destination: Foundation.URL, envelopeVersion: RealityFoundation.__AssetBundleEnvelopeVersion, compressionLevel: Swift.Int? = nil, progress: Foundation.Progress? = nil) throws
  @available(*, deprecated, message: "will be removed")
  public static func unarchivePackage(source: Foundation.URL, destination: Foundation.URL) throws
  public static func unarchivePackage(source: Foundation.URL, destination: Foundation.URL, withReport report: RealityFoundation.__REArchivalStats? = nil) throws
  public enum ArchivingError : Swift.Error {
    case couldNotUnarchive
    case couldNotArchive
    public static func == (a: RealityFoundation.__Archiving.ArchivingError, b: RealityFoundation.__Archiving.ArchivingError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct ModelComponent : RealityFoundation.Component {
  public var mesh: RealityFoundation.MeshResource
  public var materials: [any RealityFoundation.Material]
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var boundsMargin: Swift.Float {
    get
    set
  }
  public init(mesh: RealityFoundation.MeshResource, materials: [any RealityFoundation.Material])
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.ModelComponent {
  @preconcurrency @_Concurrency.MainActor public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.ModelComponent
  @preconcurrency @_Concurrency.MainActor public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef, borrowStrongReference: Swift.Bool) -> RealityFoundation.ModelComponent
  @preconcurrency @_Concurrency.MainActor public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  @preconcurrency @_Concurrency.MainActor public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef, returnStrongReference: Swift.Bool)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct MeshModelCollection {
  public var count: Swift.Int {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public init()
  public init(_ models: [RealityFoundation.MeshResource.Model])
  public subscript(id: Swift.String) -> RealityFoundation.MeshResource.Model? {
    get
  }
  @discardableResult
  public mutating func insert(_ model: __owned RealityFoundation.MeshResource.Model) -> Swift.Bool
  @discardableResult
  public mutating func update(_ model: __owned RealityFoundation.MeshResource.Model) -> RealityFoundation.MeshResource.Model?
  @discardableResult
  public mutating func remove(id: Swift.String) -> RealityFoundation.MeshResource.Model?
  public mutating func removeAll()
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshModelCollection : Swift.Sequence {
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> RealityFoundation.MeshResource.Model?
    @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
    public typealias Element = RealityFoundation.MeshResource.Model
  }
  public __consuming func makeIterator() -> RealityFoundation.MeshModelCollection.Iterator
  @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
  public typealias Element = RealityFoundation.MeshResource.Model
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.MeshModelCollection : Swift.Collection {
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public func index(after i: Swift.Int) -> Swift.Int
  public func formIndex(after i: inout Swift.Int)
  public subscript(position: Swift.Int) -> RealityFoundation.MeshResource.Model {
    get
  }
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias Index = Swift.Int
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias Indices = Swift.DefaultIndices<RealityFoundation.MeshModelCollection>
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias SubSequence = Swift.Slice<RealityFoundation.MeshModelCollection>
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshModelCollection : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral: RealityFoundation.MeshResource.Model...)
  @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
  public typealias ArrayLiteralElement = RealityFoundation.MeshResource.Model
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct MeshPartCollection {
  public var count: Swift.Int {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public init()
  public init(_ parts: [RealityFoundation.MeshResource.Part])
  public subscript(id: Swift.String) -> RealityFoundation.MeshResource.Part? {
    get
  }
  @discardableResult
  public mutating func insert(_ part: __owned RealityFoundation.MeshResource.Part) -> Swift.Bool
  @discardableResult
  public mutating func update(_ part: __owned RealityFoundation.MeshResource.Part) -> RealityFoundation.MeshResource.Part?
  @discardableResult
  public mutating func remove(id: Swift.String) -> RealityFoundation.MeshResource.Part?
  public mutating func removeAll()
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshPartCollection : Swift.Sequence {
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> RealityFoundation.MeshResource.Part?
    @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
    public typealias Element = RealityFoundation.MeshResource.Part
  }
  public __consuming func makeIterator() -> RealityFoundation.MeshPartCollection.Iterator
  @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
  public typealias Element = RealityFoundation.MeshResource.Part
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.MeshPartCollection : Swift.Collection {
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public func index(after i: Swift.Int) -> Swift.Int
  public func formIndex(after i: inout Swift.Int)
  public subscript(position: Swift.Int) -> RealityFoundation.MeshResource.Part {
    get
  }
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias Index = Swift.Int
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias Indices = Swift.DefaultIndices<RealityFoundation.MeshPartCollection>
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias SubSequence = Swift.Slice<RealityFoundation.MeshPartCollection>
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshPartCollection : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral: RealityFoundation.MeshResource.Part...)
  @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
  public typealias ArrayLiteralElement = RealityFoundation.MeshResource.Part
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct MeshInstanceCollection {
  public var count: Swift.Int {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public init()
  public init(_ instances: [RealityFoundation.MeshResource.Instance])
  public subscript(id: Swift.String) -> RealityFoundation.MeshResource.Instance? {
    get
  }
  @discardableResult
  public mutating func insert(_ instance: __owned RealityFoundation.MeshResource.Instance) -> Swift.Bool
  @discardableResult
  public mutating func update(_ instance: __owned RealityFoundation.MeshResource.Instance) -> RealityFoundation.MeshResource.Instance?
  @discardableResult
  public mutating func remove(id: Swift.String) -> RealityFoundation.MeshResource.Instance?
  public mutating func removeAll()
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshInstanceCollection : Swift.Sequence {
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> RealityFoundation.MeshResource.Instance?
    @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
    public typealias Element = RealityFoundation.MeshResource.Instance
  }
  public __consuming func makeIterator() -> RealityFoundation.MeshInstanceCollection.Iterator
  @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
  public typealias Element = RealityFoundation.MeshResource.Instance
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.MeshInstanceCollection : Swift.Collection {
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public func index(after i: Swift.Int) -> Swift.Int
  public func formIndex(after i: inout Swift.Int)
  public subscript(position: Swift.Int) -> RealityFoundation.MeshResource.Instance {
    get
  }
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias Index = Swift.Int
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias Indices = Swift.DefaultIndices<RealityFoundation.MeshInstanceCollection>
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias SubSequence = Swift.Slice<RealityFoundation.MeshInstanceCollection>
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshInstanceCollection : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral: RealityFoundation.MeshResource.Instance...)
  @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
  public typealias ArrayLiteralElement = RealityFoundation.MeshResource.Instance
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct MeshSkeletonCollection {
  public var count: Swift.Int {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public init()
  public init(_ skeletons: [RealityFoundation.MeshResource.Skeleton])
  public subscript(id: Swift.String) -> RealityFoundation.MeshResource.Skeleton? {
    get
  }
  @discardableResult
  public mutating func insert(_ instance: __owned RealityFoundation.MeshResource.Skeleton) -> Swift.Bool
  @discardableResult
  public mutating func update(_ instance: __owned RealityFoundation.MeshResource.Skeleton) -> RealityFoundation.MeshResource.Skeleton?
  @discardableResult
  public mutating func remove(id: Swift.String) -> RealityFoundation.MeshResource.Skeleton?
  public mutating func removeAll()
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.MeshSkeletonCollection : Swift.Sequence {
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> RealityFoundation.MeshResource.Skeleton?
    @available(iOS 18.0, visionOS 1.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias Element = RealityFoundation.MeshResource.Skeleton
  }
  public __consuming func makeIterator() -> RealityFoundation.MeshSkeletonCollection.Iterator
  @available(iOS 18.0, visionOS 1.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias Element = RealityFoundation.MeshResource.Skeleton
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.MeshSkeletonCollection : Swift.Collection {
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public func index(after i: Swift.Int) -> Swift.Int
  public func formIndex(after i: inout Swift.Int)
  public subscript(position: Swift.Int) -> RealityFoundation.MeshResource.Skeleton {
    get
  }
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias Index = Swift.Int
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias Indices = Swift.DefaultIndices<RealityFoundation.MeshSkeletonCollection>
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias SubSequence = Swift.Slice<RealityFoundation.MeshSkeletonCollection>
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.MeshSkeletonCollection : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral: RealityFoundation.MeshResource.Skeleton...)
  @available(iOS 18.0, visionOS 1.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias ArrayLiteralElement = RealityFoundation.MeshResource.Skeleton
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshResource {
  public struct Part : RealityFoundation.MeshBufferContainer, Swift.Identifiable {
    public var id: Swift.String
    public var materialIndex: Swift.Int {
      get
      set
    }
    public init(id: Swift.String, materialIndex: Swift.Int)
    public var triangleIndices: RealityFoundation.MeshBuffers.TriangleIndices? {
      get
      set
    }
    public var buffers: [RealityFoundation.MeshBuffers.Identifier : RealityFoundation.AnyMeshBuffer] {
      get
    }
    public subscript<S>(semantic: S) -> RealityFoundation.MeshBuffer<S.Element>? where S : RealityFoundation.MeshBufferSemantic {
      get
      set
    }
    @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
    public typealias ID = Swift.String
  }
  public struct Model : Swift.Identifiable {
    public var id: Swift.String
    public var parts: RealityFoundation.MeshPartCollection
    public init(id: Swift.String, parts: [RealityFoundation.MeshResource.Part])
    @preconcurrency @_Concurrency.MainActor public init(id modelID: Swift.String, descriptors: [RealityFoundation.MeshDescriptor]) throws
    @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
    public typealias ID = Swift.String
  }
  public struct Instance : Swift.Identifiable {
    public var id: Swift.String
    public var model: Swift.String
    public var transform: simd.simd_float4x4
    public init(id: Swift.String, model: Swift.String, at transform: simd.simd_float4x4? = nil)
    @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
    public typealias ID = Swift.String
  }
  public struct Contents {
    public var models: RealityFoundation.MeshModelCollection
    public var instances: RealityFoundation.MeshInstanceCollection
    public init()
  }
  @_Concurrency.MainActor @preconcurrency public var contents: RealityFoundation.MeshResource.Contents {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func replace(with content: RealityFoundation.MeshResource.Contents) throws
  nonisolated public func replace(with content: RealityFoundation.MeshResource.Contents) async throws
  @available(visionOS, introduced: 1.0, deprecated: 1.0, renamed: "replace(with:)")
  @available(macOS, introduced: 12.0, deprecated: 15.0, renamed: "replace(with:)")
  @available(macCatalyst, introduced: 15.0, deprecated: 18.0, renamed: "replace(with:)")
  @available(iOS, introduced: 15.0, deprecated: 18.0, renamed: "replace(with:)")
  @_Concurrency.MainActor @preconcurrency public func replaceAsync(with content: RealityFoundation.MeshResource.Contents) -> RealityFoundation.LoadRequest<RealityFoundation.MeshResource>
  @_Concurrency.MainActor @preconcurrency public static func generate(from content: RealityFoundation.MeshResource.Contents) throws -> RealityFoundation.MeshResource
  nonisolated convenience public init(from content: RealityFoundation.MeshResource.Contents) async throws
  @available(visionOS, introduced: 1.0, deprecated: 1.0, renamed: "init(from:)")
  @available(macOS, introduced: 12.0, deprecated: 15.0, renamed: "init(from:)")
  @available(macCatalyst, introduced: 15.0, deprecated: 18.0, renamed: "init(from:)")
  @available(iOS, introduced: 15.0, deprecated: 18.0, renamed: "init(from:)")
  @_Concurrency.MainActor @preconcurrency public static func generateAsync(from content: RealityFoundation.MeshResource.Contents) -> RealityFoundation.LoadRequest<RealityFoundation.MeshResource>
  @_Concurrency.MainActor @preconcurrency public static func generate(from descriptors: [RealityFoundation.MeshDescriptor]) throws -> RealityFoundation.MeshResource
  nonisolated convenience public init(from descriptors: [RealityFoundation.MeshDescriptor]) async throws
  @available(visionOS, introduced: 1.0, deprecated: 1.0, renamed: "init(from:)")
  @available(macOS, introduced: 12.0, deprecated: 15.0, renamed: "init(from:)")
  @available(macCatalyst, introduced: 15.0, deprecated: 18.0, renamed: "init(from:)")
  @available(iOS, introduced: 15.0, deprecated: 18.0, renamed: "init(from:)")
  @_Concurrency.MainActor @preconcurrency public static func generateAsync(from descriptors: [RealityFoundation.MeshDescriptor]) -> RealityFoundation.LoadRequest<RealityFoundation.MeshResource>
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.MeshResource {
  public struct Skeleton : Swift.Identifiable {
    public struct Joint : Swift.Equatable {
      public var name: Swift.String
      public var parentIndex: Swift.Int?
      public var inverseBindPoseMatrix: simd.simd_float4x4
      public var restPoseTransform: RealityFoundation.Transform
      public init(name: Swift.String, parentIndex: Swift.Int?, inverseBindPoseMatrix: simd.simd_float4x4, restPoseTransform: RealityFoundation.Transform)
      public static func == (a: RealityFoundation.MeshResource.Skeleton.Joint, b: RealityFoundation.MeshResource.Skeleton.Joint) -> Swift.Bool
    }
    public var id: Swift.String
    public var joints: [RealityFoundation.MeshResource.Skeleton.Joint]
    public init(id: Swift.String, joints: [RealityFoundation.MeshResource.Skeleton.Joint])
    public init?(id: Swift.String, jointNames: [Swift.String], inverseBindPoseMatrices: [simd.simd_float4x4], restPoseTransforms: [RealityFoundation.Transform]? = nil, parentIndices: [Swift.Int?]? = nil)
    @available(iOS 18.0, visionOS 1.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias ID = Swift.String
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.MeshResource.Part {
  public var skeletonID: Swift.String? {
    get
    set
  }
  public var jointInfluences: RealityFoundation.MeshResource.JointInfluences? {
    get
    set
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.MeshResource {
  public struct JointInfluences {
    public var influences: RealityFoundation.MeshBuffers.JointInfluences {
      get
    }
    public init(influences: RealityFoundation.MeshBuffers.JointInfluences, influencesPerVertex: Swift.Int)
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.MeshResource.Contents {
  public var skeletons: RealityFoundation.MeshSkeletonCollection {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct MaterialParameterTypes {
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public enum FaceCulling {
    case none
    case front
    case back
    public static func == (a: RealityFoundation.MaterialParameterTypes.FaceCulling, b: RealityFoundation.MaterialParameterTypes.FaceCulling) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct TextureCoordinateTransform {
    public var offset: Swift.SIMD2<Swift.Float>
    public var scale: Swift.SIMD2<Swift.Float>
    public var rotation: Swift.Float
    public init(offset: Swift.SIMD2<Swift.Float> = .init(), scale: Swift.SIMD2<Swift.Float> = .init(1, 1), rotation: Swift.Float = 0.0)
  }
  @available(visionOS 1.0, macCatalyst 18.0, macOS 15.0, iOS 18.0, *)
  public enum TriangleFillMode {
    case fill
    case lines
    public static func == (a: RealityFoundation.MaterialParameterTypes.TriangleFillMode, b: RealityFoundation.MaterialParameterTypes.TriangleFillMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.MaterialParameterTypes {
  public enum BlendMode : Swift.Equatable, Swift.Hashable, Swift.Sendable {
    case alpha
    case add
    public static func == (a: RealityFoundation.MaterialParameterTypes.BlendMode, b: RealityFoundation.MaterialParameterTypes.BlendMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  @preconcurrency @_Concurrency.MainActor public struct ChildCollection : Swift.Collection {
    public typealias Element = RealityFoundation.Entity
    public typealias Index = Swift.Int
    public typealias Indices = Swift.DefaultIndices<RealityFoundation.Entity.ChildCollection>
    public typealias Iterator = RealityFoundation.Entity.ChildCollection.IndexingIterator<RealityFoundation.Entity.ChildCollection>
    public typealias SubSequence = Swift.Slice<RealityFoundation.Entity.ChildCollection>
    @_Concurrency.MainActor @preconcurrency public __consuming func makeIterator() -> RealityFoundation.Entity.ChildCollection.Iterator
    @_Concurrency.MainActor @preconcurrency public var startIndex: Swift.Int {
      get
    }
    @_Concurrency.MainActor @preconcurrency public var endIndex: Swift.Int {
      get
    }
    @_Concurrency.MainActor @preconcurrency public func index(after i: Swift.Int) -> Swift.Int
    @_Concurrency.MainActor @preconcurrency public subscript(index: Swift.Int) -> RealityFoundation.Entity {
      get
      set
    }
    @_Concurrency.MainActor @preconcurrency public func append(_ child: RealityFoundation.Entity, preservingWorldTransform: Swift.Bool = false)
    @_Concurrency.MainActor @preconcurrency public func append(contentsOf array: [RealityFoundation.Entity], preservingWorldTransforms: Swift.Bool = false)
    @_Concurrency.MainActor @preconcurrency public func append<S>(contentsOf sequence: S, preservingWorldTransforms: Swift.Bool = false) where S : Swift.Sequence, S.Element : RealityFoundation.Entity
    @_Concurrency.MainActor @preconcurrency public func append(contentsOf children: RealityFoundation.Entity.ChildCollection, preservingWorldTransforms: Swift.Bool = false)
    @_Concurrency.MainActor @preconcurrency public func remove(_ child: RealityFoundation.Entity, preservingWorldTransform: Swift.Bool = false)
    @_Concurrency.MainActor @preconcurrency public func remove(at index: Swift.Int, preservingWorldTransform: Swift.Bool = false)
    @_Concurrency.MainActor @preconcurrency public func removeAll(keepCapacity: Swift.Bool = false, preservingWorldTransforms: Swift.Bool = false)
    @_Concurrency.MainActor @preconcurrency public func removeAll(preservingWorldTransforms: Swift.Bool = false)
    @_Concurrency.MainActor @preconcurrency public func replaceAll(_ children: [RealityFoundation.Entity], preservingWorldTransforms: Swift.Bool = false)
    @_Concurrency.MainActor @preconcurrency public func replaceAll<S>(_ children: S, preservingWorldTransforms: Swift.Bool = false) where S : Swift.Sequence, S.Element : RealityFoundation.Entity
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity.ChildCollection : Swift.CustomStringConvertible {
  @_Concurrency.MainActor @preconcurrency public var description: Swift.String {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity.ChildCollection {
  public struct IndexingIterator<Elements> where Elements : Swift.Collection {
    public init(_elements: Elements)
    public init(_elements: Elements, _position: Elements.Index)
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity.ChildCollection.IndexingIterator : Swift.IteratorProtocol, Swift.Sequence {
  public typealias Element = Elements.Element
  public typealias Iterator = RealityFoundation.Entity.ChildCollection.IndexingIterator<Elements>
  public typealias SubSequence = Swift.AnySequence<RealityFoundation.Entity.ChildCollection.IndexingIterator<Elements>.Element>
  public mutating func next() -> Elements.Element?
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public protocol EntityCollection : Swift.Collection where Self.Element == RealityFoundation.Entity, Self.Index == Swift.Int {
  mutating func append(_ entity: RealityFoundation.Entity)
  mutating func append<S>(contentsOf sequence: S) where S : Swift.Sequence, S.Element : RealityFoundation.Entity
  mutating func insert(_ entity: RealityFoundation.Entity, beforeIndex index: Swift.Int)
  mutating func insert<S>(contentsOf sequence: S, beforeIndex index: Swift.Int) where S : Swift.Sequence, S.Element : RealityFoundation.Entity
  mutating func remove(_ entity: RealityFoundation.Entity)
  mutating func remove(at index: Swift.Int)
  mutating func removeAll()
  mutating func removeAll(where: (RealityFoundation.Entity) throws -> Swift.Bool) rethrows
  mutating func replaceAll<S>(_ entities: S) where S : Swift.Sequence, S.Element : RealityFoundation.Entity
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.EntityCollection {
  public mutating func append(_ entity: RealityFoundation.Entity)
  public mutating func append<S>(contentsOf sequence: S) where S : Swift.Sequence, S.Element : RealityFoundation.Entity
  public mutating func insert(_ entity: RealityFoundation.Entity, beforeIndex index: Swift.Int)
  public mutating func remove(_ entity: RealityFoundation.Entity)
  public mutating func removeAll()
  public mutating func removeAll(where shouldBeRemoved: (RealityFoundation.Entity) throws -> Swift.Bool) rethrows
  public mutating func replaceAll<S>(_ entities: S) where S : Swift.Sequence, S.Element : RealityFoundation.Entity
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.Entity.ChildCollection : RealityFoundation.EntityCollection {
  @_Concurrency.MainActor @preconcurrency public func append<S>(contentsOf sequence: S) where S : Swift.Sequence, S.Element : RealityFoundation.Entity
  @_Concurrency.MainActor @preconcurrency public func remove(_ child: RealityFoundation.Entity)
  @_Concurrency.MainActor @preconcurrency public func insert<S>(contentsOf sequence: S, beforeIndex index: Swift.Int) where S : Swift.Sequence, S.Element : RealityFoundation.Entity
  @_Concurrency.MainActor @preconcurrency public func remove(at index: Swift.Int)
  @_Concurrency.MainActor @preconcurrency public func removeAll()
  @_Concurrency.MainActor @preconcurrency public func replaceAll<S>(_ children: S) where S : Swift.Sequence, S.Element : RealityFoundation.Entity
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public protocol HasDirectionalLight : RealityFoundation.HasTransform {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasDirectionalLight {
  @_Concurrency.MainActor @preconcurrency public var light: RealityFoundation.DirectionalLightComponent {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var shadow: RealityFoundation.DirectionalLightComponent.Shadow? {
    get
    set
  }
}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
public struct IKComponent : RealityFoundation.Component {
  public var resource: RealityFoundation.IKResource?
  public var solvers: RealityFoundation.IKComponent.SolverCollection
  public init(resource: RealityFoundation.IKResource?)
  @_hasMissingDesignatedInitializers public class Solver : Swift.Identifiable {
    public struct ID : Swift.Hashable, Swift.Equatable {
      public static func == (a: RealityFoundation.IKComponent.Solver.ID, b: RealityFoundation.IKComponent.Solver.ID) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public var id: RealityFoundation.IKComponent.Solver.ID {
      get
    }
    public var maxIterations: Swift.Int {
      get
      set
    }
    public var globalFkWeight: Swift.Float {
      get
      set
    }
    public func reset()
    public var joints: RealityFoundation.IKComponent.JointCollection
    public var constraints: RealityFoundation.IKComponent.ConstraintCollection
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class Joint : Swift.Identifiable {
    public typealias ID = RealityFoundation.IKRig.Joint.ID
    final public let id: RealityFoundation.IKComponent.Joint.ID
    public var name: Swift.String {
      get
    }
    public var fkWeightPerAxis: Swift.SIMD3<Swift.Float> {
      get
      set
    }
    public var rotationStiffness: Swift.SIMD3<Swift.Float> {
      get
      set
    }
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class Constraint : Swift.Identifiable {
    public typealias ID = RealityFoundation.IKRig.Constraint.ID
    public struct DemandOptions : Swift.OptionSet {
      public let rawValue: Swift.UInt
      public init(rawValue: Swift.UInt)
      @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
      public typealias ArrayLiteralElement = RealityFoundation.IKComponent.Constraint.DemandOptions
      @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
      public typealias Element = RealityFoundation.IKComponent.Constraint.DemandOptions
      @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
      public typealias RawValue = Swift.UInt
    }
    final public let id: RealityFoundation.IKComponent.Constraint.ID
    public var name: Swift.String {
      get
    }
    public var jointID: RealityFoundation.IKComponent.Joint.ID {
      get
    }
    public var demands: RealityFoundation.IKComponent.Constraint.DemandOptions {
      get
    }
    public var target: RealityFoundation.Transform {
      get
      set
    }
    public var offset: RealityFoundation.Transform {
      get
      set
    }
    public var lookAtTargetPosition: Swift.SIMD3<Swift.Float> {
      get
      set
    }
    public var animationOverrideWeight: (position: Swift.Float, rotation: Swift.Float) {
      get
      set
    }
    @objc deinit
  }
  public struct SolverCollection : Swift.Collection, Swift.Sequence {
    public typealias Element = RealityFoundation.IKComponent.Solver
    public subscript(id: RealityFoundation.IKComponent.SolverCollection.Element.ID) -> RealityFoundation.IKComponent.SolverCollection.Element? {
      get
      set
    }
    public var count: Swift.Int {
      get
    }
    public var isEmpty: Swift.Bool {
      get
    }
    public func contains(_ id: RealityFoundation.IKComponent.SolverCollection.Element.ID) -> Swift.Bool
    @discardableResult
    public mutating func set(_ newValue: RealityFoundation.IKComponent.SolverCollection.Element) -> RealityFoundation.IKComponent.SolverCollection.Element?
    public typealias Index = Swift.Int
    public var startIndex: RealityFoundation.IKComponent.SolverCollection.Index {
      get
    }
    public var endIndex: RealityFoundation.IKComponent.SolverCollection.Index {
      get
    }
    public subscript(position: RealityFoundation.IKComponent.SolverCollection.Index) -> RealityFoundation.IKComponent.SolverCollection.Element {
      get
      set
      _modify
    }
    public func index(after: RealityFoundation.IKComponent.SolverCollection.Index) -> RealityFoundation.IKComponent.SolverCollection.Index
    public struct Iterator : Swift.IteratorProtocol {
      public mutating func next() -> RealityFoundation.IKComponent.SolverCollection.Element?
      @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
      public typealias Element = RealityFoundation.IKComponent.SolverCollection.Element
    }
    public __consuming func makeIterator() -> RealityFoundation.IKComponent.SolverCollection.Iterator
    @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias Indices = Swift.DefaultIndices<RealityFoundation.IKComponent.SolverCollection>
    @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias SubSequence = Swift.Slice<RealityFoundation.IKComponent.SolverCollection>
  }
  public struct JointCollection : Swift.Collection, Swift.Sequence {
    public typealias Element = RealityFoundation.IKComponent.Joint
    public subscript(id: RealityFoundation.IKComponent.JointCollection.Element.ID) -> RealityFoundation.IKComponent.JointCollection.Element? {
      get
      set
    }
    public subscript(name: Swift.String) -> RealityFoundation.IKComponent.JointCollection.Element? {
      get
      set
    }
    public var count: Swift.Int {
      get
    }
    public var isEmpty: Swift.Bool {
      get
    }
    public func contains(_ id: RealityFoundation.IKComponent.JointCollection.Element.ID) -> Swift.Bool
    @discardableResult
    public mutating func set(_ newValue: RealityFoundation.IKComponent.JointCollection.Element) -> RealityFoundation.IKComponent.JointCollection.Element?
    public typealias Index = Swift.Int
    public var startIndex: RealityFoundation.IKComponent.JointCollection.Index {
      get
    }
    public var endIndex: RealityFoundation.IKComponent.JointCollection.Index {
      get
    }
    public subscript(position: RealityFoundation.IKComponent.JointCollection.Index) -> RealityFoundation.IKComponent.JointCollection.Element {
      get
      set
      _modify
    }
    public func index(after: RealityFoundation.IKComponent.JointCollection.Index) -> RealityFoundation.IKComponent.JointCollection.Index
    public struct Iterator : Swift.IteratorProtocol {
      public mutating func next() -> RealityFoundation.IKComponent.JointCollection.Element?
      @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
      public typealias Element = RealityFoundation.IKComponent.JointCollection.Element
    }
    public __consuming func makeIterator() -> RealityFoundation.IKComponent.JointCollection.Iterator
    @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias Indices = Swift.DefaultIndices<RealityFoundation.IKComponent.JointCollection>
    @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias SubSequence = Swift.Slice<RealityFoundation.IKComponent.JointCollection>
  }
  public struct ConstraintCollection : Swift.Collection, Swift.Sequence {
    public typealias Element = RealityFoundation.IKComponent.Constraint
    public subscript(id: RealityFoundation.IKComponent.ConstraintCollection.Element.ID) -> RealityFoundation.IKComponent.ConstraintCollection.Element? {
      get
      set
    }
    public subscript(name: Swift.String) -> RealityFoundation.IKComponent.ConstraintCollection.Element? {
      get
      set
    }
    public var count: Swift.Int {
      get
    }
    public var isEmpty: Swift.Bool {
      get
    }
    public func contains(_ id: RealityFoundation.IKComponent.ConstraintCollection.Element.ID) -> Swift.Bool
    @discardableResult
    public mutating func set(_ newValue: RealityFoundation.IKComponent.ConstraintCollection.Element) -> RealityFoundation.IKComponent.ConstraintCollection.Element?
    public typealias Index = Swift.Int
    public var startIndex: RealityFoundation.IKComponent.ConstraintCollection.Index {
      get
    }
    public var endIndex: RealityFoundation.IKComponent.ConstraintCollection.Index {
      get
    }
    public subscript(position: RealityFoundation.IKComponent.ConstraintCollection.Index) -> RealityFoundation.IKComponent.ConstraintCollection.Element {
      get
      set
      _modify
    }
    public func index(after: RealityFoundation.IKComponent.ConstraintCollection.Index) -> RealityFoundation.IKComponent.ConstraintCollection.Index
    public struct Iterator : Swift.IteratorProtocol {
      public mutating func next() -> RealityFoundation.IKComponent.ConstraintCollection.Element?
      @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
      public typealias Element = RealityFoundation.IKComponent.ConstraintCollection.Element
    }
    public __consuming func makeIterator() -> RealityFoundation.IKComponent.ConstraintCollection.Iterator
    @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias Indices = Swift.DefaultIndices<RealityFoundation.IKComponent.ConstraintCollection>
    @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias SubSequence = Swift.Slice<RealityFoundation.IKComponent.ConstraintCollection>
  }
}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
extension RealityFoundation.IKComponent {
  @preconcurrency @_Concurrency.MainActor public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.IKComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityLookAtTrigger : RealityFoundation.__RKEntityTrigger {
  override public init()
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Scene {
  @preconcurrency @_Concurrency.MainActor public struct AnchorCollection : Swift.Collection {
    public typealias Element = RealityFoundation.HasAnchoring
    public typealias Index = Swift.Int
    public typealias Indices = Swift.DefaultIndices<RealityFoundation.Scene.AnchorCollection>
    public typealias Iterator = RealityFoundation.Entity.ChildCollection.IndexingIterator<RealityFoundation.Scene.AnchorCollection>
    public typealias SubSequence = Swift.Slice<RealityFoundation.Scene.AnchorCollection>
    @_Concurrency.MainActor @preconcurrency public __consuming func makeIterator() -> RealityFoundation.Scene.AnchorCollection.Iterator
    @_Concurrency.MainActor @preconcurrency public var startIndex: Swift.Int {
      get
    }
    @_Concurrency.MainActor @preconcurrency public var endIndex: Swift.Int {
      get
    }
    @_Concurrency.MainActor @preconcurrency public func index(after i: Swift.Int) -> Swift.Int
    @_Concurrency.MainActor @preconcurrency public subscript(index: Swift.Int) -> any RealityFoundation.HasAnchoring {
      get
      set
    }
    @_Concurrency.MainActor @preconcurrency public func append(_ entity: any RealityFoundation.HasAnchoring)
    @_Concurrency.MainActor @preconcurrency public func append(contentsOf array: [any RealityFoundation.HasAnchoring])
    @_Concurrency.MainActor @preconcurrency public func append<S>(contentsOf sequence: S) where S : Swift.Sequence, S.Element : RealityFoundation.HasAnchoring
    @_Concurrency.MainActor @preconcurrency public func remove(_ entity: any RealityFoundation.HasAnchoring)
    @_Concurrency.MainActor @preconcurrency public func remove(at index: Swift.Int)
    @_Concurrency.MainActor @preconcurrency public func removeAll(keepCapacity: Swift.Bool = false)
    @_Concurrency.MainActor @preconcurrency public func removeAll()
    @_Concurrency.MainActor @preconcurrency public func replaceAll(_ entities: [any RealityFoundation.HasAnchoring])
    @_Concurrency.MainActor @preconcurrency public func replaceAll<S>(_ entities: S) where S : Swift.Sequence, S.Element : RealityFoundation.HasAnchoring
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Scene.AnchorCollection : Swift.CustomStringConvertible {
  @_Concurrency.MainActor @preconcurrency public var description: Swift.String {
    get
  }
}
@available(visionOS 1.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
public struct GroundingShadowComponent : RealityFoundation.Component {
  public var castsShadow: Swift.Bool
  public init(castsShadow: Swift.Bool)
}
@available(visionOS 1.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
extension RealityFoundation.GroundingShadowComponent {
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.GroundingShadowComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
extension RealityFoundation.GroundingShadowComponent {
  public var receivesShadow: Swift.Bool {
    get
    set
  }
  public init(castsShadow: Swift.Bool, receivesShadow: Swift.Bool)
}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, *)
@available(macOS, unavailable)
extension RealityFoundation.GroundingShadowComponent {
  public enum FadeBehaviorNearPhysicalObjects {
    case `default`
    case fade
    case constant
    public static func == (a: RealityFoundation.GroundingShadowComponent.FadeBehaviorNearPhysicalObjects, b: RealityFoundation.GroundingShadowComponent.FadeBehaviorNearPhysicalObjects) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var fadeBehaviorNearPhysicalObjects: RealityFoundation.GroundingShadowComponent.FadeBehaviorNearPhysicalObjects {
    get
    set
  }
  public init(castsShadow: Swift.Bool, receivesShadow: Swift.Bool, fadeBehaviorNearPhysicalObjects: RealityFoundation.GroundingShadowComponent.FadeBehaviorNearPhysicalObjects)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func playAudio(_ resource: RealityFoundation.AudioResource) -> RealityFoundation.AudioPlaybackController
  @_Concurrency.MainActor @preconcurrency public func prepareAudio(_ resource: RealityFoundation.AudioResource) -> RealityFoundation.AudioPlaybackController
  @_Concurrency.MainActor @preconcurrency public func stopAllAudio()
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public class EnvironmentResource : RealityFoundation.Resource {
  @_Concurrency.MainActor @preconcurrency public static let __compiledExtension: Swift.String
  @objc deinit
  @available(*, noasync, message: "Synchronous loading APIs block the main actor and should not be used in async contexts.  Use init(...) async instead")
  @_Concurrency.MainActor @preconcurrency public static func load(named name: Swift.String, in bundle: Foundation.Bundle? = nil) throws -> RealityFoundation.EnvironmentResource
  @available(macOS, introduced: 10.15, deprecated: 15.0, renamed: "init(named:in:)")
  @available(iOS, introduced: 13.0, deprecated: 18.0, renamed: "init(named:in:)")
  @available(macCatalyst, introduced: 13.0, deprecated: 18.0, renamed: "init(named:in:)")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, renamed: "init(named:in:)")
  @_Concurrency.MainActor @preconcurrency public static func loadAsync(named name: Swift.String, in bundle: Foundation.Bundle? = nil) -> RealityFoundation.LoadRequest<RealityFoundation.EnvironmentResource>
  @_Concurrency.MainActor @preconcurrency public static func __load(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil) throws -> RealityFoundation.EnvironmentResource
  @available(visionOS, introduced: 1.0, deprecated: 2.0, renamed: "EnvironmentResource.init(equirectangular:withName:)")
  @available(macOS, unavailable)
  @available(iOS, unavailable, introduced: 18.0, renamed: "EnvironmentResource.init(equirectangular:withName:)")
  @available(macCatalyst, unavailable, introduced: 18.0, renamed: "EnvironmentResource.init(equirectangular:withName:)")
  @_Concurrency.MainActor @preconcurrency public static func generate(fromEquirectangular cgImage: CoreGraphics.CGImage, withName resourceName: Swift.String? = nil) throws -> RealityFoundation.EnvironmentResource
  @available(visionOS, introduced: 1.0, deprecated: 2.0, renamed: "EnvironmentResource.init(equirectangular:withName:)")
  @available(macOS, unavailable, introduced: 15.0, renamed: "EnvironmentResource.init(equirectangular:withName:)")
  @available(iOS, unavailable, introduced: 18.0, renamed: "EnvironmentResource.init(equirectangular:withName:)")
  @available(macCatalyst, unavailable, introduced: 18.0, renamed: "EnvironmentResource.init(equirectangular:withName:)")
  @_Concurrency.MainActor @preconcurrency public static func generate(fromEquirectangular cgImage: CoreGraphics.CGImage, withName resourceName: Swift.String? = nil) async throws -> RealityFoundation.EnvironmentResource
  @_Concurrency.MainActor @preconcurrency public static func __fromAssets(_ coreIBLAsset: RealityFoundation.__AssetRef?, _ coreSkyboxAsset: RealityFoundation.__AssetRef?) -> RealityFoundation.EnvironmentResource
  @_Concurrency.MainActor @preconcurrency public static func __exportCompiledResource(contentsOf inURL: Foundation.URL, to outURL: Foundation.URL) throws
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.EnvironmentResource {
  @_Concurrency.MainActor @preconcurrency convenience public init(named name: Swift.String, in bundle: Foundation.Bundle? = nil) async throws
  @_Concurrency.MainActor @preconcurrency public var skybox: RealityFoundation.TextureResource {
    get
  }
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.EnvironmentResource {
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency convenience public init(cube cubeTexture: RealityFoundation.TextureResource, options: RealityFoundation.EnvironmentResource.CreateOptions) throws
  @_Concurrency.MainActor @preconcurrency convenience public init(equirectangular cgImage: CoreGraphics.CGImage, withName resourceName: Swift.String? = nil) throws
  @_Concurrency.MainActor @preconcurrency convenience public init(equirectangular cgImage: CoreGraphics.CGImage, withName resourceName: Swift.String? = nil) async throws
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency convenience public init(cube cubeTexture: RealityFoundation.TextureResource, options: RealityFoundation.EnvironmentResource.CreateOptions) async throws
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.EnvironmentResource {
  public typealias Compression = RealityFoundation.TextureResource.Compression
  public struct CreateOptions : Swift.Hashable, Swift.Sendable {
    public enum SamplingQuality : Swift.Hashable, Swift.Sendable {
      case fast
      case normal
      case high
      case veryHigh
      public static func == (a: RealityFoundation.EnvironmentResource.CreateOptions.SamplingQuality, b: RealityFoundation.EnvironmentResource.CreateOptions.SamplingQuality) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public var compression: RealityFoundation.EnvironmentResource.Compression
    public var samplingQuality: RealityFoundation.EnvironmentResource.CreateOptions.SamplingQuality
    public var specularCubeDimension: Swift.Int?
    public init(samplingQuality: RealityFoundation.EnvironmentResource.CreateOptions.SamplingQuality = .fast, specularCubeDimension: Swift.Int? = nil, compression: RealityFoundation.EnvironmentResource.Compression = .default)
    public static func == (a: RealityFoundation.EnvironmentResource.CreateOptions, b: RealityFoundation.EnvironmentResource.CreateOptions) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct __SkyboxMaterial : RealityFoundation.Material {
  public let __resource: RealityFoundation.__MaterialResource
  public var __parameterBlock: RealityFoundation.__RKMaterialParameterBlock
  public init()
}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
public struct Reverb : Swift.Hashable, Swift.Sendable {
  public static let anechoic: RealityFoundation.Reverb
  public static func preset(_ preset: RealityFoundation.Reverb.Preset) -> RealityFoundation.Reverb
  public static func == (a: RealityFoundation.Reverb, b: RealityFoundation.Reverb) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
extension RealityFoundation.Reverb {
  public struct Preset : Swift.Hashable, Swift.Sendable {
    public static let outside: RealityFoundation.Reverb.Preset
    public static let concertHall: RealityFoundation.Reverb.Preset
    public static let veryLargeRoom: RealityFoundation.Reverb.Preset
    public static let largeRoom: RealityFoundation.Reverb.Preset
    public static let largeRoomTreated: RealityFoundation.Reverb.Preset
    public static let mediumRoomDry: RealityFoundation.Reverb.Preset
    public static let mediumRoomTreated: RealityFoundation.Reverb.Preset
    public static let smallRoomBright: RealityFoundation.Reverb.Preset
    public static let smallRoom: RealityFoundation.Reverb.Preset
    public static let verySmallRoomBright: RealityFoundation.Reverb.Preset
    public static func == (a: RealityFoundation.Reverb.Preset, b: RealityFoundation.Reverb.Preset) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  @_Concurrency.MainActor @preconcurrency public func generateCollisionShapes(recursive: Swift.Bool)
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.Entity {
  @_Concurrency.MainActor @preconcurrency public func generateCollisionShapes(recursive: Swift.Bool, static isStatic: Swift.Bool)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasModel {
  @_Concurrency.MainActor @preconcurrency public func __generateCollisionShape()
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public class Scene {
  @_Concurrency.MainActor @preconcurrency public var __coreScene: RealityFoundation.__SceneRef {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var name: Swift.String {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var __audioListener: RealityFoundation.Entity? {
    get
    set
  }
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func __addPostProcessingAudioEffect(_ auDesc: AudioToolbox.AudioComponentDescription) -> AudioToolbox.AUAudioUnit?
  @_Concurrency.MainActor @preconcurrency public var __defaultCamera: RealityFoundation.Entity! {
    get
  }
  @available(visionOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public var anchors: RealityFoundation.Scene.AnchorCollection {
    get
    set
    _modify
  }
  @available(visionOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func addAnchor(_ anchor: any RealityFoundation.HasAnchoring)
  @available(visionOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func removeAnchor(_ anchor: any RealityFoundation.HasAnchoring)
  @_Concurrency.MainActor @preconcurrency public static func __testInit(name: Swift.String) -> RealityFoundation.Scene
  @objc deinit
  @_Concurrency.MainActor @preconcurrency public func findEntity(named name: Swift.String) -> RealityFoundation.Entity?
  @available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  @_Concurrency.MainActor @preconcurrency public func findEntity(id: RealityFoundation.Entity.ID) -> RealityFoundation.Entity?
  @_Concurrency.MainActor @preconcurrency public var __interactionService: any RealityFoundation.__RKEntityInteractionService {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var synchronizationService: (any RealityFoundation.SynchronizationService)? {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Scene {
  @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreScene: RealityFoundation.__SceneRef) -> RealityFoundation.Scene
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Scene : Swift.Hashable {
  nonisolated public func hash(into hasher: inout Swift.Hasher)
  nonisolated public static func == (lhs: RealityFoundation.Scene, rhs: RealityFoundation.Scene) -> Swift.Bool
  nonisolated public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Scene : Swift.Identifiable {
  nonisolated public var id: Swift.UInt64 {
    get
  }
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias ID = Swift.UInt64
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Scene : RealityFoundation.EventSource {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Scene {
  @_Concurrency.MainActor @preconcurrency public var __corePointer: Swift.OpaquePointer {
    get
  }
}
@available(visionOS 1.0, macOS 15.0, macCatalyst 18.0, iOS 18.0, *)
extension Spatial.Rect3D {
  public init(_ bounds: RealityFoundation.BoundingBox)
}
@available(visionOS 1.0, macOS 15.0, macCatalyst 18.0, iOS 18.0, *)
extension RealityFoundation.BoundingBox {
  public init(_ rect3D: Spatial.Rect3D)
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct SetEntityEnabledAction : RealityFoundation.EntityAction, Swift.Codable {
  public var targetEntity: RealityFoundation.ActionEntityResolution
  public var isEnabled: Swift.Bool
  public var animatedValueType: (any RealityFoundation.AnimatableData.Type)? {
    get
  }
  public init(targetEntity: RealityFoundation.ActionEntityResolution = .sourceEntity, isEnabled: Swift.Bool)
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias EventParameterType = Swift.Never
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct InputTargetComponent : RealityFoundation.Component, Swift.Equatable {
  public var isEnabled: Swift.Bool
  public var allowedInputTypes: RealityFoundation.InputTargetComponent.InputType
  public struct InputType : Swift.OptionSet {
    public static let direct: RealityFoundation.InputTargetComponent.InputType
    public static let indirect: RealityFoundation.InputTargetComponent.InputType
    public static let all: RealityFoundation.InputTargetComponent.InputType
    public init(rawValue: Swift.UInt32)
    public let rawValue: Swift.UInt32
    @available(iOS 18.0, visionOS 1.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias ArrayLiteralElement = RealityFoundation.InputTargetComponent.InputType
    @available(iOS 18.0, visionOS 1.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias Element = RealityFoundation.InputTargetComponent.InputType
    @available(iOS 18.0, visionOS 1.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias RawValue = Swift.UInt32
  }
  public init(allowedInputTypes: RealityFoundation.InputTargetComponent.InputType = .all)
  @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.InputTargetComponent
  @_Concurrency.MainActor @preconcurrency public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
  public static func == (a: RealityFoundation.InputTargetComponent, b: RealityFoundation.InputTargetComponent) -> Swift.Bool
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityAnimateAction : RealityFoundation.__RKEntityAction {
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func stop() -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  override public init(targetEntity: RealityFoundation.Entity? = nil)
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityStartAnimateAction : RealityFoundation.__RKEntityAnimateAction {
  public init(targetEntity: RealityFoundation.Entity?, loopCount: Swift.Int = 1, multiplePerformBehavior: RealityFoundation.__RKEntityActionMultiplePerformBehavior = .ignore, clipStart: Swift.Double = 0.0, clipDuration: Swift.Double = 0.0, clipReversed: Swift.Bool = false, animationSpeed: Swift.Float = 1.0, clipReverses: Swift.Bool = false, muteAudio: Swift.Bool = false, audioGain: Swift.Double = 1.0, targetAnimationEntity: RealityFoundation.Entity? = nil)
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityStopAnimateAction : RealityFoundation.__RKEntityAnimateAction {
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  override public init(targetEntity: RealityFoundation.Entity? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityToggleAnimateAction : RealityFoundation.__RKEntityAnimateAction {
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  override public init(targetEntity: RealityFoundation.Entity? = nil)
  @objc deinit
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct AudioGeneratorConfiguration {
  public var layoutTag: CoreAudioTypes.AudioChannelLayoutTag
  public var mixGroupName: Swift.String?
  public init(layoutTag: CoreAudioTypes.AudioChannelLayoutTag = kAudioChannelLayoutTag_Mono, mixGroupName: Swift.String? = nil)
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct ModelSortGroup : Swift.Equatable, Swift.Sendable {
  public init(depthPass: RealityFoundation.ModelSortGroup.DepthPass? = nil)
  public static func == (lhs: RealityFoundation.ModelSortGroup, rhs: RealityFoundation.ModelSortGroup) -> Swift.Bool
  public static func != (lhs: RealityFoundation.ModelSortGroup, rhs: RealityFoundation.ModelSortGroup) -> Swift.Bool
  public var depthPass: RealityFoundation.ModelSortGroup.DepthPass? {
    get
  }
  public enum DepthPass : Swift.Sendable {
    case prePass
    case postPass
    public static func == (a: RealityFoundation.ModelSortGroup.DepthPass, b: RealityFoundation.ModelSortGroup.DepthPass) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  public var planarUIPlacement: RealityFoundation.ModelSortGroup.PlanarUIPlacement? {
    get
  }
  @available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  public enum PlanarUIPlacement : Swift.Sendable {
    case inlineUI
    case alwaysInFront
    case alwaysBehind
    public static func == (a: RealityFoundation.ModelSortGroup.PlanarUIPlacement, b: RealityFoundation.ModelSortGroup.PlanarUIPlacement) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.ModelSortGroup {
  public static let planarUIInline: RealityFoundation.ModelSortGroup
  public static let planarUIAlwaysInFront: RealityFoundation.ModelSortGroup
  public static let planarUIAlwaysBehind: RealityFoundation.ModelSortGroup
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct ModelSortGroupComponent : RealityFoundation.Component {
  public init(group: RealityFoundation.ModelSortGroup, order: Swift.Int32)
  public var group: RealityFoundation.ModelSortGroup {
    get
    set
  }
  public var order: Swift.Int32 {
    get
    set
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.ModelSortGroupComponent {
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.ModelSortGroupComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.Entity {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func moveCharacter(by moveDelta: Swift.SIMD3<Swift.Float>, deltaTime: Swift.Float, relativeTo referenceEntity: RealityFoundation.Entity?, collisionHandler: ((RealityFoundation.CharacterControllerComponent.Collision) -> Swift.Void)? = nil) -> RealityFoundation.CharacterControllerComponent.CollisionFlags
  @_Concurrency.MainActor @preconcurrency public func teleportCharacter(to position: Swift.SIMD3<Swift.Float>, relativeTo referenceEntity: RealityFoundation.Entity?)
  @_Concurrency.MainActor @preconcurrency public var characterController: RealityFoundation.CharacterControllerComponent? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var characterControllerState: RealityFoundation.CharacterControllerStateComponent? {
    get
    set
  }
}
@usableFromInline
internal typealias REMatrix2x2F = simd.simd_float2x2
@usableFromInline
internal typealias REMatrix3x3F = simd.simd_float3x3
@usableFromInline
internal typealias REMatrix4x4F = simd.simd_float4x4
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension simd.simd_float3x3 {
  @inlinable internal init(_ matrix: RealityFoundation.REMatrix4x4F) {
        self = REMatrix3x3F(columns: (matrix[0]._xyz, matrix[1]._xyz, matrix[2]._xyz))
    }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension simd.simd_float4x4 {
  @inlinable internal static var identity: RealityFoundation.REMatrix4x4F {
    get { return REMatrix4x4F( diagonal: SIMD4<Float>(repeating: 1.0)) }
  }
  @inlinable internal init(rows: (Swift.SIMD4<Swift.Float>, Swift.SIMD4<Swift.Float>, Swift.SIMD4<Swift.Float>, Swift.SIMD4<Swift.Float>)) {
        self = simd_matrix_from_rows(rows.0, rows.1, rows.2, rows.3)
    }
  @inlinable internal init(rows r: ((Swift.Float, Swift.Float, Swift.Float, Swift.Float), (Swift.Float, Swift.Float, Swift.Float, Swift.Float), (Swift.Float, Swift.Float, Swift.Float, Swift.Float), (Swift.Float, Swift.Float, Swift.Float, Swift.Float))) {
        self = simd_matrix_from_rows(SIMD4<Float>(r.0.0, r.0.1, r.0.2, r.0.3),
                                     SIMD4<Float>(r.1.0, r.1.1, r.1.2, r.1.3),
                                     SIMD4<Float>(r.2.0, r.2.1, r.2.2, r.2.3),
                                     SIMD4<Float>(r.3.0, r.3.1, r.3.2, r.3.3))
    }
  @inlinable internal init(translation t: Swift.SIMD3<Swift.Float>) {
        self.init(columns: (SIMD4<Float>(1, 0, 0, 0),
                            SIMD4<Float>(0, 1, 0, 0),
                            SIMD4<Float>(0, 0, 1, 0),
                            SIMD4<Float>(t.x, t.y, t.z, 1)))
    }
  @inlinable internal init(scale s: Swift.SIMD3<Swift.Float>) {
        self.init(diagonal: SIMD4<Float>(s.x, s.y, s.z, 1))
    }
  @inlinable internal init(rotation: simd.simd_quatf) {
        self = simd_matrix4x4(rotation)
    }
  @inlinable internal init(translation: Swift.SIMD3<Swift.Float>, rotation: simd.simd_quatf, scale: Swift.SIMD3<Swift.Float>) {
        self = simd_matrix4x4(rotation)
        self.scale(scale)
        self.translate(translation)
    }
  @inlinable internal func scaled(_ scale: Swift.SIMD3<Swift.Float>) -> RealityFoundation.REMatrix4x4F {
        var m = self
        m.columns.0 *= scale.x
        m.columns.1 *= scale.y
        m.columns.2 *= scale.z
        return m
    }
  @inlinable internal func translated(_ trans: Swift.SIMD3<Swift.Float>) -> RealityFoundation.REMatrix4x4F {
        var m = self
        m.columns.3._xyz += trans
        return m
    }
  @inlinable internal mutating func scale(_ scale: Swift.SIMD3<Swift.Float>) {
        self.columns.0 *= scale.x
        self.columns.1 *= scale.y
        self.columns.2 *= scale.z
    }
  @inlinable internal mutating func translate(_ trans: Swift.SIMD3<Swift.Float>) {
        self.columns.3._xyz += trans
    }
  @inlinable internal var scale: Swift.SIMD3<Swift.Float> {
    get {
             
            let minor = matrix_float3x3(self)
            let sign = minor.determinant > Float(0) ? Float(1) : Float(-1)
            return sign * SIMD3<Float>(simd.length(minor.columns.0),
                                       simd.length(minor.columns.1),
                                       simd.length(minor.columns.2))
        }
    set {
            self.columns.0._xyz = simd.normalize(self.columns.0._xyz)
            self.columns.1._xyz = simd.normalize(self.columns.1._xyz)
            self.columns.2._xyz = simd.normalize(self.columns.2._xyz)
            scale(newValue)
        }
  }
  @usableFromInline
  internal var rotation: simd.simd_quatf {
    get
    set
  }
  @inlinable internal var translation: Swift.SIMD3<Swift.Float> {
    get {
            return columns.3._xyz
        }
    set {
            columns.3._xyz = newValue
        }
  }
  @inlinable internal func decompose() -> (translation: Swift.SIMD3<Swift.Float>, rotation: simd.simd_quatf, scale: Swift.SIMD3<Swift.Float>) {
        return (translation, rotation, scale)
    }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct GeometricPin : Swift.Hashable {
  public init(named name: Swift.String, offsetPosition: Swift.SIMD3<Swift.Float> = SIMD3<Float>(0, 0, 0), offsetOrientation: simd.simd_quatf = simd_quatf(ix: 0, iy: 0, iz: 0, r: 1))
  public init(named name: Swift.String, skeletalJointName: Swift.String, offsetPosition: Swift.SIMD3<Swift.Float> = SIMD3<Float>(0, 0, 0), offsetOrientation: simd.simd_quatf = simd_quatf(ix: 0, iy: 0, iz: 0, r: 1))
  @_Concurrency.MainActor public var position: Swift.SIMD3<Swift.Float>? {
    get
  }
  @_Concurrency.MainActor public var orientation: simd.simd_quatf? {
    get
  }
  @_Concurrency.MainActor public func position(relativeTo referenceEntity: RealityFoundation.Entity?) -> Swift.SIMD3<Swift.Float>?
  @_Concurrency.MainActor public func orientation(relativeTo referenceEntity: RealityFoundation.Entity?) -> simd.simd_quatf?
  weak public var entity: RealityFoundation.Entity? {
    get
  }
  public var name: Swift.String
  public var offsetPosition: Swift.SIMD3<Swift.Float> {
    get
    set
  }
  public var offsetOrientation: simd.simd_quatf {
    get
    set
  }
  public static func == (lhs: RealityFoundation.GeometricPin, rhs: RealityFoundation.GeometricPin) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.HasTransform {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func align(_ originPin: RealityFoundation.GeometricPin, to targetPin: RealityFoundation.GeometricPin) -> simd.float4x4?
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKScenePhysics {
  public var gravity: Swift.SIMD3<Swift.Float>
  public var adaptiveTimeStep: Swift.Bool
  @_hasMissingDesignatedInitializers public class Registration {
    final public let componentType: Swift.OpaquePointer
    @objc deinit
  }
  public static var registration: RealityFoundation.__RKScenePhysics.Registration?
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Scene {
  @_Concurrency.MainActor @preconcurrency public var __gravity: Swift.SIMD3<Swift.Float>? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var __adaptiveTimeStep: Swift.Bool? {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct CharacterControllerStateComponent : RealityFoundation.Component {
  public init()
  public let velocity: Swift.SIMD3<Swift.Float>
  public let isOnGround: Swift.Bool
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.CharacterControllerStateComponent {
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.CharacterControllerStateComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@_Concurrency.MainActor @preconcurrency public class __RCEntity : RealityFoundation.Entity, RealityFoundation.HasAnchoring {
  @_Concurrency.MainActor @preconcurrency public func invokeCustomTrigger(named name: Swift.String, overrides: [Swift.String : RealityFoundation.Entity]? = nil)
  @_Concurrency.MainActor @preconcurrency public func registerCustomAction(named name: Swift.String, action: @escaping (RealityFoundation.Entity?) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency required public init()
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency override internal init(_coreEntity: RealityFoundation.__EntityRef)
  @objc deinit
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public enum Audio {
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.Audio {
  public typealias Decibel = Swift.Double
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.Audio {
  public enum Directivity {
    case beam(focus: Swift.Double)
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.Audio.Directivity : Swift.Equatable, Swift.Hashable, Swift.Codable {
  public static func == (a: RealityFoundation.Audio.Directivity, b: RealityFoundation.Audio.Directivity) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.Audio {
  public typealias GeneratorRenderHandler = AVFAudio.AVAudioSourceNodeRenderBlock
}
extension RealityFoundation.Entity {
  @available(visionOS 2.0, *)
  @available(macOS, unavailable)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  public enum CoordinateSpaceReference {
    case scene
    case immersiveSpace
    public static func == (a: RealityFoundation.Entity.CoordinateSpaceReference, b: RealityFoundation.Entity.CoordinateSpaceReference) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(visionOS 2.0, *)
  @available(macOS, unavailable)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func transformMatrix(relativeTo referenceSpace: RealityFoundation.Entity.CoordinateSpaceReference) -> simd.float4x4?
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct PhysicsMotionComponent : RealityFoundation.Component, Swift.Equatable {
  public var linearVelocity: Swift.SIMD3<Swift.Float>
  public var angularVelocity: Swift.SIMD3<Swift.Float>
  public init()
  public init(linearVelocity: Swift.SIMD3<Swift.Float> = .zero, angularVelocity: Swift.SIMD3<Swift.Float> = .zero)
  @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.PhysicsMotionComponent
  @_Concurrency.MainActor @preconcurrency public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
  public static func == (a: RealityFoundation.PhysicsMotionComponent, b: RealityFoundation.PhysicsMotionComponent) -> Swift.Bool
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct AnimationLibraryComponent : RealityFoundation.Component, Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, RealityFoundation.AnimationResource)...)
  public init(animations: [Swift.String : RealityFoundation.AnimationResource])
  public init()
  public var defaultAnimation: RealityFoundation.AnimationResource? {
    get
  }
  public var defaultKey: Swift.String? {
    get
    set
  }
  public mutating func removeAll(resource: RealityFoundation.AnimationResource)
  public var unkeyedResources: [RealityFoundation.AnimationResource]? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.AnimationLibraryComponent
  @_Concurrency.MainActor @preconcurrency public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
  public var animations: RealityFoundation.AnimationLibraryComponent.AnimationCollection
  public struct AnimationCollection : Swift.Collection {
    public typealias Element = (key: Swift.String, value: RealityFoundation.AnimationResource)
    public typealias SubSequence = Swift.Slice<RealityFoundation.AnimationLibraryComponent.AnimationCollection>
    public init(dictionaryLiteral elements: (Swift.String, RealityFoundation.AnimationResource)...)
    public var count: Swift.Int {
      get
    }
    public var isEmpty: Swift.Bool {
      get
    }
    public var startIndex: RealityFoundation.AnimationLibraryComponent.AnimationCollection.Index {
      get
    }
    public var endIndex: RealityFoundation.AnimationLibraryComponent.AnimationCollection.Index {
      get
    }
    public __consuming func makeIterator() -> RealityFoundation.AnimationLibraryComponent.AnimationCollection.Iterator
    public subscript(key: Swift.String) -> RealityFoundation.AnimationResource? {
      get
      set(newValue)
    }
    public subscript(bounds: Swift.Range<RealityFoundation.AnimationLibraryComponent.AnimationCollection.Index>) -> RealityFoundation.AnimationLibraryComponent.AnimationCollection.SubSequence {
      get
    }
    public func index(after i: RealityFoundation.AnimationLibraryComponent.AnimationCollection.Index) -> RealityFoundation.AnimationLibraryComponent.AnimationCollection.Index
    public func formIndex(after i: inout RealityFoundation.AnimationLibraryComponent.AnimationCollection.Index)
    public subscript(position: RealityFoundation.AnimationLibraryComponent.AnimationCollection.Index) -> RealityFoundation.AnimationLibraryComponent.AnimationCollection.Element {
      get
    }
    public struct Iterator : Swift.IteratorProtocol {
      public mutating func next() -> RealityFoundation.AnimationLibraryComponent.AnimationCollection.Element?
      @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
      public typealias Element = RealityFoundation.AnimationLibraryComponent.AnimationCollection.Element
    }
    public struct Index : Swift.Comparable, Swift.Hashable, Swift.Sendable {
      public static func < (lhs: RealityFoundation.AnimationLibraryComponent.AnimationCollection.Index, rhs: RealityFoundation.AnimationLibraryComponent.AnimationCollection.Index) -> Swift.Bool
      public static func == (a: RealityFoundation.AnimationLibraryComponent.AnimationCollection.Index, b: RealityFoundation.AnimationLibraryComponent.AnimationCollection.Index) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias Indices = Swift.DefaultIndices<RealityFoundation.AnimationLibraryComponent.AnimationCollection>
  }
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias Key = Swift.String
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias Value = RealityFoundation.AnimationResource
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public func __RERetain(_ ptr: Swift.OpaquePointer?)
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public func __RERelease(_ ptr: Swift.OpaquePointer?)
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKTimerTrigger : RealityFoundation.__RKEntityTrigger {
  override public init()
  @objc deinit
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct QueryPredicate<Value> {
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@_Concurrency.MainActor @preconcurrency public class AudioFileResource : RealityFoundation.AudioResource {
  @_Concurrency.MainActor @preconcurrency final public let name: Swift.String
  @available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  @_Concurrency.MainActor @preconcurrency final public let configuration: RealityFoundation.AudioFileResource.Configuration
  @available(visionOS, introduced: 2.0, deprecated: 1.0, message: "Use configuration.loadingStrategy instead.")
  @available(macOS, introduced: 10.15, deprecated: 15.0, message: "Use configuration.loadingStrategy instead.")
  @available(macCatalyst, introduced: 13, deprecated: 18.0, message: "Use configuration.loadingStrategy instead.")
  @available(iOS, introduced: 13, deprecated: 18.0, message: "Use configuration.loadingStrategy instead.")
  @_Concurrency.MainActor @preconcurrency public var loadingStrategy: RealityFoundation.AudioFileResource.LoadingStrategy {
    get
    set
  }
  @available(visionOS, introduced: 2.0, deprecated: 1.0, message: "Use configuration.shouldLoop instead.")
  @available(macOS, introduced: 10.15, deprecated: 15.0, message: "Use configuration.shouldLoop instead.")
  @available(macCatalyst, introduced: 13, deprecated: 18.0, message: "Use configuration.shouldLoop instead.")
  @available(iOS, introduced: 13, deprecated: 18.0, message: "Use configuration.shouldLoop instead.")
  @_Concurrency.MainActor @preconcurrency public var shouldLoop: Swift.Bool {
    get
    set
  }
  @objc deinit
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AudioFileResource : Swift.Hashable {
  @_Concurrency.MainActor @preconcurrency public func hash(into hasher: inout Swift.Hasher)
  nonisolated public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension RealityFoundation.AudioFileResource {
  @available(visionOS, introduced: 2.0, deprecated: 1.0, message: "duration")
  @available(iOS, introduced: 13.0, deprecated: 18.0, renamed: "duration")
  @available(macOS, introduced: 10.15, deprecated: 15.0, renamed: "duration")
  @available(macCatalyst, introduced: 13.0, deprecated: 18.0, renamed: "duration")
  @_Concurrency.MainActor @preconcurrency public var __duration: Foundation.TimeInterval {
    get
  }
  @available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  @_Concurrency.MainActor @preconcurrency public var duration: Swift.Duration {
    get
  }
  @_Concurrency.MainActor @preconcurrency public static func == (lhs: RealityFoundation.AudioFileResource, rhs: RealityFoundation.AudioFileResource) -> Swift.Bool
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AudioFileResource {
  @_Concurrency.MainActor @preconcurrency convenience public init(named name: Swift.String, in bundle: Foundation.Bundle? = nil, configuration: RealityFoundation.AudioFileResource.Configuration = .init()) async throws
  @_Concurrency.MainActor @preconcurrency convenience public init(named name: Swift.String, from scene: Swift.String, in bundle: Foundation.Bundle? = nil) async throws
  @_Concurrency.MainActor @preconcurrency convenience public init(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil, configuration: RealityFoundation.AudioFileResource.Configuration = .init()) async throws
}
@_hasMissingDesignatedInitializers @available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
@_Concurrency.MainActor public class LowLevelMesh {
  public enum VertexSemantic {
    case position
    case color
    case normal
    case tangent
    case bitangent
    case uv0
    case uv1
    case uv2
    case uv3
    case uv4
    case uv5
    case uv6
    case uv7
    case unspecified
    public static func == (a: RealityFoundation.LowLevelMesh.VertexSemantic, b: RealityFoundation.LowLevelMesh.VertexSemantic) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Attribute {
    public init(semantic: RealityFoundation.LowLevelMesh.VertexSemantic, format: Metal.MTLVertexFormat, layoutIndex: Swift.Int = 0, offset: Swift.Int)
    public var semantic: RealityFoundation.LowLevelMesh.VertexSemantic
    public var format: Metal.MTLVertexFormat
    public var offset: Swift.Int
    public var layoutIndex: Swift.Int
  }
  public struct Layout {
    public init(bufferIndex: Swift.Int, bufferOffset: Swift.Int = 0, bufferStride: Swift.Int)
    public var bufferIndex: Swift.Int
    public var bufferOffset: Swift.Int
    public var bufferStride: Swift.Int
  }
  public struct Descriptor {
    public init(vertexCapacity: Swift.Int = 0, vertexAttributes: [RealityFoundation.LowLevelMesh.Attribute] = [Attribute](), vertexLayouts: [RealityFoundation.LowLevelMesh.Layout] = [Layout](), indexCapacity: Swift.Int = 0, indexType: Metal.MTLIndexType = MTLIndexType.uint32)
    public static let maxVertexBufferCount: Swift.Int
    public var vertexBufferCount: Swift.Int {
      get
    }
    public var vertexCapacity: Swift.Int
    public var vertexAttributes: [RealityFoundation.LowLevelMesh.Attribute]
    public var vertexLayouts: [RealityFoundation.LowLevelMesh.Layout] {
      get
      set
    }
    public var indexCapacity: Swift.Int
    public var indexType: Metal.MTLIndexType
  }
  public struct Part {
    public init(indexOffset: Swift.Int = 0, indexCount: Swift.Int = 0, topology: Metal.MTLPrimitiveType = .triangle, materialIndex: Swift.Int = 0, bounds: RealityFoundation.BoundingBox)
    public var indexOffset: Swift.Int
    public var indexCount: Swift.Int
    public var topology: Metal.MTLPrimitiveType
    public var materialIndex: Swift.Int
    public var bounds: RealityFoundation.BoundingBox
  }
  @_Concurrency.MainActor final public let descriptor: RealityFoundation.LowLevelMesh.Descriptor
  @_Concurrency.MainActor public var indexCapacity: Swift.Int {
    get
  }
  @_Concurrency.MainActor public var vertexCapacity: Swift.Int {
    get
  }
  public struct PartsCollection {
  }
  @_Concurrency.MainActor public var parts: RealityFoundation.LowLevelMesh.PartsCollection {
    _read
    _modify
  }
  @_Concurrency.MainActor public init(descriptor: RealityFoundation.LowLevelMesh.Descriptor) throws
  @_Concurrency.MainActor public func read(bufferIndex index: Swift.Int, using commandBuffer: any Metal.MTLCommandBuffer) -> any Metal.MTLBuffer
  @_Concurrency.MainActor public func replace(bufferIndex index: Swift.Int, using commandBuffer: any Metal.MTLCommandBuffer) -> any Metal.MTLBuffer
  @_Concurrency.MainActor public func readIndices(using commandBuffer: any Metal.MTLCommandBuffer) -> any Metal.MTLBuffer
  @_Concurrency.MainActor public func replaceIndices(using commandBuffer: any Metal.MTLCommandBuffer) -> any Metal.MTLBuffer
  @_Concurrency.MainActor public func withUnsafeBytes(bufferIndex: Swift.Int, _ callback: (Swift.UnsafeRawBufferPointer) -> Swift.Void)
  @_Concurrency.MainActor public func withUnsafeMutableBytes(bufferIndex: Swift.Int, _ callback: (Swift.UnsafeMutableRawBufferPointer) -> Swift.Void)
  @_Concurrency.MainActor public func replaceUnsafeMutableBytes(bufferIndex: Swift.Int, _ callback: (Swift.UnsafeMutableRawBufferPointer) -> Swift.Void)
  @_Concurrency.MainActor public func withUnsafeIndices(_ callback: (Swift.UnsafeRawBufferPointer) -> Swift.Void)
  @_Concurrency.MainActor public func withUnsafeMutableIndices(_ callback: (Swift.UnsafeMutableRawBufferPointer) -> Swift.Void)
  @_Concurrency.MainActor public func replaceUnsafeMutableIndices(_ callback: (Swift.UnsafeMutableRawBufferPointer) -> Swift.Void)
  @objc deinit
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.LowLevelMesh.PartsCollection : Swift.MutableCollection, Swift.RandomAccessCollection {
  public typealias Element = RealityFoundation.LowLevelMesh.Part
  public typealias Index = Swift.Int
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func index(after i: Swift.Int) -> Swift.Int
  public subscript(position: RealityFoundation.LowLevelMesh.PartsCollection.Index) -> RealityFoundation.LowLevelMesh.Part {
    get
    set
  }
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias Indices = Swift.Range<RealityFoundation.LowLevelMesh.PartsCollection.Index>
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias Iterator = Swift.IndexingIterator<RealityFoundation.LowLevelMesh.PartsCollection>
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias SubSequence = Swift.Slice<RealityFoundation.LowLevelMesh.PartsCollection>
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.LowLevelMesh.PartsCollection {
  public mutating func append(_ newElement: RealityFoundation.LowLevelMesh.PartsCollection.Element)
  public mutating func append<S>(contentsOf newElements: S) where S : Swift.Sequence, S.Element == RealityFoundation.LowLevelMesh.Part
  public mutating func removeAll()
  public mutating func replaceAll<S>(_ newElements: S) where S : Swift.Sequence, S.Element == RealityFoundation.LowLevelMesh.Part
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.MeshResource {
  @_Concurrency.MainActor @preconcurrency convenience public init(from mesh: RealityFoundation.LowLevelMesh) async throws
  @_Concurrency.MainActor @preconcurrency convenience public init(from mesh: RealityFoundation.LowLevelMesh) throws
  @_Concurrency.MainActor @preconcurrency public var lowLevelMesh: RealityFoundation.LowLevelMesh? {
    get
  }
}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
public struct VirtualEnvironmentProbeComponent : RealityFoundation.Component {
  public enum Source {
    case none
    case single(RealityFoundation.VirtualEnvironmentProbeComponent.Probe)
    case blend(from: RealityFoundation.VirtualEnvironmentProbeComponent.Probe, to: RealityFoundation.VirtualEnvironmentProbeComponent.Probe, t: Swift.Float)
  }
  public struct Probe {
    public var environment: RealityFoundation.EnvironmentResource
    public var intensityExponent: Swift.Float
    public init(environment: RealityFoundation.EnvironmentResource, intensityExponent: Swift.Float = 0)
  }
  public var source: RealityFoundation.VirtualEnvironmentProbeComponent.Source
  public init(source: RealityFoundation.VirtualEnvironmentProbeComponent.Source = .none)
  @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.VirtualEnvironmentProbeComponent
  @_Concurrency.MainActor @preconcurrency public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityFadeAction : RealityFoundation.__RKEntityAction {
  public init(targetEntity: RealityFoundation.Entity?, targetOpacity: Swift.Float, duration: Swift.Float)
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKFadeSceneAction : RealityFoundation.__RKEntityAction {
  public init(targetOpacity: Swift.Float, duration: Swift.Float)
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.Entity {
  public struct ConfigurationCatalog {
    public struct Configuration : Swift.Identifiable, Swift.Sendable {
      public var id: Swift.String {
        get
      }
      public init(id: Swift.String)
      @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
      public typealias ID = Swift.String
    }
    public struct ConfigurationSet : Swift.Identifiable, Swift.Sendable {
      public var id: Swift.String {
        get
      }
      public var configurations: [Swift.String : RealityFoundation.Entity.ConfigurationCatalog.Configuration] {
        get
      }
      public var defaultConfiguration: RealityFoundation.Entity.ConfigurationCatalog.Configuration {
        get
      }
      public init(id: Swift.String, configurations: [Swift.String : RealityFoundation.Entity.ConfigurationCatalog.Configuration], defaultConfigurationId: Swift.String? = nil) throws
      public init(id: Swift.String, configurations: [RealityFoundation.Entity.ConfigurationCatalog.Configuration], defaultConfigurationId: Swift.String? = nil) throws
      @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
      public typealias ID = Swift.String
    }
    public struct ConfigurationCombination {
      public init(entity: RealityFoundation.Entity, configurationSpecifications: [Swift.String : Swift.String])
      public let entity: RealityFoundation.Entity
      public let configurationSpecifications: [Swift.String : Swift.String]
    }
    public init(configurationSets: [Swift.String : RealityFoundation.Entity.ConfigurationCatalog.ConfigurationSet], combinations: [RealityFoundation.Entity.ConfigurationCatalog.ConfigurationCombination]) throws
    public init(configurationSets: [RealityFoundation.Entity.ConfigurationCatalog.ConfigurationSet], combinations: [RealityFoundation.Entity.ConfigurationCatalog.ConfigurationCombination]) throws
    @_Concurrency.MainActor public func write(to url: Foundation.URL) async throws
    public var configurationSets: [Swift.String : RealityFoundation.Entity.ConfigurationCatalog.ConfigurationSet] {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency convenience public init(from catalog: RealityFoundation.Entity.ConfigurationCatalog, configurations: [Swift.String : Swift.String]? = nil) async throws
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource {
  public struct Dimensions2DArray {
  }
  public struct DimensionsCube {
  }
  public struct Dimensions3D {
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource {
  public struct Dimensions2D {
  }
  public struct Format {
  }
  public struct Contents {
    public struct MipmapLevel {
    }
    public init(mipmapLevels: [RealityFoundation.TextureResource.Contents.MipmapLevel])
  }
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource.Contents {
  public struct Slice : Swift.Sendable {
    public static func slice(data: Foundation.Data, bytesPerRow: Swift.Int) -> RealityFoundation.TextureResource.Contents.Slice
    public static func slice(unsafeBuffer buffer: any Metal.MTLBuffer, offset: Swift.Int = 0, size: Swift.Int, bytesPerRow: Swift.Int) -> RealityFoundation.TextureResource.Contents.Slice
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource {
  @_Concurrency.MainActor @preconcurrency convenience public init(dimensions: RealityFoundation.TextureResource.Dimensions2D, format: RealityFoundation.TextureResource.Format, contents: RealityFoundation.TextureResource.Contents) async throws
  @_Concurrency.MainActor @preconcurrency convenience public init(dimensions: RealityFoundation.TextureResource.Dimensions2D, format: RealityFoundation.TextureResource.Format, contents: RealityFoundation.TextureResource.Contents) throws
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource {
  @_Concurrency.MainActor @preconcurrency convenience public init(dimensions: RealityFoundation.TextureResource.Dimensions2DArray, format: RealityFoundation.TextureResource.Format, contents: RealityFoundation.TextureResource.Contents) async throws
  @_Concurrency.MainActor @preconcurrency convenience public init(dimensions: RealityFoundation.TextureResource.Dimensions2DArray, format: RealityFoundation.TextureResource.Format, contents: RealityFoundation.TextureResource.Contents) throws
  @_Concurrency.MainActor @preconcurrency convenience public init(dimensions: RealityFoundation.TextureResource.DimensionsCube, format: RealityFoundation.TextureResource.Format, contents: RealityFoundation.TextureResource.Contents) async throws
  @_Concurrency.MainActor @preconcurrency convenience public init(dimensions: RealityFoundation.TextureResource.DimensionsCube, format: RealityFoundation.TextureResource.Format, contents: RealityFoundation.TextureResource.Contents) throws
  @_Concurrency.MainActor @preconcurrency convenience public init(dimensions: RealityFoundation.TextureResource.Dimensions3D, format: RealityFoundation.TextureResource.Format, contents: RealityFoundation.TextureResource.Contents) async throws
  @_Concurrency.MainActor @preconcurrency convenience public init(dimensions: RealityFoundation.TextureResource.Dimensions3D, format: RealityFoundation.TextureResource.Format, contents: RealityFoundation.TextureResource.Contents) throws
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource.Dimensions2D {
  public static func dimensions(width: Swift.Int, height: Swift.Int) -> RealityFoundation.TextureResource.Dimensions2D
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource.Dimensions2DArray {
  public static func dimensions(width: Swift.Int, height: Swift.Int, length: Swift.Int) -> RealityFoundation.TextureResource.Dimensions2DArray
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource.DimensionsCube {
  public static func dimensions(faceSize: Swift.Int) -> RealityFoundation.TextureResource.DimensionsCube
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource.Dimensions3D {
  public static func dimensions(width: Swift.Int, height: Swift.Int, depth: Swift.Int) -> RealityFoundation.TextureResource.Dimensions3D
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource.Format {
  public enum ColorSpace {
    case displayP3
  }
  public static func color(_ colorSpace: RealityFoundation.TextureResource.Format.ColorSpace, pixelFormat: Metal.MTLPixelFormat) -> RealityFoundation.TextureResource.Format
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource.Format {
  public enum NormalEncoding {
    case xy
    case wy
  }
  public static func normal(_ encoding: RealityFoundation.TextureResource.Format.NormalEncoding, pixelFormat: Metal.MTLPixelFormat) -> RealityFoundation.TextureResource.Format
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource.Format {
  public static func raw(pixelFormat: Metal.MTLPixelFormat) -> RealityFoundation.TextureResource.Format
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource.Contents.MipmapLevel {
  @available(visionOS, unavailable, renamed: "mip(unsafeBuffer:offset:size:bytesPerRow:)")
  @available(macOS, unavailable)
  @available(iOS, unavailable)
  public static func mip(buffer: any Metal.MTLBuffer, offset: Swift.Int = 0, size: Swift.Int, bytesPerRow: Swift.Int) -> RealityFoundation.TextureResource.Contents.MipmapLevel
  public static func mip(data: Foundation.Data, bytesPerRow: Swift.Int) -> RealityFoundation.TextureResource.Contents.MipmapLevel
  public static func mip(unsafeBuffer buffer: any Metal.MTLBuffer, offset: Swift.Int = 0, size: Swift.Int, bytesPerRow: Swift.Int) -> RealityFoundation.TextureResource.Contents.MipmapLevel
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource.Contents.MipmapLevel {
  public static func mip(slices: [RealityFoundation.TextureResource.Contents.Slice]) -> RealityFoundation.TextureResource.Contents.MipmapLevel
  public static func mip(data: Foundation.Data, bytesPerRow: Swift.Int, bytesPerImage: Swift.Int) -> RealityFoundation.TextureResource.Contents.MipmapLevel
  public static func mip(unsafeBuffer buffer: any Metal.MTLBuffer, offset: Swift.Int = 0, size: Swift.Int, bytesPerRow: Swift.Int, bytesPerImage: Swift.Int) -> RealityFoundation.TextureResource.Contents.MipmapLevel
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource.Dimensions2D : Swift.Equatable, Swift.Hashable {
  public static func == (a: RealityFoundation.TextureResource.Dimensions2D, b: RealityFoundation.TextureResource.Dimensions2D) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource.Dimensions2DArray : Swift.Equatable, Swift.Hashable {
  public static func == (a: RealityFoundation.TextureResource.Dimensions2DArray, b: RealityFoundation.TextureResource.Dimensions2DArray) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource.DimensionsCube : Swift.Equatable, Swift.Hashable {
  public static func == (a: RealityFoundation.TextureResource.DimensionsCube, b: RealityFoundation.TextureResource.DimensionsCube) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource.Dimensions3D : Swift.Equatable, Swift.Hashable {
  public static func == (a: RealityFoundation.TextureResource.Dimensions3D, b: RealityFoundation.TextureResource.Dimensions3D) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource.Format : Swift.Equatable, Swift.Hashable {
  public static func == (a: RealityFoundation.TextureResource.Format, b: RealityFoundation.TextureResource.Format) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource.Format.ColorSpace : Swift.Equatable, Swift.Hashable {
  public static func == (a: RealityFoundation.TextureResource.Format.ColorSpace, b: RealityFoundation.TextureResource.Format.ColorSpace) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource.Format.NormalEncoding : Swift.Equatable, Swift.Hashable {
  public static func == (a: RealityFoundation.TextureResource.Format.NormalEncoding, b: RealityFoundation.TextureResource.Format.NormalEncoding) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource.Dimensions2D : Swift.Sendable {
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource.Dimensions2DArray : Swift.Sendable {
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource.DimensionsCube : Swift.Sendable {
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource.Dimensions3D : Swift.Sendable {
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource.Format : Swift.Sendable {
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource.Format.ColorSpace : Swift.Sendable {
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource.Format.NormalEncoding : Swift.Sendable {
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource.Contents : Swift.Sendable {
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource.Contents.MipmapLevel : Swift.Sendable {
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct ChannelAudioComponent {
  public var gain: RealityFoundation.Audio.Decibel
  public init(gain: RealityFoundation.Audio.Decibel = .zero)
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.Entity {
  @_Concurrency.MainActor @preconcurrency public var channelAudio: RealityFoundation.ChannelAudioComponent? {
    get
    set
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.ChannelAudioComponent : RealityFoundation.Component {
  @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.ChannelAudioComponent
  @_Concurrency.MainActor @preconcurrency public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.ChannelAudioComponent : Swift.Equatable, Swift.Hashable, Swift.Codable {
  public static func == (a: RealityFoundation.ChannelAudioComponent, b: RealityFoundation.ChannelAudioComponent) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public enum ActionEntityResolution : Swift.Codable, Swift.Equatable {
  case entityPath(RealityFoundation.BindTarget.EntityPath)
  case entityNamed(Swift.String)
  public static var sourceEntity: RealityFoundation.ActionEntityResolution {
    get
  }
  public static func == (lhs: RealityFoundation.ActionEntityResolution, rhs: RealityFoundation.ActionEntityResolution) -> Swift.Bool
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
public enum CameraFieldOfViewOrientation {
  case horizontal
  case vertical
  public static func == (a: RealityFoundation.CameraFieldOfViewOrientation, b: RealityFoundation.CameraFieldOfViewOrientation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
public struct OrthographicCameraComponent : RealityFoundation.Component, Swift.Equatable {
  public var near: Swift.Float
  public var far: Swift.Float
  public var scale: Swift.Float
  public var scaleDirection: RealityFoundation.CameraFieldOfViewOrientation
  public init()
  @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.OrthographicCameraComponent
  @_Concurrency.MainActor @preconcurrency public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
  public static func == (a: RealityFoundation.OrthographicCameraComponent, b: RealityFoundation.OrthographicCameraComponent) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasPhysicsBody {
  @_Concurrency.MainActor @preconcurrency public func addForce(_ force: Swift.SIMD3<Swift.Float>, relativeTo referenceEntity: RealityFoundation.Entity?)
  @_Concurrency.MainActor @preconcurrency public func addForce(_ force: Swift.SIMD3<Swift.Float>, at position: Swift.SIMD3<Swift.Float>, relativeTo referenceEntity: RealityFoundation.Entity?)
  @_Concurrency.MainActor @preconcurrency public func addTorque(_ torque: Swift.SIMD3<Swift.Float>, relativeTo referenceEntity: RealityFoundation.Entity?)
  @_Concurrency.MainActor @preconcurrency public func clearForcesAndTorques()
  @_Concurrency.MainActor @preconcurrency public func applyLinearImpulse(_ impulse: Swift.SIMD3<Swift.Float>, relativeTo referenceEntity: RealityFoundation.Entity?)
  @_Concurrency.MainActor @preconcurrency public func applyAngularImpulse(_ impulse: Swift.SIMD3<Swift.Float>, relativeTo referenceEntity: RealityFoundation.Entity?)
  @_Concurrency.MainActor @preconcurrency public func applyImpulse(_ impulse: Swift.SIMD3<Swift.Float>, at position: Swift.SIMD3<Swift.Float>, relativeTo referenceEntity: RealityFoundation.Entity?)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public protocol HasCollision : RealityFoundation.HasTransform {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasCollision {
  @_Concurrency.MainActor @preconcurrency public var collision: RealityFoundation.CollisionComponent? {
    get
    set
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct BillboardComponent : RealityFoundation.Component {
  public init()
  public var blendFactor: Swift.Float
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.BillboardComponent {
  @preconcurrency @_Concurrency.MainActor public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.BillboardComponent
  @preconcurrency @_Concurrency.MainActor public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AudioFileResource {
  public struct Configuration {
    public var loadingStrategy: RealityFoundation.AudioFileResource.LoadingStrategy
    public var shouldLoop: Swift.Bool
    public var shouldRandomizeStartTime: Swift.Bool
    public var normalization: RealityFoundation.AudioResource.Normalization?
    public var calibration: RealityFoundation.AudioResource.Calibration?
    public var mixGroupName: Swift.String?
    public init(loadingStrategy: RealityFoundation.AudioFileResource.LoadingStrategy = .preload, shouldLoop: Swift.Bool = false, shouldRandomizeStartTime: Swift.Bool = false, normalization: RealityFoundation.AudioResource.Normalization? = nil, calibration: RealityFoundation.AudioResource.Calibration? = nil, mixGroupName: Swift.String? = nil)
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AudioFileResource.Configuration : Swift.Equatable, Swift.Hashable, Swift.Sendable {
  public static func == (a: RealityFoundation.AudioFileResource.Configuration, b: RealityFoundation.AudioFileResource.Configuration) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public protocol HasAnchoring : RealityFoundation.Entity {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasAnchoring {
  @available(macOS 10.15, iOS 13.0, macCatalyst 14.0, *)
  @_Concurrency.MainActor @preconcurrency public var anchoring: RealityFoundation.AnchoringComponent {
    get
    set
  }
  @available(visionOS, deprecated, message: "Anchor Identifier is not supported on xrOS")
  @_Concurrency.MainActor @preconcurrency public var anchorIdentifier: Foundation.UUID? {
    get
  }
  @available(macOS 10.15, iOS 13.0, macCatalyst 14.0, *)
  @available(visionOS, deprecated, message: "reanchor(:preservingWorldTransform:) is not supported on xrOS")
  @_Concurrency.MainActor @preconcurrency public func reanchor(_ target: RealityFoundation.AnchoringComponent.Target, preservingWorldTransform: Swift.Bool = true)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  @_Concurrency.MainActor @preconcurrency public var anchor: (any RealityFoundation.HasAnchoring)? {
    get
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct AnimationView : RealityFoundation.AnimationDefinition {
  public var name: Swift.String {
    get
    set
  }
  public var blendLayer: Swift.Int32 {
    get
    set
  }
  public var fillMode: RealityFoundation.AnimationFillMode {
    get
    set
  }
  public var bindTarget: RealityFoundation.BindTarget {
    get
    set
  }
  public var trimStart: Foundation.TimeInterval? {
    get
    set
  }
  public var trimEnd: Foundation.TimeInterval? {
    get
    set
  }
  public var trimDuration: Foundation.TimeInterval? {
    get
    set
  }
  public var offset: Foundation.TimeInterval {
    get
    set
  }
  public var delay: Foundation.TimeInterval {
    get
    set
  }
  public var speed: Swift.Float {
    get
    set
  }
  public var repeatMode: RealityFoundation.AnimationRepeatMode {
    get
    set
  }
  public var source: (any RealityFoundation.AnimationDefinition)? {
    get
    set
  }
  public var duration: Foundation.TimeInterval {
    get
  }
  public init(source: any RealityFoundation.AnimationDefinition, name: Swift.String = "", bindTarget: RealityFoundation.BindTarget? = nil, blendLayer: Swift.Int32 = 0, repeatMode: RealityFoundation.AnimationRepeatMode = .none, fillMode: RealityFoundation.AnimationFillMode = [], trimStart: Foundation.TimeInterval? = nil, trimEnd: Foundation.TimeInterval? = nil, trimDuration: Foundation.TimeInterval? = nil, offset: Foundation.TimeInterval = 0, delay: Foundation.TimeInterval = 0, speed: Swift.Float = 1.0)
}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
public class IKResource : RealityFoundation.Resource {
  public var __coreAsset: RealityFoundation.__AssetRef {
    get
  }
  @objc deinit
  public var solverDefinitions: [RealityFoundation.IKSolverDefinition] {
    get
  }
  convenience public init(rig: RealityFoundation.IKRig) throws
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
@_Concurrency.MainActor public class LowLevelTexture {
  @_Concurrency.MainActor final public let descriptor: RealityFoundation.LowLevelTexture.Descriptor
  public struct Descriptor {
    public init(textureType: Metal.MTLTextureType = .type2D, pixelFormat: Metal.MTLPixelFormat = .invalid, width: Swift.Int = 0, height: Swift.Int = 0, depth: Swift.Int = 1, mipmapLevelCount: Swift.Int = 1, arrayLength: Swift.Int = 1, textureUsage: Metal.MTLTextureUsage = .unknown, swizzle: Metal.MTLTextureSwizzleChannels = .init(red: .red, green: .green, blue: .blue, alpha: .alpha))
    public var textureType: Metal.MTLTextureType
    public var pixelFormat: Metal.MTLPixelFormat
    public var width: Swift.Int
    public var height: Swift.Int
    public var depth: Swift.Int
    public var mipmapLevelCount: Swift.Int
    public var arrayLength: Swift.Int
    public var textureUsage: Metal.MTLTextureUsage
    public var swizzle: Metal.MTLTextureSwizzleChannels
  }
  @_Concurrency.MainActor public init(descriptor: RealityFoundation.LowLevelTexture.Descriptor) throws
  @_Concurrency.MainActor public func read() -> any Metal.MTLTexture
  @_Concurrency.MainActor public func replace(using commandBuffer: any Metal.MTLCommandBuffer) -> any Metal.MTLTexture
  @objc deinit
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.TextureResource {
  @_Concurrency.MainActor @preconcurrency convenience public init(from texture: RealityFoundation.LowLevelTexture) async throws
  @_Concurrency.MainActor @preconcurrency convenience public init(from texture: RealityFoundation.LowLevelTexture) throws
  @_Concurrency.MainActor @preconcurrency public func replace(with texture: RealityFoundation.LowLevelTexture)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RKEntityAudioActionType : Swift.String, Swift.Codable {
  case play
  case pause
  case stop
  public init?(rawValue: Swift.String)
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RKAudioSpatialModeSelection : Swift.String, Swift.Codable, Swift.CaseIterable {
  case pointSource
  case ambientBed
  case stereoBypass
  public init?(rawValue: Swift.String)
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias AllCases = [RealityFoundation.__RKAudioSpatialModeSelection]
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [RealityFoundation.__RKAudioSpatialModeSelection] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityAudioAction : RealityFoundation.__RKEntityAction {
  public var type: RealityFoundation.__RKEntityAudioActionType
  public var path: Swift.String
  public var volume: Swift.Double
  public var loops: Swift.Bool
  public var spatialMode: RealityFoundation.__RKAudioSpatialModeSelection
  public var __audioAssetRef: Swift.OpaquePointer? {
    get
  }
  @preconcurrency @_Concurrency.MainActor public init(targetEntity: RealityFoundation.Entity?, type: RealityFoundation.__RKEntityAudioActionType, path: Swift.String, volume: Swift.Double, loops: Swift.Bool, spatialMode: RealityFoundation.__RKAudioSpatialModeSelection = .pointSource, multiplePerformBehavior: RealityFoundation.__RKEntityActionMultiplePerformBehavior = .ignore)
  @objc deinit
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  override public func stop() -> Swift.Bool
  override public func preloadAssets()
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKVisibilityShowMoveInAnimation : RealityFoundation.__RKVisibilityBaseAnimation {
  @objc deinit
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AudioResource {
  public struct Normalization {
    public static let dynamic: RealityFoundation.AudioResource.Normalization
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AudioResource.Normalization : Swift.Equatable, Swift.Hashable, Swift.Sendable {
  public static func == (a: RealityFoundation.AudioResource.Normalization, b: RealityFoundation.AudioResource.Normalization) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public enum SystemDependency : Swift.Equatable {
  case before(any RealityFoundation.System.Type)
  case after(any RealityFoundation.System.Type)
  public static func == (lhs: RealityFoundation.SystemDependency, rhs: RealityFoundation.SystemDependency) -> Swift.Bool
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct AnimationFillMode : Swift.OptionSet {
  public let rawValue: Swift.Int8
  public static let none: RealityFoundation.AnimationFillMode
  public static let forwards: RealityFoundation.AnimationFillMode
  public static let backwards: RealityFoundation.AnimationFillMode
  public static let both: RealityFoundation.AnimationFillMode
  public init(rawValue: Swift.Int8)
  @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
  public typealias ArrayLiteralElement = RealityFoundation.AnimationFillMode
  @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
  public typealias Element = RealityFoundation.AnimationFillMode
  @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
  public typealias RawValue = Swift.Int8
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public protocol AnimatableData {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension Swift.Float : RealityFoundation.AnimatableData {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension Swift.Double : RealityFoundation.AnimatableData {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension Swift.SIMD2 : RealityFoundation.AnimatableData where Scalar == Swift.Float {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension Swift.SIMD3 : RealityFoundation.AnimatableData where Scalar == Swift.Float {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension Swift.SIMD4 : RealityFoundation.AnimatableData where Scalar == Swift.Float {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension simd.simd_quatf : RealityFoundation.AnimatableData {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.Transform : RealityFoundation.AnimatableData {
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct JointTransforms : Swift.BidirectionalCollection, Swift.MutableCollection, Swift.ExpressibleByArrayLiteral, Swift.Equatable, RealityFoundation.AnimatableData {
  public typealias Index = Swift.Int
  public typealias Element = RealityFoundation.Transform
  public typealias ArrayLiteralElement = RealityFoundation.Transform
  public init()
  public init(arrayLiteral elements: RealityFoundation.Transform...)
  public init<S>(_ transforms: S) where S : Swift.Sequence, S.Element == RealityFoundation.Transform
  public subscript(index: RealityFoundation.JointTransforms.Index) -> RealityFoundation.Transform {
    get
    set(newValue)
  }
  public var startIndex: RealityFoundation.JointTransforms.Index {
    get
  }
  public var endIndex: RealityFoundation.JointTransforms.Index {
    get
  }
  public func index(after i: RealityFoundation.JointTransforms.Index) -> RealityFoundation.JointTransforms.Index
  public func index(before i: RealityFoundation.JointTransforms.Index) -> RealityFoundation.JointTransforms.Index
  public static func == (lhs: RealityFoundation.JointTransforms, rhs: RealityFoundation.JointTransforms) -> Swift.Bool
  @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
  public typealias Indices = Swift.DefaultIndices<RealityFoundation.JointTransforms>
  @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
  public typealias Iterator = Swift.IndexingIterator<RealityFoundation.JointTransforms>
  @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
  public typealias SubSequence = Swift.Slice<RealityFoundation.JointTransforms>
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.JointTransforms : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct BlendShapeWeights : Swift.BidirectionalCollection, Swift.MutableCollection, Swift.ExpressibleByArrayLiteral, Swift.Equatable, RealityFoundation.AnimatableData {
  public typealias Index = Swift.Int
  public typealias Element = Swift.Float
  public typealias ArrayLiteralElement = Swift.Float
  public init()
  public init(arrayLiteral elements: Swift.Float...)
  public init<S>(_ weights: S) where S : Swift.Sequence, S.Element == Swift.Float
  public subscript(index: RealityFoundation.BlendShapeWeights.Index) -> Swift.Float {
    get
    set(newValue)
  }
  public var startIndex: RealityFoundation.BlendShapeWeights.Index {
    get
  }
  public var endIndex: RealityFoundation.BlendShapeWeights.Index {
    get
  }
  public func index(after i: RealityFoundation.BlendShapeWeights.Index) -> RealityFoundation.BlendShapeWeights.Index
  public func index(before i: RealityFoundation.BlendShapeWeights.Index) -> RealityFoundation.BlendShapeWeights.Index
  public static func == (lhs: RealityFoundation.BlendShapeWeights, rhs: RealityFoundation.BlendShapeWeights) -> Swift.Bool
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias Indices = Swift.DefaultIndices<RealityFoundation.BlendShapeWeights>
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias Iterator = Swift.IndexingIterator<RealityFoundation.BlendShapeWeights>
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias SubSequence = Swift.Slice<RealityFoundation.BlendShapeWeights>
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.BlendShapeWeights : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public protocol AnimationDefinition {
  var name: Swift.String { get set }
  var blendLayer: Swift.Int32 { get set }
  var fillMode: RealityFoundation.AnimationFillMode { get set }
  var bindTarget: RealityFoundation.BindTarget { get set }
  var trimStart: Foundation.TimeInterval? { get set }
  var trimEnd: Foundation.TimeInterval? { get set }
  var trimDuration: Foundation.TimeInterval? { get set }
  var offset: Foundation.TimeInterval { get set }
  var delay: Foundation.TimeInterval { get set }
  var speed: Swift.Float { get set }
  var repeatMode: RealityFoundation.AnimationRepeatMode { get set }
  var duration: Foundation.TimeInterval { get }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.AnimationDefinition {
  public func trimmed(start: Foundation.TimeInterval? = nil, end: Foundation.TimeInterval? = nil, duration: Foundation.TimeInterval? = nil) -> Self
  public func repeated(count: Foundation.TimeInterval) -> Self
  public func repeated(count: Swift.Int) -> Self
  public func repeatingForever() -> Self
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public class AnimationPlaybackController : Swift.Hashable {
  @_Concurrency.MainActor @preconcurrency public var __identifier: RealityFoundation.__AnimationPlaybackTokenRef {
    get
  }
  @_Concurrency.MainActor @preconcurrency weak public var entity: RealityFoundation.Entity? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var isPaused: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var isComplete: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public static func == (lhs: RealityFoundation.AnimationPlaybackController, rhs: RealityFoundation.AnimationPlaybackController) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func hash(into hasher: inout Swift.Hasher)
  @_Concurrency.MainActor @preconcurrency public func pause()
  @_Concurrency.MainActor @preconcurrency public func resume()
  @_Concurrency.MainActor @preconcurrency public func stop()
  @objc deinit
  nonisolated public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.AnimationPlaybackController {
  @_Concurrency.MainActor @preconcurrency public var isValid: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var isPlaying: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var isStopped: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var speed: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var time: Foundation.TimeInterval {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var blendFactor: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var duration: Foundation.TimeInterval {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var clock: CoreMedia.CMClockOrTimebase {
    get
    set
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AnimationPlaybackController {
  @_Concurrency.MainActor @preconcurrency public func stop(blendOutDuration: Foundation.TimeInterval)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  @preconcurrency @_Concurrency.MainActor public struct ComponentSet {
    @_Concurrency.MainActor @preconcurrency public subscript<T>(componentType: T.Type) -> T? where T : RealityFoundation.Component {
      get
      set
      _modify
    }
    @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public subscript(componentType: any RealityFoundation.Component.Type) -> (any RealityFoundation.Component)? {
      get
      set
      _modify
    }
    @_Concurrency.MainActor @preconcurrency public func set<T>(_ component: T) where T : RealityFoundation.Component
    @_Concurrency.MainActor @preconcurrency public func set(_ components: [any RealityFoundation.Component])
    @_Concurrency.MainActor @preconcurrency public func has(_ componentType: any RealityFoundation.Component.Type) -> Swift.Bool
    @_Concurrency.MainActor @preconcurrency public func remove(_ componentType: any RealityFoundation.Component.Type)
    @_Concurrency.MainActor @preconcurrency public func removeAll()
    @_Concurrency.MainActor @preconcurrency public var count: Swift.Int {
      get
    }
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityLookupTable {
  public init()
  public func entity(for uuid: Foundation.UUID) -> RealityFoundation.Entity?
  @preconcurrency @_Concurrency.MainActor public func uuid(for entity: RealityFoundation.Entity) -> Foundation.UUID?
  @discardableResult
  public func updateEntity(_ entity: RealityFoundation.Entity?, for uuid: Foundation.UUID) -> RealityFoundation.Entity?
  public func removeAllEntities()
  @preconcurrency @_Concurrency.MainActor public func entity(name: Swift.String) -> RealityFoundation.Entity?
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor open class Entity : RealityFoundation.HasHierarchy, RealityFoundation.HasSynchronization, RealityFoundation.HasTransform, Swift.Sendable {
  @_Concurrency.MainActor @preconcurrency public var __coreEntity: RealityFoundation.__EntityRef {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var components: RealityFoundation.Entity.ComponentSet {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var scene: RealityFoundation.Scene? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var name: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var __boundingBox: RealityFoundation.__AABBRef {
    get
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  @_Concurrency.MainActor @preconcurrency public func __findAssetDependencies(_ closure: (RealityFoundation.__AssetRef) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var isActive: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var isAnchored: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var isEnabledInHierarchy: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public static var __disableUpdateInteractionEntities: [RealityFoundation.Entity]?
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  @_Concurrency.MainActor @preconcurrency open var __accessibilityElements: [Any]? {
    get
  }
  @_Concurrency.MainActor @preconcurrency required public init()
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal init(_coreEntity: RealityFoundation.__EntityRef)
  @_Concurrency.MainActor @preconcurrency public static func __testInit() -> RealityFoundation.Entity
  @objc deinit
  @_Concurrency.MainActor @preconcurrency open func didClone(from source: RealityFoundation.Entity)
  @_Concurrency.MainActor @preconcurrency public func findEntity(named name: Swift.String) -> RealityFoundation.Entity?
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity : Swift.Hashable {
  nonisolated public func hash(into hasher: inout Swift.Hasher)
  nonisolated public static func == (lhs: RealityFoundation.Entity, rhs: RealityFoundation.Entity) -> Swift.Bool
  nonisolated open var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity : Swift.Identifiable {
  nonisolated public var id: Swift.UInt64 {
    get
  }
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias ID = Swift.UInt64
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreEntity: RealityFoundation.__EntityRef) -> RealityFoundation.Entity
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  @_Concurrency.MainActor @preconcurrency public func clone(recursive: Swift.Bool) -> Self
  @_Concurrency.MainActor @preconcurrency public func __clone(recursive: Swift.Bool, remapInteractionIdentifiers: Swift.Bool) -> Self
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity : RealityFoundation.EventSource {
}
extension RealityFoundation.Entity {
  @available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  public enum ForwardDirection {
    case negativeZ
    case positiveZ
    public static func == (a: RealityFoundation.Entity.ForwardDirection, b: RealityFoundation.Entity.ForwardDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityCollisionTrigger : RealityFoundation.__RKEntityTrigger {
  public var targetEntity: RealityFoundation.Entity?
  public init(targetEntity: RealityFoundation.Entity?, collidingEntities: [RealityFoundation.Entity] = [], tags: [Swift.String])
  override public func matches(with trigger: RealityFoundation.__RKEntityTrigger) -> Swift.Bool
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> RealityFoundation.__RKEntityTrigger?
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKWaitAction : RealityFoundation.__RKEntityAction {
  public init(duration: Swift.Float, block: @escaping () -> Swift.Void = { })
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public var description: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public class __ARReferenceProvider : RealityFoundation.__ARReferenceProviding {
  @available(*, deprecated, message: "use the \"instance(for assetService: __REAssetService)\" instead")
  public static var shared: RealityFoundation.__ARReferenceProvider {
    get
  }
  public static func instance(for assetService: any RealityFoundation.__REAssetService) -> RealityFoundation.__ARReferenceProvider
  public func supportsGroup(named group: Swift.String) -> Swift.Bool
  @objc deinit
}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
public struct DynamicLightShadowComponent : RealityFoundation.Component {
  public var castsShadow: Swift.Bool
  public init(castsShadow: Swift.Bool)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKVisibilityShowPopAnimation : RealityFoundation.__RKVisibilityBaseAnimation {
  @objc deinit
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.MeshResource {
  public struct GenerateTextOptions : Swift.Sendable {
    public var containerFrame: CoreFoundation.CGRect?
    public init()
  }
  public struct ShapeExtrusionOptions : Swift.Sendable {
    public enum CurveStrokeResolution : Swift.Sendable {
      case uniformSegmentsPerSpan(segmentCount: Swift.Int)
    }
    public enum ChamferMode : Swift.Sendable {
      case front
      case back
      case both
      public static func == (a: RealityFoundation.MeshResource.ShapeExtrusionOptions.ChamferMode, b: RealityFoundation.MeshResource.ShapeExtrusionOptions.ChamferMode) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct MaterialAssignment : Swift.Sendable {
      public init(assignAll all: Swift.UInt32)
      public init(front: Swift.UInt32 = 0, back: Swift.UInt32 = 0, extrusion: Swift.UInt32 = 0, frontChamfer: Swift.UInt32 = 0, backChamfer: Swift.UInt32 = 0)
    }
    public enum ExtrusionMethod : Swift.Sendable {
      case linear(depth: Swift.Float)
      case tracePositions([Swift.SIMD3<Swift.Float>])
      case traceTransforms([simd.simd_float4x4])
    }
    public init()
    public var extrusionMethod: RealityFoundation.MeshResource.ShapeExtrusionOptions.ExtrusionMethod
    public var chamferRadius: Swift.Float
    public var boundaryResolution: RealityFoundation.MeshResource.ShapeExtrusionOptions.CurveStrokeResolution
    public var chamferResolution: RealityFoundation.MeshResource.ShapeExtrusionOptions.CurveStrokeResolution
    public var chamferMode: RealityFoundation.MeshResource.ShapeExtrusionOptions.ChamferMode
    public var materialAssignment: RealityFoundation.MeshResource.ShapeExtrusionOptions.MaterialAssignment
  }
  @_Concurrency.MainActor @preconcurrency convenience public init(extruding string: Foundation.AttributedString, textOptions: RealityFoundation.MeshResource.GenerateTextOptions = GenerateTextOptions(), extrusionOptions: RealityFoundation.MeshResource.ShapeExtrusionOptions = ShapeExtrusionOptions()) throws
  nonisolated convenience public init(extruding string: Foundation.AttributedString, textOptions: RealityFoundation.MeshResource.GenerateTextOptions = GenerateTextOptions(), extrusionOptions: RealityFoundation.MeshResource.ShapeExtrusionOptions = ShapeExtrusionOptions()) async throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public protocol HasPerspectiveCamera : RealityFoundation.HasTransform {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasPerspectiveCamera {
  @_Concurrency.MainActor @preconcurrency public var camera: RealityFoundation.PerspectiveCameraComponent {
    get
    set
  }
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEmphasisBaseAnimation {
  @objc deinit
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
@available(visionOS, unavailable)
public enum CustomMaterialError : Swift.Error {
  case geometryModifierFunctionNotFound
  case surfaceShaderFunctionNotFound
  case defaultSurfaceShaderForMaterialNotFound
  public static func == (a: RealityFoundation.CustomMaterialError, b: RealityFoundation.CustomMaterialError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public protocol MaterialFunction {
  var name: Swift.String { get set }
  var library: any Metal.MTLLibrary { get set }
  @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  @available(visionOS, unavailable)
  var constantValues: Metal.MTLFunctionConstantValues { get set }
  var __linkSPI: Swift.Bool { get }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
@available(visionOS, unavailable)
public struct CustomMaterial : RealityFoundation.Material {
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct GeometryModifier : RealityFoundation.MaterialFunction {
    public var name: Swift.String
    public var library: any Metal.MTLLibrary {
      get
      set
    }
    public init(named name: Swift.String, in library: any Metal.MTLLibrary)
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct SurfaceShader : RealityFoundation.MaterialFunction {
    public var name: Swift.String
    public var library: any Metal.MTLLibrary {
      get
      set
    }
    public init(named name: Swift.String, in library: any Metal.MTLLibrary)
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public enum LightingModel : Swift.Hashable, Swift.Sendable {
    case lit
    case unlit
    case clearcoat
    public static func == (a: RealityFoundation.CustomMaterial.LightingModel, b: RealityFoundation.CustomMaterial.LightingModel) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var __resource: RealityFoundation.__MaterialResource
  public var __parameterBlock: RealityFoundation.__RKMaterialParameterBlock
  public var __requiresUnmanagedVideoComponent: Swift.Bool {
    get
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public init(surfaceShader: RealityFoundation.CustomMaterial.SurfaceShader, geometryModifier: RealityFoundation.CustomMaterial.GeometryModifier? = nil, lightingModel: RealityFoundation.CustomMaterial.LightingModel) throws
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public init(from material: any RealityFoundation.Material, surfaceShader: RealityFoundation.CustomMaterial.SurfaceShader, geometryModifier: RealityFoundation.CustomMaterial.GeometryModifier? = nil) throws
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public init(from material: any RealityFoundation.Material, geometryModifier: RealityFoundation.CustomMaterial.GeometryModifier) throws
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct Custom {
    public var value: Swift.SIMD4<Swift.Float>
    public static let __valueKey: Swift.String
    public static let __textureKey: Swift.String
    public var texture: RealityFoundation.CustomMaterial.Texture?
    public init(value: Swift.SIMD4<Swift.Float> = .init(repeating: 0), texture: RealityFoundation.CustomMaterial.Texture? = nil)
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var lightingModel: RealityFoundation.CustomMaterial.LightingModel {
    get
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var baseColor: RealityFoundation.CustomMaterial.BaseColor {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var metallic: RealityFoundation.CustomMaterial.Metallic {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var roughness: RealityFoundation.CustomMaterial.Roughness {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var emissiveColor: RealityFoundation.CustomMaterial.EmissiveColor {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var specular: RealityFoundation.CustomMaterial.Specular {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var opacityThreshold: Swift.Float? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var faceCulling: RealityFoundation.CustomMaterial.FaceCulling {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var blending: RealityFoundation.CustomMaterial.Blending {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var normal: RealityFoundation.CustomMaterial.Normal {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var ambientOcclusion: RealityFoundation.CustomMaterial.AmbientOcclusion {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var clearcoat: RealityFoundation.CustomMaterial.Clearcoat {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var clearcoatRoughness: RealityFoundation.CustomMaterial.ClearcoatRoughness {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var textureCoordinateTransform: RealityFoundation.CustomMaterial.TextureCoordinateTransform {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var secondaryTextureCoordinateTransform: RealityFoundation.CustomMaterial.TextureCoordinateTransform {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var custom: RealityFoundation.CustomMaterial.Custom {
    get
    set
  }
  @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  @available(visionOS, unavailable)
  public var triangleFillMode: RealityFoundation.CustomMaterial.TriangleFillMode {
    get
    set
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
@available(visionOS, unavailable)
extension RealityFoundation.CustomMaterial {
  public var writesDepth: Swift.Bool {
    get
    set
  }
  public var readsDepth: Swift.Bool {
    get
    set
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
@available(visionOS, unavailable)
extension RealityFoundation.CustomMaterial {
  public var clearcoatNormal: RealityFoundation.CustomMaterial.ClearcoatNormal {
    get
    set
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
@available(visionOS, unavailable)
extension RealityFoundation.CustomMaterial.GeometryModifier : Swift.Equatable, Swift.Hashable, @unchecked Swift.Sendable {
  public static func == (lhs: RealityFoundation.CustomMaterial.GeometryModifier, rhs: RealityFoundation.CustomMaterial.GeometryModifier) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
@available(visionOS, unavailable)
extension RealityFoundation.CustomMaterial.SurfaceShader : Swift.Equatable, Swift.Hashable, @unchecked Swift.Sendable {
  public static func == (lhs: RealityFoundation.CustomMaterial.SurfaceShader, rhs: RealityFoundation.CustomMaterial.SurfaceShader) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct ParticleEmitterComponent : RealityFoundation.Component, Swift.Codable {
  public enum EmitterShape : Swift.Codable, Swift.Equatable, Swift.Hashable {
    case point
    case plane
    case box
    case sphere
    case cone
    case cylinder
    case torus
    public static func == (a: RealityFoundation.ParticleEmitterComponent.EmitterShape, b: RealityFoundation.ParticleEmitterComponent.EmitterShape) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum BirthLocation : Swift.Codable, Swift.Equatable, Swift.Hashable {
    case surface
    case volume
    case vertices(count: Swift.SIMD3<Swift.UInt>)
    public static func == (a: RealityFoundation.ParticleEmitterComponent.BirthLocation, b: RealityFoundation.ParticleEmitterComponent.BirthLocation) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum BirthDirection : Swift.Codable, Swift.Equatable, Swift.Hashable {
    case world
    case local
    case normal
    public static func == (a: RealityFoundation.ParticleEmitterComponent.BirthDirection, b: RealityFoundation.ParticleEmitterComponent.BirthDirection) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum SpawnOccasion : Swift.Codable, Swift.Equatable, Swift.Hashable {
    case onBirth
    case onUpdate
    case onDeath
    public static func == (a: RealityFoundation.ParticleEmitterComponent.SpawnOccasion, b: RealityFoundation.ParticleEmitterComponent.SpawnOccasion) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum SimulationSpace : Swift.Codable {
    case local
    case global
    public static func == (a: RealityFoundation.ParticleEmitterComponent.SimulationSpace, b: RealityFoundation.ParticleEmitterComponent.SimulationSpace) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum SimulationState : Swift.Codable {
    case play
    case pause
    case stop
    public static func == (a: RealityFoundation.ParticleEmitterComponent.SimulationState, b: RealityFoundation.ParticleEmitterComponent.SimulationState) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public init()
  public var emitterShape: RealityFoundation.ParticleEmitterComponent.EmitterShape
  public var birthLocation: RealityFoundation.ParticleEmitterComponent.BirthLocation
  public var birthDirection: RealityFoundation.ParticleEmitterComponent.BirthDirection
  public var emitterShapeSize: Swift.SIMD3<Swift.Float>
  public var speed: Swift.Float
  public var speedVariation: Swift.Float
  public var emissionDirection: Swift.SIMD3<Swift.Float>
  public var radialAmount: Swift.Float
  public var torusInnerRadius: Swift.Float
  public var spawnOccasion: RealityFoundation.ParticleEmitterComponent.SpawnOccasion
  public var spawnVelocityFactor: Swift.Float
  public var spawnSpreadFactor: Swift.Float
  public var spawnSpreadFactorVariation: Swift.Float
  public var spawnInheritsParentColor: Swift.Bool
  public var simulationState: RealityFoundation.ParticleEmitterComponent.SimulationState
  public var particlesInheritTransform: Swift.Bool
  public var fieldSimulationSpace: RealityFoundation.ParticleEmitterComponent.SimulationSpace
  public mutating func restart()
  public var isEmitting: Swift.Bool
  public mutating func burst()
  public var burstCount: Swift.Int
  public var burstCountVariation: Swift.Int
  public var mainEmitter: RealityFoundation.ParticleEmitterComponent.ParticleEmitter
  public var spawnedEmitter: RealityFoundation.ParticleEmitterComponent.ParticleEmitter? {
    get
    set
  }
  public struct ParticleEmitter {
    public enum BillboardMode : Swift.Codable, Swift.Equatable, Swift.Hashable {
      case billboard
      case billboardYAligned
      case free(axis: Swift.SIMD3<Swift.Float>, variation: Swift.Float)
      public static func == (a: RealityFoundation.ParticleEmitterComponent.ParticleEmitter.BillboardMode, b: RealityFoundation.ParticleEmitterComponent.ParticleEmitter.BillboardMode) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public enum OpacityCurve : Swift.Codable, Swift.Equatable, Swift.Hashable {
      case linearFadeOut
      case linearFadeIn
      case gradualFadeInOut
      case quickFadeInOut
      case easeFadeIn
      case easeFadeOut
      case constant
      public static func == (a: RealityFoundation.ParticleEmitterComponent.ParticleEmitter.OpacityCurve, b: RealityFoundation.ParticleEmitterComponent.ParticleEmitter.OpacityCurve) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public enum SortOrder : Swift.Codable, Swift.Equatable, Swift.Hashable {
      case increasingDepth
      case decreasingDepth
      case increasingID
      case decreasingID
      case increasingAge
      case decreasingAge
      case unsorted
      public static func == (a: RealityFoundation.ParticleEmitterComponent.ParticleEmitter.SortOrder, b: RealityFoundation.ParticleEmitterComponent.ParticleEmitter.SortOrder) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public enum BlendMode : Swift.Codable, Swift.Equatable, Swift.Hashable {
      case alpha
      case opaque
      case additive
      public static func == (a: RealityFoundation.ParticleEmitterComponent.ParticleEmitter.BlendMode, b: RealityFoundation.ParticleEmitterComponent.ParticleEmitter.BlendMode) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct ImageSequence : Swift.Codable, Swift.Equatable, Swift.Hashable {
      public var rowCount: Swift.Int
      public var columnCount: Swift.Int
      public var initialFrame: Swift.Int
      public var initialFrameVariation: Swift.Int
      public var frameRate: Swift.Float
      public var frameRateVariation: Swift.Float
      public var animationMode: RealityFoundation.ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode
      public enum AnimationRepeatMode : Swift.Codable, Swift.Equatable, Swift.Hashable {
        case playOnce
        case looping
        case autoReverse
        public static func == (a: RealityFoundation.ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode, b: RealityFoundation.ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode) -> Swift.Bool
        public func encode(to encoder: any Swift.Encoder) throws
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
        public init(from decoder: any Swift.Decoder) throws
      }
      public init()
      public static func == (a: RealityFoundation.ParticleEmitterComponent.ParticleEmitter.ImageSequence, b: RealityFoundation.ParticleEmitterComponent.ParticleEmitter.ImageSequence) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public var birthRate: Swift.Float
    public var birthRateVariation: Swift.Float
    public var dampingFactor: Swift.Float
    public var acceleration: Swift.SIMD3<Swift.Float>
    public var spreadingAngle: Swift.Float
    public var size: Swift.Float
    public var sizeVariation: Swift.Float
    public var billboardMode: RealityFoundation.ParticleEmitterComponent.ParticleEmitter.BillboardMode
    public var mass: Swift.Float
    public var massVariation: Swift.Float
    public var lifeSpan: Swift.Double
    public var lifeSpanVariation: Swift.Double
    public var angle: Swift.Float
    public var angleVariation: Swift.Float
    public var angularSpeed: Swift.Float
    public var angularSpeedVariation: Swift.Float
    public var opacityCurve: RealityFoundation.ParticleEmitterComponent.ParticleEmitter.OpacityCurve
    public var sizeMultiplierAtEndOfLifespan: Swift.Float
    public var sizeMultiplierAtEndOfLifespanPower: Swift.Float
    public var colorEvolutionPower: Swift.Float
    public var noiseStrength: Swift.Float
    public var noiseScale: Swift.Float
    public var noiseAnimationSpeed: Swift.Float
    public var attractionStrength: Swift.Float
    public var attractionCenter: Swift.SIMD3<Swift.Float>
    public var vortexStrength: Swift.Float
    public var vortexDirection: Swift.SIMD3<Swift.Float>
    public var isLightingEnabled: Swift.Bool
    public var stretchFactor: Swift.Float
    public var sortOrder: RealityFoundation.ParticleEmitterComponent.ParticleEmitter.SortOrder
    public var blendMode: RealityFoundation.ParticleEmitterComponent.ParticleEmitter.BlendMode
    public var image: RealityFoundation.TextureResource?
    public var imageSequence: RealityFoundation.ParticleEmitterComponent.ParticleEmitter.ImageSequence?
    public init()
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.ParticleEmitterComponent {
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.ParticleEmitterComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.ParticleEmitterComponent.ParticleEmitter : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityCustomAction : RealityFoundation.__RKEntityAction {
  public struct RKEntityCustomActionNotification {
    public static let name: Foundation.NSNotification.Name
    public static let sceneKey: Swift.String
    public static let identifierKey: Swift.String
    public static let entityKey: Swift.String
    public static let customArgumentsKey: Swift.String
  }
  public var handler: ((RealityFoundation.Entity?) -> Swift.Void)?
  final public let identifier: Swift.String
  final public let customArguments: [Swift.String : Swift.String]
  public var customArgumentsBlock: ((RealityFoundation.Entity?, [Swift.String : Swift.String]?) -> Swift.Void)?
  public init(targetEntity: RealityFoundation.Entity?, actionIdentifier: Swift.String, handler: ((RealityFoundation.Entity?) -> Swift.Void)? = nil, customArguments: [Swift.String : Swift.String]? = [:], customArgumentsBlock: ((RealityFoundation.Entity?, [Swift.String : Swift.String]?) -> Swift.Void)? = nil)
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEmphasisFloatAnimation : RealityFoundation.__RKEmphasisBaseAnimation {
  @objc deinit
}
@available(visionOS 1.0, macOS 15.0, macCatalyst 18.0, iOS 18.0, *)
extension RealityFoundation.Scene {
  @_Concurrency.MainActor @preconcurrency public var timebase: CoreMedia.CMTimebase {
    get
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public enum ForceEffectBounds {
  case sphere(radius: Swift.Double)
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct SpatialForceFalloff {
  public init(bounds: RealityFoundation.ForceEffectBounds, rate: Swift.Double = 1.0, distanceOffset: Swift.Double = 0)
  public var distanceOffset: Swift.Double
  public var bounds: RealityFoundation.ForceEffectBounds
  public var rate: Swift.Double
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct TimedForceFalloff {
  public init(duration: Foundation.TimeInterval, rate: Swift.Double = 1.0)
  public var duration: Foundation.TimeInterval
  public var rate: Swift.Double
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public enum ForceMode : Swift.Codable, Swift.Equatable {
  case force
  case acceleration
  case impulse
  case velocity
  public static func == (a: RealityFoundation.ForceMode, b: RealityFoundation.ForceMode) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public protocol ForceEffectProtocol {
  var parameterTypes: RealityFoundation.PhysicsBodyParameterTypes { get }
  var forceMode: RealityFoundation.ForceMode { get }
  func update(parameters: inout RealityFoundation.ForceEffectParameters)
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.ForceEffectProtocol {
  public var parameterTypes: RealityFoundation.PhysicsBodyParameterTypes {
    get
  }
  public func update(parameters: inout RealityFoundation.ForceEffectParameters)
  @preconcurrency @_Concurrency.MainActor public static func register(_ updateHandler: (@_Concurrency.MainActor (inout RealityFoundation.ForceEffectEvent<Self>) -> Swift.Void)? = nil)
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.ForceEffectProtocol where Self : Swift.Decodable, Self : Swift.Encodable {
  @preconcurrency @_Concurrency.MainActor public static func register(_ updateHandler: (@_Concurrency.MainActor (inout RealityFoundation.ForceEffectEvent<Self>) -> Swift.Void)? = nil)
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public protocol ForceEffectBase {
  associatedtype ForceEffectType : RealityFoundation.ForceEffectProtocol
  var effect: Self.ForceEffectType { get }
  var spatialFalloff: RealityFoundation.SpatialForceFalloff? { get }
  var timedFalloff: RealityFoundation.TimedForceFalloff? { get }
  var position: Swift.SIMD3<Swift.Float> { get }
  var orientation: simd.simd_quatf { get }
  var strengthScale: Swift.Float { get }
  var mask: RealityFoundation.CollisionGroup { get }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct ForceEffect<ForceEffectType> : RealityFoundation.ForceEffectBase where ForceEffectType : RealityFoundation.ForceEffectProtocol {
  public init(effect: ForceEffectType, strengthScale: Swift.Double = 1.0, spatialFalloff: RealityFoundation.SpatialForceFalloff? = nil, timedFalloff: RealityFoundation.TimedForceFalloff? = nil, position: Swift.SIMD3<Swift.Float> = SIMD3<Float>(0, 0, 0), orientation: simd.simd_quatf = simd_quaternion(0, 0, 0, 1), mask: RealityFoundation.CollisionGroup = .all)
  public var effect: ForceEffectType
  public var spatialFalloff: RealityFoundation.SpatialForceFalloff?
  public var timedFalloff: RealityFoundation.TimedForceFalloff?
  public var position: Swift.SIMD3<Swift.Float>
  public var orientation: simd.simd_quatf
  public var strengthScale: Swift.Float
  public var mask: RealityFoundation.CollisionGroup
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct PhysicsBodyParameterTypes : Swift.Codable, Swift.OptionSet {
  public static let position: RealityFoundation.PhysicsBodyParameterTypes
  public static let orientation: RealityFoundation.PhysicsBodyParameterTypes
  public static let velocity: RealityFoundation.PhysicsBodyParameterTypes
  public static let angularVelocity: RealityFoundation.PhysicsBodyParameterTypes
  public static let distance: RealityFoundation.PhysicsBodyParameterTypes
  public static let mass: RealityFoundation.PhysicsBodyParameterTypes
  public static let inertiaTensor: RealityFoundation.PhysicsBodyParameterTypes
  public let rawValue: Swift.UInt32
  public init(rawValue: Swift.UInt32)
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias ArrayLiteralElement = RealityFoundation.PhysicsBodyParameterTypes
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias Element = RealityFoundation.PhysicsBodyParameterTypes
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias RawValue = Swift.UInt32
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct UnsafeForceEffectBuffer<T> : Swift.Sequence {
  public subscript(index: Swift.Int) -> T {
    get
  }
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> T?
    @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias Element = T
  }
  public func makeIterator() -> RealityFoundation.UnsafeForceEffectBuffer<T>.Iterator
  public var count: Swift.Int {
    get
  }
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias Element = T
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct ForceEffectParameters {
  public let entity: RealityFoundation.Entity
  public let physicsBodyCount: Swift.Int
  public let fixedDeltaTime: Foundation.TimeInterval
  public let elapsedTime: Foundation.TimeInterval
  public let positions: RealityFoundation.UnsafeForceEffectBuffer<Swift.SIMD3<Swift.Float>>?
  public let orientations: RealityFoundation.UnsafeForceEffectBuffer<simd.simd_quatf>?
  public let velocities: RealityFoundation.UnsafeForceEffectBuffer<Swift.SIMD3<Swift.Float>>?
  public let angularVelocities: RealityFoundation.UnsafeForceEffectBuffer<Swift.SIMD3<Swift.Float>>?
  public let distances: RealityFoundation.UnsafeForceEffectBuffer<Swift.Float>?
  public let masses: RealityFoundation.UnsafeForceEffectBuffer<Swift.Float>?
  public let inertiaTensors: RealityFoundation.UnsafeForceEffectBuffer<simd.simd_float3x3>?
  public func setForce(_ force: Swift.SIMD3<Swift.Float>, index: Swift.Int)
  public func setTorque(_ torque: Swift.SIMD3<Swift.Float>, index: Swift.Int)
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct ForceEffectEvent<ForceEffectType> where ForceEffectType : RealityFoundation.ForceEffectProtocol {
  public var effect: ForceEffectType
  public var parameters: RealityFoundation.ForceEffectParameters
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct ForceEffectComponent : RealityFoundation.Component {
  public var effects: [any RealityFoundation.ForceEffectBase]
  public init(effects: [any RealityFoundation.ForceEffectBase], simulationState: RealityFoundation.ForceEffectComponent.SimulationState = .start)
  public init(effect: any RealityFoundation.ForceEffectBase)
  public enum SimulationState {
    case start
    case pause
    case resume
    public static func == (a: RealityFoundation.ForceEffectComponent.SimulationState, b: RealityFoundation.ForceEffectComponent.SimulationState) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var simulationState: RealityFoundation.ForceEffectComponent.SimulationState?
  @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.ForceEffectComponent
  @_Concurrency.MainActor @preconcurrency public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct ConstantForceEffect : RealityFoundation.ForceEffectProtocol, Swift.Codable {
  public init(strength: Swift.Double, direction: Swift.SIMD3<Swift.Float>)
  public func update(parameters: inout RealityFoundation.ForceEffectParameters)
  public let strength: Swift.Float
  public let direction: Swift.SIMD3<Swift.Float>
  public var parameterTypes: RealityFoundation.PhysicsBodyParameterTypes {
    get
  }
  public var forceMode: RealityFoundation.ForceMode
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct ConstantRadialForceEffect : RealityFoundation.ForceEffectProtocol, Swift.Codable {
  public init(strength: Swift.Double)
  public func update(parameters: inout RealityFoundation.ForceEffectParameters)
  public let strength: Swift.Float
  public var parameterTypes: RealityFoundation.PhysicsBodyParameterTypes {
    get
  }
  public var forceMode: RealityFoundation.ForceMode
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct VortexForceEffect : RealityFoundation.ForceEffectProtocol, Swift.Codable {
  public init(strength: Swift.Double, axis: Swift.SIMD3<Swift.Float>)
  public func update(parameters: inout RealityFoundation.ForceEffectParameters)
  public let strength: Swift.Float
  public let axis: Swift.SIMD3<Swift.Float>
  public var parameterTypes: RealityFoundation.PhysicsBodyParameterTypes {
    get
  }
  public var forceMode: RealityFoundation.ForceMode
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct DragForceEffect : RealityFoundation.ForceEffectProtocol, Swift.Codable {
  public init(strength: Swift.Double)
  public func update(parameters: inout RealityFoundation.ForceEffectParameters)
  public let strength: Swift.Float
  public var parameterTypes: RealityFoundation.PhysicsBodyParameterTypes {
    get
  }
  public var forceMode: RealityFoundation.ForceMode
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct TurbulenceForceEffect : RealityFoundation.ForceEffectProtocol, Swift.Codable {
  public init(strength: Swift.Double, smoothness: Swift.Double, speed: Swift.Double)
  public func update(parameters: inout RealityFoundation.ForceEffectParameters)
  public let strength: Swift.Float
  public let smoothness: Swift.Float
  public let speed: Swift.Float
  public var parameterTypes: RealityFoundation.PhysicsBodyParameterTypes {
    get
  }
  public var forceMode: RealityFoundation.ForceMode
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct RadialForceEffect : RealityFoundation.ForceEffectProtocol, Swift.Codable {
  public init(strength: Swift.Double, restDistance: Swift.Double)
  public func update(parameters: inout RealityFoundation.ForceEffectParameters)
  public let strength: Swift.Float
  public let restDistance: Swift.Float
  public var parameterTypes: RealityFoundation.PhysicsBodyParameterTypes {
    get
  }
  public var forceMode: RealityFoundation.ForceMode
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct MaterialParameters {
  public struct Texture {
    public struct Sampler {
      public init()
      public init(_ v: Metal.MTLSamplerDescriptor)
      public mutating func modify<R>(_ closure: (Metal.MTLSamplerDescriptor) throws -> R) rethrows -> R
      public func access<R>(_ closure: (Metal.MTLSamplerDescriptor) throws -> R) rethrows -> R
    }
    public var resource: RealityFoundation.TextureResource
    public var sampler: RealityFoundation.MaterialParameters.Texture.Sampler {
      get
      set
    }
    public var uvIndex: Swift.Int
    @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
    public var swizzle: Metal.MTLTextureSwizzleChannels
    public init(_ resource: RealityFoundation.TextureResource, sampler: RealityFoundation.MaterialParameters.Texture.Sampler)
    public init(_ resource: RealityFoundation.TextureResource)
  }
  @available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  public struct Handle {
  }
  @available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  public enum Value {
    @available(visionOS 2.0, *)
    case texture(RealityFoundation.MaterialParameters.Texture)
    case textureResource(RealityFoundation.TextureResource)
    case float(Swift.Float)
    case simd2Float(Swift.SIMD2<Swift.Float>)
    case simd3Float(Swift.SIMD3<Swift.Float>)
    case simd4Float(Swift.SIMD4<Swift.Float>)
    case color(CoreGraphics.CGColor)
    case float2x2(simd.float2x2)
    case float3x3(simd.float3x3)
    case float4x4(simd.float4x4)
    case bool(Swift.Bool)
    case int(Swift.Int32)
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.MaterialParameters.Value : Swift.Equatable {
  public static func == (a: RealityFoundation.MaterialParameters.Value, b: RealityFoundation.MaterialParameters.Value) -> Swift.Bool
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.MaterialParameters.Texture : Swift.Equatable {
  public static func == (lhs: RealityFoundation.MaterialParameters.Texture, rhs: RealityFoundation.MaterialParameters.Texture) -> Swift.Bool
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.MaterialParameters.Texture.Sampler : Swift.Equatable {
  public static func == (a: RealityFoundation.MaterialParameters.Texture.Sampler, b: RealityFoundation.MaterialParameters.Texture.Sampler) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public class PhysicsMaterialResource : RealityFoundation.Resource {
  @_Concurrency.MainActor @preconcurrency public static let `default`: RealityFoundation.PhysicsMaterialResource
  @_Concurrency.MainActor @preconcurrency public var __staticFriction: Swift.Float {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var __dynamicFriction: Swift.Float {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var __restitution: Swift.Float {
    get
  }
  @objc deinit
  @_Concurrency.MainActor @preconcurrency public static func generate(friction: Swift.Float = 0.8, restitution: Swift.Float = 0.8) -> RealityFoundation.PhysicsMaterialResource
  @available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
  @_Concurrency.MainActor @preconcurrency public static func generate(staticFriction: Swift.Float, dynamicFriction: Swift.Float, restitution: Swift.Float) -> RealityFoundation.PhysicsMaterialResource
}
@available(iOS 18.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
public struct CameraControls : Swift.Hashable, Swift.Sendable {
  public static var none: RealityFoundation.CameraControls {
    get
  }
  public static var tilt: RealityFoundation.CameraControls {
    get
  }
  public static var pan: RealityFoundation.CameraControls {
    get
  }
  public static var orbit: RealityFoundation.CameraControls {
    get
  }
  public static var dolly: RealityFoundation.CameraControls {
    get
  }
  public static func == (a: RealityFoundation.CameraControls, b: RealityFoundation.CameraControls) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct GeometricPinsComponent : RealityFoundation.Component {
  public init()
  public var pins: Swift.Set<RealityFoundation.GeometricPin> {
    get
  }
  public subscript(name: Swift.String) -> RealityFoundation.GeometricPin? {
    get
  }
  @discardableResult
  public mutating func removePin(named name: Swift.String) -> RealityFoundation.GeometricPin?
  public mutating func set(pin: RealityFoundation.GeometricPin)
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.GeometricPinsComponent {
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.GeometricPinsComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@available(visionOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 15.0, renamed: "AudioFileResource.load(named:in:configuration:)")
@available(macCatalyst, introduced: 13, deprecated: 18.0, renamed: "AudioFileResource.load(named:in:configuration:)")
@available(iOS, introduced: 13, deprecated: 18.0, renamed: "AudioFileResource.load(named:in:configuration:)")
extension RealityFoundation.AudioFileResource {
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public static func load(named name: Swift.String, in bundle: Foundation.Bundle? = nil, inputMode: RealityFoundation.AudioResource.InputMode = .spatial, loadingStrategy: RealityFoundation.AudioFileResource.LoadingStrategy = .preload, shouldLoop: Swift.Bool = false) throws -> RealityFoundation.AudioFileResource
}
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@available(visionOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 15.0, renamed: "AudioFileResource.load(contentsOf:withName:configuration:)")
@available(macCatalyst, introduced: 13, deprecated: 18.0, renamed: "AudioFileResource.load(contentsOf:withName:configuration:)")
@available(iOS, introduced: 13, deprecated: 18.0, renamed: "AudioFileResource.load(contentsOf:withName:configuration:)")
extension RealityFoundation.AudioFileResource {
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public static func load(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil, inputMode: RealityFoundation.AudioResource.InputMode = .spatial, loadingStrategy: RealityFoundation.AudioFileResource.LoadingStrategy = .preload, shouldLoop: Swift.Bool = false) throws -> RealityFoundation.AudioFileResource
}
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@available(visionOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 15.0, renamed: "AudioFileResource.init(named:in:configuration:)")
@available(macCatalyst, introduced: 13, deprecated: 18.0, renamed: "AudioFileResource.init(named:in:configuration:)")
@available(iOS, introduced: 13, deprecated: 18.0, renamed: "AudioFileResource.init(named:in:configuration:)")
extension RealityFoundation.AudioFileResource {
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public static func loadAsync(named name: Swift.String, in bundle: Foundation.Bundle? = nil, inputMode: RealityFoundation.AudioResource.InputMode = .spatial, loadingStrategy: RealityFoundation.AudioFileResource.LoadingStrategy = .preload, shouldLoop: Swift.Bool = false) -> RealityFoundation.LoadRequest<RealityFoundation.AudioFileResource>
}
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@available(visionOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 15.0, renamed: "AudioFileResource.init(contentsOf:withName:configuration:)")
@available(macCatalyst, introduced: 13, deprecated: 18.0, renamed: "AudioFileResource.init(contentsOf:withName:configuration:)")
@available(iOS, introduced: 13, deprecated: 18.0, renamed: "AudioFileResource.init(contentsOf:withName:configuration:)")
extension RealityFoundation.AudioFileResource {
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public static func loadAsync(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil, inputMode: RealityFoundation.AudioResource.InputMode = .spatial, loadingStrategy: RealityFoundation.AudioFileResource.LoadingStrategy = .preload, shouldLoop: Swift.Bool = false) -> RealityFoundation.LoadRequest<RealityFoundation.AudioFileResource>
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public protocol HasSpotLight : RealityFoundation.HasTransform {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasSpotLight {
  @_Concurrency.MainActor @preconcurrency public var light: RealityFoundation.SpotLightComponent {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var shadow: RealityFoundation.SpotLightComponent.Shadow? {
    get
    set
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct VideoPlayerComponent : RealityFoundation.Component {
  @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 1.0, *)
  public var desiredViewingMode: RealityFoundation.VideoPlaybackController.ViewingMode {
    get
    set
  }
  @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 1.0, *)
  public var viewingMode: RealityFoundation.VideoPlaybackController.ViewingMode? {
    get
  }
  @available(visionOS 2.0, *)
  @available(macOS, unavailable)
  @available(iOS, unavailable)
  @available(macCatalyst, unavailable)
  public enum ImmersiveViewingMode {
    case portal
    case full
    public static func == (a: RealityFoundation.VideoPlayerComponent.ImmersiveViewingMode, b: RealityFoundation.VideoPlayerComponent.ImmersiveViewingMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(visionOS 2.0, *)
  @available(macOS, unavailable)
  @available(iOS, unavailable)
  @available(macCatalyst, unavailable)
  public var desiredImmersiveViewingMode: RealityFoundation.VideoPlayerComponent.ImmersiveViewingMode {
    get
    set
  }
  @available(visionOS 2.0, *)
  @available(macOS, unavailable)
  @available(iOS, unavailable)
  @available(macCatalyst, unavailable)
  public var immersiveViewingMode: RealityFoundation.VideoPlayerComponent.ImmersiveViewingMode? {
    get
  }
  public var playerScreenSize: Swift.SIMD2<Swift.Float> {
    get
  }
  public var screenVideoDimension: Swift.SIMD2<Swift.Float> {
    get
  }
  @available(visionOS 1.0, *)
  @available(macOS, unavailable)
  @available(iOS, unavailable)
  public var isPassthroughTintingEnabled: Swift.Bool {
    get
    set
  }
  public var avPlayer: AVFoundation.AVPlayer? {
    get
  }
  public init(avPlayer: AVFoundation.AVPlayer)
  @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.VideoPlayerComponent
  @_Concurrency.MainActor @preconcurrency public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.VideoPlayerComponent {
  public var videoRenderer: AVFoundation.AVSampleBufferVideoRenderer? {
    get
  }
  public init(videoRenderer: AVFoundation.AVSampleBufferVideoRenderer)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEmphasisBounceAnimation : RealityFoundation.__RKEmphasisBaseAnimation {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEmphasisJiggleAnimation : RealityFoundation.__RKEmphasisBaseAnimation {
  @objc deinit
}
@available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  @_Concurrency.MainActor @preconcurrency public var isAccessibilityElement: Swift.Bool {
    get
    set
  }
  @available(visionOS, deprecated: 1.0, renamed: "accessibilityLabelKey")
  @available(macOS, deprecated: 14.0, renamed: "accessibilityLabelKey")
  @available(macCatalyst, deprecated: 17.0, renamed: "accessibilityLabelKey")
  @available(iOS, deprecated: 17.0, renamed: "accessibilityLabelKey")
  @_Concurrency.MainActor @preconcurrency public var accessibilityLabel: Swift.String? {
    get
    set
  }
  @available(visionOS, deprecated: 1.0, renamed: "accessibilityCustomContent")
  @available(macOS, deprecated: 14.0, renamed: "accessibilityCustomContent")
  @available(macCatalyst, deprecated: 17.0, renamed: "accessibilityCustomContent")
  @available(iOS, deprecated: 17.0, renamed: "accessibilityCustomContent")
  @_Concurrency.MainActor @preconcurrency public var accessibilityDescription: Swift.String? {
    get
    set
  }
}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  @_Concurrency.MainActor @preconcurrency public var __isAccessibilityRoot: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var __isAccessibilityEnabled: Swift.Bool {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  @_Concurrency.MainActor @preconcurrency public var __accessibilityIdentifier: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var __accessibilityLabel: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var __accessibilityDescription: Swift.String? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  @_Concurrency.MainActor @preconcurrency public var __accessibilityCustomContent: [(Swift.String, Swift.String, Swift.UInt)] {
    get
    set
  }
}
@available(macOS 14.0, iOS 17.0, macCatalyst 17.0, *)
public struct AccessibilityComponent : RealityFoundation.Component {
  public struct CustomContent : Swift.Equatable {
    public var label: Foundation.LocalizedStringResource
    public var value: Foundation.LocalizedStringResource
    public var importance: Accessibility.AXCustomContent.Importance
    public init(label: Foundation.LocalizedStringResource, value: Foundation.LocalizedStringResource, importance: Accessibility.AXCustomContent.Importance)
    public static func == (a: RealityFoundation.AccessibilityComponent.CustomContent, b: RealityFoundation.AccessibilityComponent.CustomContent) -> Swift.Bool
  }
  public struct SupportedActions : Swift.OptionSet {
    public let rawValue: Swift.Int
    public static let activate: RealityFoundation.AccessibilityComponent.SupportedActions
    public static let increment: RealityFoundation.AccessibilityComponent.SupportedActions
    public static let decrement: RealityFoundation.AccessibilityComponent.SupportedActions
    public init(rawValue: Swift.Int)
    @available(iOS 17.0, macOS 14.0, macCatalyst 17.0, *)
    public typealias ArrayLiteralElement = RealityFoundation.AccessibilityComponent.SupportedActions
    @available(iOS 17.0, macOS 14.0, macCatalyst 17.0, *)
    public typealias Element = RealityFoundation.AccessibilityComponent.SupportedActions
    @available(iOS 17.0, macOS 14.0, macCatalyst 17.0, *)
    public typealias RawValue = Swift.Int
  }
  @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.AccessibilityComponent
  @_Concurrency.MainActor @preconcurrency public func __toCore(_ component: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
  public var isAccessibilityElement: Swift.Bool
  public var label: Foundation.LocalizedStringResource?
  public var value: Foundation.LocalizedStringResource?
  public var customContent: [RealityFoundation.AccessibilityComponent.CustomContent]
  public var systemActions: RealityFoundation.AccessibilityComponent.SupportedActions
  public var customActions: [Foundation.LocalizedStringResource]
  public init()
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AudioResource {
  public struct Calibration {
    public static func relative(dBSPL: RealityFoundation.Audio.Decibel) -> RealityFoundation.AudioResource.Calibration
    public static func absolute(dBSPL: RealityFoundation.Audio.Decibel) -> RealityFoundation.AudioResource.Calibration
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AudioResource.Calibration : Swift.Equatable, Swift.Hashable, Swift.Sendable {
  public static func == (a: RealityFoundation.AudioResource.Calibration, b: RealityFoundation.AudioResource.Calibration) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.ShaderGraphMaterial {
  public enum LoadError : Foundation.LocalizedError {
    case invalidTypeFound
    case materialNameNotFound
    case invalidURL
    case resourceShareFailed
    public static func == (a: RealityFoundation.ShaderGraphMaterial.LoadError, b: RealityFoundation.ShaderGraphMaterial.LoadError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(named name: Swift.String, from data: Foundation.Data) async throws
  public init(named name: Swift.String, from file: Swift.String, in bundle: Foundation.Bundle? = nil) async throws
  public init(named name: Swift.String, from url: Foundation.URL) async throws
  public init(materialXLabel: Swift.String, data: Foundation.Data) async throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  @available(*, noasync, message: "Synchronous Entity loading APIs block the main actor and should not be used in async contexts.  Use init(...) async instead")
  @_Concurrency.MainActor @preconcurrency public static func load(named name: Swift.String, in bundle: Foundation.Bundle? = nil) throws -> RealityFoundation.Entity
  @available(macOS, introduced: 10.15, deprecated: 15.0, renamed: "init(named:in:)")
  @available(iOS, introduced: 13.0, deprecated: 18.0, renamed: "init(named:in:)")
  @available(macCatalyst, introduced: 13.0, deprecated: 18.0, renamed: "init(named:in:)")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, renamed: "init(named:in:)")
  @_Concurrency.MainActor @preconcurrency public static func loadAsync(named name: Swift.String, in bundle: Foundation.Bundle? = nil) -> RealityFoundation.LoadRequest<RealityFoundation.Entity>
  @_Concurrency.MainActor @preconcurrency public static func __loadAsync(named name: Swift.String, in bundle: Foundation.Bundle?, generateDecimatedMesh: Swift.Bool) -> RealityFoundation.LoadRequest<RealityFoundation.Entity>
  @_Concurrency.MainActor @preconcurrency public static func __loadAsync(named name: Swift.String, in bundle: Foundation.Bundle?, options: RealityFoundation.Entity.__LoadOptions, asyncOptions: RealityFoundation.Entity.__AsyncLoadOptions) -> RealityFoundation.LoadRequest<RealityFoundation.Entity>
  @available(*, noasync, message: "Synchronous Entity loading APIs block the main actor and should not be used in async contexts.  Use init(...) async instead")
  @_Concurrency.MainActor @preconcurrency public static func load(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil) throws -> RealityFoundation.Entity
  public struct __LoadOptions {
    public var downsamplingStrategy: (any RealityFoundation.__DownsamplingStrategy)?
    public var realityPerformanceReport: RealityFoundation.__REArchivalStats?
    public var generateDecimatedMesh: Swift.Bool
    public init(downsamplingStrategy: (any RealityFoundation.__DownsamplingStrategy)? = nil, realityPerformanceReport: RealityFoundation.__REArchivalStats? = nil)
  }
  public struct __AsyncLoadOptions {
    @available(*, deprecated, renamed: "resourceSharingScheduling", message: "Use enum-based API instead")
    public var loadOnResourceSharingClients: Swift.Bool {
      get
      set(value)
    }
    @available(*, deprecated, renamed: "resourceSharingScheduling", message: "Use enum-based API instead")
    public var waitForResourceSharingClients: Swift.Bool {
      get
      set(value)
    }
    public var resourceSharingScheduling: RealityFoundation.__AssetLoadRequest.ResourceSharingSchedulingRequirement
    public init(loadOnResourceSharingClients: Swift.Bool = false, waitForResourceSharingClients: Swift.Bool = false) throws
    @available(*, deprecated, renamed: "init(resourceSharingScheduling:)", message: "Use enum-based API instead")
    public init(preloadAndWaitForResourceSharingClients: Swift.Bool)
    public init(resourceSharingScheduling: RealityFoundation.__AssetLoadRequest.ResourceSharingSchedulingRequirement)
  }
  @_Concurrency.MainActor @preconcurrency public static func __load(contentsOf url: Foundation.URL, withName resourceName: Swift.String?, loadOptions: RealityFoundation.Entity.__LoadOptions) throws -> RealityFoundation.Entity
  @available(macOS, introduced: 10.15, deprecated: 15.0, renamed: "init(contentsOf:withName:)")
  @available(iOS, introduced: 13.0, deprecated: 18.0, renamed: "init(contentsOf:withName:)")
  @available(macCatalyst, introduced: 13.0, deprecated: 18.0, renamed: "init(contentsOf:withName:)")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, renamed: "init(contentsOf:withName:)")
  @_Concurrency.MainActor @preconcurrency public static func loadAsync(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil) -> RealityFoundation.LoadRequest<RealityFoundation.Entity>
  @_Concurrency.MainActor @preconcurrency public static func __loadAsync(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil, generateDecimatedMesh: Swift.Bool = false) -> RealityFoundation.LoadRequest<RealityFoundation.Entity>
  @_Concurrency.MainActor @preconcurrency public static func __loadAsync(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil, options: RealityFoundation.Entity.__LoadOptions, asyncOptions: RealityFoundation.Entity.__AsyncLoadOptions) -> RealityFoundation.LoadRequest<RealityFoundation.Entity>
  @available(*, noasync, message: "Synchronous Entity loading APIs block the main actor and should not be used in async contexts.  Use init(...) async instead")
  @_Concurrency.MainActor @preconcurrency public static func loadAnchor(named name: Swift.String, in bundle: Foundation.Bundle? = nil) throws -> RealityFoundation.AnchorEntity
  @available(macOS, introduced: 10.15, deprecated: 15.0, renamed: "AnchorEntity.init(named:in:)")
  @available(iOS, introduced: 13.0, deprecated: 18.0, renamed: "AnchorEntity.init(named:in:)")
  @available(macCatalyst, introduced: 13.0, deprecated: 18.0, renamed: "AnchorEntity.init(named:in:)")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, renamed: "AnchorEntity.init(named:in:)")
  @_Concurrency.MainActor @preconcurrency public static func loadAnchorAsync(named name: Swift.String, in bundle: Foundation.Bundle? = nil) -> RealityFoundation.LoadRequest<RealityFoundation.AnchorEntity>
  @available(*, noasync, message: "Synchronous Entity loading APIs block the main actor and should not be used in async contexts.  Use init(...) async instead")
  @_Concurrency.MainActor @preconcurrency public static func loadAnchor(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil) throws -> RealityFoundation.AnchorEntity
  @_Concurrency.MainActor @preconcurrency public static func __loadAnchor(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil, downsamplingStrategy: (any RealityFoundation.__DownsamplingStrategy)?) throws -> RealityFoundation.AnchorEntity
  @available(macOS, introduced: 10.15, deprecated: 15.0, renamed: "AnchorEntity.init(contentsOf:withName:)")
  @available(iOS, introduced: 13.0, deprecated: 18.0, renamed: "AnchorEntity.init(contentsOf:withName:)")
  @available(macCatalyst, introduced: 13.0, deprecated: 18.0, renamed: "AnchorEntity.init(contentsOf:withName:)")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, renamed: "AnchorEntity.init(contentsOf:withName:)")
  @_Concurrency.MainActor @preconcurrency public static func loadAnchorAsync(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil) -> RealityFoundation.LoadRequest<RealityFoundation.AnchorEntity>
  @_Concurrency.MainActor @preconcurrency public static func __loadAnchorAsync(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil, downsamplingStrategy: (any RealityFoundation.__DownsamplingStrategy)?) -> RealityFoundation.LoadRequest<RealityFoundation.AnchorEntity>
  @available(*, noasync, message: "Synchronous Entity loading APIs block the main actor and should not be used in async contexts.  Use init(...) async instead")
  @_Concurrency.MainActor @preconcurrency public static func loadModel(named name: Swift.String, in bundle: Foundation.Bundle? = nil) throws -> RealityFoundation.ModelEntity
  @available(macOS, introduced: 10.15, deprecated: 15.0, renamed: "ModelEntity.init(named:in:)")
  @available(iOS, introduced: 13.0, deprecated: 18.0, renamed: "ModelEntity.init(named:in:)")
  @available(macCatalyst, introduced: 13.0, deprecated: 18.0, renamed: "ModelEntity.init(named:in:)")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, renamed: "ModelEntity.init(named:in:)")
  @_Concurrency.MainActor @preconcurrency public static func loadModelAsync(named name: Swift.String, in bundle: Foundation.Bundle? = nil) -> RealityFoundation.LoadRequest<RealityFoundation.ModelEntity>
  @_Concurrency.MainActor @preconcurrency public static func __loadModelAsync(named name: Swift.String, in bundle: Foundation.Bundle? = nil, generateDecimatedMesh: Swift.Bool = false) -> RealityFoundation.LoadRequest<RealityFoundation.ModelEntity>
  @available(*, noasync, message: "Synchronous Entity loading APIs block the main actor and should not be used in async contexts.  Use init(...) async instead")
  @_Concurrency.MainActor @preconcurrency public static func loadModel(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil) throws -> RealityFoundation.ModelEntity
  @available(macOS, introduced: 10.15, deprecated: 15.0, renamed: "ModelEntity.init(contentsOf:withName:)")
  @available(iOS, introduced: 13.0, deprecated: 18.0, renamed: "ModelEntity.init(contentsOf:withName:)")
  @available(macCatalyst, introduced: 13.0, deprecated: 18.0, renamed: "ModelEntity.init(contentsOf:withName:)")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, renamed: "ModelEntity.init(contentsOf:withName:)")
  @_Concurrency.MainActor @preconcurrency public static func loadModelAsync(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil) -> RealityFoundation.LoadRequest<RealityFoundation.ModelEntity>
  @_Concurrency.MainActor @preconcurrency public static func __loadModelAsync(contentsOf url: Foundation.URL, withName resourceName: Swift.String?, generateDecimatedMesh: Swift.Bool) -> RealityFoundation.LoadRequest<RealityFoundation.ModelEntity>
  @_Concurrency.MainActor @preconcurrency public static func __loadAllAsync(contentsOf url: Foundation.URL) -> RealityFoundation.LoadRequest<[RealityFoundation.Entity]>
  @_Concurrency.MainActor @preconcurrency public static func __loadAllAsync(contentsOf url: Foundation.URL, downsamplingStrategy: (any RealityFoundation.__DownsamplingStrategy)?) -> RealityFoundation.LoadRequest<[RealityFoundation.Entity]>
  @_Concurrency.MainActor @preconcurrency public static func __remapIdentifiersAndInteractions(root: RealityFoundation.Entity)
}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__SceneResourceLoadResult {
  public func __makeEntity() throws -> RealityFoundation.Entity
  public func __makeAnchorEntity() throws -> RealityFoundation.Entity
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__SceneImportOperation {
  final public func makeEntity() throws -> RealityFoundation.Entity
  final public func makeModelEntity() throws -> RealityFoundation.ModelEntity
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.Entity {
  @_Concurrency.MainActor @preconcurrency convenience public init(named name: Swift.String, in bundle: Foundation.Bundle? = nil) async throws
  @_Concurrency.MainActor @preconcurrency convenience public init(contentsOf url: Foundation.URL, withName resourceName: Swift.String? = nil) async throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@frozen public struct BoundingBox : Swift.Hashable {
  public static let empty: RealityFoundation.BoundingBox
  public var min: Swift.SIMD3<Swift.Float> = .positiveInfinity
  public var max: Swift.SIMD3<Swift.Float> = .negativeInfinity
  public init()
  public init(min: Swift.SIMD3<Swift.Float>, max: Swift.SIMD3<Swift.Float>)
  @inlinable public static func == (lhs: RealityFoundation.BoundingBox, rhs: RealityFoundation.BoundingBox) -> Swift.Bool {
        return lhs.min == rhs.min && lhs.max == rhs.max
    }
  @inlinable public func hash(into hasher: inout Swift.Hasher) {
        hasher.combine(min)
        hasher.combine(max)
    }
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.BoundingBox {
  public var center: Swift.SIMD3<Swift.Float> {
    get
  }
  public var extents: Swift.SIMD3<Swift.Float> {
    get
  }
  public var boundingRadius: Swift.Float {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public func union(_ point: Swift.SIMD3<Swift.Float>) -> RealityFoundation.BoundingBox
  public mutating func formUnion(_ point: Swift.SIMD3<Swift.Float>)
  public func union(_ other: RealityFoundation.BoundingBox) -> RealityFoundation.BoundingBox
  public mutating func formUnion(_ other: RealityFoundation.BoundingBox)
  public func contains(_ point: Swift.SIMD3<Swift.Float>) -> Swift.Bool
  public func contains(_ boundingBox: RealityFoundation.BoundingBox) -> Swift.Bool
  public func intersects(_ boundingBox: RealityFoundation.BoundingBox) -> Swift.Bool
  public func transformed(by transform: simd.float4x4) -> RealityFoundation.BoundingBox
  public mutating func transform(by transform: simd.float4x4)
  public func distanceSquared(toPoint: Swift.SIMD3<Swift.Float>) -> Swift.Float
}
@available(iOS 18.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
public enum AntialiasingMode : Swift.Hashable, Swift.Sendable {
  case none
  case multisample4X
  public static func == (a: RealityFoundation.AntialiasingMode, b: RealityFoundation.AntialiasingMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor final public class __SceneResource {
  @objc deinit
  @_Concurrency.MainActor @preconcurrency final public var coreHandle: RealityFoundation.__AssetRef {
    get
  }
  @_Concurrency.MainActor @preconcurrency public static func fromCoreRetained(_ asset: RealityFoundation.__AssetRef) -> RealityFoundation.__SceneResource
  @_Concurrency.MainActor @preconcurrency public static func fromCoreUnretained(_ asset: RealityFoundation.__AssetRef) -> RealityFoundation.__SceneResource
  @preconcurrency @_Concurrency.MainActor final public func makeScene(named name: Swift.String) -> RealityFoundation.Scene?
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct PhysicallyBasedMaterial : RealityFoundation.Material {
  public var __resource: RealityFoundation.__MaterialResource
  public var __parameterBlock: RealityFoundation.__RKMaterialParameterBlock
  public init()
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var baseColor: RealityFoundation.PhysicallyBasedMaterial.BaseColor {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var metallic: RealityFoundation.PhysicallyBasedMaterial.Metallic {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var roughness: RealityFoundation.PhysicallyBasedMaterial.Roughness {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var emissiveColor: RealityFoundation.PhysicallyBasedMaterial.EmissiveColor {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var emissiveIntensity: Swift.Float {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var specular: RealityFoundation.PhysicallyBasedMaterial.Specular {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var clearcoat: RealityFoundation.PhysicallyBasedMaterial.Clearcoat {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var clearcoatRoughness: RealityFoundation.PhysicallyBasedMaterial.ClearcoatRoughness {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var opacityThreshold: Swift.Float? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var faceCulling: RealityFoundation.PhysicallyBasedMaterial.FaceCulling {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var blending: RealityFoundation.PhysicallyBasedMaterial.Blending {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var normal: RealityFoundation.PhysicallyBasedMaterial.Normal {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var ambientOcclusion: RealityFoundation.PhysicallyBasedMaterial.AmbientOcclusion {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var anisotropyLevel: RealityFoundation.PhysicallyBasedMaterial.AnisotropyLevel {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var anisotropyAngle: RealityFoundation.PhysicallyBasedMaterial.AnisotropyAngle {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var sheen: RealityFoundation.PhysicallyBasedMaterial.SheenColor? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var textureCoordinateTransform: RealityFoundation.PhysicallyBasedMaterial.TextureCoordinateTransform {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var secondaryTextureCoordinateTransform: RealityFoundation.PhysicallyBasedMaterial.TextureCoordinateTransform {
    get
    set
  }
  @available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  public var triangleFillMode: RealityFoundation.PhysicallyBasedMaterial.TriangleFillMode {
    get
    set
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.PhysicallyBasedMaterial {
  public var writesDepth: Swift.Bool {
    get
    set
  }
  public var readsDepth: Swift.Bool {
    get
    set
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.PhysicallyBasedMaterial {
  public var program: RealityFoundation.PhysicallyBasedMaterial.Program {
    get
    set
  }
  public init(program: RealityFoundation.PhysicallyBasedMaterial.Program)
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.PhysicallyBasedMaterial {
  public var clearcoatNormal: RealityFoundation.PhysicallyBasedMaterial.ClearcoatNormal {
    get
    set
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct EventSubscription {
  public func cancel()
  public func subscribe(to scene: RealityFoundation.Scene)
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public class ShapeResource : RealityFoundation.Resource, Swift.Hashable, Swift.Sendable {
  @available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  @_Concurrency.MainActor @preconcurrency public var bounds: RealityFoundation.BoundingBox {
    get
  }
  @objc deinit
  @_Concurrency.MainActor @preconcurrency public static func == (lhs: RealityFoundation.ShapeResource, rhs: RealityFoundation.ShapeResource) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func hash(into hasher: inout Swift.Hasher)
  nonisolated public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.ShapeResource {
  @_Concurrency.MainActor @preconcurrency public static func __makeShapeResource(_ shapes: [RealityFoundation.ShapeResource]) -> RealityFoundation.ShapeResource
  @_Concurrency.MainActor @preconcurrency public func offsetBy(rotation: simd.simd_quatf) -> RealityFoundation.ShapeResource
  @_Concurrency.MainActor @preconcurrency public func offsetBy(translation: Swift.SIMD3<Swift.Float>) -> RealityFoundation.ShapeResource
  @_Concurrency.MainActor @preconcurrency public func offsetBy(rotation: simd.simd_quatf = simd_quatf(ix: 0, iy: 0, iz: 0, r: 1), translation: Swift.SIMD3<Swift.Float> = SIMD3<Float>()) -> RealityFoundation.ShapeResource
  @_Concurrency.MainActor @preconcurrency public static func generateBox(size: Swift.SIMD3<Swift.Float>) -> RealityFoundation.ShapeResource
  @_Concurrency.MainActor @preconcurrency public static func generateBox(width: Swift.Float, height: Swift.Float, depth: Swift.Float) -> RealityFoundation.ShapeResource
  @_Concurrency.MainActor @preconcurrency public static func generateCapsule(height: Swift.Float, radius: Swift.Float) -> RealityFoundation.ShapeResource
  @_Concurrency.MainActor @preconcurrency public static func generateConvex(from points: [Swift.SIMD3<Swift.Float>]) -> RealityFoundation.ShapeResource
  @_Concurrency.MainActor @preconcurrency public static func generateConvex(from mesh: RealityFoundation.MeshResource) -> RealityFoundation.ShapeResource
  nonisolated public static func generateConvex(from mesh: RealityFoundation.MeshResource) async throws -> RealityFoundation.ShapeResource
  nonisolated public static func generateConvex(from points: [Swift.SIMD3<Swift.Float>]) async throws -> RealityFoundation.ShapeResource
  @_Concurrency.MainActor @preconcurrency public static func generateSphere(radius: Swift.Float) -> RealityFoundation.ShapeResource
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public enum ShapeResourceError : Foundation.LocalizedError {
  case staticMeshGenerationFailed
  case convexPolyhedronGenerationFailed
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (a: RealityFoundation.ShapeResourceError, b: RealityFoundation.ShapeResourceError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.ShapeResource {
  nonisolated public static func generateStaticMesh(positions: [Swift.SIMD3<Swift.Float>], faceIndices: [Swift.UInt16]) async throws -> RealityFoundation.ShapeResource
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.ShapeResource {
  @_Concurrency.MainActor @preconcurrency public static func generateStaticMesh(from mesh: RealityFoundation.MeshResource) async throws -> RealityFoundation.ShapeResource
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol __RKEntityInteractionService : AnyObject {
  var areInteractionsEnabled: Swift.Bool { get set }
  var customTriggerIdentifiers: [Swift.String] { get }
  var customActionIdentifiers: [Swift.String] { get }
  @discardableResult
  func performInteractions(matchingCustomTriggerWithIdentifier customTriggerIdentifier: Swift.String, customArguments: [Swift.String : Swift.String]?, overrides: [Swift.String : RealityFoundation.Entity]?) -> Swift.Bool
  func setCustomActionHandler(for identifier: Swift.String, handler: ((RealityFoundation.Entity?) -> Swift.Void)?)
  @discardableResult
  func __performInteractions(matchingCustomTriggerWithIdentifier customTriggerIdentifier: Swift.String, with customArguments: [Swift.String : Swift.String], on elements: [RealityFoundation.Entity]?) -> Swift.Bool
  func __setCustomPackageActionHandler(withIdentifier identifier: Swift.String, actionHandler: ((RealityFoundation.Entity?, [Swift.String : Swift.String]?) -> Swift.Void)?)
  var automaticallyInvokesStartTrigger: Swift.Bool { get set }
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityInteractionManager : RealityFoundation.__RKEntityInteractionService {
  public var areInteractionsEnabled: Swift.Bool
  public var interactionsDisabledForTests: Swift.Bool
  public var customTriggerIdentifiers: [Swift.String] {
    get
  }
  public var customActionIdentifiers: [Swift.String] {
    get
  }
  public var entitiesTargetedByATapTrigger: [RealityFoundation.Entity] {
    get
  }
  @discardableResult
  public func performInteractions(matchingCustomTriggerWithIdentifier customTriggerIdentifier: Swift.String, customArguments: [Swift.String : Swift.String]? = nil, overrides: [Swift.String : RealityFoundation.Entity]?) -> Swift.Bool
  public func setCustomActionHandler(for identifier: Swift.String, handler: ((RealityFoundation.Entity?) -> Swift.Void)?)
  @discardableResult
  public func __performInteractions(matchingCustomTriggerWithIdentifier customTriggerIdentifier: Swift.String, with customArguments: [Swift.String : Swift.String], on entities: [RealityFoundation.Entity]?) -> Swift.Bool
  public func __setCustomPackageActionHandler(withIdentifier identifier: Swift.String, actionHandler: ((RealityFoundation.Entity?, [Swift.String : Swift.String]?) -> Swift.Void)?)
  public var automaticallyInvokesStartTrigger: Swift.Bool {
    get
    set
  }
  @objc deinit
  public var __entityLookupTable: RealityFoundation.__RKEntityLookupTable
  public var __simulationSceneCoordinator: RealityFoundation.__RKSimulationSceneCoordinator
  public var __runtimeSceneCoordinator: RealityFoundation.__RKRuntimeSceneCoordinator
  public var __interactions: [RealityFoundation.__RKEntityInteraction] {
    get
  }
  public func __hasInteractionsForTrigger<T>(of objectType: T.Type) -> Swift.Bool where T : RealityFoundation.__RKEntityTrigger
  public var __actions: [RealityFoundation.__RKEntityAction] {
    get
  }
  public func __addInteraction(_ interaction: RealityFoundation.__RKEntityInteraction)
  public func __removeInteraction(_ interaction: RealityFoundation.__RKEntityInteraction)
  public func __removeAllInteractions()
  public func __cloneInteractions(fromEntity: RealityFoundation.Entity, toEntity: RealityFoundation.Entity)
  @discardableResult
  public func __performInteractions(matching trigger: RealityFoundation.__RKEntityTrigger, on entities: [RealityFoundation.Entity]? = nil) -> Swift.Bool
  public func action(for specification: RealityFoundation.__RKEntityActionSpecification) -> RealityFoundation.__RKEntityAction
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityInteraction {
  public static func interaction(for specification: RealityFoundation.__RKEntityInteractionSpecification, entityLookupTable: RealityFoundation.__RKEntityLookupTable) -> RealityFoundation.__RKEntityInteraction
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityTrigger {
  public static func trigger(for specification: RealityFoundation.__RKEntityTriggerSpecification, entityLookupTable: RealityFoundation.__RKEntityLookupTable) -> RealityFoundation.__RKEntityTrigger
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityAction {
  public static func action(for specification: RealityFoundation.__RKEntityActionSpecification, entityLookupTable: RealityFoundation.__RKEntityLookupTable) -> RealityFoundation.__RKEntityAction
}
extension RealityFoundation.Entity {
  @available(macOS 15.0, macCatalyst 18.0, iOS 18.0, visionOS 2.0, *)
  @_Concurrency.MainActor @preconcurrency public func applyTapForBehaviors() -> Swift.Bool
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct __AnyARKitObject {
  public init<T>(_ base: T)
  public func `as`<T>(type: T.Type) -> T
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
@_Concurrency.MainActor @preconcurrency public class AudioBufferResource : RealityFoundation.AudioResource {
  @available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  @_Concurrency.MainActor @preconcurrency final public let configuration: RealityFoundation.AudioBufferResource.Configuration
  @available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
  @_Concurrency.MainActor @preconcurrency public init(buffer: AVFAudio.AVAudioBuffer, configuration: RealityFoundation.AudioBufferResource.Configuration = .init()) throws
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "Use AudioBufferResource.init(buffer:configuration:) instead.")
  @available(macOS, deprecated: 15.0, message: "Use AudioBufferResource.init(buffer:configuration:) instead.")
  @available(macCatalyst, deprecated: 18.0, message: "Use AudioBufferResource.init(buffer:configuration:) instead.")
  @available(iOS, deprecated: 18.0, message: "Use AudioBufferResource.init(buffer:configuration:) instead.")
  @_Concurrency.MainActor @preconcurrency public var shouldLoop: Swift.Bool {
    get
  }
  @available(visionOS, unavailable, introduced: 1.0, message: "Use AudioBufferResource.init(buffer:configuration:) instead.")
  @available(macOS, introduced: 12, deprecated: 15.0, message: "Use AudioBufferResource.init(buffer:configuration:) instead.")
  @available(macCatalyst, introduced: 15, deprecated: 18.0, message: "Use AudioBufferResource.init(buffer:configuration:) instead.")
  @available(iOS, introduced: 15, deprecated: 18.0, message: "Use AudioBufferResource.init(buffer:configuration:) instead.")
  @_Concurrency.MainActor @preconcurrency public init(buffer: AVFAudio.AVAudioBuffer, inputMode: RealityFoundation.AudioResource.InputMode = .spatial, shouldLoop: Swift.Bool = false) throws
  @objc deinit
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AudioBufferResource : Swift.Hashable {
  @_Concurrency.MainActor @preconcurrency public func hash(into hasher: inout Swift.Hasher)
  nonisolated public var hashValue: Swift.Int {
    get
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AudioBufferResource {
  @_Concurrency.MainActor @preconcurrency public var duration: Swift.Duration {
    get
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct AmbientAudioComponent {
  public var gain: RealityFoundation.Audio.Decibel
  public init(gain: RealityFoundation.Audio.Decibel = .zero)
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.Entity {
  @_Concurrency.MainActor @preconcurrency public var ambientAudio: RealityFoundation.AmbientAudioComponent? {
    get
    set
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AmbientAudioComponent : RealityFoundation.Component {
  @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.AmbientAudioComponent
  @_Concurrency.MainActor @preconcurrency public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AmbientAudioComponent : Swift.Equatable, Swift.Hashable, Swift.Codable {
  public static func == (a: RealityFoundation.AmbientAudioComponent, b: RealityFoundation.AmbientAudioComponent) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
public struct SkeletalPoseSet {
  public typealias Element = RealityFoundation.SkeletalPose
  public init()
  public var `default`: RealityFoundation.SkeletalPoseSet.Element? {
    get
    set
  }
  public var count: Swift.Int {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public subscript(poseID: RealityFoundation.SkeletalPose.ID) -> RealityFoundation.SkeletalPoseSet.Element? {
    get
    set
  }
  public func contains(_ poseID: RealityFoundation.SkeletalPose.ID) -> Swift.Bool
  @discardableResult
  public mutating func set(_ newValue: RealityFoundation.SkeletalPoseSet.Element) -> RealityFoundation.SkeletalPoseSet.Element?
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.SkeletalPoseSet : Swift.Sequence {
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> RealityFoundation.SkeletalPoseSet.Element?
    @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias Element = RealityFoundation.SkeletalPoseSet.Element
  }
  public func makeIterator() -> RealityFoundation.SkeletalPoseSet.Iterator
}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
extension RealityFoundation.SkeletalPoseSet : Swift.Collection {
  public typealias Index = Swift.Int
  public var startIndex: RealityFoundation.SkeletalPoseSet.Index {
    get
  }
  public var endIndex: RealityFoundation.SkeletalPoseSet.Index {
    get
  }
  public func index(of poseID: RealityFoundation.SkeletalPose.ID) -> RealityFoundation.SkeletalPoseSet.Index?
  public subscript(index: RealityFoundation.SkeletalPoseSet.Index) -> RealityFoundation.SkeletalPoseSet.Element {
    get
    set
  }
  public func index(after: RealityFoundation.SkeletalPoseSet.Index) -> RealityFoundation.SkeletalPoseSet.Index
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias Indices = Swift.DefaultIndices<RealityFoundation.SkeletalPoseSet>
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias SubSequence = Swift.Slice<RealityFoundation.SkeletalPoseSet>
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum CollisionCastQueryType : Swift.Hashable {
  case nearest
  case all
  case any
  public static func == (a: RealityFoundation.CollisionCastQueryType, b: RealityFoundation.CollisionCastQueryType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct CollisionGroup : Swift.OptionSet {
  public let rawValue: Swift.UInt32
  public static let `default`: RealityFoundation.CollisionGroup
  @available(iOS 13.4, macCatalyst 13.4, *)
  public static let sceneUnderstanding: RealityFoundation.CollisionGroup
  public static let all: RealityFoundation.CollisionGroup
  public init(rawValue: Swift.UInt32)
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias ArrayLiteralElement = RealityFoundation.CollisionGroup
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias Element = RealityFoundation.CollisionGroup
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias RawValue = Swift.UInt32
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct CollisionFilter : Swift.Equatable {
  public static let `default`: RealityFoundation.CollisionFilter
  public static let sensor: RealityFoundation.CollisionFilter
  public var group: RealityFoundation.CollisionGroup
  public var mask: RealityFoundation.CollisionGroup
  public init(group: RealityFoundation.CollisionGroup, mask: RealityFoundation.CollisionGroup)
  public static func == (a: RealityFoundation.CollisionFilter, b: RealityFoundation.CollisionFilter) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct CollisionCastHit : Swift.Equatable {
  public var entity: RealityFoundation.Entity {
    get
  }
  public var position: Swift.SIMD3<Swift.Float> {
    get
  }
  public var normal: Swift.SIMD3<Swift.Float> {
    get
  }
  public var distance: Swift.Float {
    get
  }
  public static func == (a: RealityFoundation.CollisionCastHit, b: RealityFoundation.CollisionCastHit) -> Swift.Bool
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.CollisionCastHit {
  public struct TriangleHit : Swift.Equatable {
    public var faceIndex: Swift.Int {
      get
    }
    public var uv: Swift.SIMD2<Swift.Float> {
      get
    }
    public static func == (a: RealityFoundation.CollisionCastHit.TriangleHit, b: RealityFoundation.CollisionCastHit.TriangleHit) -> Swift.Bool
  }
  public var triangleHit: RealityFoundation.CollisionCastHit.TriangleHit? {
    get
  }
  public var shapeIndex: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Scene {
  @_Concurrency.MainActor @preconcurrency public func raycast(origin: Swift.SIMD3<Swift.Float>, direction: Swift.SIMD3<Swift.Float>, length: Swift.Float = 100, query: RealityFoundation.CollisionCastQueryType = .all, mask: RealityFoundation.CollisionGroup = .all, relativeTo referenceEntity: RealityFoundation.Entity? = nil) -> [RealityFoundation.CollisionCastHit]
  @_Concurrency.MainActor @preconcurrency public func raycast(from startPosition: Swift.SIMD3<Swift.Float>, to endPosition: Swift.SIMD3<Swift.Float>, query: RealityFoundation.CollisionCastQueryType = .all, mask: RealityFoundation.CollisionGroup = .all, relativeTo referenceEntity: RealityFoundation.Entity? = nil) -> [RealityFoundation.CollisionCastHit]
  @_Concurrency.MainActor @preconcurrency public func convexCast(convexShape: RealityFoundation.ShapeResource, fromPosition: Swift.SIMD3<Swift.Float>, fromOrientation: simd.simd_quatf, toPosition: Swift.SIMD3<Swift.Float>, toOrientation: simd.simd_quatf, query: RealityFoundation.CollisionCastQueryType = .all, mask: RealityFoundation.CollisionGroup = .all, relativeTo referenceEntity: RealityFoundation.Entity? = nil) -> [RealityFoundation.CollisionCastHit]
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AudioFileResource {
  @_Concurrency.MainActor @preconcurrency public static func load(contentsOf url: Foundation.URL, withName name: Swift.String? = nil, configuration: RealityFoundation.AudioFileResource.Configuration = .init()) throws -> RealityFoundation.AudioFileResource
  @_Concurrency.MainActor @preconcurrency public static func load(named name: Swift.String, in bundle: Foundation.Bundle? = nil, configuration: RealityFoundation.AudioFileResource.Configuration = .init()) throws -> RealityFoundation.AudioFileResource
  @_Concurrency.MainActor @preconcurrency public static func load(named name: Swift.String, from scene: Swift.String, in bundle: Foundation.Bundle? = nil) throws -> RealityFoundation.AudioFileResource
}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityInteractionSpecification : RealityFoundation.__USDEncodablePublic {
  public func encode(to encoder: RealityFoundation.__USDEncoder, at pathName: RealityFoundation.__USKObjectPathWrapper) throws -> RealityFoundation.__USKNodeWrapper
  @available(*, deprecated)
  public func encode(to encoder: RealityFoundation.__USDEncoder, at pathName: RealityFoundation.__USKObjectPathWrapper, sceneSpecifier: RealityFoundation.__USKNodeSpecifierTypeWrapper) throws -> RealityFoundation.__USKNodeWrapper
}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityTriggerSpecification : RealityFoundation.__USDEncodablePublic {
  public func encode(to encoder: RealityFoundation.__USDEncoder, at pathName: RealityFoundation.__USKObjectPathWrapper) throws -> RealityFoundation.__USKNodeWrapper
  @available(*, deprecated)
  public func encode(to encoder: RealityFoundation.__USDEncoder, at pathName: RealityFoundation.__USKObjectPathWrapper, sceneSpecifier: RealityFoundation.__USKNodeSpecifierTypeWrapper) throws -> RealityFoundation.__USKNodeWrapper
}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityActionSpecification : RealityFoundation.__USDEncodablePublic {
  public func encode(to encoder: RealityFoundation.__USDEncoder, at pathName: RealityFoundation.__USKObjectPathWrapper) throws -> RealityFoundation.__USKNodeWrapper
  @available(*, deprecated)
  public func encode(to encoder: RealityFoundation.__USDEncoder, at pathName: RealityFoundation.__USKObjectPathWrapper, sceneSpecifier: RealityFoundation.__USKNodeSpecifierTypeWrapper) throws -> RealityFoundation.__USKNodeWrapper
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public protocol AnimationStateProtocol {
  associatedtype ValueType : RealityFoundation.AnimatableData
  var defaultSource: Self.ValueType? { get }
  var defaultTarget: Self.ValueType? { get }
  var deltaTime: Foundation.TimeInterval { get }
  var evaluationTime: Foundation.TimeInterval { get }
  var normalizedTime: Foundation.TimeInterval { get }
  @discardableResult
  func storeAnimatedValue<ValueType>(_ value: ValueType) -> Swift.Bool
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct AnimationState<Value> : RealityFoundation.AnimationStateProtocol where Value : RealityFoundation.AnimatableData {
  public var defaultSource: Value? {
    get
  }
  public var defaultTarget: Value? {
    get
  }
  @discardableResult
  public func storeAnimatedValue<ValueType>(_ value: ValueType) -> Swift.Bool
  public let deltaTime: Foundation.TimeInterval
  public let evaluationTime: Foundation.TimeInterval
  public let normalizedTime: Foundation.TimeInterval
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias ValueType = Value
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.AnimationState where Value == RealityFoundation.JointTransforms {
  public var defaultSource: RealityFoundation.JointTransforms? {
    get
  }
  public func defaultSourceJoints(index: Swift.Int, count: Swift.Int, transforms: inout [RealityFoundation.Transform]) -> Swift.Bool
  public var defaultTarget: RealityFoundation.JointTransforms? {
    get
  }
  public func defaultTargetJoints(index: Swift.Int, count: Swift.Int, transforms: inout [RealityFoundation.Transform]) -> Swift.Bool
  @discardableResult
  public func storeAnimatedJoints(transforms: [RealityFoundation.Transform], jointIndex: Swift.Int) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RKEntitySpinDirectionType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case clockwise
  case counterclockwise
  public init?(rawValue: Swift.String)
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias AllCases = [RealityFoundation.__RKEntitySpinDirectionType]
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [RealityFoundation.__RKEntitySpinDirectionType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntitySpinAction : RealityFoundation.__RKEntityAction {
  public init(targetEntity: RealityFoundation.Entity?, duration: Swift.Float, iterations: Swift.Float = 1.0, direction: RealityFoundation.__RKEntitySpinDirectionType, axis: Swift.SIMD3<Swift.Float> = SIMD3<Float>(0,1,0))
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  @objc deinit
}
@available(visionOS 1.0, macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension RealityFoundation.Entity {
  @_alwaysEmitIntoClient @inline(__always) @_Concurrency.MainActor @preconcurrency convenience public init<each T>(components: repeat each T) where repeat each T : RealityFoundation.Component {
        self.init()
        repeat self.components.set(each components)
    }
  @_alwaysEmitIntoClient @inline(__always) @_Concurrency.MainActor @preconcurrency convenience public init(components: [any RealityFoundation.Component]) {
        self.init()
        self.components.set(components)
    }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct PerspectiveCameraComponent : RealityFoundation.Component, Swift.Equatable {
  public var near: Swift.Float
  public var far: Swift.Float
  public var fieldOfViewInDegrees: Swift.Float
  @available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
  public var fieldOfViewOrientation: RealityFoundation.CameraFieldOfViewOrientation
  public init(near: Swift.Float = 0.01, far: Swift.Float = .infinity, fieldOfViewInDegrees: Swift.Float = 60.0)
  @available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
  public init(near: Swift.Float = 0.01, far: Swift.Float = .infinity, fieldOfViewInDegrees: Swift.Float = 60.0, fieldOfViewOrientation: RealityFoundation.CameraFieldOfViewOrientation = .vertical)
  public static func == (a: RealityFoundation.PerspectiveCameraComponent, b: RealityFoundation.PerspectiveCameraComponent) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.PerspectiveCameraComponent {
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.PerspectiveCameraComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __EntityInfoComponent : RealityFoundation.Component, Swift.Codable {
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public static var __typeName: Swift.String {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @_Concurrency.MainActor @preconcurrency public static func __addIntrospectionData(_ builder: Swift.OpaquePointer?)
  public static func __free(to buffer: Swift.UnsafeMutableRawPointer, offset: Swift.Int)
  @available(macOS, deprecated: 15.0)
  @available(iOS, deprecated: 18.0)
  @available(visionOS, deprecated: 1.0)
  public static func __load(from buffer: Swift.UnsafeRawPointer, offset: Swift.Int) -> any RealityFoundation.Component
}
@_hasMissingDesignatedInitializers @available(iOS 17.0, macOS 12.0, macCatalyst 15.0, *)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public class PhotogrammetrySession {
  convenience public init(input: Foundation.URL, configuration: RealityFoundation.PhotogrammetrySession.Configuration = Configuration()) throws
  convenience public init<S>(input: S, configuration: RealityFoundation.PhotogrammetrySession.Configuration = Configuration()) throws where S : Swift.Sequence, S.Element == RealityFoundation.PhotogrammetrySample
  @available(macOS 14.0, iOS 17.0, macCatalyst 17.0, *)
  public struct Limits {
    public var maximumInputImageDimension: Swift.Int {
      get
    }
    public var maximumNumberOfInputImages: Swift.Int {
      get
    }
  }
  @available(macOS 14.0, iOS 17.0, macCatalyst 17.0, *)
  public static let limits: RealityFoundation.PhotogrammetrySession.Limits
  @available(macOS 14.0, iOS 17.0, macCatalyst 17.0, *)
  public enum Error : Swift.Error, Foundation.LocalizedError {
    case invalidImages(Foundation.URL)
    case invalidOutput(Foundation.URL)
    case insufficientStorage(requiredBytes: Swift.Int64)
    public var localizedDescription: Swift.String {
      get
    }
  }
  public struct Configuration : Swift.Equatable {
    public enum SampleOrdering {
      case unordered
      case sequential
      public static func == (a: RealityFoundation.PhotogrammetrySession.Configuration.SampleOrdering, b: RealityFoundation.PhotogrammetrySession.Configuration.SampleOrdering) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public enum FeatureSensitivity {
      case normal
      case high
      public static func == (a: RealityFoundation.PhotogrammetrySession.Configuration.FeatureSensitivity, b: RealityFoundation.PhotogrammetrySession.Configuration.FeatureSensitivity) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public var isObjectMaskingEnabled: Swift.Bool
    @available(macOS 14.0, macCatalyst 17.0, *)
    @available(iOS, unavailable)
    @available(visionOS, unavailable)
    public struct CustomDetailSpecification : Swift.Equatable {
      public var maximumPolygonCount: Swift.UInt
      public enum TextureDimension : Swift.UInt, Swift.Hashable {
        case oneK
        case twoK
        case fourK
        case eightK
        @available(macOS 15.0, macCatalyst 18.0, *)
        @available(iOS, unavailable)
        @available(visionOS, unavailable)
        case sixteenK
        public init?(rawValue: Swift.UInt)
        @available(macOS 14.0, macCatalyst 17.0, *)
        @available(iOS, unavailable, introduced: 17.0)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        @available(visionOS, unavailable)
        public typealias RawValue = Swift.UInt
        public var rawValue: Swift.UInt {
          get
        }
      }
      public var maximumTextureDimension: RealityFoundation.PhotogrammetrySession.Configuration.CustomDetailSpecification.TextureDimension
      public struct TextureMapOutputs : Swift.OptionSet, Swift.Equatable {
        public static let diffuseColor: RealityFoundation.PhotogrammetrySession.Configuration.CustomDetailSpecification.TextureMapOutputs
        public static let normal: RealityFoundation.PhotogrammetrySession.Configuration.CustomDetailSpecification.TextureMapOutputs
        public static let roughness: RealityFoundation.PhotogrammetrySession.Configuration.CustomDetailSpecification.TextureMapOutputs
        public static let displacement: RealityFoundation.PhotogrammetrySession.Configuration.CustomDetailSpecification.TextureMapOutputs
        public static let ambientOcclusion: RealityFoundation.PhotogrammetrySession.Configuration.CustomDetailSpecification.TextureMapOutputs
        public static let all: RealityFoundation.PhotogrammetrySession.Configuration.CustomDetailSpecification.TextureMapOutputs
        public let rawValue: Swift.UInt
        public init(rawValue: Swift.UInt)
        @available(macOS 14.0, macCatalyst 17.0, *)
        @available(iOS, unavailable, introduced: 17.0)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        @available(visionOS, unavailable)
        public typealias ArrayLiteralElement = RealityFoundation.PhotogrammetrySession.Configuration.CustomDetailSpecification.TextureMapOutputs
        @available(macOS 14.0, macCatalyst 17.0, *)
        @available(iOS, unavailable, introduced: 17.0)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        @available(visionOS, unavailable)
        public typealias Element = RealityFoundation.PhotogrammetrySession.Configuration.CustomDetailSpecification.TextureMapOutputs
        @available(macOS 14.0, macCatalyst 17.0, *)
        @available(iOS, unavailable, introduced: 17.0)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        @available(visionOS, unavailable)
        public typealias RawValue = Swift.UInt
      }
      public var outputTextureMaps: RealityFoundation.PhotogrammetrySession.Configuration.CustomDetailSpecification.TextureMapOutputs
      public enum TextureFormat : Swift.Equatable {
        case png
        case jpeg(compressionQuality: Swift.Float = 0.8)
        public static func == (a: RealityFoundation.PhotogrammetrySession.Configuration.CustomDetailSpecification.TextureFormat, b: RealityFoundation.PhotogrammetrySession.Configuration.CustomDetailSpecification.TextureFormat) -> Swift.Bool
      }
      public var textureFormat: RealityFoundation.PhotogrammetrySession.Configuration.CustomDetailSpecification.TextureFormat
      public init()
      public static func == (a: RealityFoundation.PhotogrammetrySession.Configuration.CustomDetailSpecification, b: RealityFoundation.PhotogrammetrySession.Configuration.CustomDetailSpecification) -> Swift.Bool
    }
    @available(macOS 14.0, macCatalyst 17.0, *)
    @available(iOS, unavailable)
    @available(visionOS, unavailable)
    public var customDetailSpecification: RealityFoundation.PhotogrammetrySession.Configuration.CustomDetailSpecification
    @available(macOS 15.0, macCatalyst 18.0, *)
    @available(iOS, unavailable)
    @available(visionOS, unavailable)
    public enum MeshPrimitive : Swift.Equatable {
      case triangle
      case quad
      public static func == (a: RealityFoundation.PhotogrammetrySession.Configuration.MeshPrimitive, b: RealityFoundation.PhotogrammetrySession.Configuration.MeshPrimitive) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @available(macOS 15.0, macCatalyst 18.0, *)
    @available(iOS, unavailable)
    @available(visionOS, unavailable)
    public var meshPrimitive: RealityFoundation.PhotogrammetrySession.Configuration.MeshPrimitive
    public var sampleOrdering: RealityFoundation.PhotogrammetrySession.Configuration.SampleOrdering
    public var featureSensitivity: RealityFoundation.PhotogrammetrySession.Configuration.FeatureSensitivity
    @available(macOS 14.0, iOS 17.0, macCatalyst 17.0, *)
    public var checkpointDirectory: Foundation.URL?
    @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
    @available(visionOS, unavailable)
    public var ignoreBoundingBox: Swift.Bool
    public init()
    @available(macOS 14.0, iOS 17.0, macCatalyst 17.0, *)
    public init(checkpointDirectory: Foundation.URL)
    public static func == (a: RealityFoundation.PhotogrammetrySession.Configuration, b: RealityFoundation.PhotogrammetrySession.Configuration) -> Swift.Bool
  }
  public enum Request : Swift.Hashable {
    case modelFile(url: Foundation.URL, detail: RealityFoundation.PhotogrammetrySession.Request.Detail = .reduced, geometry: RealityFoundation.PhotogrammetrySession.Request.Geometry? = nil)
    case modelEntity(detail: RealityFoundation.PhotogrammetrySession.Request.Detail = .reduced, geometry: RealityFoundation.PhotogrammetrySession.Request.Geometry? = nil)
    case bounds
    @available(iOS 17.0, macOS 13.0, macCatalyst 16.0, *)
    case pointCloud
    @available(macOS 14.0, iOS 17.0, macCatalyst 17.0, *)
    case poses
    public enum Detail : Swift.Int, Swift.Hashable {
      @available(macOS 12.0, macCatalyst 15.0, *)
      @available(iOS, unavailable)
      @available(visionOS, unavailable)
      case preview
      case reduced
      @available(macOS 12.0, macCatalyst 15.0, *)
      @available(iOS, unavailable)
      @available(visionOS, unavailable)
      case medium
      @available(macOS 12.0, macCatalyst 15.0, *)
      @available(iOS, unavailable)
      @available(visionOS, unavailable)
      case full
      @available(macOS 12.0, macCatalyst 15.0, *)
      @available(iOS, unavailable)
      @available(visionOS, unavailable)
      case raw
      @available(macOS 14.0, macCatalyst 17.0, *)
      @available(iOS, unavailable)
      @available(visionOS, unavailable)
      case custom
      public init?(rawValue: Swift.Int)
      @available(iOS 17.0, macOS 12.0, macCatalyst 15.0, *)
      @available(tvOS, unavailable)
      @available(watchOS, unavailable)
      @available(visionOS, unavailable)
      public typealias RawValue = Swift.Int
      public var rawValue: Swift.Int {
        get
      }
    }
    public struct Geometry : Swift.Hashable {
      @available(iOS 17.0, macOS 13.0, macCatalyst 16.0, *)
      public var orientedBounds: RealityFoundation.OrientedBoundingBox {
        get
        set
      }
      public var bounds: RealityFoundation.BoundingBox {
        get
        set
      }
      public var transform: RealityFoundation.Transform
      @available(iOS 17.0, macOS 13.0, macCatalyst 16.0, *)
      public init(orientedBounds: RealityFoundation.OrientedBoundingBox, transform: RealityFoundation.Transform = Transform.identity)
      public init(bounds: RealityFoundation.BoundingBox = BoundingBox.empty, transform: RealityFoundation.Transform = Transform.identity)
      public static func == (a: RealityFoundation.PhotogrammetrySession.Request.Geometry, b: RealityFoundation.PhotogrammetrySession.Request.Geometry) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public init(modelFile: Foundation.URL)
    public static func == (a: RealityFoundation.PhotogrammetrySession.Request, b: RealityFoundation.PhotogrammetrySession.Request) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Result {
    case modelFile(Foundation.URL)
    case modelEntity(RealityFoundation.ModelEntity)
    case bounds(RealityFoundation.BoundingBox)
    @available(iOS 17.0, macOS 13.0, macCatalyst 16.0, *)
    case pointCloud(RealityFoundation.PhotogrammetrySession.PointCloud)
    @available(macOS 14.0, iOS 17.0, macCatalyst 17.0, *)
    case poses(RealityFoundation.PhotogrammetrySession.Poses)
  }
  @available(macOS 14.0, iOS 17.0, macCatalyst 17.0, *)
  public struct Pose {
    public let translation: Swift.SIMD3<Swift.Float>
    public let rotation: simd.simd_quatf
    public var transform: RealityFoundation.Transform {
      get
    }
  }
  @available(macOS 14.0, iOS 17.0, macCatalyst 17.0, *)
  public struct Poses {
    public let posesBySample: [Swift.Int : RealityFoundation.PhotogrammetrySession.Pose]
    public var urlsBySample: [Swift.Int : Foundation.URL] {
      get
    }
  }
  @available(iOS 17.0, macOS 13.0, macCatalyst 16.0, *)
  public struct PointCloud {
    public struct Point {
      public let position: Swift.SIMD3<Swift.Float>
      public let color: Swift.SIMD4<Swift.UInt8>
    }
    public let points: [RealityFoundation.PhotogrammetrySession.PointCloud.Point]
  }
  public enum Output {
    case inputComplete
    case requestError(RealityFoundation.PhotogrammetrySession.Request, any Swift.Error)
    case requestComplete(RealityFoundation.PhotogrammetrySession.Request, RealityFoundation.PhotogrammetrySession.Result)
    case requestProgress(RealityFoundation.PhotogrammetrySession.Request, fractionComplete: Swift.Double)
    case processingComplete
    case processingCancelled
    case invalidSample(id: Swift.Int, reason: Swift.String)
    case skippedSample(id: Swift.Int)
    case automaticDownsampling
    @available(macOS 14.0, iOS 17.0, macCatalyst 17.0, *)
    case requestProgressInfo(RealityFoundation.PhotogrammetrySession.Request, RealityFoundation.PhotogrammetrySession.Output.ProgressInfo)
    @available(macOS 14.0, iOS 17.0, macCatalyst 17.0, *)
    public struct ProgressInfo {
      public let estimatedRemainingTime: Foundation.TimeInterval?
      public let processingStage: RealityFoundation.PhotogrammetrySession.Output.ProcessingStage?
    }
    @available(macOS 14.0, iOS 17.0, macCatalyst 17.0, *)
    public enum ProcessingStage {
      case preProcessing
      case imageAlignment
      case pointCloudGeneration
      case meshGeneration
      case textureMapping
      case optimization
      public static func == (a: RealityFoundation.PhotogrammetrySession.Output.ProcessingStage, b: RealityFoundation.PhotogrammetrySession.Output.ProcessingStage) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @available(macOS 14.0, iOS 17.0, macCatalyst 17.0, *)
    case stitchingIncomplete
    public var localizedDescription: Swift.String {
      get
    }
  }
  public struct Outputs : _Concurrency.AsyncSequence {
    public typealias Element = RealityFoundation.PhotogrammetrySession.Output
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      public mutating func next() async throws -> RealityFoundation.PhotogrammetrySession.Outputs.Element?
      @available(iOS 17.0, macOS 12.0, macCatalyst 15.0, *)
      @available(tvOS, unavailable)
      @available(watchOS, unavailable)
      @available(visionOS, unavailable)
      public typealias Element = RealityFoundation.PhotogrammetrySession.Outputs.Element
      @available(iOS 18.0, macOS 15.0, macCatalyst 15.0, *)
      @available(tvOS, unavailable, introduced: 18.0)
      @available(watchOS, unavailable, introduced: 11.0)
      @available(visionOS, unavailable, introduced: 2.0)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
    }
    public func makeAsyncIterator() -> RealityFoundation.PhotogrammetrySession.Outputs.Iterator
    @available(iOS 17.0, macOS 12.0, macCatalyst 15.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(visionOS, unavailable)
    public typealias AsyncIterator = RealityFoundation.PhotogrammetrySession.Outputs.Iterator
    @available(iOS 18.0, macOS 15.0, macCatalyst 15.0, *)
    @available(tvOS, unavailable, introduced: 18.0)
    @available(watchOS, unavailable, introduced: 11.0)
    @available(visionOS, unavailable, introduced: 2.0)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
  }
  public func process(requests: [RealityFoundation.PhotogrammetrySession.Request]) throws
  public func cancel()
  public var activeRequests: [RealityFoundation.PhotogrammetrySession.Request] {
    get
  }
  public var isProcessing: Swift.Bool {
    get
  }
  public var configuration: RealityFoundation.PhotogrammetrySession.Configuration {
    get
  }
  public var outputs: RealityFoundation.PhotogrammetrySession.Outputs {
    get
  }
  @available(iOS 17.0, macOS 13.0, macCatalyst 16.0, *)
  public static var isSupported: Swift.Bool {
    get
  }
  @objc deinit
}
@available(iOS 17.0, macOS 13.0, macCatalyst 16.0, *)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct OrientedBoundingBox : Swift.Hashable {
  public var orientation: simd.simd_quatf
  public var boundingBox: RealityFoundation.BoundingBox
  public init(orientation: simd.simd_quatf = simd_quatf(ix: 0, iy: 0, iz: 0, r: 1), boundingBox: RealityFoundation.BoundingBox = BoundingBox.empty)
  @inlinable public func hash(into hasher: inout Swift.Hasher) {
        hasher.combine(Transform(rotation: self.orientation))
        hasher.combine(self.boundingBox)
    }
  public static func == (a: RealityFoundation.OrientedBoundingBox, b: RealityFoundation.OrientedBoundingBox) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 14.0, iOS 17.0, macCatalyst 17.0, *)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension RealityFoundation.PhotogrammetrySession : Swift.Identifiable {
  public var id: Foundation.UUID {
    get
  }
  @available(iOS 17.0, macOS 14.0, macCatalyst 17.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias ID = Foundation.UUID
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct ShaderGraphMaterial : RealityFoundation.Material, Swift.Sendable {
  public enum Error : Foundation.LocalizedError {
    case incorrectTypeForParameterName
    case parameterNameNotFound
    public static func == (a: RealityFoundation.ShaderGraphMaterial.Error, b: RealityFoundation.ShaderGraphMaterial.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var __resource: RealityFoundation.__MaterialResource
  public var __parameterBlock: RealityFoundation.__RKMaterialParameterBlock
  public static func parameterHandle(name: Swift.String) -> RealityFoundation.MaterialParameters.Handle
  public mutating func setParameter(handle: RealityFoundation.MaterialParameters.Handle, value newValue: RealityFoundation.MaterialParameters.Value) throws
  public func getParameter(handle: RealityFoundation.MaterialParameters.Handle) -> RealityFoundation.MaterialParameters.Value?
  public mutating func setParameter(name: Swift.String, value newValue: RealityFoundation.MaterialParameters.Value) throws
  public func getParameter(name: Swift.String) -> RealityFoundation.MaterialParameters.Value?
  public var parameterNames: [Swift.String] {
    get
  }
  public typealias TriangleFillMode = RealityFoundation.MaterialParameterTypes.TriangleFillMode
  public var triangleFillMode: RealityFoundation.ShaderGraphMaterial.TriangleFillMode {
    get
    set
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.ShaderGraphMaterial {
  public typealias FaceCulling = RealityFoundation.MaterialParameterTypes.FaceCulling
  public var faceCulling: RealityFoundation.ShaderGraphMaterial.FaceCulling {
    get
    set
  }
  public var writesDepth: Swift.Bool {
    get
    set
  }
  public var readsDepth: Swift.Bool {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public protocol HasPointLight : RealityFoundation.HasTransform {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasPointLight {
  @_Concurrency.MainActor @preconcurrency public var light: RealityFoundation.PointLightComponent {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__REAssetBundle {
  @preconcurrency @_Concurrency.MainActor public static func __init(element: RealityFoundation.Entity, assetService: any RealityFoundation.__REAssetService) -> RealityFoundation.__REAssetBundle
  @_Concurrency.MainActor public static func __init(elements: [RealityFoundation.Entity], assetService: any RealityFoundation.__REAssetService) -> RealityFoundation.__REAssetBundle
  @preconcurrency @_Concurrency.MainActor public static func __init(realityScenes: [RealityFoundation.Scene], assetService: any RealityFoundation.__REAssetService) -> RealityFoundation.__REAssetBundle
  @available(*, deprecated, message: "use RERealityFileMountFileAtURL and pull same content from it")
  public static func loadAssetMap(url: Foundation.URL) throws -> RealityFoundation.__REAssetBundle.AssetMap
}
@available(macOS 13.0, iOS 16.0, macCatalyst 16.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 13.0)
@_originallyDefinedIn(module: "RealityKit", iOS 16.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 16.0)
extension RealityFoundation.__REAssetBundle.ExportOptions {
  public enum PlatformOS : Swift.RawRepresentable, Swift.Hashable, Swift.Sendable {
    case iOS
    case macOS
    case visionOS
    @available(*, deprecated, message: "will be removed please use visionOS")
    case xrOS
    case custom(_: Swift.String)
    @available(*, deprecated, message: "will be removed please use visionOS")
    case special1
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    @available(iOS 16.0, macOS 13.0, macCatalyst 16.0, *)
    public typealias RawValue = Swift.String
  }
  public enum PlatformRequirement {
    case none
    case deploymentTargetOS
    public static func == (a: RealityFoundation.__REAssetBundle.ExportOptions.PlatformRequirement, b: RealityFoundation.__REAssetBundle.ExportOptions.PlatformRequirement) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct DeploymentTarget {
    public let platform: RealityFoundation.__REAssetBundle.ExportOptions.PlatformOS
    public let version: (major: Swift.Int32, minor: Swift.Int32, patch: Swift.Int32)
    public let platformRequirement: RealityFoundation.__REAssetBundle.ExportOptions.PlatformRequirement
    public init(platform: RealityFoundation.__REAssetBundle.ExportOptions.PlatformOS, version: (major: Swift.Int32, minor: Swift.Int32, patch: Swift.Int32))
    public init?(platform: RealityFoundation.__REAssetBundle.ExportOptions.PlatformOS, version: (major: Swift.Int32, minor: Swift.Int32, patch: Swift.Int32), platformRequirement: RealityFoundation.__REAssetBundle.ExportOptions.PlatformRequirement)
  }
}
@_hasMissingDesignatedInitializers @_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@available(macOS, introduced: 10.15, deprecated: 15.0)
@available(iOS, introduced: 13.0, deprecated: 18.0)
@available(macCatalyst, introduced: 13.0, deprecated: 18.0)
@available(visionOS, introduced: 1.0, deprecated: 1.0)
public class LoadRequest<Output> : Combine.Publisher {
  public typealias Failure = Swift.Error
  public var result: Swift.Result<Output, any Swift.Error>? {
    get
  }
  public func subscribe<S>(_ subscriber: S) where Output == S.Input, S : Combine.Subscriber, S.Failure == any Swift.Error
  public func receive<S>(subscriber: S) where Output == S.Input, S : Combine.Subscriber, S.Failure == any Swift.Error
  @objc deinit
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public func && <Value>(left: RealityFoundation.QueryPredicate<Value>, right: RealityFoundation.QueryPredicate<Value>) -> RealityFoundation.QueryPredicate<Value>
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public func || <Value>(left: RealityFoundation.QueryPredicate<Value>, right: RealityFoundation.QueryPredicate<Value>) -> RealityFoundation.QueryPredicate<Value>
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
prefix public func ! <Value>(operand: RealityFoundation.QueryPredicate<Value>) -> RealityFoundation.QueryPredicate<Value>
@available(visionOS 2.0, iOS 18.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
final public class SpatialTrackingSession : Swift.Sendable {
  public struct Configuration {
    public struct AnchorCapability : Swift.Equatable, Swift.Hashable, Swift.Sendable {
      public static func == (a: RealityFoundation.SpatialTrackingSession.Configuration.AnchorCapability, b: RealityFoundation.SpatialTrackingSession.Configuration.AnchorCapability) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
  }
  public struct UnavailableCapabilities : Swift.Sendable {
    public init()
  }
  public init()
  @objc deinit
}
@available(visionOS 2.0, iOS 18.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
extension RealityFoundation.SpatialTrackingSession.Configuration.AnchorCapability {
  public static let world: RealityFoundation.SpatialTrackingSession.Configuration.AnchorCapability
  public static let plane: RealityFoundation.SpatialTrackingSession.Configuration.AnchorCapability
  public static let image: RealityFoundation.SpatialTrackingSession.Configuration.AnchorCapability
  public static let object: RealityFoundation.SpatialTrackingSession.Configuration.AnchorCapability
}
@available(visionOS 2.0, iOS 18.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
extension RealityFoundation.SpatialTrackingSession.UnavailableCapabilities {
  public var anchor: Swift.Set<RealityFoundation.SpatialTrackingSession.Configuration.AnchorCapability> {
    get
  }
}
@available(visionOS 2.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(iOS, unavailable)
extension RealityFoundation.SpatialTrackingSession.Configuration.AnchorCapability {
  public static let hand: RealityFoundation.SpatialTrackingSession.Configuration.AnchorCapability
}
@available(visionOS 2.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(iOS, unavailable)
extension RealityFoundation.SpatialTrackingSession.Configuration {
  @available(visionOS 2.0, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(iOS, unavailable)
  public init(tracking capabilities: Swift.Set<RealityFoundation.SpatialTrackingSession.Configuration.AnchorCapability>)
}
@available(visionOS 2.0, iOS 18.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
extension RealityFoundation.SpatialTrackingSession {
  @discardableResult
  final public func run(_ spatialTrackingConfiguration: RealityFoundation.SpatialTrackingSession.Configuration) async -> RealityFoundation.SpatialTrackingSession.UnavailableCapabilities?
  final public func stop() async
}
@available(iOS 18.0, *)
@available(visionOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
extension RealityFoundation.SpatialTrackingSession.Configuration.AnchorCapability {
  public static let camera: RealityFoundation.SpatialTrackingSession.Configuration.AnchorCapability
  public static let face: RealityFoundation.SpatialTrackingSession.Configuration.AnchorCapability
  public static let body: RealityFoundation.SpatialTrackingSession.Configuration.AnchorCapability
}
@available(iOS 18.0, *)
@available(visionOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
extension RealityFoundation.SpatialTrackingSession.Configuration {
  public struct SceneUnderstandingCapability : Swift.Equatable, Swift.Hashable, Swift.Sendable {
    public static func == (a: RealityFoundation.SpatialTrackingSession.Configuration.SceneUnderstandingCapability, b: RealityFoundation.SpatialTrackingSession.Configuration.SceneUnderstandingCapability) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Camera {
    case back
    case front
    public static func == (a: RealityFoundation.SpatialTrackingSession.Configuration.Camera, b: RealityFoundation.SpatialTrackingSession.Configuration.Camera) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 18.0, *)
@available(visionOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
extension RealityFoundation.SpatialTrackingSession.Configuration.SceneUnderstandingCapability {
  public static let shadow: RealityFoundation.SpatialTrackingSession.Configuration.SceneUnderstandingCapability
  public static let occlusion: RealityFoundation.SpatialTrackingSession.Configuration.SceneUnderstandingCapability
  public static let collision: RealityFoundation.SpatialTrackingSession.Configuration.SceneUnderstandingCapability
  public static let physics: RealityFoundation.SpatialTrackingSession.Configuration.SceneUnderstandingCapability
}
@available(iOS 18.0, *)
@available(visionOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
extension RealityFoundation.SpatialTrackingSession.Configuration {
  @available(iOS 18.0, *)
  @available(visionOS, unavailable)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  public init(tracking anchorCapabilities: Swift.Set<RealityFoundation.SpatialTrackingSession.Configuration.AnchorCapability> = [], sceneUnderstanding: Swift.Set<RealityFoundation.SpatialTrackingSession.Configuration.SceneUnderstandingCapability> = [], camera: RealityFoundation.SpatialTrackingSession.Configuration.Camera = .back)
}
@available(iOS 18.0, *)
@available(visionOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
extension RealityFoundation.SpatialTrackingSession.UnavailableCapabilities {
  public var sceneUnderstanding: Swift.Set<RealityFoundation.SpatialTrackingSession.Configuration.SceneUnderstandingCapability> {
    get
  }
  public var missingCameraAuthorization: Swift.Bool? {
    get
  }
}
@available(visionOS 2.0, iOS 18.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
extension RealityFoundation.SpatialTrackingSession.Configuration.AnchorCapability : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
@available(iOS 18.0, *)
@available(visionOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
extension RealityFoundation.SpatialTrackingSession.Configuration.SceneUnderstandingCapability : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
@available(visionOS 2.0, iOS 18.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
extension RealityFoundation.SpatialTrackingSession.Configuration : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __RKMaterialParameterBlock : Swift.Sendable {
  public enum Parameter : Swift.ExpressibleByNilLiteral, Swift.ExpressibleByFloatLiteral, Swift.ExpressibleByIntegerLiteral {
    case texture(RealityFoundation.TextureResource)
    @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
    case textureAndSampler(RealityFoundation.MaterialParameters.Texture)
    case float(Swift.Float)
    case float2(Swift.SIMD2<Swift.Float>)
    case float3(Swift.SIMD3<Swift.Float>)
    case float4(Swift.SIMD4<Swift.Float>)
    @available(macOS 13.0, iOS 16.0, macCatalyst 16.0, *)
    case color(CoreGraphics.CGColor)
    case float2x2(simd.float2x2)
    case float3x3(simd.float3x3)
    case float4x4(simd.float4x4)
    case bool(Swift.Bool)
    case int(Swift.Int32)
    case `default`
    public init(nilLiteral: ())
    public init(floatLiteral value: Swift.Float)
    public init(integerLiteral value: Swift.Int)
    @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
    public typealias FloatLiteralType = Swift.Float
    @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
    public typealias IntegerLiteralType = Swift.Int
  }
  @available(*, deprecated, message: "Pass mappings in __RKMaterialParameterBlock are no longer supported. Please use CustomMaterial instead.")
  public enum TransparentPass : Swift.String, Swift.CaseIterable {
    case Transparent, TransparentAR, TransparentDynamicLighting, TransparentARDynamicLighting
    public init?(rawValue: Swift.String)
    @available(*, deprecated, message: "Pass mappings in __RKMaterialParameterBlock are no longer supported. Please use CustomMaterial instead.")
    @available(iOS, introduced: 13.0, message: "Pass mappings in __RKMaterialParameterBlock are no longer supported. Please use CustomMaterial instead.")
    @available(macOS, introduced: 10.15, message: "Pass mappings in __RKMaterialParameterBlock are no longer supported. Please use CustomMaterial instead.")
    @available(macCatalyst, introduced: 13.0, message: "Pass mappings in __RKMaterialParameterBlock are no longer supported. Please use CustomMaterial instead.")
    public typealias AllCases = [RealityFoundation.__RKMaterialParameterBlock.TransparentPass]
    @available(*, deprecated, message: "Pass mappings in __RKMaterialParameterBlock are no longer supported. Please use CustomMaterial instead.")
    @available(iOS, introduced: 13.0, message: "Pass mappings in __RKMaterialParameterBlock are no longer supported. Please use CustomMaterial instead.")
    @available(macOS, introduced: 10.15, message: "Pass mappings in __RKMaterialParameterBlock are no longer supported. Please use CustomMaterial instead.")
    @available(macCatalyst, introduced: 13.0, message: "Pass mappings in __RKMaterialParameterBlock are no longer supported. Please use CustomMaterial instead.")
    public typealias RawValue = Swift.String
    nonisolated public static var allCases: [RealityFoundation.__RKMaterialParameterBlock.TransparentPass] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  @available(*, deprecated, message: "Pass mappings in __RKMaterialParameterBlock are no longer supported. Please use CustomMaterial instead.")
  public enum OpaquePass : Swift.String, Swift.CaseIterable {
    case Opaque, OpaqueAR, OpaqueDynamicLighting, OpaqueARDynamicLighting, Shadow
    public init?(rawValue: Swift.String)
    @available(*, deprecated, message: "Pass mappings in __RKMaterialParameterBlock are no longer supported. Please use CustomMaterial instead.")
    @available(iOS, introduced: 13.0, message: "Pass mappings in __RKMaterialParameterBlock are no longer supported. Please use CustomMaterial instead.")
    @available(macOS, introduced: 10.15, message: "Pass mappings in __RKMaterialParameterBlock are no longer supported. Please use CustomMaterial instead.")
    @available(macCatalyst, introduced: 13.0, message: "Pass mappings in __RKMaterialParameterBlock are no longer supported. Please use CustomMaterial instead.")
    public typealias AllCases = [RealityFoundation.__RKMaterialParameterBlock.OpaquePass]
    @available(*, deprecated, message: "Pass mappings in __RKMaterialParameterBlock are no longer supported. Please use CustomMaterial instead.")
    @available(iOS, introduced: 13.0, message: "Pass mappings in __RKMaterialParameterBlock are no longer supported. Please use CustomMaterial instead.")
    @available(macOS, introduced: 10.15, message: "Pass mappings in __RKMaterialParameterBlock are no longer supported. Please use CustomMaterial instead.")
    @available(macCatalyst, introduced: 13.0, message: "Pass mappings in __RKMaterialParameterBlock are no longer supported. Please use CustomMaterial instead.")
    public typealias RawValue = Swift.String
    nonisolated public static var allCases: [RealityFoundation.__RKMaterialParameterBlock.OpaquePass] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  @available(*, deprecated, message: "Pass mappings in __RKMaterialParameterBlock are no longer supported. Please use CustomMaterial instead.")
  public mutating func setTransparentPassTechniqueMappingEnabled(_ enabled: Swift.Bool)
  public mutating func clear(parameter name: Swift.String)
  public mutating func reset()
  public func numberOfTexturesWithNonZeroUVIndex() -> Swift.Int
  public mutating func set(parameter name: Swift.String, value: RealityFoundation.__RKMaterialParameterBlock.Parameter)
  public func get(parameter name: Swift.String) -> RealityFoundation.__RKMaterialParameterBlock.Parameter?
  public init()
  public init(transparentPassTechniqueMappping mapping: [(RealityFoundation.__RKMaterialParameterBlock.TransparentPass, Swift.String)])
  public init(hashedTransparentPassTechniqueMapping mapping: [(RealityFoundation.__RKMaterialParameterBlock.TransparentPass, Swift.Int)])
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.__RKMaterialParameterBlock.Parameter : Swift.Equatable {
  public static func == (a: RealityFoundation.__RKMaterialParameterBlock.Parameter, b: RealityFoundation.__RKMaterialParameterBlock.Parameter) -> Swift.Bool
}
extension RealityFoundation.QueryPredicate {
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public static func has<T>(_ t: T.Type) -> RealityFoundation.QueryPredicate<RealityFoundation.Entity> where T : RealityFoundation.Component
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.Entity {
  @_Concurrency.MainActor public func write(to url: Foundation.URL) async throws
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
final public class __SceneImportOperation {
  @available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
  public struct __ImportedScene {
    public let sceneIdentifier: Foundation.UUID
    public let sceneName: Swift.String
    public let sceneAsset: RealityFoundation.__REAsset
    public let sceneActive: Swift.Bool
  }
  @available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
  final public var __url: Foundation.URL? {
    get
  }
  @available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
  final public var __importedScenes: [RealityFoundation.__SceneImportOperation.__ImportedScene] {
    get
  }
  final public var __coreOperation: RealityFoundation.__SceneImportOperationRef {
    get
  }
  @objc deinit
  convenience public init(url: Foundation.URL, serviceLocator: RealityFoundation.__ServiceLocator)
  convenience public init?(bundle: Foundation.Bundle, resourceName: Swift.String, serviceLocator: RealityFoundation.__ServiceLocator)
  @discardableResult
  final public func setIsolateFromEngine(_ isolate: Swift.Bool) -> Self
  @discardableResult
  final public func setCompressTextures(_ compressTextures: Swift.Bool) -> Self
  @discardableResult
  final public func setMergeIntoSingleEntity(_ mergeEntities: Swift.Bool) -> Self
  @discardableResult
  final public func setPlayDefaultAnimationsImmediately(_ playImmediately: Swift.Bool) -> Self
  @discardableResult
  final public func setGenerateDecimatedMesh(_ decimateMesh: Swift.Bool) -> Self
  @discardableResult
  final public func setReorderVertexCaching(_ reorderVertexCaching: Swift.Bool) -> Self
  @discardableResult
  final public func setEnableAnimationInterpolation(_ enableInterpolation: Swift.Bool) -> Self
  @discardableResult
  final public func setRootSceneAssetPath(_ assetPath: Swift.String) -> Self
  @discardableResult
  final public func setMaterialDefinitionPath(_ materialDefinitionPath: Swift.String) -> Self
  @discardableResult
  final public func setApplyUnitConversionScale(_ applyScale: Swift.Bool) -> Self
  @discardableResult
  final public func setRetainSubdivisionSurfaceInfo(_ importSubdivisionSurfaces: Swift.Bool) -> Self
  final public func run() throws
  final public func publishToEngine() throws
  @available(macOS, deprecated: 10.15.4)
  @available(iOS, deprecated: 13.4)
  final public func getSceneResource() -> RealityFoundation.__SceneResource?
}
@available(iOS, introduced: 13.4, deprecated: 13.4, message: "Use the alternative that includes `actionAssets`")
@available(macOS, introduced: 10.15.4, deprecated: 10.15.4, message: "Use the alternative that includes `actionAssets`")
@available(macCatalyst, introduced: 13.4, deprecated: 13.4, message: "Use the alternative that includes `actionAssets`")
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public func __SceneImportOperation_addCustomUSDDataToScene(uskNode: RealityFoundation.__USKNodeWrapper, uskScene: RealityFoundation.__USKSceneWrapper, scene: RealityFoundation.Scene, sceneIdentifier: Foundation.UUID, usdNodeToEntityMapping: [Swift.String : Swift.String], scenePathToUUIDMapping: [Swift.String : Foundation.UUID], fileName: Swift.String, error: Swift.UnsafeMutablePointer<Swift.Unmanaged<CoreFoundation.CFError>?>?) -> Swift.Bool
@available(iOS, introduced: 13.4, deprecated: 16.0, message: "Use the alternative that includes `serviceLocator`")
@available(macOS, introduced: 10.15.4, deprecated: 13.0, message: "Use the alternative that includes `serviceLocator`")
@available(macCatalyst, introduced: 13.4, deprecated: 16.0, message: "Use the alternative that includes `serviceLocator`")
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public func __SceneImportOperation_addCustomUSDDataToScene(uskNode: RealityFoundation.__USKNodeWrapper, uskScene: RealityFoundation.__USKSceneWrapper, scene: RealityFoundation.Scene, sceneIdentifier: Foundation.UUID, usdNodeToEntityMapping: [Swift.String : Swift.String], scenePathToUUIDMapping: [Swift.String : Foundation.UUID], actionAssets: [Swift.String : Swift.String], fileName: Swift.String) -> (any Swift.Error)?
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public func __SceneImportOperation_addCustomUSDDataToScene(uskNode: RealityFoundation.__USKNodeWrapper, uskScene: RealityFoundation.__USKSceneWrapper, scene: RealityFoundation.Scene, sceneIdentifier: Foundation.UUID, usdNodeToEntityMapping: [Swift.String : Swift.String], scenePathToUUIDMapping: [Swift.String : Foundation.UUID], actionAssets: [Swift.String : Swift.String], fileName: Swift.String, serviceLocator: RealityFoundation.__ServiceLocator) -> (any Swift.Error)?
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum PhysicsBodyMode : Swift.Hashable {
  case `static`
  case kinematic
  case dynamic
  public static func == (a: RealityFoundation.PhysicsBodyMode, b: RealityFoundation.PhysicsBodyMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct PhysicsMassProperties : Swift.Equatable {
  public static let `default`: RealityFoundation.PhysicsMassProperties
  public var mass: Swift.Float
  public var inertia: Swift.SIMD3<Swift.Float>
  public var centerOfMass: (position: Swift.SIMD3<Swift.Float>, orientation: simd.simd_quatf)
  public init()
  public init(mass: Swift.Float, inertia: Swift.SIMD3<Swift.Float> = SIMD3<Float>(x: 0.1, y: 0.1, z: 0.1), centerOfMass: (position: Swift.SIMD3<Swift.Float>, orientation: simd.simd_quatf) = (SIMD3<Float>(x: 0, y: 0, z: 0), simd_quatf(ix: 0, iy: 0, iz: 0, r: 1)))
  @preconcurrency @_Concurrency.MainActor public init(shape: RealityFoundation.ShapeResource, density: Swift.Float)
  @preconcurrency @_Concurrency.MainActor public init(shape: RealityFoundation.ShapeResource, mass: Swift.Float)
  public static func == (lhs: RealityFoundation.PhysicsMassProperties, rhs: RealityFoundation.PhysicsMassProperties) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityForceAction : RealityFoundation.__RKEntityAction {
  public var force: Swift.SIMD3<Swift.Float>?
  public var velocity: Swift.SIMD3<Swift.Float>?
  public init(targetEntity: RealityFoundation.Entity?, force: Swift.SIMD3<Swift.Float>? = nil, velocity: Swift.SIMD3<Swift.Float>? = nil)
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  @objc deinit
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct ReferenceComponent : RealityFoundation.Component {
  public enum LoadingPolicy {
    case immediate
    case onDemand
    public static func == (a: RealityFoundation.ReferenceComponent.LoadingPolicy, b: RealityFoundation.ReferenceComponent.LoadingPolicy) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ReferenceState {
    case notLoaded
    case loading
    case loaded
    public static func == (a: RealityFoundation.ReferenceComponent.ReferenceState, b: RealityFoundation.ReferenceComponent.ReferenceState) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var loadingPolicy: RealityFoundation.ReferenceComponent.LoadingPolicy {
    get
  }
  public var state: RealityFoundation.ReferenceComponent.ReferenceState {
    get
  }
  public var reference: RealityFoundation.Entity? {
    get
  }
  public init(named name: Swift.String, at bundlePath: Swift.String = "", loadingPolicy: RealityFoundation.ReferenceComponent.LoadingPolicy = .onDemand)
  public init(named name: Swift.String, in bundle: Foundation.Bundle, loadingPolicy: RealityFoundation.ReferenceComponent.LoadingPolicy = .onDemand)
  public init(named name: Swift.String, loadingPolicy: RealityFoundation.ReferenceComponent.LoadingPolicy = .onDemand)
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.ReferenceComponent {
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.ReferenceComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
  public static func loadReference(at entity: RealityFoundation.Entity) throws
  @_Concurrency.MainActor public static func loadReference(at entity: RealityFoundation.Entity) async throws
  public static func releaseReference(at entity: RealityFoundation.Entity) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity {
  @available(*, deprecated, message: "Use playAnimation functions that utilize an AnimationResource instead of a name.")
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func playAnimation(named animationName: Swift.String, transitionDuration: Foundation.TimeInterval = 0, startsPaused: Swift.Bool = false, recursive: Swift.Bool = true) -> RealityFoundation.AnimationPlaybackController
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func playAnimation(_ animation: RealityFoundation.AnimationResource, transitionDuration: Foundation.TimeInterval, startsPaused: Swift.Bool) -> RealityFoundation.AnimationPlaybackController
  @_Concurrency.MainActor @preconcurrency public func stopAllAnimations(recursive: Swift.Bool = true)
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.Entity {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func playAnimation(_ animation: RealityFoundation.AnimationResource, transitionDuration: Foundation.TimeInterval = 0, blendLayerOffset: Swift.Int = 0, separateAnimatedValue: Swift.Bool = false, startsPaused: Swift.Bool = false, clock: CoreMedia.CMClockOrTimebase? = nil) -> RealityFoundation.AnimationPlaybackController
  @_Concurrency.MainActor @preconcurrency public var defaultAnimationClock: CoreMedia.CMClockOrTimebase {
    get
    set
  }
}
@available(visionOS 1.0, macOS 15.0, macCatalyst 18.0, iOS 18.0, *)
public struct AnimationHandoffType : Swift.Equatable {
  public static func snapshotAndReplace(applyToAllLayers: Swift.Bool = true) -> RealityFoundation.AnimationHandoffType
  public static func replace(applyToAllLayers: Swift.Bool = true) -> RealityFoundation.AnimationHandoffType
  public static var compose: RealityFoundation.AnimationHandoffType {
    get
  }
  public static var stop: RealityFoundation.AnimationHandoffType {
    get
  }
  public static var `default`: RealityFoundation.AnimationHandoffType {
    get
  }
  public static func == (a: RealityFoundation.AnimationHandoffType, b: RealityFoundation.AnimationHandoffType) -> Swift.Bool
}
@available(visionOS 2.0, macOS 15.0, macCatalyst 18.0, iOS 18.0, *)
extension RealityFoundation.AnimationHandoffType : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(visionOS 1.0, macOS 15.0, macCatalyst 18.0, iOS 18.0, *)
extension RealityFoundation.Entity {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func playAnimation(_ animation: RealityFoundation.AnimationResource, transitionDuration: Foundation.TimeInterval = 0, blendLayerOffset: Swift.Int = 0, separateAnimatedValue: Swift.Bool = false, startsPaused: Swift.Bool = false, clock: CoreMedia.CMClockOrTimebase? = nil, handoffType: RealityFoundation.AnimationHandoffType = .default) -> RealityFoundation.AnimationPlaybackController
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@usableFromInline
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
internal struct REAngleF {
  public init(radians: Swift.Float)
  public init(degrees: Swift.Float)
  public var radians: Swift.Float
  @inlinable public var degrees: Swift.Float {
    get {
            return radians * 180 / .pi
        }
    set {
            radians = newValue * .pi / 180
        }
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@usableFromInline
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
internal enum RotationOrder : Swift.UInt8 {
  public static let `default`: RealityFoundation.RotationOrder
  public static let sceneKit: RealityFoundation.RotationOrder
  case xyz
  case yzx
  case zxy
  case xzy
  case yxz
  case zyx
  @usableFromInline
  internal init?(rawValue: Swift.UInt8)
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  @usableFromInline
  internal typealias RawValue = Swift.UInt8
  @usableFromInline
  internal var rawValue: Swift.UInt8 {
    @usableFromInline
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension simd.simd_quatf {
  @usableFromInline
  internal init(eulerAngles: Swift.SIMD3<Swift.Float>, order: RealityFoundation.RotationOrder = .default)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKVisibilityHideScaleAnimation : RealityFoundation.__RKVisibilityBaseAnimation {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKVisibilityHideScaleUpAnimation : RealityFoundation.__RKVisibilityBaseAnimation {
  @objc deinit
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.Entity {
  @_Concurrency.MainActor @preconcurrency public var pins: RealityFoundation.EntityGeometricPins {
    get
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
@_Concurrency.MainActor public struct EntityGeometricPins : Swift.Sequence {
  @_Concurrency.MainActor public subscript(name: Swift.String) -> RealityFoundation.GeometricPin? {
    get
  }
  @discardableResult
  @_Concurrency.MainActor public func set(named name: Swift.String, position: Swift.SIMD3<Swift.Float> = SIMD3<Float>(0, 0, 0), orientation: simd.simd_quatf = simd_quatf(ix: 0, iy: 0, iz: 0, r: 1)) -> RealityFoundation.GeometricPin
  @discardableResult
  @_Concurrency.MainActor public func set(named name: Swift.String, position: Swift.SIMD3<Swift.Float> = SIMD3<Float>(0, 0, 0), orientation: simd.simd_quatf = simd_quatf(ix: 0, iy: 0, iz: 0, r: 1), relativeTo referenceEntity: RealityFoundation.Entity?) -> RealityFoundation.GeometricPin
  @discardableResult
  @_Concurrency.MainActor public func set(named name: Swift.String, skeletalJointName: Swift.String, position: Swift.SIMD3<Swift.Float> = SIMD3<Float>(0, 0, 0), orientation: simd.simd_quatf = simd_quatf(ix: 0, iy: 0, iz: 0, r: 1)) -> RealityFoundation.GeometricPin
  @_Concurrency.MainActor public func remove(named name: Swift.String)
  @_Concurrency.MainActor public var count: Swift.Int {
    get
  }
  @_Concurrency.MainActor public var isEmpty: Swift.Bool {
    get
  }
  public struct Iterator : Swift.IteratorProtocol {
    public typealias Element = RealityFoundation.GeometricPin
    public mutating func next() -> RealityFoundation.EntityGeometricPins.Iterator.Element?
  }
  public typealias Element = RealityFoundation.GeometricPin
  @_Concurrency.MainActor public func makeIterator() -> RealityFoundation.EntityGeometricPins.Iterator
  @_Concurrency.MainActor public let entity: RealityFoundation.Entity
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct PhysicsSimulationComponent : RealityFoundation.Component, Swift.Equatable {
  public struct CollisionOptions : Swift.OptionSet {
    public static let none: RealityFoundation.PhysicsSimulationComponent.CollisionOptions
    public static let reportKinematicVsStatic: RealityFoundation.PhysicsSimulationComponent.CollisionOptions
    public static let reportKinematicVsKinematic: RealityFoundation.PhysicsSimulationComponent.CollisionOptions
    public static let all: RealityFoundation.PhysicsSimulationComponent.CollisionOptions
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    @available(iOS 18.0, visionOS 1.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias ArrayLiteralElement = RealityFoundation.PhysicsSimulationComponent.CollisionOptions
    @available(iOS 18.0, visionOS 1.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias Element = RealityFoundation.PhysicsSimulationComponent.CollisionOptions
    @available(iOS 18.0, visionOS 1.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias RawValue = Swift.UInt8
  }
  @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
  public struct SolverIterations : Swift.Equatable {
    public init(positionIterations: Swift.Int = 6, velocityIterations: Swift.Int = 1)
    public var positionIterations: Swift.Int
    public var velocityIterations: Swift.Int
    public static func == (a: RealityFoundation.PhysicsSimulationComponent.SolverIterations, b: RealityFoundation.PhysicsSimulationComponent.SolverIterations) -> Swift.Bool
  }
  @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
  public var solverIterations: RealityFoundation.PhysicsSimulationComponent.SolverIterations
  public static func nearestSimulationEntity(for entity: RealityFoundation.Entity) -> RealityFoundation.Entity?
  public init()
  public var gravity: Swift.SIMD3<Swift.Float>
  public var collisionOptions: RealityFoundation.PhysicsSimulationComponent.CollisionOptions
  public var clock: CoreMedia.CMClockOrTimebase {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.PhysicsSimulationComponent
  @_Concurrency.MainActor @preconcurrency public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
  public static func == (a: RealityFoundation.PhysicsSimulationComponent, b: RealityFoundation.PhysicsSimulationComponent) -> Swift.Bool
}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __USDExportContext {
  public typealias AssetResolverCallback = (_ url: Foundation.URL) throws -> Foundation.URL?
  @_hasMissingDesignatedInitializers public class InstanceMapper {
    public func addMapping(from: Foundation.UUID?, to: RealityFoundation.__USKObjectPathWrapper)
    public func getMapping(_ from: Foundation.UUID) -> RealityFoundation.__USKObjectPathWrapper?
    @objc deinit
  }
  public var instanceMapper: RealityFoundation.__USDExportContext.InstanceMapper
  @available(*, deprecated, message: "Use init(with:resolver:)")
  public init?(with scene: RealityFoundation.__USKSceneWrapper)
  public init?(with scene: RealityFoundation.__USKSceneWrapper, resolver: RealityFoundation.__USDExportContext.AssetResolverCallback?)
}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __USKSceneWrapper {
  public let erasedValue: Any
  public init<T>(_ value: T)
}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __USKNodeWrapper {
  public let erasedValue: Any
  public init<T>(_ value: T)
}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __USKObjectPathWrapper {
  public let erasedValue: Any
  public init<T>(_ value: T)
}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __USKNodeSpecifierTypeWrapper {
  public let erasedValue: Any
  public init<T>(_ value: T)
}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public protocol __USDEncodablePublic {
  func encode(to encoder: RealityFoundation.__USDEncoder, at parentPath: RealityFoundation.__USKObjectPathWrapper) throws -> RealityFoundation.__USKNodeWrapper
  @available(*, deprecated)
  func encode(to encoder: RealityFoundation.__USDEncoder, at parentPath: RealityFoundation.__USKObjectPathWrapper, sceneSpecifier: RealityFoundation.__USKNodeSpecifierTypeWrapper) throws -> RealityFoundation.__USKNodeWrapper
}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct __USDEncoder {
  public var exportContext: RealityFoundation.__USDExportContext
  public init(exportContext: RealityFoundation.__USDExportContext)
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct SkeletalPose : Swift.Identifiable {
  public typealias ID = Swift.String
  public var id: RealityFoundation.SkeletalPose.ID
  public var jointNames: [Swift.String] {
    get
    set
  }
  public var jointTransforms: RealityFoundation.JointTransforms
  public subscript(joint: Swift.String) -> RealityFoundation.Transform? {
    get
    set
  }
  public init(id: RealityFoundation.SkeletalPose.ID, from skeleton: RealityFoundation.MeshResource.Skeleton)
  public init(id: RealityFoundation.SkeletalPose.ID, joints: [(Swift.String, RealityFoundation.JointTransforms.Element)])
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public class AnimationResource : RealityFoundation.Resource {
  @_Concurrency.MainActor @preconcurrency public var __coreAsset: RealityFoundation.__AssetRef {
    get
  }
  @_Concurrency.MainActor @preconcurrency final public let name: Swift.String?
  @objc deinit
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public enum AnimationRepeatMode {
  case none
  case `repeat`
  case cumulative
  case autoReverse
  public static func == (a: RealityFoundation.AnimationRepeatMode, b: RealityFoundation.AnimationRepeatMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.AnimationResource {
  @_Concurrency.MainActor @preconcurrency public func `repeat`(duration: Foundation.TimeInterval = .infinity) -> RealityFoundation.AnimationResource
  @_Concurrency.MainActor @preconcurrency public func `repeat`(count: Swift.Int) -> RealityFoundation.AnimationResource
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.AnimationResource {
  @_Concurrency.MainActor @preconcurrency public static func group(with resources: [RealityFoundation.AnimationResource]) throws -> RealityFoundation.AnimationResource
  @_Concurrency.MainActor @preconcurrency public static func sequence(with resources: [RealityFoundation.AnimationResource]) throws -> RealityFoundation.AnimationResource
  @_Concurrency.MainActor @preconcurrency public static func generate(with definition: any RealityFoundation.AnimationDefinition) throws -> RealityFoundation.AnimationResource
  @_Concurrency.MainActor @preconcurrency public func store(in: RealityFoundation.Entity)
  @_Concurrency.MainActor @preconcurrency public var definition: any RealityFoundation.AnimationDefinition {
    get
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.AnimationResource {
  @_Concurrency.MainActor @preconcurrency public static func makeActionAnimation<T>(for action: T, duration: Foundation.TimeInterval = 1.0, name: Swift.String = "", bindTarget: RealityFoundation.BindTarget? = nil, blendLayer: Swift.Int32 = 0, repeatMode: RealityFoundation.AnimationRepeatMode = .none, fillMode: RealityFoundation.AnimationFillMode = [], trimStart: Foundation.TimeInterval? = nil, trimEnd: Foundation.TimeInterval? = nil, trimDuration: Foundation.TimeInterval? = nil, offset: Foundation.TimeInterval = 0, delay: Foundation.TimeInterval = 0, speed: Swift.Float = 1.0) throws -> RealityFoundation.AnimationResource where T : RealityFoundation.EntityAction
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKStartTrigger : RealityFoundation.__RKEntityTrigger {
  override public init()
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func matches(with trigger: RealityFoundation.__RKEntityTrigger) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public class MeshResource : RealityFoundation.Resource {
  @_Concurrency.MainActor @preconcurrency public var expectedMaterialCount: Swift.Int {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var bounds: RealityFoundation.BoundingBox {
    get
  }
  @objc deinit
  @available(*, deprecated, message: "Use Entity.loadModel(named:in:) instead")
  @_Concurrency.MainActor @preconcurrency public static func __load(named name: Swift.String, in bundle: Foundation.Bundle? = nil) throws -> RealityFoundation.MeshResource
  @_Concurrency.MainActor @preconcurrency public static func generateBox(size: Swift.Float, cornerRadius: Swift.Float = 0) -> RealityFoundation.MeshResource
  @_Concurrency.MainActor @preconcurrency public static func generateBox(size: Swift.SIMD3<Swift.Float>, cornerRadius: Swift.Float = 0) -> RealityFoundation.MeshResource
  @_Concurrency.MainActor @preconcurrency public static func generateBox(width: Swift.Float, height: Swift.Float, depth: Swift.Float, cornerRadius: Swift.Float = 0, splitFaces: Swift.Bool = false) -> RealityFoundation.MeshResource
  @_Concurrency.MainActor @preconcurrency public static func generatePlane(width: Swift.Float, height: Swift.Float, cornerRadius: Swift.Float = 0) -> RealityFoundation.MeshResource
  @_Concurrency.MainActor @preconcurrency public static func generatePlane(width: Swift.Float, depth: Swift.Float, cornerRadius: Swift.Float = 0) -> RealityFoundation.MeshResource
  @_Concurrency.MainActor @preconcurrency public static func __generatePlane(width: Swift.Float = 1, widthSegmentCount: Swift.UInt = 1, depth: Swift.Float = 1, depthSegmentCount: Swift.UInt = 1, cornerRadius: Swift.Float = 0, cornerSegmentCount: Swift.UInt = 0, addUVs: Swift.Bool = true, addNormals: Swift.Bool = true) -> RealityFoundation.MeshResource
  @_Concurrency.MainActor @preconcurrency public static func __generateOccluderPlane(width: Swift.Float, depth: Swift.Float, cornerRadius: Swift.Float = 0) -> RealityFoundation.MeshResource
  @_Concurrency.MainActor @preconcurrency public static func generateSphere(radius: Swift.Float) -> RealityFoundation.MeshResource
}
@available(visionOS 1.0, macOS 15.0, macCatalyst 18.0, iOS 18.0, *)
extension RealityFoundation.MeshResource {
  @_Concurrency.MainActor @preconcurrency public static func generateBox(size: Swift.SIMD3<Swift.Float>, majorCornerRadius: Swift.Float = 0.2, minorCornerRadius: Swift.Float = 0.05) -> RealityFoundation.MeshResource
  @_Concurrency.MainActor @preconcurrency public static func generateCone(height: Swift.Float, radius: Swift.Float) -> RealityFoundation.MeshResource
  @_Concurrency.MainActor @preconcurrency public static func generateCylinder(height: Swift.Float, radius: Swift.Float) -> RealityFoundation.MeshResource
}
@available(visionOS 1.0, macOS 15.0, macCatalyst 18.0, iOS 18.0, *)
extension RealityFoundation.MeshResource {
  @_Concurrency.MainActor @preconcurrency convenience public init(shape resource: RealityFoundation.ShapeResource)
  @_Concurrency.MainActor @preconcurrency convenience public init(shape resource: RealityFoundation.ShapeResource) async
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
final public class __MeshCompileOptions {
  final public var coreOptions: Swift.OpaquePointer {
    get
  }
  public init()
  @objc deinit
  final public var generateVertexFaceAdjacencyAttributes: Swift.Bool {
    get
    set
  }
  final public var reorderVertexCaching: Swift.Bool {
    get
    set
  }
  final public var repairTangents: Swift.Bool {
    get
    set
  }
  final public var mergeVerticesIfPolygonSoup: Swift.Bool {
    get
    set
  }
  final public var preserveSharpFeatures: Swift.Bool {
    get
    set
  }
  final public var preserveSubdivisonSurfaceData: Swift.Bool {
    get
    set
  }
  final public var generateDecimatedMesh: Swift.Bool {
    get
    set
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.__MeshCompileOptions {
  public enum AttributeCompressionType {
    case float16
    case uNorm8
    case sNorm8
    public static func == (a: RealityFoundation.__MeshCompileOptions.AttributeCompressionType, b: RealityFoundation.__MeshCompileOptions.AttributeCompressionType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public subscript(attribute: Swift.String) -> (type: RealityFoundation.__MeshCompileOptions.AttributeCompressionType, tolerance: Swift.Float)? {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct CollisionComponent : RealityFoundation.Component, Swift.Equatable {
  public enum Mode {
    case `default`
    case trigger
    @available(visionOS 1.0, macOS 15.0, macCatalyst 18.0, iOS 18.0, *)
    case colliding
    public static func == (a: RealityFoundation.CollisionComponent.Mode, b: RealityFoundation.CollisionComponent.Mode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var shapes: [RealityFoundation.ShapeResource]
  public var mode: RealityFoundation.CollisionComponent.Mode
  public var filter: RealityFoundation.CollisionFilter
  public init(shapes: [RealityFoundation.ShapeResource], mode: RealityFoundation.CollisionComponent.Mode = .default, filter: RealityFoundation.CollisionFilter = .default)
  @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.CollisionComponent
  @_Concurrency.MainActor @preconcurrency public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
  public static func == (a: RealityFoundation.CollisionComponent, b: RealityFoundation.CollisionComponent) -> Swift.Bool
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.CollisionComponent {
  public init(shapes: [RealityFoundation.ShapeResource], isStatic: Swift.Bool, filter: RealityFoundation.CollisionFilter = .default)
  public var isStatic: Swift.Bool {
    get
    set
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.CollisionComponent {
  public struct CollisionOptions : Swift.OptionSet {
    public static let none: RealityFoundation.CollisionComponent.CollisionOptions
    public static let `static`: RealityFoundation.CollisionComponent.CollisionOptions
    public static let fullContactInformation: RealityFoundation.CollisionComponent.CollisionOptions
    public let rawValue: Swift.UInt
    public init(rawValue: Swift.UInt)
    @available(iOS 18.0, visionOS 1.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias ArrayLiteralElement = RealityFoundation.CollisionComponent.CollisionOptions
    @available(iOS 18.0, visionOS 1.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias Element = RealityFoundation.CollisionComponent.CollisionOptions
    @available(iOS 18.0, visionOS 1.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias RawValue = Swift.UInt
  }
  public init(shapes: [RealityFoundation.ShapeResource], mode: RealityFoundation.CollisionComponent.Mode = .default, collisionOptions: RealityFoundation.CollisionComponent.CollisionOptions, filter: RealityFoundation.CollisionFilter = .default)
  public var collisionOptions: RealityFoundation.CollisionComponent.CollisionOptions {
    get
    set(newOptions)
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 14.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct AnchoringComponent : RealityFoundation.Component, Swift.Equatable {
  public enum Target : Swift.Hashable {
    public struct Alignment : Swift.OptionSet {
      public static let horizontal: RealityFoundation.AnchoringComponent.Target.Alignment
      public static let vertical: RealityFoundation.AnchoringComponent.Target.Alignment
      public static let any: RealityFoundation.AnchoringComponent.Target.Alignment
      public let rawValue: Swift.UInt8
      public init(rawValue: Swift.UInt8)
      @available(iOS 13.0, macOS 10.15, macCatalyst 14.0, *)
      public typealias ArrayLiteralElement = RealityFoundation.AnchoringComponent.Target.Alignment
      @available(iOS 13.0, macOS 10.15, macCatalyst 14.0, *)
      public typealias Element = RealityFoundation.AnchoringComponent.Target.Alignment
      @available(iOS 13.0, macOS 10.15, macCatalyst 14.0, *)
      public typealias RawValue = Swift.UInt8
    }
    public struct Classification : Swift.OptionSet {
      public static let wall: RealityFoundation.AnchoringComponent.Target.Classification
      public static let floor: RealityFoundation.AnchoringComponent.Target.Classification
      public static let ceiling: RealityFoundation.AnchoringComponent.Target.Classification
      public static let table: RealityFoundation.AnchoringComponent.Target.Classification
      public static let seat: RealityFoundation.AnchoringComponent.Target.Classification
      public static let any: RealityFoundation.AnchoringComponent.Target.Classification
      public let rawValue: Swift.UInt64
      public init(rawValue: Swift.UInt64)
      @available(iOS 13.0, macOS 10.15, macCatalyst 14.0, *)
      public typealias ArrayLiteralElement = RealityFoundation.AnchoringComponent.Target.Classification
      @available(iOS 13.0, macOS 10.15, macCatalyst 14.0, *)
      public typealias Element = RealityFoundation.AnchoringComponent.Target.Classification
      @available(iOS 13.0, macOS 10.15, macCatalyst 14.0, *)
      public typealias RawValue = Swift.UInt64
    }
    @available(visionOS 1.0, *)
    @available(macOS, unavailable)
    @available(iOS, unavailable)
    public enum Chirality : Swift.Hashable {
      case right
      case left
      case either
      @available(visionOS, unavailable)
      case any
      public static func == (a: RealityFoundation.AnchoringComponent.Target.Chirality, b: RealityFoundation.AnchoringComponent.Target.Chirality) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @available(visionOS 1.0, *)
    @available(macOS, unavailable)
    @available(iOS, unavailable)
    public struct HandLocation : Swift.Hashable {
      public static func == (a: RealityFoundation.AnchoringComponent.Target.HandLocation, b: RealityFoundation.AnchoringComponent.Target.HandLocation) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @available(visionOS, unavailable)
    case camera
    case world(transform: simd.float4x4)
    @available(visionOS, unavailable)
    case anchor(identifier: Foundation.UUID)
    case plane(_: RealityFoundation.AnchoringComponent.Target.Alignment, classification: RealityFoundation.AnchoringComponent.Target.Classification, minimumBounds: Swift.SIMD2<Swift.Float>)
    case image(group: Swift.String, name: Swift.String)
    @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
    case referenceImage(from: RealityFoundation.AnchoringComponent.ImageAnchoringSource)
    @available(visionOS, unavailable, message: "Object anchoring with group and name is not available on visionOS.")
    case object(group: Swift.String, name: Swift.String)
    @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
    case referenceObject(from: RealityFoundation.AnchoringComponent.ObjectAnchoringSource)
    @available(visionOS, unavailable, message: "Face anchoring is not available on visionOS.")
    case face
    @available(visionOS, unavailable, message: "Body anchoring is not available on visionOS.")
    case body
    @available(visionOS 1.0, *)
    @available(macOS, unavailable)
    @available(iOS, unavailable)
    @available(tvOS, unavailable)
    case hand(_: RealityFoundation.AnchoringComponent.Target.Chirality, location: RealityFoundation.AnchoringComponent.Target.HandLocation)
    @available(visionOS 1.0, *)
    @available(macOS, unavailable)
    @available(iOS, unavailable)
    @available(tvOS, unavailable)
    case head
    public static func == (lhs: RealityFoundation.AnchoringComponent.Target, rhs: RealityFoundation.AnchoringComponent.Target) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let target: RealityFoundation.AnchoringComponent.Target
  public init(_ target: RealityFoundation.AnchoringComponent.Target)
  @_Concurrency.MainActor @preconcurrency public func __toCore(_ component: RealityFoundation.__ComponentRef)
  @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.AnchoringComponent
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
  public static func == (a: RealityFoundation.AnchoringComponent, b: RealityFoundation.AnchoringComponent) -> Swift.Bool
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AnchoringComponent {
  public struct TrackingMode : Swift.Hashable {
    public static let once: RealityFoundation.AnchoringComponent.TrackingMode
    public static let continuous: RealityFoundation.AnchoringComponent.TrackingMode
    @available(visionOS 2.0, *)
    public static let predicted: RealityFoundation.AnchoringComponent.TrackingMode
    public static func == (a: RealityFoundation.AnchoringComponent.TrackingMode, b: RealityFoundation.AnchoringComponent.TrackingMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var trackingMode: RealityFoundation.AnchoringComponent.TrackingMode {
    get
    set
  }
  public init(_ target: RealityFoundation.AnchoringComponent.Target, trackingMode: RealityFoundation.AnchoringComponent.TrackingMode)
}
extension RealityFoundation.AnchoringComponent {
  @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
  public struct ObjectAnchoringSource : Swift.Equatable, Swift.Hashable {
    @available(visionOS 2.0, *)
    @available(macOS, unavailable)
    @available(iOS, unavailable)
    @available(tvOS, unavailable)
    public init(_ url: Foundation.URL)
    @available(visionOS 2.0, *)
    @available(macOS, unavailable)
    @available(iOS, unavailable)
    @available(tvOS, unavailable)
    public init(name: Swift.String, in bundle: Foundation.Bundle = .main)
    @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
    @available(visionOS, unavailable, message: "Object anchoring with group and name is not available on visionOS.")
    public init(group: Swift.String, name: Swift.String)
    public static func == (a: RealityFoundation.AnchoringComponent.ObjectAnchoringSource, b: RealityFoundation.AnchoringComponent.ObjectAnchoringSource) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
  public struct ImageAnchoringSource : Swift.Equatable, Swift.Hashable {
    @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
    public init(_ url: Foundation.URL, physicalSize: Swift.SIMD2<Swift.Float>)
    @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
    public init(group: Swift.String, name: Swift.String)
    public static func == (a: RealityFoundation.AnchoringComponent.ImageAnchoringSource, b: RealityFoundation.AnchoringComponent.ImageAnchoringSource) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.AnchoringComponent {
  public enum PhysicsSimulation : Swift.Hashable {
    case none
    case isolated
    public static func == (a: RealityFoundation.AnchoringComponent.PhysicsSimulation, b: RealityFoundation.AnchoringComponent.PhysicsSimulation) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(_ target: RealityFoundation.AnchoringComponent.Target, trackingMode: RealityFoundation.AnchoringComponent.TrackingMode, physicsSimulation: RealityFoundation.AnchoringComponent.PhysicsSimulation = .isolated)
  public var physicsSimulation: RealityFoundation.AnchoringComponent.PhysicsSimulation {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public protocol HasPhysicsBody : RealityFoundation.HasCollision {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public protocol HasPhysicsMotion : RealityFoundation.Entity {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public protocol HasPhysics : RealityFoundation.HasPhysicsBody, RealityFoundation.HasPhysicsMotion {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasPhysicsBody {
  @_Concurrency.MainActor @preconcurrency public var physicsBody: RealityFoundation.PhysicsBodyComponent? {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasPhysicsMotion {
  @_Concurrency.MainActor @preconcurrency public var physicsMotion: RealityFoundation.PhysicsMotionComponent? {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasPhysicsBody {
  @available(*, deprecated, message: "Will be hidden in RealityKit 2019.")
  @_Concurrency.MainActor @preconcurrency public func resetPhysicsTransform(_ transform: RealityFoundation.Transform, recursive: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency public func resetPhysicsTransform(recursive: Swift.Bool = true)
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct CharacterControllerComponent : RealityFoundation.Component {
  public struct Collision {
    public init(characterEntity: RealityFoundation.Entity, hitEntity: RealityFoundation.Entity, hitPosition: Swift.SIMD3<Swift.Float>, hitNormal: Swift.SIMD3<Swift.Float>, moveDirection: Swift.SIMD3<Swift.Float>, moveDistance: Swift.Float)
    public var characterEntity: RealityFoundation.Entity
    public var hitEntity: RealityFoundation.Entity
    public var hitPosition: Swift.SIMD3<Swift.Float>
    public var hitNormal: Swift.SIMD3<Swift.Float>
    public var moveDirection: Swift.SIMD3<Swift.Float>
    public var moveDistance: Swift.Float
  }
  public struct CollisionFlags : Swift.OptionSet {
    public init(rawValue: Swift.UInt8)
    public let rawValue: Swift.UInt8
    public static let none: RealityFoundation.CharacterControllerComponent.CollisionFlags
    public static let side: RealityFoundation.CharacterControllerComponent.CollisionFlags
    public static let top: RealityFoundation.CharacterControllerComponent.CollisionFlags
    public static let bottom: RealityFoundation.CharacterControllerComponent.CollisionFlags
    @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
    public typealias ArrayLiteralElement = RealityFoundation.CharacterControllerComponent.CollisionFlags
    @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
    public typealias Element = RealityFoundation.CharacterControllerComponent.CollisionFlags
    @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
    public typealias RawValue = Swift.UInt8
  }
  public init()
  public init(radius: Swift.Float, height: Swift.Float, skinWidth: Swift.Float = defaultSkinWidth, slopeLimit: Swift.Float = defaultSlopeLimit, stepLimit: Swift.Float = defaultStepLimit, upVector: Swift.SIMD3<Swift.Float> = defaultUpVector, collisionFilter: RealityFoundation.CollisionFilter = .default)
  public var radius: Swift.Float
  public var height: Swift.Float
  public var skinWidth: Swift.Float
  public var slopeLimit: Swift.Float
  public var stepLimit: Swift.Float
  public var upVector: Swift.SIMD3<Swift.Float>
  public var collisionFilter: RealityFoundation.CollisionFilter
  public static let defaultRadius: Swift.Float
  public static let defaultHeight: Swift.Float
  public static let defaultSkinWidth: Swift.Float
  public static let defaultSlopeLimit: Swift.Float
  public static let defaultStepLimit: Swift.Float
  public static let defaultUpVector: Swift.SIMD3<Swift.Float>
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.CharacterControllerComponent {
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.CharacterControllerComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public struct SceneUpdateContext {
  public var scene: RealityFoundation.Scene
  public var deltaTime: Foundation.TimeInterval
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
public protocol System {
  static var dependencies: [RealityFoundation.SystemDependency] { get }
  @preconcurrency @_Concurrency.MainActor init(scene: RealityFoundation.Scene)
  @preconcurrency @_Concurrency.MainActor mutating func update(context: RealityFoundation.SceneUpdateContext)
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.SceneUpdateContext {
  @available(visionOS, unavailable, renamed: "entities(matching:updatingSystemWhen:)")
  @available(macOS, unavailable, renamed: "entities(matching:updatingSystemWhen:)")
  @available(iOS, unavailable, renamed: "entities(matching:updatingSystemWhen:)")
  public func entities(matching query: RealityFoundation.EntityQuery, when condition: RealityFoundation.SystemUpdateCondition) -> RealityFoundation.QueryResult<RealityFoundation.Entity>
  public func entities(matching query: RealityFoundation.EntityQuery, updatingSystemWhen condition: RealityFoundation.SystemUpdateCondition) -> RealityFoundation.QueryResult<RealityFoundation.Entity>
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct SystemUpdateCondition {
  public static var rendering: RealityFoundation.SystemUpdateCondition {
    get
  }
}
extension RealityFoundation.System {
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  @preconcurrency @_Concurrency.MainActor public static func registerSystem()
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public static var dependencies: [RealityFoundation.SystemDependency] {
    get
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public mutating func update(context: RealityFoundation.SceneUpdateContext)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct UnlitMaterial : RealityFoundation.Material {
  public var __resource: RealityFoundation.__MaterialResource {
    get
  }
  public var __parameterBlock: RealityFoundation.__RKMaterialParameterBlock
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var color: RealityFoundation.UnlitMaterial.BaseColor {
    get
    set
  }
  @available(macOS, deprecated: 12.0, renamed: "color")
  @available(iOS, deprecated: 15.0, renamed: "color")
  @available(macCatalyst, deprecated: 15.0, renamed: "color")
  @available(visionOS, deprecated: 1.0, renamed: "color")
  public var __tintColor: CoreGraphics.CGColor {
    get
    set
  }
  @available(macOS, deprecated: 12.0, renamed: "color")
  @available(iOS, deprecated: 15.0, renamed: "color")
  @available(macCatalyst, deprecated: 15.0, renamed: "color")
  @available(visionOS, deprecated: 1.0, renamed: "color")
  public var __baseColor: RealityFoundation.__MaterialColorParameter {
    get
    set
  }
  public var __usesTransparency: Swift.Bool {
    get
    set
  }
  public init()
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var opacityThreshold: Swift.Float? {
    get
    set
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public var blending: RealityFoundation.UnlitMaterial.Blending {
    get
    set
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.UnlitMaterial {
  public typealias TriangleFillMode = RealityFoundation.MaterialParameterTypes.TriangleFillMode
  public var triangleFillMode: RealityFoundation.UnlitMaterial.TriangleFillMode {
    get
    set
  }
  public init(applyPostProcessToneMap: Swift.Bool)
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.UnlitMaterial {
  public var writesDepth: Swift.Bool {
    get
    set
  }
  public var readsDepth: Swift.Bool {
    get
    set
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.UnlitMaterial {
  @_hasMissingDesignatedInitializers final public class Program : Swift.Equatable, Swift.Hashable, Swift.Sendable {
    final public let descriptor: RealityFoundation.UnlitMaterial.Program.Descriptor
    public struct Descriptor : Swift.Equatable, Swift.Hashable, Swift.Sendable {
      public var applyPostProcessToneMap: Swift.Bool
      public var blendMode: RealityFoundation.MaterialParameterTypes.BlendMode?
      public init()
      public static func == (a: RealityFoundation.UnlitMaterial.Program.Descriptor, b: RealityFoundation.UnlitMaterial.Program.Descriptor) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public static func == (lhs: RealityFoundation.UnlitMaterial.Program, rhs: RealityFoundation.UnlitMaterial.Program) -> Swift.Bool
    final public func hash(into hasher: inout Swift.Hasher)
    public init(descriptor: RealityFoundation.UnlitMaterial.Program.Descriptor) async
    @objc deinit
    final public var hashValue: Swift.Int {
      get
    }
  }
  public var program: RealityFoundation.UnlitMaterial.Program {
    get
    set
  }
  public init(program: RealityFoundation.UnlitMaterial.Program)
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.UnlitMaterial {
  public init(texture: RealityFoundation.TextureResource)
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.UnlitMaterial {
  public typealias FaceCulling = RealityFoundation.MaterialParameterTypes.FaceCulling
  public var faceCulling: RealityFoundation.UnlitMaterial.FaceCulling {
    get
    set
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.UnlitMaterial {
  public typealias TextureCoordinateTransform = RealityFoundation.MaterialParameterTypes.TextureCoordinateTransform
  public var textureCoordinateTransform: RealityFoundation.UnlitMaterial.TextureCoordinateTransform {
    get
    set
  }
  public var secondaryTextureCoordinateTransform: RealityFoundation.UnlitMaterial.TextureCoordinateTransform {
    get
    set
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKVisibilityHideDropAnimation : RealityFoundation.__RKVisibilityBaseAnimation {
  @objc deinit
}
extension Combine.Cancellable {
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  @preconcurrency @_Concurrency.MainActor public func storeWhileEntityActive(_ entity: RealityFoundation.Entity)
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct BlendShapeWeightsData : Swift.Identifiable {
  public typealias ID = Swift.String
  public init(id: RealityFoundation.BlendShapeWeightsData.ID, weights: [(Swift.String, RealityFoundation.BlendShapeWeights.Element)])
  public var id: RealityFoundation.BlendShapeWeightsData.ID {
    get
  }
  public var weights: RealityFoundation.BlendShapeWeights {
    get
    set
  }
  public var weightNames: [Swift.String] {
    get
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct BlendShapeWeightsSet {
  public typealias Element = RealityFoundation.BlendShapeWeightsData
  public init()
  public var `default`: RealityFoundation.BlendShapeWeightsSet.Element? {
    get
    set
  }
  public var count: Swift.Int {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public subscript(blendShapeName: Swift.String) -> RealityFoundation.BlendShapeWeightsSet.Element? {
    get
  }
  public func contains(_ blendShapeName: Swift.String) -> Swift.Bool
  @discardableResult
  public mutating func set(_ newValue: RealityFoundation.BlendShapeWeightsSet.Element) -> RealityFoundation.BlendShapeWeightsSet.Element?
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.BlendShapeWeightsSet : Swift.Sequence {
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> RealityFoundation.BlendShapeWeightsSet.Element?
    @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias Element = RealityFoundation.BlendShapeWeightsSet.Element
  }
  public func makeIterator() -> RealityFoundation.BlendShapeWeightsSet.Iterator
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.BlendShapeWeightsSet : Swift.Collection {
  public typealias Index = Swift.Int
  public var startIndex: RealityFoundation.BlendShapeWeightsSet.Index {
    get
  }
  public var endIndex: RealityFoundation.BlendShapeWeightsSet.Index {
    get
  }
  public func index(of blendShapeName: Swift.String) -> RealityFoundation.BlendShapeWeightsSet.Index?
  public subscript(index: RealityFoundation.BlendShapeWeightsSet.Index) -> RealityFoundation.BlendShapeWeightsSet.Element {
    get
    set
  }
  public func index(after i: RealityFoundation.BlendShapeWeightsSet.Index) -> RealityFoundation.BlendShapeWeightsSet.Index
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias Indices = Swift.DefaultIndices<RealityFoundation.BlendShapeWeightsSet>
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias SubSequence = Swift.Slice<RealityFoundation.BlendShapeWeightsSet>
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct BlendShapeWeightsComponent : RealityFoundation.Component {
  public init(weightsMapping: RealityFoundation.BlendShapeWeightsMapping)
  public var weightSet: RealityFoundation.BlendShapeWeightsSet {
    get
    set
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.BlendShapeWeightsComponent {
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.BlendShapeWeightsComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct SpinAction : RealityFoundation.EntityAction, Swift.Codable {
  public var revolutions: Swift.Float
  public var localAxis: Swift.SIMD3<Swift.Float>
  public var timingFunction: RealityFoundation.AnimationTimingFunction
  public var isAdditive: Swift.Bool
  public var animatedValueType: (any RealityFoundation.AnimatableData.Type)? {
    get
  }
  public init(revolutions: Swift.Float, localAxis: Swift.SIMD3<Swift.Float> = [0, 1, 0], timingFunction: RealityFoundation.AnimationTimingFunction = .default, isAdditive: Swift.Bool = false)
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias EventParameterType = Swift.Never
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
@available(visionOS, unavailable)
public struct PixelCastHit : Swift.Equatable, Swift.Sendable {
  public var entity: RealityFoundation.Entity {
    get
  }
  public var normal: Swift.SIMD3<Swift.Float> {
    get
  }
  public var position: Swift.SIMD3<Swift.Float> {
    get
  }
  public var meshPart: Swift.UInt64 {
    get
  }
  public var instance: Swift.UInt32 {
    get
  }
  public var primitive: Swift.UInt32 {
    get
  }
  public var barycentric: Swift.SIMD3<Swift.Float>? {
    get
  }
  public static func == (a: RealityFoundation.PixelCastHit, b: RealityFoundation.PixelCastHit) -> Swift.Bool
}
@available(iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
@available(visionOS, unavailable)
extension RealityFoundation.Scene {
  @_Concurrency.MainActor @preconcurrency public func pixelCast(origin: Swift.SIMD3<Swift.Float>, direction: Swift.SIMD3<Swift.Float>, length: Swift.Float = 100) async throws -> RealityFoundation.PixelCastHit?
  @_Concurrency.MainActor @preconcurrency public func pixelCast(from startPosition: Swift.SIMD3<Swift.Float>, to endPosition: Swift.SIMD3<Swift.Float>) async throws -> RealityFoundation.PixelCastHit?
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __ServiceLocator {
  public static var __sharedEngine: RealityFoundation.__Engine! {
    get
    set
  }
  public static var hasSharedServiceLocator: Swift.Bool {
    get
  }
  public static var shared: RealityFoundation.__ServiceLocator {
    get
  }
  public static func __createSharedIfNeeded(with configuration: RealityFoundation.__Engine.Configuration)
  public var __engineRef: RealityFoundation.__EngineRef {
    get
  }
  unowned public var engine: RealityFoundation.__Engine
  public var usesMetal: Swift.Bool {
    get
  }
  public var renderService: any RealityFoundation.__RenderService {
    get
    set
  }
  @available(*, deprecated, message: "Use renderService directly")
  public var __renderService: any RealityFoundation.__RenderService {
    get
  }
  public var sceneService: any RealityFoundation.__SceneService
  @available(*, deprecated, message: "Use sceneService directly")
  public var __sceneService: any RealityFoundation.__SceneService {
    get
  }
  public var assetService: any RealityFoundation.__REAssetService
  @available(*, deprecated, message: "Use assetService directly")
  public var __assetService: any RealityFoundation.__REAssetService {
    get
  }
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@frozen public struct Transform : RealityFoundation.Component, Swift.Hashable {
  public static let identity: RealityFoundation.Transform
  public var scale: Swift.SIMD3<Swift.Float> = .one
  public var rotation: simd.simd_quatf = .identity
  public var translation: Swift.SIMD3<Swift.Float> = .zero
  public var __coreSRT: RealityFoundation.__SRTRef {
    get
  }
  @inlinable public var matrix: simd.float4x4 {
    get {
            let reMatrix = REMatrix4x4F(translation: translation, rotation: rotation, scale: scale)
            return reMatrix
        }
    set {
            let reMatrix = newValue as REMatrix4x4F
            let srt = reMatrix.decompose()
            scale = srt.scale
            rotation = srt.rotation
            translation = srt.translation
        }
  }
  public init()
  @inlinable public init(scale: Swift.SIMD3<Swift.Float> = SIMD3<Float>(x: 1, y: 1, z: 1), rotation: simd.simd_quatf = simd_quaternion(0, 0, 0, 1), translation: Swift.SIMD3<Swift.Float> = SIMD3<Float>(x: 0, y: 0, z: 0)) {
        self.scale = scale
        self.rotation = rotation
        self.translation = translation
    }
  @inlinable public init(pitch x: Swift.Float = 0, yaw y: Swift.Float = 0, roll z: Swift.Float = 0) {
        let angles = SIMD3<Float>(x, y, z)
        self.init(scale: .one,
                  rotation: simd_quatf(eulerAngles: angles, order: .yxz),
                  translation: .zero)
    }
  public init(matrix: simd.float4x4)
  @inlinable public func hash(into hasher: inout Swift.Hasher) {
        hasher.combine(scale)
        hasher.combine(rotation.vector)
        hasher.combine(translation)
    }
  public static func == (a: RealityFoundation.Transform, b: RealityFoundation.Transform) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Transform {
  public static func __fromCore(_ coreSRT: RealityFoundation.__SRTRef) -> RealityFoundation.Transform
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.Transform
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.Transform : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public class __VideoResource : RealityFoundation.Resource {
  @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreAsset: RealityFoundation.__AssetRef) -> Self
  @objc deinit
  @_Concurrency.MainActor @preconcurrency public static func load(named name: Swift.String, in bundle: Foundation.Bundle? = nil) throws -> RealityFoundation.__VideoResource
}
@_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public class AudioResource : RealityFoundation.Resource {
  @_Concurrency.MainActor @preconcurrency public var __coreAsset: RealityFoundation.__AssetRef {
    get
  }
  @objc deinit
  @available(visionOS, unavailable)
  @available(macOS, introduced: 10.15, deprecated: 15.0, message: "Use the ChannelAudioComponent, AmbientAudioComponent, or SpatialAudioComponent instead.")
  @available(macCatalyst, introduced: 13, deprecated: 18.0, message: "Use the ChannelAudioComponent, AmbientAudioComponent, or SpatialAudioComponent instead.")
  @available(iOS, introduced: 13, deprecated: 18.0, message: "Use the ChannelAudioComponent, AmbientAudioComponent, or SpatialAudioComponent instead.")
  @_Concurrency.MainActor @preconcurrency public var inputMode: RealityFoundation.AudioResource.InputMode {
    get
    set
  }
}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AudioResource : Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public static func == (lhs: RealityFoundation.AudioResource, rhs: RealityFoundation.AudioResource) -> Swift.Bool
}
@available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public struct ModelDebugOptionsComponent : RealityFoundation.Component {
  public var visualizationMode: RealityFoundation.ModelDebugOptionsComponent.VisualizationMode {
    get
  }
  public init(visualizationMode: RealityFoundation.ModelDebugOptionsComponent.VisualizationMode = .none)
  @_Concurrency.MainActor @preconcurrency public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.ModelDebugOptionsComponent
  @_Concurrency.MainActor @preconcurrency public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
  public enum VisualizationMode : Swift.String {
    case none
    case normal
    case tangent
    case bitangent
    case baseColor
    case textureCoordinates
    case finalColor
    case finalAlpha
    case roughness
    case metallic
    case ambientOcclusion
    case specular
    case emissive
    case clearcoat
    case clearcoatRoughness
    case lightingDiffuse
    case lightingSpecular
    @available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
    case clearcoatNormal
    public init?(rawValue: Swift.String)
    @available(iOS 14.0, macOS 11.0, macCatalyst 14.0, *)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct PlayAudioAction : RealityFoundation.EntityAction, Swift.Codable {
  public var targetEntity: RealityFoundation.ActionEntityResolution
  public var audioResourceName: Swift.String
  public var gain: RealityFoundation.Audio.Decibel
  public var useControlledPlayback: Swift.Bool
  public var animatedValueType: (any RealityFoundation.AnimatableData.Type)? {
    get
  }
  public init(targetEntity: RealityFoundation.ActionEntityResolution = .sourceEntity, audioResourceName: Swift.String, gain: RealityFoundation.Audio.Decibel = 0, useControlledPlayback: Swift.Bool = true)
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias EventParameterType = Swift.Never
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RKEntityActionAnimationStyle : Swift.String, Swift.Codable, Swift.CaseIterable {
  case basic
  case playful
  case wild
  public init?(rawValue: Swift.String)
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias AllCases = [RealityFoundation.__RKEntityActionAnimationStyle]
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [RealityFoundation.__RKEntityActionAnimationStyle] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RKEntityShowActionBuildInAnimationType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case none
  case moveFromLeft
  case moveFromRight
  case moveFromFront
  case moveFromRear
  case moveFromAbove
  case moveFromBelow
  case pop
  case scale
  case scaleBig
  public init?(rawValue: Swift.String)
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias AllCases = [RealityFoundation.__RKEntityShowActionBuildInAnimationType]
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [RealityFoundation.__RKEntityShowActionBuildInAnimationType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public enum __RKEntityHideActionBuildOutAnimationType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case none
  case moveToLeft
  case moveToRight
  case moveToFront
  case moveToRear
  case moveToAbove
  case moveToBelow
  case pop
  case scale
  case scaleUp
  public init?(rawValue: Swift.String)
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias AllCases = [RealityFoundation.__RKEntityHideActionBuildOutAnimationType]
  @available(iOS 13.0, macOS 10.15, macCatalyst 13.0, *)
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [RealityFoundation.__RKEntityHideActionBuildOutAnimationType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityVisibilityAction : RealityFoundation.__RKEntityAction {
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  override public init(targetEntity: RealityFoundation.Entity? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityToggleVisibilityAction : RealityFoundation.__RKEntityVisibilityAction {
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  override public init(targetEntity: RealityFoundation.Entity? = nil)
  @objc deinit
}
@available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntitySetOpacityAction : RealityFoundation.__RKEntityVisibilityAction {
  @preconcurrency @_Concurrency.MainActor public init(targetEntity: RealityFoundation.Entity?, duration: Swift.Float = 1.0, opacity: Swift.Float = 1.0)
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityShowAction : RealityFoundation.__RKEntityVisibilityAction {
  @preconcurrency @_Concurrency.MainActor public init(targetEntity: RealityFoundation.Entity?, duration: Swift.Float = 1.0, distance: Swift.Float = 10.0, ease: RealityFoundation.__RKEntityMoveEase = .none, easeType: RealityFoundation.__RKEntityMoveEaseType = .easeIn, fadeIn: Swift.Bool = false, finalOpacity: Swift.Float = 1.0, respectPhysics: Swift.Bool = false, physicsAngularCoefficient: Swift.Float = 0.0, physicsLinearCoefficient: Swift.Float = 0.0, animationStyle: RealityFoundation.__RKEntityActionAnimationStyle = .basic, buildInAnimationType: RealityFoundation.__RKEntityShowActionBuildInAnimationType = .none)
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  override public var description: Swift.String {
    get
  }
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityHideAction : RealityFoundation.__RKEntityVisibilityAction {
  @preconcurrency @_Concurrency.MainActor public init(targetEntity: RealityFoundation.Entity?, duration: Swift.Float = 1.0, distance: Swift.Float = 10.0, ease: RealityFoundation.__RKEntityMoveEase = .none, easeType: RealityFoundation.__RKEntityMoveEaseType = .easeIn, fadeOut: Swift.Bool = false, finalOpacity: Swift.Float = 0.0, respectPhysics: Swift.Bool = false, physicsAngularCoefficient: Swift.Float = 0.0, physicsLinearCoefficient: Swift.Float = 0.0, animationStyle: RealityFoundation.__RKEntityActionAnimationStyle = .basic, buildOutAnimationType: RealityFoundation.__RKEntityHideActionBuildOutAnimationType = .none)
  @discardableResult
  override public func perform(with context: RealityFoundation.__RKEntityActionContext) -> Swift.Bool
  override public func reversed() -> RealityFoundation.__RKEntityAction?
  override public var description: Swift.String {
    get
  }
  override public func stop() -> Swift.Bool
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public func clone(matching entity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> (action: RealityFoundation.__RKEntityAction?, anythingChanged: Swift.Bool)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKSoundTrigger : RealityFoundation.__RKEntityTrigger {
  override public init()
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@preconcurrency @_Concurrency.MainActor public protocol HasHierarchy : RealityFoundation.Entity {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.HasHierarchy {
  @_Concurrency.MainActor @preconcurrency public var parent: RealityFoundation.Entity? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func setParent(_ parent: RealityFoundation.Entity?, preservingWorldTransform: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public var children: RealityFoundation.Entity.ChildCollection {
    get
    set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public func addChild(_ entity: RealityFoundation.Entity, preservingWorldTransform: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public func removeChild(_ entity: RealityFoundation.Entity, preservingWorldTransform: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public func removeFromParent(preservingWorldTransform: Swift.Bool = false)
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
public struct PortalCrossingComponent : RealityFoundation.Component {
  public init()
}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.PortalCrossingComponent {
  @preconcurrency @_Concurrency.MainActor public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.PortalCrossingComponent
  @preconcurrency @_Concurrency.MainActor public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
public struct PhysicsJointsComponent : RealityFoundation.Component, Swift.Equatable {
  public init()
  public var joints: RealityFoundation.PhysicsJoints
  public static func == (a: RealityFoundation.PhysicsJointsComponent, b: RealityFoundation.PhysicsJointsComponent) -> Swift.Bool
}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.PhysicsJointsComponent {
  public static func __fromCore(_ coreComponent: RealityFoundation.__ComponentRef) -> RealityFoundation.PhysicsJointsComponent
  public func __toCore(_ coreComponent: RealityFoundation.__ComponentRef)
  public static var __coreComponentType: RealityFoundation.__ComponentTypeRef {
    get
  }
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityPlacementTrigger : RealityFoundation.__RKEntityTrigger {
  override public init()
  override public func matches(with trigger: RealityFoundation.__RKEntityTrigger) -> Swift.Bool
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityRemovalTrigger : RealityFoundation.__RKEntityTrigger {
  override public init()
  override public func matches(with trigger: RealityFoundation.__RKEntityTrigger) -> Swift.Bool
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
public class __RKEntityInteraction : Swift.CustomStringConvertible {
  public var trigger: RealityFoundation.__RKEntityTrigger {
    get
  }
  public var action: RealityFoundation.__RKEntityAction {
    get
  }
  public var enabled: Swift.Bool
  public var accessibilityDescription: Swift.String?
  public init(trigger: RealityFoundation.__RKEntityTrigger, action: RealityFoundation.__RKEntityAction)
  @available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
  convenience public init(trigger: RealityFoundation.__RKEntityTrigger, action: RealityFoundation.__RKEntityAction, accessibilityDescription: Swift.String? = nil)
  public func fire(context: RealityFoundation.__RKEntityActionContext)
  public var description: Swift.String {
    get
  }
  public func clone(matching targetEntity: RealityFoundation.Entity, newEntity: RealityFoundation.Entity) -> RealityFoundation.__RKEntityInteraction?
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKSimulationSceneCoordinatorState : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKSimulationSceneCoordinatorState : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Transform : Swift.Sendable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Transform : Swift.BitwiseCopyable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityActionAnimationStyle : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityActionAnimationStyle : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityActionAnimationStyle : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityActionMultiplePerformBehavior : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityActionMultiplePerformBehavior : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityActionMultiplePerformBehavior : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityAudioActionType : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityAudioActionType : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityAudioActionType : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKAudioSpatialModeSelection : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKAudioSpatialModeSelection : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKAudioSpatialModeSelection : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityEmphasisAnimationType : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityEmphasisAnimationType : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityEmphasisAnimationType : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityGroupActionOrder : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityGroupActionOrder : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityHideActionBuildOutAnimationType : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityHideActionBuildOutAnimationType : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityHideActionBuildOutAnimationType : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityMoveEase : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityMoveEase : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityMoveEase : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityMoveEaseType : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityMoveEaseType : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityMoveEaseType : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityMoveSelection : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityMoveSelection : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityMoveSelection : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityShowActionBuildInAnimationType : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityShowActionBuildInAnimationType : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityShowActionBuildInAnimationType : Swift.RawRepresentable {}
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@available(visionOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 13.3, message: "Use the ChannelAudioComponent, AmbientAudioComponent, or SpatialAudioComponent instead.")
@available(macCatalyst, introduced: 13.0, deprecated: 16.3, message: "Use the ChannelAudioComponent, AmbientAudioComponent, or SpatialAudioComponent instead.")
@available(iOS, introduced: 13.0, deprecated: 16.3, message: "Use the ChannelAudioComponent, AmbientAudioComponent, or SpatialAudioComponent instead.")
extension RealityFoundation.AudioResource.InputMode : Swift.Equatable {}
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@available(visionOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 13.3, message: "Use the ChannelAudioComponent, AmbientAudioComponent, or SpatialAudioComponent instead.")
@available(macCatalyst, introduced: 13.0, deprecated: 16.3, message: "Use the ChannelAudioComponent, AmbientAudioComponent, or SpatialAudioComponent instead.")
@available(iOS, introduced: 13.0, deprecated: 16.3, message: "Use the ChannelAudioComponent, AmbientAudioComponent, or SpatialAudioComponent instead.")
extension RealityFoundation.AudioResource.InputMode : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityTriggerSpecification.Name : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityTriggerSpecification.Name : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityTriggerSpecification.Name : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityActionSpecification.Name : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityActionSpecification.Name : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityActionSpecification.Name : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Scene : Swift.Sendable {}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.NetworkCompatibilityToken.Compatibility : Swift.Equatable {}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.NetworkCompatibilityToken.Compatibility : Swift.Hashable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.TextureResource.Semantic : Swift.Equatable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.TextureResource.Semantic : Swift.Hashable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.TextureResource.MipmapsMode : Swift.Equatable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.TextureResource.MipmapsMode : Swift.Hashable {}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.RealityRenderer.EntityCollection : Swift.Sendable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityActionGroup.Ordering : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityActionGroup.Ordering : Swift.Hashable {}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.EmphasizeAction.EmphasisAnimationStyle : Swift.Equatable {}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.EmphasizeAction.EmphasisAnimationStyle : Swift.Hashable {}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.EmphasizeAction.EmphasisAnimationStyle : Swift.RawRepresentable {}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.EmphasizeAction.EmphasisMotionType : Swift.Equatable {}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.EmphasizeAction.EmphasisMotionType : Swift.Hashable {}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.EmphasizeAction.EmphasisMotionType : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.AudioPlaybackController : Swift.Sendable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity.ComponentSet : Swift.Sendable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.SynchronizationComponent.OwnershipTransferMode : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.SynchronizationComponent.OwnershipTransferMode : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.SynchronizationComponent.OwnershipTransferCompletionResult : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.SynchronizationComponent.OwnershipTransferCompletionResult : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__REAnchoringType.Name : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__REAnchoringType.Name : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__REAnchoringType.Name : Swift.RawRepresentable {}
@available(macOS 13.0, iOS 16.0, macCatalyst 16.0, *)
extension RealityFoundation.__MaterialResource : RealityFoundation.Resource {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Entity.ChildCollection : Swift.Sendable {}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
extension RealityFoundation.IKRig.Joint.LimitsDefinition.Axis : Swift.Equatable {}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
extension RealityFoundation.IKRig.Joint.LimitsDefinition.Axis : Swift.Hashable {}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
extension RealityFoundation.IKRig.Constraint.IKPositionDemand.Mode : Swift.Equatable {}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
extension RealityFoundation.IKRig.Constraint.IKPositionDemand.Mode : Swift.Hashable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.TweenMode : Swift.Equatable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.TweenMode : Swift.Hashable {}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.FromToByAction.DecodingErrors : Swift.Equatable {}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.FromToByAction.DecodingErrors : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.AnimationTimingFunction.__Mode : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.AnimationTimingFunction.__Mode : Swift.Hashable {}
@available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.VideoPlaybackController : Swift.Sendable {}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.VideoPlaybackController.ViewingMode : Swift.Equatable {}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.VideoPlaybackController.ViewingMode : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityProximityTrigger.ExitType : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityProximityTrigger.ExitType : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntityProximityTrigger.ExitType : Swift.RawRepresentable {}
@available(iOS 17.0, macOS 12.0, macCatalyst 15.0, *)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension RealityFoundation.PhotogrammetrySession.Request.Detail : Swift.RawRepresentable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffers.Rate : Swift.Equatable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffers.Rate : Swift.Hashable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffers.ElementType : Swift.Equatable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MeshBuffers.ElementType : Swift.Hashable {}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.AudioGeneratorController : Swift.Sendable {}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.VideoPlayerEvents.ContentTypeDidChange.ContentType : Swift.Equatable {}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.VideoPlayerEvents.ContentTypeDidChange.ContentType : Swift.Hashable {}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.VideoPlayerEvents.ContentTypeDidChange.ContentType : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__Archiving.ArchivingError : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__Archiving.ArchivingError : Swift.Hashable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MaterialParameterTypes.FaceCulling : Swift.Equatable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.MaterialParameterTypes.FaceCulling : Swift.Hashable {}
@available(visionOS 1.0, macCatalyst 18.0, macOS 15.0, iOS 18.0, *)
extension RealityFoundation.MaterialParameterTypes.TriangleFillMode : Swift.Equatable {}
@available(visionOS 1.0, macCatalyst 18.0, macOS 15.0, iOS 18.0, *)
extension RealityFoundation.MaterialParameterTypes.TriangleFillMode : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.Scene.AnchorCollection : Swift.Sendable {}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, *)
@available(macOS, unavailable)
extension RealityFoundation.GroundingShadowComponent.FadeBehaviorNearPhysicalObjects : Swift.Equatable {}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, *)
@available(macOS, unavailable)
extension RealityFoundation.GroundingShadowComponent.FadeBehaviorNearPhysicalObjects : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.BoundingBox : Swift.Sendable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.BoundingBox : Swift.BitwiseCopyable {}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.ModelSortGroup.DepthPass : Swift.Equatable {}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.ModelSortGroup.DepthPass : Swift.Hashable {}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.ModelSortGroup.PlanarUIPlacement : Swift.Equatable {}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.ModelSortGroup.PlanarUIPlacement : Swift.Hashable {}
@available(visionOS 2.0, *)
@available(macOS, unavailable)
@available(iOS, unavailable)
@available(tvOS, unavailable)
extension RealityFoundation.Entity.CoordinateSpaceReference : Swift.Equatable {}
@available(visionOS 2.0, *)
@available(macOS, unavailable)
@available(iOS, unavailable)
@available(tvOS, unavailable)
extension RealityFoundation.Entity.CoordinateSpaceReference : Swift.Hashable {}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.LowLevelMesh.VertexSemantic : Swift.Equatable {}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.LowLevelMesh.VertexSemantic : Swift.Hashable {}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.LowLevelMesh : Swift.Sendable {}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
extension RealityFoundation.CameraFieldOfViewOrientation : Swift.Equatable {}
@available(visionOS 2.0, iOS 18.0, macCatalyst 18.0, macOS 15.0, *)
extension RealityFoundation.CameraFieldOfViewOrientation : Swift.Hashable {}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.LowLevelTexture : Swift.Sendable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.AnimationPlaybackController : Swift.Sendable {}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.Entity.ForwardDirection : Swift.Equatable {}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.Entity.ForwardDirection : Swift.Hashable {}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.MeshResource.ShapeExtrusionOptions.ChamferMode : Swift.Equatable {}
@available(visionOS 2.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.MeshResource.ShapeExtrusionOptions.ChamferMode : Swift.Hashable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
@available(visionOS, unavailable)
extension RealityFoundation.CustomMaterialError : Swift.Equatable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
@available(visionOS, unavailable)
extension RealityFoundation.CustomMaterialError : Swift.Hashable {}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.ParticleEmitterComponent.SimulationSpace : Swift.Equatable {}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.ParticleEmitterComponent.SimulationSpace : Swift.Hashable {}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.ParticleEmitterComponent.SimulationState : Swift.Equatable {}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.ParticleEmitterComponent.SimulationState : Swift.Hashable {}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.ForceMode : Swift.Hashable {}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.ForceEffectComponent.SimulationState : Swift.Equatable {}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.ForceEffectComponent.SimulationState : Swift.Hashable {}
@available(visionOS 2.0, *)
@available(macOS, unavailable)
@available(iOS, unavailable)
@available(macCatalyst, unavailable)
extension RealityFoundation.VideoPlayerComponent.ImmersiveViewingMode : Swift.Equatable {}
@available(visionOS 2.0, *)
@available(macOS, unavailable)
@available(iOS, unavailable)
@available(macCatalyst, unavailable)
extension RealityFoundation.VideoPlayerComponent.ImmersiveViewingMode : Swift.Hashable {}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.ShaderGraphMaterial.LoadError : Swift.Equatable {}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.ShaderGraphMaterial.LoadError : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__SceneResource : Swift.Sendable {}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.ShapeResourceError : Swift.Equatable {}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.ShapeResourceError : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntitySpinDirectionType : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntitySpinDirectionType : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.__RKEntitySpinDirectionType : Swift.RawRepresentable {}
@available(iOS 17.0, macOS 12.0, macCatalyst 15.0, *)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension RealityFoundation.PhotogrammetrySession.Configuration.SampleOrdering : Swift.Equatable {}
@available(iOS 17.0, macOS 12.0, macCatalyst 15.0, *)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension RealityFoundation.PhotogrammetrySession.Configuration.SampleOrdering : Swift.Hashable {}
@available(iOS 17.0, macOS 12.0, macCatalyst 15.0, *)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension RealityFoundation.PhotogrammetrySession.Configuration.FeatureSensitivity : Swift.Equatable {}
@available(iOS 17.0, macOS 12.0, macCatalyst 15.0, *)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension RealityFoundation.PhotogrammetrySession.Configuration.FeatureSensitivity : Swift.Hashable {}
@available(macOS 14.0, macCatalyst 17.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(iOS, unavailable)
@available(visionOS, unavailable)
extension RealityFoundation.PhotogrammetrySession.Configuration.CustomDetailSpecification.TextureDimension : Swift.RawRepresentable {}
@available(macOS 15.0, macCatalyst 18.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(iOS, unavailable)
@available(visionOS, unavailable)
extension RealityFoundation.PhotogrammetrySession.Configuration.MeshPrimitive : Swift.Hashable {}
@available(macOS 14.0, iOS 17.0, macCatalyst 17.0, *)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension RealityFoundation.PhotogrammetrySession.Output.ProcessingStage : Swift.Equatable {}
@available(macOS 14.0, iOS 17.0, macCatalyst 17.0, *)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension RealityFoundation.PhotogrammetrySession.Output.ProcessingStage : Swift.Hashable {}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.ShaderGraphMaterial.Error : Swift.Equatable {}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.ShaderGraphMaterial.Error : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, macCatalyst 16.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 13.0)
@_originallyDefinedIn(module: "RealityKit", iOS 16.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 16.0)
extension RealityFoundation.__REAssetBundle.ExportOptions.PlatformRequirement : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, macCatalyst 16.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 13.0)
@_originallyDefinedIn(module: "RealityKit", iOS 16.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 16.0)
extension RealityFoundation.__REAssetBundle.ExportOptions.PlatformRequirement : Swift.Hashable {}
@available(iOS 18.0, *)
@available(visionOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
extension RealityFoundation.SpatialTrackingSession.Configuration.Camera : Swift.Equatable {}
@available(iOS 18.0, *)
@available(visionOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
extension RealityFoundation.SpatialTrackingSession.Configuration.Camera : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@available(*, deprecated, message: "Pass mappings in __RKMaterialParameterBlock are no longer supported. Please use CustomMaterial instead.")
extension RealityFoundation.__RKMaterialParameterBlock.TransparentPass : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@available(*, deprecated, message: "Pass mappings in __RKMaterialParameterBlock are no longer supported. Please use CustomMaterial instead.")
extension RealityFoundation.__RKMaterialParameterBlock.TransparentPass : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@available(*, deprecated, message: "Pass mappings in __RKMaterialParameterBlock are no longer supported. Please use CustomMaterial instead.")
extension RealityFoundation.__RKMaterialParameterBlock.TransparentPass : Swift.RawRepresentable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@available(*, deprecated, message: "Pass mappings in __RKMaterialParameterBlock are no longer supported. Please use CustomMaterial instead.")
extension RealityFoundation.__RKMaterialParameterBlock.OpaquePass : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@available(*, deprecated, message: "Pass mappings in __RKMaterialParameterBlock are no longer supported. Please use CustomMaterial instead.")
extension RealityFoundation.__RKMaterialParameterBlock.OpaquePass : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
@available(*, deprecated, message: "Pass mappings in __RKMaterialParameterBlock are no longer supported. Please use CustomMaterial instead.")
extension RealityFoundation.__RKMaterialParameterBlock.OpaquePass : Swift.RawRepresentable {}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.ReferenceComponent.LoadingPolicy : Swift.Equatable {}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.ReferenceComponent.LoadingPolicy : Swift.Hashable {}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.ReferenceComponent.ReferenceState : Swift.Equatable {}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.ReferenceComponent.ReferenceState : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.RotationOrder : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.RotationOrder : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.RotationOrder : Swift.RawRepresentable {}
@available(macOS 15.0, iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
extension RealityFoundation.EntityGeometricPins : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.AnimationRepeatMode : Swift.Equatable {}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.AnimationRepeatMode : Swift.Hashable {}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.__MeshCompileOptions.AttributeCompressionType : Swift.Equatable {}
@available(visionOS 1.0, macOS 15.0, iOS 18.0, macCatalyst 18.0, *)
extension RealityFoundation.__MeshCompileOptions.AttributeCompressionType : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.CollisionComponent.Mode : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.CollisionComponent.Mode : Swift.Hashable {}
@available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.ModelDebugOptionsComponent.VisualizationMode : Swift.Equatable {}
@available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.ModelDebugOptionsComponent.VisualizationMode : Swift.Hashable {}
@available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityFoundation.ModelDebugOptionsComponent.VisualizationMode : Swift.RawRepresentable {}
