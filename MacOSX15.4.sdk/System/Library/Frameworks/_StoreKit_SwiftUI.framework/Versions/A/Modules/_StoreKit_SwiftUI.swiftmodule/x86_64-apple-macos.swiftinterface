// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.5 clang-1700.0.13.3)
// swift-module-flags: -target x86_64-apple-macos15.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Osize -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 814.4.24.1.3 -module-name _StoreKit_SwiftUI
// swift-module-flags-ignorable:  -interface-compiler-version 6.1
import AppKit
import Combine
import CoreGraphics
import CryptoKit/*.Insecure*/
import DeveloperToolsSupport
import Foundation
@_exported import StoreKit
import Swift
import SwiftUI
import _Concurrency
@_exported import _StoreKit_SwiftUI
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct PagedProminentPickerSubscriptionStoreControlStyle : _StoreKit_SwiftUI.SubscriptionStoreControlStyle {
  public typealias Placement = _StoreKit_SwiftUI.PagedPickerSubscriptionStoreControlStyle.Placement
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: _StoreKit_SwiftUI.PagedProminentPickerSubscriptionStoreControlStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI032PagedProminentPickerSubscriptionA12ControlStyleV8makeBody13configurationQrAA0haiJ13ConfigurationV_tF", 0) __
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _StoreKit_SwiftUI.SubscriptionStoreControlStyle where Self == _StoreKit_SwiftUI.PagedProminentPickerSubscriptionStoreControlStyle {
  @_Concurrency.MainActor @preconcurrency public static var pagedProminentPicker: _StoreKit_SwiftUI.PagedProminentPickerSubscriptionStoreControlStyle {
    get
  }
}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct AutomaticSubscriptionStorePickerOptionLabel : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI021AutomaticSubscriptionA17PickerOptionLabelV4bodyQrvp", 0) __
}
extension SwiftUICore.View {
  @available(iOS 17.4, macOS 14.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
  nonisolated public func subscriptionPromotionalOffer(offer: @escaping (_ product: StoreKit.Product, _ subscriptionInfo: StoreKit.Product.SubscriptionInfo) -> StoreKit.Product.SubscriptionOffer?, signature: @escaping (_ product: StoreKit.Product, _ subscriptionInfo: StoreKit.Product.SubscriptionInfo, _ promotionalOffer: StoreKit.Product.SubscriptionOffer) async throws -> StoreKit.Product.SubscriptionOffer.Signature) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
@_Concurrency.MainActor @preconcurrency public struct AutomaticProductViewStyle : _StoreKit_SwiftUI.ProductViewStyle {
  nonisolated public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: _StoreKit_SwiftUI.AutomaticProductViewStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI25AutomaticProductViewStyleV8makeBody13configurationQrAA0fgH13ConfigurationV_tF", 0) __
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension _StoreKit_SwiftUI.ProductViewStyle where Self == _StoreKit_SwiftUI.AutomaticProductViewStyle {
  @_Concurrency.MainActor @preconcurrency public static var automatic: _StoreKit_SwiftUI.AutomaticProductViewStyle {
    get
  }
}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct PagedPickerSubscriptionStoreControlStyle : _StoreKit_SwiftUI.SubscriptionStoreControlStyle {
  public struct Placement : _StoreKit_SwiftUI.SubscriptionStoreControlPlacement {
    public var rawValue: _StoreKit_SwiftUI.SubscriptionStoreControlPlacementKey {
      get
    }
    public init?(rawValue: _StoreKit_SwiftUI.SubscriptionStoreControlPlacementKey)
    public static var automatic: _StoreKit_SwiftUI.PagedPickerSubscriptionStoreControlStyle.Placement {
      get
    }
    public static var scrollView: _StoreKit_SwiftUI.PagedPickerSubscriptionStoreControlStyle.Placement {
      get
    }
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    public static var bottomBar: _StoreKit_SwiftUI.PagedPickerSubscriptionStoreControlStyle.Placement {
      get
    }
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    public static var buttonsInBottomBar: _StoreKit_SwiftUI.PagedPickerSubscriptionStoreControlStyle.Placement {
      get
    }
    @available(iOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
    @available(tvOS, unavailable)
    public typealias RawValue = _StoreKit_SwiftUI.SubscriptionStoreControlPlacementKey
  }
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: _StoreKit_SwiftUI.PagedPickerSubscriptionStoreControlStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI023PagedPickerSubscriptionA12ControlStyleV8makeBody13configurationQrAA0gahI13ConfigurationV_tF", 0) __
}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, visionOS 2.0, *)
@available(tvOS, unavailable)
extension _StoreKit_SwiftUI.SubscriptionStoreControlStyle where Self == _StoreKit_SwiftUI.PagedPickerSubscriptionStoreControlStyle {
  @_Concurrency.MainActor @preconcurrency public static var pagedPicker: _StoreKit_SwiftUI.PagedPickerSubscriptionStoreControlStyle {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_Concurrency.MainActor @preconcurrency public struct SubscriptionOptionGroupSet<GroupID, Label, MarketingContent> : _StoreKit_SwiftUI.StoreContent where GroupID : Swift.Hashable, Label : SwiftUICore.View, MarketingContent : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(idType: GroupID.Type = GroupID.self, groupedBy transform: @escaping (StoreKit.Product) -> GroupID, @SwiftUICore.ViewBuilder label: @escaping (GroupID) -> Label, @SwiftUICore.ViewBuilder marketingContent: @escaping (GroupID) -> MarketingContent)
  @_Concurrency.MainActor @preconcurrency public init(idType: GroupID.Type = GroupID.self, groupedBy transform: @escaping (StoreKit.Product) -> GroupID, @SwiftUICore.ViewBuilder label: @escaping (GroupID) -> Label) where MarketingContent == _StoreKit_SwiftUI.AutomaticSubscriptionStoreMarketingContent
  @_Concurrency.MainActor @preconcurrency public var body: Swift.Never {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var _identifiedContent: _StoreKit_SwiftUI.IdentifiedStoreContent<some SwiftUICore.View> {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Body = Swift.Never
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias _IdentifiedView = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI26SubscriptionOptionGroupSetV18_identifiedContentAA010IdentifiedaJ0VyQrGvp", 0) __<GroupID, Label, MarketingContent>
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
@_Concurrency.MainActor @preconcurrency public struct AutomaticSubscriptionStoreControlStyle : _StoreKit_SwiftUI.SubscriptionStoreControlStyle {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public struct Placement : _StoreKit_SwiftUI.SubscriptionStoreControlPlacement {
    public var rawValue: _StoreKit_SwiftUI.SubscriptionStoreControlPlacementKey {
      get
    }
    public init?(rawValue: _StoreKit_SwiftUI.SubscriptionStoreControlPlacementKey)
    public static var automatic: _StoreKit_SwiftUI.AutomaticSubscriptionStoreControlStyle.Placement {
      get
    }
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
    public typealias RawValue = _StoreKit_SwiftUI.SubscriptionStoreControlPlacementKey
  }
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: _StoreKit_SwiftUI.AutomaticSubscriptionStoreControlStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI021AutomaticSubscriptionA12ControlStyleV8makeBody13configurationQrAA0fagH13ConfigurationV_tF", 0) __
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension _StoreKit_SwiftUI.SubscriptionStoreControlStyle where Self == _StoreKit_SwiftUI.AutomaticSubscriptionStoreControlStyle {
  @_Concurrency.MainActor @preconcurrency public static var automatic: _StoreKit_SwiftUI.AutomaticSubscriptionStoreControlStyle {
    get
  }
}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, visionOS 2.0, *)
@available(tvOS, unavailable)
extension _StoreKit_SwiftUI.SubscriptionStoreControlStyle {
  public typealias SubscriptionPickerOption = _StoreKit_SwiftUI.SubscriptionStorePickerOption
}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, visionOS 2.0, *)
@available(tvOS, unavailable)
extension _StoreKit_SwiftUI.SubscriptionStorePickerOption {
  @_Concurrency.MainActor @preconcurrency public init(_ option: _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.Option, @SwiftUICore.ViewBuilder label: @escaping (_StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.PickerOption) -> Label)
  @_Concurrency.MainActor @preconcurrency public init(_ option: _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.Option) where Label == _StoreKit_SwiftUI.AutomaticSubscriptionStorePickerOptionLabel
  @_Concurrency.MainActor @preconcurrency public init(_ option: _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.PickerOption) where Label == _StoreKit_SwiftUI.AutomaticSubscriptionStorePickerOptionLabel
  @available(iOS, unavailable, message: "Use your label as a standalone view instead of using SubscriptionPickerOption with a PickerOption value")
  @available(macOS, unavailable, message: "Use your label as a standalone view instead of using SubscriptionPickerOption with a PickerOption value")
  @available(watchOS, unavailable, message: "Use your label as a standalone view instead of using SubscriptionPickerOption with a PickerOption value")
  @available(visionOS, unavailable, message: "Use your label as a standalone view instead of using SubscriptionPickerOption with a PickerOption value")
  @_Concurrency.MainActor @preconcurrency public init(_ option: _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.PickerOption, @SwiftUICore.ViewBuilder label: @escaping (_StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.PickerOption) -> Label)
}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct SubscriptionStorePickerOption<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI012SubscriptionA12PickerOptionV4bodyQrvp", 0) __<Label>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension _StoreKit_SwiftUI.SubscriptionStoreControlStyle {
  public typealias SubscribeButton = _StoreKit_SwiftUI.SubscriptionStoreButton
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension _StoreKit_SwiftUI.SubscriptionStoreButton {
  @_Concurrency.MainActor @preconcurrency public init(_ option: _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.Option)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_Concurrency.MainActor @preconcurrency public struct SubscriptionStoreButton : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI012SubscriptionA6ButtonV4bodyQrvp", 0) __
}
@available(iOS 15.0, macCatalyst 15.0, macOS 14.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @preconcurrency nonisolated public func refundRequestSheet(for transactionID: StoreKit.Transaction.ID, isPresented: SwiftUICore.Binding<Swift.Bool>, onDismiss: (@_Concurrency.MainActor (Swift.Result<StoreKit.Transaction.RefundRequestStatus, StoreKit.Transaction.RefundRequestError>) -> ())? = nil) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
public enum EntitlementTaskState<Value> {
  case loading
  case failure(any Swift.Error)
  case success(Value)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension _StoreKit_SwiftUI.EntitlementTaskState : Swift.Sendable where Value : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension _StoreKit_SwiftUI.EntitlementTaskState {
  public var value: Value? {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension _StoreKit_SwiftUI.EntitlementTaskState where Value == StoreKit.VerificationResult<StoreKit.Transaction>? {
  public var transaction: StoreKit.VerificationResult<StoreKit.Transaction>? {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension _StoreKit_SwiftUI.EntitlementTaskState {
  public func map<NewValue>(_ transform: (Value) throws -> NewValue) rethrows -> _StoreKit_SwiftUI.EntitlementTaskState<NewValue>
  public func map<NewValue>(_ transform: (Value) async throws -> NewValue) async rethrows -> _StoreKit_SwiftUI.EntitlementTaskState<NewValue>
  public func flatMap<NewValue>(_ transform: (Value) throws -> _StoreKit_SwiftUI.EntitlementTaskState<NewValue>) rethrows -> _StoreKit_SwiftUI.EntitlementTaskState<NewValue>
  public func flatMap<NewValue>(_ transform: (Value) async throws -> _StoreKit_SwiftUI.EntitlementTaskState<NewValue>) async rethrows -> _StoreKit_SwiftUI.EntitlementTaskState<NewValue>
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension SwiftUICore.View {
  nonisolated public func currentEntitlementTask(for productID: Swift.String, priority: _Concurrency.TaskPriority = .medium, action: @escaping (_StoreKit_SwiftUI.EntitlementTaskState<StoreKit.VerificationResult<StoreKit.Transaction>?>) async -> ()) -> some SwiftUICore.View
  
}
@available(iOS 15.0, macCatalyst 15.0, visionOS 1.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func manageSubscriptionsSheet(isPresented: SwiftUICore.Binding<Swift.Bool>) -> some SwiftUICore.View
  
  @available(iOS 17.0, macCatalyst 17.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func manageSubscriptionsSheet(isPresented: SwiftUICore.Binding<Swift.Bool>, subscriptionGroupID: Swift.String) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
@_Concurrency.MainActor @preconcurrency public struct RegularProductViewStyle : _StoreKit_SwiftUI.ProductViewStyle {
  nonisolated public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: _StoreKit_SwiftUI.RegularProductViewStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI23RegularProductViewStyleV8makeBody13configurationQrAA0fgH13ConfigurationV_tF", 0) __
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension _StoreKit_SwiftUI.ProductViewStyle where Self == _StoreKit_SwiftUI.RegularProductViewStyle {
  @_Concurrency.MainActor @preconcurrency public static var regular: _StoreKit_SwiftUI.RegularProductViewStyle {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension SwiftUICore.View {
  nonisolated public func storeButton(_ visibility: SwiftUICore.Visibility, for buttonKinds: _StoreKit_SwiftUI.StoreButtonKind...) -> some SwiftUICore.View
  
}
extension _StoreKit_SwiftUI.StoreContent {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func storeButton(_ visibility: SwiftUICore.Visibility, for buttonKinds: _StoreKit_SwiftUI.StoreButtonKind...) -> some _StoreKit_SwiftUI.StoreContent
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
public struct StoreButtonKind {
  public static var restorePurchases: _StoreKit_SwiftUI.StoreButtonKind {
    get
  }
  @available(tvOS, unavailable)
  public static var cancellation: _StoreKit_SwiftUI.StoreButtonKind {
    get
  }
  @available(macOS 15.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static var redeemCode: _StoreKit_SwiftUI.StoreButtonKind {
    get
  }
  public static var signIn: _StoreKit_SwiftUI.StoreButtonKind {
    get
  }
  public static var policies: _StoreKit_SwiftUI.StoreButtonKind {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension StoreKit.Product {
  public enum TaskState : Swift.Sendable {
    case loading
    case unavailable
    case failure(any Swift.Error)
    case success(StoreKit.Product)
  }
  public enum CollectionTaskState : Swift.Sendable {
    case loading
    case failure(any Swift.Error)
    case success([StoreKit.Product], unavailable: [StoreKit.Product.ID])
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension StoreKit.Product.TaskState {
  public var product: StoreKit.Product? {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension StoreKit.Product.CollectionTaskState {
  public var products: [StoreKit.Product]? {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension SwiftUICore.View {
  nonisolated public func storeProductTask(for id: StoreKit.Product.ID, priority: _Concurrency.TaskPriority = .medium, action: @escaping (StoreKit.Product.TaskState) async -> ()) -> some SwiftUICore.View
  
  nonisolated public func storeProductsTask(for ids: some Collection<Product.ID> & Sendable & Equatable, priority: _Concurrency.TaskPriority = .medium, action: @escaping (StoreKit.Product.CollectionTaskState) async -> ()) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct CompactPickerSubscriptionStoreControlStyle : _StoreKit_SwiftUI.SubscriptionStoreControlStyle {
  public struct Placement : _StoreKit_SwiftUI.SubscriptionStoreControlPlacement {
    public var rawValue: _StoreKit_SwiftUI.SubscriptionStoreControlPlacementKey {
      get
    }
    public init?(rawValue: _StoreKit_SwiftUI.SubscriptionStoreControlPlacementKey)
    public static var automatic: _StoreKit_SwiftUI.CompactPickerSubscriptionStoreControlStyle.Placement {
      get
    }
    public static var scrollView: _StoreKit_SwiftUI.CompactPickerSubscriptionStoreControlStyle.Placement {
      get
    }
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    public static var bottomBar: _StoreKit_SwiftUI.CompactPickerSubscriptionStoreControlStyle.Placement {
      get
    }
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    public static var buttonsInBottomBar: _StoreKit_SwiftUI.CompactPickerSubscriptionStoreControlStyle.Placement {
      get
    }
    @available(iOS 18.0, visionOS 2.0, macOS 15.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    public typealias RawValue = _StoreKit_SwiftUI.SubscriptionStoreControlPlacementKey
  }
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: _StoreKit_SwiftUI.CompactPickerSubscriptionStoreControlStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 18.0, visionOS 2.0, macOS 15.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI025CompactPickerSubscriptionA12ControlStyleV8makeBody13configurationQrAA0gahI13ConfigurationV_tF", 0) __
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _StoreKit_SwiftUI.SubscriptionStoreControlStyle where Self == _StoreKit_SwiftUI.CompactPickerSubscriptionStoreControlStyle {
  @_Concurrency.MainActor @preconcurrency public static var compactPicker: _StoreKit_SwiftUI.CompactPickerSubscriptionStoreControlStyle {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
@_Concurrency.MainActor @preconcurrency public struct SubscriptionStoreView<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  nonisolated public init(groupID: Swift.String, visibleRelationships: StoreKit.Product.SubscriptionRelationship = .all, @SwiftUICore.ViewBuilder marketingContent: () -> Content)
  nonisolated public init(productIDs: some Collection<Product.ID>, @SwiftUICore.ViewBuilder marketingContent: () -> Content)
  nonisolated public init(subscriptions: some Collection<Product>, @SwiftUICore.ViewBuilder marketingContent: () -> Content)
  nonisolated public init(groupID: Swift.String, visibleRelationships: StoreKit.Product.SubscriptionRelationship = .all) where Content == _StoreKit_SwiftUI.AutomaticSubscriptionStoreMarketingContent
  nonisolated public init(productIDs: some Collection<Product.ID>) where Content == _StoreKit_SwiftUI.AutomaticSubscriptionStoreMarketingContent
  nonisolated public init(subscriptions: some Collection<Product>) where Content == _StoreKit_SwiftUI.AutomaticSubscriptionStoreMarketingContent
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI012SubscriptionA4ViewV4bodyQrvp", 0) __<Content>
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
@_Concurrency.MainActor @preconcurrency public struct AutomaticSubscriptionStoreMarketingContent : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI021AutomaticSubscriptionA16MarketingContentV4bodyQrvp", 0) __
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension StoreKit.Product {
  public struct SubscriptionRelationship : Swift.OptionSet, Swift.Hashable {
    public var rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public static let current: StoreKit.Product.SubscriptionRelationship
    public static let downgrade: StoreKit.Product.SubscriptionRelationship
    public static let crossgrade: StoreKit.Product.SubscriptionRelationship
    public static let upgrade: StoreKit.Product.SubscriptionRelationship
    public static let all: StoreKit.Product.SubscriptionRelationship
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, macOS 14.0, *)
    public typealias ArrayLiteralElement = StoreKit.Product.SubscriptionRelationship
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, macOS 14.0, *)
    public typealias Element = StoreKit.Product.SubscriptionRelationship
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, macOS 14.0, *)
    public typealias RawValue = Swift.Int
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_Concurrency.MainActor @preconcurrency public struct AutomaticSubscriptionOptionGroupLabel : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI37AutomaticSubscriptionOptionGroupLabelV4bodyQrvp", 0) __
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 15.0, macCatalyst 16.0, visionOS 1.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func offerCodeRedemption(isPresented: SwiftUICore.Binding<Swift.Bool>, onCompletion: @escaping @_Concurrency.MainActor (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void = { _ in }) -> some SwiftUICore.View
  
}
@available(iOS 16.0, macCatalyst 16.0, visionOS 1.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor public struct RequestReviewAction {
  @_Concurrency.MainActor public func callAsFunction()
}
extension SwiftUICore.EnvironmentValues {
  @available(iOS 16.0, macCatalyst 16.0, macOS 13.0, visionOS 1.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public var requestReview: _StoreKit_SwiftUI.RequestReviewAction {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension SwiftUICore.View {
  nonisolated public func onInAppPurchaseStart(perform action: ((StoreKit.Product) async -> ())?) -> some SwiftUICore.View
  
  nonisolated public func inAppPurchaseOptions(_ options: ((StoreKit.Product) async -> Swift.Set<StoreKit.Product.PurchaseOption>)?) -> some SwiftUICore.View
  
  nonisolated public func onInAppPurchaseCompletion(perform action: ((StoreKit.Product, Swift.Result<StoreKit.Product.PurchaseResult, any Swift.Error>) async -> ())?) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func preferredSubscriptionOffer(_ offer: @escaping (_ product: StoreKit.Product, _ subscription: StoreKit.Product.SubscriptionInfo, _ eligibleOffers: [StoreKit.Product.SubscriptionOffer]) -> StoreKit.Product.SubscriptionOffer?) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension _StoreKit_SwiftUI.SubscriptionStoreView {
  nonisolated public init<C>(groupID: Swift.String, visibleRelationships: StoreKit.Product.SubscriptionRelationship = .all, @_StoreKit_SwiftUI.StoreContentBuilder content: () -> C) where Content == _StoreKit_SwiftUI.SubscriptionStoreContentView<C>, C : _StoreKit_SwiftUI.StoreContent
  nonisolated public init<C>(subscriptions: some Collection<Product>, @_StoreKit_SwiftUI.StoreContentBuilder content: () -> C) where Content == _StoreKit_SwiftUI.SubscriptionStoreContentView<C>, C : _StoreKit_SwiftUI.StoreContent
  nonisolated public init<C>(productIDs: some Collection<Product.ID>, @_StoreKit_SwiftUI.StoreContentBuilder content: () -> C) where Content == _StoreKit_SwiftUI.SubscriptionStoreContentView<C>, C : _StoreKit_SwiftUI.StoreContent
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_Concurrency.MainActor @preconcurrency public struct SubscriptionStoreContentView<Content> : SwiftUICore.View where Content : _StoreKit_SwiftUI.StoreContent {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI012SubscriptionA11ContentViewV4bodyQrvp", 0) __<Content>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct SubscriptionStoreControlPlacementKey : Swift.Hashable, Swift.Sendable {
  @available(tvOS, unavailable)
  public static var scrollView: _StoreKit_SwiftUI.SubscriptionStoreControlPlacementKey {
    get
  }
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static var bottomBar: _StoreKit_SwiftUI.SubscriptionStoreControlPlacementKey {
    get
  }
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static var buttonsInBottomBar: _StoreKit_SwiftUI.SubscriptionStoreControlPlacementKey {
    get
  }
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static var leading: _StoreKit_SwiftUI.SubscriptionStoreControlPlacementKey {
    get
  }
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static var trailing: _StoreKit_SwiftUI.SubscriptionStoreControlPlacementKey {
    get
  }
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static var bottom: _StoreKit_SwiftUI.SubscriptionStoreControlPlacementKey {
    get
  }
  public static func == (a: _StoreKit_SwiftUI.SubscriptionStoreControlPlacementKey, b: _StoreKit_SwiftUI.SubscriptionStoreControlPlacementKey) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
@preconcurrency @_Concurrency.MainActor public protocol SubscriptionStoreControlStyle {
  associatedtype Body : SwiftUICore.View
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  associatedtype Placement : _StoreKit_SwiftUI.SubscriptionStoreControlPlacement = _StoreKit_SwiftUI.AutomaticSubscriptionStoreControlPlacement
  typealias Configuration = _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
public struct SubscriptionStoreControlStyleConfiguration {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @_Concurrency.MainActor @preconcurrency public struct Icon : SwiftUICore.View {
    @usableFromInline
    @_Concurrency.MainActor @preconcurrency internal var icon: SwiftUICore.AnyView
    @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
      get
    }
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
    public typealias Body = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI012SubscriptionA25ControlStyleConfigurationV4IconV4bodyQrvp", 0) __
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public struct Section : Swift.Identifiable {
    public struct ID : Swift.Hashable {
      public static func == (a: _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.Section.ID, b: _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.Section.ID) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @_Concurrency.MainActor @preconcurrency public struct Header : SwiftUICore.View {
      @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
        get
      }
      @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
      public typealias Body = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI012SubscriptionA25ControlStyleConfigurationV7SectionV6HeaderV4bodyQrvp", 0) __
    }
    @_Concurrency.MainActor @preconcurrency public struct Footer : SwiftUICore.View {
      @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
        get
      }
      @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
      public typealias Body = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI012SubscriptionA25ControlStyleConfigurationV7SectionV6FooterV4bodyQrvp", 0) __
    }
    public var id: _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.Section.ID
    public var header: _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.Section.Header?
    public var options: [_StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.Option]
    public var footer: _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.Section.Footer?
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @dynamicMemberLookup public struct Option {
    public var subscription: StoreKit.Product {
      _read
    }
    public var activeOffer: StoreKit.Product.SubscriptionOffer? {
      _read
    }
    public var icon: _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.Icon? {
      get
    }
    public func subscribe()
    public subscript<T>(dynamicMember keyPath: Swift.KeyPath<StoreKit.Product, T>) -> T {
      get
    }
    public subscript<T>(dynamicMember keyPath: Swift.KeyPath<StoreKit.Product.SubscriptionInfo, T>) -> T? {
      get
    }
    public subscript<T>(dynamicMember keyPath: Swift.KeyPath<StoreKit.Product.SubscriptionInfo, T?>) -> T? {
      get
    }
  }
  @available(iOS 18.0, macOS 15.0, watchOS 11.0, visionOS 2.0, *)
  @available(tvOS, unavailable)
  @dynamicMemberLookup public struct PickerOption {
    public var subscription: StoreKit.Product {
      _read
    }
    public let isSelected: Swift.Bool
    public var icon: _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.Icon? {
      get
    }
    public var activeOffer: StoreKit.Product.SubscriptionOffer? {
      _read
    }
    public subscript<T>(dynamicMember keyPath: Swift.KeyPath<StoreKit.Product, T>) -> T {
      get
    }
    public subscript<T>(dynamicMember keyPath: Swift.KeyPath<StoreKit.Product.SubscriptionInfo, T>) -> T? {
      get
    }
    public subscript<T>(dynamicMember keyPath: Swift.KeyPath<StoreKit.Product.SubscriptionInfo, T?>) -> T? {
      get
    }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public var descriptionVisibility: SwiftUICore.Visibility {
    get
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public var groupDisplayName: Swift.String {
    get
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public var autoRenewPreference: StoreKit.Product? {
    get
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public var sections: [_StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.Section] {
    get
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public var options: [_StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.Option] {
    get
  }
  public var allOptions: [StoreKit.Product] {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.Option : Swift.Identifiable {
  public var id: StoreKit.Product.ID {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias ID = StoreKit.Product.ID
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.Option : Swift.Equatable {
  public static func == (lhs: _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.Option, rhs: _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.Option) -> Swift.Bool
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.Option : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, visionOS 2.0, *)
@available(tvOS, unavailable)
extension _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.PickerOption : Swift.Identifiable {
  public var id: StoreKit.Product.ID {
    get
  }
  @available(iOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @available(tvOS, unavailable, introduced: 17.0)
  public typealias ID = StoreKit.Product.ID
}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, visionOS 2.0, *)
@available(tvOS, unavailable)
extension _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.PickerOption : Swift.Equatable {
  public static func == (a: _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.PickerOption, b: _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.PickerOption) -> Swift.Bool
}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, visionOS 2.0, *)
@available(tvOS, unavailable)
extension _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.PickerOption : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension SwiftUICore.View {
  nonisolated public func subscriptionStoreControlStyle(_ style: some SubscriptionStoreControlStyle) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func subscriptionStoreControlStyle<S>(_ style: S, placement: S.Placement) -> some SwiftUICore.View where S : _StoreKit_SwiftUI.SubscriptionStoreControlStyle
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension _StoreKit_SwiftUI.StoreContent {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func subscriptionStoreControlStyle<S>(_ style: S, placement: S.Placement = .automatic) -> some _StoreKit_SwiftUI.StoreContent where S : _StoreKit_SwiftUI.SubscriptionStoreControlStyle
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration {
  @usableFromInline
  internal var visibleSubscriptionPlansInternal: [StoreKit.Product] {
    get
  }
  @usableFromInline
  internal var isEligibleForIntroOfferInternal: Swift.Bool {
    get
  }
  @usableFromInline
  internal var currentPlanIDInternal: StoreKit.Product.ID? {
    get
  }
  @usableFromInline
  internal var hiddenCurrentPlanInternal: StoreKit.Product? {
    get
  }
  @usableFromInline
  internal func actionInternal(productID: StoreKit.Product.ID)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal struct MarketingContent : SwiftUICore.View {
    @usableFromInline
    @_Concurrency.MainActor @preconcurrency internal var content: SwiftUICore.AnyView
    @usableFromInline
    @_Concurrency.MainActor @preconcurrency internal var body: some SwiftUICore.View {
      get
    }
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, macOS 14.0, *)
    @usableFromInline
    internal typealias Body = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI012SubscriptionA25ControlStyleConfigurationV16MarketingContentV4bodyQrvp", 0) __
  }
  @usableFromInline
  internal var marketingContentInternal: _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.MarketingContent {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public protocol SubscriptionStoreControlPlacement : Swift.RawRepresentable where Self.RawValue == _StoreKit_SwiftUI.SubscriptionStoreControlPlacementKey {
  static var automatic: Self { get }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct AutomaticSubscriptionStoreControlPlacement : _StoreKit_SwiftUI.SubscriptionStoreControlPlacement {
  public var rawValue: _StoreKit_SwiftUI.SubscriptionStoreControlPlacementKey {
    get
  }
  public init(rawValue: _StoreKit_SwiftUI.SubscriptionStoreControlPlacementKey)
  public static var automatic: _StoreKit_SwiftUI.AutomaticSubscriptionStoreControlPlacement {
    get
  }
  @available(tvOS, unavailable)
  public static var scrollView: _StoreKit_SwiftUI.AutomaticSubscriptionStoreControlPlacement {
    get
  }
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static var bottomBar: _StoreKit_SwiftUI.AutomaticSubscriptionStoreControlPlacement {
    get
  }
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static var buttonsInBottomBar: _StoreKit_SwiftUI.AutomaticSubscriptionStoreControlPlacement {
    get
  }
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static var leading: _StoreKit_SwiftUI.AutomaticSubscriptionStoreControlPlacement {
    get
  }
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static var trailing: _StoreKit_SwiftUI.AutomaticSubscriptionStoreControlPlacement {
    get
  }
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static var bottom: _StoreKit_SwiftUI.AutomaticSubscriptionStoreControlPlacement {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias RawValue = _StoreKit_SwiftUI.SubscriptionStoreControlPlacementKey
}
@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct LargeProductViewStyle : _StoreKit_SwiftUI.ProductViewStyle {
  nonisolated public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: _StoreKit_SwiftUI.LargeProductViewStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 17.0, visionOS 1.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI21LargeProductViewStyleV8makeBody13configurationQrAA0fgH13ConfigurationV_tF", 0) __
}
@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension _StoreKit_SwiftUI.ProductViewStyle where Self == _StoreKit_SwiftUI.LargeProductViewStyle {
  @_Concurrency.MainActor @preconcurrency public static var large: _StoreKit_SwiftUI.LargeProductViewStyle {
    get
  }
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ProminentPickerSubscriptionStoreControlStyle : _StoreKit_SwiftUI.SubscriptionStoreControlStyle {
  @available(iOS 18.0, macOS 15.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Placement = _StoreKit_SwiftUI.PickerSubscriptionStoreControlStyle.Placement
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: _StoreKit_SwiftUI.ProminentPickerSubscriptionStoreControlStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI027ProminentPickerSubscriptionA12ControlStyleV8makeBody13configurationQrAA0gahI13ConfigurationV_tF", 0) __
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension _StoreKit_SwiftUI.SubscriptionStoreControlStyle where Self == _StoreKit_SwiftUI.ProminentPickerSubscriptionStoreControlStyle {
  @_Concurrency.MainActor @preconcurrency public static var prominentPicker: _StoreKit_SwiftUI.ProminentPickerSubscriptionStoreControlStyle {
    get
  }
}
@available(iOS 17.0, macOS 14.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct SubscriptionStoreControlBackground {
  public static var automatic: _StoreKit_SwiftUI.SubscriptionStoreControlBackground {
    get
  }
  public static var gradientMaterial: _StoreKit_SwiftUI.SubscriptionStoreControlBackground {
    get
  }
  @available(macOS, unavailable)
  public static var gradientMaterialOnScroll: _StoreKit_SwiftUI.SubscriptionStoreControlBackground {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension SwiftUICore.View {
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func subscriptionStoreControlBackground(_ backgroundStyle: some ShapeStyle) -> some SwiftUICore.View
  
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func subscriptionStoreControlBackground(_ backgroundStyle: _StoreKit_SwiftUI.SubscriptionStoreControlBackground) -> some SwiftUICore.View
  
  @available(tvOS, unavailable)
  nonisolated public func subscriptionStorePickerItemBackground(_ backgroundStyle: some ShapeStyle) -> some SwiftUICore.View
  
  @available(iOS 18.0, macOS 15.0, watchOS 11.0, visionOS 2.0, *)
  @available(tvOS, unavailable)
  nonisolated public func subscriptionStorePickerItemBackground(_ backgroundStyle: some ShapeStyle, in shape: some Shape) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, visionOS 2.0, *)
@available(tvOS, unavailable)
extension _StoreKit_SwiftUI.StoreContent {
  @available(iOS 18.0, macOS 15.0, *)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func subscriptionStoreControlBackground(_ backgroundStyle: some ShapeStyle) -> some _StoreKit_SwiftUI.StoreContent
  
  @available(iOS 18.0, macOS 15.0, *)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func subscriptionStoreControlBackground(_ backgroundStyle: _StoreKit_SwiftUI.SubscriptionStoreControlBackground) -> some _StoreKit_SwiftUI.StoreContent
  
  @available(iOS 18.0, macOS 15.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func subscriptionStorePickerItemBackground(_ backgroundStyle: some ShapeStyle) -> some _StoreKit_SwiftUI.StoreContent
  
  @available(iOS 18.0, macOS 15.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func subscriptionStorePickerItemBackground(_ backgroundStyle: some ShapeStyle, in shape: some Shape) -> some _StoreKit_SwiftUI.StoreContent
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public protocol SubscriptionOptionGroupStyle {
  func _transformStyle(_ style: inout _StoreKit_SwiftUI.SubscriptionOptionGroupStyleOutput)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct AutomaticSubscriptionOptionGroupStyle : _StoreKit_SwiftUI.SubscriptionOptionGroupStyle {
  public init()
  public func _transformStyle(_ style: inout _StoreKit_SwiftUI.SubscriptionOptionGroupStyleOutput)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension _StoreKit_SwiftUI.SubscriptionOptionGroupStyle where Self == _StoreKit_SwiftUI.AutomaticSubscriptionOptionGroupStyle {
  public static var automatic: _StoreKit_SwiftUI.AutomaticSubscriptionOptionGroupStyle {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, *)
@available(watchOS, unavailable)
public struct TabsSubscriptionOptionGroupStyle : _StoreKit_SwiftUI.SubscriptionOptionGroupStyle {
  public init()
  public func _transformStyle(_ style: inout _StoreKit_SwiftUI.SubscriptionOptionGroupStyleOutput)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, *)
@available(watchOS, unavailable)
extension _StoreKit_SwiftUI.SubscriptionOptionGroupStyle where Self == _StoreKit_SwiftUI.TabsSubscriptionOptionGroupStyle {
  public static var tabs: _StoreKit_SwiftUI.TabsSubscriptionOptionGroupStyle {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct LinksSubscriptionOptionGroupStyle : _StoreKit_SwiftUI.SubscriptionOptionGroupStyle {
  public init()
  public func _transformStyle(_ style: inout _StoreKit_SwiftUI.SubscriptionOptionGroupStyleOutput)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension _StoreKit_SwiftUI.SubscriptionOptionGroupStyle where Self == _StoreKit_SwiftUI.LinksSubscriptionOptionGroupStyle {
  public static var links: _StoreKit_SwiftUI.LinksSubscriptionOptionGroupStyle {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct SubscriptionOptionGroupStyleOutput {
}
extension SwiftUICore.View {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func subscriptionStoreOptionGroupStyle(_ style: some SubscriptionOptionGroupStyle) -> some SwiftUICore.View
  
}
extension _StoreKit_SwiftUI.StoreContent {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @_Concurrency.MainActor @preconcurrency public func subscriptionStoreOptionGroupStyle(_ style: some SubscriptionOptionGroupStyle) -> some _StoreKit_SwiftUI.StoreContent
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_Concurrency.MainActor @preconcurrency public struct SubscriptionPeriodGroupSet<Label, MarketingContent> : _StoreKit_SwiftUI.StoreContent where Label : SwiftUICore.View, MarketingContent : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(@SwiftUICore.ViewBuilder marketingContent: @escaping (StoreKit.Product.SubscriptionPeriod?) -> MarketingContent, @SwiftUICore.ViewBuilder label: @escaping (StoreKit.Product.SubscriptionPeriod?) -> Label)
  @_Concurrency.MainActor @preconcurrency public init(@SwiftUICore.ViewBuilder marketingContent: @escaping (StoreKit.Product.SubscriptionPeriod?) -> MarketingContent) where Label == _StoreKit_SwiftUI.AutomaticSubscriptionOptionGroupLabel
  @_Concurrency.MainActor @preconcurrency public init() where Label == _StoreKit_SwiftUI.AutomaticSubscriptionOptionGroupLabel, MarketingContent == _StoreKit_SwiftUI.AutomaticSubscriptionStoreMarketingContent
  @_Concurrency.MainActor @preconcurrency public var body: some _StoreKit_SwiftUI.StoreContent {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI26SubscriptionPeriodGroupSetV4bodyQrvp", 0) __<Label, MarketingContent>
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias _IdentifiedView = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI0A7ContentPAAE011_identifiedE0AA010IdentifiedaE0VyQrGvp", 0) __<_StoreKit_SwiftUI.SubscriptionPeriodGroupSet<Label, MarketingContent>>
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension SwiftUICore.View {
  nonisolated public func subscriptionStoreSignInAction(_ action: (() -> ())?) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct PickerSubscriptionStoreControlStyle : _StoreKit_SwiftUI.SubscriptionStoreControlStyle {
  @available(iOS 18.0, macOS 15.0, watchOS 11.0, visionOS 2.0, *)
  public struct Placement : _StoreKit_SwiftUI.SubscriptionStoreControlPlacement {
    public var rawValue: _StoreKit_SwiftUI.SubscriptionStoreControlPlacementKey {
      get
    }
    public init?(rawValue: _StoreKit_SwiftUI.SubscriptionStoreControlPlacementKey)
    public static var automatic: _StoreKit_SwiftUI.PickerSubscriptionStoreControlStyle.Placement {
      get
    }
    public static var scrollView: _StoreKit_SwiftUI.PickerSubscriptionStoreControlStyle.Placement {
      get
    }
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    public static var buttonsInBottomBar: _StoreKit_SwiftUI.PickerSubscriptionStoreControlStyle.Placement {
      get
    }
    @available(iOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
    @available(tvOS, unavailable)
    public typealias RawValue = _StoreKit_SwiftUI.SubscriptionStoreControlPlacementKey
  }
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: _StoreKit_SwiftUI.PickerSubscriptionStoreControlStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 17.0, watchOS 10.0, visionOS 1.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI018PickerSubscriptionA12ControlStyleV8makeBody13configurationQrAA0fagH13ConfigurationV_tF", 0) __
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, visionOS 1.0, *)
@available(tvOS, unavailable)
extension _StoreKit_SwiftUI.SubscriptionStoreControlStyle where Self == _StoreKit_SwiftUI.PickerSubscriptionStoreControlStyle {
  @_Concurrency.MainActor @preconcurrency public static var picker: _StoreKit_SwiftUI.PickerSubscriptionStoreControlStyle {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@usableFromInline
internal struct SubscriptionItemBaseConfiguration<Icon> where Icon : SwiftUICore.View {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@usableFromInline
internal enum SubscriptionItemBaseConfigurationCurrentOption : Swift.Hashable {
  case notSubscribed
  case isCurrent
  case currentIndex(Swift.Int)
  case hiddenCurrent(StoreKit.Product, StoreKit.Product.SubscriptionInfo)
  @usableFromInline
  internal static func == (a: _StoreKit_SwiftUI.SubscriptionItemBaseConfigurationCurrentOption, b: _StoreKit_SwiftUI.SubscriptionItemBaseConfigurationCurrentOption) -> Swift.Bool
  @usableFromInline
  internal func hash(into hasher: inout Swift.Hasher)
  @usableFromInline
  internal var hashValue: Swift.Int {
    @usableFromInline
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.ContainerBackgroundPlacement {
  public static var subscriptionStore: SwiftUI.ContainerBackgroundPlacement {
    get
  }
  @available(tvOS 18.0, *)
  public static var subscriptionStoreHeader: SwiftUI.ContainerBackgroundPlacement {
    get
  }
  public static var subscriptionStoreFullHeight: SwiftUI.ContainerBackgroundPlacement {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension SwiftUICore.View {
  nonisolated public func subscriptionStatusTask(for groupID: Swift.String, priority: _Concurrency.TaskPriority = .medium, action: @escaping (_StoreKit_SwiftUI.EntitlementTaskState<[StoreKit.Product.SubscriptionInfo.Status]>) async -> ()) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
@_Concurrency.MainActor @preconcurrency public struct ButtonsSubscriptionStoreControlStyle : _StoreKit_SwiftUI.SubscriptionStoreControlStyle {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public struct Placement : _StoreKit_SwiftUI.SubscriptionStoreControlPlacement {
    public var rawValue: _StoreKit_SwiftUI.SubscriptionStoreControlPlacementKey {
      get
    }
    public init?(rawValue: _StoreKit_SwiftUI.SubscriptionStoreControlPlacementKey)
    public static var automatic: _StoreKit_SwiftUI.ButtonsSubscriptionStoreControlStyle.Placement {
      get
    }
    @available(iOS, unavailable)
    @available(macOS, unavailable)
    @available(watchOS, unavailable)
    public static var bottom: _StoreKit_SwiftUI.ButtonsSubscriptionStoreControlStyle.Placement {
      get
    }
    @available(iOS, unavailable)
    @available(macOS, unavailable)
    @available(watchOS, unavailable)
    public static var leading: _StoreKit_SwiftUI.ButtonsSubscriptionStoreControlStyle.Placement {
      get
    }
    @available(iOS, unavailable)
    @available(macOS, unavailable)
    @available(watchOS, unavailable)
    public static var trailing: _StoreKit_SwiftUI.ButtonsSubscriptionStoreControlStyle.Placement {
      get
    }
    @available(tvOS, unavailable)
    public static var scrollView: _StoreKit_SwiftUI.ButtonsSubscriptionStoreControlStyle.Placement {
      get
    }
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    public static var bottomBar: _StoreKit_SwiftUI.ButtonsSubscriptionStoreControlStyle.Placement {
      get
    }
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
    public typealias RawValue = _StoreKit_SwiftUI.SubscriptionStoreControlPlacementKey
  }
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: _StoreKit_SwiftUI.ButtonsSubscriptionStoreControlStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI019ButtonsSubscriptionA12ControlStyleV8makeBody13configurationQrAA0fagH13ConfigurationV_tF", 0) __
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension _StoreKit_SwiftUI.SubscriptionStoreControlStyle where Self == _StoreKit_SwiftUI.ButtonsSubscriptionStoreControlStyle {
  @_Concurrency.MainActor @preconcurrency public static var buttons: _StoreKit_SwiftUI.ButtonsSubscriptionStoreControlStyle {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
@_Concurrency.MainActor @preconcurrency public struct ProductView<Icon, PlaceholderIcon> : SwiftUICore.View where Icon : SwiftUICore.View, PlaceholderIcon : SwiftUICore.View {
  nonisolated public init(id productID: StoreKit.Product.ID, @SwiftUICore.ViewBuilder icon: @escaping (_StoreKit_SwiftUI.ProductIconPhase) -> Icon, @SwiftUICore.ViewBuilder placeholderIcon: () -> PlaceholderIcon)
  nonisolated public init(id productID: StoreKit.Product.ID, prefersPromotionalIcon: Swift.Bool = false, @SwiftUICore.ViewBuilder icon: () -> Icon, @SwiftUICore.ViewBuilder placeholderIcon: () -> PlaceholderIcon)
  nonisolated public init(id productID: StoreKit.Product.ID, prefersPromotionalIcon: Swift.Bool = false, @SwiftUICore.ViewBuilder icon: () -> Icon) where PlaceholderIcon == _StoreKit_SwiftUI.AutomaticProductPlaceholderIcon
  nonisolated public init(id productID: StoreKit.Product.ID, prefersPromotionalIcon: Swift.Bool = false) where Icon == SwiftUICore.EmptyView, PlaceholderIcon == SwiftUICore.EmptyView
  nonisolated public init(_ product: StoreKit.Product, @SwiftUICore.ViewBuilder icon: @escaping (_StoreKit_SwiftUI.ProductIconPhase) -> Icon) where PlaceholderIcon == SwiftUICore.EmptyView
  nonisolated public init(_ product: StoreKit.Product, prefersPromotionalIcon: Swift.Bool = false, @SwiftUICore.ViewBuilder icon: () -> Icon) where PlaceholderIcon == SwiftUICore.EmptyView
  nonisolated public init(_ product: StoreKit.Product, prefersPromotionalIcon: Swift.Bool = true) where Icon == SwiftUICore.EmptyView, PlaceholderIcon == SwiftUICore.EmptyView
  nonisolated public init(_ configuration: _StoreKit_SwiftUI.ProductViewStyleConfiguration) where Icon == _StoreKit_SwiftUI.ProductViewStyleConfiguration.Icon, PlaceholderIcon == _StoreKit_SwiftUI.ProductViewStyleConfiguration.Icon
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI11ProductViewV4bodyQrvp", 0) __<Icon, PlaceholderIcon>
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_Concurrency.MainActor @preconcurrency public struct AutomaticProductPlaceholderIcon : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI31AutomaticProductPlaceholderIconV4bodyQrvp", 0) __
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
public enum ProductIconPhase {
  case success(SwiftUICore.Image)
  case failure(any Swift.Error)
  case unavailable
  case loading
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension _StoreKit_SwiftUI.ProductIconPhase {
  public var promotionalIcon: SwiftUICore.Image? {
    get
  }
  public var error: (any Swift.Error)? {
    get
  }
}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, visionOS 2.0, *)
@available(tvOS, unavailable)
extension _StoreKit_SwiftUI.SubscriptionStoreControlStyle {
  public typealias SubscriptionPicker = _StoreKit_SwiftUI.SubscriptionStorePicker
}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, visionOS 2.0, *)
@available(tvOS, unavailable)
extension _StoreKit_SwiftUI.SubscriptionStorePicker {
  @_Concurrency.MainActor @preconcurrency public init(@SwiftUICore.ViewBuilder pickerContent: () -> PickerContent, @SwiftUICore.ViewBuilder confirmation: @escaping (_StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.Option) -> ConfirmationContent)
  @_Concurrency.MainActor @preconcurrency public init(_ configuration: _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration, @SwiftUICore.ViewBuilder pickerOptionContent: @escaping (_StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.PickerOption) -> PickerContent, @SwiftUICore.ViewBuilder confirmation: @escaping (_StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.Option) -> ConfirmationContent)
  @_Concurrency.MainActor @preconcurrency public init(selection: SwiftUICore.Binding<_StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.Option?>, @SwiftUICore.ViewBuilder pickerContent: () -> PickerContent, @SwiftUICore.ViewBuilder confirmation: @escaping (_StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.Option) -> ConfirmationContent)
  @_Concurrency.MainActor @preconcurrency public init(_ configuration: _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration, selection: SwiftUICore.Binding<_StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.Option?>, @SwiftUICore.ViewBuilder pickerOptionContent: @escaping (_StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.PickerOption) -> PickerContent, @SwiftUICore.ViewBuilder confirmation: @escaping (_StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.Option) -> ConfirmationContent)
}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct SubscriptionStorePicker<PickerContent, ConfirmationContent> : SwiftUICore.View where PickerContent : SwiftUICore.View, ConfirmationContent : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI012SubscriptionA6PickerV4bodyQrvp", 0) __<PickerContent, ConfirmationContent>
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
@_Concurrency.MainActor @preconcurrency public struct StoreView<Icon, PlaceholderIcon> : SwiftUICore.View where Icon : SwiftUICore.View, PlaceholderIcon : SwiftUICore.View {
  nonisolated public init(ids productIDs: some Collection<Product.ID>, @SwiftUICore.ViewBuilder icon: @escaping (StoreKit.Product, _StoreKit_SwiftUI.ProductIconPhase) -> Icon, @SwiftUICore.ViewBuilder placeholderIcon: () -> PlaceholderIcon)
  nonisolated public init(ids productIDs: some Collection<Product.ID>, prefersPromotionalIcon: Swift.Bool = false, @SwiftUICore.ViewBuilder icon: @escaping (StoreKit.Product) -> Icon, @SwiftUICore.ViewBuilder placeholderIcon: () -> PlaceholderIcon)
  nonisolated public init(ids productIDs: some Collection<Product.ID>, prefersPromotionalIcon: Swift.Bool = false, @SwiftUICore.ViewBuilder icon: @escaping (StoreKit.Product) -> Icon) where PlaceholderIcon == _StoreKit_SwiftUI.AutomaticProductPlaceholderIcon
  nonisolated public init(products: some Collection<Product>, @SwiftUICore.ViewBuilder icon: @escaping (StoreKit.Product, _StoreKit_SwiftUI.ProductIconPhase) -> Icon) where PlaceholderIcon == SwiftUICore.EmptyView
  nonisolated public init(products: some Collection<Product>, prefersPromotionalIcon: Swift.Bool = false, @SwiftUICore.ViewBuilder icon: @escaping (StoreKit.Product) -> Icon) where PlaceholderIcon == SwiftUICore.EmptyView
  nonisolated public init(ids productIDs: some Collection<Product.ID>, prefersPromotionalIcon: Swift.Bool = false) where Icon == SwiftUICore.EmptyView, PlaceholderIcon == SwiftUICore.EmptyView
  nonisolated public init(products: some Collection<Product>, prefersPromotionalIcon: Swift.Bool = false) where Icon == SwiftUICore.EmptyView, PlaceholderIcon == SwiftUICore.EmptyView
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI0A4ViewV4bodyQrvp", 0) __<Icon, PlaceholderIcon>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_Concurrency.MainActor @preconcurrency public struct SubscriptionOptionSection<Header, Content, Footer> : _StoreKit_SwiftUI.StoreContent where Header : SwiftUICore.View, Content : _StoreKit_SwiftUI.StoreContent, Footer : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: Swift.Never {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var _identifiedContent: _StoreKit_SwiftUI.IdentifiedStoreContent<some SwiftUICore.View> {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Body = Swift.Never
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias _IdentifiedView = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI25SubscriptionOptionSectionV18_identifiedContentAA010IdentifiedaI0VyQrGvp", 0) __<Header, Content, Footer>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension _StoreKit_SwiftUI.SubscriptionOptionSection where Content == Swift.Never {
  @_Concurrency.MainActor @preconcurrency public init(isIncluded: @escaping (StoreKit.Product) -> Swift.Bool, @SwiftUICore.ViewBuilder header: () -> Header = EmptyView.init, @SwiftUICore.ViewBuilder footer: () -> Footer = EmptyView.init)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension _StoreKit_SwiftUI.SubscriptionOptionSection where Header == SwiftUICore.Text, Content == Swift.Never {
  @_Concurrency.MainActor @preconcurrency public init(_ title: SwiftUICore.LocalizedStringKey, isIncluded: @escaping (StoreKit.Product) -> Swift.Bool, @SwiftUICore.ViewBuilder footer: () -> Footer = EmptyView.init)
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init(_ title: some StringProtocol, isIncluded: @escaping (StoreKit.Product) -> Swift.Bool, @SwiftUICore.ViewBuilder footer: () -> Footer = EmptyView.init)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct CompactProductViewStyle : _StoreKit_SwiftUI.ProductViewStyle {
  nonisolated public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: _StoreKit_SwiftUI.CompactProductViewStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 17.0, tvOS 17.0, macOS 14.0, *)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI23CompactProductViewStyleV8makeBody13configurationQrAA0fgH13ConfigurationV_tF", 0) __
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension _StoreKit_SwiftUI.ProductViewStyle where Self == _StoreKit_SwiftUI.CompactProductViewStyle {
  @_Concurrency.MainActor @preconcurrency public static var compact: _StoreKit_SwiftUI.CompactProductViewStyle {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@preconcurrency @_Concurrency.MainActor public protocol StoreContent {
  associatedtype Body : _StoreKit_SwiftUI.StoreContent
  @_StoreKit_SwiftUI.StoreContentBuilder @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
  associatedtype _IdentifiedView : SwiftUICore.View
  @_Concurrency.MainActor @preconcurrency var _identifiedContent: _StoreKit_SwiftUI.IdentifiedStoreContent<Self._IdentifiedView> { get }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension _StoreKit_SwiftUI.StoreContent {
  @_Concurrency.MainActor @preconcurrency public var _identifiedContent: _StoreKit_SwiftUI.IdentifiedStoreContent<some SwiftUICore.View> {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension Swift.Never : _StoreKit_SwiftUI.StoreContent {
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias _IdentifiedView = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI0A7ContentPAAE011_identifiedE0AA010IdentifiedaE0VyQrGvp", 0) __<Swift.Never>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension Swift.Optional : _StoreKit_SwiftUI.StoreContent where Wrapped : _StoreKit_SwiftUI.StoreContent {
  @_Concurrency.MainActor @preconcurrency public var body: Swift.Never {
    get
  }
  public typealias Body = Swift.Never
  @_Concurrency.MainActor @preconcurrency public var _identifiedContent: _StoreKit_SwiftUI.IdentifiedStoreContent<some SwiftUICore.View> {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias _IdentifiedView = @_opaqueReturnTypeOf("$sSq17_StoreKit_SwiftUIAA0A7ContentRzlE011_identifiedE0AA010IdentifiedaE0VyQrGvp", 0) __<Wrapped>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore._ConditionalContent : _StoreKit_SwiftUI.StoreContent where TrueContent : _StoreKit_SwiftUI.StoreContent, FalseContent : _StoreKit_SwiftUI.StoreContent {
  public typealias Body = Swift.Never
  @_Concurrency.MainActor @preconcurrency public var body: Swift.Never {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var _identifiedContent: _StoreKit_SwiftUI.IdentifiedStoreContent<some SwiftUICore.View> {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias _IdentifiedView = @_opaqueReturnTypeOf("$s7SwiftUI19_ConditionalContentV010_StoreKit_aB0AD0eD0RzAdER_rlE011_identifiedD0AD010IdentifiedeD0VyQrGvp", 0) __<TrueContent, FalseContent>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_Concurrency.MainActor @preconcurrency public struct TupleStoreContent<each Content> : _StoreKit_SwiftUI.StoreContent where repeat each Content : _StoreKit_SwiftUI.StoreContent {
  @_Concurrency.MainActor @preconcurrency public var body: Swift.Never {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var _identifiedContent: _StoreKit_SwiftUI.IdentifiedStoreContent<SwiftUICore.TupleView<(repeat (each Content)._IdentifiedView)>> {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Body = Swift.Never
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias _IdentifiedView = SwiftUICore.TupleView<(repeat (each Content)._IdentifiedView)>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_functionBuilder public struct StoreContentBuilder {
  public static func buildBlock<each Content>(_ content: repeat each Content) -> _StoreKit_SwiftUI.TupleStoreContent<repeat each Content> where repeat each Content : _StoreKit_SwiftUI.StoreContent
  public static func buildExpression<Content>(_ content: Content) -> some _StoreKit_SwiftUI.StoreContent where Content : _StoreKit_SwiftUI.StoreContent
  
  public static func buildIf<Content>(_ section: Content?) -> Content? where Content : _StoreKit_SwiftUI.StoreContent
  public static func buildEither<TrueContent, FalseContent>(first: TrueContent) -> SwiftUICore._ConditionalContent<TrueContent, FalseContent> where TrueContent : _StoreKit_SwiftUI.StoreContent, FalseContent : _StoreKit_SwiftUI.StoreContent
  public static func buildEither<TrueContent, FalseContent>(second: FalseContent) -> SwiftUICore._ConditionalContent<TrueContent, FalseContent> where TrueContent : _StoreKit_SwiftUI.StoreContent, FalseContent : _StoreKit_SwiftUI.StoreContent
  public static func buildLimitedAvailability(_ content: any _StoreKit_SwiftUI.StoreContent) -> some _StoreKit_SwiftUI.StoreContent
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct IdentifiedStoreContent<IdentifiedView> where IdentifiedView : SwiftUICore.View {
}
@available(iOS 16.0, macCatalyst 16.0, visionOS 1.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor public struct DisplayMessageAction {
  @_Concurrency.MainActor public func callAsFunction(_ message: StoreKit.Message) throws
}
@available(iOS 16.0, macCatalyst 16.0, visionOS 1.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var displayStoreKitMessage: _StoreKit_SwiftUI.DisplayMessageAction {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension SwiftUICore.View {
  nonisolated public func subscriptionStoreControlIcon(@SwiftUICore.ViewBuilder icon: @escaping (StoreKit.Product, StoreKit.Product.SubscriptionInfo) -> some View) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_Concurrency.MainActor @preconcurrency public struct SubscriptionOptionGroup<Content, Label, MarketingContent> : _StoreKit_SwiftUI.StoreContent where Content : _StoreKit_SwiftUI.StoreContent, Label : SwiftUICore.View, MarketingContent : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(isIncluded: @escaping (StoreKit.Product) -> Swift.Bool, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder marketingContent: () -> MarketingContent) where Content == Swift.Never
  @_Concurrency.MainActor @preconcurrency public init(@_StoreKit_SwiftUI.StoreContentBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder marketingContent: () -> MarketingContent)
  @_Concurrency.MainActor @preconcurrency public var body: Swift.Never {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var _identifiedContent: _StoreKit_SwiftUI.IdentifiedStoreContent<some SwiftUICore.View> {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Body = Swift.Never
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias _IdentifiedView = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI23SubscriptionOptionGroupV18_identifiedContentAA010IdentifiedaI0VyQrGvp", 0) __<Content, Label, MarketingContent>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension _StoreKit_SwiftUI.SubscriptionOptionGroup where MarketingContent == _StoreKit_SwiftUI.AutomaticSubscriptionStoreMarketingContent {
  @_Concurrency.MainActor @preconcurrency public init(isIncluded: @escaping (StoreKit.Product) -> Swift.Bool, @SwiftUICore.ViewBuilder label: () -> Label) where Content == Swift.Never
  @_Concurrency.MainActor @preconcurrency public init(@_StoreKit_SwiftUI.StoreContentBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension _StoreKit_SwiftUI.SubscriptionOptionGroup where Label == _StoreKit_SwiftUI.AutomaticSubscriptionOptionGroupLabel {
  @_Concurrency.MainActor @preconcurrency public init(isIncluded: @escaping (StoreKit.Product) -> Swift.Bool, @SwiftUICore.ViewBuilder marketingContent: () -> MarketingContent) where Content == Swift.Never
  @_Concurrency.MainActor @preconcurrency public init(@_StoreKit_SwiftUI.StoreContentBuilder content: () -> Content, @SwiftUICore.ViewBuilder marketingContent: () -> MarketingContent)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension _StoreKit_SwiftUI.SubscriptionOptionGroup where Label == _StoreKit_SwiftUI.AutomaticSubscriptionOptionGroupLabel, MarketingContent == _StoreKit_SwiftUI.AutomaticSubscriptionStoreMarketingContent {
  @_Concurrency.MainActor @preconcurrency public init(isIncluded: @escaping (StoreKit.Product) -> Swift.Bool) where Content == Swift.Never
  @_Concurrency.MainActor @preconcurrency public init(@_StoreKit_SwiftUI.StoreContentBuilder content: () -> Content)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension _StoreKit_SwiftUI.SubscriptionOptionGroup where Label == SwiftUICore.Text {
  @_Concurrency.MainActor @preconcurrency public init(_ label: SwiftUICore.LocalizedStringKey, isIncluded: @escaping (StoreKit.Product) -> Swift.Bool, @SwiftUICore.ViewBuilder marketingContent: () -> MarketingContent) where Content == Swift.Never
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init(_ label: some StringProtocol, isIncluded: @escaping (StoreKit.Product) -> Swift.Bool, @SwiftUICore.ViewBuilder marketingContent: () -> MarketingContent) where Content == Swift.Never
  @_Concurrency.MainActor @preconcurrency public init(_ label: SwiftUICore.LocalizedStringKey, @_StoreKit_SwiftUI.StoreContentBuilder content: () -> Content, @SwiftUICore.ViewBuilder marketingContent: () -> MarketingContent)
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init(_ label: some StringProtocol, @_StoreKit_SwiftUI.StoreContentBuilder content: () -> Content, @SwiftUICore.ViewBuilder marketingContent: () -> MarketingContent)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension _StoreKit_SwiftUI.SubscriptionOptionGroup where Label == SwiftUICore.Text, MarketingContent == _StoreKit_SwiftUI.AutomaticSubscriptionStoreMarketingContent {
  @_Concurrency.MainActor @preconcurrency public init(_ label: SwiftUICore.LocalizedStringKey, isIncluded: @escaping (StoreKit.Product) -> Swift.Bool) where Content == Swift.Never
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init(_ label: some StringProtocol, isIncluded: @escaping (StoreKit.Product) -> Swift.Bool) where Content == Swift.Never
  @_Concurrency.MainActor @preconcurrency public init(_ label: SwiftUICore.LocalizedStringKey, @_StoreKit_SwiftUI.StoreContentBuilder content: () -> Content)
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init(_ label: some StringProtocol, @_StoreKit_SwiftUI.StoreContentBuilder content: () -> Content)
}
extension SwiftUICore.View {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal func automaticSubscriptionStorePickerItemBackgroundInternal(_ style: (some ShapeStyle)?) -> some SwiftUICore.View
  
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal func subscriptionStorePickerOptionStrokeInternal(style: some ShapeStyle, lineWidth: CoreFoundation.CGFloat = 1.0) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension SwiftUICore.View {
  @available(tvOS, unavailable)
  nonisolated public func subscriptionStorePolicyDestination(url: Foundation.URL, for button: _StoreKit_SwiftUI.SubscriptionStorePolicyKind) -> some SwiftUICore.View
  
  nonisolated public func subscriptionStorePolicyDestination(for button: _StoreKit_SwiftUI.SubscriptionStorePolicyKind, @SwiftUICore.ViewBuilder destination: () -> some View) -> some SwiftUICore.View
  
  nonisolated public func subscriptionStorePolicyForegroundStyle(_ style: some ShapeStyle) -> some SwiftUICore.View
  
  nonisolated public func subscriptionStorePolicyForegroundStyle(_ primary: some ShapeStyle, _ secondary: some ShapeStyle) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
public struct SubscriptionStorePolicyKind : Swift.Hashable {
  public static var termsOfService: _StoreKit_SwiftUI.SubscriptionStorePolicyKind {
    get
  }
  public static var privacyPolicy: _StoreKit_SwiftUI.SubscriptionStorePolicyKind {
    get
  }
  public static func == (a: _StoreKit_SwiftUI.SubscriptionStorePolicyKind, b: _StoreKit_SwiftUI.SubscriptionStorePolicyKind) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macCatalyst 17.0, tvOS 17.0, macOS 14.0, watchOS 10.0, visionOS 1.0, *)
public struct PurchaseAction {
  public func callAsFunction(_ product: StoreKit.Product, options: Swift.Set<StoreKit.Product.PurchaseOption> = []) async throws -> StoreKit.Product.PurchaseResult
}
@available(iOS 17.0, macCatalyst 17.0, tvOS 17.0, macOS 14.0, watchOS 10.0, visionOS 1.0, *)
extension SwiftUICore.EnvironmentValues {
  public var purchase: _StoreKit_SwiftUI.PurchaseAction {
    get
  }
}
@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func productIconBorder() -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension SwiftUICore.View {
  @usableFromInline
  nonisolated internal func _productDescriptionHidden(_ hidden: Swift.Bool = true) -> some SwiftUICore.View
  
  @available(iOS 17.4, macOS 14.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
  @usableFromInline
  nonisolated internal func _productDescription(_ visibility: SwiftUICore.Visibility) -> some SwiftUICore.View
  
  @_alwaysEmitIntoClient nonisolated public func productDescription(_ visibility: SwiftUICore.Visibility) -> some SwiftUICore.View {
        if #available(iOS 17.4, macOS 14.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *) {
            return _productDescription(visibility)
        }
        return _productDescriptionHidden(visibility == .hidden)
    }
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension _StoreKit_SwiftUI.StoreContent {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @_Concurrency.MainActor @preconcurrency public func productDescription(_ visibility: SwiftUICore.Visibility) -> some _StoreKit_SwiftUI.StoreContent
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
@preconcurrency @_Concurrency.MainActor public protocol ProductViewStyle {
  typealias Configuration = _StoreKit_SwiftUI.ProductViewStyleConfiguration
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
public struct ProductViewStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Icon : SwiftUICore.View {
    @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
      get
    }
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, macOS 14.0, *)
    public typealias Body = @_opaqueReturnTypeOf("$s17_StoreKit_SwiftUI29ProductViewStyleConfigurationV4IconV4bodyQrvp", 0) __
  }
  public let state: StoreKit.Product.TaskState
  public let icon: _StoreKit_SwiftUI.ProductViewStyleConfiguration.Icon
  public let hasCurrentEntitlement: Swift.Bool
  @available(iOS 17.4, macOS 14.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
  public let descriptionVisibility: SwiftUICore.Visibility
  public var product: StoreKit.Product? {
    get
  }
  public func purchase()
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension SwiftUICore.View {
  nonisolated public func productViewStyle(_ style: some ProductViewStyle) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, visionOS 1.0, *)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func subscriptionStoreButtonLabel(_ label: _StoreKit_SwiftUI.SubscriptionStoreButtonLabel) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, visionOS 2.0, *)
@available(tvOS, unavailable)
extension _StoreKit_SwiftUI.StoreContent {
  @available(iOS 18.0, macOS 15.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func subscriptionStoreButtonLabel(_ label: _StoreKit_SwiftUI.SubscriptionStoreButtonLabel) -> some _StoreKit_SwiftUI.StoreContent
  
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, visionOS 1.0, *)
@available(tvOS, unavailable)
public struct SubscriptionStoreButtonLabel : Swift.Hashable {
  public static var automatic: _StoreKit_SwiftUI.SubscriptionStoreButtonLabel {
    get
  }
  public static var singleLine: _StoreKit_SwiftUI.SubscriptionStoreButtonLabel {
    get
  }
  @available(watchOS, unavailable)
  public static var multiline: _StoreKit_SwiftUI.SubscriptionStoreButtonLabel {
    get
  }
  public static var action: _StoreKit_SwiftUI.SubscriptionStoreButtonLabel {
    get
  }
  public static var displayName: _StoreKit_SwiftUI.SubscriptionStoreButtonLabel {
    get
  }
  public static var price: _StoreKit_SwiftUI.SubscriptionStoreButtonLabel {
    get
  }
  public var singleLine: _StoreKit_SwiftUI.SubscriptionStoreButtonLabel {
    get
  }
  @available(watchOS, unavailable)
  public var multiline: _StoreKit_SwiftUI.SubscriptionStoreButtonLabel {
    get
  }
  public var action: _StoreKit_SwiftUI.SubscriptionStoreButtonLabel {
    get
  }
  public var displayName: _StoreKit_SwiftUI.SubscriptionStoreButtonLabel {
    get
  }
  public var price: _StoreKit_SwiftUI.SubscriptionStoreButtonLabel {
    get
  }
  public static func == (a: _StoreKit_SwiftUI.SubscriptionStoreButtonLabel, b: _StoreKit_SwiftUI.SubscriptionStoreButtonLabel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension _StoreKit_SwiftUI.ProductView : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _StoreKit_SwiftUI.PagedProminentPickerSubscriptionStoreControlStyle : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, visionOS 2.0, *)
@available(tvOS, unavailable)
extension _StoreKit_SwiftUI.AutomaticSubscriptionStorePickerOptionLabel : Swift.Sendable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension _StoreKit_SwiftUI.AutomaticProductViewStyle : Swift.Sendable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension _StoreKit_SwiftUI.SubscriptionStoreView : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, visionOS 2.0, *)
@available(tvOS, unavailable)
extension _StoreKit_SwiftUI.PagedPickerSubscriptionStoreControlStyle : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension _StoreKit_SwiftUI.SubscriptionOptionGroupSet : Swift.Sendable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension _StoreKit_SwiftUI.AutomaticSubscriptionStoreControlStyle : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, visionOS 2.0, *)
@available(tvOS, unavailable)
extension _StoreKit_SwiftUI.SubscriptionStorePickerOption : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension _StoreKit_SwiftUI.SubscriptionStoreButton : Swift.Sendable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension _StoreKit_SwiftUI.RegularProductViewStyle : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _StoreKit_SwiftUI.CompactPickerSubscriptionStoreControlStyle : Swift.Sendable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension _StoreKit_SwiftUI.AutomaticSubscriptionStoreMarketingContent : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension _StoreKit_SwiftUI.AutomaticSubscriptionOptionGroupLabel : Swift.Sendable {}
@available(iOS 16.0, macCatalyst 16.0, visionOS 1.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _StoreKit_SwiftUI.RequestReviewAction : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension _StoreKit_SwiftUI.SubscriptionStoreContentView : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.Icon : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.Section.Header : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.Section.Footer : Swift.Sendable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension _StoreKit_SwiftUI.SubscriptionStoreControlStyleConfiguration.MarketingContent : Swift.Sendable {}
@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension _StoreKit_SwiftUI.LargeProductViewStyle : Swift.Sendable {}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension _StoreKit_SwiftUI.ProminentPickerSubscriptionStoreControlStyle : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension _StoreKit_SwiftUI.SubscriptionPeriodGroupSet : Swift.Sendable {}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, visionOS 1.0, *)
@available(tvOS, unavailable)
extension _StoreKit_SwiftUI.PickerSubscriptionStoreControlStyle : Swift.Sendable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension _StoreKit_SwiftUI.ButtonsSubscriptionStoreControlStyle : Swift.Sendable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension _StoreKit_SwiftUI.AutomaticProductPlaceholderIcon : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, visionOS 2.0, *)
@available(tvOS, unavailable)
extension _StoreKit_SwiftUI.SubscriptionStorePicker : Swift.Sendable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension _StoreKit_SwiftUI.StoreView : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension _StoreKit_SwiftUI.SubscriptionOptionSection : Swift.Sendable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension _StoreKit_SwiftUI.CompactProductViewStyle : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension _StoreKit_SwiftUI.TupleStoreContent : Swift.Sendable {}
@available(iOS 16.0, macCatalyst 16.0, visionOS 1.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _StoreKit_SwiftUI.DisplayMessageAction : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension _StoreKit_SwiftUI.SubscriptionOptionGroup : Swift.Sendable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension _StoreKit_SwiftUI.ProductViewStyleConfiguration.Icon : Swift.Sendable {}
