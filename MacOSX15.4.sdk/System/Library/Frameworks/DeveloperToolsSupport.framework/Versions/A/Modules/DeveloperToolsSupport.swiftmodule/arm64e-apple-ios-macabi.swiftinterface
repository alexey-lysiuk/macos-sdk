// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.5 clang-1700.0.13.3)
// swift-module-flags: -target arm64e-apple-ios18.4-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature ExtensionMacros -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 22.10.5 -module-name DeveloperToolsSupport
// swift-module-flags-ignorable:  -interface-compiler-version 6.1
import CoreGraphics
@_exported import DeveloperToolsSupport
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public protocol PreviewRegistry {
  static var fileID: Swift.String { get }
  static var line: Swift.Int { get }
  static var column: Swift.Int { get }
  @_Concurrency.MainActor static func makePreview() throws -> DeveloperToolsSupport.Preview
  @available(*, deprecated, message: "This method is not called. Please implement makePreview() instead.")
  static var preview: DeveloperToolsSupport.Preview { get }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension DeveloperToolsSupport.PreviewRegistry {
  public static var preview: DeveloperToolsSupport.Preview {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct PreviewUnavailable : Swift.Error {
  public init()
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct PreviewCamera : Swift.Sendable {
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@_functionBuilder public struct PreviewCameraBuilder {
  public static func buildExpression(_ camera: DeveloperToolsSupport.PreviewCamera) -> [DeveloperToolsSupport.PreviewCamera]
  public static func buildExpression(_ cameras: [DeveloperToolsSupport.PreviewCamera]) -> [DeveloperToolsSupport.PreviewCamera]
  public static func buildPartialBlock(first: [DeveloperToolsSupport.PreviewCamera]) -> [DeveloperToolsSupport.PreviewCamera]
  public static func buildPartialBlock(accumulated: [DeveloperToolsSupport.PreviewCamera], next: [DeveloperToolsSupport.PreviewCamera]) -> [DeveloperToolsSupport.PreviewCamera]
  public static func buildArray(_ components: [[DeveloperToolsSupport.PreviewCamera]]) -> [DeveloperToolsSupport.PreviewCamera]
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct ColorResource : Swift.Hashable, Swift.Sendable {
  public init(name: Swift.String, bundle: Foundation.Bundle)
  public static func == (a: DeveloperToolsSupport.ColorResource, b: DeveloperToolsSupport.ColorResource) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct ImageResource : Swift.Hashable, Swift.Sendable {
  public init(name: Swift.String, bundle: Foundation.Bundle)
  public static func == (a: DeveloperToolsSupport.ImageResource, b: DeveloperToolsSupport.ImageResource) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, visionOS 1.0, *)
public struct LibraryItem {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, visionOS 1.0, *)
  public struct Category {
    public static let effect: DeveloperToolsSupport.LibraryItem.Category
    public static let layout: DeveloperToolsSupport.LibraryItem.Category
    public static let control: DeveloperToolsSupport.LibraryItem.Category
    public static let other: DeveloperToolsSupport.LibraryItem.Category
  }
  public init<SnippetExpressionType>(_ snippet: @autoclosure () -> SnippetExpressionType, visible: Swift.Bool = true, title: Swift.String? = nil, category: DeveloperToolsSupport.LibraryItem.Category = .other, matchingSignature: Swift.String? = nil)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, visionOS 1.0, *)
@_functionBuilder public struct LibraryContentBuilder {
  public static func buildBlock(_ segments: [DeveloperToolsSupport.LibraryItem]...) -> [DeveloperToolsSupport.LibraryItem]
  public static func buildExpression(_ item: DeveloperToolsSupport.LibraryItem) -> [DeveloperToolsSupport.LibraryItem]
  public static func buildExpression(_ items: [DeveloperToolsSupport.LibraryItem]) -> [DeveloperToolsSupport.LibraryItem]
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, visionOS 1.0, *)
public protocol LibraryContentProvider {
  associatedtype ModifierBase = Any
  @DeveloperToolsSupport.LibraryContentBuilder var views: [DeveloperToolsSupport.LibraryItem] { get }
  @DeveloperToolsSupport.LibraryContentBuilder func modifiers(base: Self.ModifierBase) -> [DeveloperToolsSupport.LibraryItem]
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, visionOS 1.0, *)
extension DeveloperToolsSupport.LibraryContentProvider {
  public var views: [DeveloperToolsSupport.LibraryItem] {
    get
  }
  public func modifiers(base: Self.ModifierBase) -> [DeveloperToolsSupport.LibraryItem]
}
@available(iOS 13.0, macCatalyst 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 17.0)
@_originallyDefinedIn(module: "SwiftUI", macCatalyst 17.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 14.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 17.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 10.0)
public enum PreviewLayout : Swift.Sendable {
  case device
  case sizeThatFits
  case fixed(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
  @available(visionOS 1.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  case fixed3D(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat, depth: CoreFoundation.CGFloat)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension DeveloperToolsSupport.Preview {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public enum ViewTraits {
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension DeveloperToolsSupport.PreviewTrait where T == DeveloperToolsSupport.Preview.ViewTraits {
  @_Concurrency.MainActor public static var defaultLayout: DeveloperToolsSupport.PreviewTrait<DeveloperToolsSupport.Preview.ViewTraits> {
    get
  }
  @_Concurrency.MainActor public static var sizeThatFitsLayout: DeveloperToolsSupport.PreviewTrait<DeveloperToolsSupport.Preview.ViewTraits> {
    get
  }
  @_Concurrency.MainActor public static func fixedLayout(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat) -> DeveloperToolsSupport.PreviewTrait<T>
  @available(visionOS 1.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @_Concurrency.MainActor public static func fixedLayout(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat, depth: CoreFoundation.CGFloat) -> DeveloperToolsSupport.PreviewTrait<T>
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension DeveloperToolsSupport.PreviewTrait where T == DeveloperToolsSupport.Preview.ViewTraits {
  @_Concurrency.MainActor public static var portrait: DeveloperToolsSupport.PreviewTrait<DeveloperToolsSupport.Preview.ViewTraits> {
    get
  }
  @_Concurrency.MainActor public static var landscapeLeft: DeveloperToolsSupport.PreviewTrait<DeveloperToolsSupport.Preview.ViewTraits> {
    get
  }
  @_Concurrency.MainActor public static var landscapeRight: DeveloperToolsSupport.PreviewTrait<DeveloperToolsSupport.Preview.ViewTraits> {
    get
  }
  @_Concurrency.MainActor public static var portraitUpsideDown: DeveloperToolsSupport.PreviewTrait<DeveloperToolsSupport.Preview.ViewTraits> {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_functionBuilder public struct PreviewBodyBuilder<Content> {
  public static func buildBlock(_ content: Content) -> Content
  @available(*, unavailable, message: "This builder requires exactly one content expression")
  public static func buildBlock(_: Content...) -> Content
  @available(*, unavailable, message: "This builder does not support control flow statements")
  public static func buildOptional(_: Content?) -> Content
  @available(*, unavailable, message: "This builder does not support control flow statements")
  public static func buildEither(first: Content) -> Content
  @available(*, unavailable, message: "This builder does not support control flow statements")
  public static func buildEither(second: Content) -> Content
  @available(*, unavailable, message: "This builder does not support control flow statements")
  public static func buildLimitedAvailability(_: Content) -> Content
}
@available(*, unavailable)
extension DeveloperToolsSupport.PreviewBodyBuilder : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
@_functionBuilder public struct PreviewMacroBodyBuilder<Content> {
  public static func buildBlock(_: Content) -> Content
  @available(*, unavailable, message: "This builder requires exactly one content expression")
  public static func buildBlock(_: Content...) -> Content
  @available(*, unavailable, message: "This builder does not support control flow statements")
  public static func buildOptional(_: Content?) -> Content
  @available(*, unavailable, message: "This builder does not support control flow statements")
  public static func buildEither(first: Content) -> Content
  @available(*, unavailable, message: "This builder does not support control flow statements")
  public static func buildEither(second: Content) -> Content
  @available(*, unavailable, message: "This builder does not support control flow statements")
  public static func buildLimitedAvailability(_: Content) -> Content
}
@available(*, unavailable)
extension DeveloperToolsSupport.PreviewMacroBodyBuilder : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_Concurrency.MainActor public struct PreviewTrait<T> {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @_Concurrency.MainActor public init(_ traits: DeveloperToolsSupport.PreviewTrait<T>...)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_Concurrency.MainActor public struct Preview {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension DeveloperToolsSupport.Preview : Swift.Sendable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension DeveloperToolsSupport.PreviewTrait : Swift.Sendable {}
