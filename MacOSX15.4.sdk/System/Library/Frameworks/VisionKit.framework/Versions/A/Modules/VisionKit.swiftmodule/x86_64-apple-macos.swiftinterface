// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.5 clang-1700.0.13.3)
// swift-module-flags: -target x86_64-apple-macos15.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 281.402.1 -module-name VisionKit
// swift-module-flags-ignorable:  -interface-compiler-version 6.1
import AppKit
import Foundation
import Swift
@_exported import VisionKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers @available(iOS 16.0, macOS 13.0, macCatalyst 17.0, *)
final public class ImageAnalysis {
  final public var transcript: Swift.String {
    get
  }
  final public func hasResults(for analysisTypes: VisionKit.ImageAnalyzer.AnalysisTypes) -> Swift.Bool
  @objc deinit
}
@available(iOS 16.0, macOS 13.0, macCatalyst 17.0, *)
final public class ImageAnalyzer : @unchecked Swift.Sendable {
  public struct Configuration {
    public let analysisTypes: VisionKit.ImageAnalyzer.AnalysisTypes
    public var locales: [Swift.String]
    public init(_ types: VisionKit.ImageAnalyzer.AnalysisTypes)
  }
  public struct AnalysisTypes : Swift.OptionSet {
    public var rawValue: Swift.UInt
    public init(rawValue: Swift.UInt)
    public static let text: VisionKit.ImageAnalyzer.AnalysisTypes
    public static let machineReadableCode: VisionKit.ImageAnalyzer.AnalysisTypes
    public static let visualLookUp: VisionKit.ImageAnalyzer.AnalysisTypes
    @available(iOS 16.0, macOS 13.0, macCatalyst 17.0, *)
    public typealias ArrayLiteralElement = VisionKit.ImageAnalyzer.AnalysisTypes
    @available(iOS 16.0, macOS 13.0, macCatalyst 17.0, *)
    public typealias Element = VisionKit.ImageAnalyzer.AnalysisTypes
    @available(iOS 16.0, macOS 13.0, macCatalyst 17.0, *)
    public typealias RawValue = Swift.UInt
  }
  public init()
  final public class var isSupported: Swift.Bool {
    get
  }
  final public class var supportedTextRecognitionLanguages: [Swift.String] {
    get
  }
  final public func analyze(_ image: AppKit.NSImage, orientation: ImageIO.CGImagePropertyOrientation, configuration: VisionKit.ImageAnalyzer.Configuration) async throws -> VisionKit.ImageAnalysis
  final public func analyze(_ cgImage: CoreGraphics.CGImage, orientation: ImageIO.CGImagePropertyOrientation, configuration: VisionKit.ImageAnalyzer.Configuration) async throws -> VisionKit.ImageAnalysis
  final public func analyze(_ ciImage: CoreImage.CIImage, orientation: ImageIO.CGImagePropertyOrientation, configuration: VisionKit.ImageAnalyzer.Configuration) async throws -> VisionKit.ImageAnalysis
  final public func analyze(_ pixelBuffer: CoreVideo.CVPixelBuffer, orientation: ImageIO.CGImagePropertyOrientation, configuration: VisionKit.ImageAnalyzer.Configuration) async throws -> VisionKit.ImageAnalysis
  final public func analyze(imageAt url: Foundation.URL, orientation: ImageIO.CGImagePropertyOrientation, configuration: VisionKit.ImageAnalyzer.Configuration) async throws -> VisionKit.ImageAnalysis
  @objc deinit
}
@available(macOS 13.0, *)
@_Concurrency.MainActor public protocol ImageAnalysisOverlayViewDelegate : AnyObject {
  @_Concurrency.MainActor func overlayView(_ overlayView: VisionKit.ImageAnalysisOverlayView, shouldBeginAt point: CoreFoundation.CGPoint, forAnalysisType analysisType: VisionKit.ImageAnalysisOverlayView.InteractionTypes) -> Swift.Bool
  @_Concurrency.MainActor func contentsRect(for overlayView: VisionKit.ImageAnalysisOverlayView) -> CoreFoundation.CGRect
  @_Concurrency.MainActor func contentView(for overlayView: VisionKit.ImageAnalysisOverlayView) -> AppKit.NSView?
  @_Concurrency.MainActor func overlayView(_ overlayView: VisionKit.ImageAnalysisOverlayView, shouldHandleKeyDownEvent event: AppKit.NSEvent) -> Swift.Bool
  @_Concurrency.MainActor func overlayView(_ overlayView: VisionKit.ImageAnalysisOverlayView, shouldShowMenuForEvent event: AppKit.NSEvent, atPoint point: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor func overlayView(_ overlayView: VisionKit.ImageAnalysisOverlayView, liveTextButtonDidChangeToVisible visible: Swift.Bool)
  @_Concurrency.MainActor func overlayView(_ overlayView: VisionKit.ImageAnalysisOverlayView, highlightSelectedItemsDidChange highlightSelectedItems: Swift.Bool)
  @available(macOS 14.0, *)
  @_Concurrency.MainActor func textSelectionDidChange(_ overlayView: VisionKit.ImageAnalysisOverlayView)
  @available(macOS 14.0, *)
  @_Concurrency.MainActor func overlayView(_ overlayView: VisionKit.ImageAnalysisOverlayView, updatedMenuFor menu: AppKit.NSMenu, for event: AppKit.NSEvent, at point: CoreFoundation.CGPoint) -> AppKit.NSMenu
  @available(macOS 14.0, *)
  @_Concurrency.MainActor func overlayView(_ overlayView: VisionKit.ImageAnalysisOverlayView, needsUpdate menu: AppKit.NSMenu)
  @available(macOS 14.0, *)
  @_Concurrency.MainActor func overlayView(_ overlayView: VisionKit.ImageAnalysisOverlayView, willOpen menu: AppKit.NSMenu)
  @available(macOS 14.0, *)
  @_Concurrency.MainActor func overlayView(_ overlayView: VisionKit.ImageAnalysisOverlayView, didClose menu: AppKit.NSMenu)
  @available(macOS 14.0, *)
  @_Concurrency.MainActor func overlayView(_ overlayView: VisionKit.ImageAnalysisOverlayView, menu: AppKit.NSMenu, willHighlight menuItem: AppKit.NSMenuItem?)
}
@available(macOS 13.0, *)
extension VisionKit.ImageAnalysisOverlayViewDelegate {
  @_Concurrency.MainActor public func overlayView(_ overlayView: VisionKit.ImageAnalysisOverlayView, shouldBeginAt point: CoreFoundation.CGPoint, forAnalysisType analysisType: VisionKit.ImageAnalysisOverlayView.InteractionTypes) -> Swift.Bool
  @_Concurrency.MainActor public func contentsRect(for overlayView: VisionKit.ImageAnalysisOverlayView) -> CoreFoundation.CGRect
  @_Concurrency.MainActor public func contentView(for overlayView: VisionKit.ImageAnalysisOverlayView) -> AppKit.NSView?
  @_Concurrency.MainActor public func overlayView(_ overlayView: VisionKit.ImageAnalysisOverlayView, shouldHandleKeyDownEvent event: AppKit.NSEvent) -> Swift.Bool
  @_Concurrency.MainActor public func overlayView(_ overlayView: VisionKit.ImageAnalysisOverlayView, shouldShowMenuForEvent event: AppKit.NSEvent, atPoint point: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor public func overlayView(_ overlayView: VisionKit.ImageAnalysisOverlayView, updatedMenuFor menu: AppKit.NSMenu, for event: AppKit.NSEvent, at point: CoreFoundation.CGPoint) -> AppKit.NSMenu
  @_Concurrency.MainActor public func overlayView(_ overlayView: VisionKit.ImageAnalysisOverlayView, liveTextButtonDidChangeToVisible visible: Swift.Bool)
  @_Concurrency.MainActor public func overlayView(_ overlayView: VisionKit.ImageAnalysisOverlayView, highlightSelectedItemsDidChange highlightSelectedItems: Swift.Bool)
  @_Concurrency.MainActor public func textSelectionDidChange(_ overlayView: VisionKit.ImageAnalysisOverlayView)
  @_Concurrency.MainActor public func overlayView(_ overlayView: VisionKit.ImageAnalysisOverlayView, needsUpdate menu: AppKit.NSMenu)
  @_Concurrency.MainActor public func overlayView(_ overlayView: VisionKit.ImageAnalysisOverlayView, willOpen menu: AppKit.NSMenu)
  @_Concurrency.MainActor public func overlayView(_ overlayView: VisionKit.ImageAnalysisOverlayView, didClose menu: AppKit.NSMenu)
  @_Concurrency.MainActor public func overlayView(_ overlayView: VisionKit.ImageAnalysisOverlayView, menu: AppKit.NSMenu, willHighlight menuItem: AppKit.NSMenuItem?)
}
@objc @_inheritsConvenienceInitializers @available(macOS 13.0, *)
@_Concurrency.MainActor final public class ImageAnalysisOverlayView : AppKit.NSView {
  public struct InteractionTypes : Swift.OptionSet {
    public var rawValue: Swift.UInt
    public init(rawValue: Swift.UInt)
    public static let automatic: VisionKit.ImageAnalysisOverlayView.InteractionTypes
    public static let automaticTextOnly: VisionKit.ImageAnalysisOverlayView.InteractionTypes
    public static let textSelection: VisionKit.ImageAnalysisOverlayView.InteractionTypes
    public static let dataDetectors: VisionKit.ImageAnalysisOverlayView.InteractionTypes
    public static let imageSubject: VisionKit.ImageAnalysisOverlayView.InteractionTypes
    public static let visualLookUp: VisionKit.ImageAnalysisOverlayView.InteractionTypes
    @available(macOS 13.0, *)
    public typealias ArrayLiteralElement = VisionKit.ImageAnalysisOverlayView.InteractionTypes
    @available(macOS 13.0, *)
    public typealias Element = VisionKit.ImageAnalysisOverlayView.InteractionTypes
    @available(macOS 13.0, *)
    public typealias RawValue = Swift.UInt
  }
  @available(macOS 14.0, *)
  public struct MenuTag {
    public static let copyImage: Swift.Int
    public static let shareImage: Swift.Int
    public static let copySubject: Swift.Int
    public static let shareSubject: Swift.Int
    public static let lookupItem: Swift.Int
    public static let recommendedAppItems: Swift.Int
  }
  @_Concurrency.MainActor @objc override dynamic public init(frame frameRect: Foundation.NSRect)
  @_Concurrency.MainActor @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor convenience public init(_ delegate: any VisionKit.ImageAnalysisOverlayViewDelegate)
  @_Concurrency.MainActor weak final public var delegate: (any VisionKit.ImageAnalysisOverlayViewDelegate)? {
    get
    set
  }
  @_Concurrency.MainActor @objc override final public func viewDidMoveToSuperview()
  @_Concurrency.MainActor final public var analysis: VisionKit.ImageAnalysis? {
    get
    set
  }
  @_Concurrency.MainActor final public var preferredInteractionTypes: VisionKit.ImageAnalysisOverlayView.InteractionTypes {
    get
    set
  }
  @_Concurrency.MainActor final public var activeInteractionTypes: VisionKit.ImageAnalysisOverlayView.InteractionTypes {
    get
  }
  @_Concurrency.MainActor final public var selectableItemsHighlighted: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor weak final public var trackingImageView: AppKit.NSImageView? {
    get
    set
  }
  @_Concurrency.MainActor final public var hasActiveTextSelection: Swift.Bool {
    get
  }
  @_Concurrency.MainActor final public func resetSelection()
  @available(macOS 14.0, *)
  @_Concurrency.MainActor final public var text: Swift.String {
    get
  }
  @available(macOS 14.0, *)
  @_Concurrency.MainActor final public var selectedText: Swift.String {
    get
  }
  @available(macOS 14.0, *)
  @_Concurrency.MainActor final public var selectedAttributedText: Foundation.AttributedString {
    get
  }
  @available(macOS 14.0, *)
  @_Concurrency.MainActor final public var selectedRanges: [Swift.Range<Swift.String.Index>] {
    get
    set
  }
  @_Concurrency.MainActor final public var contentsRect: CoreFoundation.CGRect {
    get
  }
  @_Concurrency.MainActor final public func setContentsRectNeedsUpdate()
  @_Concurrency.MainActor final public func hasInteractiveItem(at point: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor final public func hasText(at point: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor final public func hasDataDetector(at point: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor final public func hasSupplementaryInterface(at point: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor final public func analysisHasText(at point: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor final public var liveTextButtonVisible: Swift.Bool {
    get
  }
  @_Concurrency.MainActor final public var isSupplementaryInterfaceHidden: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor final public func setSupplementaryInterfaceHidden(_ hidden: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor final public var supplementaryInterfaceContentInsets: Foundation.NSEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor final public var supplementaryInterfaceFont: AppKit.NSFont? {
    get
    set
  }
  public enum SubjectUnavailable : Swift.Error {
    case imageUnavailable
    public static func == (a: VisionKit.ImageAnalysisOverlayView.SubjectUnavailable, b: VisionKit.ImageAnalysisOverlayView.SubjectUnavailable) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Subject : Swift.Hashable {
    @_Concurrency.MainActor public var bounds: CoreFoundation.CGRect {
      get
    }
    public var image: AppKit.NSImage {
      get async throws
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: VisionKit.ImageAnalysisOverlayView.Subject, b: VisionKit.ImageAnalysisOverlayView.Subject) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor final public func beginSubjectAnalysisIfNecessary()
  @_Concurrency.MainActor final public var subjects: Swift.Set<VisionKit.ImageAnalysisOverlayView.Subject> {
    get async
  }
  @_Concurrency.MainActor final public var highlightedSubjects: Swift.Set<VisionKit.ImageAnalysisOverlayView.Subject> {
    get
    set
  }
  @_Concurrency.MainActor final public func subject(at point: CoreFoundation.CGPoint) async -> VisionKit.ImageAnalysisOverlayView.Subject?
  @_Concurrency.MainActor final public func image(for subjects: Swift.Set<VisionKit.ImageAnalysisOverlayView.Subject>) async throws -> AppKit.NSImage
  @objc deinit
}
@available(macOS 13.0, *)
extension VisionKit.ImageAnalysisOverlayView.SubjectUnavailable : Swift.Equatable {}
@available(macOS 13.0, *)
extension VisionKit.ImageAnalysisOverlayView.SubjectUnavailable : Swift.Hashable {}
