// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target x86_64-apple-ios18.5-macabi -enable-objc-interop -enable-library-evolution -swift-version 6 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -user-module-version 7621.2.5.11.8 -module-name WebKit
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import Network
import Swift
@_exported import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(iOS 14.0, macOS 11.0, *)
extension WebKit.WKPDFConfiguration {
  @_Concurrency.MainActor @preconcurrency public var rect: CoreFoundation.CGRect? {
    get
    set
  }
}
@available(iOS 14.0, macOS 11.0, *)
extension WebKit.WKWebView {
  @preconcurrency @_Concurrency.MainActor public func callAsyncJavaScript(_ functionBody: Swift.String, arguments: [Swift.String : Any] = [:], in frame: WebKit.WKFrameInfo? = nil, in contentWorld: WebKit.WKContentWorld, completionHandler: (@_Concurrency.MainActor @Sendable (Swift.Result<Any, any Swift.Error>) -> Swift.Void)? = nil)
  @preconcurrency @_Concurrency.MainActor public func createPDF(configuration: WebKit.WKPDFConfiguration = .init(), completionHandler: @escaping @_Concurrency.MainActor @Sendable (Swift.Result<Foundation.Data, any Swift.Error>) -> Swift.Void)
  @preconcurrency @_Concurrency.MainActor public func createWebArchiveData(completionHandler: @escaping @_Concurrency.MainActor @Sendable (Swift.Result<Foundation.Data, any Swift.Error>) -> Swift.Void)
  @preconcurrency @_Concurrency.MainActor public func evaluateJavaScript(_ javaScript: Swift.String, in frame: WebKit.WKFrameInfo? = nil, in contentWorld: WebKit.WKContentWorld, completionHandler: (@_Concurrency.MainActor @Sendable (Swift.Result<Any, any Swift.Error>) -> Swift.Void)? = nil)
  @preconcurrency @_Concurrency.MainActor public func find(_ string: Swift.String, configuration: WebKit.WKFindConfiguration = .init(), completionHandler: @escaping @_Concurrency.MainActor @Sendable (WebKit.WKFindResult) -> Swift.Void)
}
@available(iOS 15.0, macOS 12.0, *)
extension WebKit.WKWebView {
  @_Concurrency.MainActor @preconcurrency public func callAsyncJavaScript(_ functionBody: Swift.String, arguments: [Swift.String : Any] = [:], in frame: WebKit.WKFrameInfo? = nil, contentWorld: WebKit.WKContentWorld) async throws -> Any?
  @_Concurrency.MainActor @preconcurrency public func pdf(configuration: WebKit.WKPDFConfiguration = .init()) async throws -> Foundation.Data
  @_Concurrency.MainActor @preconcurrency public func evaluateJavaScript(_ javaScript: Swift.String, in frame: WebKit.WKFrameInfo? = nil, contentWorld: WebKit.WKContentWorld) async throws -> Any?
  @_Concurrency.MainActor @preconcurrency public func find(_ string: Swift.String, configuration: WebKit.WKFindConfiguration = .init()) async throws -> WebKit.WKFindResult
}
@available(iOS 18.4, macOS 15.4, visionOS 2.4, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension WebKit.WKWebExtension {
  @_Concurrency.MainActor @preconcurrency convenience public init(appExtensionBundle: Foundation.Bundle) async throws
  @_Concurrency.MainActor @preconcurrency convenience public init(resourceBaseURL: Foundation.URL) async throws
}
@available(iOS 18.4, macOS 15.4, visionOS 2.4, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension WebKit.WKWebExtensionController {
  @_Concurrency.MainActor @preconcurrency public func didCloseTab(_ closedTab: any WebKit.WKWebExtensionTab, windowIsClosing: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public func didActivateTab(_ activatedTab: any WebKit.WKWebExtensionTab, previousActiveTab previousTab: (any WebKit.WKWebExtensionTab)? = nil)
  @_Concurrency.MainActor @preconcurrency public func didMoveTab(_ movedTab: any WebKit.WKWebExtensionTab, from index: Swift.Int, in oldWindow: (any WebKit.WKWebExtensionWindow)? = nil)
}
@available(iOS 18.4, macOS 15.4, visionOS 2.4, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension WebKit.WKWebExtensionContext {
  @_Concurrency.MainActor @preconcurrency public func didCloseTab(_ closedTab: any WebKit.WKWebExtensionTab, windowIsClosing: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public func didActivateTab(_ activatedTab: any WebKit.WKWebExtensionTab, previousActiveTab previousTab: (any WebKit.WKWebExtensionTab)? = nil)
  @_Concurrency.MainActor @preconcurrency public func didMoveTab(_ movedTab: any WebKit.WKWebExtensionTab, from index: Swift.Int, in oldWindow: (any WebKit.WKWebExtensionWindow)? = nil)
}
@available(iOS 17.0, macOS 14.0, *)
extension WebKit.WKWebsiteDataStore {
  @_Concurrency.MainActor @preconcurrency public var proxyConfigurations: [Network.ProxyConfiguration] {
    get
    set
  }
}
