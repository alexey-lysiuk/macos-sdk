// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64e-apple-macos15.5 -target-variant arm64e-apple-ios18.5-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 212.5 -module-name ExtensionFoundation
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
@_exported import ExtensionFoundation
import Foundation
import Network
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol AppExtension {
  associatedtype Configuration : ExtensionFoundation.AppExtensionConfiguration
  @preconcurrency @_Concurrency.MainActor var configuration: Self.Configuration { get }
  @preconcurrency @_Concurrency.MainActor init()
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension ExtensionFoundation.AppExtension {
  @preconcurrency @_Concurrency.MainActor public static func main() throws
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@preconcurrency @_Concurrency.MainActor public protocol AppExtensionConfiguration : Swift.Sendable {
  nonisolated func accept(connection: Foundation.NSXPCConnection) -> Swift.Bool
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension ExtensionFoundation.AppExtensionIdentity {
  public static func matching(appExtensionPointIDs: Swift.String...) throws -> ExtensionFoundation.AppExtensionIdentity.Identities
  public struct Identities : _Concurrency.AsyncSequence {
    public typealias Element = [ExtensionFoundation.AppExtensionIdentity]
    public struct AsyncIterator : _Concurrency.AsyncIteratorProtocol {
      public mutating func next() async -> [ExtensionFoundation.AppExtensionIdentity]?
      @available(macOS 13.0, *)
      @available(iOS, unavailable)
      @available(tvOS, unavailable)
      @available(watchOS, unavailable)
      @available(visionOS, unavailable)
      public typealias Element = [ExtensionFoundation.AppExtensionIdentity]
      @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = Swift.Never
    }
    public func makeAsyncIterator() -> ExtensionFoundation.AppExtensionIdentity.Identities.AsyncIterator
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  }
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension ExtensionFoundation.AppExtensionIdentity {
  public struct Availability : Swift.CustomStringConvertible, Swift.Sendable {
    public init()
    public let enabledCount: Swift.Int
    public let disabledCount: Swift.Int
    public let unapprovedCount: Swift.Int
    public var totalCount: Swift.Int {
      get
    }
    public var description: Swift.String {
      get
    }
  }
  public static var availabilityUpdates: _Concurrency.AsyncStream<ExtensionFoundation.AppExtensionIdentity.Availability> {
    get
  }
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct AppExtensionIdentity : Swift.Hashable, Swift.Sendable {
  public var extensionPointIdentifier: Swift.String {
    get
  }
  public var bundleIdentifier: Swift.String {
    get
  }
  public var localizedName: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: ExtensionFoundation.AppExtensionIdentity, rhs: ExtensionFoundation.AppExtensionIdentity) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct AppExtensionProcess {
  public init(configuration: ExtensionFoundation.AppExtensionProcess.Configuration) async throws
  public init(configuration: ExtensionFoundation.AppExtensionProcess.Configuration) throws
  public func makeXPCConnection() throws -> Foundation.NSXPCConnection
  public func invalidate()
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension ExtensionFoundation.AppExtensionProcess {
  public struct Configuration {
    public var appExtensionIdentity: ExtensionFoundation.AppExtensionIdentity
    public var onInterruption: () -> Swift.Void
    public init(appExtensionIdentity: ExtensionFoundation.AppExtensionIdentity, onInterruption: @escaping () -> Swift.Void = {})
  }
}
