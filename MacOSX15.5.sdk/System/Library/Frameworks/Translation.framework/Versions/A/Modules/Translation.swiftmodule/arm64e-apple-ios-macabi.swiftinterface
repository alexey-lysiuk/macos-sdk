// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64e-apple-ios18.5-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 300.16 -module-name Translation -module-alias Module___Translation=Translation -module-alias Module____StringProcessing=_StringProcessing -module-alias Module____SwiftConcurrencyShims=_SwiftConcurrencyShims -module-alias Module____Concurrency=_Concurrency
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import Foundation
import Swift
@_exported import Module___Translation
import Module____Concurrency
import Module____StringProcessing
import Module____SwiftConcurrencyShims
@available(iOS 18.0, macOS 15.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(macCatalyst, unavailable)
public class LanguageAvailability {
  public enum Status : Swift.Equatable, Swift.Sendable {
    case installed
    case supported
    case unsupported
    public static func == (lhs: Module___Translation.LanguageAvailability.Status, rhs: Module___Translation.LanguageAvailability.Status) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var supportedLanguages: [Foundation.Locale.Language] {
    get async
  }
  public func status(from source: Foundation.Locale.Language, to target: Foundation.Locale.Language?) async -> Module___Translation.LanguageAvailability.Status
  public func status(for text: Swift.String, to target: Foundation.Locale.Language?) async throws -> Module___Translation.LanguageAvailability.Status
  public init()
  @objc deinit
}
@available(iOS 18.0, macOS 15.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(macCatalyst, unavailable)
public struct TranslationError : Foundation.LocalizedError {
  public static let unsupportedSourceLanguage: Module___Translation.TranslationError
  public static let unsupportedTargetLanguage: Module___Translation.TranslationError
  public static let unsupportedLanguagePairing: Module___Translation.TranslationError
  public static let unableToIdentifyLanguage: Module___Translation.TranslationError
  public static let nothingToTranslate: Module___Translation.TranslationError
  public static let internalError: Module___Translation.TranslationError
  public static func ~= (match: Module___Translation.TranslationError, error: any Swift.Error) -> Swift.Bool
  public var errorDescription: Swift.String? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
}
@available(iOS 18.0, macOS 15.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(macCatalyst, unavailable)
public class TranslationSession {
  final public let sourceLanguage: Foundation.Locale.Language?
  final public let targetLanguage: Foundation.Locale.Language?
  public struct Request {
    public var sourceText: Swift.String
    public var clientIdentifier: Swift.String?
    public init(sourceText: Swift.String, clientIdentifier: Swift.String? = nil)
  }
  public struct Response : Swift.Sendable {
    public let sourceLanguage: Foundation.Locale.Language
    public let targetLanguage: Foundation.Locale.Language
    public let sourceText: Swift.String
    public let targetText: Swift.String
    public let clientIdentifier: Swift.String?
    public init(sourceLanguage: Foundation.Locale.Language, targetLanguage: Foundation.Locale.Language, sourceText: Swift.String, targetText: Swift.String, clientIdentifier: Swift.String? = nil)
  }
  public struct BatchResponse : Module____Concurrency.AsyncSequence {
    public typealias Element = Module___Translation.TranslationSession.Response
    public func makeAsyncIterator() -> Module___Translation.TranslationSession.BatchResponse.AsyncIterator
    public struct AsyncIterator : Module____Concurrency.AsyncIteratorProtocol {
      public mutating func next() async throws -> Module___Translation.TranslationSession.BatchResponse.Element?
      @available(iOS 18.0, macOS 15.0, *)
      @available(tvOS, unavailable)
      @available(watchOS, unavailable)
      @available(visionOS, unavailable)
      @available(macCatalyst, unavailable)
      public typealias Element = Module___Translation.TranslationSession.BatchResponse.Element
      @available(iOS 18.0, macOS 15.0, *)
      @available(tvOS, unavailable, introduced: 18.0)
      @available(watchOS, unavailable, introduced: 11.0)
      @available(visionOS, unavailable, introduced: 2.0)
      @available(macCatalyst, unavailable)
      @_implements(Module____Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
    }
    @available(iOS 18.0, macOS 15.0, *)
    @available(tvOS, unavailable, introduced: 18.0)
    @available(watchOS, unavailable, introduced: 11.0)
    @available(visionOS, unavailable, introduced: 2.0)
    @available(macCatalyst, unavailable)
    @_implements(Module____Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
  }
  public struct Configuration : Swift.Equatable {
    public var source: Foundation.Locale.Language?
    public var target: Foundation.Locale.Language?
    public var version: Swift.Int {
      get
    }
    public mutating func invalidate()
    public init(source: Foundation.Locale.Language? = nil, target: Foundation.Locale.Language? = nil)
    public static func == (lhs: Module___Translation.TranslationSession.Configuration, rhs: Module___Translation.TranslationSession.Configuration) -> Swift.Bool
  }
  public func translate(_ string: Swift.String) async throws -> Module___Translation.TranslationSession.Response
  public func translate(batch: [Module___Translation.TranslationSession.Request]) -> Module___Translation.TranslationSession.BatchResponse
  public func translations(from batch: [Module___Translation.TranslationSession.Request]) async throws -> [Module___Translation.TranslationSession.Response]
  public func prepareTranslation() async throws
  @objc deinit
}
@available(iOS 18.0, macOS 15.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(macCatalyst, unavailable)
extension Module___Translation.LanguageAvailability.Status : Swift.Hashable {}
