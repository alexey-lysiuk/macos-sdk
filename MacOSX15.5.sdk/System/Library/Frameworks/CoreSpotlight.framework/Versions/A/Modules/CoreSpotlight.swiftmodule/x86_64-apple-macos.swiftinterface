// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target x86_64-apple-macos15.5 -target-variant x86_64-apple-ios18.5-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 2333.50.1 -module-name CoreSpotlight
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
@_exported import CoreSpotlight
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(macOS 13.0, iOS 16.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension CoreSpotlight.CSSearchQuery {
  public struct Results : _Concurrency.AsyncSequence, Swift.Sendable {
    public struct Item : Swift.Identifiable, Swift.Hashable, Swift.Equatable, Swift.Comparable, @unchecked Swift.Sendable {
      public var id: Swift.String {
        get
      }
      public var item: CoreSpotlight.CSSearchableItem
      public static func < (lhs: CoreSpotlight.CSSearchQuery.Results.Item, rhs: CoreSpotlight.CSSearchQuery.Results.Item) -> Swift.Bool
      public static func > (lhs: CoreSpotlight.CSSearchQuery.Results.Item, rhs: CoreSpotlight.CSSearchQuery.Results.Item) -> Swift.Bool
      public static func == (lhs: CoreSpotlight.CSSearchQuery.Results.Item, rhs: CoreSpotlight.CSSearchQuery.Results.Item) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      @available(iOS 16.0, macOS 13.0, *)
      @available(tvOS, unavailable)
      @available(watchOS, unavailable)
      public typealias ID = Swift.String
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias AsyncIterator = CoreSpotlight.CSSearchQuery.Results.Iterator
    public typealias Element = CoreSpotlight.CSSearchQuery.Results.Item
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      public mutating func next() async throws -> CoreSpotlight.CSSearchQuery.Results.Item?
      @available(iOS 16.0, macOS 13.0, *)
      @available(tvOS, unavailable)
      @available(watchOS, unavailable)
      public typealias Element = CoreSpotlight.CSSearchQuery.Results.Item
      @available(iOS 18.0, visionOS 2.0, macOS 15.0, *)
      @available(tvOS, unavailable, introduced: 18.0)
      @available(watchOS, unavailable, introduced: 11.0)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
    }
    public func makeAsyncIterator() -> CoreSpotlight.CSSearchQuery.Results.Iterator
    @available(iOS 18.0, visionOS 2.0, macOS 15.0, *)
    @available(tvOS, unavailable, introduced: 18.0)
    @available(watchOS, unavailable, introduced: 11.0)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
  }
  public var results: CoreSpotlight.CSSearchQuery.Results {
    get
  }
}
@available(macOS 13.0, iOS 16.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension CoreSpotlight.CSSuggestion {
  public var localizedAttributedSuggestion: Foundation.AttributedString {
    get
  }
}
@available(macOS 13.0, iOS 16.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension CoreSpotlight.CSUserQuery {
  public struct Item : Swift.Identifiable, Swift.Hashable, Swift.Equatable, Swift.Comparable, @unchecked Swift.Sendable {
    public var id: Swift.String {
      get
    }
    public var item: CoreSpotlight.CSSearchableItem
    public static func < (lhs: CoreSpotlight.CSUserQuery.Item, rhs: CoreSpotlight.CSUserQuery.Item) -> Swift.Bool
    public static func > (lhs: CoreSpotlight.CSUserQuery.Item, rhs: CoreSpotlight.CSUserQuery.Item) -> Swift.Bool
    public static func == (lhs: CoreSpotlight.CSUserQuery.Item, rhs: CoreSpotlight.CSUserQuery.Item) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    @available(iOS 16.0, macOS 13.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    public typealias ID = Swift.String
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Suggestion : Swift.Identifiable, Swift.Hashable, Swift.Comparable, @unchecked Swift.Sendable {
    public var id: Swift.String {
      get
    }
    public var suggestion: CoreSpotlight.CSSuggestion
    public static func < (lhs: CoreSpotlight.CSUserQuery.Suggestion, rhs: CoreSpotlight.CSUserQuery.Suggestion) -> Swift.Bool
    public static func > (lhs: CoreSpotlight.CSUserQuery.Suggestion, rhs: CoreSpotlight.CSUserQuery.Suggestion) -> Swift.Bool
    public static func == (lhs: CoreSpotlight.CSUserQuery.Suggestion, rhs: CoreSpotlight.CSUserQuery.Suggestion) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    @available(iOS 16.0, macOS 13.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    public typealias ID = Swift.String
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Responses : _Concurrency.AsyncSequence, Swift.Sendable {
    public enum Response : Swift.Identifiable, Swift.Hashable, Swift.Equatable, @unchecked Swift.Sendable {
      case item(CoreSpotlight.CSUserQuery.Item)
      case suggestion(CoreSpotlight.CSUserQuery.Suggestion)
      public var id: Swift.String {
        get
      }
      public static func == (a: CoreSpotlight.CSUserQuery.Responses.Response, b: CoreSpotlight.CSUserQuery.Responses.Response) -> Swift.Bool
      @available(iOS 16.0, macOS 13.0, *)
      @available(tvOS, unavailable)
      @available(watchOS, unavailable)
      public typealias ID = Swift.String
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias AsyncIterator = CoreSpotlight.CSUserQuery.Responses.Iterator
    public typealias Element = CoreSpotlight.CSUserQuery.Responses.Response
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      public mutating func next() async throws -> CoreSpotlight.CSUserQuery.Responses.Element?
      @available(iOS 16.0, macOS 13.0, *)
      @available(tvOS, unavailable)
      @available(watchOS, unavailable)
      public typealias Element = CoreSpotlight.CSUserQuery.Responses.Element
      @available(iOS 18.0, visionOS 2.0, macOS 15.0, *)
      @available(tvOS, unavailable, introduced: 18.0)
      @available(watchOS, unavailable, introduced: 11.0)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
    }
    public func makeAsyncIterator() -> CoreSpotlight.CSUserQuery.Responses.Iterator
    @available(iOS 18.0, visionOS 2.0, macOS 15.0, *)
    @available(tvOS, unavailable, introduced: 18.0)
    @available(watchOS, unavailable, introduced: 11.0)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
  }
  public struct Suggestions : _Concurrency.AsyncSequence, Swift.Sendable {
    public typealias AsyncIterator = CoreSpotlight.CSUserQuery.Suggestions.Iterator
    public typealias Element = CoreSpotlight.CSUserQuery.Suggestion
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      public mutating func next() async throws -> CoreSpotlight.CSUserQuery.Suggestions.Element?
      @available(iOS 16.0, macOS 13.0, *)
      @available(tvOS, unavailable)
      @available(watchOS, unavailable)
      public typealias Element = CoreSpotlight.CSUserQuery.Suggestions.Element
      @available(iOS 18.0, visionOS 2.0, macOS 15.0, *)
      @available(tvOS, unavailable, introduced: 18.0)
      @available(watchOS, unavailable, introduced: 11.0)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
    }
    public func makeAsyncIterator() -> CoreSpotlight.CSUserQuery.Suggestions.Iterator
    @available(iOS 18.0, visionOS 2.0, macOS 15.0, *)
    @available(tvOS, unavailable, introduced: 18.0)
    @available(watchOS, unavailable, introduced: 11.0)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
  }
  public var responses: CoreSpotlight.CSUserQuery.Responses {
    get
  }
  public var suggestions: CoreSpotlight.CSUserQuery.Suggestions {
    get
  }
  @available(macOS 15.0, iOS 18.0, *)
  public func userEngaged(_ item: CoreSpotlight.CSUserQuery.Item, visibleItems: [CoreSpotlight.CSUserQuery.Item], interaction: CoreSpotlight.CSUserQuery.UserInteractionKind)
  @available(macOS 15.0, iOS 18.0, *)
  public func userEngaged(_ suggestion: CoreSpotlight.CSUserQuery.Suggestion, visibleSuggestions: [CoreSpotlight.CSUserQuery.Suggestion], interaction: CoreSpotlight.CSUserQuery.UserInteractionKind)
}
