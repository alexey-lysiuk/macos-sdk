// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64e-apple-macos15.5 -target-variant arm64e-apple-ios18.5-macabi -enable-objc-interop -autolink-force-load -enable-library-evolution -swift-version 6 -enforce-exclusivity=checked -Osize -library-level api -target-min-inlining-version min -enable-experimental-feature DebugDescriptionMacro -enable-upcoming-feature ExistentialAny -enable-upcoming-feature InternalImportsByDefault -user-module-version 2260.10.3 -module-name CloudKit
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
@_exported public import CloudKit
public import CoreTransferable
public import Swift
public import _Concurrency
public import _StringProcessing
public import _SwiftConcurrencyShims
@available(macOS 13.3, macCatalyst 16.4, iOS 16.4, tvOS 16.4, watchOS 9.4, *)
@nonobjc extension CloudKit.CKUserIdentity.LookupInfo : @unchecked Swift.Sendable {
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
final public class CKSyncEngine : Swift.Sendable {
  public init(_ configuration: CloudKit.CKSyncEngine.Configuration)
  final public var database: CloudKit.CKDatabase {
    get
  }
  final public var state: CloudKit.CKSyncEngine.State {
    get
  }
  @objc deinit
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine {
  final public func fetchChanges(_ options: CloudKit.CKSyncEngine.FetchChangesOptions = .init()) async throws
  final public func sendChanges(_ options: CloudKit.CKSyncEngine.SendChangesOptions = .init()) async throws
  final public func cancelOperations() async
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine : Swift.CustomStringConvertible {
  final public var description: Swift.String {
    get
  }
}
@available(macOS, introduced: 10.12, deprecated: 14.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
@available(macCatalyst, introduced: 13.1, deprecated: 17.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
@available(iOS, introduced: 10.0, deprecated: 17.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
@available(tvOS, introduced: 10.0, deprecated: 17.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
@available(watchOS, introduced: 3.0, deprecated: 10.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
@available(visionOS, deprecated, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
@nonobjc extension CloudKit.CKDiscoverUserIdentitiesOperation {
  @available(macOS, introduced: 12.0, deprecated: 14.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(macCatalyst, introduced: 15.0, deprecated: 17.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(iOS, introduced: 15.0, deprecated: 17.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(tvOS, introduced: 15.0, deprecated: 17.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(watchOS, introduced: 8.0, deprecated: 10.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(visionOS, deprecated, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  public var discoverUserIdentitiesResultBlock: ((_ operationResult: Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 13.0, macCatalyst 16.0, iOS 16.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Foundation.NSItemProvider {
  @available(macOS 13.0, macCatalyst 16.0, iOS 16.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public func registerCKShare(container: CloudKit.CKContainer, allowedSharingOptions: CloudKit.CKAllowedSharingOptions = CKAllowedSharingOptions.standard, preparationHandler: @escaping @Sendable () async throws -> CloudKit.CKShare)
  @available(macOS 13.0, macCatalyst 16.0, iOS 16.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public func registerCKShare(_ share: CloudKit.CKShare, container: CloudKit.CKContainer, allowedSharingOptions: CloudKit.CKAllowedSharingOptions = CKAllowedSharingOptions.standard)
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKRecordZone.ID {
  @available(macOS 10.12, macCatalyst 13.1, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
  convenience public init(zoneName: Swift.String = CKRecordZone.ID.defaultZoneName, ownerName: Swift.String = CKCurrentUserDefaultName)
  @available(macOS, introduced: 10.10, deprecated: 10.12)
  @available(macCatalyst, introduced: 13.1, deprecated: 13.1)
  @available(iOS, introduced: 8.0, deprecated: 10.0)
  @available(tvOS, introduced: 9.0, deprecated: 10.0)
  @available(watchOS, introduced: 3.0, deprecated: 3.0)
  @available(visionOS, deprecated)
  @_alwaysEmitIntoClient @_disfavoredOverload convenience public init(zoneName: Swift.String = CKRecordZone.ID.defaultZoneName, ownerName: Swift.String? = CKOwnerDefaultName) {
        self.init(__zoneName: zoneName, ownerName: ownerName ?? CKOwnerDefaultName)
    }
  @available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
  public static let `default`: CloudKit.CKRecordZone.ID
  @available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
  public static let defaultZoneName: Swift.String
}
@available(macOS 13.3, macCatalyst 16.4, iOS 16.4, tvOS 16.4, watchOS 9.4, *)
@nonobjc extension CloudKit.CKRecordZone.ID : @unchecked Swift.Sendable {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
@available(swift, obsoleted: 4.2, renamed: "CKRecordZone.ID.defaultZoneName")
@nonobjc public let CKRecordZoneDefaultName: Swift.String
@available(macOS 10.12, macCatalyst 13.1, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKShare {
  @available(swift 4.2)
  public enum SystemFieldKey {
    @available(macOS 10.12, macCatalyst 13.1, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
    public static let title: CloudKit.CKRecord.FieldKey
    @available(macOS 10.12, macCatalyst 13.1, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
    public static let thumbnailImageData: CloudKit.CKRecord.FieldKey
    @available(macOS 10.12, macCatalyst 13.1, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
    public static let shareType: CloudKit.CKRecord.FieldKey
  }
}
@available(*, unavailable)
extension CloudKit.CKShare.SystemFieldKey : Swift.Sendable {
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
@nonobjc extension CloudKit.CKShare : @unchecked Swift.Sendable {
}
@available(macOS 10.12, macCatalyst 13.1, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@available(swift, obsoleted: 4.2, renamed: "CKRecord.SystemType.share")
@nonobjc public let CKRecordTypeShare: Swift.String
@available(macOS 10.12, macCatalyst 13.1, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@available(swift, obsoleted: 4.2, renamed: "CKShare.SystemFieldKey.title")
@nonobjc public let CKShareTitleKey: Swift.String
@available(macOS 10.12, macCatalyst 13.1, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@available(swift, obsoleted: 4.2, renamed: "CKShare.SystemFieldKey.thumbnailImageData")
@nonobjc public let CKShareThumbnailImageDataKey: Swift.String
@available(macOS 10.12, macCatalyst 13.1, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@available(swift, obsoleted: 4.2, renamed: "CKShare.SystemFieldKey.shareType")
@nonobjc public let CKShareTypeKey: Swift.String
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
public protocol CKRecordValueProtocol {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
public typealias CKRecordValue = CloudKit.__CKRecordObjCValue
@available(macOS 10.11, macCatalyst 13.1, iOS 9.0, tvOS 9.0, watchOS 3.0, *)
extension CloudKit.CKRecordKeyValueSetting {
  @nonobjc public subscript<T>(key: CloudKit.CKRecord.FieldKey) -> T? where T : CloudKit.CKRecordValueProtocol {
    get
    set
  }
  @nonobjc public subscript(key: CloudKit.CKRecord.FieldKey) -> (any CloudKit.CKRecordValueProtocol)? {
    get
    set
  }
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
extension Swift.String : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
extension Foundation.Date : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
extension Foundation.Data : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
extension Swift.Bool : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
extension Swift.Double : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
extension Swift.Int : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
extension Swift.UInt : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
extension Swift.Int8 : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
extension Swift.UInt8 : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
extension Swift.Int16 : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
extension Swift.UInt16 : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
extension Swift.Int32 : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
extension Swift.UInt32 : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
extension Swift.Int64 : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
extension Swift.UInt64 : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
extension Swift.Float : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
extension Swift.Array : CloudKit.CKRecordValueProtocol where Element : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
@nonobjc extension Foundation.NSString : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
@nonobjc extension Foundation.NSDate : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
@nonobjc extension Foundation.NSData : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
@nonobjc extension Foundation.NSNumber : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
@nonobjc extension Foundation.NSArray : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKRecord.Reference : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKAsset : CloudKit.CKRecordValueProtocol {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
@nonobjc extension CoreLocation.CLLocation : CloudKit.CKRecordValueProtocol {
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine {
  public struct Configuration : Swift.Sendable {
    public var database: CloudKit.CKDatabase
    public var stateSerialization: CloudKit.CKSyncEngine.State.Serialization?
    public var delegate: any CloudKit.CKSyncEngineDelegate
    public var automaticallySync: Swift.Bool
    public var subscriptionID: CloudKit.CKSubscription.ID?
    public init(database: CloudKit.CKDatabase, stateSerialization: CloudKit.CKSyncEngine.State.Serialization?, delegate: any CloudKit.CKSyncEngineDelegate)
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.Configuration : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 10.12, macCatalyst 13.1, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKFetchRecordZonesOperation {
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var perRecordZoneResultBlock: ((_ recordZoneID: CloudKit.CKRecordZone.ID, _ recordZoneResult: Swift.Result<CloudKit.CKRecordZone, any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var fetchRecordZonesResultBlock: ((_ operationResult: Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 10.12, macCatalyst 13.1, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKFetchRecordZoneChangesOperation {
  @available(swift 4.2)
  @available(macOS 10.14, macCatalyst 13.1, iOS 12.0, tvOS 12.0, watchOS 5.0, *)
  convenience public init(recordZoneIDs: [CloudKit.CKRecordZone.ID]? = nil, configurationsByRecordZoneID: [CloudKit.CKRecordZone.ID : CloudKit.CKFetchRecordZoneChangesOperation.ZoneConfiguration]? = nil)
  @available(swift 4.2)
  public var recordWithIDWasDeletedBlock: ((_ recordID: CloudKit.CKRecord.ID, _ recordType: CloudKit.CKRecord.RecordType) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var recordWasChangedBlock: ((_ recordID: CloudKit.CKRecord.ID, _ recordResult: Swift.Result<CloudKit.CKRecord, any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var recordZoneFetchResultBlock: ((_ recordZoneID: CloudKit.CKRecordZone.ID, _ fetchChangesResult: Swift.Result<(serverChangeToken: CloudKit.CKServerChangeToken, clientChangeTokenData: Foundation.Data?, moreComing: Swift.Bool), any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var fetchRecordZoneChangesResultBlock: ((_ operationResult: Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 10.14, macCatalyst 13.1, iOS 12.0, tvOS 12.0, watchOS 5.0, *)
@nonobjc extension CloudKit.CKFetchRecordZoneChangesOperation.ZoneConfiguration {
  @available(swift 4.2)
  public var desiredKeys: [CloudKit.CKRecord.FieldKey]? {
    get
    set
  }
  @available(swift 4.2)
  convenience public init(previousServerChangeToken: CloudKit.CKServerChangeToken? = nil, resultsLimit: Swift.Int? = nil, desiredKeys: [CloudKit.CKRecord.FieldKey]? = nil)
}
@available(macOS 13.3, macCatalyst 16.4, iOS 16.4, tvOS 16.4, watchOS 9.4, *)
@nonobjc extension CloudKit.CKFetchRecordZoneChangesOperation.ZoneConfiguration : @unchecked Swift.Sendable {
}
@available(macOS 10.12, macCatalyst 13.1, iOS 10.0, tvOS 10.0, watchOS 6.0, *)
@nonobjc extension CloudKit.CKDatabaseSubscription {
  @available(swift 4.2)
  convenience public init(subscriptionID: CloudKit.CKSubscription.ID)
  @available(swift 4.2)
  public var recordType: CloudKit.CKRecord.RecordType? {
    get
    set
  }
}
@available(macOS 13.3, macCatalyst 16.4, iOS 16.4, tvOS 16.4, watchOS 9.4, *)
@nonobjc extension CloudKit.CKDatabaseSubscription : @unchecked Swift.Sendable {
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine {
  public enum Event : Swift.Sendable {
    case stateUpdate(CloudKit.CKSyncEngine.Event.StateUpdate)
    case accountChange(CloudKit.CKSyncEngine.Event.AccountChange)
    case fetchedDatabaseChanges(CloudKit.CKSyncEngine.Event.FetchedDatabaseChanges)
    case fetchedRecordZoneChanges(CloudKit.CKSyncEngine.Event.FetchedRecordZoneChanges)
    case sentDatabaseChanges(CloudKit.CKSyncEngine.Event.SentDatabaseChanges)
    case sentRecordZoneChanges(CloudKit.CKSyncEngine.Event.SentRecordZoneChanges)
    case willFetchChanges(CloudKit.CKSyncEngine.Event.WillFetchChanges)
    case willFetchRecordZoneChanges(CloudKit.CKSyncEngine.Event.WillFetchRecordZoneChanges)
    case didFetchRecordZoneChanges(CloudKit.CKSyncEngine.Event.DidFetchRecordZoneChanges)
    case didFetchChanges(CloudKit.CKSyncEngine.Event.DidFetchChanges)
    case willSendChanges(CloudKit.CKSyncEngine.Event.WillSendChanges)
    case didSendChanges(CloudKit.CKSyncEngine.Event.DidSendChanges)
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.Event {
  public struct StateUpdate : Swift.Sendable {
    public let stateSerialization: CloudKit.CKSyncEngine.State.Serialization
  }
  public struct AccountChange : Swift.Sendable {
    public let changeType: CloudKit.CKSyncEngine.Event.AccountChange.ChangeType
    public enum ChangeType : Swift.Sendable {
      case signIn(currentUser: CloudKit.CKRecord.ID)
      case signOut(previousUser: CloudKit.CKRecord.ID)
      case switchAccounts(previousUser: CloudKit.CKRecord.ID, currentUser: CloudKit.CKRecord.ID)
    }
  }
  public struct FetchedDatabaseChanges : Swift.Sendable {
    public let modifications: [CloudKit.CKDatabase.DatabaseChange.Modification]
    public let deletions: [CloudKit.CKDatabase.DatabaseChange.Deletion]
  }
  public struct FetchedRecordZoneChanges : Swift.Sendable {
    public let modifications: [CloudKit.CKDatabase.RecordZoneChange.Modification]
    public let deletions: [CloudKit.CKDatabase.RecordZoneChange.Deletion]
  }
  public struct SentDatabaseChanges : Swift.Sendable {
    public let savedZones: [CloudKit.CKRecordZone]
    public let failedZoneSaves: [CloudKit.CKSyncEngine.Event.SentDatabaseChanges.FailedZoneSave]
    public let deletedZoneIDs: [CloudKit.CKRecordZone.ID]
    public let failedZoneDeletes: [CloudKit.CKRecordZone.ID : CloudKit.CKError]
    public struct FailedZoneSave : Swift.Sendable {
      public let zone: CloudKit.CKRecordZone
      public let error: CloudKit.CKError
    }
  }
  public struct SentRecordZoneChanges : Swift.Sendable {
    public let savedRecords: [CloudKit.CKRecord]
    public let failedRecordSaves: [CloudKit.CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave]
    public let deletedRecordIDs: [CloudKit.CKRecord.ID]
    public let failedRecordDeletes: [CloudKit.CKRecord.ID : CloudKit.CKError]
    public struct FailedRecordSave : Swift.Sendable {
      public let record: CloudKit.CKRecord
      public let error: CloudKit.CKError
    }
  }
  public struct WillFetchChanges : Swift.Sendable {
    @available(macOS 14.2, macCatalyst 17.2, iOS 17.2, tvOS 17.2, watchOS 10.2, *)
    public let context: CloudKit.CKSyncEngine.FetchChangesContext
  }
  public struct WillFetchRecordZoneChanges : Swift.Sendable {
    public let zoneID: CloudKit.CKRecordZone.ID
  }
  public struct DidFetchRecordZoneChanges : Swift.Sendable {
    public let zoneID: CloudKit.CKRecordZone.ID
    public let error: CloudKit.CKError?
  }
  public struct DidFetchChanges : Swift.Sendable {
    @available(macOS 14.2, macCatalyst 17.2, iOS 17.2, tvOS 17.2, watchOS 10.2, *)
    public let context: CloudKit.CKSyncEngine.FetchChangesContext
  }
  public struct WillSendChanges : Swift.Sendable {
    public let context: CloudKit.CKSyncEngine.SendChangesContext
  }
  public struct DidSendChanges : Swift.Sendable {
    public let context: CloudKit.CKSyncEngine.SendChangesContext
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.Event : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.Event.StateUpdate : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.Event.AccountChange : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.Event.AccountChange.ChangeType : Swift.Equatable {
  public static func == (a: CloudKit.CKSyncEngine.Event.AccountChange.ChangeType, b: CloudKit.CKSyncEngine.Event.AccountChange.ChangeType) -> Swift.Bool
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.Event.FetchedDatabaseChanges : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.Event.FetchedRecordZoneChanges : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.Event.SentDatabaseChanges : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.Event.SentDatabaseChanges.FailedZoneSave : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.Event.SentRecordZoneChanges : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.Event.WillFetchChanges : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.Event.WillFetchRecordZoneChanges : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.Event.DidFetchRecordZoneChanges : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.Event.DidFetchChanges : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.Event.WillSendChanges : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.Event.DidSendChanges : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 10.11, macCatalyst 13.1, iOS 9.2, tvOS 9.1, watchOS 3.0, *)
@nonobjc extension CloudKit.CKFetchWebAuthTokenOperation {
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var fetchWebAuthTokenResultBlock: ((_ operationResult: Swift.Result<Swift.String, any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 10.12, macCatalyst 13.1, iOS 10.0, tvOS 10.0, watchOS 6.0, *)
@nonobjc extension CloudKit.CKRecordZoneSubscription {
  @available(swift 4.2)
  convenience public init(zoneID: CloudKit.CKRecordZone.ID, subscriptionID: CloudKit.CKSubscription.ID)
  @available(swift 4.2)
  public var recordType: CloudKit.CKRecord.RecordType? {
    get
    set
  }
}
@available(macOS 13.3, macCatalyst 16.4, iOS 16.4, tvOS 16.4, watchOS 9.4, *)
@nonobjc extension CloudKit.CKRecordZoneSubscription : @unchecked Swift.Sendable {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 6.0, *)
@nonobjc extension CloudKit.CKSubscription.NotificationInfo {
  @available(swift 4.2)
  @available(tvOS, unavailable)
  public var alertLocalizationArgs: [CloudKit.CKRecord.FieldKey]? {
    get
    set
  }
  @available(swift 4.2)
  @available(macOS 10.13, macCatalyst 13.1, iOS 11.0, *)
  @available(tvOS, unavailable)
  public var titleLocalizationArgs: [CloudKit.CKRecord.FieldKey]? {
    get
    set
  }
  @available(swift 4.2)
  @available(macOS 10.13, macCatalyst 13.1, iOS 11.0, *)
  @available(tvOS, unavailable)
  public var subtitleLocalizationArgs: [CloudKit.CKRecord.FieldKey]? {
    get
    set
  }
  @available(swift 4.2)
  public var desiredKeys: [CloudKit.CKRecord.FieldKey]? {
    get
    set
  }
  convenience public init(alertBody: Swift.String? = nil, alertLocalizationKey: Swift.String? = nil, alertLocalizationArgs: [CloudKit.CKRecord.FieldKey] = [], title: Swift.String? = nil, titleLocalizationKey: Swift.String? = nil, titleLocalizationArgs: [CloudKit.CKRecord.FieldKey] = [], subtitle: Swift.String? = nil, subtitleLocalizationKey: Swift.String? = nil, subtitleLocalizationArgs: [CloudKit.CKRecord.FieldKey] = [], alertActionLocalizationKey: Swift.String? = nil, alertLaunchImage: Swift.String? = nil, soundName: Swift.String? = nil, desiredKeys: [CloudKit.CKRecord.FieldKey] = [], shouldBadge: Swift.Bool = false, shouldSendContentAvailable: Swift.Bool = false, shouldSendMutableContent: Swift.Bool = false, category: Swift.String? = nil, collapseIDKey: Swift.String? = nil)
}
@available(macOS 13.3, macCatalyst 16.4, iOS 16.4, tvOS 16.4, watchOS 9.4, *)
@nonobjc extension CloudKit.CKSubscription.NotificationInfo : @unchecked Swift.Sendable {
}
@available(macOS 10.12, macCatalyst 13.1, iOS 9.3, tvOS 9.2, watchOS 3.0, *)
extension CloudKit.CKContainer {
  @available(swift 4.2)
  @preconcurrency public func fetchAllLongLivedOperationIDs(completionHandler: @escaping @Sendable ([CloudKit.CKOperation.ID]?, (any Swift.Error)?) -> Swift.Void)
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func allLongLivedOperationIDs() async throws -> [CloudKit.CKOperation.ID]
  @available(swift 4.2)
  @preconcurrency public func fetchLongLivedOperation(withID operationID: CloudKit.CKOperation.ID, completionHandler: @escaping @Sendable (CloudKit.CKOperation?, (any Swift.Error)?) -> Swift.Void)
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func longLivedOperation(for operationID: CloudKit.CKOperation.ID) async throws -> CloudKit.CKOperation?
}
@available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@nonobjc extension CloudKit.CKContainer {
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @discardableResult
  public func configuredWith<R>(configuration: CloudKit.CKOperation.Configuration? = nil, group: CloudKit.CKOperationGroup? = nil, body: (_ configuredContainer: CloudKit.CKContainer) throws -> R) rethrows -> R
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @discardableResult
  @preconcurrency public func configuredWith<R>(configuration: CloudKit.CKOperation.Configuration? = nil, group: CloudKit.CKOperationGroup? = nil, body: @Sendable (_ configuredContainer: CloudKit.CKContainer) async throws -> R) async rethrows -> R
  @available(macOS, introduced: 12.0, deprecated: 14.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(macCatalyst, introduced: 15.0, deprecated: 17.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(iOS, introduced: 15.0, deprecated: 17.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(tvOS, introduced: 15.0, deprecated: 17.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(watchOS, introduced: 8.0, deprecated: 10.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(visionOS, deprecated, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @preconcurrency public func discoverUserIdentities(forEmailAddresses emails: [Swift.String], completionHandler: @escaping @Sendable (Swift.Result<[Swift.String : CloudKit.CKUserIdentity], any Swift.Error>) -> Swift.Void)
  @available(macOS, introduced: 12.0, deprecated: 14.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(macCatalyst, introduced: 15.0, deprecated: 17.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(iOS, introduced: 15.0, deprecated: 17.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(tvOS, introduced: 15.0, deprecated: 17.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(watchOS, introduced: 8.0, deprecated: 10.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(visionOS, deprecated, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  public func userIdentities(forEmailAddresses emails: [Swift.String]) async throws -> [Swift.String : CloudKit.CKUserIdentity]
  @available(macOS, introduced: 12.0, deprecated: 14.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(macCatalyst, introduced: 15.0, deprecated: 17.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(iOS, introduced: 15.0, deprecated: 17.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(tvOS, introduced: 15.0, deprecated: 17.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(watchOS, introduced: 8.0, deprecated: 10.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(visionOS, deprecated, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @preconcurrency public func discoverUserIdentities(forPhoneNumbers phoneNumbers: [Swift.String], completionHandler: @escaping @Sendable (Swift.Result<[Swift.String : CloudKit.CKUserIdentity], any Swift.Error>) -> Swift.Void)
  @available(macOS, introduced: 12.0, deprecated: 14.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(macCatalyst, introduced: 15.0, deprecated: 17.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(iOS, introduced: 15.0, deprecated: 17.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(tvOS, introduced: 15.0, deprecated: 17.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(watchOS, introduced: 8.0, deprecated: 10.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(visionOS, deprecated, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  public func userIdentities(forPhoneNumbers phoneNumbers: [Swift.String]) async throws -> [Swift.String : CloudKit.CKUserIdentity]
  @available(macOS, introduced: 12.0, deprecated: 14.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(macCatalyst, introduced: 15.0, deprecated: 17.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(iOS, introduced: 15.0, deprecated: 17.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(tvOS, introduced: 15.0, deprecated: 17.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(watchOS, introduced: 8.0, deprecated: 10.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(visionOS, deprecated, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @preconcurrency public func discoverUserIdentities(forUserRecordIDs userRecordIDs: [CloudKit.CKRecord.ID], completionHandler: @escaping @Sendable (Swift.Result<[CloudKit.CKRecord.ID : CloudKit.CKUserIdentity], any Swift.Error>) -> Swift.Void)
  @available(macOS, introduced: 12.0, deprecated: 14.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(macCatalyst, introduced: 15.0, deprecated: 17.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(iOS, introduced: 15.0, deprecated: 17.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(tvOS, introduced: 15.0, deprecated: 17.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(watchOS, introduced: 8.0, deprecated: 10.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(visionOS, deprecated, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  public func userIdentities(forUserRecordIDs userRecordIDs: [CloudKit.CKRecord.ID]) async throws -> [CloudKit.CKRecord.ID : CloudKit.CKUserIdentity]
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @preconcurrency public func fetchShareParticipants(forEmailAddresses emails: [Swift.String], completionHandler: @escaping @Sendable (Swift.Result<[Swift.String : Swift.Result<CloudKit.CKShare.Participant, any Swift.Error>], any Swift.Error>) -> Swift.Void)
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func shareParticipants(forEmailAddresses emails: [Swift.String]) async throws -> [Swift.String : Swift.Result<CloudKit.CKShare.Participant, any Swift.Error>]
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @preconcurrency public func fetchShareParticipants(forPhoneNumbers phoneNumbers: [Swift.String], completionHandler: @escaping @Sendable (Swift.Result<[Swift.String : Swift.Result<CloudKit.CKShare.Participant, any Swift.Error>], any Swift.Error>) -> Swift.Void)
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func shareParticipants(forPhoneNumbers phoneNumbers: [Swift.String]) async throws -> [Swift.String : Swift.Result<CloudKit.CKShare.Participant, any Swift.Error>]
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @preconcurrency public func fetchShareParticipants(forUserRecordIDs userRecordIDs: [CloudKit.CKRecord.ID], completionHandler: @escaping @Sendable (Swift.Result<[CloudKit.CKRecord.ID : Swift.Result<CloudKit.CKShare.Participant, any Swift.Error>], any Swift.Error>) -> Swift.Void)
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func shareParticipants(forUserRecordIDs userRecordIDs: [CloudKit.CKRecord.ID]) async throws -> [CloudKit.CKRecord.ID : Swift.Result<CloudKit.CKShare.Participant, any Swift.Error>]
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @preconcurrency public func fetchShareMetadatas(for urls: [Foundation.URL], completionHandler: @escaping @Sendable (Swift.Result<[Foundation.URL : Swift.Result<CloudKit.CKShare.Metadata, any Swift.Error>], any Swift.Error>) -> Swift.Void)
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func shareMetadatas(for urls: [Foundation.URL]) async throws -> [Foundation.URL : Swift.Result<CloudKit.CKShare.Metadata, any Swift.Error>]
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @preconcurrency public func accept(_ metadatas: [CloudKit.CKShare.Metadata], completionHandler: @escaping @Sendable (Swift.Result<[CloudKit.CKShare.Metadata : Swift.Result<CloudKit.CKShare, any Swift.Error>], any Swift.Error>) -> Swift.Void)
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func accept(_ metadatas: [CloudKit.CKShare.Metadata]) async throws -> [CloudKit.CKShare.Metadata : Swift.Result<CloudKit.CKShare, any Swift.Error>]
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKContainer {
  @available(swift 4.2)
  public enum Application {
    @available(swift 4.2)
    @available(macOS, deprecated, introduced: 10.10, message: "renamed to CKContainer.ApplicationPermissions")
    @available(macCatalyst, deprecated, introduced: 13.1, message: "renamed to CKContainer.ApplicationPermissions")
    @available(iOS, deprecated, introduced: 8.0, message: "renamed to CKContainer.ApplicationPermissions")
    @available(tvOS, deprecated, introduced: 9.0, message: "renamed to CKContainer.ApplicationPermissions")
    @available(watchOS, deprecated, introduced: 3.0, message: "renamed to CKContainer.ApplicationPermissions")
    @available(visionOS, deprecated, message: "renamed to CKContainer.ApplicationPermissions")
    public typealias Permissions = CloudKit.CKContainer.ApplicationPermissions
    @available(swift 4.2)
    @available(macOS, deprecated, introduced: 10.10, message: "renamed to CKContainer.ApplicationPermissionStatus")
    @available(macCatalyst, deprecated, introduced: 13.1, message: "renamed to CKContainer.ApplicationPermissionStatus")
    @available(iOS, deprecated, introduced: 8.0, message: "renamed to CKContainer.ApplicationPermissionStatus")
    @available(tvOS, deprecated, introduced: 9.0, message: "renamed to CKContainer.ApplicationPermissionStatus")
    @available(watchOS, deprecated, introduced: 3.0, message: "renamed to CKContainer.ApplicationPermissionStatus")
    @available(visionOS, deprecated, message: "renamed to CKContainer.ApplicationPermissionStatus")
    public typealias PermissionStatus = CloudKit.CKContainer.ApplicationPermissionStatus
    @available(swift 4.2)
    @available(macOS, deprecated, introduced: 10.10, message: "renamed to CKContainer.ApplicationPermissionBlock")
    @available(macCatalyst, deprecated, introduced: 13.1, message: "renamed to CKContainer.ApplicationPermissionBlock")
    @available(iOS, deprecated, introduced: 8.0, message: "renamed to CKContainer.ApplicationPermissionBlock")
    @available(tvOS, deprecated, introduced: 9.0, message: "renamed to CKContainer.ApplicationPermissionBlock")
    @available(watchOS, deprecated, introduced: 3.0, message: "renamed to CKContainer.ApplicationPermissionBlock")
    @available(visionOS, deprecated, message: "renamed to CKContainer.ApplicationPermissionBlock")
    public typealias PermissionBlock = CloudKit.CKContainer.ApplicationPermissionBlock
  }
}
@available(*, unavailable)
extension CloudKit.CKContainer.Application : Swift.Sendable {
}
@available(swift 4.2)
@available(macOS, deprecated, introduced: 10.10, message: "renamed to CKContainer.ApplicationPermissions")
@available(macCatalyst, deprecated, introduced: 13.1, message: "renamed to CKContainer.ApplicationPermissions")
@available(iOS, deprecated, introduced: 8.0, message: "renamed to CKContainer.ApplicationPermissions")
@available(tvOS, deprecated, introduced: 9.0, message: "renamed to CKContainer.ApplicationPermissions")
@available(watchOS, deprecated, introduced: 3.0, message: "renamed to CKContainer.ApplicationPermissions")
@available(visionOS, deprecated, message: "renamed to CKContainer.ApplicationPermissions")
public typealias CKContainer_Application_Permissions = CloudKit.CKContainer.ApplicationPermissions
@available(swift 4.2)
@available(macOS, deprecated, introduced: 10.10, message: "renamed to CKContainer.ApplicationPermissionStatus")
@available(macCatalyst, deprecated, introduced: 13.1, message: "renamed to CKContainer.ApplicationPermissionStatus")
@available(iOS, deprecated, introduced: 8.0, message: "renamed to CKContainer.ApplicationPermissionStatus")
@available(tvOS, deprecated, introduced: 9.0, message: "renamed to CKContainer.ApplicationPermissionStatus")
@available(watchOS, deprecated, introduced: 3.0, message: "renamed to CKContainer.ApplicationPermissionStatus")
@available(visionOS, deprecated, message: "renamed to CKContainer.ApplicationPermissionStatus")
public typealias CKContainer_Application_PermissionStatus = CloudKit.CKContainer.ApplicationPermissionStatus
@available(swift 4.2)
@available(macOS, deprecated, introduced: 10.10, message: "renamed to CKContainer.ApplicationPermissionBlock")
@available(macCatalyst, deprecated, introduced: 13.1, message: "renamed to CKContainer.ApplicationPermissionBlock")
@available(iOS, deprecated, introduced: 8.0, message: "renamed to CKContainer.ApplicationPermissionBlock")
@available(tvOS, deprecated, introduced: 9.0, message: "renamed to CKContainer.ApplicationPermissionBlock")
@available(watchOS, deprecated, introduced: 3.0, message: "renamed to CKContainer.ApplicationPermissionBlock")
@available(visionOS, deprecated, message: "renamed to CKContainer.ApplicationPermissionBlock")
public typealias CKContainer_Application_PermissionBlock = CloudKit.CKContainer.ApplicationPermissionBlock
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKRecord.Reference {
  @available(swift 4.2)
  @available(macOS, deprecated, introduced: 10.10, message: "renamed to CKRecord.ReferenceAction")
  @available(macCatalyst, deprecated, introduced: 13.1, message: "renamed to CKRecord.ReferenceAction")
  @available(iOS, deprecated, introduced: 8.0, message: "renamed to CKRecord.ReferenceAction")
  @available(tvOS, deprecated, introduced: 9.0, message: "renamed to CKRecord.ReferenceAction")
  @available(watchOS, deprecated, introduced: 3.0, message: "renamed to CKRecord.ReferenceAction")
  @available(visionOS, deprecated, message: "renamed to CKRecord.ReferenceAction")
  public typealias Action = CloudKit.CKRecord.ReferenceAction
}
@available(swift 4.2)
@available(macOS, deprecated, introduced: 10.10, message: "renamed to CKRecord.ReferenceAction")
@available(macCatalyst, deprecated, introduced: 13.1, message: "renamed to CKRecord.ReferenceAction")
@available(iOS, deprecated, introduced: 8.0, message: "renamed to CKRecord.ReferenceAction")
@available(tvOS, deprecated, introduced: 9.0, message: "renamed to CKRecord.ReferenceAction")
@available(watchOS, deprecated, introduced: 3.0, message: "renamed to CKRecord.ReferenceAction")
@available(visionOS, deprecated, message: "renamed to CKRecord.ReferenceAction")
public typealias CKRecord_Reference_Action = CloudKit.CKRecord.ReferenceAction
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKFetchRecordsOperation {
  @available(swift 4.2)
  public var desiredKeys: [CloudKit.CKRecord.FieldKey]? {
    get
    set
  }
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var perRecordResultBlock: ((_ recordID: CloudKit.CKRecord.ID, _ recordResult: Swift.Result<CloudKit.CKRecord, any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var fetchRecordsResultBlock: ((_ operationResult: Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 10.12, macCatalyst 13.1, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKFetchDatabaseChangesOperation {
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var fetchDatabaseChangesResultBlock: ((_ operationResult: Swift.Result<(serverChangeToken: CloudKit.CKServerChangeToken, moreComing: Swift.Bool), any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 13.0, macCatalyst 16.0, iOS 16.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct CKShareTransferRepresentation<Item> : CoreTransferable.TransferRepresentation where Item : CoreTransferable.Transferable {
  public init(exporter: @escaping @Sendable (Item) throws -> CloudKit.CKShareTransferRepresentation<Item>.ExportedShare)
  public var body: some CoreTransferable.TransferRepresentation {
    get
  }
  public struct ExportedShare : CoreTransferable.Transferable, Swift.Sendable {
    public static func prepareShare(container: CloudKit.CKContainer, allowedSharingOptions: CloudKit.CKAllowedSharingOptions = CKAllowedSharingOptions.standard, preparationHandler: @escaping @Sendable () async throws -> CloudKit.CKShare) -> CloudKit.CKShareTransferRepresentation<Item>.ExportedShare
    public static func existing(_ share: CloudKit.CKShare, container: CloudKit.CKContainer, allowedSharingOptions: CloudKit.CKAllowedSharingOptions = CKAllowedSharingOptions.standard) -> CloudKit.CKShareTransferRepresentation<Item>.ExportedShare
    public static var transferRepresentation: some CoreTransferable.TransferRepresentation {
      get
    }
    @available(iOS 16.0, macOS 13.0, macCatalyst 16.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    public typealias Representation = @_opaqueReturnTypeOf("$s8CloudKit29CKShareTransferRepresentationV13ExportedShareV08transferE0QrvpZ", 0) __<Item>
  }
  @available(iOS 16.0, macOS 13.0, macCatalyst 16.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s8CloudKit29CKShareTransferRepresentationV4bodyQrvp", 0) __<Item>
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine {
  public struct RecordZoneChangeBatch : Swift.Sendable {
    public var recordsToSave: [CloudKit.CKRecord]
    public var recordIDsToDelete: [CloudKit.CKRecord.ID]
    public var atomicByZone: Swift.Bool
    public init?(pendingChanges: [CloudKit.CKSyncEngine.PendingRecordZoneChange], recordProvider: @Sendable (CloudKit.CKRecord.ID) async -> CloudKit.CKRecord?) async
    public init(recordsToSave: [CloudKit.CKRecord] = [], recordIDsToDelete: [CloudKit.CKRecord.ID] = [], atomicByZone: Swift.Bool = false)
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.RecordZoneChangeBatch : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 13.3, macCatalyst 16.4, iOS 16.4, tvOS 16.4, watchOS 9.4, *)
@nonobjc extension CloudKit.CKOperation.Configuration : @unchecked Swift.Sendable {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKDatabase {
  @available(macOS, introduced: 12.0, deprecated: 12.0, message: "renamed to records(matching:inZoneWith:desiredKeys:resultsLimit:)")
  @available(macCatalyst, introduced: 15.0, deprecated: 15.0, message: "renamed to records(matching:inZoneWith:desiredKeys:resultsLimit:)")
  @available(iOS, introduced: 15.0, deprecated: 15.0, message: "renamed to records(matching:inZoneWith:desiredKeys:resultsLimit:)")
  @available(tvOS, introduced: 15.0, deprecated: 15.0, message: "renamed to records(matching:inZoneWith:desiredKeys:resultsLimit:)")
  @available(watchOS, introduced: 8.0, deprecated: 8.0, message: "renamed to records(matching:inZoneWith:desiredKeys:resultsLimit:)")
  @available(visionOS, deprecated, message: "renamed to records(matching:inZoneWith:desiredKeys:resultsLimit:)")
  public func records(matching query: CloudKit.CKQuery, inZoneWith zoneID: CloudKit.CKRecordZone.ID?) async throws -> [CloudKit.CKRecord]
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 6.0, *)
extension CloudKit.CKDatabase {
  @available(swift 4.2)
  @preconcurrency public func fetch(withSubscriptionID subscriptionID: CloudKit.CKSubscription.ID, completionHandler: @escaping @Sendable (CloudKit.CKSubscription?, (any Swift.Error)?) -> Swift.Void)
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func subscription(for subscriptionID: CloudKit.CKSubscription.ID) async throws -> CloudKit.CKSubscription
  @available(swift 4.2)
  @preconcurrency public func delete(withSubscriptionID subscriptionID: CloudKit.CKSubscription.ID, completionHandler: @escaping @Sendable (Swift.String?, (any Swift.Error)?) -> Swift.Void)
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @discardableResult
  public func deleteSubscription(withID subscriptionID: CloudKit.CKSubscription.ID) async throws -> CloudKit.CKSubscription.ID
}
@available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@nonobjc extension CloudKit.CKDatabase {
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @discardableResult
  public func configuredWith<R>(configuration: CloudKit.CKOperation.Configuration? = nil, group: CloudKit.CKOperationGroup? = nil, body: (_ configuredDatabase: CloudKit.CKDatabase) throws -> R) rethrows -> R
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @discardableResult
  @preconcurrency public func configuredWith<R>(configuration: CloudKit.CKOperation.Configuration? = nil, group: CloudKit.CKOperationGroup? = nil, body: @Sendable (_ configuredDatabase: CloudKit.CKDatabase) async throws -> R) async rethrows -> R
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @preconcurrency public func fetch(withRecordIDs recordIDs: [CloudKit.CKRecord.ID], desiredKeys: [CloudKit.CKRecord.FieldKey]? = nil, completionHandler: @escaping @Sendable (Swift.Result<[CloudKit.CKRecord.ID : Swift.Result<CloudKit.CKRecord, any Swift.Error>], any Swift.Error>) -> Swift.Void)
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func records(for ids: [CloudKit.CKRecord.ID], desiredKeys: [CloudKit.CKRecord.FieldKey]? = nil) async throws -> [CloudKit.CKRecord.ID : Swift.Result<CloudKit.CKRecord, any Swift.Error>]
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @preconcurrency public func modifyRecords(saving recordsToSave: [CloudKit.CKRecord], deleting recordIDsToDelete: [CloudKit.CKRecord.ID], savePolicy: CloudKit.CKModifyRecordsOperation.RecordSavePolicy = .ifServerRecordUnchanged, atomically: Swift.Bool = true, completionHandler: @escaping @Sendable (Swift.Result<(saveResults: [CloudKit.CKRecord.ID : Swift.Result<CloudKit.CKRecord, any Swift.Error>], deleteResults: [CloudKit.CKRecord.ID : Swift.Result<Swift.Void, any Swift.Error>]), any Swift.Error>) -> Swift.Void)
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func modifyRecords(saving recordsToSave: [CloudKit.CKRecord], deleting recordIDsToDelete: [CloudKit.CKRecord.ID], savePolicy: CloudKit.CKModifyRecordsOperation.RecordSavePolicy = .ifServerRecordUnchanged, atomically: Swift.Bool = true) async throws -> (saveResults: [CloudKit.CKRecord.ID : Swift.Result<CloudKit.CKRecord, any Swift.Error>], deleteResults: [CloudKit.CKRecord.ID : Swift.Result<Swift.Void, any Swift.Error>])
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @preconcurrency public func fetch(withQuery query: CloudKit.CKQuery, inZoneWith zoneID: CloudKit.CKRecordZone.ID? = nil, desiredKeys: [CloudKit.CKRecord.FieldKey]? = nil, resultsLimit: Swift.Int = CKQueryOperation.maximumResults, completionHandler: @escaping @Sendable (Swift.Result<(matchResults: [(CloudKit.CKRecord.ID, Swift.Result<CloudKit.CKRecord, any Swift.Error>)], queryCursor: CloudKit.CKQueryOperation.Cursor?), any Swift.Error>) -> Swift.Void)
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @preconcurrency public func fetch(withCursor queryCursor: CloudKit.CKQueryOperation.Cursor, desiredKeys: [CloudKit.CKRecord.FieldKey]? = nil, resultsLimit: Swift.Int = CKQueryOperation.maximumResults, completionHandler: @escaping @Sendable (Swift.Result<(matchResults: [(CloudKit.CKRecord.ID, Swift.Result<CloudKit.CKRecord, any Swift.Error>)], queryCursor: CloudKit.CKQueryOperation.Cursor?), any Swift.Error>) -> Swift.Void)
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func records(matching query: CloudKit.CKQuery, inZoneWith zoneID: CloudKit.CKRecordZone.ID? = nil, desiredKeys: [CloudKit.CKRecord.FieldKey]? = nil, resultsLimit: Swift.Int = CKQueryOperation.maximumResults) async throws -> (matchResults: [(CloudKit.CKRecord.ID, Swift.Result<CloudKit.CKRecord, any Swift.Error>)], queryCursor: CloudKit.CKQueryOperation.Cursor?)
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func records(continuingMatchFrom queryCursor: CloudKit.CKQueryOperation.Cursor, desiredKeys: [CloudKit.CKRecord.FieldKey]? = nil, resultsLimit: Swift.Int = CKQueryOperation.maximumResults) async throws -> (matchResults: [(CloudKit.CKRecord.ID, Swift.Result<CloudKit.CKRecord, any Swift.Error>)], queryCursor: CloudKit.CKQueryOperation.Cursor?)
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @preconcurrency public func fetch(withRecordZoneIDs zoneIDs: [CloudKit.CKRecordZone.ID], completionHandler: @escaping @Sendable (Swift.Result<[CloudKit.CKRecordZone.ID : Swift.Result<CloudKit.CKRecordZone, any Swift.Error>], any Swift.Error>) -> Swift.Void)
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func recordZones(for ids: [CloudKit.CKRecordZone.ID]) async throws -> [CloudKit.CKRecordZone.ID : Swift.Result<CloudKit.CKRecordZone, any Swift.Error>]
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @preconcurrency public func modifyRecordZones(saving recordZonesToSave: [CloudKit.CKRecordZone], deleting recordZoneIDsToDelete: [CloudKit.CKRecordZone.ID], completionHandler: @escaping @Sendable (Swift.Result<(saveResults: [CloudKit.CKRecordZone.ID : Swift.Result<CloudKit.CKRecordZone, any Swift.Error>], deleteResults: [CloudKit.CKRecordZone.ID : Swift.Result<Swift.Void, any Swift.Error>]), any Swift.Error>) -> Swift.Void)
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func modifyRecordZones(saving recordZonesToSave: [CloudKit.CKRecordZone], deleting recordZoneIDsToDelete: [CloudKit.CKRecordZone.ID]) async throws -> (saveResults: [CloudKit.CKRecordZone.ID : Swift.Result<CloudKit.CKRecordZone, any Swift.Error>], deleteResults: [CloudKit.CKRecordZone.ID : Swift.Result<Swift.Void, any Swift.Error>])
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @preconcurrency public func fetch(withSubscriptionIDs subscriptionIDs: [CloudKit.CKSubscription.ID], completionHandler: @escaping @Sendable (Swift.Result<[CloudKit.CKSubscription.ID : Swift.Result<CloudKit.CKSubscription, any Swift.Error>], any Swift.Error>) -> Swift.Void)
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func subscriptions(for ids: [CloudKit.CKSubscription.ID]) async throws -> [CloudKit.CKSubscription.ID : Swift.Result<CloudKit.CKSubscription, any Swift.Error>]
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @preconcurrency public func modifySubscriptions(saving subscriptionsToSave: [CloudKit.CKSubscription], deleting subscriptionIDsToDelete: [CloudKit.CKSubscription.ID], completionHandler: @escaping @Sendable (Swift.Result<(saveResults: [CloudKit.CKSubscription.ID : Swift.Result<CloudKit.CKSubscription, any Swift.Error>], deleteResults: [CloudKit.CKSubscription.ID : Swift.Result<Swift.Void, any Swift.Error>]), any Swift.Error>) -> Swift.Void)
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func modifySubscriptions(saving subscriptionsToSave: [CloudKit.CKSubscription], deleting subscriptionIDsToDelete: [CloudKit.CKSubscription.ID]) async throws -> (saveResults: [CloudKit.CKSubscription.ID : Swift.Result<CloudKit.CKSubscription, any Swift.Error>], deleteResults: [CloudKit.CKSubscription.ID : Swift.Result<Swift.Void, any Swift.Error>])
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public enum DatabaseChange {
    public struct Modification : Swift.Sendable {
      public var zoneID: CloudKit.CKRecordZone.ID {
        get
      }
    }
    public struct Deletion : Swift.Sendable {
      public var zoneID: CloudKit.CKRecordZone.ID {
        get
      }
      @available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
      public var reason: CloudKit.CKDatabase.DatabaseChange.Deletion.Reason {
        get
      }
      @available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
      public enum Reason : Swift.Sendable, Swift.Equatable {
        case deleted
        case purged
        case encryptedDataReset
        public static func == (a: CloudKit.CKDatabase.DatabaseChange.Deletion.Reason, b: CloudKit.CKDatabase.DatabaseChange.Deletion.Reason) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      @available(macOS, introduced: 12.0, deprecated: 14.0, message: "now surfaced as Reason.purged")
      @available(macCatalyst, introduced: 15.0, deprecated: 17.0, message: "now surfaced as Reason.purged")
      @available(iOS, introduced: 15.0, deprecated: 17.0, message: "now surfaced as Reason.purged")
      @available(tvOS, introduced: 15.0, deprecated: 17.0, message: "now surfaced as Reason.purged")
      @available(watchOS, introduced: 8.0, deprecated: 10.0, message: "now surfaced as Reason.purged")
      @available(visionOS, deprecated, message: "now surfaced as Reason.purged")
      public var purged: Swift.Bool {
        get
      }
    }
  }
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @preconcurrency public func fetchDatabaseChanges(since changeToken: CloudKit.CKServerChangeToken?, resultsLimit: Swift.Int? = nil, completionHandler: @escaping @Sendable (Swift.Result<(modifications: [CloudKit.CKDatabase.DatabaseChange.Modification], deletions: [CloudKit.CKDatabase.DatabaseChange.Deletion], changeToken: CloudKit.CKServerChangeToken, moreComing: Swift.Bool), any Swift.Error>) -> Swift.Void)
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func databaseChanges(since changeToken: CloudKit.CKServerChangeToken?, resultsLimit: Swift.Int? = nil) async throws -> (modifications: [CloudKit.CKDatabase.DatabaseChange.Modification], deletions: [CloudKit.CKDatabase.DatabaseChange.Deletion], changeToken: CloudKit.CKServerChangeToken, moreComing: Swift.Bool)
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public enum RecordZoneChange {
    public struct Modification : Swift.Sendable {
      public var record: CloudKit.CKRecord {
        get
      }
    }
    public struct Deletion : Swift.Sendable {
      public var recordID: CloudKit.CKRecord.ID {
        get
      }
      public var recordType: CloudKit.CKRecord.RecordType {
        get
      }
    }
  }
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @preconcurrency public func fetchRecordZoneChanges(inZoneWith zoneID: CloudKit.CKRecordZone.ID, since changeToken: CloudKit.CKServerChangeToken?, desiredKeys: [CloudKit.CKRecord.FieldKey]? = nil, resultsLimit: Swift.Int? = nil, completionHandler: @escaping @Sendable (Swift.Result<(modificationResultsByID: [CloudKit.CKRecord.ID : Swift.Result<CloudKit.CKDatabase.RecordZoneChange.Modification, any Swift.Error>], deletions: [CloudKit.CKDatabase.RecordZoneChange.Deletion], changeToken: CloudKit.CKServerChangeToken, moreComing: Swift.Bool), any Swift.Error>) -> Swift.Void)
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func recordZoneChanges(inZoneWith zoneID: CloudKit.CKRecordZone.ID, since changeToken: CloudKit.CKServerChangeToken?, desiredKeys: [CloudKit.CKRecord.FieldKey]? = nil, resultsLimit: Swift.Int? = nil) async throws -> (modificationResultsByID: [CloudKit.CKRecord.ID : Swift.Result<CloudKit.CKDatabase.RecordZoneChange.Modification, any Swift.Error>], deletions: [CloudKit.CKDatabase.RecordZoneChange.Deletion], changeToken: CloudKit.CKServerChangeToken, moreComing: Swift.Bool)
}
@available(*, unavailable)
extension CloudKit.CKDatabase.DatabaseChange : Swift.Sendable {
}
@available(*, unavailable)
extension CloudKit.CKDatabase.RecordZoneChange : Swift.Sendable {
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKDatabase.DatabaseChange.Modification : Swift.Equatable, Swift.Hashable {
  public static func == (a: CloudKit.CKDatabase.DatabaseChange.Modification, b: CloudKit.CKDatabase.DatabaseChange.Modification) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKDatabase.DatabaseChange.Deletion : Swift.Equatable, Swift.Hashable {
  public static func == (a: CloudKit.CKDatabase.DatabaseChange.Deletion, b: CloudKit.CKDatabase.DatabaseChange.Deletion) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKDatabase.RecordZoneChange.Modification : Swift.Equatable, Swift.Hashable {
  public static func == (a: CloudKit.CKDatabase.RecordZoneChange.Modification, b: CloudKit.CKDatabase.RecordZoneChange.Modification) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKDatabase.RecordZoneChange.Deletion : Swift.Equatable, Swift.Hashable {
  public static func == (a: CloudKit.CKDatabase.RecordZoneChange.Deletion, b: CloudKit.CKDatabase.RecordZoneChange.Deletion) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.12, macCatalyst 13.1, iOS 10.0, tvOS 10.0, watchOS 6.0, *)
@nonobjc extension CloudKit.CKQuerySubscription {
  @available(swift 4.2)
  @available(macOS, introduced: 10.12, deprecated: 10.12, message: "Provide an explicit CKSubscription.ID at CKSubscription-init time")
  @available(macCatalyst, introduced: 13.1, deprecated: 13.1, message: "Provide an explicit CKSubscription.ID at CKSubscription-init time")
  @available(iOS, introduced: 10.0, deprecated: 10.0, message: "Provide an explicit CKSubscription.ID at CKSubscription-init time")
  @available(tvOS, introduced: 10.0, deprecated: 10.0, message: "Provide an explicit CKSubscription.ID at CKSubscription-init time")
  @available(watchOS, introduced: 6.0, deprecated: 6.0, message: "Provide an explicit CKSubscription.ID at CKSubscription-init time")
  @available(visionOS, deprecated, message: "Provide an explicit CKSubscription.ID at CKSubscription-init time")
  @_alwaysEmitIntoClient convenience public init(recordType: CloudKit.CKRecord.RecordType, predicate: Foundation.NSPredicate, options querySubscriptionOptions: CloudKit.CKQuerySubscription.Options = [.firesOnRecordCreation, .firesOnRecordUpdate, .firesOnRecordDeletion]) {
        self.init(__recordType: recordType, predicate: predicate, subscriptionID: UUID().uuidString, options: querySubscriptionOptions)
    }
  convenience public init(recordType: CloudKit.CKRecord.RecordType, predicate: Foundation.NSPredicate, subscriptionID: CloudKit.CKSubscription.ID, options querySubscriptionOptions: CloudKit.CKQuerySubscription.Options = [.firesOnRecordCreation, .firesOnRecordUpdate, .firesOnRecordDeletion])
  @available(swift 4.2)
  public var recordType: CloudKit.CKRecord.RecordType? {
    get
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
@nonobjc extension CloudKit.CKQuerySubscription : @unchecked Swift.Sendable {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 6.0, *)
@nonobjc extension CloudKit.CKModifySubscriptionsOperation {
  @available(swift 4.2)
  convenience public init(subscriptionsToSave: [CloudKit.CKSubscription]? = nil, subscriptionIDsToDelete: [CloudKit.CKSubscription.ID]? = nil)
  @available(swift 4.2)
  public var subscriptionIDsToDelete: [CloudKit.CKSubscription.ID]? {
    get
    set
  }
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var perSubscriptionSaveBlock: ((_ subscriptionID: CloudKit.CKSubscription.ID, _ saveResult: Swift.Result<CloudKit.CKSubscription, any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var perSubscriptionDeleteBlock: ((_ subscriptionID: CloudKit.CKSubscription.ID, _ deleteResult: Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(macOS, introduced: 10.10, deprecated: 12.0, message: "Use modifySubscriptionsResultBlock instead")
  @available(macCatalyst, introduced: 13.1, deprecated: 15.0, message: "Use modifySubscriptionsResultBlock instead")
  @available(iOS, introduced: 8.0, deprecated: 15.0, message: "Use modifySubscriptionsResultBlock instead")
  @available(tvOS, introduced: 9.0, deprecated: 15.0, message: "Use modifySubscriptionsResultBlock instead")
  @available(watchOS, introduced: 6.0, deprecated: 8.0, message: "Use modifySubscriptionsResultBlock instead")
  @available(visionOS, deprecated, message: "Use modifySubscriptionsResultBlock instead")
  public var modifySubscriptionsCompletionBlock: ((_ savedSubscriptions: [CloudKit.CKSubscription]?, _ deletedSubscriptionIDs: [CloudKit.CKSubscription.ID]?, _ operationError: (any Swift.Error)?) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var modifySubscriptionsResultBlock: ((_ operationResult: Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKQuery {
  @available(swift 4.2)
  convenience public init(recordType: CloudKit.CKRecord.RecordType, predicate: Foundation.NSPredicate)
  @available(swift 4.2)
  public var recordType: CloudKit.CKRecord.RecordType {
    get
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKQuery : @unchecked Swift.Sendable {
}
@available(macOS 13.3, macCatalyst 16.4, iOS 16.4, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@nonobjc extension CloudKit.CKAllowedSharingOptions : @unchecked Swift.Sendable {
}
@available(macOS, introduced: 10.12, deprecated: 14.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
@available(macCatalyst, introduced: 13.1, deprecated: 17.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
@available(iOS, introduced: 10.0, deprecated: 17.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
@available(watchOS, introduced: 3.0, deprecated: 10.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
@available(visionOS, deprecated, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
@available(tvOS, unavailable)
@nonobjc extension CloudKit.CKDiscoverAllUserIdentitiesOperation {
  @available(macOS, introduced: 12.0, deprecated: 14.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(macCatalyst, introduced: 15.0, deprecated: 17.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(iOS, introduced: 15.0, deprecated: 17.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(watchOS, introduced: 8.0, deprecated: 10.0, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  @available(visionOS, deprecated, message: "No longer supported. Please see Sharing CloudKit Data with Other iCloud Users.")
  public var discoverAllUserIdentitiesResultBlock: ((_ operationResult: Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKQueryOperation {
  @available(swift 4.2)
  public var desiredKeys: [CloudKit.CKRecord.FieldKey]? {
    get
    set
  }
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var recordMatchedBlock: ((_ recordID: CloudKit.CKRecord.ID, _ recordResult: Swift.Result<CloudKit.CKRecord, any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var queryResultBlock: ((_ operationResult: Swift.Result<CloudKit.CKQueryOperation.Cursor?, any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 13.3, macCatalyst 16.4, iOS 16.4, tvOS 16.4, watchOS 9.4, *)
@nonobjc extension CloudKit.CKQueryOperation.Cursor : @unchecked Swift.Sendable {
}
@available(macOS 10.12, macCatalyst 13.1, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKFetchShareMetadataOperation {
  @available(swift 4.2)
  public var rootRecordDesiredKeys: [CloudKit.CKRecord.FieldKey]? {
    get
    set
  }
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var perShareMetadataResultBlock: ((_ shareURL: Foundation.URL, _ shareMetadataResult: Swift.Result<CloudKit.CKShare.Metadata, any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var fetchShareMetadataResultBlock: ((_ operationResult: Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 6.0, *)
@nonobjc extension CloudKit.CKFetchSubscriptionsOperation {
  @available(swift 4.2)
  convenience public init(subscriptionIDs: [CloudKit.CKSubscription.ID])
  @available(swift 4.2)
  public var subscriptionIDs: [CloudKit.CKSubscription.ID]? {
    get
    set
  }
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var perSubscriptionResultBlock: ((_ subscriptionID: CloudKit.CKSubscription.ID, _ subscriptionResult: Swift.Result<CloudKit.CKSubscription, any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(swift 4.2)
  @available(macOS, introduced: 10.10, deprecated: 12.0, message: "Use fetchSubscriptionsResultBlock instead")
  @available(macCatalyst, introduced: 13.1, deprecated: 15.0, message: "Use fetchSubscriptionsResultBlock instead")
  @available(iOS, introduced: 8.0, deprecated: 15.0, message: "Use fetchSubscriptionsResultBlock instead")
  @available(tvOS, introduced: 9.0, deprecated: 15.0, message: "Use fetchSubscriptionsResultBlock instead")
  @available(watchOS, introduced: 6.0, deprecated: 8.0, message: "Use fetchSubscriptionsResultBlock instead")
  @available(visionOS, deprecated, message: "Use fetchSubscriptionsResultBlock instead")
  public var fetchSubscriptionCompletionBlock: ((_ subscriptionsBySubscriptionID: [CloudKit.CKSubscription.ID : CloudKit.CKSubscription]?, _ operationError: (any Swift.Error)?) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var fetchSubscriptionsResultBlock: ((_ operationResult: Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 10.12, macCatalyst 13.1, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKFetchShareParticipantsOperation {
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var perShareParticipantResultBlock: ((_ lookupInfo: CloudKit.CKUserIdentity.LookupInfo, _ shareParticipantResult: Swift.Result<CloudKit.CKShare.Participant, any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var fetchShareParticipantsResultBlock: ((_ operationResult: Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
@nonobjc extension CloudKit.CKAsset : @unchecked Swift.Sendable {
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine {
  final public class State : Swift.Sendable {
    final public var pendingRecordZoneChanges: [CloudKit.CKSyncEngine.PendingRecordZoneChange] {
      get
    }
    final public var pendingDatabaseChanges: [CloudKit.CKSyncEngine.PendingDatabaseChange] {
      get
    }
    final public var hasPendingUntrackedChanges: Swift.Bool {
      get
      set
    }
    final public var zoneIDsWithUnfetchedServerChanges: [CloudKit.CKRecordZone.ID] {
      get
    }
    final public func add(pendingRecordZoneChanges: [CloudKit.CKSyncEngine.PendingRecordZoneChange])
    final public func remove(pendingRecordZoneChanges: [CloudKit.CKSyncEngine.PendingRecordZoneChange])
    final public func add(pendingDatabaseChanges: [CloudKit.CKSyncEngine.PendingDatabaseChange])
    final public func remove(pendingDatabaseChanges: [CloudKit.CKSyncEngine.PendingDatabaseChange])
    public struct Serialization : Swift.Codable, Swift.Sendable {
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    @objc deinit
  }
  public enum PendingRecordZoneChange : Swift.Sendable {
    case saveRecord(CloudKit.CKRecord.ID)
    case deleteRecord(CloudKit.CKRecord.ID)
  }
  public enum PendingDatabaseChange : Swift.Sendable {
    case saveZone(CloudKit.CKRecordZone)
    case deleteZone(CloudKit.CKRecordZone.ID)
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.PendingRecordZoneChange : Swift.Hashable, Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
  public static func == (a: CloudKit.CKSyncEngine.PendingRecordZoneChange, b: CloudKit.CKSyncEngine.PendingRecordZoneChange) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.PendingDatabaseChange : Swift.Hashable, Swift.CustomStringConvertible {
  public static func == (lhs: CloudKit.CKSyncEngine.PendingDatabaseChange, rhs: CloudKit.CKSyncEngine.PendingDatabaseChange) -> Swift.Bool
  public var description: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, macCatalyst 16.0, iOS 16.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@nonobjc extension CloudKit.CKSystemSharingUIObserver {
  @available(macOS 13.0, macCatalyst 16.0, iOS 16.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @preconcurrency public var systemSharingUIDidSaveShareBlock: (@Sendable (_ recordID: CloudKit.CKRecord.ID, _ saveResult: Swift.Result<CloudKit.CKShare, any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 13.0, macCatalyst 16.0, iOS 16.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @preconcurrency public var systemSharingUIDidStopSharingBlock: (@Sendable (_ recordID: CloudKit.CKRecord.ID, _ deleteResult: Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 13.3, macCatalyst 16.4, iOS 16.4, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@nonobjc extension CloudKit.CKSystemSharingUIObserver : @unchecked Swift.Sendable {
}
@available(macOS 10.12, macCatalyst 13.1, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKShare.Participant {
  @available(swift 4.2)
  @available(macOS, deprecated, introduced: 10.12, message: "renamed to CKShare.ParticipantAcceptanceStatus")
  @available(macCatalyst, deprecated, introduced: 13.1, message: "renamed to CKShare.ParticipantAcceptanceStatus")
  @available(iOS, deprecated, introduced: 10.0, message: "renamed to CKShare.ParticipantAcceptanceStatus")
  @available(tvOS, deprecated, introduced: 10.0, message: "renamed to CKShare.ParticipantAcceptanceStatus")
  @available(watchOS, deprecated, introduced: 3.0, message: "renamed to CKShare.ParticipantAcceptanceStatus")
  @available(visionOS, deprecated, message: "renamed to CKShare.ParticipantAcceptanceStatus")
  public typealias AcceptanceStatus = CloudKit.CKShare.ParticipantAcceptanceStatus
  @available(swift 4.2)
  @available(macOS, deprecated, introduced: 10.12, message: "renamed to CKShare.ParticipantPermission")
  @available(macCatalyst, deprecated, introduced: 13.1, message: "renamed to CKShare.ParticipantPermission")
  @available(iOS, deprecated, introduced: 10.0, message: "renamed to CKShare.ParticipantPermission")
  @available(tvOS, deprecated, introduced: 10.0, message: "renamed to CKShare.ParticipantPermission")
  @available(watchOS, deprecated, introduced: 3.0, message: "renamed to CKShare.ParticipantPermission")
  @available(visionOS, deprecated, message: "renamed to CKShare.ParticipantPermission")
  public typealias Permission = CloudKit.CKShare.ParticipantPermission
  @available(swift 4.2)
  @available(macOS, deprecated, introduced: 10.14, message: "renamed to CKShare.ParticipantRole")
  @available(macCatalyst, deprecated, introduced: 13.1, message: "renamed to CKShare.ParticipantRole")
  @available(iOS, deprecated, introduced: 12.0, message: "renamed to CKShare.ParticipantRole")
  @available(tvOS, deprecated, introduced: 12.0, message: "renamed to CKShare.ParticipantRole")
  @available(watchOS, deprecated, introduced: 5.0, message: "renamed to CKShare.ParticipantRole")
  @available(visionOS, deprecated, message: "renamed to CKShare.ParticipantRole")
  public typealias Role = CloudKit.CKShare.ParticipantRole
  @available(swift 4.2)
  @available(macOS, deprecated, introduced: 10.12, message: "renamed to CKShare.ParticipantType")
  @available(macCatalyst, deprecated, introduced: 13.1, message: "renamed to CKShare.ParticipantType")
  @available(iOS, deprecated, introduced: 10.0, message: "renamed to CKShare.ParticipantType")
  @available(tvOS, deprecated, introduced: 10.0, message: "renamed to CKShare.ParticipantType")
  @available(watchOS, deprecated, introduced: 3.0, message: "renamed to CKShare.ParticipantType")
  @available(visionOS, deprecated, message: "renamed to CKShare.ParticipantType")
  public typealias ParticipantType = CloudKit.CKShare.ParticipantType
}
@available(macOS 10.12, macCatalyst 13.1, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
extension CloudKit.CKShare.Participant {
  @available(swift 4.2)
  public typealias ID = Swift.String
}
@available(macOS 10.12, macCatalyst 13.1, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKShare.Participant {
  @available(swift 4.2)
  @available(macOS 10.12, macCatalyst 13.1, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
  @backDeployed(before: macOS 15.0, iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0)
  final public var participantID: CloudKit.CKShare.Participant.ID {
    get { __participantID }
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
@nonobjc extension CloudKit.CKShare.Participant : @unchecked Swift.Sendable {
}
@available(swift 4.2)
@available(macOS, deprecated, introduced: 10.12, message: "renamed to CKShare.ParticipantAcceptanceStatus")
@available(macCatalyst, deprecated, introduced: 13.1, message: "renamed to CKShare.ParticipantAcceptanceStatus")
@available(iOS, deprecated, introduced: 10.0, message: "renamed to CKShare.ParticipantAcceptanceStatus")
@available(tvOS, deprecated, introduced: 10.0, message: "renamed to CKShare.ParticipantAcceptanceStatus")
@available(watchOS, deprecated, introduced: 3.0, message: "renamed to CKShare.ParticipantAcceptanceStatus")
@available(visionOS, deprecated, message: "renamed to CKShare.ParticipantAcceptanceStatus")
public typealias CKShare_Participant_AcceptanceStatus = CloudKit.CKShare.ParticipantAcceptanceStatus
@available(swift 4.2)
@available(macOS, deprecated, introduced: 10.12, message: "renamed to CKShare.ParticipantPermission")
@available(macCatalyst, deprecated, introduced: 13.1, message: "renamed to CKShare.ParticipantPermission")
@available(iOS, deprecated, introduced: 10.0, message: "renamed to CKShare.ParticipantPermission")
@available(tvOS, deprecated, introduced: 10.0, message: "renamed to CKShare.ParticipantPermission")
@available(watchOS, deprecated, introduced: 3.0, message: "renamed to CKShare.ParticipantPermission")
@available(visionOS, deprecated, message: "renamed to CKShare.ParticipantPermission")
public typealias CKShare_Participant_Permission = CloudKit.CKShare.ParticipantPermission
@available(swift 4.2)
@available(macOS, deprecated, introduced: 10.14, message: "renamed to CKShare.ParticipantRole")
@available(macCatalyst, deprecated, introduced: 13.1, message: "renamed to CKShare.ParticipantRole")
@available(iOS, deprecated, introduced: 12.0, message: "renamed to CKShare.ParticipantRole")
@available(tvOS, deprecated, introduced: 12.0, message: "renamed to CKShare.ParticipantRole")
@available(watchOS, deprecated, introduced: 5.0, message: "renamed to CKShare.ParticipantRole")
@available(visionOS, deprecated, message: "renamed to CKShare.ParticipantRole")
public typealias CKShare_Participant_Role = CloudKit.CKShare.ParticipantRole
@available(swift 4.2)
@available(macOS, deprecated, introduced: 10.12, message: "renamed to CKShare.ParticipantType")
@available(macCatalyst, deprecated, introduced: 13.1, message: "renamed to CKShare.ParticipantType")
@available(iOS, deprecated, introduced: 10.0, message: "renamed to CKShare.ParticipantType")
@available(tvOS, deprecated, introduced: 10.0, message: "renamed to CKShare.ParticipantType")
@available(watchOS, deprecated, introduced: 3.0, message: "renamed to CKShare.ParticipantType")
@available(visionOS, deprecated, message: "renamed to CKShare.ParticipantType")
public typealias CKShare_Participant_ParticipantType = CloudKit.CKShare.ParticipantType
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine {
  public struct FetchChangesOptions : Swift.Sendable {
    public var scope: CloudKit.CKSyncEngine.FetchChangesOptions.Scope {
      get
      set
    }
    public var operationGroup: CloudKit.CKOperationGroup {
      get
      set
    }
    public var prioritizedZoneIDs: [CloudKit.CKRecordZone.ID]
    public enum Scope : Swift.Sendable {
      case all
      case allExcluding([CloudKit.CKRecordZone.ID])
      case zoneIDs([CloudKit.CKRecordZone.ID])
      public func contains(_ zoneID: CloudKit.CKRecordZone.ID) -> Swift.Bool
    }
    public init(scope: CloudKit.CKSyncEngine.FetchChangesOptions.Scope = .all, operationGroup: CloudKit.CKOperationGroup? = nil)
  }
  public struct FetchChangesContext : Swift.Sendable {
    public let reason: CloudKit.CKSyncEngine.SyncReason
    public let options: CloudKit.CKSyncEngine.FetchChangesOptions
  }
  public struct SendChangesOptions : Swift.Sendable {
    public var scope: CloudKit.CKSyncEngine.SendChangesOptions.Scope {
      get
      set
    }
    public var operationGroup: CloudKit.CKOperationGroup {
      get
      set
    }
    public enum Scope : Swift.Sendable {
      case all
      case allExcluding([CloudKit.CKRecordZone.ID])
      case zoneIDs([CloudKit.CKRecordZone.ID])
      case recordIDs([CloudKit.CKRecord.ID])
      public func contains(_ recordID: CloudKit.CKRecord.ID) -> Swift.Bool
      public func contains(_ pendingChange: CloudKit.CKSyncEngine.PendingRecordZoneChange) -> Swift.Bool
    }
    public init(scope: CloudKit.CKSyncEngine.SendChangesOptions.Scope = .all, operationGroup: CloudKit.CKOperationGroup? = nil)
  }
  public struct SendChangesContext : Swift.Sendable {
    public let reason: CloudKit.CKSyncEngine.SyncReason
    public let options: CloudKit.CKSyncEngine.SendChangesOptions
  }
  public enum SyncReason : Swift.Sendable {
    case scheduled
    case manual
    public static func == (a: CloudKit.CKSyncEngine.SyncReason, b: CloudKit.CKSyncEngine.SyncReason) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.FetchChangesOptions : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.FetchChangesOptions.Scope : Swift.Equatable {
  public static func == (a: CloudKit.CKSyncEngine.FetchChangesOptions.Scope, b: CloudKit.CKSyncEngine.FetchChangesOptions.Scope) -> Swift.Bool
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.SendChangesOptions : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.SendChangesOptions.Scope : Swift.Equatable {
  public static func == (a: CloudKit.CKSyncEngine.SendChangesOptions.Scope, b: CloudKit.CKSyncEngine.SendChangesOptions.Scope) -> Swift.Bool
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.SendChangesContext : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 14.2, macCatalyst 17.2, iOS 17.2, tvOS 17.2, watchOS 10.2, *)
extension CloudKit.CKSyncEngine.FetchChangesContext : Swift.CustomStringConvertible {
  @available(macOS 14.2, macCatalyst 17.2, iOS 17.2, tvOS 17.2, watchOS 10.2, *)
  public var description: Swift.String {
    get
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.SyncReason : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.SendChangesOptions.Scope : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.FetchChangesOptions.Scope : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 10.12, macCatalyst 13.1, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKAcceptSharesOperation {
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var perShareResultBlock: ((_ metadata: CloudKit.CKShare.Metadata, _ metadataResult: Swift.Result<CloudKit.CKShare, any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var acceptSharesResultBlock: ((_ operationResult: Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKRecord.ID {
  @available(swift 4.2)
  convenience public init(recordName: Swift.String = UUID().uuidString, zoneID: CloudKit.CKRecordZone.ID = CKRecordZone.ID.default)
}
@available(macOS 13.3, macCatalyst 16.4, iOS 16.4, tvOS 16.4, watchOS 9.4, *)
@nonobjc extension CloudKit.CKOperationGroup : @unchecked Swift.Sendable {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKModifyRecordsOperation {
  @available(swift 4.2)
  convenience public init(recordsToSave: [CloudKit.CKRecord]? = nil, recordIDsToDelete: [CloudKit.CKRecord.ID]? = nil)
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var perRecordSaveBlock: ((_ recordID: CloudKit.CKRecord.ID, _ saveResult: Swift.Result<CloudKit.CKRecord, any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var perRecordDeleteBlock: ((_ recordID: CloudKit.CKRecord.ID, _ deleteResult: Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var modifyRecordsResultBlock: ((_ operationResult: Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
@nonobjc extension CloudKit.CKShare.Metadata : @unchecked Swift.Sendable {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKModifyRecordZonesOperation {
  @available(swift 4.2)
  convenience public init(recordZonesToSave: [CloudKit.CKRecordZone]? = nil, recordZoneIDsToDelete: [CloudKit.CKRecordZone.ID]? = nil)
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var perRecordZoneSaveBlock: ((_ recordZoneID: CloudKit.CKRecordZone.ID, _ saveResult: Swift.Result<CloudKit.CKRecordZone, any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var perRecordZoneDeleteBlock: ((_ recordZoneID: CloudKit.CKRecordZone.ID, _ deleteResult: Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
  @available(macOS 12.0, macCatalyst 15.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var modifyRecordZonesResultBlock: ((_ operationResult: Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)? {
    get
    set
  }
}
@available(macOS 13.3, macCatalyst 16.4, iOS 16.4, tvOS 16.4, watchOS 9.4, *)
@nonobjc extension CloudKit.CKUserIdentity : @unchecked Swift.Sendable {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
extension CloudKit.CKSubscription {
  @available(swift 4.2)
  public typealias ID = Swift.String
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 6.0, *)
@nonobjc extension CloudKit.CKSubscription {
  @available(swift 4.2)
  public var subscriptionID: CloudKit.CKSubscription.ID {
    get
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
@nonobjc extension CloudKit.CKSubscription : @unchecked Swift.Sendable {
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
public protocol CKSyncEngineDelegate : AnyObject, Swift.Sendable {
  func handleEvent(_ event: CloudKit.CKSyncEngine.Event, syncEngine: CloudKit.CKSyncEngine) async
  func nextRecordZoneChangeBatch(_ context: CloudKit.CKSyncEngine.SendChangesContext, syncEngine: CloudKit.CKSyncEngine) async -> CloudKit.CKSyncEngine.RecordZoneChangeBatch?
  func nextFetchChangesOptions(_ context: CloudKit.CKSyncEngine.FetchChangesContext, syncEngine: CloudKit.CKSyncEngine) async -> CloudKit.CKSyncEngine.FetchChangesOptions
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngineDelegate {
  public func nextFetchChangesOptions(_ context: CloudKit.CKSyncEngine.FetchChangesContext, syncEngine: CloudKit.CKSyncEngine) async -> CloudKit.CKSyncEngine.FetchChangesOptions
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
@nonobjc extension CloudKit.CKRecordZone : @unchecked Swift.Sendable {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
extension CloudKit.CKError {
  public var partialErrorsByItemID: [Swift.AnyHashable : any Swift.Error]? {
    get
  }
  public var ancestorRecord: CloudKit.CKRecord? {
    get
  }
  public var serverRecord: CloudKit.CKRecord? {
    get
  }
  public var clientRecord: CloudKit.CKRecord? {
    get
  }
  public var retryAfterSeconds: Swift.Double? {
    get
  }
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
public struct CKRecordKeyValueIterator : Swift.IteratorProtocol {
  public mutating func next() -> (CloudKit.CKRecord.FieldKey, any CloudKit.CKRecordValueProtocol)?
  @available(iOS 8.0, tvOS 9.0, watchOS 3.0, macOS 10.10, macCatalyst 13.1, *)
  public typealias Element = (CloudKit.CKRecord.FieldKey, any CloudKit.CKRecordValueProtocol)
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
@nonobjc extension CloudKit.CKRecord : @unchecked Swift.Sendable {
}
@available(*, unavailable)
extension CloudKit.CKRecordKeyValueIterator : Swift.Sendable {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKRecord : Swift.Sequence {
  public func makeIterator() -> CloudKit.CKRecordKeyValueIterator
  @available(iOS 8.0, tvOS 9.0, watchOS 3.0, macOS 10.10, macCatalyst 13.1, *)
  public typealias Element = (CloudKit.CKRecord.FieldKey, any CloudKit.CKRecordValueProtocol)
  @available(iOS 8.0, tvOS 9.0, watchOS 3.0, macOS 10.10, macCatalyst 13.1, *)
  public typealias Iterator = CloudKit.CKRecordKeyValueIterator
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKRecord {
  public typealias RecordType = Swift.String
  public typealias FieldKey = Swift.String
  @available(swift 4.2)
  @available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
  public enum SystemType {
    @available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
    public static let userRecord: CloudKit.CKRecord.RecordType
    @available(macOS 10.12, macCatalyst 13.1, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
    public static let share: CloudKit.CKRecord.RecordType
  }
  @available(swift 4.2)
  @available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
  public enum SystemFieldKey {
    @available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
    @backDeployed(before: macOS 14.0, iOS 17.0, tvOS 17.0, watchOS 10.0)
    public static var recordID: CloudKit.CKRecord.FieldKey {
      get { __CKRecordRecordIDKey as CKRecord.FieldKey }
    }
    @available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
    @backDeployed(before: macOS 14.0, iOS 17.0, tvOS 17.0, watchOS 10.0)
    public static var creatorUserRecordID: CloudKit.CKRecord.FieldKey {
      get { __CKRecordCreatorUserRecordIDKey as CKRecord.FieldKey }
    }
    @available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
    @backDeployed(before: macOS 14.0, iOS 17.0, tvOS 17.0, watchOS 10.0)
    public static var creationDate: CloudKit.CKRecord.FieldKey {
      get { __CKRecordCreationDateKey as CKRecord.FieldKey }
    }
    @available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
    @backDeployed(before: macOS 14.0, iOS 17.0, tvOS 17.0, watchOS 10.0)
    public static var lastModifiedUserRecordID: CloudKit.CKRecord.FieldKey {
      get { __CKRecordLastModifiedUserRecordIDKey as CKRecord.FieldKey }
    }
    @available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
    @backDeployed(before: macOS 14.0, iOS 17.0, tvOS 17.0, watchOS 10.0)
    public static var modificationDate: CloudKit.CKRecord.FieldKey {
      get { __CKRecordModificationDateKey as CKRecord.FieldKey }
    }
    @available(macOS 10.12, macCatalyst 13.1, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
    public static let parent: CloudKit.CKRecord.FieldKey
    @available(macOS 10.12, macCatalyst 13.1, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
    public static let share: CloudKit.CKRecord.FieldKey
  }
  @available(swift, introduced: 4.2, deprecated: 4.2, message: "Use init(recordType:recordID:) + CKRecord.ID(zoneID:) instead")
  convenience public init(recordType: CloudKit.CKRecord.RecordType, zoneID: CloudKit.CKRecordZone.ID)
  @available(swift 4.2)
  convenience public init(recordType: CloudKit.CKRecord.RecordType, recordID: CloudKit.CKRecord.ID = CKRecord.ID())
  @available(swift 4.2)
  public var recordType: CloudKit.CKRecord.RecordType {
    get
  }
  @available(swift 4.2)
  public func object(forKey key: CloudKit.CKRecord.FieldKey) -> (any CloudKit.__CKRecordObjCValue)?
  @available(swift 4.2)
  public func setObject(_ object: (any CloudKit.__CKRecordObjCValue)?, forKey key: CloudKit.CKRecord.FieldKey)
  @available(swift 4.2)
  public subscript(key: CloudKit.CKRecord.FieldKey) -> (any CloudKit.__CKRecordObjCValue)? {
    get
    set
  }
  @available(swift 4.2)
  public func allKeys() -> [CloudKit.CKRecord.FieldKey]
  @available(swift 4.2)
  public func changedKeys() -> [CloudKit.CKRecord.FieldKey]
}
@available(*, unavailable)
extension CloudKit.CKRecord.SystemType : Swift.Sendable {
}
@available(*, unavailable)
extension CloudKit.CKRecord.SystemFieldKey : Swift.Sendable {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
@available(swift, obsoleted: 4.2, renamed: "CKRecord.SystemType.userRecord")
@nonobjc public let CKRecordTypeUserRecord: Swift.String
@available(macOS 10.12, macCatalyst 13.1, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@available(swift, obsoleted: 4.2, renamed: "CKRecord.SystemFieldKey.parent")
@nonobjc public let CKRecordParentKey: Swift.String
@available(macOS 10.12, macCatalyst 13.1, iOS 10.0, tvOS 10.0, watchOS 3.0, *)
@available(swift, obsoleted: 4.2, renamed: "CKRecord.SystemFieldKey.share")
@nonobjc public let CKRecordShareKey: Swift.String
@available(macOS 10.11, macCatalyst 13.1, iOS 9.0, tvOS 9.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKNotification {
  @available(swift 4.2)
  public var subscriptionID: CloudKit.CKSubscription.ID? {
    get
  }
}
@available(swift 4.2)
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKNotification.ID : @unchecked Swift.Sendable {
}
@available(macOS 10.10, macCatalyst 13.1, iOS 8.0, tvOS 9.0, watchOS 3.0, *)
@nonobjc extension CloudKit.CKOperation {
  public typealias ID = Swift.String
  @available(swift 4.2)
  @available(macOS 10.12, macCatalyst 13.1, iOS 9.3, tvOS 9.2, watchOS 3.0, *)
  public var operationID: CloudKit.CKOperation.ID {
    get
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKDatabase.DatabaseChange.Deletion.Reason : Swift.Hashable {}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.SyncReason : Swift.Equatable {}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension CloudKit.CKSyncEngine.SyncReason : Swift.Hashable {}
