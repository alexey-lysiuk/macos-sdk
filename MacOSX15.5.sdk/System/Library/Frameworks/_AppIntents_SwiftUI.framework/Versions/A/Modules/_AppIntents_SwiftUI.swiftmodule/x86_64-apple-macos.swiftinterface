// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target x86_64-apple-macos15.5 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Osize -library-level api -target-min-inlining-version min -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 227.19 -module-name _AppIntents_SwiftUI
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
@_exported import AppIntents
import CoreSpotlight
import DeveloperToolsSupport
import Foundation
import Swift
import SwiftUI
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter {
  final public func requestConfirmation<ViewType>(for itemToConfirm: Value.ValueType, dialog: AppIntents.IntentDialog? = nil, @SwiftUICore.ViewBuilder view: () -> ViewType) async throws -> Swift.Bool where ViewType : SwiftUICore.View
  final public func requestConfirmation<ViewType>(for itemToConfirm: Value.ValueType, dialog: AppIntents.IntentDialog? = nil, view: ViewType) async throws -> Swift.Bool where ViewType : SwiftUICore.View
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext {
  public func requestConfirmation<ViewType>(for itemToConfirm: Value.ValueType, dialog: AppIntents.IntentDialog? = nil, @SwiftUICore.ViewBuilder view: () -> ViewType) async throws -> Swift.Bool where ViewType : SwiftUICore.View
  public func requestConfirmation<ViewType>(for itemToConfirm: Value.ValueType, dialog: AppIntents.IntentDialog? = nil, view: ViewType) async throws -> Swift.Bool where ViewType : SwiftUICore.View
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResult {
  public static func result<Content>(view: Content = EmptyView()) -> Self where Self == AppIntents.IntentResultContainer<Swift.Never, Swift.Never, AppIntents._SnippetViewContainer, Swift.Never>, Content : SwiftUICore.View
  public static func result<Content>(@SwiftUICore.ViewBuilder content: () -> Content) -> Self where Self == AppIntents.IntentResultContainer<Swift.Never, Swift.Never, AppIntents._SnippetViewContainer, Swift.Never>, Content : SwiftUICore.View
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResult {
  public static func result<Value, Content>(value: Value, view: Content = EmptyView()) -> Self where Self == AppIntents.IntentResultContainer<Value, Swift.Never, AppIntents._SnippetViewContainer, Swift.Never>, Value : AppIntents._IntentValue, Content : SwiftUICore.View
  public static func result<Value, Content>(value: Value, @SwiftUICore.ViewBuilder content: () -> Content) -> Self where Self == AppIntents.IntentResultContainer<Value, Swift.Never, AppIntents._SnippetViewContainer, Swift.Never>, Value : AppIntents._IntentValue, Content : SwiftUICore.View
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResult {
  @_disfavoredOverload public static func result<Value, OpensAppIntent, Content>(value: Value, opensIntent: OpensAppIntent, view: Content = EmptyView()) -> Self where Self == AppIntents.IntentResultContainer<Value, OpensAppIntent, AppIntents._SnippetViewContainer, Swift.Never>, Value : AppIntents._IntentValue, OpensAppIntent : AppIntents.AppIntent, Content : SwiftUICore.View
  @available(macOS 15.2, iOS 18.2, watchOS 11.2, tvOS 18.2, visionOS 2.2, *)
  public static func result<Value, Content>(value: Value, opensIntent: some AppIntent, view: Content = EmptyView()) -> Self where Self == AppIntents.IntentResultContainer<Value, Swift.Never, AppIntents._SnippetViewContainer, Swift.Never>, Value : AppIntents._IntentValue, Content : SwiftUICore.View
  @_disfavoredOverload public static func result<Value, OpensAppIntent, Content>(value: Value, opensIntent: OpensAppIntent, @SwiftUICore.ViewBuilder content: () -> Content) -> Self where Self == AppIntents.IntentResultContainer<Value, OpensAppIntent, AppIntents._SnippetViewContainer, Swift.Never>, Value : AppIntents._IntentValue, OpensAppIntent : AppIntents.AppIntent, Content : SwiftUICore.View
  @available(macOS 15.2, iOS 18.2, watchOS 11.2, tvOS 18.2, visionOS 2.2, *)
  public static func result<Value, Content>(value: Value, opensIntent: some AppIntent, @SwiftUICore.ViewBuilder content: () -> Content) -> Self where Self == AppIntents.IntentResultContainer<Value, Swift.Never, AppIntents._SnippetViewContainer, Swift.Never>, Value : AppIntents._IntentValue, Content : SwiftUICore.View
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResult {
  @_disfavoredOverload public static func result<Value, OpensAppIntent, Content>(value: Value, opensIntent: OpensAppIntent, dialog: AppIntents.IntentDialog, view: Content = EmptyView()) -> Self where Self == AppIntents.IntentResultContainer<Value, OpensAppIntent, AppIntents._SnippetViewContainer, AppIntents.IntentDialog>, Value : AppIntents._IntentValue, OpensAppIntent : AppIntents.AppIntent, Content : SwiftUICore.View
  @available(macOS 15.2, iOS 18.2, watchOS 11.2, tvOS 18.2, visionOS 2.2, *)
  public static func result<Value, Content>(value: Value, opensIntent: some AppIntent, dialog: AppIntents.IntentDialog, view: Content = EmptyView()) -> Self where Self == AppIntents.IntentResultContainer<Value, Swift.Never, AppIntents._SnippetViewContainer, AppIntents.IntentDialog>, Value : AppIntents._IntentValue, Content : SwiftUICore.View
  @_disfavoredOverload public static func result<Value, OpensAppIntent, Content>(value: Value, opensIntent: OpensAppIntent, dialog: AppIntents.IntentDialog, @SwiftUICore.ViewBuilder content: () -> Content) -> Self where Self == AppIntents.IntentResultContainer<Value, OpensAppIntent, AppIntents._SnippetViewContainer, AppIntents.IntentDialog>, Value : AppIntents._IntentValue, OpensAppIntent : AppIntents.AppIntent, Content : SwiftUICore.View
  @available(macOS 15.2, iOS 18.2, watchOS 11.2, tvOS 18.2, visionOS 2.2, *)
  public static func result<Value, Content>(value: Value, opensIntent: some AppIntent, dialog: AppIntents.IntentDialog, @SwiftUICore.ViewBuilder content: () -> Content) -> Self where Self == AppIntents.IntentResultContainer<Value, Swift.Never, AppIntents._SnippetViewContainer, AppIntents.IntentDialog>, Value : AppIntents._IntentValue, Content : SwiftUICore.View
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResult {
  public static func result<Value, Content>(value: Value, dialog: AppIntents.IntentDialog, view: Content = EmptyView()) -> Self where Self == AppIntents.IntentResultContainer<Value, Swift.Never, AppIntents._SnippetViewContainer, AppIntents.IntentDialog>, Value : AppIntents._IntentValue, Content : SwiftUICore.View
  public static func result<Value, Content>(value: Value, dialog: AppIntents.IntentDialog, @SwiftUICore.ViewBuilder content: () -> Content) -> Self where Self == AppIntents.IntentResultContainer<Value, Swift.Never, AppIntents._SnippetViewContainer, AppIntents.IntentDialog>, Value : AppIntents._IntentValue, Content : SwiftUICore.View
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResult {
  @_disfavoredOverload public static func result<OpensAppIntent, Content>(opensIntent: OpensAppIntent, view: Content = EmptyView()) -> Self where Self == AppIntents.IntentResultContainer<Swift.Never, OpensAppIntent, AppIntents._SnippetViewContainer, Swift.Never>, OpensAppIntent : AppIntents.AppIntent, Content : SwiftUICore.View
  @available(macOS 15.2, iOS 18.2, watchOS 11.2, tvOS 18.2, visionOS 2.2, *)
  public static func result<Content>(opensIntent: some AppIntent, view: Content = EmptyView()) -> Self where Self == AppIntents.IntentResultContainer<Swift.Never, Swift.Never, AppIntents._SnippetViewContainer, Swift.Never>, Content : SwiftUICore.View
  @_disfavoredOverload public static func result<OpensAppIntent, Content>(opensIntent: OpensAppIntent, @SwiftUICore.ViewBuilder content: () -> Content) -> Self where Self == AppIntents.IntentResultContainer<Swift.Never, OpensAppIntent, AppIntents._SnippetViewContainer, Swift.Never>, OpensAppIntent : AppIntents.AppIntent, Content : SwiftUICore.View
  @available(macOS 15.2, iOS 18.2, watchOS 11.2, tvOS 18.2, visionOS 2.2, *)
  public static func result<Content>(opensIntent: some AppIntent, @SwiftUICore.ViewBuilder content: () -> Content) -> Self where Self == AppIntents.IntentResultContainer<Swift.Never, Swift.Never, AppIntents._SnippetViewContainer, Swift.Never>, Content : SwiftUICore.View
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResult {
  @_disfavoredOverload public static func result<OpensAppIntent, Content>(opensIntent: OpensAppIntent, dialog: AppIntents.IntentDialog, view: Content = EmptyView()) -> Self where Self == AppIntents.IntentResultContainer<Swift.Never, OpensAppIntent, AppIntents._SnippetViewContainer, AppIntents.IntentDialog>, OpensAppIntent : AppIntents.AppIntent, Content : SwiftUICore.View
  @available(macOS 15.2, iOS 18.2, watchOS 11.2, tvOS 18.2, visionOS 2.2, *)
  public static func result<Content>(opensIntent: some AppIntent, dialog: AppIntents.IntentDialog, view: Content = EmptyView()) -> Self where Self == AppIntents.IntentResultContainer<Swift.Never, Swift.Never, AppIntents._SnippetViewContainer, AppIntents.IntentDialog>, Content : SwiftUICore.View
  @_disfavoredOverload public static func result<OpensAppIntent, Content>(opensIntent: OpensAppIntent, dialog: AppIntents.IntentDialog, @SwiftUICore.ViewBuilder content: () -> Content) -> Self where Self == AppIntents.IntentResultContainer<Swift.Never, OpensAppIntent, AppIntents._SnippetViewContainer, AppIntents.IntentDialog>, OpensAppIntent : AppIntents.AppIntent, Content : SwiftUICore.View
  @available(macOS 15.2, iOS 18.2, watchOS 11.2, tvOS 18.2, visionOS 2.2, *)
  public static func result<Content>(opensIntent: some AppIntent, dialog: AppIntents.IntentDialog, @SwiftUICore.ViewBuilder content: () -> Content) -> Self where Self == AppIntents.IntentResultContainer<Swift.Never, Swift.Never, AppIntents._SnippetViewContainer, AppIntents.IntentDialog>, Content : SwiftUICore.View
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResult {
  public static func result<Content>(dialog: AppIntents.IntentDialog, view: Content = EmptyView()) -> Self where Self == AppIntents.IntentResultContainer<Swift.Never, Swift.Never, AppIntents._SnippetViewContainer, AppIntents.IntentDialog>, Content : SwiftUICore.View
  public static func result<Content>(dialog: AppIntents.IntentDialog, @SwiftUICore.ViewBuilder content: () -> Content) -> Self where Self == AppIntents.IntentResultContainer<Swift.Never, Swift.Never, AppIntents._SnippetViewContainer, AppIntents.IntentDialog>, Content : SwiftUICore.View
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Toggle {
  nonisolated public init<I>(isOn: Swift.Bool, intent: I, @SwiftUICore.ViewBuilder label: () -> Label) where I : AppIntents.AppIntent
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Toggle where Label == SwiftUICore.Text {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, isOn: Swift.Bool, intent: some AppIntent)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, isOn: Swift.Bool, intent: some AppIntent) where S : Swift.StringProtocol
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityAction<I, Label>(intent: I, @SwiftUICore.ViewBuilder label: () -> Label) -> some SwiftUICore.View where I : AppIntents.AppIntent, Label : SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityAction<I>(_ actionKind: SwiftUI.AccessibilityActionKind = .default, intent: I) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where I : AppIntents.AppIntent
  nonisolated public func accessibilityAction<I>(named name: SwiftUICore.Text, intent: I) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where I : AppIntents.AppIntent
  nonisolated public func accessibilityAction<I>(named nameKey: SwiftUICore.LocalizedStringKey, intent: I) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where I : AppIntents.AppIntent
  @_disfavoredOverload nonisolated public func accessibilityAction<S, I>(named name: S, intent: I) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol, I : AppIntents.AppIntent
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityAction<I>(_ actionKind: SwiftUI.AccessibilityActionKind = .default, intent: I) -> SwiftUICore.ModifiedContent<Content, Modifier> where I : AppIntents.AppIntent
  nonisolated public func accessibilityAction<I>(named name: SwiftUICore.Text, intent: I) -> SwiftUICore.ModifiedContent<Content, Modifier> where I : AppIntents.AppIntent
  nonisolated public func accessibilityAction<I>(named nameKey: SwiftUICore.LocalizedStringKey, intent: I) -> SwiftUICore.ModifiedContent<Content, Modifier> where I : AppIntents.AppIntent
  @_disfavoredOverload nonisolated public func accessibilityAction<S, I>(named name: S, intent: I) -> SwiftUICore.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol, I : AppIntents.AppIntent
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.AppIntent {
  public func requestConfirmation<Content>(conditions: AppIntents.ConfirmationConditions = [], actionName: AppIntents.ConfirmationActionName = .`continue`, dialog: AppIntents.IntentDialog? = nil, showDialogAsPrompt: Swift.Bool = true, @SwiftUICore.ViewBuilder content: () -> Content) async throws where Content : SwiftUICore.View
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Button {
  nonisolated public init<I>(intent: I, @SwiftUICore.ViewBuilder label: () -> Label) where I : AppIntents.AppIntent
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Button where Label == SwiftUICore.Text {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, intent: some AppIntent)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, intent: some AppIntent) where S : Swift.StringProtocol
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Button {
  nonisolated public init(role: SwiftUI.ButtonRole?, intent: some AppIntent, @SwiftUICore.ViewBuilder label: () -> Label)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Button where Label == SwiftUICore.Text {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, role: SwiftUI.ButtonRole?, intent: some AppIntent)
  @_disfavoredOverload nonisolated public init(_ title: some StringProtocol, role: SwiftUI.ButtonRole?, intent: some AppIntent)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Button where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, role: SwiftUI.ButtonRole? = nil, intent: some AppIntent)
  @_disfavoredOverload nonisolated public init(_ title: some StringProtocol, systemImage: Swift.String, role: SwiftUI.ButtonRole? = nil, intent: some AppIntent)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Button where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: DeveloperToolsSupport.ImageResource, role: SwiftUI.ButtonRole? = nil, intent: some AppIntent)
  @_disfavoredOverload nonisolated public init(_ title: some StringProtocol, image: DeveloperToolsSupport.ImageResource, role: SwiftUI.ButtonRole? = nil, intent: some AppIntent)
}
@available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
public struct SiriTipViewStyle {
  public static let automatic: _AppIntents_SwiftUI.SiriTipViewStyle
  public static let light: _AppIntents_SwiftUI.SiriTipViewStyle
  public static let dark: _AppIntents_SwiftUI.SiriTipViewStyle
}
@available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@_Concurrency.MainActor @preconcurrency public struct SiriTipView : SwiftUICore.View {
  nonisolated public init<Intent>(intent: Intent, isVisible: SwiftUICore.Binding<Swift.Bool>? = nil) where Intent : AppIntents.AppIntent
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s19_AppIntents_SwiftUI11SiriTipViewV4bodyQrvp", 0) __
}
@available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
extension SwiftUICore.View {
  nonisolated public func siriTipViewStyle(_ style: _AppIntents_SwiftUI.SiriTipViewStyle) -> some SwiftUICore.View
  
}
@available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
extension _AppIntents_SwiftUI.SiriTipView : Swift.Sendable {}
