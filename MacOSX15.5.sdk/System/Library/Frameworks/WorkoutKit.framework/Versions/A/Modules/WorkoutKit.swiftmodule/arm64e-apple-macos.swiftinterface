// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64e-apple-macos15.5 -target-variant arm64e-apple-ios18.5-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 907.15 -module-name WorkoutKit
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import CoreLocation
import Foundation
import HealthKit
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
extension HealthKit.HKWorkout {
  public var workoutPlan: WorkoutKit.WorkoutPlan? {
    get async throws
  }
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
public struct HeartRateRangeAlert : WorkoutKit.WorkoutAlert {
  public var target: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitFrequency>>
  public var metric: WorkoutKit.WorkoutAlertMetric {
    get
  }
  public init(target: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitFrequency>>)
  public var targetQuantityLowerBound: HealthKit.HKQuantity {
    get
  }
  public var targetQuantityUpperBound: HealthKit.HKQuantity {
    get
  }
  public static func == (a: WorkoutKit.HeartRateRangeAlert, b: WorkoutKit.HeartRateRangeAlert) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
extension WorkoutKit.WorkoutAlert where Self == WorkoutKit.HeartRateRangeAlert {
  public static func heartRate(_ range: Swift.ClosedRange<Swift.Double>, unit: Foundation.UnitFrequency = WorkoutAlertMetric.countPerMinute) -> Self
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
public struct HeartRateZoneAlert : WorkoutKit.WorkoutAlert {
  public var zone: Swift.Int
  public var metric: WorkoutKit.WorkoutAlertMetric {
    get
  }
  public init(zone: Swift.Int)
  public static func == (a: WorkoutKit.HeartRateZoneAlert, b: WorkoutKit.HeartRateZoneAlert) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
extension WorkoutKit.WorkoutAlert where Self == WorkoutKit.HeartRateZoneAlert {
  public static func heartRate(zone: Swift.Int) -> Self
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
public struct IntervalStep : Swift.Equatable, Swift.Hashable, Swift.Sendable {
  public enum Purpose : Swift.Sendable {
    case work
    case recovery
    public static func == (a: WorkoutKit.IntervalStep.Purpose, b: WorkoutKit.IntervalStep.Purpose) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var purpose: WorkoutKit.IntervalStep.Purpose
  public var step: WorkoutKit.WorkoutStep
  public init(_ purpose: WorkoutKit.IntervalStep.Purpose, step: WorkoutKit.WorkoutStep)
  public init(_ purpose: WorkoutKit.IntervalStep.Purpose, goal: WorkoutKit.WorkoutGoal = .open, alert: (any WorkoutKit.WorkoutAlert)? = nil)
  public static func == (lhs: WorkoutKit.IntervalStep, rhs: WorkoutKit.IntervalStep) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
public struct CustomWorkout : Swift.Equatable, Swift.Hashable, Swift.Sendable {
  public static func supportsActivity(_ activity: HealthKit.HKWorkoutActivityType) -> Swift.Bool
  public static func supportsAlert(_ alert: any WorkoutKit.WorkoutAlert, activity: HealthKit.HKWorkoutActivityType, location: HealthKit.HKWorkoutSessionLocationType = .unknown) -> Swift.Bool
  public static func supportsGoal(_ goal: WorkoutKit.WorkoutGoal, activity: HealthKit.HKWorkoutActivityType, location: HealthKit.HKWorkoutSessionLocationType = .unknown) -> Swift.Bool
  public var activity: HealthKit.HKWorkoutActivityType {
    get
    set
  }
  public var location: HealthKit.HKWorkoutSessionLocationType {
    get
    set
  }
  public var displayName: Swift.String?
  public var warmup: WorkoutKit.WorkoutStep? {
    get
    set
  }
  public var blocks: [WorkoutKit.IntervalBlock] {
    get
    set
  }
  public var cooldown: WorkoutKit.WorkoutStep? {
    get
    set
  }
  public init(activity: HealthKit.HKWorkoutActivityType, location: HealthKit.HKWorkoutSessionLocationType = .unknown, displayName: Swift.String? = nil, warmup: WorkoutKit.WorkoutStep? = nil, blocks: [WorkoutKit.IntervalBlock] = [], cooldown: WorkoutKit.WorkoutStep? = nil)
  public static func == (a: WorkoutKit.CustomWorkout, b: WorkoutKit.CustomWorkout) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension WorkoutKit.WorkoutPlan {
  @available(watchOS 10.0, *)
  @available(iOS, unavailable)
  public func openInWorkoutApp() async throws
}
@_hasMissingDesignatedInitializers @available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
final public class WorkoutScheduler {
  public static let shared: WorkoutKit.WorkoutScheduler
  public static let maxAllowedScheduledWorkoutCount: Swift.Int
  public static var isSupported: Swift.Bool {
    get
  }
  final public var scheduledWorkouts: [WorkoutKit.ScheduledWorkoutPlan] {
    get async
  }
  final public func schedule(_ workout: WorkoutKit.WorkoutPlan, at: Foundation.DateComponents) async
  final public func remove(_ workout: WorkoutKit.WorkoutPlan, at: Foundation.DateComponents) async
  final public func markComplete(_ workout: WorkoutKit.WorkoutPlan, at: Foundation.DateComponents) async
  final public func removeAllWorkouts() async
  @objc deinit
}
extension WorkoutKit.WorkoutScheduler {
  @available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
  public enum AuthorizationState : Swift.Int {
    case notDetermined
    case restricted
    case denied
    case authorized
    public init?(rawValue: Swift.Int)
    @available(iOS 17.0, watchOS 10.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
  final public var authorizationState: WorkoutKit.WorkoutScheduler.AuthorizationState {
    get async
  }
  @available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
  final public func requestAuthorization() async -> WorkoutKit.WorkoutScheduler.AuthorizationState
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
public enum StateError : Swift.Error {
  case watchNotPaired
  case workoutApplicationNotInstalled
  public static func == (a: WorkoutKit.StateError, b: WorkoutKit.StateError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
public struct ScheduledWorkoutPlan : Swift.Equatable, Swift.Hashable, Swift.Sendable {
  public var plan: WorkoutKit.WorkoutPlan
  public var date: Foundation.DateComponents {
    get
    set
  }
  public var complete: Swift.Bool {
    get
    set
  }
  public init(_ plan: WorkoutKit.WorkoutPlan, date: Foundation.DateComponents)
  public static func == (a: WorkoutKit.ScheduledWorkoutPlan, b: WorkoutKit.ScheduledWorkoutPlan) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
public struct CadenceThresholdAlert : WorkoutKit.WorkoutAlert {
  public var target: Foundation.Measurement<Foundation.UnitFrequency>
  public var metric: WorkoutKit.WorkoutAlertMetric {
    get
  }
  public init(target: Foundation.Measurement<Foundation.UnitFrequency>)
  public var targetQuantity: HealthKit.HKQuantity {
    get
  }
  public static func == (a: WorkoutKit.CadenceThresholdAlert, b: WorkoutKit.CadenceThresholdAlert) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
extension WorkoutKit.WorkoutAlert where Self == WorkoutKit.CadenceThresholdAlert {
  public static func cadence(_ value: Swift.Double, unit: Foundation.UnitFrequency = WorkoutAlertMetric.countPerMinute) -> Self
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
public struct CadenceRangeAlert : WorkoutKit.WorkoutAlert {
  public var target: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitFrequency>>
  public var metric: WorkoutKit.WorkoutAlertMetric {
    get
  }
  public init(target: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitFrequency>>)
  public var targetQuantityLowerBound: HealthKit.HKQuantity {
    get
  }
  public var targetQuantityUpperBound: HealthKit.HKQuantity {
    get
  }
  public static func == (a: WorkoutKit.CadenceRangeAlert, b: WorkoutKit.CadenceRangeAlert) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
extension WorkoutKit.WorkoutAlert where Self == WorkoutKit.CadenceRangeAlert {
  public static func cadence(_ range: Swift.ClosedRange<Swift.Double>, unit: Foundation.UnitFrequency = WorkoutAlertMetric.countPerMinute) -> Self
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
public protocol WorkoutAlert : Swift.Hashable, Swift.Sendable {
  var metric: WorkoutKit.WorkoutAlertMetric { get }
  func supports(activity: HealthKit.HKWorkoutActivityType, location: HealthKit.HKWorkoutSessionLocationType) -> Swift.Bool
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
public enum WorkoutAlertMetric : Swift.Equatable, Swift.Hashable, Swift.Sendable {
  case current
  case average
  public static var countPerMinute: Foundation.UnitFrequency {
    get
  }
  public static func == (a: WorkoutKit.WorkoutAlertMetric, b: WorkoutKit.WorkoutAlertMetric) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
public enum WorkoutGoal : Swift.Equatable, Swift.Hashable, Swift.Sendable {
  case open
  case distance(Swift.Double, Foundation.UnitLength)
  case time(Swift.Double, Foundation.UnitDuration)
  case energy(Swift.Double, Foundation.UnitEnergy)
  @available(iOS 18.0, watchOS 11.0, *)
  case poolSwimDistanceWithTime(Foundation.Measurement<Foundation.UnitLength>, Foundation.Measurement<Foundation.UnitDuration>)
  public static func == (lhs: WorkoutKit.WorkoutGoal, rhs: WorkoutKit.WorkoutGoal) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
public struct PacerWorkout : Swift.Equatable, Swift.Hashable, Swift.Sendable {
  public static func supportsActivity(_ activity: HealthKit.HKWorkoutActivityType) -> Swift.Bool
  public var activity: HealthKit.HKWorkoutActivityType {
    get
    set
  }
  public var location: HealthKit.HKWorkoutSessionLocationType
  public var distance: Foundation.Measurement<Foundation.UnitLength> {
    get
    set
  }
  public var time: Foundation.Measurement<Foundation.UnitDuration> {
    get
    set
  }
  public init(activity: HealthKit.HKWorkoutActivityType, location: HealthKit.HKWorkoutSessionLocationType = .unknown, distance: Foundation.Measurement<Foundation.UnitLength>, time: Foundation.Measurement<Foundation.UnitDuration>)
  public static func == (a: WorkoutKit.PacerWorkout, b: WorkoutKit.PacerWorkout) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
public struct WorkoutStep : Swift.Equatable, Swift.Hashable, Swift.Sendable {
  public var goal: WorkoutKit.WorkoutGoal
  public var alert: (any WorkoutKit.WorkoutAlert)?
  @available(iOS 18.0, watchOS 11.0, *)
  public var displayName: Swift.String?
  public init(goal: WorkoutKit.WorkoutGoal = .open, alert: (any WorkoutKit.WorkoutAlert)? = nil)
  @available(iOS 18.0, watchOS 11.0, *)
  public init(goal: WorkoutKit.WorkoutGoal = .open, alert: (any WorkoutKit.WorkoutAlert)? = nil, displayName: Swift.String? = nil)
  public static func == (lhs: WorkoutKit.WorkoutStep, rhs: WorkoutKit.WorkoutStep) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
public struct PowerThresholdAlert : WorkoutKit.WorkoutAlert {
  public var target: Foundation.Measurement<Foundation.UnitPower>
  public var metric: WorkoutKit.WorkoutAlertMetric {
    get
    @available(iOS 17.4, macCatalyst 18.0, macOS 15.0, watchOS 10.4, *)
    set
  }
  public init(target: Foundation.Measurement<Foundation.UnitPower>)
  @available(iOS 17.4, macCatalyst 18.0, macOS 15.0, watchOS 10.4, *)
  public init(target: Foundation.Measurement<Foundation.UnitPower>, metric: WorkoutKit.WorkoutAlertMetric)
  public var targetQuantity: HealthKit.HKQuantity {
    get
  }
  public static func == (a: WorkoutKit.PowerThresholdAlert, b: WorkoutKit.PowerThresholdAlert) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
extension WorkoutKit.WorkoutAlert where Self == WorkoutKit.PowerThresholdAlert {
  public static func power(_ value: Swift.Double, unit: Foundation.UnitPower) -> Self
  @available(iOS 17.4, macCatalyst 18.0, macOS 15.0, watchOS 10.4, *)
  public static func power(_ value: Swift.Double, unit: Foundation.UnitPower, metric: WorkoutKit.WorkoutAlertMetric) -> Self
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
public struct PowerRangeAlert : WorkoutKit.WorkoutAlert {
  public var target: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitPower>>
  public var metric: WorkoutKit.WorkoutAlertMetric {
    get
    @available(iOS 17.4, macCatalyst 18.0, macOS 15.0, watchOS 10.4, *)
    set
  }
  public init(target: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitPower>>)
  @available(iOS 17.4, macCatalyst 18.0, macOS 15.0, watchOS 10.4, *)
  public init(target: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitPower>>, metric: WorkoutKit.WorkoutAlertMetric)
  public var targetQuantityLowerBound: HealthKit.HKQuantity {
    get
  }
  public var targetQuantityUpperBound: HealthKit.HKQuantity {
    get
  }
  public static func == (a: WorkoutKit.PowerRangeAlert, b: WorkoutKit.PowerRangeAlert) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
extension WorkoutKit.WorkoutAlert where Self == WorkoutKit.PowerRangeAlert {
  public static func power(_ range: Swift.ClosedRange<Swift.Double>, unit: Foundation.UnitPower) -> Self
  @available(iOS 17.4, macCatalyst 18.0, macOS 15.0, watchOS 10.4, *)
  public static func power(_ range: Swift.ClosedRange<Swift.Double>, unit: Foundation.UnitPower, metric: WorkoutKit.WorkoutAlertMetric) -> Self
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
public struct PowerZoneAlert : WorkoutKit.WorkoutAlert {
  public var zone: Swift.Int
  public var metric: WorkoutKit.WorkoutAlertMetric {
    get
  }
  public init(zone: Swift.Int)
  public static func == (a: WorkoutKit.PowerZoneAlert, b: WorkoutKit.PowerZoneAlert) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
extension WorkoutKit.WorkoutAlert where Self == WorkoutKit.PowerZoneAlert {
  public static func power(zone: Swift.Int) -> Self
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
public struct SwimBikeRunWorkout : Swift.Equatable, Swift.Hashable, Swift.Sendable {
  public enum Activity : Swift.Equatable, Swift.Hashable, Swift.Sendable {
    case swimming(HealthKit.HKWorkoutSwimmingLocationType)
    case cycling(HealthKit.HKWorkoutSessionLocationType)
    case running(HealthKit.HKWorkoutSessionLocationType)
    public static func == (a: WorkoutKit.SwimBikeRunWorkout.Activity, b: WorkoutKit.SwimBikeRunWorkout.Activity) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func supportsActivityOrdering(_ activities: [WorkoutKit.SwimBikeRunWorkout.Activity]) -> Swift.Bool
  public var activities: [WorkoutKit.SwimBikeRunWorkout.Activity] {
    get
    set
  }
  public var displayName: Swift.String?
  public init(activities: [WorkoutKit.SwimBikeRunWorkout.Activity], displayName: Swift.String? = nil)
  public static func == (a: WorkoutKit.SwimBikeRunWorkout, b: WorkoutKit.SwimBikeRunWorkout) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
public struct IntervalBlock : Swift.Equatable, Swift.Hashable, Swift.Sendable {
  public var steps: [WorkoutKit.IntervalStep]
  public var iterations: Swift.Int {
    get
    set
  }
  public init(steps: [WorkoutKit.IntervalStep] = [], iterations: Swift.Int = 1)
  public static func == (a: WorkoutKit.IntervalBlock, b: WorkoutKit.IntervalBlock) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
public struct SpeedThresholdAlert : WorkoutKit.WorkoutAlert {
  public var target: Foundation.Measurement<Foundation.UnitSpeed>
  public var metric: WorkoutKit.WorkoutAlertMetric
  public init(target: Foundation.Measurement<Foundation.UnitSpeed>, metric: WorkoutKit.WorkoutAlertMetric)
  public var targetQuantity: HealthKit.HKQuantity {
    get
  }
  public static func == (a: WorkoutKit.SpeedThresholdAlert, b: WorkoutKit.SpeedThresholdAlert) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
extension WorkoutKit.WorkoutAlert where Self == WorkoutKit.SpeedThresholdAlert {
  public static func speed(_ value: Swift.Double, unit: Foundation.UnitSpeed, metric: WorkoutKit.WorkoutAlertMetric = .current) -> Self
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
public struct SpeedRangeAlert : WorkoutKit.WorkoutAlert {
  public var target: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitSpeed>>
  public var metric: WorkoutKit.WorkoutAlertMetric
  public init(target: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitSpeed>>, metric: WorkoutKit.WorkoutAlertMetric)
  public var targetQuantityLowerBound: HealthKit.HKQuantity {
    get
  }
  public var targetQuantityUpperBound: HealthKit.HKQuantity {
    get
  }
  public static func == (a: WorkoutKit.SpeedRangeAlert, b: WorkoutKit.SpeedRangeAlert) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
extension WorkoutKit.WorkoutAlert where Self == WorkoutKit.SpeedRangeAlert {
  public static func speed(_ range: Swift.ClosedRange<Swift.Double>, unit: Foundation.UnitSpeed, metric: WorkoutKit.WorkoutAlertMetric = .current) -> Self
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
public struct SingleGoalWorkout : Swift.Equatable, Swift.Hashable, Swift.Sendable {
  public static func supportsActivity(_ activity: HealthKit.HKWorkoutActivityType) -> Swift.Bool
  public static func supportsGoal(_ goal: WorkoutKit.WorkoutGoal, activity: HealthKit.HKWorkoutActivityType, location: HealthKit.HKWorkoutSessionLocationType = .unknown) -> Swift.Bool
  public var activity: HealthKit.HKWorkoutActivityType {
    get
    set
  }
  public var location: HealthKit.HKWorkoutSessionLocationType
  public var swimmingLocation: HealthKit.HKWorkoutSwimmingLocationType
  public var goal: WorkoutKit.WorkoutGoal {
    get
    set
  }
  public init(activity: HealthKit.HKWorkoutActivityType, location: HealthKit.HKWorkoutSessionLocationType = .unknown, swimmingLocation: HealthKit.HKWorkoutSwimmingLocationType = .unknown, goal: WorkoutKit.WorkoutGoal = .open)
  public static func == (a: WorkoutKit.SingleGoalWorkout, b: WorkoutKit.SingleGoalWorkout) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
public struct WorkoutPlan : Swift.Equatable, Swift.Hashable, Swift.Sendable, Swift.Identifiable {
  public var workout: WorkoutKit.WorkoutPlan.Workout
  public var id: Foundation.UUID
  public enum Workout : Swift.Equatable, Swift.Hashable, Swift.Sendable {
    case goal(WorkoutKit.SingleGoalWorkout)
    case custom(WorkoutKit.CustomWorkout)
    case pacer(WorkoutKit.PacerWorkout)
    case swimBikeRun(WorkoutKit.SwimBikeRunWorkout)
    public var activity: HealthKit.HKWorkoutActivityType {
      get
    }
    public static func == (a: WorkoutKit.WorkoutPlan.Workout, b: WorkoutKit.WorkoutPlan.Workout) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(_ workout: WorkoutKit.WorkoutPlan.Workout, id: Foundation.UUID = UUID())
  public init(from data: Foundation.Data) throws
  public var dataRepresentation: Foundation.Data {
    get throws
  }
  public static func == (a: WorkoutKit.WorkoutPlan, b: WorkoutKit.WorkoutPlan) -> Swift.Bool
  @available(iOS 17.0, watchOS 10.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias ID = Foundation.UUID
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
extension WorkoutKit.IntervalStep.Purpose : Swift.Equatable {}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
extension WorkoutKit.IntervalStep.Purpose : Swift.Hashable {}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
extension WorkoutKit.WorkoutScheduler.AuthorizationState : Swift.Equatable {}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
extension WorkoutKit.WorkoutScheduler.AuthorizationState : Swift.Hashable {}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
extension WorkoutKit.WorkoutScheduler.AuthorizationState : Swift.RawRepresentable {}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
extension WorkoutKit.StateError : Swift.Equatable {}
@available(iOS 17.0, macCatalyst 18.0, macOS 15.0, watchOS 10.0, *)
extension WorkoutKit.StateError : Swift.Hashable {}
