// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target x86_64-apple-ios18.0-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 15.100.3 -module-name LightweightCodeRequirements
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import Foundation
import Security
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
public func allOf(@LightweightCodeRequirements.ProcessConstraintBuilder requirement: () -> [any LightweightCodeRequirements.ProcessConstraint]) -> any LightweightCodeRequirements.ProcessConstraint
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
public func allOf(@LightweightCodeRequirements.LaunchConstraintBuilder requirement: () -> [any LightweightCodeRequirements.LaunchConstraint]) -> any LightweightCodeRequirements.LaunchConstraint
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
public func allOf(@LightweightCodeRequirements.OnDiskConstraintBuilder requirement: () -> [any LightweightCodeRequirements.OnDiskConstraint]) -> any LightweightCodeRequirements.OnDiskConstraint
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
public func anyOf(@LightweightCodeRequirements.ProcessConstraintBuilder requirement: () -> [any LightweightCodeRequirements.ProcessConstraint]) -> any LightweightCodeRequirements.ProcessConstraint
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
public func anyOf(@LightweightCodeRequirements.LaunchConstraintBuilder requirement: () -> [any LightweightCodeRequirements.LaunchConstraint]) -> any LightweightCodeRequirements.LaunchConstraint
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
public func anyOf(@LightweightCodeRequirements.OnDiskConstraintBuilder requirement: () -> [any LightweightCodeRequirements.OnDiskConstraint]) -> any LightweightCodeRequirements.OnDiskConstraint
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
public struct ProcessCodeRequirement : Swift.Sendable, Swift.Codable {
  public static func allOf(@LightweightCodeRequirements.ProcessConstraintBuilder requirement: () -> [any LightweightCodeRequirements.ProcessConstraint]) throws -> LightweightCodeRequirements.ProcessCodeRequirement
  public static func anyOf(@LightweightCodeRequirements.ProcessConstraintBuilder requirement: () -> [any LightweightCodeRequirements.ProcessConstraint]) throws -> LightweightCodeRequirements.ProcessCodeRequirement
  public init(_ launchRequirement: LightweightCodeRequirements.LaunchCodeRequirement) throws
  public init(_ onDiskRequirement: LightweightCodeRequirements.OnDiskCodeRequirement) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 15.0, macCatalyst 18.0, iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension LightweightCodeRequirements.ProcessCodeRequirement : Swift.Equatable {
  public static func == (lhs: LightweightCodeRequirements.ProcessCodeRequirement, rhs: LightweightCodeRequirements.ProcessCodeRequirement) -> Swift.Bool
}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
public struct LaunchCodeRequirement : Swift.Sendable, Swift.Codable {
  public static func allOf(@LightweightCodeRequirements.LaunchConstraintBuilder requirement: () -> [any LightweightCodeRequirements.LaunchConstraint]) throws -> LightweightCodeRequirements.LaunchCodeRequirement
  public static func anyOf(@LightweightCodeRequirements.LaunchConstraintBuilder requirement: () -> [any LightweightCodeRequirements.LaunchConstraint]) throws -> LightweightCodeRequirements.LaunchCodeRequirement
  public init(_ processRequirement: LightweightCodeRequirements.ProcessCodeRequirement) throws
  public init(_ onDiskRequirement: LightweightCodeRequirements.OnDiskCodeRequirement) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 15.0, macCatalyst 18.0, iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension LightweightCodeRequirements.LaunchCodeRequirement : Swift.Equatable {
  public static func == (lhs: LightweightCodeRequirements.LaunchCodeRequirement, rhs: LightweightCodeRequirements.LaunchCodeRequirement) -> Swift.Bool
}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
public struct OnDiskCodeRequirement : Swift.Sendable, Swift.Codable {
  public static func allOf(@LightweightCodeRequirements.OnDiskConstraintBuilder requirement: () -> [any LightweightCodeRequirements.OnDiskConstraint]) throws -> LightweightCodeRequirements.OnDiskCodeRequirement
  public static func anyOf(@LightweightCodeRequirements.OnDiskConstraintBuilder requirement: () -> [any LightweightCodeRequirements.OnDiskConstraint]) throws -> LightweightCodeRequirements.OnDiskCodeRequirement
  public init(_ processRequirement: LightweightCodeRequirements.ProcessCodeRequirement) throws
  public init(_ launchRequirement: LightweightCodeRequirements.LaunchCodeRequirement) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 15.0, macCatalyst 18.0, iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension LightweightCodeRequirements.OnDiskCodeRequirement : Swift.Equatable {
  public static func == (lhs: LightweightCodeRequirements.OnDiskCodeRequirement, rhs: LightweightCodeRequirements.OnDiskCodeRequirement) -> Swift.Bool
}
@available(macOS 14.4, macCatalyst 17.4, *)
extension Foundation.Process {
  public var launchRequirement: LightweightCodeRequirements.LaunchCodeRequirement? {
    get
    set(newRequirement)
  }
}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
public protocol ProcessConstraint : Swift.Decodable, Swift.Encodable, Swift.Sendable {
}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
@_functionBuilder public struct ProcessConstraintBuilder {
  public static func buildBlock(_ components: [any LightweightCodeRequirements.ProcessConstraint]...) -> [any LightweightCodeRequirements.ProcessConstraint]
  public static func buildExpression(_ expression: any LightweightCodeRequirements.ProcessConstraint) -> [any LightweightCodeRequirements.ProcessConstraint]
  public static func buildExpression(_ expression: [any LightweightCodeRequirements.ProcessConstraint]) -> [any LightweightCodeRequirements.ProcessConstraint]
  public static func buildOptional(_ component: [any LightweightCodeRequirements.ProcessConstraint]?) -> [any LightweightCodeRequirements.ProcessConstraint]
  public static func buildEither(first component: [any LightweightCodeRequirements.ProcessConstraint]) -> [any LightweightCodeRequirements.ProcessConstraint]
  public static func buildEither(second component: [any LightweightCodeRequirements.ProcessConstraint]) -> [any LightweightCodeRequirements.ProcessConstraint]
}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
public protocol LaunchConstraint : Swift.Decodable, Swift.Encodable, Swift.Sendable {
}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
@_functionBuilder public struct LaunchConstraintBuilder {
  public static func buildBlock(_ components: [any LightweightCodeRequirements.LaunchConstraint]...) -> [any LightweightCodeRequirements.LaunchConstraint]
  public static func buildExpression(_ expression: any LightweightCodeRequirements.LaunchConstraint) -> [any LightweightCodeRequirements.LaunchConstraint]
  public static func buildExpression(_ expression: [any LightweightCodeRequirements.LaunchConstraint]) -> [any LightweightCodeRequirements.LaunchConstraint]
  public static func buildOptional(_ component: [any LightweightCodeRequirements.LaunchConstraint]?) -> [any LightweightCodeRequirements.LaunchConstraint]
  public static func buildEither(first component: [any LightweightCodeRequirements.LaunchConstraint]) -> [any LightweightCodeRequirements.LaunchConstraint]
  public static func buildEither(second component: [any LightweightCodeRequirements.LaunchConstraint]) -> [any LightweightCodeRequirements.LaunchConstraint]
}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
public protocol OnDiskConstraint : Swift.Decodable, Swift.Encodable, Swift.Sendable {
}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
@_functionBuilder public struct OnDiskConstraintBuilder {
  public static func buildBlock(_ components: [any LightweightCodeRequirements.OnDiskConstraint]...) -> [any LightweightCodeRequirements.OnDiskConstraint]
  public static func buildExpression(_ expression: any LightweightCodeRequirements.OnDiskConstraint) -> [any LightweightCodeRequirements.OnDiskConstraint]
  public static func buildExpression(_ expression: [any LightweightCodeRequirements.OnDiskConstraint]) -> [any LightweightCodeRequirements.OnDiskConstraint]
  public static func buildOptional(_ component: [any LightweightCodeRequirements.OnDiskConstraint]?) -> [any LightweightCodeRequirements.OnDiskConstraint]
  public static func buildEither(first component: [any LightweightCodeRequirements.OnDiskConstraint]) -> [any LightweightCodeRequirements.OnDiskConstraint]
  public static func buildEither(second component: [any LightweightCodeRequirements.OnDiskConstraint]) -> [any LightweightCodeRequirements.OnDiskConstraint]
}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
public struct CodeDirectoryHash : LightweightCodeRequirements.ProcessConstraint, LightweightCodeRequirements.LaunchConstraint, LightweightCodeRequirements.OnDiskConstraint {
  public typealias OutType = LightweightCodeRequirements.CodeDirectoryHash
  public typealias DataType = Foundation.Data
  public init(_ value: Foundation.Data)
  public static func `in`(_ value: LightweightCodeRequirements.CodeDirectoryHash.DataType...) -> LightweightCodeRequirements.CodeDirectoryHash.OutType
  public static func `in`(_ values: [LightweightCodeRequirements.CodeDirectoryHash.DataType]) -> LightweightCodeRequirements.CodeDirectoryHash.OutType
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
public struct ProcessCodeSigningFlags : LightweightCodeRequirements.ProcessConstraint, LightweightCodeRequirements.LaunchConstraint {
  public typealias OutType = LightweightCodeRequirements.ProcessCodeSigningFlags
  public typealias DataType = LightweightCodeRequirements.ProcessCodeSigningFlags.ValueSet
  public struct ValueSet {
    public let rawValue: Swift.Int64
    public init(rawValue: Swift.Int64)
    public static let isDynamicallyValid: LightweightCodeRequirements.ProcessCodeSigningFlags.ValueSet
    public static let isAdhocSigned: LightweightCodeRequirements.ProcessCodeSigningFlags.ValueSet
    public static let isDebuggable: LightweightCodeRequirements.ProcessCodeSigningFlags.ValueSet
    public static let signalsBusErrorOnCodeSigningFailure: LightweightCodeRequirements.ProcessCodeSigningFlags.ValueSet
    public static let terminatesOnCodeSigningFailure: LightweightCodeRequirements.ProcessCodeSigningFlags.ValueSet
    public static let isCertificateExpirationEnforced: LightweightCodeRequirements.ProcessCodeSigningFlags.ValueSet
    public static let isDynamicLinkerPolicyHardened: LightweightCodeRequirements.ProcessCodeSigningFlags.ValueSet
    public static let isCodeSignatureRequiredForAllExecutableCode: LightweightCodeRequirements.ProcessCodeSigningFlags.ValueSet
    public static let isLibraryValidationRequired: LightweightCodeRequirements.ProcessCodeSigningFlags.ValueSet
    public static let isHardenedRuntimeEnforced: LightweightCodeRequirements.ProcessCodeSigningFlags.ValueSet
    public static let isSignedByLinker: LightweightCodeRequirements.ProcessCodeSigningFlags.ValueSet
    public static let isPlatformSigned: LightweightCodeRequirements.ProcessCodeSigningFlags.ValueSet
    public static let isDebugged: LightweightCodeRequirements.ProcessCodeSigningFlags.ValueSet
    public static let isSigned: LightweightCodeRequirements.ProcessCodeSigningFlags.ValueSet
    @available(iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, macOS 14.4, *)
    public typealias ArrayLiteralElement = LightweightCodeRequirements.ProcessCodeSigningFlags.ValueSet
    @available(iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, macOS 14.4, *)
    public typealias Element = LightweightCodeRequirements.ProcessCodeSigningFlags.ValueSet
    @available(iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, macOS 14.4, *)
    public typealias RawValue = Swift.Int64
  }
  public static func isSuperset(of: LightweightCodeRequirements.ProcessCodeSigningFlags.DataType) -> LightweightCodeRequirements.ProcessCodeSigningFlags.OutType
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
public struct OnDiskCodeSigningFlags : LightweightCodeRequirements.OnDiskConstraint {
  public typealias OutType = LightweightCodeRequirements.OnDiskCodeSigningFlags
  public typealias DataType = LightweightCodeRequirements.OnDiskCodeSigningFlags.ValueSet
  public struct ValueSet {
    public let rawValue: Swift.Int64
    public init(rawValue: Swift.Int64)
    public static let isAdhocSigned: LightweightCodeRequirements.OnDiskCodeSigningFlags.ValueSet
    public static let signalsBusErrorOnCodeSigningFailure: LightweightCodeRequirements.OnDiskCodeSigningFlags.ValueSet
    public static let terminatesOnCodeSigningFailure: LightweightCodeRequirements.OnDiskCodeSigningFlags.ValueSet
    public static let isCertificateExpirationEnforced: LightweightCodeRequirements.OnDiskCodeSigningFlags.ValueSet
    public static let isDynamicLinkerPolicyHardened: LightweightCodeRequirements.OnDiskCodeSigningFlags.ValueSet
    public static let isCodeSignatureRequiredForAllExecutableCode: LightweightCodeRequirements.OnDiskCodeSigningFlags.ValueSet
    public static let isLibraryValidationRequired: LightweightCodeRequirements.OnDiskCodeSigningFlags.ValueSet
    public static let isHardenedRuntimeEnforced: LightweightCodeRequirements.OnDiskCodeSigningFlags.ValueSet
    public static let isSignedByLinker: LightweightCodeRequirements.OnDiskCodeSigningFlags.ValueSet
    @available(iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, macOS 14.4, *)
    public typealias ArrayLiteralElement = LightweightCodeRequirements.OnDiskCodeSigningFlags.ValueSet
    @available(iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, macOS 14.4, *)
    public typealias Element = LightweightCodeRequirements.OnDiskCodeSigningFlags.ValueSet
    @available(iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, macOS 14.4, *)
    public typealias RawValue = Swift.Int64
  }
  public static func isSuperset(of: LightweightCodeRequirements.OnDiskCodeSigningFlags.DataType) -> LightweightCodeRequirements.OnDiskCodeSigningFlags.OutType
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
public class EntitlementsQuery : @unchecked Swift.Sendable, LightweightCodeRequirements.ProcessConstraint, LightweightCodeRequirements.LaunchConstraint, LightweightCodeRequirements.OnDiskConstraint {
  public enum DataType : Swift.Int64 {
    public typealias RawValue = Swift.Int64
    case dictionary
    case array
    case integer
    case string
    case boolean
    public init?(rawValue: Swift.Int64)
    public var rawValue: Swift.Int64 {
      get
    }
  }
  public static func key(_ keyName: Swift.String) -> LightweightCodeRequirements.EntitlementsQuery
  public func key(_ keyName: Swift.String) -> LightweightCodeRequirements.EntitlementsQuery
  public func elementAtIndex(_ index: Swift.Int64) -> LightweightCodeRequirements.EntitlementsQuery
  public func matchSingle(_ value: Swift.String) -> LightweightCodeRequirements.EntitlementsQuery
  public func matchPrefixSingle(_ value: Swift.String) -> LightweightCodeRequirements.EntitlementsQuery
  public func match(_ value: Swift.Bool) -> LightweightCodeRequirements.EntitlementsQuery
  public func match(_ value: Swift.String) -> LightweightCodeRequirements.EntitlementsQuery
  public func matchSingle(_ value: Swift.Int64) -> LightweightCodeRequirements.EntitlementsQuery
  public func matchPrefix(_ value: Swift.String) -> LightweightCodeRequirements.EntitlementsQuery
  public static func keyPrefix(_ keyPrefix: Swift.String) -> LightweightCodeRequirements.EntitlementsQuery
  public func keyPrefix(_ keyPrefix: Swift.String) -> LightweightCodeRequirements.EntitlementsQuery
  public func match(_ value: Swift.Int64) -> LightweightCodeRequirements.EntitlementsQuery
  public func matchType(_ value: LightweightCodeRequirements.EntitlementsQuery.DataType) -> LightweightCodeRequirements.EntitlementsQuery
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
public struct InfoPlistHash : LightweightCodeRequirements.ProcessConstraint, LightweightCodeRequirements.LaunchConstraint, LightweightCodeRequirements.OnDiskConstraint {
  public typealias OutType = LightweightCodeRequirements.InfoPlistHash
  public typealias DataType = Foundation.Data
  public init(_ value: Foundation.Data)
  public static func `in`(_ value: LightweightCodeRequirements.InfoPlistHash.DataType...) -> LightweightCodeRequirements.InfoPlistHash.OutType
  public static func `in`(_ values: [LightweightCodeRequirements.InfoPlistHash.DataType]) -> LightweightCodeRequirements.InfoPlistHash.OutType
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
public struct IsInitProcess : LightweightCodeRequirements.ProcessConstraint, LightweightCodeRequirements.LaunchConstraint {
  public init()
  public init(_ value: Swift.Bool)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
public struct IsMainBinary : LightweightCodeRequirements.OnDiskConstraint {
  public init()
  public init(_ value: Swift.Bool)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
public struct IsSIPProtected : LightweightCodeRequirements.ProcessConstraint, LightweightCodeRequirements.LaunchConstraint, LightweightCodeRequirements.OnDiskConstraint {
  public init()
  public init(_ value: Swift.Bool)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
public struct PlatformType : LightweightCodeRequirements.ProcessConstraint, LightweightCodeRequirements.LaunchConstraint, LightweightCodeRequirements.OnDiskConstraint {
  public typealias OutType = LightweightCodeRequirements.PlatformType
  public typealias DataType = LightweightCodeRequirements.PlatformType.Value
  public struct Value {
    public let rawValue: Swift.Int64
    public init?(rawValue: Swift.Int64)
    public static let macOS: LightweightCodeRequirements.PlatformType.Value
    public static let iOS: LightweightCodeRequirements.PlatformType.Value
    public static let tvOS: LightweightCodeRequirements.PlatformType.Value
    public static let watchOS: LightweightCodeRequirements.PlatformType.Value
    public static let macCatalyst: LightweightCodeRequirements.PlatformType.Value
    public static let iOSSimulator: LightweightCodeRequirements.PlatformType.Value
    public static let tvOSSimulator: LightweightCodeRequirements.PlatformType.Value
    public static let watchOSSimulator: LightweightCodeRequirements.PlatformType.Value
    public static let driverKit: LightweightCodeRequirements.PlatformType.Value
    public static let visionOS: LightweightCodeRequirements.PlatformType.Value
    public static let visionOSSimulator: LightweightCodeRequirements.PlatformType.Value
    @available(iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, macOS 14.4, *)
    public typealias RawValue = Swift.Int64
  }
  public init(_ value: LightweightCodeRequirements.PlatformType.Value)
  public static func `in`(_ value: LightweightCodeRequirements.PlatformType.DataType...) -> LightweightCodeRequirements.PlatformType.OutType
  public static func `in`(_ values: [LightweightCodeRequirements.PlatformType.DataType]) -> LightweightCodeRequirements.PlatformType.OutType
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
public struct SigningIdentifier : LightweightCodeRequirements.ProcessConstraint, LightweightCodeRequirements.LaunchConstraint, LightweightCodeRequirements.OnDiskConstraint {
  public typealias OutType = LightweightCodeRequirements.SigningIdentifier
  public typealias DataType = Swift.String
  public init(_ value: Swift.String)
  public static func `in`(_ value: LightweightCodeRequirements.SigningIdentifier.DataType...) -> LightweightCodeRequirements.SigningIdentifier.OutType
  public static func `in`(_ values: [LightweightCodeRequirements.SigningIdentifier.DataType]) -> LightweightCodeRequirements.SigningIdentifier.OutType
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
public struct TeamIdentifier : LightweightCodeRequirements.ProcessConstraint, LightweightCodeRequirements.LaunchConstraint, LightweightCodeRequirements.OnDiskConstraint {
  public typealias OutType = LightweightCodeRequirements.TeamIdentifier
  public typealias DataType = Swift.String
  public init(_ value: Swift.String)
  public static func `in`(_ value: LightweightCodeRequirements.TeamIdentifier.DataType...) -> LightweightCodeRequirements.TeamIdentifier.OutType
  public static func `in`(_ values: [LightweightCodeRequirements.TeamIdentifier.DataType]) -> LightweightCodeRequirements.TeamIdentifier.OutType
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 15.0, iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct TeamIdentifierMatchesCurrentProcess : LightweightCodeRequirements.ProcessConstraint {
  public init()
  public init(_ value: Swift.Bool)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
public struct ValidationCategory : LightweightCodeRequirements.ProcessConstraint, LightweightCodeRequirements.LaunchConstraint, LightweightCodeRequirements.OnDiskConstraint {
  public typealias OutType = LightweightCodeRequirements.ValidationCategory
  public typealias DataType = LightweightCodeRequirements.ValidationCategory.Value
  public struct Value {
    public let rawValue: Swift.Int64
    public init?(rawValue: Swift.Int64)
    public static let platform: LightweightCodeRequirements.ValidationCategory.Value
    public static let testflight: LightweightCodeRequirements.ValidationCategory.Value
    public static let development: LightweightCodeRequirements.ValidationCategory.Value
    public static let appStore: LightweightCodeRequirements.ValidationCategory.Value
    public static let enterprise: LightweightCodeRequirements.ValidationCategory.Value
    public static let developerID: LightweightCodeRequirements.ValidationCategory.Value
    public static let none: LightweightCodeRequirements.ValidationCategory.Value
    @available(iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, macOS 14.4, *)
    public typealias RawValue = Swift.Int64
  }
  public init(_ value: LightweightCodeRequirements.ValidationCategory.Value)
  public static func `in`(_ value: LightweightCodeRequirements.ValidationCategory.DataType...) -> LightweightCodeRequirements.ValidationCategory.OutType
  public static func `in`(_ values: [LightweightCodeRequirements.ValidationCategory.DataType]) -> LightweightCodeRequirements.ValidationCategory.OutType
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 14.4, macCatalyst 17.4, *)
public func SecTaskValidateForRequirement(task: Security.SecTask, requirement: LightweightCodeRequirements.ProcessCodeRequirement) throws -> Swift.Bool
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
public enum ConstraintError : Swift.Error {
  case duplicateKey
  case malformedConstraint
  case unsupportedConstraintForRequirementType
  case taskIsNoLongerValid
  public static func == (a: LightweightCodeRequirements.ConstraintError, b: LightweightCodeRequirements.ConstraintError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 14.4, macCatalyst 17.4, *)
public struct ValidationResult {
  @available(macOS 15.0, macCatalyst 18.0, *)
  public let signatureIsValid: Swift.Bool
  @available(macOS 15.0, macCatalyst 18.0, *)
  public let requirementMatched: Swift.Bool
  @available(macOS 15.0, macCatalyst 18.0, *)
  public let failureReason: Darwin.OSStatus
}
@available(macOS 14.4, macCatalyst 17.4, *)
public func SecStaticCodeCheckValidityWithOnDiskRequirement(code: Security.SecStaticCode, flags: Security.SecCSFlags, requirement: LightweightCodeRequirements.OnDiskCodeRequirement) -> LightweightCodeRequirements.ValidationResult
@available(macOS 15.0, macCatalyst 18.0, *)
public func SecCodeCheckValidityWithOnDiskRequirement(code: Security.SecCode, flags: Security.SecCSFlags, requirement: LightweightCodeRequirements.OnDiskCodeRequirement) -> LightweightCodeRequirements.ValidationResult
@available(macOS 15.0, macCatalyst 18.0, *)
public func SecCodeCheckValidityWithProcessRequirement(code: Security.SecCode, flags: Security.SecCSFlags, requirement: LightweightCodeRequirements.ProcessCodeRequirement) -> LightweightCodeRequirements.ValidationResult
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
extension LightweightCodeRequirements.ProcessCodeSigningFlags.ValueSet : Swift.OptionSet {}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
extension LightweightCodeRequirements.ProcessCodeSigningFlags.ValueSet : Swift.Encodable {}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
extension LightweightCodeRequirements.ProcessCodeSigningFlags.ValueSet : Swift.Decodable {}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
extension LightweightCodeRequirements.ProcessCodeSigningFlags.ValueSet : Swift.Sendable {}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
extension LightweightCodeRequirements.OnDiskCodeSigningFlags.ValueSet : Swift.OptionSet {}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
extension LightweightCodeRequirements.OnDiskCodeSigningFlags.ValueSet : Swift.Encodable {}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
extension LightweightCodeRequirements.OnDiskCodeSigningFlags.ValueSet : Swift.Decodable {}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
extension LightweightCodeRequirements.OnDiskCodeSigningFlags.ValueSet : Swift.Sendable {}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
extension LightweightCodeRequirements.EntitlementsQuery.DataType : Swift.Equatable {}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
extension LightweightCodeRequirements.EntitlementsQuery.DataType : Swift.Hashable {}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
extension LightweightCodeRequirements.EntitlementsQuery.DataType : Swift.RawRepresentable {}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
extension LightweightCodeRequirements.PlatformType.Value : Swift.RawRepresentable {}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
extension LightweightCodeRequirements.PlatformType.Value : Swift.Hashable {}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
extension LightweightCodeRequirements.PlatformType.Value : Swift.Encodable {}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
extension LightweightCodeRequirements.PlatformType.Value : Swift.Decodable {}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
extension LightweightCodeRequirements.PlatformType.Value : Swift.Sendable {}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
extension LightweightCodeRequirements.ValidationCategory.Value : Swift.RawRepresentable {}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
extension LightweightCodeRequirements.ValidationCategory.Value : Swift.Hashable {}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
extension LightweightCodeRequirements.ValidationCategory.Value : Swift.Encodable {}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
extension LightweightCodeRequirements.ValidationCategory.Value : Swift.Decodable {}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
extension LightweightCodeRequirements.ValidationCategory.Value : Swift.Sendable {}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
extension LightweightCodeRequirements.ConstraintError : Swift.Equatable {}
@available(macOS 14.4, iOS 17.4, tvOS 17.4, watchOS 10.4, visionOS 1.1, *)
extension LightweightCodeRequirements.ConstraintError : Swift.Hashable {}
