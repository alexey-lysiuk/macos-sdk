// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target x86_64-apple-macos15.5 -target-variant x86_64-apple-ios18.5-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Osize -library-level api -target-min-inlining-version min -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 227.19 -module-name AppIntents
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
@_exported import AppIntents
import CoreGraphics
import CoreLocation
import CoreSpotlight
import CoreTransferable
import Dispatch
import ExtensionFoundation
import Foundation
import Swift
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import notify
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.AttributedString {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.AttributedString
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.AttributedString
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.AttributedString {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.AttributedString
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.AttributedString
}
@available(macOS 14.2, iOS 17.2, watchOS 10.2, tvOS 17.2, *)
extension AppIntents.IntentParameter where Value.ValueType == AppIntents.StringSearchCriteria {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == AppIntents.StringSearchCriteria {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct AssistantSchema : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
public enum AssistantSchemas {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
  @_marker public protocol Model {
  }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
  @_marker public protocol Intent : AppIntents.AssistantSchemas.Model {
  }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
  @_marker public protocol Entity : AppIntents.AssistantSchemas.Model {
  }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
  @_marker public protocol Enum : AppIntents.AssistantSchemas.Model {
  }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
  public struct IntentSchema : AppIntents.AssistantSchemas.Intent {
  }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
  public struct EntitySchema : AppIntents.AssistantSchemas.Entity {
  }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
  public struct EnumSchema : AppIntents.AssistantSchemas.Enum {
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public protocol AssistantSchemaEntity : AppIntents.AssistantEntity {
  static var isAssistantOnly: Swift.Bool { get }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchemaEntity {
  public static var isAssistantOnly: Swift.Bool {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchemaEntity {
  public static var typeDisplayRepresentation: AppIntents.TypeDisplayRepresentation {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
@attached(memberAttribute) @attached(extension, conformances: AppIntents.AppEntity, AppIntents.AssistantSchemaEntity, names: named(__assistantSchemaEntity)) public macro AssistantEntity<T>(schema: T) = #externalMacro(module: "AppIntentsMacros", type: "AssistantEntityMacros") where T : AppIntents.AssistantSchemas.Entity
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public protocol ControlConfigurationIntent : AppIntents.AppIntent {
  associatedtype NeverResult where Self.NeverResult == Swift.Never
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension AppIntents.ControlConfigurationIntent {
  public func perform() async throws -> Self.NeverResult
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema {
  public struct EnumSchema : AppIntents.AssistantSchemas.Enum {
    @usableFromInline
    internal init(_ identifier: Swift.String)
  }
  public init(_ schema: some AssistantSchemas.Enum)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentFile : Swift.Sendable {
  public enum IntentFileError : Swift.Error, Foundation.CustomNSError {
    case failedToLoadData
    case failedToLoadFile
    public static var errorDomain: Swift.String {
      get
    }
    public var errorCode: Swift.Int {
      get
    }
    public var errorUserInfo: [Swift.String : Any] {
      get
    }
    public static func == (a: AppIntents.IntentFile.IntentFileError, b: AppIntents.IntentFile.IntentFileError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var data: Foundation.Data {
    get
  }
  public var filename: Swift.String {
    get
  }
  public var fileURL: Foundation.URL? {
    get
  }
  public var type: UniformTypeIdentifiers.UTType? {
    get
  }
  public var removedOnCompletion: Swift.Bool {
    get
    set
  }
  public init(data: Foundation.Data, filename: Swift.String, type: UniformTypeIdentifiers.UTType? = nil)
  public init(fileURL: Foundation.URL, filename: Swift.String? = nil, type: UniformTypeIdentifiers.UTType? = nil)
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentFile : Swift.Equatable, Swift.Hashable {
  public static func == (a: AppIntents.IntentFile, b: AppIntents.IntentFile) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentFile : AppIntents.DisplayRepresentable {
  public static var typeDisplayRepresentation: AppIntents.TypeDisplayRepresentation {
    get
  }
  public var displayRepresentation: AppIntents.DisplayRepresentation {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentFile : AppIntents._IntentValue {
  public static var defaultResolverSpecification: AppIntents.EmptyResolverSpecification<AppIntents.IntentFile> {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Specification = AppIntents.EmptyResolverSpecification<AppIntents.IntentFile>
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias UnwrappedType = AppIntents.IntentFile
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ValueType = AppIntents.IntentFile
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentFile : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentFile {
  public func file(contentType: UniformTypeIdentifiers.UTType, destinationDirectory: Foundation.URL? = nil) async throws -> (fileURL: Foundation.URL, openedInPlace: Swift.Bool)
  public func withFile<Result>(contentType: UniformTypeIdentifiers.UTType, allowOpenInPlace: Swift.Bool = false, fileHandler: @escaping (_ fileURL: Foundation.URL, _ openedInPlace: Swift.Bool) async throws -> Result) async throws -> Result
  public func data(contentType: UniformTypeIdentifiers.UTType) async throws -> Foundation.Data
  public var availableContentTypes: [UniformTypeIdentifiers.UTType] {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol AnyIntentValue : Swift.Sendable {
  associatedtype Value : AppIntents._IntentValue, Swift.Sendable
  var isOptional: Swift.Bool { get }
  var title: Foundation.LocalizedStringResource { get }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Swift.Int {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Swift.Int {
  convenience public init()
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema {
  public struct IntentSchema : AppIntents.AssistantSchemas.Intent {
    @usableFromInline
    internal init(_ identifier: Swift.String)
  }
  public init(_ schema: some AssistantSchemas.Intent)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == AppIntents.IntentPaymentMethod {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentPaymentMethod
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentPaymentMethod
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == AppIntents.IntentPaymentMethod {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentPaymentMethod
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentPaymentMethod
  convenience public init(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentPaymentMethod
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentPaymentMethod
}
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension CoreSpotlight.CSSearchableItemAttributeSet {
  public func associateAppEntity<Entity>(_ appEntity: Entity, priority: Swift.Int = 0) where Entity : AppIntents.IndexedEntity
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.AttributedString {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.AttributedString {
  convenience public init()
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public protocol UniqueAppEntity : AppIntents.AppEntity where Self.DefaultQuery : AppIntents.UniqueAppEntityQuery {
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.UniqueAppEntity {
  public var displayRepresentation: AppIntents.DisplayRepresentation {
    get
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.UniqueAppEntity where Self.ID == Swift.String {
  public var id: Swift.String {
    get
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public protocol UniqueAppEntityQuery : AppIntents.EnumerableEntityQuery where Self.Entity : AppIntents.UniqueAppEntity {
  associatedtype Unique where Self.Entity == Self.Unique
  func uniqueEntity() async throws -> Self.Unique
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.UniqueAppEntityQuery {
  public func entities(for identifiers: [Self.Unique.ID]) async throws -> [Self.Unique]
  public func suggestedEntities() async throws -> [Self.Unique]
  public func allEntities() async throws -> [Self.Unique]
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public struct UniqueAppEntityProvider<Entity> : AppIntents.UniqueAppEntityQuery where Entity : AppIntents.UniqueAppEntity {
  public init()
  public init(_ provider: @escaping @Sendable () async throws -> Entity)
  public func uniqueEntity() async throws -> Entity
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias DefaultValue = Swift.Array<Entity>.Result
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Result = [Entity]
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Unique = Entity
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter {
  final public func requestValue(_ dialog: AppIntents.IntentDialog? = nil) async throws -> Value.ValueType
  final public func requestDisambiguation(among itemsToDisambiguate: [Value.ValueType], dialog: AppIntents.IntentDialog? = nil) async throws -> Value.ValueType
  final public func requestConfirmation(for itemToConfirm: Value.ValueType, dialog: AppIntents.IntentDialog? = nil) async throws -> Swift.Bool
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter {
  final public func needsValueError(_ dialog: AppIntents.IntentDialog? = nil) -> AppIntents.AppIntentError
  final public func needsDisambiguationError(among itemsToDisambiguate: [Value.ValueType], dialog: AppIntents.IntentDialog? = nil) -> AppIntents.AppIntentError
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter {
  @available(*, deprecated, message: "Use `requestValue(_:)` or `needsValueError(_:)` instead")
  final public func requestValue(_ dialog: AppIntents.IntentDialog? = nil) -> any Swift.Error
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
@available(*, deprecated, message: "Please use init(for:summary:optionsCollections:)")
public struct AppShortcutParameterPresentationTitle<Intent, Value, Parameter, ParameterKeyPath> where Intent : AppIntents.AppIntent, Value : AppIntents._IntentValue, Value : Swift.Sendable, Parameter : AppIntents.IntentParameter<Value>, ParameterKeyPath : Swift.KeyPath<Intent, Parameter> {
  public init(specific: AppIntents.AppShortcutParameterPresentationTitleString<Intent, Value, Parameter, ParameterKeyPath>, generic: Swift.StaticString, table: Swift.StaticString? = nil)
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
@available(*, deprecated, message: "Please use init(for:summary:optionsCollections:)")
public struct AppShortcutParameterPresentationTitleString<Intent, Value, Parameter, ParameterKeyPath> : Swift.ExpressibleByStringInterpolation where Intent : AppIntents.AppIntent, Value : AppIntents._IntentValue, Value : Swift.Sendable, Parameter : AppIntents.IntentParameter<Value>, ParameterKeyPath : Swift.KeyPath<Intent, Parameter> {
  public init(_ value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(stringInterpolation: AppIntents.AppShortcutParameterPresentationTitleString<Intent, Value, Parameter, ParameterKeyPath>.StringInterpolation)
  public struct StringInterpolation : Swift.StringInterpolationProtocol {
    public init(literalCapacity: Swift.Int, interpolationCount: Swift.Int)
    public mutating func appendLiteral(_ literal: Swift.String)
    public mutating func appendInterpolation(_ subject: ParameterKeyPath)
    @available(*, deprecated, message: "Please use init(for:summary:optionsCollections:)")
    @available(iOS, introduced: 17.0, message: "Please use init(for:summary:optionsCollections:)")
    @available(tvOS, introduced: 17.0, message: "Please use init(for:summary:optionsCollections:)")
    @available(watchOS, introduced: 10.0, message: "Please use init(for:summary:optionsCollections:)")
    @available(macOS, introduced: 14.0, message: "Please use init(for:summary:optionsCollections:)")
    public typealias StringLiteralType = Swift.String
  }
  @available(*, deprecated, message: "Please use init(for:summary:optionsCollections:)")
  @available(iOS, introduced: 17.0, message: "Please use init(for:summary:optionsCollections:)")
  @available(tvOS, introduced: 17.0, message: "Please use init(for:summary:optionsCollections:)")
  @available(watchOS, introduced: 10.0, message: "Please use init(for:summary:optionsCollections:)")
  @available(macOS, introduced: 14.0, message: "Please use init(for:summary:optionsCollections:)")
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  @available(*, deprecated, message: "Please use init(for:summary:optionsCollections:)")
  @available(iOS, introduced: 17.0, message: "Please use init(for:summary:optionsCollections:)")
  @available(tvOS, introduced: 17.0, message: "Please use init(for:summary:optionsCollections:)")
  @available(watchOS, introduced: 10.0, message: "Please use init(for:summary:optionsCollections:)")
  @available(macOS, introduced: 14.0, message: "Please use init(for:summary:optionsCollections:)")
  public typealias StringLiteralType = Swift.String
  @available(*, deprecated, message: "Please use init(for:summary:optionsCollections:)")
  @available(iOS, introduced: 17.0, message: "Please use init(for:summary:optionsCollections:)")
  @available(tvOS, introduced: 17.0, message: "Please use init(for:summary:optionsCollections:)")
  @available(watchOS, introduced: 10.0, message: "Please use init(for:summary:optionsCollections:)")
  @available(macOS, introduced: 14.0, message: "Please use init(for:summary:optionsCollections:)")
  public typealias UnicodeScalarLiteralType = Swift.String
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
@available(*, deprecated, message: "Please use init(for:summary:optionsCollections:)")
extension AppIntents.AppShortcutsProvider {
  public typealias Title = AppIntents.AppShortcutParameterPresentationTitle
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol EntityQuery : AppIntents.DynamicOptionsProvider, AppIntents.PersistentlyIdentifiable, Swift.Sendable {
  associatedtype Entity : AppIntents.AppEntity = Self.Result.Result.ValueType where Self.Entity == Self.Result.Result
  associatedtype Result = [Self.Entity]
  init()
  func entities(for identifiers: [Self.Entity.ID]) async throws -> [Self.Entity]
  func suggestedEntities() async throws -> Self.Result
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityQuery {
  public func suggestedEntities() async throws -> Self.Result
  public func results() async throws -> Self.Result
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Swift.Double {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, controlStyle: _const AppIntents.IntentParameter<Value>.DoubleControlStyle = .stepper, inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Value.ValueType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, controlStyle: _const AppIntents.IntentParameter<Value>.DoubleControlStyle = .stepper, inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Value.ValueType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, controlStyle: _const AppIntents.IntentParameter<Value>.DoubleControlStyle = .stepper, inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Value.ValueType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Swift.Double
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, controlStyle: _const AppIntents.IntentParameter<Value>.DoubleControlStyle = .stepper, inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Value.ValueType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Swift.Double
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Swift.Double {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, controlStyle: _const AppIntents.IntentParameter<Value>.DoubleControlStyle = .stepper, inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Value.ValueType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, controlStyle: _const AppIntents.IntentParameter<Value>.DoubleControlStyle = .stepper, inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Value.ValueType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, controlStyle: _const AppIntents.IntentParameter<Value>.DoubleControlStyle = .stepper, inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Value.ValueType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Swift.Double
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, controlStyle: _const AppIntents.IntentParameter<Value>.DoubleControlStyle = .stepper, inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Value.ValueType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Swift.Double
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
@available(tvOS, unavailable)
public protocol WidgetConfigurationIntent : AppIntents.AppIntent {
  associatedtype NeverResult where Self.NeverResult == Swift.Never
}
@available(iOS 17.0, macOS 14.0, tvOS 18.0, watchOS 10.0, *)
extension Swift.Never : AppIntents.IntentResult {
  public var value: Swift.Never? {
    get
  }
  @available(iOS 17.0, tvOS 18.0, watchOS 10.0, macOS 14.0, *)
  public typealias Dialog = Swift.Never
  @available(iOS 17.0, tvOS 18.0, watchOS 10.0, macOS 14.0, *)
  public typealias OpensAppIntent = Swift.Never
  @available(iOS 17.0, tvOS 18.0, watchOS 10.0, macOS 14.0, *)
  public typealias Snippet = Swift.Never
  @available(iOS 17.0, tvOS 18.0, watchOS 10.0, macOS 14.0, *)
  public typealias Value = Swift.Never
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
@available(tvOS, unavailable)
extension AppIntents.WidgetConfigurationIntent {
  public func perform() async throws -> Self.NeverResult
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@propertyWrapper final public class AppDependency<Value> : @unchecked Swift.Sendable where Value : Swift.Sendable {
  final public var projectedValue: AppIntents.AppDependency<Value> {
    get
  }
  final public var wrappedValue: Value {
    get
    set
  }
  convenience public init(key: Swift.AnyHashable? = nil, manager: AppIntents.AppDependencyManager = .shared)
  convenience public init(key: Swift.AnyHashable? = nil, manager: AppIntents.AppDependencyManager = .shared, default defaultValueProvider: @autoclosure @escaping () -> Value)
  convenience public init(key: Swift.AnyHashable? = nil, manager: AppIntents.AppDependencyManager = .shared, default defaultValueProvider: @escaping () async throws -> Value)
  @objc deinit
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == AppIntents.IntentFile {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, supportedContentTypes: Swift.Array<UniformTypeIdentifiers.UTType> = [UTType.item], requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, supportedContentTypes: Swift.Array<UniformTypeIdentifiers.UTType> = [UTType.item], requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, supportedContentTypes: Swift.Array<UniformTypeIdentifiers.UTType> = [UTType.item], requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentFile
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, supportedContentTypes: Swift.Array<UniformTypeIdentifiers.UTType> = [UTType.item], requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentFile
  convenience public init(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, supportedContentTypes: Swift.Array<UniformTypeIdentifiers.UTType> = [UTType.item], requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, supportedContentTypes: Swift.Array<UniformTypeIdentifiers.UTType> = [UTType.item], requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, supportedContentTypes: Swift.Array<UniformTypeIdentifiers.UTType> = [UTType.item], requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentFile
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, supportedContentTypes: Swift.Array<UniformTypeIdentifiers.UTType> = [UTType.item], requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentFile
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public protocol URLRepresentableEnum : AppIntents.AppEnum, AppIntents.CustomURLRepresentationParameterConvertible {
  static var urlRepresentation: Self.URLRepresentation { get }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.URLRepresentableEnum {
  public typealias URLRepresentation = AppIntents.EnumURLRepresentation<Self>
  public var urlRepresentation: Foundation.URL? {
    get
  }
  public var urlRepresentationParameter: Swift.String? {
    get
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public struct EnumURLRepresentation<Enum> : Swift.ExpressibleByStringInterpolation where Enum : AppIntents.AppEnum {
  public init(_ value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(stringInterpolation: AppIntents.EnumURLRepresentation<Enum>.StringInterpolation)
  public init(_ urlRepresentations: [Enum : AppIntents.EnumURLRepresentation<Enum>.EnumSingleURLRepresentation])
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias StringLiteralType = Swift.String
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias UnicodeScalarLiteralType = Swift.String
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EnumURLRepresentation {
  public struct EnumSingleURLRepresentation : Swift.ExpressibleByStringInterpolation {
    public init(stringLiteral value: AppIntents.EnumURLRepresentation<Enum>.StringLiteralType)
    public init(stringInterpolation: AppIntents.EnumURLRepresentation<Enum>.StringInterpolation)
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
    public typealias ExtendedGraphemeClusterLiteralType = AppIntents.EnumURLRepresentation<Enum>.StringLiteralType
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
    public typealias StringInterpolation = AppIntents.EnumURLRepresentation<Enum>.StringInterpolation
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
    public typealias StringLiteralType = AppIntents.EnumURLRepresentation<Enum>.StringLiteralType
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
    public typealias UnicodeScalarLiteralType = AppIntents.EnumURLRepresentation<Enum>.StringLiteralType
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EnumURLRepresentation {
  public struct StringInterpolation : Swift.StringInterpolationProtocol {
    public init(literalCapacity: Swift.Int, interpolationCount: Swift.Int)
    public mutating func appendLiteral(_ literal: Swift.String)
    public enum Token {
      case rawValue
      public static func == (a: AppIntents.EnumURLRepresentation<Enum>.StringInterpolation.Token, b: AppIntents.EnumURLRepresentation<Enum>.StringInterpolation.Token) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public mutating func appendInterpolation(_ subject: Enum)
    public mutating func appendInterpolation(_ subject: AppIntents.EnumURLRepresentation<Enum>.StringInterpolation.Token)
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
    public typealias StringLiteralType = Swift.String
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct _SnippetViewContainer {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@_alwaysEmitConformanceMetadata public protocol AppIntent : AppIntents.PersistentlyIdentifiable, AppIntents._SupportsAppDependencies, Swift.Sendable {
  associatedtype PerformResult : AppIntents.IntentResult
  static var title: Foundation.LocalizedStringResource { get }
  static var openAppWhenRun: Swift.Bool { get }
  static var authenticationPolicy: AppIntents.IntentAuthenticationPolicy { get }
  @available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
  static var isDiscoverable: Swift.Bool { get }
  associatedtype SummaryContent : AppIntents.ParameterSummary
  static var parameterSummary: Self.SummaryContent { get }
  static var description: AppIntents.IntentDescription? { get }
  func perform() async throws -> Self.PerformResult
  init()
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppIntent {
  public typealias Parameter = AppIntents.IntentParameter
  public typealias When = AppIntents.ParameterSummaryWhenCondition
  public typealias Switch<Value, CaseCondition> = AppIntents.ParameterSummarySwitchCondition<Self, Value, CaseCondition> where Value : AppIntents._IntentValue, CaseCondition : AppIntents._ParameterSummarySwitchCase
  public typealias Case = AppIntents.ParameterSummaryCaseCondition
  public typealias DefaultCase = AppIntents.ParameterSummaryDefaultCaseCondition
  public typealias Summary = AppIntents.IntentParameterSummary<Self>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppIntent {
  public static var openAppWhenRun: Swift.Bool {
    get
  }
  public static var authenticationPolicy: AppIntents.IntentAuthenticationPolicy {
    get
  }
  public static var description: AppIntents.IntentDescription? {
    get
  }
  public static var persistentIdentifier: Swift.String {
    get
  }
  public static var parameterSummary: some AppIntents.ParameterSummary {
    get
  }
  @available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
  public static var isDiscoverable: Swift.Bool {
    get
  }
  @discardableResult
  public func donate() async throws -> AppIntents.IntentDonationIdentifier
  @discardableResult
  public func donate() -> AppIntents.IntentDonationIdentifier
  @discardableResult
  public func donate(result: some IntentResult) async throws -> AppIntents.IntentDonationIdentifier
  @discardableResult
  public func donate(result: some IntentResult) -> AppIntents.IntentDonationIdentifier
  public func callAsFunction(donate donateOnCompletion: Swift.Bool = true) async throws -> Self.PerformResult.Value where Self.PerformResult : AppIntents.ReturnsValue
  public func callAsFunction(donate donateOnCompletion: Swift.Bool = true) async throws where Self.PerformResult.Value == Swift.Never
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public enum IntentAuthenticationPolicy : Swift.Sendable {
  case alwaysAllowed
  case requiresAuthentication
  case requiresLocalDeviceAuthentication
  public static func == (a: AppIntents.IntentAuthenticationPolicy, b: AppIntents.IntentAuthenticationPolicy) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct ParameterSummarySwitchCondition<Intent, Value, CaseCondition> : AppIntents.ParameterSummary where Intent : AppIntents.AppIntent, Value : AppIntents._IntentValue, CaseCondition : AppIntents._ParameterSummarySwitchCase {
  public init(_ keyPath: Swift.KeyPath<Intent, AppIntents.IntentParameter<Value>>, @AppIntents.ParameterSummaryCaseBuilder<Intent, Value> _ builder: () -> CaseCondition)
  @available(macOS 14.0, iOS 17.0, watchOS 10.0, *)
  @available(tvOS, unavailable)
  public init(_ widgetFamily: AppIntents.ParameterSummarySwitchCondition<Intent, Value, CaseCondition>.WidgetFamily, @AppIntents.ParameterSummaryCaseBuilder<Intent, AppIntents.IntentWidgetFamily> _ builder: () -> CaseCondition) where Value == AppIntents.IntentWidgetFamily
  @available(macOS 14.0, iOS 17.0, watchOS 10.0, *)
  @available(tvOS, unavailable)
  public enum WidgetFamily {
    case widgetFamily
    public static func == (a: AppIntents.ParameterSummarySwitchCondition<Intent, Value, CaseCondition>.WidgetFamily, b: AppIntents.ParameterSummarySwitchCondition<Intent, Value, CaseCondition>.WidgetFamily) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct ParameterSummaryCaseCondition<Intent, Value, Summary> : AppIntents._ParameterSummarySwitchCase where Intent : AppIntents.AppIntent, Value : AppIntents._IntentValue, Summary : AppIntents.ParameterSummary {
  public init(_ value: Value, @AppIntents.ParameterSummaryBuilder<Intent> _ parameterSummary: () -> Summary)
  public init(_ value: [Value], @AppIntents.ParameterSummaryBuilder<Intent> _ parameterSummary: () -> Summary)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct ParameterSummaryDefaultCaseCondition<Intent, Value, Summary> : AppIntents._ParameterSummarySwitchCase where Intent : AppIntents.AppIntent, Value : AppIntents._IntentValue, Summary : AppIntents.ParameterSummary {
  public init(@AppIntents.ParameterSummaryBuilder<Intent> _ parameterSummary: () -> Summary)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol _ParameterSummarySwitchCase {
  associatedtype Intent : AppIntents.AppIntent
  associatedtype Value : AppIntents._IntentValue
  associatedtype Summary : AppIntents.ParameterSummary
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public enum InputConnectionBehavior {
  case `default`
  case never
  case connectToPreviousIntentResult
  public static func == (a: AppIntents.InputConnectionBehavior, b: AppIntents.InputConnectionBehavior) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol EntityIdentifierConvertible {
  var entityIdentifierString: Swift.String { get }
  static func entityIdentifier(for entityIdentifierString: Swift.String) -> Self?
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.String : AppIntents.EntityIdentifierConvertible {
  public var entityIdentifierString: Swift.String {
    get
  }
  public static func entityIdentifier(for entityIdentifierString: Swift.String) -> Swift.String?
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Foundation.UUID : AppIntents.EntityIdentifierConvertible {
  public var entityIdentifierString: Swift.String {
    get
  }
  public static func entityIdentifier(for entityIdentifierString: Swift.String) -> Foundation.UUID?
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.Int : AppIntents.EntityIdentifierConvertible {
  public var entityIdentifierString: Swift.String {
    get
  }
  public static func entityIdentifier(for entityIdentifierString: Swift.String) -> Swift.Int?
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.Float : AppIntents.EntityIdentifierConvertible {
  public var entityIdentifierString: Swift.String {
    get
  }
  public static func entityIdentifier(for entityIdentifierString: Swift.String) -> Swift.Float?
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct EntityIdentifier : Swift.CustomStringConvertible, Swift.Hashable, Swift.Sendable {
  public let entityType: any AppIntents.AppEntity.Type
  public let identifier: Swift.String
  public static let valueMaximumLength: Swift.Int
  public var description: Swift.String {
    get
  }
  public init<Entity>(for entity: Entity) where Entity : AppIntents.AppEntity
  public init<Entity>(for entityType: Entity.Type, identifier: Entity.ID) where Entity : AppIntents.AppEntity
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: AppIntents.EntityIdentifier, rhs: AppIntents.EntityIdentifier) -> Swift.Bool
  @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
  public init?(activityIdentifier: Swift.String)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityIdentifier : AppIntents._IntentValue {
  public static var defaultResolverSpecification: AppIntents.EmptyResolverSpecification<AppIntents.EntityIdentifier>
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Specification = AppIntents.EmptyResolverSpecification<AppIntents.EntityIdentifier>
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias UnwrappedType = AppIntents.EntityIdentifier
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ValueType = AppIntents.EntityIdentifier
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
public struct AppShortcutParameterPresentation<Intent, Value, Parameter, ParameterKeyPath> where Intent : AppIntents.AppIntent, Value : AppIntents._IntentValue, Value : Swift.Sendable, Parameter : AppIntents.IntentParameter<Value>, ParameterKeyPath : Swift.KeyPath<Intent, Parameter> {
  public init(for keyPath: ParameterKeyPath, summary: AppIntents.AppShortcutParameterPresentationSummary<Intent, Value, Parameter, ParameterKeyPath>, @AppIntents.AppShortcutOptionsCollectionSpecificationBuilder<Value.UnwrappedType> optionsCollections: () -> some AppShortcutOptionsCollectionSpecification<Value.UnwrappedType>)
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.AppShortcutsProvider {
  public typealias ParameterPresentation = AppIntents.AppShortcutParameterPresentation
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas {
  @_marker public protocol ReaderIntent : AppIntents.AssistantSchemas.Model {
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.IntentSchema : AppIntents.AssistantSchemas.ReaderIntent {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema.IntentSchema : AppIntents.AssistantSchemas.ReaderIntent {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.Intent where Self == AppIntents.AssistantSchemas.IntentSchema {
  @_alwaysEmitIntoClient public static var reader: some AppIntents.AssistantSchemas.ReaderIntent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("reader")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.ReaderIntent {
  @_alwaysEmitIntoClient public var rotateDocuments: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("ReaderRotateDocumentsIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var resizeDocuments: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("ReaderResizeDocumentsIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var openPage: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("ReaderOpenPageIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var enhanceDocuments: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("ReaderEnhanceDocumentsIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var searchDocuments: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("SearchReaderDocumentsIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var openDocument: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("ReaderOpenDocumentsIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var rotatePages: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("ReaderRotatePagesIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var deletePages: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("ReaderDeletePagesIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var insertPages: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("ReaderInsertPagesIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas {
  @_marker public protocol ReaderEntity : AppIntents.AssistantSchemas.Model {
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.EntitySchema : AppIntents.AssistantSchemas.ReaderEntity {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema.EntitySchema : AppIntents.AssistantSchemas.ReaderEntity {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.Entity where Self == AppIntents.AssistantSchemas.EntitySchema {
  @_alwaysEmitIntoClient public static var reader: some AppIntents.AssistantSchemas.ReaderEntity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("reader")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.ReaderEntity {
  @_alwaysEmitIntoClient public var document: some AppIntents.AssistantSchemas.Entity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("ReaderDocumentEntity")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var page: some AppIntents.AssistantSchemas.Entity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("ReaderPageEntity")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas {
  @_marker public protocol ReaderEnum : AppIntents.AssistantSchemas.Model {
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.EnumSchema : AppIntents.AssistantSchemas.ReaderEnum {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema.EnumSchema : AppIntents.AssistantSchemas.ReaderEnum {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.Enum where Self == AppIntents.AssistantSchemas.EnumSchema {
  @_alwaysEmitIntoClient public static var reader: some AppIntents.AssistantSchemas.ReaderEnum {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EnumSchema("reader")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.ReaderEnum {
  @_alwaysEmitIntoClient public var documentKind: some AppIntents.AssistantSchemas.Enum {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EnumSchema("ReaderDocumentKind")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol ParameterSummary {
  associatedtype Intent : AppIntents.AppIntent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@_functionBuilder public enum ParameterSummaryBuilder<Intent> where Intent : AppIntents.AppIntent {
  public static func buildExpression<Summary>(_ expression: Summary) -> Summary where Intent == Summary.Intent, Summary : AppIntents.ParameterSummary
  public static func buildBlock<Summary>(_ block: Summary) -> Summary where Intent == Summary.Intent, Summary : AppIntents.ParameterSummary
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public protocol AssistantSchemaIntent : AppIntents.AssistantIntent {
  static var isAssistantOnly: Swift.Bool { get }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchemaIntent {
  public static var isAssistantOnly: Swift.Bool {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchemaIntent {
  public static var title: Foundation.LocalizedStringResource {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
@attached(memberAttribute) @attached(extension, conformances: AppIntents.AssistantSchemaIntent, AppIntents.ShowInAppSearchResultsIntent, names: named(__assistantSchemaIntent)) public macro AssistantIntent<T>(schema: T) = #externalMacro(module: "AppIntentsMacros", type: "AssistantIntentMacros") where T : AppIntents.AssistantSchemas.Intent
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public enum AppShortcutPhraseToken {
  case applicationName
  public static func == (a: AppIntents.AppShortcutPhraseToken, b: AppIntents.AppShortcutPhraseToken) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct AppShortcutPhrase<Intent> : Swift.ExpressibleByStringInterpolation where Intent : AppIntents.AppIntent {
  public init(_ value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(stringInterpolation: AppIntents.AppShortcutPhrase<Intent>.StringInterpolation)
  public struct StringInterpolation : Swift.StringInterpolationProtocol {
    public init(literalCapacity: Swift.Int, interpolationCount: Swift.Int)
    public mutating func appendLiteral(_ literal: Swift.String)
    public mutating func appendInterpolation(_ token: AppIntents.AppShortcutPhraseToken)
    public mutating func appendInterpolation<Value, Subject>(_ subject: Subject) where Value : AppIntents._IntentValue, Value : Swift.Sendable, Subject : Swift.KeyPath<Intent, AppIntents.IntentParameter<Value>>
    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
    public typealias StringLiteralType = Swift.String
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias StringLiteralType = Swift.String
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias UnicodeScalarLiteralType = Swift.String
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas {
  @_marker public protocol FilesIntent : AppIntents.AssistantSchemas.Model {
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.IntentSchema : AppIntents.AssistantSchemas.FilesIntent {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema.IntentSchema : AppIntents.AssistantSchemas.FilesIntent {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.Intent where Self == AppIntents.AssistantSchemas.IntentSchema {
  @_alwaysEmitIntoClient public static var files: some AppIntents.AssistantSchemas.FilesIntent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("files")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.FilesIntent {
  @_alwaysEmitIntoClient public var createFolder: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("CreateFolderIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var openFile: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("OpenFileIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var deleteFiles: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("DeleteFilesIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var renameFile: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("RenameFileIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var moveFiles: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("MoveFilesIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas {
  @_marker public protocol FilesEntity : AppIntents.AssistantSchemas.Model {
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.EntitySchema : AppIntents.AssistantSchemas.FilesEntity {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema.EntitySchema : AppIntents.AssistantSchemas.FilesEntity {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.Entity where Self == AppIntents.AssistantSchemas.EntitySchema {
  @_alwaysEmitIntoClient public static var files: some AppIntents.AssistantSchemas.FilesEntity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("files")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.FilesEntity {
  @_alwaysEmitIntoClient public var file: some AppIntents.AssistantSchemas.Entity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("FileEntity")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas {
  @_marker public protocol PresentationIntent : AppIntents.AssistantSchemas.Model {
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.IntentSchema : AppIntents.AssistantSchemas.PresentationIntent {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema.IntentSchema : AppIntents.AssistantSchemas.PresentationIntent {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.Intent where Self == AppIntents.AssistantSchemas.IntentSchema {
  @_alwaysEmitIntoClient public static var presentation: some AppIntents.AssistantSchemas.PresentationIntent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("com.apple.Presentation")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.PresentationIntent {
  @_alwaysEmitIntoClient public var create: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("CreatePresentationIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var open: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("OpenPresentationIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var startPlayback: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("StartPlaybackPresentationIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var stopPlayback: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("StopPlaybackPresentationIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var update: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("UpdatePresentationIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var createSlide: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("CreatePresentationSlideIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var openSlide: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("OpenPresentationSlideIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var setSlideTitle: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("UpdatePresentationSlideIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var addTextBoxToSlide: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("AddTextBoxToPresentationSlideIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var addVideoToSlide: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("AddVideoToPresentationSlideIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var addImageToSlide: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("AddImageToPresentationSlideIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var addAudioToSlide: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("AddAudioToPresentationSlideIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var addWebVideoToSlide: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("AddWebVideoToPresentationSlideIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var addCommentToSlide: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("AddCommentToPresentationSlideIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var deleteSlide: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("DeletePresentationSlideIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas {
  @_marker public protocol PresentationEntity : AppIntents.AssistantSchemas.Model {
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.EntitySchema : AppIntents.AssistantSchemas.PresentationEntity {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema.EntitySchema : AppIntents.AssistantSchemas.PresentationEntity {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.Entity where Self == AppIntents.AssistantSchemas.EntitySchema {
  @_alwaysEmitIntoClient public static var presentation: some AppIntents.AssistantSchemas.PresentationEntity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("presentation")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.PresentationEntity {
  @_alwaysEmitIntoClient public var slide: some AppIntents.AssistantSchemas.Entity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("PresentationSlideEntity")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var document: some AppIntents.AssistantSchemas.Entity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("PresentationEntity")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var template: some AppIntents.AssistantSchemas.Entity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("PresentationTemplateEntity")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public enum ShortcutTileColor {
  case red
  case orange
  case tangerine
  case yellow
  case lime
  case teal
  case lightBlue
  case blue
  case navy
  case grape
  case purple
  case pink
  case grayBlue
  case grayGreen
  case grayBrown
  public static func == (a: AppIntents.ShortcutTileColor, b: AppIntents.ShortcutTileColor) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.ShortcutTileColor : Swift.Sendable {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol DisplayRepresentable : AppIntents.InstanceDisplayRepresentable, AppIntents.TypeDisplayRepresentable {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol StaticDisplayRepresentable : AppIntents.CaseDisplayRepresentable, AppIntents.TypeDisplayRepresentable {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol TypeDisplayRepresentable {
  static var typeDisplayRepresentation: AppIntents.TypeDisplayRepresentation { get }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct TypeDisplayRepresentation : Swift.ExpressibleByStringLiteral {
  public var name: Foundation.LocalizedStringResource
  public var numericFormat: Foundation.LocalizedStringResource?
  @available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
  public var synonyms: [Foundation.LocalizedStringResource]
  public init(name: Foundation.LocalizedStringResource, numericFormat: Foundation.LocalizedStringResource? = nil)
  @available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
  public init(name: Foundation.LocalizedStringResource, numericFormat: Foundation.LocalizedStringResource? = nil, synonyms: [Foundation.LocalizedStringResource] = [])
  @_semantics("localization_key.init_literal") public init(stringLiteral value: Swift.String)
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias StringLiteralType = Swift.String
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias UnicodeScalarLiteralType = Swift.String
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.TypeDisplayRepresentation : @unchecked Swift.Sendable {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol InstanceDisplayRepresentable : Foundation.CustomLocalizedStringResourceConvertible {
  var displayRepresentation: AppIntents.DisplayRepresentation { get }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.InstanceDisplayRepresentable {
  public var localizedStringResource: Foundation.LocalizedStringResource {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol CaseDisplayRepresentable : Foundation.CustomLocalizedStringResourceConvertible, Swift.CaseIterable, Swift.Hashable {
  static var caseDisplayRepresentations: [Self : AppIntents.DisplayRepresentation] { get }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.CaseDisplayRepresentable {
  public var localizedStringResource: Foundation.LocalizedStringResource {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.CaseDisplayRepresentable where Self : AppIntents.InstanceDisplayRepresentable {
  public var localizedStringResource: Foundation.LocalizedStringResource {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol DeleteIntent : AppIntents.SystemIntent {
  associatedtype Entity : AppIntents.AppEntity
  var entities: [Self.Entity] { get }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.DateComponents {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.DateComponents
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.DateComponents
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.DateComponents {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.DateComponents
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.DateComponents
  convenience public init(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.DateComponents
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.DateComponents
}
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension CoreSpotlight.CSSearchableItem {
  convenience public init(appEntity: some IndexedEntity)
  convenience public init<Entity>(appEntity: Entity, priority: Swift.Int) where Entity : AppIntents.IndexedEntity
  public func associateAppEntity(_ appEntity: some IndexedEntity, priority: Swift.Int = 0)
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public protocol LiveActivityIntent : AppIntents.SystemIntent {
}
@available(iOS, introduced: 16.1, deprecated: 17.0, message: "Use LiveActivityIntent instead.")
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public protocol LiveActivityStartingIntent : AppIntents.SystemIntent {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas {
  @_marker public protocol MailIntent : AppIntents.AssistantSchemas.Model {
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.IntentSchema : AppIntents.AssistantSchemas.MailIntent {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema.IntentSchema : AppIntents.AssistantSchemas.MailIntent {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.Intent where Self == AppIntents.AssistantSchemas.IntentSchema {
  @_alwaysEmitIntoClient public static var mail: some AppIntents.AssistantSchemas.MailIntent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("mail")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.MailIntent {
  @_alwaysEmitIntoClient public var createDraft: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("CreateDraftIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var updateDraft: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("UpdateDraftIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var saveDraft: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("SaveDraftIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var deleteDraft: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("DeleteDraftIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var sendDraft: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("SendDraftIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var forwardMail: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("ForwardMailIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var replyMail: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("ReplyMailIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var archiveMail: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("ArchiveMailIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var deleteMail: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("DeleteMailIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var updateMail: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("UpdateMailIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas {
  @_marker public protocol MailEntity : AppIntents.AssistantSchemas.Model {
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.EntitySchema : AppIntents.AssistantSchemas.MailEntity {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema.EntitySchema : AppIntents.AssistantSchemas.MailEntity {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.Entity where Self == AppIntents.AssistantSchemas.EntitySchema {
  @_alwaysEmitIntoClient public static var mail: some AppIntents.AssistantSchemas.MailEntity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("mail")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.MailEntity {
  @_alwaysEmitIntoClient public var account: some AppIntents.AssistantSchemas.Entity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("MailAccountEntity")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var mailbox: some AppIntents.AssistantSchemas.Entity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("MailboxEntity")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var draft: some AppIntents.AssistantSchemas.Entity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("MailDraftEntity")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var message: some AppIntents.AssistantSchemas.Entity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("MailMessageEntity")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@propertyWrapper final public class IntentParameter<Value> : @unchecked Swift.Sendable where Value : AppIntents._IntentValue, Value : Swift.Sendable {
  final public let defaultValue: Value.UnwrappedType?
  final public let title: Foundation.LocalizedStringResource
  final public var isOptional: Swift.Bool {
    get
  }
  @available(*, unavailable)
  public init()
  final public var projectedValue: AppIntents.IntentParameter<Value> {
    get
  }
  final public var wrappedValue: Value {
    get
    set
  }
  @objc deinit
}
@available(macOS 15.2, iOS 18.2, watchOS 11.2, tvOS 18.2, visionOS 2.2, *)
extension AppIntents.IntentParameter {
  public enum ValueState {
    case unset
    case set(Value)
  }
  final public var valueState: AppIntents.IntentParameter<Value>.ValueState {
    get
  }
}
@available(macOS 15.2, iOS 18.2, watchOS 11.2, tvOS 18.2, visionOS 2.2, *)
extension AppIntents.IntentParameter.ValueState : Swift.Equatable where Value : Swift.Equatable {
  public static func == (lhs: AppIntents.IntentParameter<Value>.ValueState, rhs: AppIntents.IntentParameter<Value>.ValueState) -> Swift.Bool
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
public protocol AppShortcutOptionsCollectionSpecification<Value> : Swift.Sendable, Swift.Sequence where Self.Element == any AppIntents.AppShortcutOptionsCollectionProtocol {
  associatedtype Value : AppIntents._IntentValue
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
@_functionBuilder public enum AppShortcutOptionsCollectionSpecificationBuilder<Value> where Value : AppIntents._IntentValue {
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.AppShortcutOptionsCollectionSpecificationBuilder {
  public static func buildBlock<C0>(_ c0: C0) -> some AppIntents.AppShortcutOptionsCollectionSpecification<Value> where C0 : AppIntents.AppShortcutOptionsCollectionProtocol
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentDescription : Swift.ExpressibleByStringLiteral {
  public var descriptionText: Foundation.LocalizedStringResource
  public var categoryName: Foundation.LocalizedStringResource?
  public var searchKeywords: [Foundation.LocalizedStringResource]
  @available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
  public var resultValueName: Foundation.LocalizedStringResource?
  public init(_ descriptionText: Foundation.LocalizedStringResource, categoryName: Foundation.LocalizedStringResource? = nil, searchKeywords: [Foundation.LocalizedStringResource] = [])
  @available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
  public init(_ descriptionText: Foundation.LocalizedStringResource, categoryName: Foundation.LocalizedStringResource? = nil, searchKeywords: [Foundation.LocalizedStringResource] = [], resultValueName: Foundation.LocalizedStringResource?)
  @_semantics("localization_key.init_literal") public init(stringLiteral value: Swift.String)
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias StringLiteralType = Swift.String
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias UnicodeScalarLiteralType = Swift.String
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentDescription : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas {
  @_marker public protocol BrowserIntent : AppIntents.AssistantSchemas.Model {
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.IntentSchema : AppIntents.AssistantSchemas.BrowserIntent {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema.IntentSchema : AppIntents.AssistantSchemas.BrowserIntent {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.Intent where Self == AppIntents.AssistantSchemas.IntentSchema {
  public static var browser: some AppIntents.AssistantSchemas.BrowserIntent {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.BrowserIntent {
  @_alwaysEmitIntoClient public var bookmarkTab: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("BookmarkTabIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var bookmarkURL: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("BookmarkURLIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var openBookmark: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("OpenBookmarkIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var deleteBookmarks: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("DeleteBookmarksIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var clearHistory: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("ClearHistoryIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var closeTabs: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("CloseTabsIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var createTab: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("CreateTabIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var openURLInTab: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("LoadURLInTabIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var switchTab: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("SwitchToTabIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var createWindow: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("CreateWindowIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var closeWindows: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("CloseWindowsIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var findOnPage: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("FindOnPageIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var search: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("SearchWebIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas {
  @_marker public protocol BrowserEntity : AppIntents.AssistantSchemas.Model {
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.EntitySchema : AppIntents.AssistantSchemas.BrowserEntity {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema.EntitySchema : AppIntents.AssistantSchemas.BrowserEntity {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.Entity where Self == AppIntents.AssistantSchemas.EntitySchema {
  @_alwaysEmitIntoClient public static var browser: some AppIntents.AssistantSchemas.BrowserEntity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("browser")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.BrowserEntity {
  @_alwaysEmitIntoClient public var bookmark: some AppIntents.AssistantSchemas.Entity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("BookmarkEntity")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var tab: some AppIntents.AssistantSchemas.Entity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("TabEntity")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var window: some AppIntents.AssistantSchemas.Entity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("WindowEntity")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
  @_marker public protocol BrowserEnum : AppIntents.AssistantSchemas.Model {
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.EnumSchema : AppIntents.AssistantSchemas.BrowserEnum {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema.EnumSchema : AppIntents.AssistantSchemas.BrowserEnum {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.Enum where Self == AppIntents.AssistantSchemas.EnumSchema {
  @_alwaysEmitIntoClient public static var browser: some AppIntents.AssistantSchemas.BrowserEnum {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EnumSchema("browser")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.BrowserEnum {
  @_alwaysEmitIntoClient public var clearHistoryTimeFrame: some AppIntents.AssistantSchemas.Enum {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EnumSchema("ClearHistoryTimeFrameEnum")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema {
  public struct EntitySchema : AppIntents.AssistantSchemas.Entity {
    @usableFromInline
    internal init(_ identifier: Swift.String)
  }
  public init(_ schema: some AssistantSchemas.Entity)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol SystemIntent : AppIntents.AppIntent {
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public protocol AudioRecordingIntent : AppIntents.SystemIntent {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.Int : AppIntents._IntentValue {
  public static var defaultResolverSpecification: some AppIntents.ResolverSpecification {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Specification = @_opaqueReturnTypeOf("$sSi10AppIntentsE28defaultResolverSpecificationQrvpZ", 0) __
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias UnwrappedType = Swift.Int
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ValueType = Swift.Int
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.Int : AppIntents.RangeComparableProperty {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntResolver : AppIntents.RangeCheckingResolver {
  public func resolve(from input: Swift.Int, context: AppIntents.IntentParameterContext<Swift.Int>) async throws -> Swift.Int?
  public static func == (a: AppIntents.IntResolver, b: AppIntents.IntResolver) -> Swift.Bool
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Input = Swift.Int
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Output = Swift.Int
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntFromStringResolver : AppIntents.RangeCheckingResolver {
  public var radix: Swift.Int
  public init(radix: Swift.Int = 10)
  public func resolve(from input: Swift.String, context: AppIntents.IntentParameterContext<Swift.Int>) async throws -> Swift.Int?
  public static func == (a: AppIntents.IntFromStringResolver, b: AppIntents.IntFromStringResolver) -> Swift.Bool
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Input = Swift.String
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Output = Swift.Int
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntFromDoubleResolver : AppIntents.RangeCheckingResolver {
  public var roundingRule: Swift.FloatingPointRoundingRule
  public init(roundingRule: Swift.FloatingPointRoundingRule = .towardZero)
  public func resolve(from input: Swift.Double, context: AppIntents.IntentParameterContext<Swift.Int>) async throws -> Swift.Int?
  public static func == (a: AppIntents.IntFromDoubleResolver, b: AppIntents.IntFromDoubleResolver) -> Swift.Bool
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Input = Swift.Double
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Output = Swift.Int
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter {
  public enum IntControlStyle {
    case stepper
    case field
    public static func == (a: AppIntents.IntentParameter<Value>.IntControlStyle, b: AppIntents.IntentParameter<Value>.IntControlStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Swift.Int {
  final public var controlStyle: AppIntents.IntentParameter<Value>.IntControlStyle? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Swift.Int {
  public var controlStyle: AppIntents.IntentParameter<Value>.IntControlStyle? {
    get
  }
  public var inclusiveRange: AppIntents.IntentParameter<Value>.InclusiveRange<Swift.Int>? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Foundation.AttributedString : AppIntents._IntentValue {
  public static var defaultResolverSpecification: some AppIntents.ResolverSpecification {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Specification = @_opaqueReturnTypeOf("$s10Foundation16AttributedStringV10AppIntentsE28defaultResolverSpecificationQrvpZ", 0) __
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias UnwrappedType = Foundation.AttributedString
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ValueType = Foundation.AttributedString
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct AttributedStringFromStringResolver : AppIntents.Resolver {
  public func resolve(from input: Swift.String, context: AppIntents.IntentParameterContext<Foundation.AttributedString>) async throws -> Foundation.AttributedString?
  public static func == (a: AppIntents.AttributedStringFromStringResolver, b: AppIntents.AttributedStringFromStringResolver) -> Swift.Bool
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Input = Swift.String
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Output = Foundation.AttributedString
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentCurrencyAmount : Swift.Equatable, Swift.Hashable, @unchecked Swift.Sendable {
  public let amount: Foundation.Decimal
  public let currencyCode: Swift.String
  public init(amount: Foundation.Decimal, currencyCode: Swift.String)
  public static func == (a: AppIntents.IntentCurrencyAmount, b: AppIntents.IntentCurrencyAmount) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentCurrencyAmount : AppIntents.DisplayRepresentable {
  public static var typeDisplayRepresentation: AppIntents.TypeDisplayRepresentation {
    get
  }
  public var displayRepresentation: AppIntents.DisplayRepresentation {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentCurrencyAmount : AppIntents._IntentValue {
  public static var defaultResolverSpecification: AppIntents.EmptyResolverSpecification<AppIntents.IntentCurrencyAmount> {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Specification = AppIntents.EmptyResolverSpecification<AppIntents.IntentCurrencyAmount>
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias UnwrappedType = AppIntents.IntentCurrencyAmount
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ValueType = AppIntents.IntentCurrencyAmount
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == AppIntents.IntentCurrencyAmount {
  final public var currencyCodes: [Swift.String]? {
    get
  }
  final public var inclusiveRange: AppIntents.IntentParameter<Value>.InclusiveRange<Foundation.Decimal>? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == AppIntents.IntentCurrencyAmount {
  public var currencyCodes: [Swift.String]? {
    get
  }
  public var inclusiveRange: AppIntents.IntentParameter<Value>.InclusiveRange<Foundation.Decimal>? {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas {
  @_marker public protocol SpreadsheetIntent : AppIntents.AssistantSchemas.Model {
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.IntentSchema : AppIntents.AssistantSchemas.SpreadsheetIntent {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema.IntentSchema : AppIntents.AssistantSchemas.SpreadsheetIntent {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.Intent where Self == AppIntents.AssistantSchemas.IntentSchema {
  @_alwaysEmitIntoClient public static var spreadsheet: some AppIntents.AssistantSchemas.SpreadsheetIntent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("spreadsheet")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.SpreadsheetIntent {
  @_alwaysEmitIntoClient public var create: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("CreateSpreadsheetIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var open: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("OpenSpreadsheetIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var update: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("UpdateSpreadsheetIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var delete: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("DeleteSpreadsheetIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var createSheet: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("CreateSheetIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var openSheet: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("OpenSheetIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var updateSheet: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("UpdateSheetIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var addImageToSheet: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("AddImageToSheetIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var addTextBoxToSheet: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("AddTextboxToSheetIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var addVideoToSheet: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("AddVideoToSheetIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var addAudioToSheet: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("AddAudioToSheetIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var addWebVideoToSheet: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("AddWebVideoToSheetIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var addCommentToSheet: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("AddCommentToSheetIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var deleteSheet: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("DeleteSheetIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas {
  @_marker public protocol SpreadsheetEntity : AppIntents.AssistantSchemas.Model {
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.EntitySchema : AppIntents.AssistantSchemas.SpreadsheetEntity {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema.EntitySchema : AppIntents.AssistantSchemas.SpreadsheetEntity {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.Entity where Self == AppIntents.AssistantSchemas.EntitySchema {
  @_alwaysEmitIntoClient public static var spreadsheet: some AppIntents.AssistantSchemas.SpreadsheetEntity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("spreadsheet")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.SpreadsheetEntity {
  @_alwaysEmitIntoClient public var sheet: some AppIntents.AssistantSchemas.Entity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("SheetEntity")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var document: some AppIntents.AssistantSchemas.Entity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("SpreadsheetEntity")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var template: some AppIntents.AssistantSchemas.Entity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("SpreadsheetTemplateEntity")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == AppIntents.IntentFile {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == AppIntents.IntentFile {
  convenience public init()
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
public protocol AudioPlaybackIntent : AppIntents.SystemIntent {
}
@available(macOS, introduced: 13.0, deprecated: 14.0, message: "Please use AudioPlaybackIntent instead.")
@available(iOS, introduced: 16.0, deprecated: 17.0, message: "Please use AudioPlaybackIntent instead.")
@available(watchOS, introduced: 9.0, deprecated: 10.0, message: "Please use AudioPlaybackIntent instead.")
@available(tvOS, introduced: 16.0, deprecated: 17.0, message: "Please use AudioPlaybackIntent instead.")
@available(visionOS, introduced: 1.0, deprecated: 1.0, message: "Please use AudioPlaybackIntent instead.")
@available(*, deprecated, renamed: "AudioPlaybackIntent")
public protocol AudioStartingIntent : AppIntents.SystemIntent {
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public class EntityQueryComparator<Property, PropertyType, InputType, ComparatorMappingType> where Property : AppIntents.EntityProperty<PropertyType>, PropertyType : AppIntents._IntentValue, PropertyType : Swift.Sendable, InputType : AppIntents._IntentValue {
  @objc deinit
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@_functionBuilder public enum EntityQueryComparatorsBuilder<Entity, Subject, Property, PropertyType, ComparatorMappingType> where Entity : AppIntents.AppEntity, Subject : AppIntents.AppEntity, Property : AppIntents.EntityProperty<PropertyType>, PropertyType : AppIntents._IntentValue, PropertyType : Swift.Sendable {
  public static func buildExpression(_ expression: AppIntents.EntityQueryComparator<Property, PropertyType, PropertyType, ComparatorMappingType>) -> AppIntents.AnyEntityQueryComparator<Entity, Subject, Property, PropertyType, ComparatorMappingType>
  public static func buildExpression(_ expression: AppIntents.EntityQueryComparator<Property, PropertyType, PropertyType.UnwrappedType, ComparatorMappingType>) -> AppIntents.AnyEntityQueryComparator<Entity, Subject, Property, PropertyType, ComparatorMappingType> where PropertyType : Swift.ExpressibleByNilLiteral
  public static func buildExpression<InputType>(_ expression: AppIntents.ContainsComparator<Property, PropertyType, InputType, ComparatorMappingType>) -> AppIntents.AnyEntityQueryComparator<Entity, Subject, Property, PropertyType, ComparatorMappingType> where InputType : AppIntents._IntentValue
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public static func buildExpression<InputType>(_ expression: AppIntents.IsBetweenComparator<Property, PropertyType, InputType, ComparatorMappingType>) -> AppIntents.AnyEntityQueryComparator<Entity, Subject, Property, PropertyType, ComparatorMappingType> where InputType : Swift.Comparable, InputType == PropertyType.UnwrappedType
  public static func buildBlock(_ components: AppIntents.AnyEntityQueryComparator<Entity, Subject, Property, PropertyType, ComparatorMappingType>...) -> [AppIntents.AnyEntityQueryComparator<Entity, Subject, Property, PropertyType, ComparatorMappingType>]
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct AnyEntityQueryComparator<Entity, Subject, Property, PropertyType, ComparatorMappingType> where Property : AppIntents.EntityProperty<PropertyType>, PropertyType : AppIntents._IntentValue, PropertyType : Swift.Sendable {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == AppIntents.IntentCurrencyAmount {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, currencyCodes: _const [Swift.String] = [], inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Foundation.Decimal>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, currencyCodes: _const [Swift.String] = [], inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Foundation.Decimal>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, currencyCodes: _const [Swift.String] = [], inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Foundation.Decimal>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentCurrencyAmount
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, currencyCodes: _const [Swift.String] = [], inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Foundation.Decimal>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentCurrencyAmount
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == AppIntents.IntentCurrencyAmount {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, currencyCodes: _const [Swift.String] = [], inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Foundation.Decimal>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, currencyCodes: _const [Swift.String] = [], inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Foundation.Decimal>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, currencyCodes: _const [Swift.String] = [], inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Foundation.Decimal>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentCurrencyAmount
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, currencyCodes: _const [Swift.String] = [], inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Foundation.Decimal>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentCurrencyAmount
  convenience public init(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, currencyCodes: _const [Swift.String] = [], inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Foundation.Decimal>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, currencyCodes: _const [Swift.String] = [], inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Foundation.Decimal>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, currencyCodes: _const [Swift.String] = [], inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Foundation.Decimal>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentCurrencyAmount
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, currencyCodes: _const [Swift.String] = [], inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Foundation.Decimal>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentCurrencyAmount
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public struct OpenURLIntent : AppIntents.SystemIntent, AppIntents.URLRepresentableIntent {
  public static var title: Foundation.LocalizedStringResource
  public static var urlRepresentation: AppIntents.OpenURLIntent.URLRepresentation {
    get
  }
  @AppIntents.IntentParameter @_projectedValueProperty($url) public var url: Foundation.URL {
    get
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
    nonmutating set
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
    nonmutating _modify
  }
  public var $url: AppIntents.IntentParameter<Foundation.URL> {
    get
  }
  public init(_ url: Foundation.URL)
  public init(urlRepresentable: some URLRepresentableEnum) throws
  public init(urlRepresentable: some URLRepresentableEntity) async throws
  public init()
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias PerformResult = Swift.Never
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias SummaryContent = @_opaqueReturnTypeOf("$s10AppIntents0A6IntentPAAE16parameterSummaryQrvpZ", 0) __<AppIntents.OpenURLIntent>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct ParameterSummaryWhenCondition<Intent, WhenCondition, Otherwise> : AppIntents.ParameterSummary where Intent : AppIntents.AppIntent, WhenCondition : AppIntents.ParameterSummary, Otherwise : AppIntents.ParameterSummary {
  public init<Parameter>(_ keyPath: Swift.KeyPath<Intent, Parameter>, _ comparisonOperator: AppIntents.HasValueComparisonOperator, @AppIntents.ParameterSummaryBuilder<Intent> _ when: () -> WhenCondition, @AppIntents.ParameterSummaryBuilder<Intent> otherwise: () -> Otherwise) where Parameter : AppIntents.AnyIntentValue
  public init<ValueType, Parameter>(_ keyPath: Swift.KeyPath<Intent, Parameter>, _ comparisonOperator: AppIntents.EquatableComparisonOperator, _ value: ValueType, @AppIntents.ParameterSummaryBuilder<Intent> _ when: () -> WhenCondition, @AppIntents.ParameterSummaryBuilder<Intent> otherwise: () -> Otherwise) where ValueType : Swift.Equatable, ValueType == Parameter.Value, Parameter : AppIntents.AnyIntentValue
  public init<ValueType, Parameter>(_ keyPath: Swift.KeyPath<Intent, Parameter>, _ comparisonOperator: AppIntents.EquatableComparisonOperator, _ value: ValueType.ValueType, @AppIntents.ParameterSummaryBuilder<Intent> _ when: () -> WhenCondition, @AppIntents.ParameterSummaryBuilder<Intent> otherwise: () -> Otherwise) where ValueType : Swift.ExpressibleByNilLiteral, ValueType == Parameter.Value, Parameter : AppIntents.AnyIntentValue, ValueType.ValueType : Swift.Equatable
  public init<ValueType, Parameter>(_ keyPath: Swift.KeyPath<Intent, Parameter>, _ comparisonOperator: AppIntents.OneOfComparisonOperator, _ values: [ValueType.ValueType], @AppIntents.ParameterSummaryBuilder<Intent> _ when: () -> WhenCondition, @AppIntents.ParameterSummaryBuilder<Intent> otherwise: () -> Otherwise) where ValueType == Parameter.Value, Parameter : AppIntents.AnyIntentValue, ValueType.ValueType : Swift.Equatable
  public init<ValueType, Parameter>(_ keyPath: Swift.KeyPath<Intent, Parameter>, _ comparisonOperator: AppIntents.ComparableComparisonOperator, _ value: ValueType, @AppIntents.ParameterSummaryBuilder<Intent> _ when: () -> WhenCondition, @AppIntents.ParameterSummaryBuilder<Intent> otherwise: () -> Otherwise) where ValueType : Swift.Comparable, ValueType == Parameter.Value, Parameter : AppIntents.AnyIntentValue
  public init<Value, Parameter>(_ keyPath: Swift.KeyPath<Intent, Parameter>, _ comparisonOperator: AppIntents.ComparableComparisonOperator, _ value: Value.ValueType, @AppIntents.ParameterSummaryBuilder<Intent> _ when: () -> WhenCondition, @AppIntents.ParameterSummaryBuilder<Intent> otherwise: () -> Otherwise) where Value : Swift.ExpressibleByNilLiteral, Value == Parameter.Value, Parameter : AppIntents.AnyIntentValue, Value.ValueType : Swift.Comparable
  public init<Parameter>(_ keyPath: Swift.KeyPath<Intent, Parameter>, identifier comparisonOperator: AppIntents.OneOfComparisonOperator, _ values: [Swift.String], @AppIntents.ParameterSummaryBuilder<Intent> _ when: () -> WhenCondition, @AppIntents.ParameterSummaryBuilder<Intent> otherwise: () -> Otherwise) where Parameter : AppIntents.AnyIntentValue, Parameter.Value.ValueType : AppIntents.AppEntity
  public init<Parameter>(_ keyPath: Swift.KeyPath<Intent, Parameter>, identifier comparisonOperator: AppIntents.OneOfComparisonOperator, _ values: [Parameter.Value.ValueType.ID], @AppIntents.ParameterSummaryBuilder<Intent> _ when: () -> WhenCondition, @AppIntents.ParameterSummaryBuilder<Intent> otherwise: () -> Otherwise) where Parameter : AppIntents.AnyIntentValue, Parameter.Value.ValueType : AppIntents.AppEntity, Parameter.Value.ValueType.ID == Swift.Int
  public init<Parameter>(_ keyPath: Swift.KeyPath<Intent, Parameter>, identifier comparisonOperator: AppIntents.EquatableComparisonOperator, _ value: Swift.String, @AppIntents.ParameterSummaryBuilder<Intent> _ when: () -> WhenCondition, @AppIntents.ParameterSummaryBuilder<Intent> otherwise: () -> Otherwise) where Parameter : AppIntents.AnyIntentValue, Parameter.Value.ValueType : AppIntents.AppEntity
  public init<Parameter>(_ keyPath: Swift.KeyPath<Intent, Parameter>, identifier comparisonOperator: AppIntents.EquatableComparisonOperator, _ value: Parameter.Value.ValueType.ID, @AppIntents.ParameterSummaryBuilder<Intent> _ when: () -> WhenCondition, @AppIntents.ParameterSummaryBuilder<Intent> otherwise: () -> Otherwise) where Parameter : AppIntents.AnyIntentValue, Parameter.Value.ValueType : AppIntents.AppEntity, Parameter.Value.ValueType.ID == Swift.Int
  public init<IntentType, Parameter>(_ keyPath: Swift.KeyPath<IntentType, Parameter>, identifier comparisonOperator: AppIntents.StringComparisonOperator, _ value: Swift.String, @AppIntents.ParameterSummaryBuilder<Intent> _ when: () -> WhenCondition, @AppIntents.ParameterSummaryBuilder<Intent> otherwise: () -> Otherwise) where IntentType : AppIntents.AppIntent, Parameter : AppIntents.AnyIntentValue, Parameter.Value.ValueType : AppIntents.AppEntity
  public init<IntentType, Parameter>(_ keyPath: Swift.KeyPath<IntentType, Parameter>, identifier comparisonOperator: AppIntents.ComparableComparisonOperator, _ value: Parameter.Value.ValueType.ID, @AppIntents.ParameterSummaryBuilder<Intent> _ when: () -> WhenCondition, @AppIntents.ParameterSummaryBuilder<Intent> otherwise: () -> Otherwise) where IntentType : AppIntents.AppIntent, Parameter : AppIntents.AnyIntentValue, Parameter.Value.ValueType : AppIntents.AppEntity, Parameter.Value.ValueType.ID == Swift.Int
  @available(macOS 13.0, iOS 16.1, watchOS 9.1, tvOS 16.1, *)
  public init<Parameter>(_ keyPath: Swift.KeyPath<Intent, Parameter>, identifier comparisonOperator: AppIntents.StringComparisonOperator, _ value: Swift.String, @AppIntents.ParameterSummaryBuilder<Intent> _ when: () -> WhenCondition, @AppIntents.ParameterSummaryBuilder<Intent> otherwise: () -> Otherwise) where Parameter : AppIntents.AnyIntentValue, Parameter.Value.ValueType : AppIntents.AppEntity
  @available(macOS 13.0, iOS 16.1, watchOS 9.1, tvOS 16.1, *)
  public init<Parameter>(_ keyPath: Swift.KeyPath<Intent, Parameter>, identifier comparisonOperator: AppIntents.ComparableComparisonOperator, _ value: Parameter.Value.ValueType.ID, @AppIntents.ParameterSummaryBuilder<Intent> _ when: () -> WhenCondition, @AppIntents.ParameterSummaryBuilder<Intent> otherwise: () -> Otherwise) where Parameter : AppIntents.AnyIntentValue, Parameter.Value.ValueType : AppIntents.AppEntity, Parameter.Value.ValueType.ID == Swift.Int
  @available(macOS 14.0, iOS 17.0, watchOS 10.0, *)
  @available(tvOS, unavailable)
  public init(widgetFamily comparisonOperator: AppIntents.OneOfComparisonOperator, _ values: [AppIntents.IntentWidgetFamily], @AppIntents.ParameterSummaryBuilder<Intent> _ when: () -> WhenCondition, @AppIntents.ParameterSummaryBuilder<Intent> otherwise: () -> Otherwise)
  @available(macOS 14.0, iOS 17.0, watchOS 10.0, *)
  @available(tvOS, unavailable)
  public init(widgetFamily comparisonOperator: AppIntents.EquatableComparisonOperator, _ value: AppIntents.IntentWidgetFamily, @AppIntents.ParameterSummaryBuilder<Intent> _ when: () -> WhenCondition, @AppIntents.ParameterSummaryBuilder<Intent> otherwise: () -> Otherwise)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public enum HasValueComparisonOperator {
  case hasNoValue
  case hasAnyValue
  public static func == (a: AppIntents.HasValueComparisonOperator, b: AppIntents.HasValueComparisonOperator) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public enum EquatableComparisonOperator {
  case notEqualTo
  case equalTo
  public static func == (a: AppIntents.EquatableComparisonOperator, b: AppIntents.EquatableComparisonOperator) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public enum OneOfComparisonOperator {
  case oneOf
  public static func == (a: AppIntents.OneOfComparisonOperator, b: AppIntents.OneOfComparisonOperator) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public enum ComparableComparisonOperator {
  case lessThan
  case lessThanOrEqualTo
  case greaterThan
  case greaterThanOrEqualTo
  public static func == (a: AppIntents.ComparableComparisonOperator, b: AppIntents.ComparableComparisonOperator) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public enum StringComparisonOperator {
  case doesNotContain
  case contains
  case hasPrefix
  case hasSuffix
  public static func == (a: AppIntents.StringComparisonOperator, b: AppIntents.StringComparisonOperator) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, *)
@available(tvOS, unavailable)
public enum IntentWidgetFamily : AppIntents._IntentValue {
  case systemSmall
  case systemMedium
  case systemLarge
  case systemExtraLarge
  case accessoryCorner
  case accessoryCircular
  case accessoryRectangular
  case accessoryInline
  public static var defaultResolverSpecification: AppIntents.EmptyResolverSpecification<AppIntents.IntentWidgetFamily>
  public static func == (a: AppIntents.IntentWidgetFamily, b: AppIntents.IntentWidgetFamily) -> Swift.Bool
  @available(iOS 17.0, watchOS 10.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  public typealias Specification = AppIntents.EmptyResolverSpecification<AppIntents.IntentWidgetFamily>
  @available(iOS 17.0, watchOS 10.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  public typealias UnwrappedType = AppIntents.IntentWidgetFamily
  @available(iOS 17.0, watchOS 10.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  public typealias ValueType = AppIntents.IntentWidgetFamily
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
public protocol ProgressReportingIntent : AppIntents.AppIntent {
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.ProgressReportingIntent {
  public var progress: Foundation.Progress {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol AppIntentsExtension : ExtensionFoundation.AppExtension {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppIntentsExtension {
  public var configuration: some ExtensionFoundation.AppExtensionConfiguration {
    get
  }
}
@available(macOS 13.3, iOS 16.4, watchOS 9.4, tvOS 16.4, *)
@available(iOSApplicationExtension, unavailable)
@available(tvOSApplicationExtension, unavailable)
@available(watchOSApplicationExtension, unavailable)
@available(macCatalystApplicationExtension, unavailable)
@available(macOSApplicationExtension, unavailable)
public protocol ForegroundContinuableIntent : AppIntents.AppIntent {
}
@available(macOS 13.3, iOS 16.4, watchOS 9.4, tvOS 16.4, *)
@available(iOSApplicationExtension, unavailable)
@available(tvOSApplicationExtension, unavailable)
@available(watchOSApplicationExtension, unavailable)
@available(macCatalystApplicationExtension, unavailable)
@available(macOSApplicationExtension, unavailable)
extension AppIntents.ForegroundContinuableIntent {
  public func needsToContinueInForegroundError(_ dialog: AppIntents.IntentDialog? = nil, continuation: (@_Concurrency.MainActor () async throws -> Swift.Void)? = nil) -> AppIntents.AppIntentError
  @discardableResult
  public func requestToContinueInForeground<ResultValue>(_ dialog: AppIntents.IntentDialog? = nil, continuation: @_Concurrency.MainActor () async throws -> ResultValue = { () }) async throws -> ResultValue where ResultValue : Swift.Sendable
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
final public class EqualToComparator<Property, PropertyType, ComparatorMappingType> : AppIntents.EntityQueryComparator<Property, PropertyType, PropertyType, ComparatorMappingType> where Property : AppIntents.EntityProperty<PropertyType>, PropertyType : AppIntents._IntentValue, PropertyType : Swift.Equatable, PropertyType : Swift.Sendable {
  public init(mappingTransform: @escaping (PropertyType) -> ComparatorMappingType)
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<PropertyType.UnwrappedType> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (PropertyType) -> ComparatorMappingType) where Spec : AppIntents.ResolverSpecification
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
final public class NotEqualToComparator<Property, PropertyType, ComparatorMappingType> : AppIntents.EntityQueryComparator<Property, PropertyType, PropertyType, ComparatorMappingType> where Property : AppIntents.EntityProperty<PropertyType>, PropertyType : AppIntents._IntentValue, PropertyType : Swift.Equatable, PropertyType : Swift.Sendable {
  public init(mappingTransform: @escaping (PropertyType) -> ComparatorMappingType)
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<PropertyType.UnwrappedType> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (PropertyType) -> ComparatorMappingType) where Spec : AppIntents.ResolverSpecification
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
final public class GreaterThanComparator<Property, PropertyType, ComparatorMappingType> : AppIntents.EntityQueryComparator<Property, PropertyType, PropertyType.UnwrappedType, ComparatorMappingType> where Property : AppIntents.EntityProperty<PropertyType>, PropertyType : AppIntents._IntentValue, PropertyType : Swift.Sendable, PropertyType.UnwrappedType : Swift.Comparable {
  public init(mappingTransform: @escaping (PropertyType.UnwrappedType) -> ComparatorMappingType)
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<PropertyType.UnwrappedType> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (PropertyType.UnwrappedType) -> ComparatorMappingType) where Spec : AppIntents.ResolverSpecification
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
final public class LessThanComparator<Property, PropertyType, ComparatorMappingType> : AppIntents.EntityQueryComparator<Property, PropertyType, PropertyType.UnwrappedType, ComparatorMappingType> where Property : AppIntents.EntityProperty<PropertyType>, PropertyType : AppIntents._IntentValue, PropertyType : Swift.Sendable, PropertyType.UnwrappedType : Swift.Comparable {
  public init(mappingTransform: @escaping (PropertyType.UnwrappedType) -> ComparatorMappingType)
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<PropertyType.UnwrappedType> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (PropertyType.UnwrappedType) -> ComparatorMappingType) where Spec : AppIntents.ResolverSpecification
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
final public class GreaterThanOrEqualToComparator<Property, PropertyType, ComparatorMappingType> : AppIntents.EntityQueryComparator<Property, PropertyType, PropertyType.UnwrappedType, ComparatorMappingType> where Property : AppIntents.EntityProperty<PropertyType>, PropertyType : AppIntents._IntentValue, PropertyType : Swift.Sendable, PropertyType.UnwrappedType : Swift.Comparable {
  public init(mappingTransform: @escaping (PropertyType.UnwrappedType) -> ComparatorMappingType)
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<PropertyType.UnwrappedType> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (PropertyType.UnwrappedType) -> ComparatorMappingType) where Spec : AppIntents.ResolverSpecification
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
final public class LessThanOrEqualToComparator<Property, PropertyType, ComparatorMappingType> : AppIntents.EntityQueryComparator<Property, PropertyType, PropertyType.UnwrappedType, ComparatorMappingType> where Property : AppIntents.EntityProperty<PropertyType>, PropertyType : AppIntents._IntentValue, PropertyType : Swift.Sendable, PropertyType.UnwrappedType : Swift.Comparable {
  public init(mappingTransform: @escaping (PropertyType.UnwrappedType) -> ComparatorMappingType)
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<PropertyType.UnwrappedType> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (PropertyType.UnwrappedType) -> ComparatorMappingType) where Spec : AppIntents.ResolverSpecification
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
final public class IsBetweenComparator<Property, PropertyType, InputType, ComparatorMappingType> : AppIntents.EntityQueryComparator<Property, PropertyType, InputType, ComparatorMappingType> where Property : AppIntents.EntityProperty<PropertyType>, PropertyType : AppIntents._IntentValue, PropertyType : Swift.Sendable, InputType : Swift.Comparable, InputType == PropertyType.UnwrappedType {
  public init(mappingTransform: @escaping (InputType, InputType) -> ComparatorMappingType)
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<InputType> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (InputType, InputType) -> ComparatorMappingType) where Spec : AppIntents.ResolverSpecification
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
final public class ContainsComparator<Property, PropertyType, InputType, ComparatorMappingType> : AppIntents.EntityQueryComparator<Property, PropertyType, InputType, ComparatorMappingType> where Property : AppIntents.EntityProperty<PropertyType>, PropertyType : AppIntents._IntentValue, PropertyType : Swift.Sendable, InputType : AppIntents._IntentValue {
  public init(mappingTransform: @escaping (InputType) -> ComparatorMappingType) where PropertyType : AppIntents._SequenceIntentValue, PropertyType : Swift.Sequence, InputType : Swift.Equatable, InputType == PropertyType.Element
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<PropertyType.UnwrappedType> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (InputType) -> ComparatorMappingType) where PropertyType : AppIntents._SequenceIntentValue, PropertyType : Swift.Sequence, InputType : Swift.Equatable, InputType == PropertyType.Element, Spec : AppIntents.ResolverSpecification
  public init(mappingTransform: @escaping (InputType) -> ComparatorMappingType) where PropertyType : Swift.ExpressibleByNilLiteral, InputType : Swift.Equatable, InputType == PropertyType.UnwrappedType.Element, PropertyType.UnwrappedType : AppIntents._SequenceIntentValue, PropertyType.UnwrappedType : Swift.Sequence
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<PropertyType.UnwrappedType> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (InputType) -> ComparatorMappingType) where PropertyType : Swift.ExpressibleByNilLiteral, InputType : Swift.Equatable, InputType == PropertyType.UnwrappedType.Element, Spec : AppIntents.ResolverSpecification, PropertyType.UnwrappedType : AppIntents._SequenceIntentValue, PropertyType.UnwrappedType : Swift.Sequence
  public init(mappingTransform: @escaping (InputType) -> ComparatorMappingType) where Property : AppIntents.EntityProperty<Swift.String>, PropertyType == Swift.String, InputType == Swift.String
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<Swift.String.UnwrappedType> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (InputType) -> ComparatorMappingType) where Property : AppIntents.EntityProperty<Swift.String>, PropertyType == Swift.String, InputType == Swift.String, Spec : AppIntents.ResolverSpecification
  public init(mappingTransform: @escaping (InputType) -> ComparatorMappingType) where PropertyType : Swift.ExpressibleByNilLiteral, InputType == Swift.String, PropertyType.UnwrappedType == Swift.String
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<Swift.String> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (InputType) -> ComparatorMappingType) where PropertyType : Swift.ExpressibleByNilLiteral, InputType == Swift.String, Spec : AppIntents.ResolverSpecification, PropertyType.UnwrappedType == Swift.String
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public init(mappingTransform: @escaping (InputType) -> ComparatorMappingType) where Property : AppIntents.EntityProperty<Foundation.AttributedString>, PropertyType == Foundation.AttributedString, InputType == Foundation.AttributedString
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<Foundation.AttributedString.UnwrappedType> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (InputType) -> ComparatorMappingType) where Property : AppIntents.EntityProperty<Foundation.AttributedString>, PropertyType == Foundation.AttributedString, InputType == Foundation.AttributedString, Spec : AppIntents.ResolverSpecification
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public init(mappingTransform: @escaping (InputType) -> ComparatorMappingType) where PropertyType : Swift.ExpressibleByNilLiteral, InputType == Foundation.AttributedString, PropertyType.UnwrappedType == Foundation.AttributedString
  @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<Foundation.AttributedString> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (InputType) -> ComparatorMappingType) where PropertyType : Swift.ExpressibleByNilLiteral, InputType == Foundation.AttributedString, Spec : AppIntents.ResolverSpecification, PropertyType.UnwrappedType == Foundation.AttributedString
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
final public class HasPrefixComparator<Property, PropertyType, InputType, ComparatorMappingType> : AppIntents.EntityQueryComparator<Property, PropertyType, InputType, ComparatorMappingType> where Property : AppIntents.EntityProperty<PropertyType>, PropertyType : AppIntents._IntentValue, PropertyType : Swift.Sendable, InputType : AppIntents._IntentValue {
  public init(mappingTransform: @escaping (InputType) -> ComparatorMappingType) where Property : AppIntents.EntityProperty<Swift.String>, PropertyType == Swift.String, InputType == Swift.String
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<Swift.String.UnwrappedType> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (InputType) -> ComparatorMappingType) where Property : AppIntents.EntityProperty<Swift.String>, PropertyType == Swift.String, InputType == Swift.String, Spec : AppIntents.ResolverSpecification
  public init(mappingTransform: @escaping (InputType) -> ComparatorMappingType) where PropertyType : Swift.ExpressibleByNilLiteral, InputType == Swift.String, PropertyType.UnwrappedType == Swift.String
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<Swift.String> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (InputType) -> ComparatorMappingType) where PropertyType : Swift.ExpressibleByNilLiteral, InputType == Swift.String, Spec : AppIntents.ResolverSpecification, PropertyType.UnwrappedType == Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
final public class HasSuffixComparator<Property, PropertyType, InputType, ComparatorMappingType> : AppIntents.EntityQueryComparator<Property, PropertyType, InputType, ComparatorMappingType> where Property : AppIntents.EntityProperty<PropertyType>, PropertyType : AppIntents._IntentValue, PropertyType : Swift.Sendable, InputType : AppIntents._IntentValue {
  public init(mappingTransform: @escaping (InputType) -> ComparatorMappingType) where Property : AppIntents.EntityProperty<Swift.String>, PropertyType == Swift.String, InputType == Swift.String
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<Swift.String.UnwrappedType> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (InputType) -> ComparatorMappingType) where Property : AppIntents.EntityProperty<Swift.String>, PropertyType == Swift.String, InputType == Swift.String, Spec : AppIntents.ResolverSpecification
  public init(mappingTransform: @escaping (InputType) -> ComparatorMappingType) where PropertyType : Swift.ExpressibleByNilLiteral, InputType == Swift.String, PropertyType.UnwrappedType == Swift.String
  public init<Spec>(@AppIntents.ResolverSpecificationBuilder<Swift.String> withResolvers resolvers: @escaping () -> Spec, mappingTransform: @escaping (InputType) -> ComparatorMappingType) where PropertyType : Swift.ExpressibleByNilLiteral, InputType == Swift.String, Spec : AppIntents.ResolverSpecification, PropertyType.UnwrappedType == Swift.String
  @objc deinit
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol AppValue : AppIntents.PersistentlyIdentifiable, AppIntents.TypeDisplayRepresentable, AppIntents._IntentValue, Swift.Sendable {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@_functionBuilder public enum IntentPredictionsBuilder<Intent> where Intent : AppIntents.AppIntent {
  public static func buildExpression<A0>(_ expression: A0) -> A0 where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration
  public static func buildBlock<A0>(_ block: A0) -> A0 where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct TupleIntentPrediction<Intent, T> : AppIntents.IntentPredictionConfiguration where Intent : AppIntents.AppIntent {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.DateComponents {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.DateComponents {
  convenience public init()
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@_alwaysEmitConformanceMetadata public protocol _IntentValue {
  associatedtype ValueType : AppIntents._IntentValue = Self
  associatedtype UnwrappedType : AppIntents._IntentValue = Self
  associatedtype Specification : AppIntents.ResolverSpecification
  static var defaultResolverSpecification: Self.Specification { get }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.Optional : AppIntents._IntentValue where Wrapped : AppIntents._IntentValue {
  public typealias ValueType = Wrapped.ValueType
  public typealias UnwrappedType = Wrapped.UnwrappedType
  public static var defaultResolverSpecification: Wrapped.UnwrappedType.Specification {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Specification = Wrapped.UnwrappedType.Specification
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType : AppIntents.AppEntity {
  @available(macOS, introduced: 13.0, deprecated: 15.0)
  @available(iOS, introduced: 16.0, deprecated: 18.0)
  @available(watchOS, introduced: 9.0, deprecated: 11.0)
  @available(tvOS, introduced: 16.0, deprecated: 18.0)
  @_disfavoredOverload convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  @available(macOS, introduced: 13.0, deprecated: 15.0)
  @available(iOS, introduced: 16.0, deprecated: 18.0)
  @available(watchOS, introduced: 9.0, deprecated: 11.0)
  @available(tvOS, introduced: 16.0, deprecated: 18.0)
  @_disfavoredOverload convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  @available(macOS, introduced: 13.0, deprecated: 15.0)
  @available(iOS, introduced: 16.0, deprecated: 18.0)
  @available(watchOS, introduced: 9.0, deprecated: 11.0)
  @available(tvOS, introduced: 16.0, deprecated: 18.0)
  @_disfavoredOverload convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, Value.ValueType == OptionsProvider.DefaultValue.ValueType
  @available(macOS, introduced: 13.0, deprecated: 15.0)
  @available(iOS, introduced: 16.0, deprecated: 18.0)
  @available(watchOS, introduced: 9.0, deprecated: 11.0)
  @available(tvOS, introduced: 16.0, deprecated: 18.0)
  @_disfavoredOverload convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, Value.ValueType == OptionsProvider.DefaultValue.ValueType
  @available(macOS, introduced: 13.0, deprecated: 15.0)
  @available(iOS, introduced: 16.0, deprecated: 18.0)
  @available(watchOS, introduced: 9.0, deprecated: 11.0)
  @available(tvOS, introduced: 16.0, deprecated: 18.0)
  @_disfavoredOverload convenience public init<Query>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, query: Query) where Query : AppIntents.EntityQuery, Value.ValueType == Query.Entity
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.UnwrappedType : Swift.Collection, Value.ValueType : AppIntents.AppEntity {
  @available(macOS, introduced: 14.0, deprecated: 15.0)
  @available(iOS, introduced: 17.0, deprecated: 18.0)
  @available(watchOS, introduced: 10.0, deprecated: 11.0)
  @available(tvOS, introduced: 17.0, deprecated: 18.0)
  @_disfavoredOverload convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, size: AppIntents.IntentCollectionSize, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  @available(macOS, introduced: 14.0, deprecated: 15.0)
  @available(iOS, introduced: 17.0, deprecated: 18.0)
  @available(watchOS, introduced: 10.0, deprecated: 11.0)
  @available(tvOS, unavailable)
  @_disfavoredOverload convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, size: [AppIntents.IntentWidgetFamily : AppIntents.IntentCollectionSize], inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  @available(macOS, introduced: 14.0, deprecated: 15.0)
  @available(iOS, introduced: 17.0, deprecated: 18.0)
  @available(watchOS, introduced: 10.0, deprecated: 11.0)
  @available(tvOS, introduced: 17.0, deprecated: 18.0)
  @_disfavoredOverload convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, size: AppIntents.IntentCollectionSize, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  @available(macOS, introduced: 14.0, deprecated: 15.0)
  @available(iOS, introduced: 17.0, deprecated: 18.0)
  @available(watchOS, introduced: 10.0, deprecated: 11.0)
  @available(tvOS, unavailable)
  @_disfavoredOverload convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, size: [AppIntents.IntentWidgetFamily : AppIntents.IntentCollectionSize], inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  @available(macOS, introduced: 14.0, deprecated: 15.0)
  @available(iOS, introduced: 17.0, deprecated: 18.0)
  @available(watchOS, introduced: 10.0, deprecated: 11.0)
  @available(tvOS, introduced: 17.0, deprecated: 18.0)
  @_disfavoredOverload convenience public init<Query>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, size: AppIntents.IntentCollectionSize, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, query: Query) where Query : AppIntents.EntityQuery, Value.ValueType == Query.Entity
  @available(macOS, introduced: 14.0, deprecated: 15.0)
  @available(iOS, introduced: 17.0, deprecated: 18.0)
  @available(watchOS, introduced: 10.0, deprecated: 11.0)
  @available(tvOS, unavailable)
  @_disfavoredOverload convenience public init<Query>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, size: [AppIntents.IntentWidgetFamily : AppIntents.IntentCollectionSize], inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, query: Query) where Query : AppIntents.EntityQuery, Value.ValueType == Query.Entity
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public protocol CameraCaptureIntent : AppIntents.SystemIntent {
  associatedtype AppContext : Swift.Decodable, Swift.Encodable, Swift.Sendable = Swift.Never
}
@available(iOS 18.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@available(macOS, unavailable)
extension AppIntents.CameraCaptureIntent {
  public static var appContext: Self.AppContext? {
    get async throws
  }
  public static func updateAppContext(_ newContext: Self.AppContext?) async throws
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas {
  @_marker public protocol PhotosIntent : AppIntents.AssistantSchemas.Model {
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.IntentSchema : AppIntents.AssistantSchemas.PhotosIntent {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema.IntentSchema : AppIntents.AssistantSchemas.PhotosIntent {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.Intent where Self == AppIntents.AssistantSchemas.IntentSchema {
  @_alwaysEmitIntoClient public static var photos: some AppIntents.AssistantSchemas.PhotosIntent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("photos")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.PhotosIntent {
  @_alwaysEmitIntoClient public var createAlbum: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("CreateMediaAlbumIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var openAlbum: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("OpenMediaAlbumIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var updateAlbum: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("UpdateMediaAlbumIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var deleteAlbum: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("DeleteMediaAlbumIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var createAssets: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("CreateMediaAssetsIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var openAsset: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("OpenMediaAssetIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var updateAsset: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("UpdateMediaAssetIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var deleteAssets: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("DeleteMediaAssetsIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var duplicateAssets: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("DuplicateMediaAssetsIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var postToSharedAlbum: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("PostToSharedAlbumIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var addAssetsToAlbum: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("AddMediaAssetsToAlbumIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var removeAssetsFromAlbum: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("RemoveMediaAssetsFromAlbumIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var search: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("SearchMediaIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var updateRecognizedPerson: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("UpdateMediaPersonIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var copyEdits: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("CopyMediaEditsIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var pasteEdits: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("PasteMediaEditsIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var cleanupPhoto: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("CleanupMediaIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var setExposure: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("SetMediaExposureIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var setSaturation: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("SetMediaSaturationIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var setWarmth: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("SetMediaWarmthIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var toggleSuggestedEdits: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("EnhanceMediaIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var setFilter: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("ApplyMediaFilterIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var setDepth: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("SetMediaApertureIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var toggleDepth: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("SetMediaDepthIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var crop: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("CropMediaIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var straighten: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("StraightenMediaIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var setRotation: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("RotateMediaIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas {
  @_marker public protocol PhotosEntity : AppIntents.AssistantSchemas.Model {
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.EntitySchema : AppIntents.AssistantSchemas.PhotosEntity {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema.EntitySchema : AppIntents.AssistantSchemas.PhotosEntity {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.Entity where Self == AppIntents.AssistantSchemas.EntitySchema {
  @_alwaysEmitIntoClient public static var photos: some AppIntents.AssistantSchemas.PhotosEntity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("photos")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.PhotosEntity {
  @_alwaysEmitIntoClient public var asset: some AppIntents.AssistantSchemas.Entity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("PhotoEntity")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var album: some AppIntents.AssistantSchemas.Entity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("PhotoAlbumEntity")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var recognizedPerson: some AppIntents.AssistantSchemas.Entity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("PhotoPersonEntity")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas {
  @_marker public protocol PhotosEnum : AppIntents.AssistantSchemas.Model {
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.EnumSchema : AppIntents.AssistantSchemas.PhotosEnum {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema.EnumSchema : AppIntents.AssistantSchemas.PhotosEnum {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.Enum where Self == AppIntents.AssistantSchemas.EnumSchema {
  @_alwaysEmitIntoClient public static var photos: some AppIntents.AssistantSchemas.PhotosEnum {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EnumSchema("photos")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.PhotosEnum {
  @_alwaysEmitIntoClient public var assetType: some AppIntents.AssistantSchemas.Enum {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EnumSchema("PhotoAssetType")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var albumType: some AppIntents.AssistantSchemas.Enum {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EnumSchema("PhotoAlbumType")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var filterType: some AppIntents.AssistantSchemas.Enum {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EnumSchema("PhotoFilterEffectType")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var rotationDirection: some AppIntents.AssistantSchemas.Enum {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EnumSchema("PhotoRotationDirection")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType : AppIntents.AppEntity, Value.ValueType : AppIntents.AppEnum {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, supportedValues: [Value.ValueType] = Array(Value.ValueType.allCases))
  convenience public init(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, supportedValues: [Value.ValueType] = Array(Value.ValueType.allCases))
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, supportedValues: [Value.ValueType] = Array(Value.ValueType.allCases), @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, supportedValues: [Value.ValueType] = Array(Value.ValueType.allCases), @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, supportedValues: [Value.ValueType] = Array(Value.ValueType.allCases), optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, Value.ValueType == OptionsProvider.DefaultValue.ValueType
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, supportedValues: [Value.ValueType] = Array(Value.ValueType.allCases), optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, Value.ValueType == OptionsProvider.DefaultValue.ValueType
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Date {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Date {
  convenience public init()
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct EntityQuerySort<Entity> where Entity : AppIntents.AppEntity {
  @frozen public enum Ordering {
    case ascending
    case descending
    public static func == (a: AppIntents.EntityQuerySort<Entity>.Ordering, b: AppIntents.EntityQuerySort<Entity>.Ordering) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let by: Swift.PartialKeyPath<Entity>
  public let order: AppIntents.EntityQuerySort<Entity>.Ordering
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct EntityQuerySortableByProperty<Entity> where Entity : AppIntents.AppEntity {
  public init<Property>(_ keyPath: Swift.KeyPath<Entity, Property>) where Property : AppIntents.AnyIntentValue
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public protocol FileEntity : AppIntents.AppEntity where Self.ID == AppIntents.FileEntityIdentifier {
  static var supportedContentTypes: [UniformTypeIdentifiers.UTType] { get }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public struct FileEntityIdentifier : Swift.Sendable, Swift.Hashable, Swift.Equatable, Swift.Codable {
  public static func file(url: Foundation.URL) throws -> AppIntents.FileEntityIdentifier
  public static func draft(identifier: Swift.String) -> AppIntents.FileEntityIdentifier
  public var fileURL: Foundation.URL? {
    get async throws
  }
  public var draftIdentifier: Swift.String? {
    get
  }
  public var isDraft: Swift.Bool {
    get
  }
  public static func == (a: AppIntents.FileEntityIdentifier, b: AppIntents.FileEntityIdentifier) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.FileEntityIdentifier : AppIntents.EntityIdentifierConvertible {
  public static func entityIdentifier(for entityIdentifierString: Swift.String) -> AppIntents.FileEntityIdentifier?
  public var entityIdentifierString: Swift.String {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas {
  @_marker public protocol BooksIntent : AppIntents.AssistantSchemas.Model {
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.IntentSchema : AppIntents.AssistantSchemas.BooksIntent {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema.IntentSchema : AppIntents.AssistantSchemas.BooksIntent {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.Intent where Self == AppIntents.AssistantSchemas.IntentSchema {
  @_alwaysEmitIntoClient public static var books: some AppIntents.AssistantSchemas.BooksIntent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("books")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.BooksIntent {
  @_alwaysEmitIntoClient public var openBook: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("OpenBookIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var playAudiobook: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("PlayAudiobookIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var navigatePage: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("NavigateBookPageIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var updateFontSize: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("UpdateBookFontSizeIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var updateLineSpacing: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("UpdateBookLineSpacingIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var updateCharacterSpacing: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("UpdateCharacterSpacingIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var updateWordSpacing: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("UpdateWordSpacingIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var updateSettings: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("UpdateBookSettingsIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var search: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("SearchLibraryIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas {
  @_marker public protocol BooksEntity : AppIntents.AssistantSchemas.Model {
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.EntitySchema : AppIntents.AssistantSchemas.BooksEntity {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema.EntitySchema : AppIntents.AssistantSchemas.BooksEntity {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.Entity where Self == AppIntents.AssistantSchemas.EntitySchema {
  @_alwaysEmitIntoClient public static var books: some AppIntents.AssistantSchemas.BooksEntity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("books")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.BooksEntity {
  @_alwaysEmitIntoClient public var book: some AppIntents.AssistantSchemas.Entity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("BookEntity")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var audiobook: some AppIntents.AssistantSchemas.Entity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("AudiobookEntity")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var settings: some AppIntents.AssistantSchemas.Entity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("BookSettingsEntity")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas {
  @_marker public protocol BooksEnum : AppIntents.AssistantSchemas.Model {
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.EnumSchema : AppIntents.AssistantSchemas.BooksEnum {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema.EnumSchema : AppIntents.AssistantSchemas.BooksEnum {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.Enum where Self == AppIntents.AssistantSchemas.EnumSchema {
  @_alwaysEmitIntoClient public static var books: some AppIntents.AssistantSchemas.BooksEnum {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EnumSchema("books")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.BooksEnum {
  @_alwaysEmitIntoClient public var contentType: some AppIntents.AssistantSchemas.Enum {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EnumSchema("BookContentType")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var font: some AppIntents.AssistantSchemas.Enum {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EnumSchema("BookFont")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var fontSize: some AppIntents.AssistantSchemas.Enum {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EnumSchema("BookFontSize")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var navigationDirection: some AppIntents.AssistantSchemas.Enum {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EnumSchema("BookNavigationDirection")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var relativeFontChange: some AppIntents.AssistantSchemas.Enum {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EnumSchema("BookRelativeFontChange")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var relativeCharacterSpacingChange: some AppIntents.AssistantSchemas.Enum {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EnumSchema("BookRelativeCharacterSpacingChange")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var relativeLineSpacingChange: some AppIntents.AssistantSchemas.Enum {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EnumSchema("BookRelativeLineSpacingChange")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var relativeWordSpacingChange: some AppIntents.AssistantSchemas.Enum {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EnumSchema("BookRelativeWordSpacingChange")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var theme: some AppIntents.AssistantSchemas.Enum {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EnumSchema("BookTheme")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var pageNavigationSetting: some AppIntents.AssistantSchemas.Enum {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EnumSchema("BookPageNavigationSetting")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentItemCollection<Result> : AppIntents.ResultsCollection where Result : AppIntents._IntentValue {
  public var sections: [AppIntents.IntentItemSection<Result>]
  public var promptLabel: Foundation.LocalizedStringResource?
  public var usesIndexedCollation: Swift.Bool
  public init(promptLabel: Foundation.LocalizedStringResource? = nil, usesIndexedCollation: Swift.Bool = false, @AppIntents.IntentItemSection<Result>.Builder sectionsBuilder: () -> [AppIntents.IntentItemSection<Result>])
  public init(promptLabel: Foundation.LocalizedStringResource? = nil, usesIndexedCollation: Swift.Bool = false, items: [Result]) where Result : AppIntents.DisplayRepresentable
  public init(promptLabel: Foundation.LocalizedStringResource? = nil, usesIndexedCollation: Swift.Bool = false, sections: [AppIntents.IntentItemSection<Result>])
  public var items: [Result.ValueType] {
    get
  }
  public static var empty: AppIntents.IntentItemCollection<Result> {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol ResumeWorkoutIntent : AppIntents.SystemIntent {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter {
  public enum PlacemarkDisplayStyle {
    case name
    case address
    case city
    public static func == (a: AppIntents.IntentParameter<Value>.PlacemarkDisplayStyle, b: AppIntents.IntentParameter<Value>.PlacemarkDisplayStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension CoreLocation.CLPlacemark : AppIntents.DisplayRepresentable, @retroactive Foundation.CustomLocalizedStringResourceConvertible {
  public static var typeDisplayRepresentation: AppIntents.TypeDisplayRepresentation {
    get
  }
  public var displayRepresentation: AppIntents.DisplayRepresentation {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension CoreLocation.CLPlacemark : AppIntents._IntentValue {
  public static var defaultResolverSpecification: AppIntents.EmptyResolverSpecification<CoreLocation.CLPlacemark> {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Specification = AppIntents.EmptyResolverSpecification<CoreLocation.CLPlacemark>
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias UnwrappedType = CoreLocation.CLPlacemark
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ValueType = CoreLocation.CLPlacemark
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == CoreLocation.CLPlacemark {
  final public var displayStyle: AppIntents.IntentParameter<Value>.PlacemarkDisplayStyle? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == CoreLocation.CLPlacemark {
  public var displayStyle: AppIntents.IntentParameter<Value>.PlacemarkDisplayStyle? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.Double : AppIntents._IntentValue {
  public static var defaultResolverSpecification: some AppIntents.ResolverSpecification {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Specification = @_opaqueReturnTypeOf("$sSd10AppIntentsE28defaultResolverSpecificationQrvpZ", 0) __
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias UnwrappedType = Swift.Double
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ValueType = Swift.Double
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.Double : AppIntents.RangeComparableProperty {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct DoubleResolver : AppIntents.RangeCheckingResolver {
  public func resolve(from input: Swift.Double, context: AppIntents.IntentParameterContext<Swift.Double>) async throws -> Swift.Double?
  public static func == (a: AppIntents.DoubleResolver, b: AppIntents.DoubleResolver) -> Swift.Bool
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Input = Swift.Double
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Output = Swift.Double
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct DoubleFromStringResolver : AppIntents.RangeCheckingResolver {
  public func resolve(from input: Swift.String, context: AppIntents.IntentParameterContext<Swift.Double>) async throws -> Swift.Double?
  public static func == (a: AppIntents.DoubleFromStringResolver, b: AppIntents.DoubleFromStringResolver) -> Swift.Bool
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Input = Swift.String
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Output = Swift.Double
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct DoubleFromIntResolver : AppIntents.RangeCheckingResolver {
  public func resolve(from input: Swift.Int, context: AppIntents.IntentParameterContext<Swift.Double>) async throws -> Swift.Double?
  public static func == (a: AppIntents.DoubleFromIntResolver, b: AppIntents.DoubleFromIntResolver) -> Swift.Bool
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Input = Swift.Int
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Output = Swift.Double
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter {
  public enum DoubleControlStyle {
    case stepper
    case field
    case slider
    public static func == (a: AppIntents.IntentParameter<Value>.DoubleControlStyle, b: AppIntents.IntentParameter<Value>.DoubleControlStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public typealias InclusiveRange<Bound> = (lowerBound: Bound, upperBound: Bound) where Bound : Swift.Comparable
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Swift.Double {
  final public var controlStyle: AppIntents.IntentParameter<Value>.DoubleControlStyle? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Swift.Double {
  public var controlStyle: AppIntents.IntentParameter<Value>.DoubleControlStyle? {
    get
  }
  public var inclusiveRange: AppIntents.IntentParameter<Value>.InclusiveRange<Swift.Double>? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol AppEntity : AppIntents.AppValue, AppIntents.DisplayRepresentable, Swift.Identifiable where Self == Self.ValueType, Self.ID : AppIntents.EntityIdentifierConvertible, Self.ID : Swift.Sendable {
  associatedtype DefaultQuery : AppIntents.EntityQuery where Self.ValueType == Self.DefaultQuery.Entity
  static var defaultQuery: Self.DefaultQuery { get }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppEntity {
  public typealias Property = AppIntents.EntityProperty
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppEntity {
  public static var defaultResolverSpecification: AppIntents.EmptyResolverSpecification<Self> {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentParameterSummary<Intent> : AppIntents.ParameterSummary where Intent : AppIntents.AppIntent {
  public init(_ string: AppIntents.ParameterSummaryString<Intent>, table: Swift.String? = nil, @AppIntents.IntentParameterSummary<Intent>.ParameterKeyPathsBuilder _ additionalParameterKeyPaths: () -> [Swift.PartialKeyPath<Intent>])
  public init(_ string: AppIntents.ParameterSummaryString<Intent>, table: Swift.String? = nil)
  public init(@AppIntents.IntentParameterSummary<Intent>.ParameterKeyPathsBuilder _ additionalParameterKeyPaths: () -> [Swift.PartialKeyPath<Intent>])
  public init()
  @_functionBuilder public enum ParameterKeyPathsBuilder {
    public static func buildExpression<ValueType>(_ expression: Swift.KeyPath<Intent, AppIntents.IntentParameter<ValueType>>) -> Swift.PartialKeyPath<Intent> where ValueType : AppIntents._IntentValue, ValueType : Swift.Sendable
    public static func buildBlock(_ blocks: Swift.PartialKeyPath<Intent>...) -> [Swift.PartialKeyPath<Intent>]
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == CoreLocation.CLPlacemark {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == CoreLocation.CLPlacemark {
  convenience public init()
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol PauseWorkoutIntent : AppIntents.SystemIntent {
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType : AppIntents.FileEntity {
  convenience public init(title: Foundation.LocalizedStringResource)
  convenience public init()
}
@_hasMissingDesignatedInitializers @available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
@propertyWrapper final public class IntentParameterDependency<Intent> : @unchecked Swift.Sendable where Intent : AppIntents.AppIntent {
  final public var wrappedValue: AppIntents.IntentProjection<Intent>? {
    get
  }
  @objc deinit
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameterDependency : Swift.Hashable {
  public static func == (lhs: AppIntents.IntentParameterDependency<Intent>, rhs: AppIntents.IntentParameterDependency<Intent>) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  final public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterDependency : Swift.CustomDebugStringConvertible {
  final public var debugDescription: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
@dynamicMemberLookup final public class IntentProjection<Intent> where Intent : AppIntents.AppIntent {
  final public subscript<Value>(dynamicMember keyPath: Swift.KeyPath<Intent, Value>) -> Value.UnwrappedType where Value : AppIntents._IntentValue {
    get
  }
  @objc deinit
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.DynamicOptionsProvider {
  public typealias ParameterDependency = AppIntents.IntentParameterDependency
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentItemSection<Result> where Result : AppIntents._IntentValue {
  public var description: AppIntents.DisplayRepresentation?
  public var items: [AppIntents.IntentItem<Result>]
  public init(items: [AppIntents.IntentItem<Result>])
  @available(*, deprecated, renamed: "init(_:items:)")
  public init(title: Foundation.LocalizedStringResource, items: [AppIntents.IntentItem<Result>])
  @available(macOS 13.3, iOS 16.4, watchOS 9.4, tvOS 16.4, *)
  public init(_ title: Foundation.LocalizedStringResource, items: [AppIntents.IntentItem<Result>])
  @available(macOS 13.3, iOS 16.4, watchOS 9.4, tvOS 16.4, *)
  public init(_ title: Foundation.LocalizedStringResource, items: [Result])
  public init(_ title: Foundation.LocalizedStringResource? = nil, @AppIntents.IntentItem<Result>.Builder itemsBuilder: () -> [AppIntents.IntentItem<Result>])
  public init(_ title: Foundation.LocalizedStringResource, subtitle: Foundation.LocalizedStringResource? = nil, image: AppIntents.DisplayRepresentation.Image? = nil, @AppIntents.IntentItem<Result>.Builder itemsBuilder: () -> [AppIntents.IntentItem<Result>])
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentItemSection {
  @_functionBuilder public enum Builder {
    public static func buildBlock() -> [AppIntents.IntentItemSection<Result>]
    public static func buildBlock(_ sections: AppIntents.IntentItemSection<Result>...) -> [AppIntents.IntentItemSection<Result>]
    public static func buildBlock(_ items: AppIntents.IntentItem<Result>...) -> [AppIntents.IntentItemSection<Result>]
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public protocol AssistantIntent : AppIntents.AppIntent {
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public protocol AssistantEntity : AppIntents.AppEntity {
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public struct ConfirmationConditions : Swift.OptionSet, Swift.Sendable {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let lowConfidenceSource: AppIntents.ConfirmationConditions
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias ArrayLiteralElement = AppIntents.ConfirmationConditions
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Element = AppIntents.ConfirmationConditions
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias RawValue = Swift.Int
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@_functionBuilder public enum AppShortcutsBuilder {
  @_disfavoredOverload public static func buildExpression(_ component: AppIntents.AppShortcut) -> AppIntents.AppShortcut
  @_disfavoredOverload public static func buildBlock(_ components: AppIntents.AppShortcut...) -> [AppIntents.AppShortcut]
}
@available(macOS 14.4, iOS 17.4, watchOS 10.4, tvOS 17.4, visionOS 1.1, *)
extension AppIntents.AppShortcutsBuilder {
  public static func buildExpression(_ component: AppIntents.AppShortcut) -> [AppIntents.AppShortcut]
  public static func buildBlock(_ components: [AppIntents.AppShortcut]...) -> [AppIntents.AppShortcut]
  public static func buildBlock() -> [AppIntents.AppShortcut]
}
@available(macOS 14.4, iOS 17.4, watchOS 10.4, tvOS 17.4, visionOS 1.1, *)
extension AppIntents.AppShortcutsBuilder {
  @_alwaysEmitIntoClient public static func buildOptional(_ component: (any AppIntents._AppShortcutsContentEmitterMarker & AppIntents._AppShortcutsContentMarker & AppIntents._LimitedAvailabilityAppShortcutsContentMarker)?) -> [AppIntents.AppShortcut] {
        if let component {
             
            (component as! LimitedAvailabilityAppShortcuts).appShortcuts
        } else {
            []
        }
    }
}
@available(macOS 14.4, iOS 17.4, watchOS 10.4, tvOS 17.4, visionOS 1.1, *)
extension AppIntents.AppShortcutsBuilder {
  @available(*, unavailable, message: "if statements in an AppShortcutsBuilder can only be used with #available clauses")
  public static func buildOptional<A>(_ appShortcuts: A?) -> [AppIntents.AppShortcut] where A : AppIntents._AppShortcutsContentMarker
  @available(*, unavailable, message: "if statements in an AppShortcutsBuilder can only be used with #available clauses")
  public static func buildOptional(_ appShortcuts: [AppIntents.AppShortcut]?) -> [AppIntents.AppShortcut]
  @_disfavoredOverload public static func buildOptional(_ component: (any AppIntents._AppShortcutsContentMarker & AppIntents._LimitedAvailabilityAppShortcutsContentMarker)?) -> [AppIntents.AppShortcut]
  public static func buildLimitedAvailability(_ components: [AppIntents.AppShortcut]) -> any AppIntents._AppShortcutsContentMarker & AppIntents._LimitedAvailabilityAppShortcutsContentMarker
}
@available(macOS 14.4, iOS 17.4, watchOS 10.4, tvOS 17.4, visionOS 1.1, *)
public protocol AppShortcutsContent {
  var appShortcuts: [AppIntents.AppShortcut] { get }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@_marker public protocol _AppShortcutsContentMarker {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@_marker public protocol _AppShortcutsContentEmitterMarker {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@_marker public protocol _LimitedAvailabilityAppShortcutsContentMarker {
}
@available(macOS 14.4, iOS 17.4, watchOS 10.4, tvOS 17.4, visionOS 1.1, *)
@usableFromInline
@frozen internal struct LimitedAvailabilityAppShortcuts : AppIntents.AppShortcutsContent, AppIntents._AppShortcutsContentMarker, AppIntents._AppShortcutsContentEmitterMarker, AppIntents._LimitedAvailabilityAppShortcutsContentMarker {
  @usableFromInline
  internal var appShortcuts: [AppIntents.AppShortcut]
  @usableFromInline
  internal init(_ appShortcuts: [AppIntents.AppShortcut])
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.URLRepresentableIntent where Self : AppIntents.OpenIntent, Self.Value : AppIntents.URLRepresentableEntity {
  public static var urlRepresentation: Self.URLRepresentation {
    get
  }
  public func perform() async throws -> Swift.Never
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.URLRepresentableIntent where Self : AppIntents.OpenIntent, Self.Value : AppIntents.URLRepresentableEnum {
  public static var urlRepresentation: Self.URLRepresentation {
    get
  }
  public func perform() async throws -> Swift.Never
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext {
  public func requestValue(_ dialog: AppIntents.IntentDialog? = nil) async throws -> Value.ValueType
  public func requestDisambiguation(among itemsToDisambiguate: [Value.ValueType], dialog: AppIntents.IntentDialog? = nil) async throws -> Value.ValueType
  public func requestConfirmation(for itemToConfirm: Value.ValueType, dialog: AppIntents.IntentDialog? = nil) async throws -> Swift.Bool
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext {
  public func needsValueError(_ dialog: AppIntents.IntentDialog? = nil) -> AppIntents.AppIntentError
  public func needsDisambiguationError(among itemsToDisambiguate: [Value.ValueType], dialog: AppIntents.IntentDialog? = nil) -> AppIntents.AppIntentError
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
public struct RelevantContext {
  public static func date(_ exact: Foundation.Date) -> AppIntents.RelevantContext
  public static func date(from: Foundation.Date, to: Foundation.Date) -> AppIntents.RelevantContext
  @available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
  @available(visionOS, unavailable)
  public static func location(_ exact: CoreLocation.CLRegion) -> AppIntents.RelevantContext
  public static func location(inferred: AppIntents.RelevantContext.InferredLocation) -> AppIntents.RelevantContext
  public struct InferredLocation {
    public static var home: AppIntents.RelevantContext.InferredLocation {
      get
    }
    public static var work: AppIntents.RelevantContext.InferredLocation {
      get
    }
    public static var school: AppIntents.RelevantContext.InferredLocation {
      get
    }
    public static var commute: AppIntents.RelevantContext.InferredLocation {
      get
    }
  }
  public static func sleep(_ condition: AppIntents.RelevantContext.SleepCondition) -> AppIntents.RelevantContext
  public struct SleepCondition {
    public static var wakeup: AppIntents.RelevantContext.SleepCondition {
      get
    }
    public static var bedtime: AppIntents.RelevantContext.SleepCondition {
      get
    }
  }
  public static func fitness(_ condition: AppIntents.RelevantContext.FitnessCondition) -> AppIntents.RelevantContext
  public struct FitnessCondition {
    public static var workoutActive: AppIntents.RelevantContext.FitnessCondition {
      get
    }
    public static var activityRingsIncomplete: AppIntents.RelevantContext.FitnessCondition {
      get
    }
  }
  public static func hardware(headphones: AppIntents.RelevantContext.HeadphonesCondition) -> AppIntents.RelevantContext
  public struct HeadphonesCondition {
    public static var connected: AppIntents.RelevantContext.HeadphonesCondition {
      get
    }
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol CustomIntentMigratedAppIntent : AppIntents.AppIntent {
  static var intentClassName: Swift.String { get }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.CustomIntentMigratedAppIntent {
  public static var persistentIdentifier: Swift.String {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType : AppIntents.AppEnum {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, supportedValues: [Value.ValueType] = Array(Value.ValueType.allCases))
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, supportedValues: [Value.ValueType] = Array(Value.ValueType.allCases), @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, supportedValues: [Value.ValueType] = Array(Value.ValueType.allCases), optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, Value.ValueType == OptionsProvider.DefaultValue.ValueType
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType : AppIntents.AppEnum {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, supportedValues: [Value.ValueType] = Array(Value.ValueType.allCases))
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, supportedValues: [Value.ValueType] = Array(Value.ValueType.allCases), @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, supportedValues: [Value.ValueType] = Array(Value.ValueType.allCases), optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, Value.ValueType == OptionsProvider.DefaultValue.ValueType
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == AppIntents.IntentPerson {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, mode: _const AppIntents.IntentPerson.ParameterMode = .contact, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, mode: _const AppIntents.IntentPerson.ParameterMode = .contact, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, mode: _const AppIntents.IntentPerson.ParameterMode = .contact, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentPerson
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, mode: _const AppIntents.IntentPerson.ParameterMode = .contact, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentPerson
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.UnwrappedType : Swift.Collection, Value.ValueType == AppIntents.IntentPerson {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, mode: _const AppIntents.IntentPerson.ParameterMode = .contact, size: AppIntents.IntentCollectionSize, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  @available(tvOS, unavailable)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, mode: _const AppIntents.IntentPerson.ParameterMode = .contact, size: [AppIntents.IntentWidgetFamily : AppIntents.IntentCollectionSize], inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == AppIntents.IntentPerson {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, mode: _const AppIntents.IntentPerson.ParameterMode = .contact, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, mode: _const AppIntents.IntentPerson.ParameterMode = .contact, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, mode: _const AppIntents.IntentPerson.ParameterMode = .contact, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentPerson
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, mode: _const AppIntents.IntentPerson.ParameterMode = .contact, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentPerson
  convenience public init(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, mode: _const AppIntents.IntentPerson.ParameterMode = .contact, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, mode: _const AppIntents.IntentPerson.ParameterMode = .contact, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, mode: _const AppIntents.IntentPerson.ParameterMode = .contact, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentPerson
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, mode: _const AppIntents.IntentPerson.ParameterMode = .contact, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentPerson
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.UnwrappedType : Swift.Collection, Value.ValueType == AppIntents.IntentPerson {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, mode: _const AppIntents.IntentPerson.ParameterMode = .contact, size: AppIntents.IntentCollectionSize, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  @available(tvOS, unavailable)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, mode: _const AppIntents.IntentPerson.ParameterMode = .contact, size: [AppIntents.IntentWidgetFamily : AppIntents.IntentCollectionSize], inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, mode: _const AppIntents.IntentPerson.ParameterMode = .contact, size: AppIntents.IntentCollectionSize, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  @available(tvOS, unavailable)
  convenience public init(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, mode: _const AppIntents.IntentPerson.ParameterMode = .contact, size: [AppIntents.IntentWidgetFamily : AppIntents.IntentCollectionSize], inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct AppIntentError : Swift.Error {
  public static var restartPerform: AppIntents.AppIntentError {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.AppIntentError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct EntityQueryProperties<Entity, ComparatorMappingType> where Entity : AppIntents.AppEntity {
  public init(@AppIntents.EntityQueryPropertiesBuilder<Entity, ComparatorMappingType> properties: () -> [AppIntents.EntityQueryPropertyDeclaration<Entity, ComparatorMappingType>])
  public subscript(index: Swift.Int) -> AppIntents.EntityQueryPropertyDeclaration<Entity, ComparatorMappingType> {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@_functionBuilder public enum EntityQueryPropertiesBuilder<Entity, ComparatorMappingType> where Entity : AppIntents.AppEntity {
  public static func buildExpression(_ expression: AppIntents.EntityQueryPropertyDeclaration<Entity, ComparatorMappingType>) -> AppIntents.EntityQueryPropertyDeclaration<Entity, ComparatorMappingType>
  public static func buildBlock(_ components: AppIntents.EntityQueryPropertyDeclaration<Entity, ComparatorMappingType>...) -> [AppIntents.EntityQueryPropertyDeclaration<Entity, ComparatorMappingType>]
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.AppIntentError : Foundation.CustomLocalizedStringResourceConvertible {
  public var localizedStringResource: Foundation.LocalizedStringResource {
    get
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.AppIntentError {
  public enum UserActionRequired {
    public static let signin: AppIntents.AppIntentError
    public static let accountSetup: AppIntents.AppIntentError
    public static let confirmation: AppIntents.AppIntentError
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.AppIntentError {
  public enum PermissionRequired {
    public static let siri: AppIntents.AppIntentError
    public static let localNetwork: AppIntents.AppIntentError
    public static let bluetooth: AppIntents.AppIntentError
    public static let photos: AppIntents.AppIntentError
    public static let contacts: AppIntents.AppIntentError
    public static func location(precise: Swift.Bool = false) -> AppIntents.AppIntentError
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.AppIntentError {
  public enum Unrecoverable {
    public static let networkFailure: AppIntents.AppIntentError
    public static let partialFailure: AppIntents.AppIntentError
    public static let notAllowed: AppIntents.AppIntentError
    public static let unknown: AppIntents.AppIntentError
    public static let unsupportedOnDevice: AppIntents.AppIntentError
    public static let featureCurrentlyRestricted: AppIntents.AppIntentError
    public static let entityNotFound: AppIntents.AppIntentError
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.AppIntentError : Swift.Equatable {
  public static func == (lhs: AppIntents.AppIntentError, rhs: AppIntents.AppIntentError) -> Swift.Bool
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol AppShortcutsProvider {
  @AppIntents.AppShortcutsBuilder static var appShortcuts: [AppIntents.AppShortcut] { get }
  static var shortcutTileColor: AppIntents.ShortcutTileColor { get }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppShortcutsProvider {
  public static var shortcutTileColor: AppIntents.ShortcutTileColor {
    get
  }
  public static func updateAppShortcutParameters()
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.AppShortcutsProvider {
  public static var negativePhrases: AppIntents.NegativeAppShortcutPhrases {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitAcceleration> {
  public enum Acceleration {
    case gravity
    case metersPerSecondSquared
    public static func == (a: AppIntents.IntentParameter<Value>.Acceleration, b: AppIntents.IntentParameter<Value>.Acceleration) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter.Acceleration : Swift.CaseIterable {
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias AllCases = [AppIntents.IntentParameter<Value>.Acceleration]
  nonisolated public static var allCases: [AppIntents.IntentParameter<Value>.Acceleration] {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitAngle> {
  public enum Angle {
    case arcMinutes
    case arcSeconds
    case degrees
    case gradians
    case radians
    case revolutions
    public static func == (a: AppIntents.IntentParameter<Value>.Angle, b: AppIntents.IntentParameter<Value>.Angle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter.Angle : Swift.CaseIterable {
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias AllCases = [AppIntents.IntentParameter<Value>.Angle]
  nonisolated public static var allCases: [AppIntents.IntentParameter<Value>.Angle] {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitArea> {
  public enum Area {
    case acres
    case ares
    case hectares
    case squareCentimeters
    case squareFeet
    case squareInches
    case squareKilometers
    case squareMegameters
    case squareMeters
    case squareMicrometers
    case squareMiles
    case squareMillimeters
    case squareNanometers
    case squareYards
    public static func == (a: AppIntents.IntentParameter<Value>.Area, b: AppIntents.IntentParameter<Value>.Area) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter.Area : Swift.CaseIterable {
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias AllCases = [AppIntents.IntentParameter<Value>.Area]
  nonisolated public static var allCases: [AppIntents.IntentParameter<Value>.Area] {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitConcentrationMass> {
  public enum ConcentrationMass {
    case gramsPerLiter
    case milligramsPerDeciliter
    public static func == (a: AppIntents.IntentParameter<Value>.ConcentrationMass, b: AppIntents.IntentParameter<Value>.ConcentrationMass) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter.ConcentrationMass : Swift.CaseIterable {
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias AllCases = [AppIntents.IntentParameter<Value>.ConcentrationMass]
  nonisolated public static var allCases: [AppIntents.IntentParameter<Value>.ConcentrationMass] {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitDispersion> {
  public enum Dispersion {
    case partsPerMillion
    public static func == (a: AppIntents.IntentParameter<Value>.Dispersion, b: AppIntents.IntentParameter<Value>.Dispersion) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter.Dispersion : Swift.CaseIterable {
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias AllCases = [AppIntents.IntentParameter<Value>.Dispersion]
  nonisolated public static var allCases: [AppIntents.IntentParameter<Value>.Dispersion] {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitDuration> {
  public enum Duration {
    case hours
    case microseconds
    case milliseconds
    case minutes
    case nanoseconds
    case picoseconds
    case seconds
    public static func == (a: AppIntents.IntentParameter<Value>.Duration, b: AppIntents.IntentParameter<Value>.Duration) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter.Duration : Swift.CaseIterable {
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias AllCases = [AppIntents.IntentParameter<Value>.Duration]
  nonisolated public static var allCases: [AppIntents.IntentParameter<Value>.Duration] {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitElectricCharge> {
  public enum ElectricCharge {
    case ampereHours
    case coulombs
    case kiloampereHours
    case megaampereHours
    case microampereHours
    case milliampereHours
    public static func == (a: AppIntents.IntentParameter<Value>.ElectricCharge, b: AppIntents.IntentParameter<Value>.ElectricCharge) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter.ElectricCharge : Swift.CaseIterable {
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias AllCases = [AppIntents.IntentParameter<Value>.ElectricCharge]
  nonisolated public static var allCases: [AppIntents.IntentParameter<Value>.ElectricCharge] {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitElectricCurrent> {
  public enum ElectricCurrent {
    case amperes
    case kiloamperes
    case megaamperes
    case microamperes
    case milliamperes
    public static func == (a: AppIntents.IntentParameter<Value>.ElectricCurrent, b: AppIntents.IntentParameter<Value>.ElectricCurrent) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter.ElectricCurrent : Swift.CaseIterable {
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias AllCases = [AppIntents.IntentParameter<Value>.ElectricCurrent]
  nonisolated public static var allCases: [AppIntents.IntentParameter<Value>.ElectricCurrent] {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitElectricPotentialDifference> {
  public enum ElectricPotentialDifference {
    case kilovolts
    case megavolts
    case microvolts
    case millivolts
    case volts
    public static func == (a: AppIntents.IntentParameter<Value>.ElectricPotentialDifference, b: AppIntents.IntentParameter<Value>.ElectricPotentialDifference) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter.ElectricPotentialDifference : Swift.CaseIterable {
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias AllCases = [AppIntents.IntentParameter<Value>.ElectricPotentialDifference]
  nonisolated public static var allCases: [AppIntents.IntentParameter<Value>.ElectricPotentialDifference] {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitElectricResistance> {
  public enum ElectricResistance {
    case kiloohms
    case megaohms
    case microohms
    case milliohms
    case ohms
    public static func == (a: AppIntents.IntentParameter<Value>.ElectricResistance, b: AppIntents.IntentParameter<Value>.ElectricResistance) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter.ElectricResistance : Swift.CaseIterable {
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias AllCases = [AppIntents.IntentParameter<Value>.ElectricResistance]
  nonisolated public static var allCases: [AppIntents.IntentParameter<Value>.ElectricResistance] {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitEnergy> {
  public enum Energy {
    case calories
    case joules
    case kilocalories
    case kilojoules
    case kilowattHours
    public static func == (a: AppIntents.IntentParameter<Value>.Energy, b: AppIntents.IntentParameter<Value>.Energy) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter.Energy : Swift.CaseIterable {
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias AllCases = [AppIntents.IntentParameter<Value>.Energy]
  nonisolated public static var allCases: [AppIntents.IntentParameter<Value>.Energy] {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitFrequency> {
  public enum Frequency {
    case framesPerSecond
    case gigahertz
    case hertz
    case kilohertz
    case megahertz
    case microhertz
    case millihertz
    case nanohertz
    case terahertz
    public static func == (a: AppIntents.IntentParameter<Value>.Frequency, b: AppIntents.IntentParameter<Value>.Frequency) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter.Frequency : Swift.CaseIterable {
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias AllCases = [AppIntents.IntentParameter<Value>.Frequency]
  nonisolated public static var allCases: [AppIntents.IntentParameter<Value>.Frequency] {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitFuelEfficiency> {
  public enum FuelEfficiency {
    case litersPer100Kilometers
    case milesPerGallon
    case milesPerImperialGallon
    public static func == (a: AppIntents.IntentParameter<Value>.FuelEfficiency, b: AppIntents.IntentParameter<Value>.FuelEfficiency) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter.FuelEfficiency : Swift.CaseIterable {
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias AllCases = [AppIntents.IntentParameter<Value>.FuelEfficiency]
  nonisolated public static var allCases: [AppIntents.IntentParameter<Value>.FuelEfficiency] {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitIlluminance> {
  public enum Illuminance {
    case lux
    public static func == (a: AppIntents.IntentParameter<Value>.Illuminance, b: AppIntents.IntentParameter<Value>.Illuminance) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter.Illuminance : Swift.CaseIterable {
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias AllCases = [AppIntents.IntentParameter<Value>.Illuminance]
  nonisolated public static var allCases: [AppIntents.IntentParameter<Value>.Illuminance] {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitInformationStorage> {
  public enum InformationStorage {
    case bits
    case bytes
    case exabits
    case exabytes
    case exbibits
    case exbibytes
    case gibibits
    case gibibytes
    case gigabits
    case gigabytes
    case kibibits
    case kibibytes
    case kilobits
    case kilobytes
    case mebibits
    case mebibytes
    case megabits
    case megabytes
    case nibbles
    case pebibits
    case pebibytes
    case petabits
    case petabytes
    case tebibits
    case tebibytes
    case terabits
    case terabytes
    case yobibits
    case yobibytes
    case yottabits
    case yottabytes
    case zebibits
    case zebibytes
    case zettabits
    case zettabytes
    public static func == (a: AppIntents.IntentParameter<Value>.InformationStorage, b: AppIntents.IntentParameter<Value>.InformationStorage) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter.InformationStorage : Swift.CaseIterable {
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias AllCases = [AppIntents.IntentParameter<Value>.InformationStorage]
  nonisolated public static var allCases: [AppIntents.IntentParameter<Value>.InformationStorage] {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitLength> {
  public enum Length {
    case astronomicalUnits
    case centimeters
    case decameters
    case decimeters
    case fathoms
    case feet
    case furlongs
    case hectometers
    case inches
    case kilometers
    case lightyears
    case megameters
    case meters
    case micrometers
    case miles
    case millimeters
    case nanometers
    case nauticalMiles
    case parsecs
    case picometers
    case scandinavianMiles
    case yards
    public static func == (a: AppIntents.IntentParameter<Value>.Length, b: AppIntents.IntentParameter<Value>.Length) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter.Length : Swift.CaseIterable {
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias AllCases = [AppIntents.IntentParameter<Value>.Length]
  nonisolated public static var allCases: [AppIntents.IntentParameter<Value>.Length] {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitMass> {
  public enum Mass {
    case carats
    case centigrams
    case decigrams
    case grams
    case kilograms
    case metricTons
    case micrograms
    case milligrams
    case nanograms
    case ounces
    case ouncesTroy
    case picograms
    case pounds
    case shortTons
    case slugs
    case stones
    public static func == (a: AppIntents.IntentParameter<Value>.Mass, b: AppIntents.IntentParameter<Value>.Mass) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter.Mass : Swift.CaseIterable {
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias AllCases = [AppIntents.IntentParameter<Value>.Mass]
  nonisolated public static var allCases: [AppIntents.IntentParameter<Value>.Mass] {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitPower> {
  public enum Power {
    case femtowatts
    case gigawatts
    case horsepower
    case kilowatts
    case megawatts
    case microwatts
    case milliwatts
    case nanowatts
    case picowatts
    case terawatts
    case watts
    public static func == (a: AppIntents.IntentParameter<Value>.Power, b: AppIntents.IntentParameter<Value>.Power) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter.Power : Swift.CaseIterable {
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias AllCases = [AppIntents.IntentParameter<Value>.Power]
  nonisolated public static var allCases: [AppIntents.IntentParameter<Value>.Power] {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitPressure> {
  public enum Pressure {
    case bars
    case gigapascals
    case hectopascals
    case inchesOfMercury
    case kilopascals
    case megapascals
    case millibars
    case millimetersOfMercury
    case newtonsPerMetersSquared
    case poundsForcePerSquareInch
    public static func == (a: AppIntents.IntentParameter<Value>.Pressure, b: AppIntents.IntentParameter<Value>.Pressure) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter.Pressure : Swift.CaseIterable {
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias AllCases = [AppIntents.IntentParameter<Value>.Pressure]
  nonisolated public static var allCases: [AppIntents.IntentParameter<Value>.Pressure] {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitSpeed> {
  public enum Speed {
    case kilometersPerHour
    case knots
    case metersPerSecond
    case milesPerHour
    public static func == (a: AppIntents.IntentParameter<Value>.Speed, b: AppIntents.IntentParameter<Value>.Speed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter.Speed : Swift.CaseIterable {
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias AllCases = [AppIntents.IntentParameter<Value>.Speed]
  nonisolated public static var allCases: [AppIntents.IntentParameter<Value>.Speed] {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitTemperature> {
  public enum Temperature {
    case celsius
    case fahrenheit
    case kelvin
    public static func == (a: AppIntents.IntentParameter<Value>.Temperature, b: AppIntents.IntentParameter<Value>.Temperature) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter.Temperature : Swift.CaseIterable {
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias AllCases = [AppIntents.IntentParameter<Value>.Temperature]
  nonisolated public static var allCases: [AppIntents.IntentParameter<Value>.Temperature] {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitVolume> {
  public enum Volume {
    case acreFeet
    case bushels
    case centiliters
    case cubicCentimeters
    case cubicDecimeters
    case cubicFeet
    case cubicInches
    case cubicKilometers
    case cubicMeters
    case cubicMiles
    case cubicMillimeters
    case cubicYards
    case cups
    case deciliters
    case fluidOunces
    case gallons
    case imperialFluidOunces
    case imperialGallons
    case imperialPints
    case imperialQuarts
    case imperialTablespoons
    case imperialTeaspoons
    case kiloliters
    case liters
    case megaliters
    case metricCups
    case milliliters
    case pints
    case quarts
    case tablespoons
    case teaspoons
    public static func == (a: AppIntents.IntentParameter<Value>.Volume, b: AppIntents.IntentParameter<Value>.Volume) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter.Volume : Swift.CaseIterable {
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias AllCases = [AppIntents.IntentParameter<Value>.Volume]
  nonisolated public static var allCases: [AppIntents.IntentParameter<Value>.Volume] {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol _SupportsAppDependencies {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents._SupportsAppDependencies {
  public typealias Dependency = AppIntents.AppDependency
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentPrediction<Intent, T> : AppIntents.IntentPredictionConfiguration where Intent : AppIntents.AppIntent {
  public init(displayRepresentation: @escaping () -> AppIntents.DisplayRepresentation) where T == ()
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
public struct NegativeAppShortcutPhrase : Swift.ExpressibleByStringInterpolation {
  public init(_ phraseKey: Swift.String)
  public init(stringLiteral value: Swift.StringLiteralType)
  public init(stringInterpolation: AppIntents.NegativeAppShortcutPhrase.StringInterpolation)
  public struct StringInterpolation : Swift.StringInterpolationProtocol {
    public init(literalCapacity: Swift.Int, interpolationCount: Swift.Int)
    public mutating func appendLiteral(_ literal: Swift.String)
    public mutating func appendInterpolation(_ token: AppIntents.AppShortcutPhraseToken)
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias StringLiteralType = Swift.String
  }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.StringLiteralType
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias StringLiteralType = Swift.StringLiteralType
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias UnicodeScalarLiteralType = Swift.StringLiteralType
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
public struct NegativeAppShortcutPhrases {
  public init(phrases: [AppIntents.NegativeAppShortcutPhrase])
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == AppIntents.IntentPaymentMethod {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == AppIntents.IntentPaymentMethod {
  convenience public init()
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
@objc public protocol _ViewBridgeLoader {
  @objc static func loadBridge()
}
@available(macOS 15.2, iOS 18.2, watchOS 11.2, tvOS 18.2, visionOS 2.2, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Calendar.RecurrenceRule {
  convenience public init(title: Foundation.LocalizedStringResource)
  convenience public init()
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentDonationMatchingPredicate {
  public static func donationIdentifier(_ identifier: AppIntents.IntentDonationIdentifier) -> AppIntents.IntentDonationMatchingPredicate
  public static func entityIdentifier(_ identifier: AppIntents.EntityIdentifier) -> AppIntents.IntentDonationMatchingPredicate
  public static func intentType(_ intentType: any AppIntents.AppIntent.Type, entityIdentifier: AppIntents.EntityIdentifier? = nil) -> AppIntents.IntentDonationMatchingPredicate
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentDonationManager {
  public static var shared: AppIntents.IntentDonationManager {
    get
  }
  @discardableResult
  public func donate(intent: some AppIntent) async throws -> AppIntents.IntentDonationIdentifier
  @discardableResult
  public func donate(intent: some AppIntent, result: some IntentResult) async throws -> AppIntents.IntentDonationIdentifier
  @discardableResult
  public func donate(intent: some AppIntent) -> AppIntents.IntentDonationIdentifier
  @discardableResult
  public func donate(intent: some AppIntent, result: some IntentResult) -> AppIntents.IntentDonationIdentifier
  @discardableResult
  public func deleteDonations(matching predicate: AppIntents.IntentDonationMatchingPredicate) async throws -> [AppIntents.IntentDonationIdentifier]
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@_functionBuilder public enum ParameterSummaryCaseBuilder<Intent, Value> where Intent : AppIntents.AppIntent, Value : AppIntents._IntentValue {
  public static func buildExpression<C0>(_ expression: C0) -> C0 where Intent == C0.Intent, Value == C0.Value, C0 : AppIntents._ParameterSummarySwitchCase
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.Never : AppIntents.AppIntent {
  public static var title: Foundation.LocalizedStringResource
  public init()
  public func perform() async throws -> AppIntents.IntentResultContainer<Swift.Never, Swift.Never, Swift.Never, Swift.Never>
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias PerformResult = AppIntents.IntentResultContainer<Swift.Never, Swift.Never, Swift.Never, Swift.Never>
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias SummaryContent = @_opaqueReturnTypeOf("$s10AppIntents0A6IntentPAAE16parameterSummaryQrvpZ", 0) __<Swift.Never>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.Never : AppIntents._IntentValue, AppIntents.ParameterSummary {
  public typealias Intent = Swift.Never
  public static var defaultResolverSpecification: AppIntents.EmptyResolverSpecification<Swift.Never> {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Specification = AppIntents.EmptyResolverSpecification<Swift.Never>
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias UnwrappedType = Swift.Never
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ValueType = Swift.Never
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct ParameterSummaryTupleCaseCondition<Intent, Value, ValueType> : AppIntents._ParameterSummarySwitchCase where Intent : AppIntents.AppIntent, Value : AppIntents._IntentValue {
  public typealias Summary = Swift.Never
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Swift.String {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, inputOptions: Swift.String.IntentInputOptions? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, inputOptions: Swift.String.IntentInputOptions? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, inputOptions: Swift.String.IntentInputOptions? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Swift.String
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, inputOptions: Swift.String.IntentInputOptions? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Swift.String
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Swift.String {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, inputOptions: Swift.String.IntentInputOptions? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, inputOptions: Swift.String.IntentInputOptions? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, inputOptions: Swift.String.IntentInputOptions? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Swift.String
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, inputOptions: Swift.String.IntentInputOptions? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Swift.String
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@_alwaysEmitConformanceMetadata public protocol DynamicOptionsProvider : AppIntents._SupportsAppDependencies {
  associatedtype Result : AppIntents.ResultsCollection
  associatedtype DefaultValue : AppIntents._IntentValue = Self.Result.Result where Self.DefaultValue.ValueType == Self.Result.Result.ValueType
  func results() async throws -> Self.Result
  func defaultResult() async -> Self.DefaultValue?
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.DynamicOptionsProvider {
  public typealias ItemCollection = AppIntents.IntentItemCollection
  public typealias ItemSection<R> = AppIntents.IntentItemSection<R> where R == Self.Result.Result
  public typealias Item<R> = AppIntents.IntentItem<R> where R == Self.Result.Result
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.DynamicOptionsProvider {
  public func defaultResult() async -> Self.DefaultValue?
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType : AppIntents.AppEnum {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType : AppIntents.AppEnum {
  convenience public init()
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentDialog : Swift.ExpressibleByStringInterpolation, Swift.Sendable {
  public init(_ string: Foundation.LocalizedStringResource)
  public init(full: Foundation.LocalizedStringResource, supporting: Foundation.LocalizedStringResource)
  @available(macOS 14.2, iOS 17.2, watchOS 10.2, tvOS 17.2, *)
  public init(full: Foundation.LocalizedStringResource, systemImageName: Swift.String)
  @available(macOS 14.2, iOS 17.2, watchOS 10.2, tvOS 17.2, *)
  public init(full: Foundation.LocalizedStringResource, supporting: Foundation.LocalizedStringResource, systemImageName: Swift.String)
  @_semantics("localization_key.init_literal") public init(stringLiteral value: Swift.String)
  @_semantics("localization_key.init_interpolation") public init(stringInterpolation: Swift.String.LocalizationValue.StringInterpolation)
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias StringInterpolation = Swift.String.LocalizationValue.StringInterpolation
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias StringLiteralType = Swift.String
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias UnicodeScalarLiteralType = Swift.String
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents._IntentValue {
  public var asNLGValue: Swift.String {
    get
  }
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
@available(tvOS, unavailable)
extension Foundation.NSUserActivity {
  public func widgetConfigurationIntent<Intent>(of intentType: Intent.Type = Intent.self) -> Intent? where Intent : AppIntents.WidgetConfigurationIntent
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
public protocol StartDiveIntent : AppIntents.SystemIntent {
}
@available(macOS 15.2, iOS 18.2, watchOS 11.2, tvOS 18.2, visionOS 2.2, *)
public protocol AppEntityAnnotatable {
  var appEntityIdentifier: AppIntents.EntityIdentifier? { get set }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppIntent {
  @available(*, deprecated, message: "Please use requestConfirmation(conditions:actionName:dialog:) or requestConfirmation(conditions:actionName:dialog:showDialogAsPrompt:content:)")
  public func requestConfirmation<Result>(result: Result, confirmationActionName: AppIntents.ConfirmationActionName = .`continue`, showPrompt: Swift.Bool = true) async throws where Result : AppIntents.IntentResult
  public func requestConfirmation() async throws
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.AppIntent {
  public func requestConfirmation(conditions: AppIntents.ConfirmationConditions = [], actionName: AppIntents.ConfirmationActionName = .`continue`, dialog: AppIntents.IntentDialog) async throws
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppIntent {
  @available(*, deprecated, message: "Please use requestConfirmation(conditions:actionName:dialog:) or requestConfirmation(conditions:actionName:dialog:showDialogAsPrompt:content:)")
  public func requestConfirmation<Result>(output: Result, confirmationActionName: AppIntents.ConfirmationActionName = .`continue`, showPrompt: Swift.Bool = true) async throws where Result : AppIntents.IntentResult
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol IntentResult : Swift.Sendable {
  associatedtype Value : AppIntents._IntentValue = Swift.Never
  associatedtype Snippet = Swift.Never
  associatedtype Dialog = Swift.Never
  var value: Self.Value? { get }
  @available(iOS, deprecated: 18.2)
  @available(watchOS, deprecated: 11.2)
  @available(tvOS, deprecated: 18.2)
  @available(visionOS, deprecated: 2.2)
  associatedtype OpensAppIntent : AppIntents.AppIntent = Swift.Never
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol ReturnsValue<Value> : AppIntents.IntentResult {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol OpensIntent : AppIntents.IntentResult {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol ProvidesDialog : AppIntents.IntentResult where Self.Dialog == AppIntents.IntentDialog {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol ShowsSnippetView : AppIntents.IntentResult where Self.Snippet == AppIntents._SnippetViewContainer {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentResultContainer<Value, OpensAppIntent, Snippet, Dialog> : AppIntents.IntentResult, @unchecked Swift.Sendable where Value : AppIntents._IntentValue, OpensAppIntent : AppIntents.AppIntent {
  public var value: Value?
  public var dialog: AppIntents.IntentDialog?
  @available(iOS, deprecated: 18.2)
  @available(watchOS, deprecated: 11.2)
  @available(tvOS, deprecated: 18.2)
  @available(visionOS, deprecated: 2.2)
  public var opensIntent: OpensAppIntent?
  @available(macOS 14.2, iOS 17.2, watchOS 10.2, tvOS 17.2, *)
  public var activityIdentifier: Swift.String?
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResultContainer : AppIntents.ReturnsValue {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResultContainer : AppIntents.OpensIntent {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResultContainer : AppIntents.ProvidesDialog where Dialog == AppIntents.IntentDialog {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResultContainer : AppIntents.ShowsSnippetView where Snippet == AppIntents._SnippetViewContainer {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResult {
  public static func result() -> Self where Self == AppIntents.IntentResultContainer<Swift.Never, Swift.Never, Swift.Never, Swift.Never>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResult {
  public static func result<Value>(value: Value) -> Self where Self == AppIntents.IntentResultContainer<Value, Swift.Never, Swift.Never, Swift.Never>, Value : AppIntents._IntentValue
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResult {
  @_disfavoredOverload public static func result<OpensAppIntent>(opensIntent: OpensAppIntent) -> Self where Self == AppIntents.IntentResultContainer<Swift.Never, OpensAppIntent, Swift.Never, Swift.Never>, OpensAppIntent : AppIntents.AppIntent
  @available(macOS 15.2, iOS 18.2, watchOS 11.2, tvOS 18.2, visionOS 2.2, *)
  public static func result(opensIntent: some AppIntent) -> Self where Self == AppIntents.IntentResultContainer<Swift.Never, Swift.Never, Swift.Never, Swift.Never>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResult {
  public static func result(dialog: AppIntents.IntentDialog) -> Self where Self == AppIntents.IntentResultContainer<Swift.Never, Swift.Never, Swift.Never, AppIntents.IntentDialog>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResult {
  @_disfavoredOverload public static func result<Value, OpensAppIntent>(value: Value, opensIntent: OpensAppIntent) -> Self where Self == AppIntents.IntentResultContainer<Value, OpensAppIntent, Swift.Never, Swift.Never>, Value : AppIntents._IntentValue, OpensAppIntent : AppIntents.AppIntent
  @available(macOS 15.2, iOS 18.2, watchOS 11.2, tvOS 18.2, visionOS 2.2, *)
  public static func result<Value>(value: Value, opensIntent: some AppIntent) -> Self where Self == AppIntents.IntentResultContainer<Value, Swift.Never, Swift.Never, Swift.Never>, Value : AppIntents._IntentValue
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResult {
  public static func result<Value>(value: Value, dialog: AppIntents.IntentDialog) -> Self where Self == AppIntents.IntentResultContainer<Value, Swift.Never, Swift.Never, AppIntents.IntentDialog>, Value : AppIntents._IntentValue
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResult {
  @_disfavoredOverload public static func result<Value, OpensAppIntent>(value: Value, opensIntent: OpensAppIntent, dialog: AppIntents.IntentDialog) -> Self where Self == AppIntents.IntentResultContainer<Value, OpensAppIntent, Swift.Never, AppIntents.IntentDialog>, Value : AppIntents._IntentValue, OpensAppIntent : AppIntents.AppIntent
  @available(macOS 15.2, iOS 18.2, watchOS 11.2, tvOS 18.2, visionOS 2.2, *)
  public static func result<Value>(value: Value, opensIntent: some AppIntent, dialog: AppIntents.IntentDialog) -> Self where Self == AppIntents.IntentResultContainer<Value, Swift.Never, Swift.Never, AppIntents.IntentDialog>, Value : AppIntents._IntentValue
}
@available(macOS 13.3, iOS 16.4, watchOS 9.4, tvOS 16.4, *)
extension AppIntents.IntentResult {
  @_disfavoredOverload public static func result<OpensAppIntent>(opensIntent: OpensAppIntent, dialog: AppIntents.IntentDialog) -> Self where Self == AppIntents.IntentResultContainer<Swift.Never, OpensAppIntent, Swift.Never, AppIntents.IntentDialog>, OpensAppIntent : AppIntents.AppIntent
  @available(macOS 15.2, iOS 18.2, watchOS 11.2, tvOS 18.2, visionOS 2.2, *)
  public static func result(opensIntent: some AppIntent, dialog: AppIntents.IntentDialog) -> Self where Self == AppIntents.IntentResultContainer<Swift.Never, Swift.Never, Swift.Never, AppIntents.IntentDialog>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentResult {
  public static func result<Intent>(actionButtonIntent: Intent) -> Self where Self == AppIntents.IntentResultContainer<Swift.Never, Swift.Never, Swift.Never, Swift.Never>, Intent : AppIntents.AppIntent
  public static func result<Intent>(actionButtonIntent: Intent, dialog: AppIntents.IntentDialog) -> Self where Self == AppIntents.IntentResultContainer<Swift.Never, Swift.Never, Swift.Never, AppIntents.IntentDialog>, Intent : AppIntents.AppIntent
  public static func result<Value, Intent>(value: Value, actionButtonIntent: Intent) -> Self where Self == AppIntents.IntentResultContainer<Value, Swift.Never, Swift.Never, Swift.Never>, Value : AppIntents._IntentValue, Intent : AppIntents.AppIntent
  public static func result<Value, Intent>(value: Value, actionButtonIntent: Intent, dialog: AppIntents.IntentDialog) -> Self where Self == AppIntents.IntentResultContainer<Value, Swift.Never, Swift.Never, AppIntents.IntentDialog>, Value : AppIntents._IntentValue, Intent : AppIntents.AppIntent
}
@available(macOS 14.2, iOS 17.2, watchOS 10.2, tvOS 17.2, *)
extension AppIntents.IntentResult {
  public static func result<Intent>(actionButtonIntent: Intent, activityIdentifier: Swift.String) -> Self where Self == AppIntents.IntentResultContainer<Swift.Never, Swift.Never, Swift.Never, Swift.Never>, Intent : AppIntents.AppIntent
  public static func result<Intent>(actionButtonIntent: Intent, activityIdentifier: Swift.String, dialog: AppIntents.IntentDialog) -> Self where Self == AppIntents.IntentResultContainer<Swift.Never, Swift.Never, Swift.Never, AppIntents.IntentDialog>, Intent : AppIntents.AppIntent
  public static func result<Value, Intent>(value: Value, actionButtonIntent: Intent, activityIdentifier: Swift.String) -> Self where Self == AppIntents.IntentResultContainer<Value, Swift.Never, Swift.Never, Swift.Never>, Value : AppIntents._IntentValue, Intent : AppIntents.AppIntent
  public static func result<Value, Intent>(value: Value, actionButtonIntent: Intent, activityIdentifier: Swift.String, dialog: AppIntents.IntentDialog) -> Self where Self == AppIntents.IntentResultContainer<Value, Swift.Never, Swift.Never, AppIntents.IntentDialog>, Value : AppIntents._IntentValue, Intent : AppIntents.AppIntent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.URL {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.URL {
  convenience public init()
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@propertyWrapper final public class EntityProperty<Value> : AppIntents.AnyIntentValue, @unchecked Swift.Sendable where Value : AppIntents._IntentValue, Value : Swift.Sendable {
  final public var title: Foundation.LocalizedStringResource {
    get
    set
  }
  final public var isOptional: Swift.Bool {
    get
  }
  @available(*, unavailable)
  public init()
  final public var projectedValue: AppIntents.EntityProperty<Value> {
    get
  }
  final public var wrappedValue: Value {
    get
    set
  }
  @objc deinit
}
@available(macOS 15.4, iOS 18.4, watchOS 11.4, tvOS 18.4, visionOS 2.4, *)
extension AppIntents.EntityProperty : Swift.CustomStringConvertible {
  final public var description: Swift.String {
    get
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty : Swift.Codable where Value : Swift.Decodable, Value : Swift.Encodable {
  convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Swift.Bool {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, displayName: Swift.Bool.IntentDisplayName? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, displayName: Swift.Bool.IntentDisplayName? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Swift.Bool {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, displayName: Swift.Bool.IntentDisplayName? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, displayName: Swift.Bool.IntentDisplayName? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentPaymentMethod : Swift.Sendable {
  public init(type: AppIntents.IntentPaymentMethod.PaymentType, name: Foundation.LocalizedStringResource? = nil, identificationHint: Swift.String? = nil, icon: AppIntents.DisplayRepresentation.Image? = nil)
  public var paymentType: AppIntents.IntentPaymentMethod.PaymentType {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var icon: AppIntents.DisplayRepresentation.Image? {
    get
  }
  public var identificationHint: Swift.String? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPaymentMethod {
  public enum PaymentType : Swift.Sendable {
    case unknown
    case checking
    case savings
    case brokerage
    case debit
    case credit
    case prepaid
    case store
    case applePay
    public static func == (a: AppIntents.IntentPaymentMethod.PaymentType, b: AppIntents.IntentPaymentMethod.PaymentType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPaymentMethod : AppIntents.DisplayRepresentable {
  public static var typeDisplayRepresentation: AppIntents.TypeDisplayRepresentation {
    get
  }
  public var displayRepresentation: AppIntents.DisplayRepresentation {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPaymentMethod : AppIntents._IntentValue {
  public static var defaultResolverSpecification: AppIntents.EmptyResolverSpecification<AppIntents.IntentPaymentMethod> {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Specification = AppIntents.EmptyResolverSpecification<AppIntents.IntentPaymentMethod>
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias UnwrappedType = AppIntents.IntentPaymentMethod
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ValueType = AppIntents.IntentPaymentMethod
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentItem<Value> where Value : AppIntents._IntentValue {
  public var value: Value
  public var description: AppIntents.DisplayRepresentation
  public init(_ value: Value, title: Foundation.LocalizedStringResource, subtitle: Foundation.LocalizedStringResource? = nil, image: AppIntents.DisplayRepresentation.Image? = nil)
  @available(macOS 13.3, iOS 16.4, watchOS 9.4, tvOS 16.4, *)
  public init(_ value: Value)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentItem {
  @_functionBuilder public enum Builder {
    public static func buildExpression(_ expression: Value) -> AppIntents.IntentItem<Value>
    public static func buildExpression<ExpressionValue>(_ expression: AppIntents.IntentItem<ExpressionValue>) -> AppIntents.IntentItem<ExpressionValue> where ExpressionValue : AppIntents._IntentValue
    public static func buildBlock(_ items: AppIntents.IntentItem<Value>...) -> [AppIntents.IntentItem<Value>]
    @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
    @backDeployed(before: macOS 13.3, iOS 16.4, watchOS 9.4, tvOS 16.4)
    public static func buildBlock(_ items: [AppIntents.IntentItem<Value>]) -> [AppIntents.IntentItem<Value>] { items }
    @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
    @backDeployed(before: macOS 13.3, iOS 16.4, watchOS 9.4, tvOS 16.4)
    public static func buildArray(_ components: [[AppIntents.IntentItem<Value>]]) -> [AppIntents.IntentItem<Value>] {
            components.flatMap { $0 }
        }
    public static func buildBlock() -> [Value]
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Swift.Bool {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Swift.Bool {
  convenience public init()
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public protocol SetValueIntent<ValueType> : AppIntents.AppIntent {
  associatedtype ValueType : AppIntents._IntentValue
  var value: Self.ValueType { get set }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
@_alwaysEmitConformanceMetadata public protocol AppIntentsPackage {
  static var includedPackages: [any AppIntents.AppIntentsPackage.Type] { get }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.AppIntentsPackage {
  public static var includedPackages: [any AppIntents.AppIntentsPackage.Type] {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
public struct IntentDeprecation<ReplacementIntent> where ReplacementIntent : AppIntents.AppIntent {
  public var message: Foundation.LocalizedStringResource
  public var replacedBy: ReplacementIntent.Type?
  public init(message: Foundation.LocalizedStringResource, replacedBy: ReplacementIntent.Type?)
  public init(message: Foundation.LocalizedStringResource) where ReplacementIntent == Swift.Never
  public init(replacedBy: ReplacementIntent.Type)
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
public protocol DeprecatedAppIntent : AppIntents.AppIntent {
  associatedtype ReplacementIntent : AppIntents.AppIntent = Swift.Never
  static var deprecation: AppIntents.IntentDeprecation<Self.ReplacementIntent> { get }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.DeprecatedAppIntent {
  public static var deprecation: AppIntents.IntentDeprecation<Swift.Never> {
    get
  }
}
@available(*, unavailable)
extension Foundation.NSNull : AppIntents._IntentValue {
  public struct NullResolver : AppIntents.Resolver {
    public func resolve(from input: Foundation.NSNull, context: AppIntents.IntentParameterContext<Foundation.NSNull>) async throws -> Foundation.NSNull?
    public static func == (a: Foundation.NSNull.NullResolver, b: Foundation.NSNull.NullResolver) -> Swift.Bool
    @available(*, unavailable)
    public typealias Input = Foundation.NSNull
    @available(*, unavailable)
    public typealias Output = Foundation.NSNull
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var defaultResolverSpecification: some AppIntents.ResolverSpecification {
    get
  }
  @available(*, unavailable)
  public typealias Specification = @_opaqueReturnTypeOf("$sSo6NSNullC10AppIntentsE28defaultResolverSpecificationQrvpZ", 0) __
  @available(*, unavailable)
  public typealias UnwrappedType = Foundation.NSNull
  @available(*, unavailable)
  public typealias ValueType = Foundation.NSNull
}
@available(macOS 15.2, iOS 18.2, watchOS 11.2, tvOS 18.2, visionOS 2.2, *)
extension Foundation.NSUserActivity : AppIntents.AppEntityAnnotatable {
  public var appEntityIdentifier: AppIntents.EntityIdentifier? {
    get
    set
  }
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
final public class EntityQueryProperty<Entity, Subject, Property, PropertyType, ComparatorMappingType> : AppIntents.EntityQueryPropertyDeclaration<Entity, ComparatorMappingType> where Entity : AppIntents.AppEntity, Subject : AppIntents.AppEntity, Property : AppIntents.EntityProperty<PropertyType>, PropertyType : AppIntents._IntentValue, PropertyType : Swift.Sendable {
  public typealias QueryComparators = [AppIntents.AnyEntityQueryComparator<Entity, Subject, Property, PropertyType, ComparatorMappingType>]
  public init(_ keyPath: Swift.KeyPath<Subject, Property>, entityProvider: @escaping (Entity) -> Subject, @AppIntents.EntityQueryComparatorsBuilder<Entity, Subject, Property, PropertyType, ComparatorMappingType> comparators: () -> AppIntents.EntityQueryProperty<Entity, Subject, Property, PropertyType, ComparatorMappingType>.QueryComparators)
  convenience public init(_ keyPath: Swift.KeyPath<Subject, Property>, @AppIntents.EntityQueryComparatorsBuilder<Entity, Entity, Property, PropertyType, ComparatorMappingType> comparators: () -> AppIntents.EntityQueryProperty<Entity, Subject, Property, PropertyType, ComparatorMappingType>.QueryComparators) where Entity == Subject
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public class EntityQueryPropertyDeclaration<Entity, ComparatorMappingType> {
  @objc deinit
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public protocol URLRepresentableIntent : AppIntents.AppIntent {
  static var urlRepresentation: Self.URLRepresentation { get }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.URLRepresentableIntent {
  public typealias URLRepresentation = AppIntents.IntentURLRepresentation<Self>
  public var urlRepresentation: Foundation.URL? {
    get async
  }
  public func perform() async throws -> Swift.Never
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public struct IntentURLRepresentation<Intent> : Swift.ExpressibleByStringInterpolation where Intent : AppIntents.AppIntent {
  public init(_ value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(stringInterpolation: AppIntents.IntentURLRepresentation<Intent>.StringInterpolation)
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias StringLiteralType = Swift.String
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias UnicodeScalarLiteralType = Swift.String
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentURLRepresentation {
  public struct StringInterpolation : Swift.StringInterpolationProtocol {
    public init(literalCapacity: Swift.Int, interpolationCount: Swift.Int)
    public mutating func appendLiteral(_ literal: Swift.String)
    public mutating func appendInterpolation<ValueType, Subject>(_ subject: Subject) where ValueType : AppIntents._IntentValue, ValueType : Swift.Sendable, Subject : Swift.KeyPath<Intent, AppIntents.IntentParameter<ValueType>>
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
    public typealias StringLiteralType = Swift.String
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == AppIntents.IntentPerson {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == AppIntents.IntentPerson {
  convenience public init()
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol EntityStringQuery : AppIntents.EntityQuery {
  func entities(matching string: Swift.String) async throws -> Self.Result
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public protocol CustomURLRepresentationParameterConvertible {
  var urlRepresentationParameter: Swift.String? { get async }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Swift.String : AppIntents.CustomURLRepresentationParameterConvertible {
  public var urlRepresentationParameter: Swift.String? {
    get
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Swift.Int : AppIntents.CustomURLRepresentationParameterConvertible {
  public var urlRepresentationParameter: Swift.String? {
    get
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Foundation.URL : AppIntents.CustomURLRepresentationParameterConvertible {
  public var urlRepresentationParameter: Swift.String? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitDuration> {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitEnergy> {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitLength> {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitMass> {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitSpeed> {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitTemperature> {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitVolume> {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitAcceleration> {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitAngle> {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitArea> {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitConcentrationMass> {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitDispersion> {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitElectricCharge> {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitElectricCurrent> {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitElectricPotentialDifference> {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitElectricResistance> {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitFrequency> {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitFuelEfficiency> {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitIlluminance> {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitInformationStorage> {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitPower> {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitPressure> {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitDuration> {
  convenience public init()
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitEnergy> {
  convenience public init()
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitLength> {
  convenience public init()
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitMass> {
  convenience public init()
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitSpeed> {
  convenience public init()
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitTemperature> {
  convenience public init()
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitVolume> {
  convenience public init()
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitAcceleration> {
  convenience public init()
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitAngle> {
  convenience public init()
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitArea> {
  convenience public init()
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitConcentrationMass> {
  convenience public init()
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitDispersion> {
  convenience public init()
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitElectricCharge> {
  convenience public init()
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitElectricCurrent> {
  convenience public init()
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitElectricPotentialDifference> {
  convenience public init()
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitElectricResistance> {
  convenience public init()
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitFrequency> {
  convenience public init()
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitFuelEfficiency> {
  convenience public init()
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitIlluminance> {
  convenience public init()
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitInformationStorage> {
  convenience public init()
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitPower> {
  convenience public init()
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Foundation.Measurement<Foundation.UnitPressure> {
  convenience public init()
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol TransientAppEntity : AppIntents.AppEntity {
  init()
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.TransientAppEntity {
  public var id: Foundation.UUID {
    get
  }
  public static var defaultQuery: AppIntents._TransientAppEntityQuery<Self> {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct _TransientAppEntityQuery<Entity> : AppIntents.EntityQuery where Entity : AppIntents.TransientAppEntity {
  public init()
  public func entities(for identifiers: [Entity.ID]) async throws -> [Entity]
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias DefaultValue = Swift.Array<Entity>.Result
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Result = [Entity]
}
@available(macOS 14.2, iOS 17.2, watchOS 10.2, tvOS 17.2, *)
extension AppIntents.StringSearchCriteria {
  public static var defaultResolverSpecification: some AppIntents.ResolverSpecification {
    get
  }
}
@available(macOS 14.2, iOS 17.2, watchOS 10.2, tvOS 17.2, *)
public struct StringSearchCriteriaFromStringResolverSpecificification : AppIntents.Resolver {
  public func resolve(from input: Swift.String, context: AppIntents.IntentParameterContext<AppIntents.StringSearchCriteria>) async throws -> AppIntents.StringSearchCriteria?
  public static func == (a: AppIntents.StringSearchCriteriaFromStringResolverSpecificification, b: AppIntents.StringSearchCriteriaFromStringResolverSpecificification) -> Swift.Bool
  @available(iOS 17.2, tvOS 17.2, watchOS 10.2, macOS 14.2, *)
  public typealias Input = Swift.String
  @available(iOS 17.2, tvOS 17.2, watchOS 10.2, macOS 14.2, *)
  public typealias Output = AppIntents.StringSearchCriteria
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
public struct AppShortcutOptionsCollection<Provider> : AppIntents.AppShortcutOptionsCollectionProtocol where Provider : AppIntents.DynamicOptionsProvider {
  public let dynamicOptionsProvider: Provider
  public let title: Foundation.LocalizedStringResource
  public let systemImageName: Swift.String?
  public init(_ dynamicOptionsProvider: Provider, title: Foundation.LocalizedStringResource, systemImageName: Swift.String? = nil)
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
public protocol AppShortcutOptionsCollectionProtocol {
  associatedtype Provider : AppIntents.DynamicOptionsProvider
  var dynamicOptionsProvider: Self.Provider { get }
  var title: Foundation.LocalizedStringResource { get }
  var systemImageName: Swift.String? { get }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.AppShortcutsProvider {
  public typealias OptionsCollection = AppIntents.AppShortcutOptionsCollection
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
final public class AppDependencyManager {
  public static var shared: AppIntents.AppDependencyManager {
    get
  }
  public init()
  @_silgen_name("$s10AppIntents0A17DependencyManagerC3add3key10dependencyys11AnyHashableVSg_xyXAts8SendableRzlF")
  @_disfavoredOverload final public func add<Dependency>(key: Swift.AnyHashable? = nil, dependency dependencyProvider: @autoclosure @escaping @Sendable () -> Dependency) where Dependency : Swift.Sendable
  @_silgen_name("$s10AppIntents0A17DependencyManagerC3add3key10dependencyys11AnyHashableVSg_xyKcyXAts8SendableRzlF")
  final public func add<Dependency>(key: Swift.AnyHashable? = nil, dependency dependencyProvider: @autoclosure @escaping () -> @Sendable () throws -> Dependency) where Dependency : Swift.Sendable
  @_silgen_name("$s10AppIntents0A17DependencyManagerC3add3key10dependencyys11AnyHashableVSg_xyYaKcts8SendableRzlF")
  final public func add<Dependency>(key: Swift.AnyHashable? = nil, dependency dependencyProvider: @escaping @Sendable () async throws -> Dependency) where Dependency : Swift.Sendable
  @objc deinit
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppDependencyManager {
  public enum Error<Value> : Foundation.LocalizedError {
    case failedToRetrieveDependency(Swift.AnyHashable, Value.Type)
    case failedToLoadDependency(Swift.AnyHashable, Value.Type)
    case incorrectDependencyType(Swift.AnyHashable, Value.Type, any Any.Type)
    public var errorDescription: Swift.String? {
      get
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas {
  @_marker public protocol CameraIntent : AppIntents.AssistantSchemas.Model {
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.IntentSchema : AppIntents.AssistantSchemas.CameraIntent {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema.IntentSchema : AppIntents.AssistantSchemas.CameraIntent {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.Intent where Self == AppIntents.AssistantSchemas.IntentSchema {
  @_alwaysEmitIntoClient public static var camera: some AppIntents.AssistantSchemas.CameraIntent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("camera")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.CameraIntent {
  @_alwaysEmitIntoClient public var openInCaptureMode: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("NavigateToCaptureModeIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var switchDevice: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("FlipCameraIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var setDevice: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("SetActiveDeviceIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var startCapture: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("StartCameraCaptureIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var stopCapture: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("StopCaptureIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas {
  @_marker public protocol CameraEnum : AppIntents.AssistantSchemas.Model {
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.EnumSchema : AppIntents.AssistantSchemas.CameraEnum {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema.EnumSchema : AppIntents.AssistantSchemas.CameraEnum {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.Enum where Self == AppIntents.AssistantSchemas.EnumSchema {
  @_alwaysEmitIntoClient public static var camera: some AppIntents.AssistantSchemas.CameraEnum {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EnumSchema("camera")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.CameraEnum {
  @_alwaysEmitIntoClient public var captureMode: some AppIntents.AssistantSchemas.Enum {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EnumSchema("CaptureMode")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var captureDuration: some AppIntents.AssistantSchemas.Enum {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EnumSchema("CaptureDuration")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var captureDevice: some AppIntents.AssistantSchemas.Enum {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EnumSchema("CaptureDevice")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Foundation.Date : AppIntents._IntentValue {
  public static var defaultResolverSpecification: some AppIntents.ResolverSpecification {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Specification = @_opaqueReturnTypeOf("$s10Foundation4DateV10AppIntentsE28defaultResolverSpecificationQrvpZ", 0) __
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias UnwrappedType = Foundation.Date
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ValueType = Foundation.Date
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter {
  public enum DateKind {
    case date
    case time
    case dateTime
    public static func == (a: AppIntents.IntentParameter<Value>.DateKind, b: AppIntents.IntentParameter<Value>.DateKind) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Date {
  final public var dateKind: AppIntents.IntentParameter<Value>.DateKind? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Date {
  public var dateKind: AppIntents.IntentParameter<Value>.DateKind? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct FocusFilterAppContext {
  public let notificationFilterPredicate: Foundation.NSPredicate?
  @available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
  public let targetContentIdentifierPrefix: Swift.String?
  public init(notificationFilterPredicate: Foundation.NSPredicate? = nil)
  @available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
  public init(notificationFilterPredicate: Foundation.NSPredicate? = nil, targetContentIdentifierPrefix: Swift.String? = nil)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct FocusFilterSuggestionContext {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentSystemContext {
  public var preciseTimestamp: Foundation.Date? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppIntent {
  public var systemContext: AppIntents.IntentSystemContext {
    get
  }
}
@available(macOS 15.2, iOS 18.2, watchOS 11.2, tvOS 18.2, visionOS 2.2, *)
extension Foundation.Calendar.RecurrenceRule : AppIntents._IntentValue {
  public static var defaultResolverSpecification: some AppIntents.ResolverSpecification {
    get
  }
  @available(iOS 18.2, tvOS 18.2, watchOS 11.2, visionOS 2.2, macOS 15.2, *)
  public typealias Specification = @_opaqueReturnTypeOf("$s10Foundation8CalendarV14RecurrenceRuleV10AppIntentsE28defaultResolverSpecificationQrvpZ", 0) __
  @available(iOS 18.2, tvOS 18.2, watchOS 11.2, visionOS 2.2, macOS 15.2, *)
  public typealias UnwrappedType = Foundation.Calendar.RecurrenceRule
  @available(iOS 18.2, tvOS 18.2, watchOS 11.2, visionOS 2.2, macOS 15.2, *)
  public typealias ValueType = Foundation.Calendar.RecurrenceRule
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == AppIntents.IntentCurrencyAmount {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == AppIntents.IntentCurrencyAmount {
  convenience public init()
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol StartWorkoutIntent : AppIntents.InstanceDisplayRepresentable, AppIntents.SystemIntent {
  associatedtype WorkoutStyle : AppIntents.AppValue
  var workoutStyle: Self.WorkoutStyle { get set }
  static var suggestedWorkouts: [Self] { get }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.StartWorkoutIntent {
  public static var openAppWhenRun: Swift.Bool {
    get
  }
  public static func invalidateSuggestedWorkouts()
  public init(style: Self.WorkoutStyle)
}
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public protocol IndexedEntity : AppIntents.AppEntity {
  var attributeSet: CoreSpotlight.CSSearchableItemAttributeSet { get }
  @available(macOS 15.4, iOS 18.4, visionOS 2.4, *)
  var hideInSpotlight: Swift.Bool { get }
}
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension AppIntents.IndexedEntity {
  public var defaultAttributeSet: CoreSpotlight.CSSearchableItemAttributeSet {
    get
  }
  public var attributeSet: CoreSpotlight.CSSearchableItemAttributeSet {
    get
  }
}
@available(macOS 15.4, iOS 18.4, visionOS 2.4, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension AppIntents.IndexedEntity {
  public var hideInSpotlight: Swift.Bool {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Swift.String {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Swift.String {
  convenience public init()
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct DisplayRepresentation : Swift.ExpressibleByStringLiteral, Swift.Equatable {
  public var title: Foundation.LocalizedStringResource
  public var subtitle: Foundation.LocalizedStringResource?
  public var image: AppIntents.DisplayRepresentation.Image?
  @available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
  public var synonyms: [Foundation.LocalizedStringResource]
  public init(title: Foundation.LocalizedStringResource, subtitle: Foundation.LocalizedStringResource? = nil, image: AppIntents.DisplayRepresentation.Image? = nil)
  @available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
  public init(title: Foundation.LocalizedStringResource, subtitle: Foundation.LocalizedStringResource? = nil, image: AppIntents.DisplayRepresentation.Image? = nil, synonyms: [Foundation.LocalizedStringResource] = [])
  @_semantics("localization_key.init_literal") public init(stringLiteral value: Swift.String)
  public static func == (a: AppIntents.DisplayRepresentation, b: AppIntents.DisplayRepresentation) -> Swift.Bool
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias StringLiteralType = Swift.String
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias UnicodeScalarLiteralType = Swift.String
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.DisplayRepresentation : @unchecked Swift.Sendable {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol EntityPropertyQuery : AppIntents.EntityQuery {
  associatedtype ComparatorMappingType
  static var properties: Self.QueryProperties { get }
  static var sortingOptions: Self.SortingOptions { get }
  @available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
  static var findIntentDescription: AppIntents.IntentDescription? { get }
  func entities(matching comparators: [Self.ComparatorMappingType], mode: Self.ComparatorMode, sortedBy: [AppIntents.EntityQuerySort<Self.Entity>], limit: Swift.Int?) async throws -> Self.Result
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityPropertyQuery {
  public typealias ComparatorMode = AppIntents.EntityQueryComparatorMode
  public typealias QueryProperties = AppIntents.EntityQueryProperties<Self.Entity, Self.ComparatorMappingType>
  public typealias Property = AppIntents.EntityQueryProperty
  public typealias SortingOptions = AppIntents.EntityQuerySortingOptions<Self.Entity>
  public typealias SortableBy = AppIntents.EntityQuerySortableByProperty<Self.Entity>
  public typealias Sort = AppIntents.EntityQuerySort
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.EntityPropertyQuery {
  public static var findIntentDescription: AppIntents.IntentDescription? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@frozen public enum EntityQueryComparatorMode {
  case and
  case or
  public static func == (a: AppIntents.EntityQueryComparatorMode, b: AppIntents.EntityQueryComparatorMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol _SequenceIntentValue : AppIntents._IntentValue {
  associatedtype UnderlyingSequence : Swift.Collection
  var sequence: Self.UnderlyingSequence { get }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents._SequenceIntentValue where Self : Swift.Collection {
  public var sequence: Self {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.Array : AppIntents._IntentValue, AppIntents._SequenceIntentValue where Element : AppIntents._IntentValue {
  public typealias ValueType = Element
  public typealias UnwrappedType = Swift.Array<Element>
  public static var defaultResolverSpecification: AppIntents.EmptyResolverSpecification<Swift.Array<Element>> {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Specification = AppIntents.EmptyResolverSpecification<Swift.Array<Element>>
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias UnderlyingSequence = Swift.Array<Element>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.Set : AppIntents._IntentValue, AppIntents._SequenceIntentValue where Element : AppIntents._IntentValue {
  public typealias ValueType = Element
  public typealias UnwrappedType = Swift.Set<Element>
  public static var defaultResolverSpecification: some AppIntents.ResolverSpecification {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Specification = @_opaqueReturnTypeOf("$sSh10AppIntentsAA12_IntentValueRzrlE28defaultResolverSpecificationQrvpZ", 0) __<Element>
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias UnderlyingSequence = Swift.Set<Element>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
public struct IntentCollectionSize : Swift.ExpressibleByIntegerLiteral, Swift.Equatable {
  public init(min: _const Swift.Int, max: _const Swift.Int)
  public init(exactly: _const Swift.Int)
  public init(integerLiteral value: Swift.Int)
  public static func == (a: AppIntents.IntentCollectionSize, b: AppIntents.IntentCollectionSize) -> Swift.Bool
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias IntegerLiteralType = Swift.Int
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Foundation.URL : AppIntents._IntentValue {
  public static var defaultResolverSpecification: some AppIntents.ResolverSpecification {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Specification = @_opaqueReturnTypeOf("$s10Foundation3URLV10AppIntentsE28defaultResolverSpecificationQrvpZ", 0) __
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias UnwrappedType = Foundation.URL
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ValueType = Foundation.URL
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct URLFromStringResolver : AppIntents.Resolver {
  public func resolve(from input: Swift.String, context: AppIntents.IntentParameterContext<Foundation.URL>) async throws -> Foundation.URL?
  public static func == (a: AppIntents.URLFromStringResolver, b: AppIntents.URLFromStringResolver) -> Swift.Bool
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Input = Swift.String
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Output = Foundation.URL
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Swift.Int {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, controlStyle: _const AppIntents.IntentParameter<Value>.IntControlStyle = .stepper, inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Value.ValueType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, controlStyle: _const AppIntents.IntentParameter<Value>.IntControlStyle = .stepper, inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Value.ValueType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, controlStyle: _const AppIntents.IntentParameter<Value>.IntControlStyle = .stepper, inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Value.ValueType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Swift.Int
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, controlStyle: _const AppIntents.IntentParameter<Value>.IntControlStyle = .stepper, inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Value.ValueType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Swift.Int
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Swift.Int {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, controlStyle: _const AppIntents.IntentParameter<Value>.IntControlStyle = .stepper, inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Value.ValueType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, controlStyle: _const AppIntents.IntentParameter<Value>.IntControlStyle = .stepper, inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Value.ValueType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, controlStyle: _const AppIntents.IntentParameter<Value>.IntControlStyle = .stepper, inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Value.ValueType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Swift.Int
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, controlStyle: _const AppIntents.IntentParameter<Value>.IntControlStyle = .stepper, inclusiveRange: _const AppIntents.IntentParameter<Value>.InclusiveRange<Value.ValueType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Swift.Int
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == AppIntents.IntentFile {
  @available(macOS, introduced: 13.0, deprecated: 15.0, message: "Please use the initializer with 'supportedContentTypes'")
  @available(iOS, introduced: 16.0, deprecated: 18.0, message: "Please use the initializer with 'supportedContentTypes'")
  @available(watchOS, introduced: 9.0, deprecated: 11.0, message: "Please use the initializer with 'supportedContentTypes'")
  @available(tvOS, introduced: 16.0, deprecated: 18.0, message: "Please use the initializer with 'supportedContentTypes'")
  @available(visionOS, introduced: 1.0, deprecated: 2.0, message: "Please use the initializer with 'supportedContentTypes'")
  @_disfavoredOverload convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, supportedTypeIdentifiers: _const [Swift.String] = ["public.item"], requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  @available(macOS, introduced: 13.0, deprecated: 15.0, message: "Please use the initializer with 'supportedContentTypes'")
  @available(iOS, introduced: 16.0, deprecated: 18.0, message: "Please use the initializer with 'supportedContentTypes'")
  @available(watchOS, introduced: 9.0, deprecated: 11.0, message: "Please use the initializer with 'supportedContentTypes'")
  @available(tvOS, introduced: 16.0, deprecated: 18.0, message: "Please use the initializer with 'supportedContentTypes'")
  @available(visionOS, introduced: 1.0, deprecated: 2.0, message: "Please use the initializer with 'supportedContentTypes'")
  @_disfavoredOverload convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, supportedTypeIdentifiers: _const [Swift.String] = ["public.item"], requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  @available(macOS, introduced: 13.0, deprecated: 15.0, message: "Please use the initializer with 'supportedContentTypes'")
  @available(iOS, introduced: 16.0, deprecated: 18.0, message: "Please use the initializer with 'supportedContentTypes'")
  @available(watchOS, introduced: 9.0, deprecated: 11.0, message: "Please use the initializer with 'supportedContentTypes'")
  @available(tvOS, introduced: 16.0, deprecated: 18.0, message: "Please use the initializer with 'supportedContentTypes'")
  @available(visionOS, introduced: 1.0, deprecated: 2.0, message: "Please use the initializer with 'supportedContentTypes'")
  @_disfavoredOverload convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, supportedTypeIdentifiers: _const [Swift.String] = ["public.item"], requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentFile
  @available(macOS, introduced: 13.0, deprecated: 15.0, message: "Please use the initializer with 'supportedContentTypes'")
  @available(iOS, introduced: 16.0, deprecated: 18.0, message: "Please use the initializer with 'supportedContentTypes'")
  @available(watchOS, introduced: 9.0, deprecated: 11.0, message: "Please use the initializer with 'supportedContentTypes'")
  @available(tvOS, introduced: 16.0, deprecated: 18.0, message: "Please use the initializer with 'supportedContentTypes'")
  @available(visionOS, introduced: 1.0, deprecated: 2.0, message: "Please use the initializer with 'supportedContentTypes'")
  @_disfavoredOverload convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, supportedTypeIdentifiers: _const [Swift.String] = ["public.item"], requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == AppIntents.IntentFile
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol ResolverSpecification : Swift.Hashable, Swift.Sendable, Swift.Sequence where Self.Element == any AppIntents.Resolver {
  associatedtype Output : AppIntents._IntentValue
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@_functionBuilder public enum ResolverSpecificationBuilder<Property> where Property : AppIntents._IntentValue {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  @backDeployed(before: macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0)
  public static func buildExpression<ResolverType>(_ expression: ResolverType) -> ResolverType where Property == ResolverType.Output, ResolverType : AppIntents.Resolver {
        expression
    }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock() -> some AppIntents.ResolverSpecification
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct EmptyResolverSpecification<Value> : AppIntents.ResolverSpecification where Value : AppIntents._IntentValue {
  public typealias Output = Value
  public init()
  public func makeIterator() -> Swift.IndexingIterator<[any AppIntents.Resolver]>
  public static func == (a: AppIntents.EmptyResolverSpecification<Value>, b: AppIntents.EmptyResolverSpecification<Value>) -> Swift.Bool
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Element = any AppIntents.Resolver
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Iterator = Swift.IndexingIterator<[any AppIntents.Resolver]>
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock<R0>(_ r0: R0) -> some AppIntents.ResolverSpecification where R0 : AppIntents.Resolver
  
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
  public struct Specification<Output, each R> : AppIntents.ResolverSpecification where Output : AppIntents._IntentValue, repeat each R : AppIntents.Resolver {
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (lhs: AppIntents.ResolverSpecificationBuilder<Property>.Specification<Output, repeat each R>, rhs: AppIntents.ResolverSpecificationBuilder<Property>.Specification<Output, repeat each R>) -> Swift.Bool
    public func makeIterator() -> Swift.Array<any AppIntents.Resolver>.Iterator
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
    public typealias Element = any AppIntents.Resolver
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
    public typealias Iterator = Swift.Array<any AppIntents.Resolver>.Iterator
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func buildPartialBlock<R>(first: R) -> AppIntents.ResolverSpecificationBuilder<Property>.Specification<Property, R> where R : AppIntents.Resolver
  public static func buildPartialBlock<each Accumulated, R>(accumulated: AppIntents.ResolverSpecificationBuilder<Property>.Specification<Property, repeat each Accumulated>, next: R) -> AppIntents.ResolverSpecificationBuilder<Property>.Specification<Property, repeat each Accumulated, R> where repeat each Accumulated : AppIntents.Resolver, R : AppIntents.Resolver
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol ResultsCollection<Result> {
  associatedtype Result : AppIntents._IntentValue
  var promptLabel: Foundation.LocalizedStringResource? { get }
  var usesIndexedCollation: Swift.Bool { get }
  var items: [Self.Result.ValueType] { get }
  static var empty: Self { get }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.Array : AppIntents.ResultsCollection where Element : AppIntents._IntentValue {
  public typealias Result = Element
  public var promptLabel: Foundation.LocalizedStringResource? {
    get
  }
  public var usesIndexedCollation: Swift.Bool {
    get
  }
  public var items: [Element.ValueType] {
    get
  }
  public static var empty: Swift.Array<Element> {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
public struct AppShortcutParameterPresentationSummary<Intent, Value, Parameter, ParameterKeyPath> where Intent : AppIntents.AppIntent, Value : AppIntents._IntentValue, Value : Swift.Sendable, Parameter : AppIntents.IntentParameter<Value>, ParameterKeyPath : Swift.KeyPath<Intent, Parameter> {
  public init(_ summaryString: AppIntents.AppShortcutParameterPresentationSummaryString<Intent, Value, Parameter, ParameterKeyPath>, table: Swift.StaticString? = nil)
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
public struct AppShortcutParameterPresentationSummaryString<Intent, Value, Parameter, ParameterKeyPath> : Swift.ExpressibleByStringInterpolation where Intent : AppIntents.AppIntent, Value : AppIntents._IntentValue, Value : Swift.Sendable, Parameter : AppIntents.IntentParameter<Value>, ParameterKeyPath : Swift.KeyPath<Intent, Parameter> {
  public init(_ value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(stringInterpolation: AppIntents.AppShortcutParameterPresentationSummaryString<Intent, Value, Parameter, ParameterKeyPath>.StringInterpolation)
  public struct StringInterpolation : Swift.StringInterpolationProtocol {
    public init(literalCapacity: Swift.Int, interpolationCount: Swift.Int)
    public mutating func appendLiteral(_ literal: Swift.String)
    public mutating func appendInterpolation(_ subject: ParameterKeyPath)
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias StringLiteralType = Swift.String
  }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias StringLiteralType = Swift.String
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias UnicodeScalarLiteralType = Swift.String
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.AppShortcutsProvider {
  public typealias Summary = AppIntents.AppShortcutParameterPresentationSummary
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol AppEnum : AppIntents.AppValue, AppIntents.StaticDisplayRepresentable, Swift.RawRepresentable where Self.RawValue : Swift.LosslessStringConvertible {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppEnum {
  public static var defaultResolverSpecification: some AppIntents.ResolverSpecification {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol RangeCheckingResolver : AppIntents.Resolver {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol RangeComparableProperty : AppIntents._IntentValue, Swift.Comparable {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.RangeCheckingResolver {
  public func checkParameterRangeContains<Value>(value: Value, context: AppIntents.IntentParameterContext<Self.Output>) throws where Value : AppIntents.RangeComparableProperty, Value == Self.Output.ValueType, Self.Output : Swift.Sendable
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct ConfirmationActionName : Swift.Sendable {
  public static var add: AppIntents.ConfirmationActionName {
    get
  }
  public static var addData: AppIntents.ConfirmationActionName {
    get
  }
  public static var book: AppIntents.ConfirmationActionName {
    get
  }
  public static var buy: AppIntents.ConfirmationActionName {
    get
  }
  public static var call: AppIntents.ConfirmationActionName {
    get
  }
  public static var checkIn: AppIntents.ConfirmationActionName {
    get
  }
  public static var `continue`: AppIntents.ConfirmationActionName {
    get
  }
  public static var create: AppIntents.ConfirmationActionName {
    get
  }
  public static var `do`: AppIntents.ConfirmationActionName {
    get
  }
  public static var download: AppIntents.ConfirmationActionName {
    get
  }
  public static var filter: AppIntents.ConfirmationActionName {
    get
  }
  public static var find: AppIntents.ConfirmationActionName {
    get
  }
  public static var get: AppIntents.ConfirmationActionName {
    get
  }
  public static var go: AppIntents.ConfirmationActionName {
    get
  }
  public static var log: AppIntents.ConfirmationActionName {
    get
  }
  public static var open: AppIntents.ConfirmationActionName {
    get
  }
  public static var order: AppIntents.ConfirmationActionName {
    get
  }
  public static var pay: AppIntents.ConfirmationActionName {
    get
  }
  public static var play: AppIntents.ConfirmationActionName {
    get
  }
  public static var playSound: AppIntents.ConfirmationActionName {
    get
  }
  public static var post: AppIntents.ConfirmationActionName {
    get
  }
  public static var request: AppIntents.ConfirmationActionName {
    get
  }
  public static var run: AppIntents.ConfirmationActionName {
    get
  }
  public static var search: AppIntents.ConfirmationActionName {
    get
  }
  public static var send: AppIntents.ConfirmationActionName {
    get
  }
  public static var set: AppIntents.ConfirmationActionName {
    get
  }
  public static var share: AppIntents.ConfirmationActionName {
    get
  }
  public static var start: AppIntents.ConfirmationActionName {
    get
  }
  public static var startNavigation: AppIntents.ConfirmationActionName {
    get
  }
  public static var toggle: AppIntents.ConfirmationActionName {
    get
  }
  public static var turnOff: AppIntents.ConfirmationActionName {
    get
  }
  public static var turnOn: AppIntents.ConfirmationActionName {
    get
  }
  public static var view: AppIntents.ConfirmationActionName {
    get
  }
  public static func custom(acceptLabel: Foundation.LocalizedStringResource, acceptAlternatives: [Foundation.LocalizedStringResource], denyLabel: Foundation.LocalizedStringResource, denyAlternatives: [Foundation.LocalizedStringResource], destructive: Swift.Bool = false) -> AppIntents.ConfirmationActionName
}
@_hasMissingDesignatedInitializers @available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
final public class RelevantIntentManager {
  public static let shared: AppIntents.RelevantIntentManager
  final public func updateRelevantIntents(_ relevantIntents: [AppIntents.RelevantIntent]) async throws
  @objc deinit
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
public struct RelevantIntent {
  @available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
  @available(tvOS, unavailable)
  public init<IntentType>(_ intent: IntentType, widgetKind: Swift.String, relevance: AppIntents.RelevantContext) where IntentType : AppIntents.WidgetConfigurationIntent
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.RelevantIntent : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public protocol AssistantSchemaEnum : AppIntents.AssistantEnum {
  static var isAssistantOnly: Swift.Bool { get }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchemaEnum {
  public static var isAssistantOnly: Swift.Bool {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchemaEnum {
  public static var typeDisplayRepresentation: AppIntents.TypeDisplayRepresentation {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
@attached(extension, conformances: AppIntents.AssistantSchemaEnum, names: named(__assistantSchemaEnum)) public macro AssistantEnum<T>(schema: T) = #externalMacro(module: "AppIntentsMacros", type: "AssistantEnumMacros") where T : AppIntents.AssistantSchemas.Enum
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol OpenIntent : AppIntents.SystemIntent {
  associatedtype Value : AppIntents.AppValue
  var target: Self.Value { get set }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.OpenIntent {
  public static var openAppWhenRun: Swift.Bool {
    get
  }
  public func perform() async throws -> some AppIntents.IntentResult
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.URL {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.URL
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.URL
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.UnwrappedType : Swift.Collection, Value.ValueType == Foundation.URL {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: [Value.ValueType?], requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: [Value.ValueType?], requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.URL {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.URL
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.URL
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.UnwrappedType : Swift.Collection, Value.ValueType == Foundation.URL {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, default defaultValue: [Value.ValueType?], requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: [Value.ValueType?], requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.String : AppIntents._IntentValue {
  public static var defaultResolverSpecification: some AppIntents.ResolverSpecification {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Specification = @_opaqueReturnTypeOf("$sSS10AppIntentsE28defaultResolverSpecificationQrvpZ", 0) __
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias UnwrappedType = Swift.String
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ValueType = Swift.String
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct StringFromIntResolver<Input, Output> : AppIntents.Resolver where Input : AppIntents._IntentValue, Output : AppIntents._IntentValue, Output.ValueType == Swift.String {
  public func resolve(from input: Input, context: AppIntents.IntentParameterContext<Output>) async throws -> Output?
  public static func == (a: AppIntents.StringFromIntResolver<Input, Output>, b: AppIntents.StringFromIntResolver<Input, Output>) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct StringFromDoubleResolver : AppIntents.Resolver {
  public func resolve(from input: Swift.Double, context: AppIntents.IntentParameterContext<Swift.String>) async throws -> Swift.String?
  public static func == (a: AppIntents.StringFromDoubleResolver, b: AppIntents.StringFromDoubleResolver) -> Swift.Bool
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Input = Swift.Double
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Output = Swift.String
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.String {
  public struct IntentInputOptions {
    public enum KeyboardType {
      @available(macOS 13.0, iOS 16.1, watchOS 9.1, tvOS 16.1, *)
      case `default`
      case asciiCapable
      case numbersAndPunctuation
      case URL
      case numberPad
      public static func == (a: Swift.String.IntentInputOptions.KeyboardType, b: Swift.String.IntentInputOptions.KeyboardType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public enum CapitalizationType {
      case none
      case words
      case sentences
      case allCharacters
      public static func == (a: Swift.String.IntentInputOptions.CapitalizationType, b: Swift.String.IntentInputOptions.CapitalizationType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public var keyboardType: Swift.String.IntentInputOptions.KeyboardType
    public var capitalizationType: Swift.String.IntentInputOptions.CapitalizationType
    public var multiline: Swift.Bool
    public var autocorrect: Swift.Bool
    public var smartQuotes: Swift.Bool
    public var smartDashes: Swift.Bool
    public init(keyboardType: _const Swift.String.IntentInputOptions.KeyboardType = .asciiCapable, capitalizationType: _const Swift.String.IntentInputOptions.CapitalizationType = .sentences, multiline: _const Swift.Bool = false, autocorrect: _const Swift.Bool = true, smartQuotes: _const Swift.Bool = true, smartDashes: _const Swift.Bool = true)
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Swift.String {
  final public var inputOptions: Swift.String.IntentInputOptions? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppEntity where Self : AppIntents.AppEnum {
  public static var defaultResolverSpecification: some AppIntents.ResolverSpecification {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppEntity where Self : AppIntents.CaseDisplayRepresentable {
  public var displayRepresentation: AppIntents.DisplayRepresentation {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppEntity where Self : Swift.RawRepresentable, Self.ID == Self.RawValue {
  public static var defaultQuery: AppIntents._RawRepresentableStringQuery<Self> {
    get
  }
  public var id: Self.ID {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct _RawRepresentableStringQuery<Entity> : AppIntents.EntityStringQuery where Entity : AppIntents.AppEntity, Entity : Swift.RawRepresentable, Entity.ID == Entity.RawValue {
  public init()
  public func entities(for identifiers: [Entity.ID]) async throws -> [Entity]
  public func entities(matching string: Swift.String) async throws -> [Entity]
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias DefaultValue = Swift.Array<Entity>.Result
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Result = [Entity]
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents._RawRepresentableStringQuery where Entity : Swift.CaseIterable {
  public func suggestedEntities() async throws -> [Entity]
  public func entities(matching string: Swift.String) async throws -> [Entity]
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public protocol PushToTalkTransmissionIntent : AppIntents.SystemIntent {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType : AppIntents.AppEntity, Value.ValueType : AppIntents.AppEnum {
  @available(macOS, introduced: 13.0, deprecated: 15.0)
  @available(iOS, introduced: 16.0, deprecated: 18.0)
  @available(watchOS, introduced: 9.0, deprecated: 11.0)
  @available(tvOS, introduced: 16.0, deprecated: 18.0)
  @_disfavoredOverload convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, supportedValues: [Value.ValueType] = Array(Value.ValueType.allCases))
  @available(macOS, introduced: 13.0, deprecated: 15.0)
  @available(iOS, introduced: 16.0, deprecated: 18.0)
  @available(watchOS, introduced: 9.0, deprecated: 11.0)
  @available(tvOS, introduced: 16.0, deprecated: 18.0)
  @_disfavoredOverload convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, supportedValues: [Value.ValueType] = Array(Value.ValueType.allCases), @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  @available(macOS, introduced: 13.0, deprecated: 15.0)
  @available(iOS, introduced: 16.0, deprecated: 18.0)
  @available(watchOS, introduced: 9.0, deprecated: 11.0)
  @available(tvOS, introduced: 16.0, deprecated: 18.0)
  @_disfavoredOverload convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: _const Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, supportedValues: [Value.ValueType] = Array(Value.ValueType.allCases), optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, Value.ValueType == OptionsProvider.DefaultValue.ValueType
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol SetFocusFilterIntent : AppIntents.AppIntent, AppIntents.InstanceDisplayRepresentable {
  var appContext: AppIntents.FocusFilterAppContext { get }
  static func suggestedFocusFilters(for context: AppIntents.FocusFilterSuggestionContext) async -> [Self]
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.SetFocusFilterIntent {
  public var appContext: AppIntents.FocusFilterAppContext {
    get
  }
  public static func suggestedFocusFilters(for context: AppIntents.FocusFilterSuggestionContext) async -> [Self]
  public static func invalidateFocusFilterAppContext()
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public enum SetFocusFilterIntentError : Foundation.LocalizedError, Swift.Equatable {
  case notFound
  @available(macOS 13.3, iOS 16.4, watchOS 9.4, tvOS 16.4, *)
  case missingParameterValue
  public static func == (a: AppIntents.SetFocusFilterIntentError, b: AppIntents.SetFocusFilterIntentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.SetFocusFilterIntent {
  public static var current: Self {
    get async throws
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType : AppIntents.FileEntity {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, supportedContentTypes: Swift.Array<UniformTypeIdentifiers.UTType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, supportedContentTypes: Swift.Array<UniformTypeIdentifiers.UTType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, supportedContentTypes: Swift.Array<UniformTypeIdentifiers.UTType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, supportedContentTypes: Swift.Array<UniformTypeIdentifiers.UTType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, supportedContentTypes: Swift.Array<UniformTypeIdentifiers.UTType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, Value.ValueType == OptionsProvider.DefaultValue.ValueType
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, supportedContentTypes: Swift.Array<UniformTypeIdentifiers.UTType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, Value.ValueType == OptionsProvider.DefaultValue.ValueType
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, supportedContentTypes: Swift.Array<UniformTypeIdentifiers.UTType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, Value.ValueType == OptionsProvider.DefaultValue.ValueType
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, supportedContentTypes: Swift.Array<UniformTypeIdentifiers.UTType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, Value.ValueType == OptionsProvider.DefaultValue.ValueType
  convenience public init<Query>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, supportedContentTypes: Swift.Array<UniformTypeIdentifiers.UTType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, query: Query) where Query : AppIntents.EntityQuery, Value.ValueType == Query.Entity
  convenience public init<Query>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, supportedContentTypes: Swift.Array<UniformTypeIdentifiers.UTType>? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, query: Query) where Query : AppIntents.EntityQuery, Value.ValueType == Query.Entity
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.UnwrappedType : Swift.Collection, Value.ValueType : AppIntents.FileEntity {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, supportedContentTypes: Swift.Array<UniformTypeIdentifiers.UTType>? = nil, size: AppIntents.IntentCollectionSize, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  @available(tvOS, unavailable)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, supportedContentTypes: Swift.Array<UniformTypeIdentifiers.UTType>? = nil, size: [AppIntents.IntentWidgetFamily : AppIntents.IntentCollectionSize], inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, supportedContentTypes: Swift.Array<UniformTypeIdentifiers.UTType>? = nil, size: AppIntents.IntentCollectionSize, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  @available(tvOS, unavailable)
  convenience public init(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, supportedContentTypes: Swift.Array<UniformTypeIdentifiers.UTType>? = nil, size: [AppIntents.IntentWidgetFamily : AppIntents.IntentCollectionSize], inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, supportedContentTypes: Swift.Array<UniformTypeIdentifiers.UTType>? = nil, size: AppIntents.IntentCollectionSize, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  @available(tvOS, unavailable)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, supportedContentTypes: Swift.Array<UniformTypeIdentifiers.UTType>? = nil, size: [AppIntents.IntentWidgetFamily : AppIntents.IntentCollectionSize], inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, supportedContentTypes: Swift.Array<UniformTypeIdentifiers.UTType>? = nil, size: AppIntents.IntentCollectionSize, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  @available(tvOS, unavailable)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, supportedContentTypes: Swift.Array<UniformTypeIdentifiers.UTType>? = nil, size: [AppIntents.IntentWidgetFamily : AppIntents.IntentCollectionSize], inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Query>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, supportedContentTypes: Swift.Array<UniformTypeIdentifiers.UTType>? = nil, size: AppIntents.IntentCollectionSize, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, query: Query) where Query : AppIntents.EntityQuery, Value.ValueType == Query.Entity
  @available(tvOS, unavailable)
  convenience public init<Query>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, supportedContentTypes: Swift.Array<UniformTypeIdentifiers.UTType>? = nil, size: [AppIntents.IntentWidgetFamily : AppIntents.IntentCollectionSize], inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, query: Query) where Query : AppIntents.EntityQuery, Value.ValueType == Query.Entity
  convenience public init<Query>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, supportedContentTypes: Swift.Array<UniformTypeIdentifiers.UTType>? = nil, size: AppIntents.IntentCollectionSize, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, query: Query) where Query : AppIntents.EntityQuery, Value.ValueType == Query.Entity
  @available(tvOS, unavailable)
  convenience public init<Query>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, supportedContentTypes: Swift.Array<UniformTypeIdentifiers.UTType>? = nil, size: [AppIntents.IntentWidgetFamily : AppIntents.IntentCollectionSize], inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, query: Query) where Query : AppIntents.EntityQuery, Value.ValueType == Query.Entity
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType : AppIntents.AppEntity {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType : AppIntents.AppEntity {
  convenience public init()
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Swift.Double {
  convenience public init(title: Foundation.LocalizedStringResource)
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityProperty where Value.ValueType == Swift.Double {
  convenience public init()
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct EntityQuerySortingOptions<Entity> where Entity : AppIntents.AppEntity {
  public init()
  public init(@AppIntents.EntityQuerySortingOptionsBuilder<Entity> content: () -> [AppIntents.EntityQuerySortableByProperty<Entity>])
  public subscript(index: Swift.Int) -> AppIntents.EntityQuerySortableByProperty<Entity> {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@_functionBuilder public enum EntityQuerySortingOptionsBuilder<Entity> where Entity : AppIntents.AppEntity {
  public static func buildExpression(_ expression: AppIntents.EntityQuerySortableByProperty<Entity>) -> AppIntents.EntityQuerySortableByProperty<Entity>
  public static func buildBlock(_ components: AppIntents.EntityQuerySortableByProperty<Entity>...) -> [AppIntents.EntityQuerySortableByProperty<Entity>]
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentDonationIdentifier : Swift.Hashable, Swift.Codable, Swift.Sendable {
  public static func == (lhs: AppIntents.IntentDonationIdentifier, rhs: AppIntents.IntentDonationIdentifier) -> Swift.Bool
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct AppShortcut {
  @available(macOS, deprecated: 14.0, message: "Please provide a shortTitle and systemImageName")
  @available(iOS, deprecated: 17.0, message: "Please provide a shortTitle and systemImageName")
  @available(watchOS, deprecated: 10.0, message: "Please provide a shortTitle and systemImageName")
  @available(tvOS, deprecated: 17.0, message: "Please provide a shortTitle and systemImageName")
  public init<Intent>(intent: Intent, phrases: [AppIntents.AppShortcutPhrase<Intent>], shortTitle: Foundation.LocalizedStringResource? = nil, systemImageName: _const Swift.String? = nil) where Intent : AppIntents.AppIntent
  @available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
  public init<Intent>(intent: Intent, phrases: [AppIntents.AppShortcutPhrase<Intent>], shortTitle: Foundation.LocalizedStringResource, systemImageName: _const Swift.String) where Intent : AppIntents.AppIntent
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.AppShortcut {
  public init<Intent, Value, Parameter, ParameterKeyPath>(intent: Intent, phrases: [AppIntents.AppShortcutPhrase<Intent>], shortTitle: Foundation.LocalizedStringResource, systemImageName: _const Swift.String, parameterPresentation: AppIntents.AppShortcutParameterPresentation<Intent, Value, Parameter, ParameterKeyPath>) where Intent : AppIntents.AppIntent, Value : AppIntents._IntentValue, Value : Swift.Sendable, Parameter : AppIntents.IntentParameter<Value>, ParameterKeyPath : Swift.KeyPath<Intent, Parameter>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Foundation.Measurement : AppIntents._IntentValue {
  public static var defaultResolverSpecification: some AppIntents.ResolverSpecification {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Specification = @_opaqueReturnTypeOf("$s10Foundation11MeasurementV10AppIntentsE28defaultResolverSpecificationQrvpZ", 0) __<UnitType>
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias UnwrappedType = Foundation.Measurement<UnitType>
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ValueType = Foundation.Measurement<UnitType>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol PredictableIntent : AppIntents.AppIntent {
  associatedtype Prediction : AppIntents.IntentPredictionConfiguration
  @AppIntents.IntentPredictionsBuilder<Self> static var predictionConfiguration: Self.Prediction { get }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol IntentPredictionConfiguration {
  associatedtype Intent : AppIntents.AppIntent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Date {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Date
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Date
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Date {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Date
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Date
  convenience public init(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Date
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, kind: _const AppIntents.IntentParameter<Value>.DateKind = .dateTime, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Date
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public protocol URLRepresentableEntity : AppIntents.AppEntity, AppIntents.CustomURLRepresentationParameterConvertible {
  static var urlRepresentation: Self.URLRepresentation { get }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.URLRepresentableEntity {
  public typealias URLRepresentation = AppIntents.EntityURLRepresentation<Self>
  public var urlRepresentation: Foundation.URL? {
    get async
  }
  public var urlRepresentationParameter: Swift.String? {
    get
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public struct EntityURLRepresentation<Entity> : Swift.ExpressibleByStringInterpolation where Entity : AppIntents.AppEntity {
  public init(_ value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(stringInterpolation: AppIntents.EntityURLRepresentation<Entity>.StringInterpolation)
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias StringLiteralType = Swift.String
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias UnicodeScalarLiteralType = Swift.String
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityURLRepresentation {
  public struct StringInterpolation : Swift.StringInterpolationProtocol {
    public init(literalCapacity: Swift.Int, interpolationCount: Swift.Int)
    public mutating func appendLiteral(_ literal: Swift.String)
    public mutating func appendInterpolation<ValueType, Subject>(_ subject: Subject) where ValueType : AppIntents._IntentValue, ValueType : Swift.Sendable, Subject : Swift.KeyPath<Entity, AppIntents.EntityProperty<ValueType>>
    public mutating func appendInterpolation(_ subject: AppIntents.EntityURLRepresentation<Entity>.StringInterpolation.Token)
    public enum Token {
      case id
      public static func == (a: AppIntents.EntityURLRepresentation<Entity>.StringInterpolation.Token, b: AppIntents.EntityURLRepresentation<Entity>.StringInterpolation.Token) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
    public typealias StringLiteralType = Swift.String
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public protocol _IntentValueRepresentable : AppIntents._IntentValue {
  static var allIntentValueTypes: [any AppIntents._IntentValue.Type] { get }
  var asIntentValue: any AppIntents._IntentValue { get }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
@attached(extension, conformances: AppIntents._IntentValueRepresentable, names: arbitrary) public macro UnionValue() = #externalMacro(module: "AppIntentsMacros", type: "_UnionValueMacro")
@available(macOS 14.2, iOS 17.2, watchOS 10.2, tvOS 17.2, *)
public protocol SearchCriteria : AppIntents._IntentValue, Swift.Hashable, Swift.Sendable {
  associatedtype SearchScopes = Swift.Void
}
@available(macOS 14.2, iOS 17.2, watchOS 10.2, tvOS 17.2, *)
extension AppIntents.ShowInAppSearchResultsIntent where Self.Criteria.SearchScopes == () {
  public static var searchScopes: Swift.Void {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
public protocol EnumerableEntityQuery : AppIntents.EntityQuery {
  func allEntities() async throws -> Self.Result
  static var findIntentDescription: AppIntents.IntentDescription? { get }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.EnumerableEntityQuery {
  public static var findIntentDescription: AppIntents.IntentDescription? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.EnumerableEntityQuery {
  @backDeployed(before: macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0)
  public func suggestedEntities() async throws -> Self.Result {
        try await allEntities()
    }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentPerson : Swift.Sendable {
  public var name: AppIntents.IntentPerson.Name
  public var isMe: Swift.Bool
  public var identifier: AppIntents.IntentPerson.Identifier
  public var handle: AppIntents.IntentPerson.Handle?
  public var aliases: [AppIntents.IntentPerson.Handle]
  public var image: AppIntents.DisplayRepresentation.Image?
  public init(identifier: AppIntents.IntentPerson.Identifier, name: AppIntents.IntentPerson.Name, handle: AppIntents.IntentPerson.Handle?, aliases: [AppIntents.IntentPerson.Handle] = [], isMe: Swift.Bool = false, image: AppIntents.DisplayRepresentation.Image? = nil)
  @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
  public init(handle: AppIntents.IntentPerson.Handle)
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPerson {
  public enum ParameterMode : Swift.String {
    case contact
    case email
    case phone
    case emailOrPhone
    public init?(rawValue: Swift.String)
    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Identifier : Swift.Equatable, Swift.Hashable, Swift.Sendable {
    case contact(Swift.String)
    case applicationDefined(Swift.String)
    case unknown
    public static func == (a: AppIntents.IntentPerson.Identifier, b: AppIntents.IntentPerson.Identifier) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Name : Swift.Equatable, Swift.Sendable {
    case displayName(Swift.String)
    case components(Foundation.PersonNameComponents)
    case unknown
    public static func == (a: AppIntents.IntentPerson.Name, b: AppIntents.IntentPerson.Name) -> Swift.Bool
  }
  public struct Handle : Swift.Equatable, Swift.Hashable, Swift.Sendable {
    public enum Value : Swift.Sendable, Swift.Equatable, Swift.Hashable {
      case phoneNumber(Swift.String)
      case emailAddress(Swift.String)
      case applicationDefined(Swift.String)
      public static func == (a: AppIntents.IntentPerson.Handle.Value, b: AppIntents.IntentPerson.Handle.Value) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public enum Label : Swift.Sendable, Swift.Equatable, Swift.Hashable {
      case home
      case work
      case iPhone
      case mobile
      case main
      case homeFax
      case workFax
      case pager
      case other
      case school
      case custom(Swift.String)
      public static func == (a: AppIntents.IntentPerson.Handle.Label, b: AppIntents.IntentPerson.Handle.Label) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public var value: AppIntents.IntentPerson.Handle.Value
    public var label: AppIntents.IntentPerson.Handle.Label
    public init(_ value: AppIntents.IntentPerson.Handle.Value, label: AppIntents.IntentPerson.Handle.Label = .other)
    public init(phoneNumber phoneNumberString: Swift.String, label: AppIntents.IntentPerson.Handle.Label = .other)
    public init(emailAddress emailAddressString: Swift.String, label: AppIntents.IntentPerson.Handle.Label = .other)
    public init(applicationDefined stringValue: Swift.String, label labelString: Swift.String? = nil)
    public static func == (a: AppIntents.IntentPerson.Handle, b: AppIntents.IntentPerson.Handle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPerson : AppIntents.DisplayRepresentable {
  public static var typeDisplayRepresentation: AppIntents.TypeDisplayRepresentation {
    get
  }
  public var displayRepresentation: AppIntents.DisplayRepresentation {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPerson : AppIntents._IntentValue {
  public static var defaultResolverSpecification: AppIntents.EmptyResolverSpecification<AppIntents.IntentPerson> {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Specification = AppIntents.EmptyResolverSpecification<AppIntents.IntentPerson>
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias UnwrappedType = AppIntents.IntentPerson
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ValueType = AppIntents.IntentPerson
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == AppIntents.IntentPerson {
  final public var parameterMode: AppIntents.IntentPerson.ParameterMode? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == AppIntents.IntentPerson {
  public var parameterMode: AppIntents.IntentPerson.ParameterMode? {
    get
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentPerson : Swift.Codable, Swift.Equatable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (a: AppIntents.IntentPerson, b: AppIntents.IntentPerson) -> Swift.Bool
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentPerson.Name : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentPerson.Identifier : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentPerson.Handle : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentPerson.Handle.Value : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentPerson.Handle.Label : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(macOS 14.2, iOS 17.2, watchOS 10.2, tvOS 17.2, visionOS 1.1, *)
extension AppIntents.ShowInAppSearchResultsIntent where Self.Criteria == AppIntents.StringSearchCriteria {
  @backDeployed(before: macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0)
  public static var searchScopes: [AppIntents.StringSearchScope] {
    get {
        return [.general]
    }
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == CoreLocation.CLPlacemark {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, displayStyle: _const AppIntents.IntentParameter<Value>.PlacemarkDisplayStyle = .name, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, displayStyle: _const AppIntents.IntentParameter<Value>.PlacemarkDisplayStyle = .name, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, displayStyle: _const AppIntents.IntentParameter<Value>.PlacemarkDisplayStyle = .name, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == CoreLocation.CLPlacemark
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, displayStyle: _const AppIntents.IntentParameter<Value>.PlacemarkDisplayStyle = .name, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == CoreLocation.CLPlacemark
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == CoreLocation.CLPlacemark {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, displayStyle: _const AppIntents.IntentParameter<Value>.PlacemarkDisplayStyle = .name, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, displayStyle: _const AppIntents.IntentParameter<Value>.PlacemarkDisplayStyle = .name, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, displayStyle: _const AppIntents.IntentParameter<Value>.PlacemarkDisplayStyle = .name, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == CoreLocation.CLPlacemark
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, displayStyle: _const AppIntents.IntentParameter<Value>.PlacemarkDisplayStyle = .name, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == CoreLocation.CLPlacemark
  convenience public init(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, displayStyle: _const AppIntents.IntentParameter<Value>.PlacemarkDisplayStyle = .name, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, displayStyle: _const AppIntents.IntentParameter<Value>.PlacemarkDisplayStyle = .name, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, displayStyle: _const AppIntents.IntentParameter<Value>.PlacemarkDisplayStyle = .name, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == CoreLocation.CLPlacemark
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, displayStyle: _const AppIntents.IntentParameter<Value>.PlacemarkDisplayStyle = .name, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == CoreLocation.CLPlacemark
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct IntentParameterContext<Value> : AppIntents.AnyIntentValue, @unchecked Swift.Sendable where Value : AppIntents._IntentValue, Value : Swift.Sendable {
  public var isOptional: Swift.Bool {
    get
  }
  public var title: Foundation.LocalizedStringResource {
    get
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.DisplayRepresentation.Image : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol Resolver : Swift.Hashable, Swift.Sendable {
  associatedtype Input : AppIntents._IntentValue
  associatedtype Output : AppIntents._IntentValue
  func resolve(from input: Self.Input, context: AppIntents.IntentParameterContext<Self.Output>) async throws -> Self.Output?
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.Resolver {
  public typealias Context = AppIntents.IntentParameterContext
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType : AppIntents.AppEntity {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, Value.ValueType == OptionsProvider.DefaultValue.ValueType
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, Value.ValueType == OptionsProvider.DefaultValue.ValueType
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, Value.ValueType == OptionsProvider.DefaultValue.ValueType
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, Value.ValueType == OptionsProvider.DefaultValue.ValueType
  convenience public init<Query>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, query: Query) where Query : AppIntents.EntityQuery, Value.ValueType == Query.Entity
  convenience public init<Query>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, requestDisambiguationDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, query: Query) where Query : AppIntents.EntityQuery, Value.ValueType == Query.Entity
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.UnwrappedType : Swift.Collection, Value.ValueType : AppIntents.AppEntity {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, size: AppIntents.IntentCollectionSize, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  @available(tvOS, unavailable)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, size: [AppIntents.IntentWidgetFamily : AppIntents.IntentCollectionSize], inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, size: AppIntents.IntentCollectionSize, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  @available(tvOS, unavailable)
  convenience public init(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, size: [AppIntents.IntentWidgetFamily : AppIntents.IntentCollectionSize], inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, size: AppIntents.IntentCollectionSize, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  @available(tvOS, unavailable)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, size: [AppIntents.IntentWidgetFamily : AppIntents.IntentCollectionSize], inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, size: AppIntents.IntentCollectionSize, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  @available(tvOS, unavailable)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, size: [AppIntents.IntentWidgetFamily : AppIntents.IntentCollectionSize], inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Query>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, size: AppIntents.IntentCollectionSize, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, query: Query) where Query : AppIntents.EntityQuery, Value.ValueType == Query.Entity
  @available(tvOS, unavailable)
  convenience public init<Query>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, size: [AppIntents.IntentWidgetFamily : AppIntents.IntentCollectionSize], inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, query: Query) where Query : AppIntents.EntityQuery, Value.ValueType == Query.Entity
  convenience public init<Query>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, size: AppIntents.IntentCollectionSize, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, query: Query) where Query : AppIntents.EntityQuery, Value.ValueType == Query.Entity
  @available(tvOS, unavailable)
  convenience public init<Query>(description: Foundation.LocalizedStringResource? = nil, default defaultValue: Value.UnwrappedType? = nil, size: [AppIntents.IntentWidgetFamily : AppIntents.IntentCollectionSize], inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, query: Query) where Query : AppIntents.EntityQuery, Value.ValueType == Query.Entity
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas {
  @_marker public protocol SystemIntent : AppIntents.AssistantSchemas.Model {
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.IntentSchema : AppIntents.AssistantSchemas.SystemIntent {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema.IntentSchema : AppIntents.AssistantSchemas.SystemIntent {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.Intent where Self == AppIntents.AssistantSchemas.IntentSchema {
  @_alwaysEmitIntoClient public static var system: some AppIntents.AssistantSchemas.SystemIntent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("system")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.SystemIntent {
  @_alwaysEmitIntoClient public var search: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("ShowInAppSearchResultsIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public protocol AssistantEnum : AppIntents.AppEnum {
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitDuration> {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Duration? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Duration, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Duration? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Duration, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitDuration>
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitDuration>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitEnergy> {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Energy? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Energy, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Energy? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Energy, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitEnergy>
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitEnergy>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitLength> {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Length? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Length, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Length? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Length, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitLength>
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitLength>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitMass> {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Mass? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Mass, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Mass? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Mass, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitMass>
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitMass>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitSpeed> {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Speed? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Speed, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Speed? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Speed, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitSpeed>
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitSpeed>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitTemperature> {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Temperature? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Temperature, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Temperature? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Temperature, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitTemperature>
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitTemperature>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitVolume> {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Volume? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Volume, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Volume? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Volume, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitVolume>
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitVolume>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitAcceleration> {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Acceleration? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Acceleration, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Acceleration? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Acceleration, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitAcceleration>
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitAcceleration>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitAngle> {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Angle? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Angle, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Angle? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Angle, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitAngle>
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitAngle>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitArea> {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Area? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Area, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Area? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Area, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitArea>
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitArea>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitConcentrationMass> {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.ConcentrationMass? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.ConcentrationMass, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.ConcentrationMass? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.ConcentrationMass, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitConcentrationMass>
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitConcentrationMass>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitDispersion> {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Dispersion? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Dispersion, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Dispersion? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Dispersion, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitDispersion>
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitDispersion>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitElectricCharge> {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.ElectricCharge? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.ElectricCharge, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.ElectricCharge? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.ElectricCharge, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitElectricCharge>
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitElectricCharge>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitElectricCurrent> {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.ElectricCurrent? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.ElectricCurrent, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.ElectricCurrent? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.ElectricCurrent, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitElectricCurrent>
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitElectricCurrent>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitElectricPotentialDifference> {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.ElectricPotentialDifference? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.ElectricPotentialDifference, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.ElectricPotentialDifference? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.ElectricPotentialDifference, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitElectricPotentialDifference>
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitElectricPotentialDifference>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitElectricResistance> {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.ElectricResistance? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.ElectricResistance, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.ElectricResistance? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.ElectricResistance, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitElectricResistance>
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitElectricResistance>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitFrequency> {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Frequency? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Frequency, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Frequency? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Frequency, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitFrequency>
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitFrequency>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitFuelEfficiency> {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.FuelEfficiency? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.FuelEfficiency, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.FuelEfficiency? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.FuelEfficiency, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitFuelEfficiency>
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitFuelEfficiency>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitIlluminance> {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Illuminance? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Illuminance, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Illuminance? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Illuminance, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitIlluminance>
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitIlluminance>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitInformationStorage> {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.InformationStorage? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.InformationStorage, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.InformationStorage? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.InformationStorage, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitInformationStorage>
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitInformationStorage>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitPower> {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Power? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Power, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Power? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Power, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitPower>
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitPower>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitPressure> {
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Pressure? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Pressure, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Pressure? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Pressure, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitPressure>
  convenience public init<Spec, OptionsProvider>(title: Foundation.LocalizedStringResource, description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitPressure>
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitDuration> {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Duration? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Duration, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Duration? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Duration, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitDuration>
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitDuration>
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitEnergy> {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Energy? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Energy, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Energy? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Energy, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitEnergy>
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitEnergy>
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitLength> {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Length? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Length, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Length? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Length, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitLength>
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitLength>
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitMass> {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Mass? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Mass, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Mass? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Mass, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitMass>
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitMass>
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitSpeed> {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Speed? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Speed, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Speed? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Speed, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitSpeed>
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitSpeed>
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitTemperature> {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Temperature? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Temperature, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Temperature? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Temperature, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitTemperature>
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitTemperature>
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitVolume> {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Volume? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Volume, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Volume? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Volume, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitVolume>
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitVolume>
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitAcceleration> {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Acceleration? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Acceleration, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Acceleration? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Acceleration, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitAcceleration>
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitAcceleration>
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitAngle> {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Angle? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Angle, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Angle? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Angle, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitAngle>
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitAngle>
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitArea> {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Area? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Area, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Area? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Area, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitArea>
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitArea>
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitConcentrationMass> {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.ConcentrationMass? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.ConcentrationMass, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.ConcentrationMass? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.ConcentrationMass, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitConcentrationMass>
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitConcentrationMass>
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitDispersion> {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Dispersion? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Dispersion, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Dispersion? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Dispersion, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitDispersion>
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitDispersion>
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitElectricCharge> {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.ElectricCharge? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.ElectricCharge, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.ElectricCharge? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.ElectricCharge, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitElectricCharge>
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitElectricCharge>
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitElectricCurrent> {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.ElectricCurrent? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.ElectricCurrent, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.ElectricCurrent? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.ElectricCurrent, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitElectricCurrent>
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitElectricCurrent>
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitElectricPotentialDifference> {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.ElectricPotentialDifference? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.ElectricPotentialDifference, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.ElectricPotentialDifference? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.ElectricPotentialDifference, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitElectricPotentialDifference>
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitElectricPotentialDifference>
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitElectricResistance> {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.ElectricResistance? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.ElectricResistance, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.ElectricResistance? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.ElectricResistance, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitElectricResistance>
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitElectricResistance>
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitFrequency> {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Frequency? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Frequency, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Frequency? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Frequency, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitFrequency>
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitFrequency>
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitFuelEfficiency> {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.FuelEfficiency? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.FuelEfficiency, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.FuelEfficiency? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.FuelEfficiency, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitFuelEfficiency>
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitFuelEfficiency>
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitIlluminance> {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Illuminance? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Illuminance, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Illuminance? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Illuminance, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitIlluminance>
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitIlluminance>
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitInformationStorage> {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.InformationStorage? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.InformationStorage, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.InformationStorage? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.InformationStorage, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitInformationStorage>
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitInformationStorage>
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitPower> {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Power? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Power, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Power? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Power, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitPower>
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitPower>
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitPressure> {
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Pressure? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Pressure, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default)
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, defaultUnit: _const AppIntents.IntentParameter<Value>.Pressure? = nil, defaultUnitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<Spec>(description: Foundation.LocalizedStringResource? = nil, defaultValue: _const Swift.Double? = nil, unit: _const AppIntents.IntentParameter<Value>.Pressure, unitAdjustForLocale: _const Swift.Bool = false, supportsNegativeNumbers: _const Swift.Bool = true, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec) where Spec : AppIntents.ResolverSpecification
  convenience public init<OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, optionsProvider: OptionsProvider) where OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitPressure>
  convenience public init<Spec, OptionsProvider>(description: Foundation.LocalizedStringResource? = nil, requestValueDialog: AppIntents.IntentDialog? = nil, inputConnectionBehavior: _const AppIntents.InputConnectionBehavior = .default, @AppIntents.ResolverSpecificationBuilder<Value.UnwrappedType> resolvers: @escaping () -> Spec, optionsProvider: OptionsProvider) where Spec : AppIntents.ResolverSpecification, OptionsProvider : AppIntents.DynamicOptionsProvider, OptionsProvider.DefaultValue.ValueType == Foundation.Measurement<Foundation.UnitPressure>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct ParameterSummaryString<Intent> : Swift.ExpressibleByStringInterpolation where Intent : AppIntents.AppIntent {
  public init(_ value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(stringInterpolation: AppIntents.ParameterSummaryString<Intent>.StringInterpolation)
  public struct StringInterpolation : Swift.StringInterpolationProtocol {
    public init(literalCapacity: Swift.Int, interpolationCount: Swift.Int)
    public mutating func appendLiteral(_ literal: Swift.String)
    public mutating func appendInterpolation<ValueType, Subject>(_ subject: Subject) where ValueType : AppIntents._IntentValue, ValueType : Swift.Sendable, Subject : Swift.KeyPath<Intent, AppIntents.IntentParameter<ValueType>>
    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
    public typealias StringLiteralType = Swift.String
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias StringLiteralType = Swift.String
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias UnicodeScalarLiteralType = Swift.String
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas {
  @_marker public protocol WordProcessorIntent : AppIntents.AssistantSchemas.Model {
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.IntentSchema : AppIntents.AssistantSchemas.WordProcessorIntent {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema.IntentSchema : AppIntents.AssistantSchemas.WordProcessorIntent {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.Intent where Self == AppIntents.AssistantSchemas.IntentSchema {
  @_alwaysEmitIntoClient public static var wordProcessor: some AppIntents.AssistantSchemas.WordProcessorIntent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("wordProcessor")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.WordProcessorIntent {
  @_alwaysEmitIntoClient public var create: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("CreateWordProcessorDocumentIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var open: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("OpenWordProcessorDocumentIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var createPage: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("CreateWordProcessorPageIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var openPage: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("OpenWordProcessorPageIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var addTextBoxToPage: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("AddTextBoxToWordProcessorPageIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var addVideoToPage: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("AddVideoToWordProcessorPageIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var addImageToPage: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("AddImageToWordProcessorPageIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var addAudioToPage: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("AddAudioToWordProcessorPageIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var addWebVideoToPage: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("AddWebVideoToWordProcessorPageIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas {
  @_marker public protocol WordProcessorEntity : AppIntents.AssistantSchemas.Model {
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.EntitySchema : AppIntents.AssistantSchemas.WordProcessorEntity {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema.EntitySchema : AppIntents.AssistantSchemas.WordProcessorEntity {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.Entity where Self == AppIntents.AssistantSchemas.EntitySchema {
  @_alwaysEmitIntoClient public static var wordProcessor: some AppIntents.AssistantSchemas.WordProcessorEntity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("wordProcessor")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.WordProcessorEntity {
  @_alwaysEmitIntoClient public var document: some AppIntents.AssistantSchemas.Entity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("WordProcessorDocumentEntity")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var page: some AppIntents.AssistantSchemas.Entity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("WordProcessorPageEntity")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var template: some AppIntents.AssistantSchemas.Entity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("WordProcessorDocumentTemplateEntity")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Foundation.DateComponents : AppIntents._IntentValue {
  public static var defaultResolverSpecification: some AppIntents.ResolverSpecification {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Specification = @_opaqueReturnTypeOf("$s10Foundation14DateComponentsV10AppIntentsE28defaultResolverSpecificationQrvpZ", 0) __
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias UnwrappedType = Foundation.DateComponents
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ValueType = Foundation.DateComponents
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.DateComponents {
  final public var dateKind: AppIntents.IntentParameter<Value>.DateKind? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.DateComponents {
  public var dateKind: AppIntents.IntentParameter<Value>.DateKind? {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas {
  @_marker public protocol WhiteboardIntent : AppIntents.AssistantSchemas.Model {
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.IntentSchema : AppIntents.AssistantSchemas.WhiteboardIntent {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema.IntentSchema : AppIntents.AssistantSchemas.WhiteboardIntent {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.Intent where Self == AppIntents.AssistantSchemas.IntentSchema {
  @_alwaysEmitIntoClient public static var whiteboard: some AppIntents.AssistantSchemas.WhiteboardIntent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("whiteboard")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.WhiteboardIntent {
  @_alwaysEmitIntoClient public var createBoard: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("CreateCanvasBoardIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var openBoard: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("OpenCanvasBoardIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var updateBoard: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("UpdateCanvasBoardIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var deleteBoard: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("DeleteCanvasBoardIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var createItem: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("CreateCanvasItemIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var updateItem: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("UpdateCanvasItemIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var deleteItem: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("DeleteCanvasItemIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas {
  @_marker public protocol WhiteboardEntity : AppIntents.AssistantSchemas.Model {
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.EntitySchema : AppIntents.AssistantSchemas.WhiteboardEntity {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema.EntitySchema : AppIntents.AssistantSchemas.WhiteboardEntity {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.Entity where Self == AppIntents.AssistantSchemas.EntitySchema {
  @_alwaysEmitIntoClient public static var whiteboard: some AppIntents.AssistantSchemas.WhiteboardEntity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("whiteboard")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.WhiteboardEntity {
  @_alwaysEmitIntoClient public var board: some AppIntents.AssistantSchemas.Entity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("CanvasEntity")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var item: some AppIntents.AssistantSchemas.Entity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("CanvasItemEntity")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas {
  @_marker public protocol WhiteboardEnum : AppIntents.AssistantSchemas.Model {
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.EnumSchema : AppIntents.AssistantSchemas.WhiteboardEnum {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema.EnumSchema : AppIntents.AssistantSchemas.WhiteboardEnum {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.Enum where Self == AppIntents.AssistantSchemas.EnumSchema {
  @_alwaysEmitIntoClient public static var whiteboard: some AppIntents.AssistantSchemas.WhiteboardEnum {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EnumSchema("whiteboard")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.WhiteboardEnum {
  @_alwaysEmitIntoClient public var color: some AppIntents.AssistantSchemas.Enum {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EnumSchema("CanvasColor")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var itemType: some AppIntents.AssistantSchemas.Enum {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EnumSchema("CanvasItemType")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.DisplayRepresentation {
  public struct Image : Swift.Equatable, @unchecked Swift.Sendable {
    public init(named name: Swift.String, isTemplate: Swift.Bool? = nil)
    public init(systemName name: Swift.String, isTemplate: Swift.Bool? = nil)
    public init(data: Foundation.Data, isTemplate: Swift.Bool? = nil)
    public init(url: Foundation.URL, isTemplate: Swift.Bool? = nil)
    public init(url: Foundation.URL, width: Swift.Double, height: Swift.Double, isTemplate: Swift.Bool? = nil)
    public static func == (a: AppIntents.DisplayRepresentation.Image, b: AppIntents.DisplayRepresentation.Image) -> Swift.Bool
  }
}
extension AppIntents.DisplayRepresentation.Image {
  @available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
  public struct DisplayStyle : Swift.Equatable, Swift.Sendable {
    public static var circular: AppIntents.DisplayRepresentation.Image.DisplayStyle {
      get
    }
    public static var `default`: AppIntents.DisplayRepresentation.Image.DisplayStyle {
      get
    }
    public static func == (a: AppIntents.DisplayRepresentation.Image.DisplayStyle, b: AppIntents.DisplayRepresentation.Image.DisplayStyle) -> Swift.Bool
  }
  @available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
  public init(named name: Swift.String, isTemplate: Swift.Bool? = nil, displayStyle: AppIntents.DisplayRepresentation.Image.DisplayStyle)
  @available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
  public init(data: Foundation.Data, isTemplate: Swift.Bool? = nil, displayStyle: AppIntents.DisplayRepresentation.Image.DisplayStyle)
  @available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
  public init(url: Foundation.URL, isTemplate: Swift.Bool? = nil, displayStyle: AppIntents.DisplayRepresentation.Image.DisplayStyle)
  @available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
  public init(url: Foundation.URL, width: Swift.Double, height: Swift.Double, isTemplate: Swift.Bool? = nil, displayStyle: AppIntents.DisplayRepresentation.Image.DisplayStyle)
}
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension CoreSpotlight.CSSearchableIndex {
  public func indexAppEntities(_ appEntities: [some IndexedEntity], priority: Swift.Int = 0) async throws
  public func deleteAppEntities<Entity>(identifiedBy identifiers: [Entity.ID], ofType type: Entity.Type) async throws where Entity : AppIntents.IndexedEntity
  public func deleteAppEntities<Entity>(ofType entityType: Entity.Type) async throws where Entity : AppIntents.IndexedEntity
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.Bool : AppIntents._IntentValue {
  public static var defaultResolverSpecification: some AppIntents.ResolverSpecification {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Specification = @_opaqueReturnTypeOf("$sSb10AppIntentsE28defaultResolverSpecificationQrvpZ", 0) __
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias UnwrappedType = Swift.Bool
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ValueType = Swift.Bool
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public struct BoolFromStringResolver : AppIntents.Resolver {
  public func resolve(from input: Swift.String, context: AppIntents.IntentParameterContext<Swift.Bool>) async throws -> Swift.Bool?
  public static func == (a: AppIntents.BoolFromStringResolver, b: AppIntents.BoolFromStringResolver) -> Swift.Bool
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Input = Swift.String
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Output = Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.Bool {
  public struct IntentDisplayName {
    public let `true`: Foundation.LocalizedStringResource
    public let `false`: Foundation.LocalizedStringResource
    public init(true: Foundation.LocalizedStringResource, false: Foundation.LocalizedStringResource)
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Swift.Bool {
  final public var displayName: Swift.Bool.IntentDisplayName? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Swift.Bool {
  public var displayName: Swift.Bool.IntentDisplayName? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol PersistentlyIdentifiable {
  static var persistentIdentifier: Swift.String { get }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.PersistentlyIdentifiable {
  public static var persistentIdentifier: Swift.String {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas {
  @_marker public protocol JournalIntent : AppIntents.AssistantSchemas.Model {
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.IntentSchema : AppIntents.AssistantSchemas.JournalIntent {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema.IntentSchema : AppIntents.AssistantSchemas.JournalIntent {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.Intent where Self == AppIntents.AssistantSchemas.IntentSchema {
  @_alwaysEmitIntoClient public static var journal: some AppIntents.AssistantSchemas.JournalIntent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("journal")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.JournalIntent {
  @_alwaysEmitIntoClient public var createEntry: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("CreateJournalEntryIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var createAudioEntry: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("CreateJournalAudioEntryIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var search: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("SearchJournalEntriesIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var updateEntry: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("UpdateJournalEntryIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
  @_alwaysEmitIntoClient public var deleteEntry: some AppIntents.AssistantSchemas.Intent {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.IntentSchema("DeleteJournalEntryIntent")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas {
  @_marker public protocol JournalEntity : AppIntents.AssistantSchemas.Model {
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.EntitySchema : AppIntents.AssistantSchemas.JournalEntity {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension AppIntents.AssistantSchema.EntitySchema : AppIntents.AssistantSchemas.JournalEntity {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.Entity where Self == AppIntents.AssistantSchemas.EntitySchema {
  @_alwaysEmitIntoClient public static var journal: some AppIntents.AssistantSchemas.JournalEntity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("journal")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, visionOS 1.0, *)
extension AppIntents.AssistantSchemas.JournalEntity {
  @_alwaysEmitIntoClient public var entry: some AppIntents.AssistantSchemas.Entity {
    get {
        if #available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *) {
            return AssistantSchema.EntitySchema("JournalEntity")
        } else {
            fatalError("Do not reference schema types directly")
        }
    }
  }
}
@available(macOS 14.2, iOS 17.2, watchOS 10.2, tvOS 17.2, *)
public enum StringSearchScope : Swift.String, AppIntents.AppEnum {
  case general
  case movies
  case tv
  case freeformVideo
  public static var typeDisplayRepresentation: AppIntents.TypeDisplayRepresentation
  public static var caseDisplayRepresentations: [AppIntents.StringSearchScope : AppIntents.DisplayRepresentation]
  public init?(rawValue: Swift.String)
  @available(iOS 17.2, tvOS 17.2, watchOS 10.2, macOS 14.2, *)
  public typealias AllCases = [AppIntents.StringSearchScope]
  @available(iOS 17.2, tvOS 17.2, watchOS 10.2, macOS 14.2, *)
  public typealias RawValue = Swift.String
  @available(iOS 17.2, tvOS 17.2, watchOS 10.2, macOS 14.2, *)
  public typealias Specification = @_opaqueReturnTypeOf("$s10AppIntents0A4EnumPAAE28defaultResolverSpecificationQrvpZ", 0) __<AppIntents.StringSearchScope>
  @available(iOS 17.2, tvOS 17.2, watchOS 10.2, macOS 14.2, *)
  public typealias UnwrappedType = AppIntents.StringSearchScope
  @available(iOS 17.2, tvOS 17.2, watchOS 10.2, macOS 14.2, *)
  public typealias ValueType = AppIntents.StringSearchScope
  nonisolated public static var allCases: [AppIntents.StringSearchScope] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(macOS 14.2, iOS 17.2, watchOS 10.2, tvOS 17.2, *)
@available(watchOS, unavailable)
public enum VideoCategory : Swift.String, AppIntents.AppEnum {
  case movies
  case tv
  case freeform
  public static var typeDisplayRepresentation: AppIntents.TypeDisplayRepresentation
  public static var caseDisplayRepresentations: [AppIntents.VideoCategory : AppIntents.DisplayRepresentation]
  public init?(rawValue: Swift.String)
  @available(iOS 17.2, tvOS 17.2, watchOS 10.2, macOS 14.2, *)
  public typealias AllCases = [AppIntents.VideoCategory]
  @available(iOS 17.2, tvOS 17.2, watchOS 10.2, macOS 14.2, *)
  public typealias RawValue = Swift.String
  @available(iOS 17.2, tvOS 17.2, watchOS 10.2, macOS 14.2, *)
  public typealias Specification = @_opaqueReturnTypeOf("$s10AppIntents0A4EnumPAAE28defaultResolverSpecificationQrvpZ", 0) __<AppIntents.VideoCategory>
  @available(iOS 17.2, tvOS 17.2, watchOS 10.2, macOS 14.2, *)
  public typealias UnwrappedType = AppIntents.VideoCategory
  @available(iOS 17.2, tvOS 17.2, watchOS 10.2, macOS 14.2, *)
  public typealias ValueType = AppIntents.VideoCategory
  nonisolated public static var allCases: [AppIntents.VideoCategory] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(macOS 14.2, iOS 17.2, watchOS 10.2, tvOS 17.2, *)
public struct StringSearchCriteria : AppIntents.SearchCriteria {
  public typealias SearchScopes = [AppIntents.StringSearchScope]
  public var term: Swift.String
  public init(term: Swift.String)
  public static func == (a: AppIntents.StringSearchCriteria, b: AppIntents.StringSearchCriteria) -> Swift.Bool
  @available(iOS 17.2, tvOS 17.2, watchOS 10.2, macOS 14.2, *)
  public typealias Specification = @_opaqueReturnTypeOf("$s10AppIntents20StringSearchCriteriaV28defaultResolverSpecificationQrvpZ", 0) __
  @available(iOS 17.2, tvOS 17.2, watchOS 10.2, macOS 14.2, *)
  public typealias UnwrappedType = AppIntents.StringSearchCriteria
  @available(iOS 17.2, tvOS 17.2, watchOS 10.2, macOS 14.2, *)
  public typealias ValueType = AppIntents.StringSearchCriteria
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 14.2, iOS 17.2, watchOS 10.2, tvOS 17.2, *)
public protocol ShowInAppSearchResultsIntent : AppIntents.SystemIntent {
  associatedtype Criteria : AppIntents.SearchCriteria
  static var searchScopes: Self.Criteria.SearchScopes { get }
  var criteria: Self.Criteria { get set }
}
@available(macOS 14.2, iOS 17.2, watchOS 10.2, tvOS 17.2, *)
extension AppIntents.ShowInAppSearchResultsIntent {
  public static var openAppWhenRun: Swift.Bool {
    get
  }
}
@available(macOS 14.2, iOS 17.2, tvOS 17.2, *)
@available(watchOS, unavailable)
public protocol PlayVideoIntent : AppIntents.SystemIntent {
  static var supportedCategories: [AppIntents.VideoCategory] { get }
  var term: Swift.String { get set }
}
@available(macOS 14.2, iOS 17.2, tvOS 17.2, *)
@available(watchOS, unavailable)
extension AppIntents.PlayVideoIntent {
  public static var openAppWhenRun: Swift.Bool {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ParameterSummaryCaseBuilder {
  public static func buildBlock<C0, DefaultSummary>(_ c0: C0, _ default: AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> AppIntents.ParameterSummaryTupleCaseCondition<Intent, Value, (C0, AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)> where Intent == C0.Intent, C0 : AppIntents._ParameterSummarySwitchCase, DefaultSummary : AppIntents.ParameterSummary
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ParameterSummaryCaseBuilder {
  public static func buildBlock<C0, C1, DefaultSummary>(_ c0: C0, _ c1: C1, _ default: AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> AppIntents.ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)> where Intent == C0.Intent, C0 : AppIntents._ParameterSummarySwitchCase, C1 : AppIntents._ParameterSummarySwitchCase, DefaultSummary : AppIntents.ParameterSummary, C0.Intent == C1.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ParameterSummaryCaseBuilder {
  public static func buildBlock<C0, C1, C2, DefaultSummary>(_ c0: C0, _ c1: C1, _ c2: C2, _ default: AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> AppIntents.ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)> where Intent == C0.Intent, C0 : AppIntents._ParameterSummarySwitchCase, C1 : AppIntents._ParameterSummarySwitchCase, C2 : AppIntents._ParameterSummarySwitchCase, DefaultSummary : AppIntents.ParameterSummary, C0.Intent == C1.Intent, C1.Intent == C2.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ParameterSummaryCaseBuilder {
  public static func buildBlock<C0, C1, C2, C3, DefaultSummary>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ default: AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> AppIntents.ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)> where Intent == C0.Intent, C0 : AppIntents._ParameterSummarySwitchCase, C1 : AppIntents._ParameterSummarySwitchCase, C2 : AppIntents._ParameterSummarySwitchCase, C3 : AppIntents._ParameterSummarySwitchCase, DefaultSummary : AppIntents.ParameterSummary, C0.Intent == C1.Intent, C1.Intent == C2.Intent, C2.Intent == C3.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ParameterSummaryCaseBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, DefaultSummary>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ default: AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> AppIntents.ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)> where Intent == C0.Intent, C0 : AppIntents._ParameterSummarySwitchCase, C1 : AppIntents._ParameterSummarySwitchCase, C2 : AppIntents._ParameterSummarySwitchCase, C3 : AppIntents._ParameterSummarySwitchCase, C4 : AppIntents._ParameterSummarySwitchCase, DefaultSummary : AppIntents.ParameterSummary, C0.Intent == C1.Intent, C1.Intent == C2.Intent, C2.Intent == C3.Intent, C3.Intent == C4.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ParameterSummaryCaseBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, C5, DefaultSummary>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ default: AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> AppIntents.ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)> where Intent == C0.Intent, C0 : AppIntents._ParameterSummarySwitchCase, C1 : AppIntents._ParameterSummarySwitchCase, C2 : AppIntents._ParameterSummarySwitchCase, C3 : AppIntents._ParameterSummarySwitchCase, C4 : AppIntents._ParameterSummarySwitchCase, C5 : AppIntents._ParameterSummarySwitchCase, DefaultSummary : AppIntents.ParameterSummary, C0.Intent == C1.Intent, C1.Intent == C2.Intent, C2.Intent == C3.Intent, C3.Intent == C4.Intent, C4.Intent == C5.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ParameterSummaryCaseBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, DefaultSummary>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ default: AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> AppIntents.ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)> where Intent == C0.Intent, C0 : AppIntents._ParameterSummarySwitchCase, C1 : AppIntents._ParameterSummarySwitchCase, C2 : AppIntents._ParameterSummarySwitchCase, C3 : AppIntents._ParameterSummarySwitchCase, C4 : AppIntents._ParameterSummarySwitchCase, C5 : AppIntents._ParameterSummarySwitchCase, C6 : AppIntents._ParameterSummarySwitchCase, DefaultSummary : AppIntents.ParameterSummary, C0.Intent == C1.Intent, C1.Intent == C2.Intent, C2.Intent == C3.Intent, C3.Intent == C4.Intent, C4.Intent == C5.Intent, C5.Intent == C6.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ParameterSummaryCaseBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, DefaultSummary>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ default: AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> AppIntents.ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)> where Intent == C0.Intent, C0 : AppIntents._ParameterSummarySwitchCase, C1 : AppIntents._ParameterSummarySwitchCase, C2 : AppIntents._ParameterSummarySwitchCase, C3 : AppIntents._ParameterSummarySwitchCase, C4 : AppIntents._ParameterSummarySwitchCase, C5 : AppIntents._ParameterSummarySwitchCase, C6 : AppIntents._ParameterSummarySwitchCase, C7 : AppIntents._ParameterSummarySwitchCase, DefaultSummary : AppIntents.ParameterSummary, C0.Intent == C1.Intent, C1.Intent == C2.Intent, C2.Intent == C3.Intent, C3.Intent == C4.Intent, C4.Intent == C5.Intent, C5.Intent == C6.Intent, C6.Intent == C7.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ParameterSummaryCaseBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, DefaultSummary>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ default: AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> AppIntents.ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)> where Intent == C0.Intent, C0 : AppIntents._ParameterSummarySwitchCase, C1 : AppIntents._ParameterSummarySwitchCase, C2 : AppIntents._ParameterSummarySwitchCase, C3 : AppIntents._ParameterSummarySwitchCase, C4 : AppIntents._ParameterSummarySwitchCase, C5 : AppIntents._ParameterSummarySwitchCase, C6 : AppIntents._ParameterSummarySwitchCase, C7 : AppIntents._ParameterSummarySwitchCase, C8 : AppIntents._ParameterSummarySwitchCase, DefaultSummary : AppIntents.ParameterSummary, C0.Intent == C1.Intent, C1.Intent == C2.Intent, C2.Intent == C3.Intent, C3.Intent == C4.Intent, C4.Intent == C5.Intent, C5.Intent == C6.Intent, C6.Intent == C7.Intent, C7.Intent == C8.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ParameterSummaryCaseBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, DefaultSummary>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9, _ default: AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> AppIntents.ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)> where Intent == C0.Intent, C0 : AppIntents._ParameterSummarySwitchCase, C1 : AppIntents._ParameterSummarySwitchCase, C2 : AppIntents._ParameterSummarySwitchCase, C3 : AppIntents._ParameterSummarySwitchCase, C4 : AppIntents._ParameterSummarySwitchCase, C5 : AppIntents._ParameterSummarySwitchCase, C6 : AppIntents._ParameterSummarySwitchCase, C7 : AppIntents._ParameterSummarySwitchCase, C8 : AppIntents._ParameterSummarySwitchCase, C9 : AppIntents._ParameterSummarySwitchCase, DefaultSummary : AppIntents.ParameterSummary, C0.Intent == C1.Intent, C1.Intent == C2.Intent, C2.Intent == C3.Intent, C3.Intent == C4.Intent, C4.Intent == C5.Intent, C5.Intent == C6.Intent, C6.Intent == C7.Intent, C7.Intent == C8.Intent, C8.Intent == C9.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ParameterSummaryCaseBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, DefaultSummary>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9, _ c10: C10, _ default: AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> AppIntents.ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)> where Intent == C0.Intent, C0 : AppIntents._ParameterSummarySwitchCase, C1 : AppIntents._ParameterSummarySwitchCase, C2 : AppIntents._ParameterSummarySwitchCase, C3 : AppIntents._ParameterSummarySwitchCase, C4 : AppIntents._ParameterSummarySwitchCase, C5 : AppIntents._ParameterSummarySwitchCase, C6 : AppIntents._ParameterSummarySwitchCase, C7 : AppIntents._ParameterSummarySwitchCase, C8 : AppIntents._ParameterSummarySwitchCase, C9 : AppIntents._ParameterSummarySwitchCase, C10 : AppIntents._ParameterSummarySwitchCase, DefaultSummary : AppIntents.ParameterSummary, C0.Intent == C1.Intent, C1.Intent == C2.Intent, C2.Intent == C3.Intent, C3.Intent == C4.Intent, C4.Intent == C5.Intent, C5.Intent == C6.Intent, C6.Intent == C7.Intent, C7.Intent == C8.Intent, C8.Intent == C9.Intent, C9.Intent == C10.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ParameterSummaryCaseBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, DefaultSummary>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9, _ c10: C10, _ c11: C11, _ default: AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> AppIntents.ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)> where Intent == C0.Intent, C0 : AppIntents._ParameterSummarySwitchCase, C1 : AppIntents._ParameterSummarySwitchCase, C2 : AppIntents._ParameterSummarySwitchCase, C3 : AppIntents._ParameterSummarySwitchCase, C4 : AppIntents._ParameterSummarySwitchCase, C5 : AppIntents._ParameterSummarySwitchCase, C6 : AppIntents._ParameterSummarySwitchCase, C7 : AppIntents._ParameterSummarySwitchCase, C8 : AppIntents._ParameterSummarySwitchCase, C9 : AppIntents._ParameterSummarySwitchCase, C10 : AppIntents._ParameterSummarySwitchCase, C11 : AppIntents._ParameterSummarySwitchCase, DefaultSummary : AppIntents.ParameterSummary, C0.Intent == C1.Intent, C1.Intent == C2.Intent, C2.Intent == C3.Intent, C3.Intent == C4.Intent, C4.Intent == C5.Intent, C5.Intent == C6.Intent, C6.Intent == C7.Intent, C7.Intent == C8.Intent, C8.Intent == C9.Intent, C9.Intent == C10.Intent, C10.Intent == C11.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ParameterSummaryCaseBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, DefaultSummary>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9, _ c10: C10, _ c11: C11, _ c12: C12, _ default: AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> AppIntents.ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)> where Intent == C0.Intent, C0 : AppIntents._ParameterSummarySwitchCase, C1 : AppIntents._ParameterSummarySwitchCase, C2 : AppIntents._ParameterSummarySwitchCase, C3 : AppIntents._ParameterSummarySwitchCase, C4 : AppIntents._ParameterSummarySwitchCase, C5 : AppIntents._ParameterSummarySwitchCase, C6 : AppIntents._ParameterSummarySwitchCase, C7 : AppIntents._ParameterSummarySwitchCase, C8 : AppIntents._ParameterSummarySwitchCase, C9 : AppIntents._ParameterSummarySwitchCase, C10 : AppIntents._ParameterSummarySwitchCase, C11 : AppIntents._ParameterSummarySwitchCase, C12 : AppIntents._ParameterSummarySwitchCase, DefaultSummary : AppIntents.ParameterSummary, C0.Intent == C1.Intent, C1.Intent == C2.Intent, C2.Intent == C3.Intent, C3.Intent == C4.Intent, C4.Intent == C5.Intent, C5.Intent == C6.Intent, C6.Intent == C7.Intent, C7.Intent == C8.Intent, C8.Intent == C9.Intent, C9.Intent == C10.Intent, C10.Intent == C11.Intent, C11.Intent == C12.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ParameterSummaryCaseBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, DefaultSummary>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9, _ c10: C10, _ c11: C11, _ c12: C12, _ c13: C13, _ default: AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> AppIntents.ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)> where Intent == C0.Intent, C0 : AppIntents._ParameterSummarySwitchCase, C1 : AppIntents._ParameterSummarySwitchCase, C2 : AppIntents._ParameterSummarySwitchCase, C3 : AppIntents._ParameterSummarySwitchCase, C4 : AppIntents._ParameterSummarySwitchCase, C5 : AppIntents._ParameterSummarySwitchCase, C6 : AppIntents._ParameterSummarySwitchCase, C7 : AppIntents._ParameterSummarySwitchCase, C8 : AppIntents._ParameterSummarySwitchCase, C9 : AppIntents._ParameterSummarySwitchCase, C10 : AppIntents._ParameterSummarySwitchCase, C11 : AppIntents._ParameterSummarySwitchCase, C12 : AppIntents._ParameterSummarySwitchCase, C13 : AppIntents._ParameterSummarySwitchCase, DefaultSummary : AppIntents.ParameterSummary, C0.Intent == C1.Intent, C1.Intent == C2.Intent, C2.Intent == C3.Intent, C3.Intent == C4.Intent, C4.Intent == C5.Intent, C5.Intent == C6.Intent, C6.Intent == C7.Intent, C7.Intent == C8.Intent, C8.Intent == C9.Intent, C9.Intent == C10.Intent, C10.Intent == C11.Intent, C11.Intent == C12.Intent, C12.Intent == C13.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ParameterSummaryCaseBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, DefaultSummary>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9, _ c10: C10, _ c11: C11, _ c12: C12, _ c13: C13, _ c14: C14, _ default: AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> AppIntents.ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, AppIntents.ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)> where Intent == C0.Intent, C0 : AppIntents._ParameterSummarySwitchCase, C1 : AppIntents._ParameterSummarySwitchCase, C2 : AppIntents._ParameterSummarySwitchCase, C3 : AppIntents._ParameterSummarySwitchCase, C4 : AppIntents._ParameterSummarySwitchCase, C5 : AppIntents._ParameterSummarySwitchCase, C6 : AppIntents._ParameterSummarySwitchCase, C7 : AppIntents._ParameterSummarySwitchCase, C8 : AppIntents._ParameterSummarySwitchCase, C9 : AppIntents._ParameterSummarySwitchCase, C10 : AppIntents._ParameterSummarySwitchCase, C11 : AppIntents._ParameterSummarySwitchCase, C12 : AppIntents._ParameterSummarySwitchCase, C13 : AppIntents._ParameterSummarySwitchCase, C14 : AppIntents._ParameterSummarySwitchCase, DefaultSummary : AppIntents.ParameterSummary, C0.Intent == C1.Intent, C1.Intent == C2.Intent, C2.Intent == C3.Intent, C3.Intent == C4.Intent, C4.Intent == C5.Intent, C5.Intent == C6.Intent, C6.Intent == C7.Intent, C7.Intent == C8.Intent, C8.Intent == C9.Intent, C9.Intent == C10.Intent, C10.Intent == C11.Intent, C11.Intent == C12.Intent, C12.Intent == C13.Intent, C13.Intent == C14.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPredictionsBuilder {
  public static func buildBlock<A0, A1>(_ a0: A0, _ a1: A1) -> AppIntents.TupleIntentPrediction<A0.Intent, (A0, A1)> where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration, A1 : AppIntents.IntentPredictionConfiguration, A0.Intent == A1.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPredictionsBuilder {
  public static func buildBlock<A0, A1, A2>(_ a0: A0, _ a1: A1, _ a2: A2) -> AppIntents.TupleIntentPrediction<A0.Intent, (A0, A1, A2)> where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration, A1 : AppIntents.IntentPredictionConfiguration, A2 : AppIntents.IntentPredictionConfiguration, A0.Intent == A1.Intent, A1.Intent == A2.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPredictionsBuilder {
  public static func buildBlock<A0, A1, A2, A3>(_ a0: A0, _ a1: A1, _ a2: A2, _ a3: A3) -> AppIntents.TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3)> where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration, A1 : AppIntents.IntentPredictionConfiguration, A2 : AppIntents.IntentPredictionConfiguration, A3 : AppIntents.IntentPredictionConfiguration, A0.Intent == A1.Intent, A1.Intent == A2.Intent, A2.Intent == A3.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPredictionsBuilder {
  public static func buildBlock<A0, A1, A2, A3, A4>(_ a0: A0, _ a1: A1, _ a2: A2, _ a3: A3, _ a4: A4) -> AppIntents.TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4)> where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration, A1 : AppIntents.IntentPredictionConfiguration, A2 : AppIntents.IntentPredictionConfiguration, A3 : AppIntents.IntentPredictionConfiguration, A4 : AppIntents.IntentPredictionConfiguration, A0.Intent == A1.Intent, A1.Intent == A2.Intent, A2.Intent == A3.Intent, A3.Intent == A4.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPredictionsBuilder {
  public static func buildBlock<A0, A1, A2, A3, A4, A5>(_ a0: A0, _ a1: A1, _ a2: A2, _ a3: A3, _ a4: A4, _ a5: A5) -> AppIntents.TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4, A5)> where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration, A1 : AppIntents.IntentPredictionConfiguration, A2 : AppIntents.IntentPredictionConfiguration, A3 : AppIntents.IntentPredictionConfiguration, A4 : AppIntents.IntentPredictionConfiguration, A5 : AppIntents.IntentPredictionConfiguration, A0.Intent == A1.Intent, A1.Intent == A2.Intent, A2.Intent == A3.Intent, A3.Intent == A4.Intent, A4.Intent == A5.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPredictionsBuilder {
  public static func buildBlock<A0, A1, A2, A3, A4, A5, A6>(_ a0: A0, _ a1: A1, _ a2: A2, _ a3: A3, _ a4: A4, _ a5: A5, _ a6: A6) -> AppIntents.TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4, A5, A6)> where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration, A1 : AppIntents.IntentPredictionConfiguration, A2 : AppIntents.IntentPredictionConfiguration, A3 : AppIntents.IntentPredictionConfiguration, A4 : AppIntents.IntentPredictionConfiguration, A5 : AppIntents.IntentPredictionConfiguration, A6 : AppIntents.IntentPredictionConfiguration, A0.Intent == A1.Intent, A1.Intent == A2.Intent, A2.Intent == A3.Intent, A3.Intent == A4.Intent, A4.Intent == A5.Intent, A5.Intent == A6.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPredictionsBuilder {
  public static func buildBlock<A0, A1, A2, A3, A4, A5, A6, A7>(_ a0: A0, _ a1: A1, _ a2: A2, _ a3: A3, _ a4: A4, _ a5: A5, _ a6: A6, _ a7: A7) -> AppIntents.TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4, A5, A6, A7)> where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration, A1 : AppIntents.IntentPredictionConfiguration, A2 : AppIntents.IntentPredictionConfiguration, A3 : AppIntents.IntentPredictionConfiguration, A4 : AppIntents.IntentPredictionConfiguration, A5 : AppIntents.IntentPredictionConfiguration, A6 : AppIntents.IntentPredictionConfiguration, A7 : AppIntents.IntentPredictionConfiguration, A0.Intent == A1.Intent, A1.Intent == A2.Intent, A2.Intent == A3.Intent, A3.Intent == A4.Intent, A4.Intent == A5.Intent, A5.Intent == A6.Intent, A6.Intent == A7.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPredictionsBuilder {
  public static func buildBlock<A0, A1, A2, A3, A4, A5, A6, A7, A8>(_ a0: A0, _ a1: A1, _ a2: A2, _ a3: A3, _ a4: A4, _ a5: A5, _ a6: A6, _ a7: A7, _ a8: A8) -> AppIntents.TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4, A5, A6, A7, A8)> where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration, A1 : AppIntents.IntentPredictionConfiguration, A2 : AppIntents.IntentPredictionConfiguration, A3 : AppIntents.IntentPredictionConfiguration, A4 : AppIntents.IntentPredictionConfiguration, A5 : AppIntents.IntentPredictionConfiguration, A6 : AppIntents.IntentPredictionConfiguration, A7 : AppIntents.IntentPredictionConfiguration, A8 : AppIntents.IntentPredictionConfiguration, A0.Intent == A1.Intent, A1.Intent == A2.Intent, A2.Intent == A3.Intent, A3.Intent == A4.Intent, A4.Intent == A5.Intent, A5.Intent == A6.Intent, A6.Intent == A7.Intent, A7.Intent == A8.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPredictionsBuilder {
  public static func buildBlock<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9>(_ a0: A0, _ a1: A1, _ a2: A2, _ a3: A3, _ a4: A4, _ a5: A5, _ a6: A6, _ a7: A7, _ a8: A8, _ a9: A9) -> AppIntents.TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)> where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration, A1 : AppIntents.IntentPredictionConfiguration, A2 : AppIntents.IntentPredictionConfiguration, A3 : AppIntents.IntentPredictionConfiguration, A4 : AppIntents.IntentPredictionConfiguration, A5 : AppIntents.IntentPredictionConfiguration, A6 : AppIntents.IntentPredictionConfiguration, A7 : AppIntents.IntentPredictionConfiguration, A8 : AppIntents.IntentPredictionConfiguration, A9 : AppIntents.IntentPredictionConfiguration, A0.Intent == A1.Intent, A1.Intent == A2.Intent, A2.Intent == A3.Intent, A3.Intent == A4.Intent, A4.Intent == A5.Intent, A5.Intent == A6.Intent, A6.Intent == A7.Intent, A7.Intent == A8.Intent, A8.Intent == A9.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPredictionsBuilder {
  public static func buildBlock<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10>(_ a0: A0, _ a1: A1, _ a2: A2, _ a3: A3, _ a4: A4, _ a5: A5, _ a6: A6, _ a7: A7, _ a8: A8, _ a9: A9, _ a10: A10) -> AppIntents.TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)> where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration, A1 : AppIntents.IntentPredictionConfiguration, A2 : AppIntents.IntentPredictionConfiguration, A3 : AppIntents.IntentPredictionConfiguration, A4 : AppIntents.IntentPredictionConfiguration, A5 : AppIntents.IntentPredictionConfiguration, A6 : AppIntents.IntentPredictionConfiguration, A7 : AppIntents.IntentPredictionConfiguration, A8 : AppIntents.IntentPredictionConfiguration, A9 : AppIntents.IntentPredictionConfiguration, A10 : AppIntents.IntentPredictionConfiguration, A0.Intent == A1.Intent, A1.Intent == A2.Intent, A2.Intent == A3.Intent, A3.Intent == A4.Intent, A4.Intent == A5.Intent, A5.Intent == A6.Intent, A6.Intent == A7.Intent, A7.Intent == A8.Intent, A8.Intent == A9.Intent, A9.Intent == A10.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPredictionsBuilder {
  public static func buildBlock<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11>(_ a0: A0, _ a1: A1, _ a2: A2, _ a3: A3, _ a4: A4, _ a5: A5, _ a6: A6, _ a7: A7, _ a8: A8, _ a9: A9, _ a10: A10, _ a11: A11) -> AppIntents.TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)> where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration, A1 : AppIntents.IntentPredictionConfiguration, A2 : AppIntents.IntentPredictionConfiguration, A3 : AppIntents.IntentPredictionConfiguration, A4 : AppIntents.IntentPredictionConfiguration, A5 : AppIntents.IntentPredictionConfiguration, A6 : AppIntents.IntentPredictionConfiguration, A7 : AppIntents.IntentPredictionConfiguration, A8 : AppIntents.IntentPredictionConfiguration, A9 : AppIntents.IntentPredictionConfiguration, A10 : AppIntents.IntentPredictionConfiguration, A11 : AppIntents.IntentPredictionConfiguration, A0.Intent == A1.Intent, A1.Intent == A2.Intent, A2.Intent == A3.Intent, A3.Intent == A4.Intent, A4.Intent == A5.Intent, A5.Intent == A6.Intent, A6.Intent == A7.Intent, A7.Intent == A8.Intent, A8.Intent == A9.Intent, A9.Intent == A10.Intent, A10.Intent == A11.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPredictionsBuilder {
  public static func buildBlock<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12>(_ a0: A0, _ a1: A1, _ a2: A2, _ a3: A3, _ a4: A4, _ a5: A5, _ a6: A6, _ a7: A7, _ a8: A8, _ a9: A9, _ a10: A10, _ a11: A11, _ a12: A12) -> AppIntents.TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)> where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration, A1 : AppIntents.IntentPredictionConfiguration, A2 : AppIntents.IntentPredictionConfiguration, A3 : AppIntents.IntentPredictionConfiguration, A4 : AppIntents.IntentPredictionConfiguration, A5 : AppIntents.IntentPredictionConfiguration, A6 : AppIntents.IntentPredictionConfiguration, A7 : AppIntents.IntentPredictionConfiguration, A8 : AppIntents.IntentPredictionConfiguration, A9 : AppIntents.IntentPredictionConfiguration, A10 : AppIntents.IntentPredictionConfiguration, A11 : AppIntents.IntentPredictionConfiguration, A12 : AppIntents.IntentPredictionConfiguration, A0.Intent == A1.Intent, A1.Intent == A2.Intent, A2.Intent == A3.Intent, A3.Intent == A4.Intent, A4.Intent == A5.Intent, A5.Intent == A6.Intent, A6.Intent == A7.Intent, A7.Intent == A8.Intent, A8.Intent == A9.Intent, A9.Intent == A10.Intent, A10.Intent == A11.Intent, A11.Intent == A12.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPredictionsBuilder {
  public static func buildBlock<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13>(_ a0: A0, _ a1: A1, _ a2: A2, _ a3: A3, _ a4: A4, _ a5: A5, _ a6: A6, _ a7: A7, _ a8: A8, _ a9: A9, _ a10: A10, _ a11: A11, _ a12: A12, _ a13: A13) -> AppIntents.TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)> where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration, A1 : AppIntents.IntentPredictionConfiguration, A2 : AppIntents.IntentPredictionConfiguration, A3 : AppIntents.IntentPredictionConfiguration, A4 : AppIntents.IntentPredictionConfiguration, A5 : AppIntents.IntentPredictionConfiguration, A6 : AppIntents.IntentPredictionConfiguration, A7 : AppIntents.IntentPredictionConfiguration, A8 : AppIntents.IntentPredictionConfiguration, A9 : AppIntents.IntentPredictionConfiguration, A10 : AppIntents.IntentPredictionConfiguration, A11 : AppIntents.IntentPredictionConfiguration, A12 : AppIntents.IntentPredictionConfiguration, A13 : AppIntents.IntentPredictionConfiguration, A0.Intent == A1.Intent, A1.Intent == A2.Intent, A2.Intent == A3.Intent, A3.Intent == A4.Intent, A4.Intent == A5.Intent, A5.Intent == A6.Intent, A6.Intent == A7.Intent, A7.Intent == A8.Intent, A8.Intent == A9.Intent, A9.Intent == A10.Intent, A10.Intent == A11.Intent, A11.Intent == A12.Intent, A12.Intent == A13.Intent
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPredictionsBuilder {
  public static func buildBlock<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14>(_ a0: A0, _ a1: A1, _ a2: A2, _ a3: A3, _ a4: A4, _ a5: A5, _ a6: A6, _ a7: A7, _ a8: A8, _ a9: A9, _ a10: A10, _ a11: A11, _ a12: A12, _ a13: A13, _ a14: A14) -> AppIntents.TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)> where Intent == A0.Intent, A0 : AppIntents.IntentPredictionConfiguration, A1 : AppIntents.IntentPredictionConfiguration, A2 : AppIntents.IntentPredictionConfiguration, A3 : AppIntents.IntentPredictionConfiguration, A4 : AppIntents.IntentPredictionConfiguration, A5 : AppIntents.IntentPredictionConfiguration, A6 : AppIntents.IntentPredictionConfiguration, A7 : AppIntents.IntentPredictionConfiguration, A8 : AppIntents.IntentPredictionConfiguration, A9 : AppIntents.IntentPredictionConfiguration, A10 : AppIntents.IntentPredictionConfiguration, A11 : AppIntents.IntentPredictionConfiguration, A12 : AppIntents.IntentPredictionConfiguration, A13 : AppIntents.IntentPredictionConfiguration, A14 : AppIntents.IntentPredictionConfiguration, A0.Intent == A1.Intent, A1.Intent == A2.Intent, A2.Intent == A3.Intent, A3.Intent == A4.Intent, A4.Intent == A5.Intent, A5.Intent == A6.Intent, A6.Intent == A7.Intent, A7.Intent == A8.Intent, A8.Intent == A9.Intent, A9.Intent == A10.Intent, A10.Intent == A11.Intent, A11.Intent == A12.Intent, A12.Intent == A13.Intent, A13.Intent == A14.Intent
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.AppShortcutOptionsCollectionSpecificationBuilder {
  public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> some AppIntents.AppShortcutOptionsCollectionSpecification<Value> where C0 : AppIntents.AppShortcutOptionsCollectionProtocol, C1 : AppIntents.AppShortcutOptionsCollectionProtocol
  
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.AppShortcutOptionsCollectionSpecificationBuilder {
  public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> some AppIntents.AppShortcutOptionsCollectionSpecification<Value> where C0 : AppIntents.AppShortcutOptionsCollectionProtocol, C1 : AppIntents.AppShortcutOptionsCollectionProtocol, C2 : AppIntents.AppShortcutOptionsCollectionProtocol
  
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.AppShortcutOptionsCollectionSpecificationBuilder {
  public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> some AppIntents.AppShortcutOptionsCollectionSpecification<Value> where C0 : AppIntents.AppShortcutOptionsCollectionProtocol, C1 : AppIntents.AppShortcutOptionsCollectionProtocol, C2 : AppIntents.AppShortcutOptionsCollectionProtocol, C3 : AppIntents.AppShortcutOptionsCollectionProtocol
  
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.AppShortcutOptionsCollectionSpecificationBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> some AppIntents.AppShortcutOptionsCollectionSpecification<Value> where C0 : AppIntents.AppShortcutOptionsCollectionProtocol, C1 : AppIntents.AppShortcutOptionsCollectionProtocol, C2 : AppIntents.AppShortcutOptionsCollectionProtocol, C3 : AppIntents.AppShortcutOptionsCollectionProtocol, C4 : AppIntents.AppShortcutOptionsCollectionProtocol
  
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.AppShortcutOptionsCollectionSpecificationBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> some AppIntents.AppShortcutOptionsCollectionSpecification<Value> where C0 : AppIntents.AppShortcutOptionsCollectionProtocol, C1 : AppIntents.AppShortcutOptionsCollectionProtocol, C2 : AppIntents.AppShortcutOptionsCollectionProtocol, C3 : AppIntents.AppShortcutOptionsCollectionProtocol, C4 : AppIntents.AppShortcutOptionsCollectionProtocol, C5 : AppIntents.AppShortcutOptionsCollectionProtocol
  
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.AppShortcutOptionsCollectionSpecificationBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> some AppIntents.AppShortcutOptionsCollectionSpecification<Value> where C0 : AppIntents.AppShortcutOptionsCollectionProtocol, C1 : AppIntents.AppShortcutOptionsCollectionProtocol, C2 : AppIntents.AppShortcutOptionsCollectionProtocol, C3 : AppIntents.AppShortcutOptionsCollectionProtocol, C4 : AppIntents.AppShortcutOptionsCollectionProtocol, C5 : AppIntents.AppShortcutOptionsCollectionProtocol, C6 : AppIntents.AppShortcutOptionsCollectionProtocol
  
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.AppShortcutOptionsCollectionSpecificationBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> some AppIntents.AppShortcutOptionsCollectionSpecification<Value> where C0 : AppIntents.AppShortcutOptionsCollectionProtocol, C1 : AppIntents.AppShortcutOptionsCollectionProtocol, C2 : AppIntents.AppShortcutOptionsCollectionProtocol, C3 : AppIntents.AppShortcutOptionsCollectionProtocol, C4 : AppIntents.AppShortcutOptionsCollectionProtocol, C5 : AppIntents.AppShortcutOptionsCollectionProtocol, C6 : AppIntents.AppShortcutOptionsCollectionProtocol, C7 : AppIntents.AppShortcutOptionsCollectionProtocol
  
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.AppShortcutOptionsCollectionSpecificationBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> some AppIntents.AppShortcutOptionsCollectionSpecification<Value> where C0 : AppIntents.AppShortcutOptionsCollectionProtocol, C1 : AppIntents.AppShortcutOptionsCollectionProtocol, C2 : AppIntents.AppShortcutOptionsCollectionProtocol, C3 : AppIntents.AppShortcutOptionsCollectionProtocol, C4 : AppIntents.AppShortcutOptionsCollectionProtocol, C5 : AppIntents.AppShortcutOptionsCollectionProtocol, C6 : AppIntents.AppShortcutOptionsCollectionProtocol, C7 : AppIntents.AppShortcutOptionsCollectionProtocol, C8 : AppIntents.AppShortcutOptionsCollectionProtocol
  
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.AppShortcutOptionsCollectionSpecificationBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> some AppIntents.AppShortcutOptionsCollectionSpecification<Value> where C0 : AppIntents.AppShortcutOptionsCollectionProtocol, C1 : AppIntents.AppShortcutOptionsCollectionProtocol, C2 : AppIntents.AppShortcutOptionsCollectionProtocol, C3 : AppIntents.AppShortcutOptionsCollectionProtocol, C4 : AppIntents.AppShortcutOptionsCollectionProtocol, C5 : AppIntents.AppShortcutOptionsCollectionProtocol, C6 : AppIntents.AppShortcutOptionsCollectionProtocol, C7 : AppIntents.AppShortcutOptionsCollectionProtocol, C8 : AppIntents.AppShortcutOptionsCollectionProtocol, C9 : AppIntents.AppShortcutOptionsCollectionProtocol
  
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.AppShortcutOptionsCollectionSpecificationBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9, _ c10: C10) -> some AppIntents.AppShortcutOptionsCollectionSpecification<Value> where C0 : AppIntents.AppShortcutOptionsCollectionProtocol, C1 : AppIntents.AppShortcutOptionsCollectionProtocol, C2 : AppIntents.AppShortcutOptionsCollectionProtocol, C3 : AppIntents.AppShortcutOptionsCollectionProtocol, C4 : AppIntents.AppShortcutOptionsCollectionProtocol, C5 : AppIntents.AppShortcutOptionsCollectionProtocol, C6 : AppIntents.AppShortcutOptionsCollectionProtocol, C7 : AppIntents.AppShortcutOptionsCollectionProtocol, C8 : AppIntents.AppShortcutOptionsCollectionProtocol, C9 : AppIntents.AppShortcutOptionsCollectionProtocol, C10 : AppIntents.AppShortcutOptionsCollectionProtocol
  
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.AppShortcutOptionsCollectionSpecificationBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9, _ c10: C10, _ c11: C11) -> some AppIntents.AppShortcutOptionsCollectionSpecification<Value> where C0 : AppIntents.AppShortcutOptionsCollectionProtocol, C1 : AppIntents.AppShortcutOptionsCollectionProtocol, C2 : AppIntents.AppShortcutOptionsCollectionProtocol, C3 : AppIntents.AppShortcutOptionsCollectionProtocol, C4 : AppIntents.AppShortcutOptionsCollectionProtocol, C5 : AppIntents.AppShortcutOptionsCollectionProtocol, C6 : AppIntents.AppShortcutOptionsCollectionProtocol, C7 : AppIntents.AppShortcutOptionsCollectionProtocol, C8 : AppIntents.AppShortcutOptionsCollectionProtocol, C9 : AppIntents.AppShortcutOptionsCollectionProtocol, C10 : AppIntents.AppShortcutOptionsCollectionProtocol, C11 : AppIntents.AppShortcutOptionsCollectionProtocol
  
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.AppShortcutOptionsCollectionSpecificationBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9, _ c10: C10, _ c11: C11, _ c12: C12) -> some AppIntents.AppShortcutOptionsCollectionSpecification<Value> where C0 : AppIntents.AppShortcutOptionsCollectionProtocol, C1 : AppIntents.AppShortcutOptionsCollectionProtocol, C2 : AppIntents.AppShortcutOptionsCollectionProtocol, C3 : AppIntents.AppShortcutOptionsCollectionProtocol, C4 : AppIntents.AppShortcutOptionsCollectionProtocol, C5 : AppIntents.AppShortcutOptionsCollectionProtocol, C6 : AppIntents.AppShortcutOptionsCollectionProtocol, C7 : AppIntents.AppShortcutOptionsCollectionProtocol, C8 : AppIntents.AppShortcutOptionsCollectionProtocol, C9 : AppIntents.AppShortcutOptionsCollectionProtocol, C10 : AppIntents.AppShortcutOptionsCollectionProtocol, C11 : AppIntents.AppShortcutOptionsCollectionProtocol, C12 : AppIntents.AppShortcutOptionsCollectionProtocol
  
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.AppShortcutOptionsCollectionSpecificationBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9, _ c10: C10, _ c11: C11, _ c12: C12, _ c13: C13) -> some AppIntents.AppShortcutOptionsCollectionSpecification<Value> where C0 : AppIntents.AppShortcutOptionsCollectionProtocol, C1 : AppIntents.AppShortcutOptionsCollectionProtocol, C2 : AppIntents.AppShortcutOptionsCollectionProtocol, C3 : AppIntents.AppShortcutOptionsCollectionProtocol, C4 : AppIntents.AppShortcutOptionsCollectionProtocol, C5 : AppIntents.AppShortcutOptionsCollectionProtocol, C6 : AppIntents.AppShortcutOptionsCollectionProtocol, C7 : AppIntents.AppShortcutOptionsCollectionProtocol, C8 : AppIntents.AppShortcutOptionsCollectionProtocol, C9 : AppIntents.AppShortcutOptionsCollectionProtocol, C10 : AppIntents.AppShortcutOptionsCollectionProtocol, C11 : AppIntents.AppShortcutOptionsCollectionProtocol, C12 : AppIntents.AppShortcutOptionsCollectionProtocol, C13 : AppIntents.AppShortcutOptionsCollectionProtocol
  
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.AppShortcutOptionsCollectionSpecificationBuilder {
  public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9, _ c10: C10, _ c11: C11, _ c12: C12, _ c13: C13, _ c14: C14) -> some AppIntents.AppShortcutOptionsCollectionSpecification<Value> where C0 : AppIntents.AppShortcutOptionsCollectionProtocol, C1 : AppIntents.AppShortcutOptionsCollectionProtocol, C2 : AppIntents.AppShortcutOptionsCollectionProtocol, C3 : AppIntents.AppShortcutOptionsCollectionProtocol, C4 : AppIntents.AppShortcutOptionsCollectionProtocol, C5 : AppIntents.AppShortcutOptionsCollectionProtocol, C6 : AppIntents.AppShortcutOptionsCollectionProtocol, C7 : AppIntents.AppShortcutOptionsCollectionProtocol, C8 : AppIntents.AppShortcutOptionsCollectionProtocol, C9 : AppIntents.AppShortcutOptionsCollectionProtocol, C10 : AppIntents.AppShortcutOptionsCollectionProtocol, C11 : AppIntents.AppShortcutOptionsCollectionProtocol, C12 : AppIntents.AppShortcutOptionsCollectionProtocol, C13 : AppIntents.AppShortcutOptionsCollectionProtocol, C14 : AppIntents.AppShortcutOptionsCollectionProtocol
  
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitAcceleration> {
  final public var unit: AppIntents.IntentParameter<Value>.Acceleration? {
    get
  }
  final public var defaultUnit: AppIntents.IntentParameter<Value>.Acceleration? {
    get
  }
  final public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  final public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Measurement<Foundation.UnitAcceleration> {
  public var unit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitAcceleration>>.Acceleration? {
    get
  }
  public var defaultUnit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitAcceleration>>.Acceleration? {
    get
  }
  public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitAngle> {
  final public var unit: AppIntents.IntentParameter<Value>.Angle? {
    get
  }
  final public var defaultUnit: AppIntents.IntentParameter<Value>.Angle? {
    get
  }
  final public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  final public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Measurement<Foundation.UnitAngle> {
  public var unit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitAngle>>.Angle? {
    get
  }
  public var defaultUnit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitAngle>>.Angle? {
    get
  }
  public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitArea> {
  final public var unit: AppIntents.IntentParameter<Value>.Area? {
    get
  }
  final public var defaultUnit: AppIntents.IntentParameter<Value>.Area? {
    get
  }
  final public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  final public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Measurement<Foundation.UnitArea> {
  public var unit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitArea>>.Area? {
    get
  }
  public var defaultUnit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitArea>>.Area? {
    get
  }
  public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitConcentrationMass> {
  final public var unit: AppIntents.IntentParameter<Value>.ConcentrationMass? {
    get
  }
  final public var defaultUnit: AppIntents.IntentParameter<Value>.ConcentrationMass? {
    get
  }
  final public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  final public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Measurement<Foundation.UnitConcentrationMass> {
  public var unit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitConcentrationMass>>.ConcentrationMass? {
    get
  }
  public var defaultUnit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitConcentrationMass>>.ConcentrationMass? {
    get
  }
  public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitDispersion> {
  final public var unit: AppIntents.IntentParameter<Value>.Dispersion? {
    get
  }
  final public var defaultUnit: AppIntents.IntentParameter<Value>.Dispersion? {
    get
  }
  final public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  final public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Measurement<Foundation.UnitDispersion> {
  public var unit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitDispersion>>.Dispersion? {
    get
  }
  public var defaultUnit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitDispersion>>.Dispersion? {
    get
  }
  public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitDuration> {
  final public var unit: AppIntents.IntentParameter<Value>.Duration? {
    get
  }
  final public var defaultUnit: AppIntents.IntentParameter<Value>.Duration? {
    get
  }
  final public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  final public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Measurement<Foundation.UnitDuration> {
  public var unit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitDuration>>.Duration? {
    get
  }
  public var defaultUnit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitDuration>>.Duration? {
    get
  }
  public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitElectricCharge> {
  final public var unit: AppIntents.IntentParameter<Value>.ElectricCharge? {
    get
  }
  final public var defaultUnit: AppIntents.IntentParameter<Value>.ElectricCharge? {
    get
  }
  final public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  final public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Measurement<Foundation.UnitElectricCharge> {
  public var unit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitElectricCharge>>.ElectricCharge? {
    get
  }
  public var defaultUnit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitElectricCharge>>.ElectricCharge? {
    get
  }
  public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitElectricCurrent> {
  final public var unit: AppIntents.IntentParameter<Value>.ElectricCurrent? {
    get
  }
  final public var defaultUnit: AppIntents.IntentParameter<Value>.ElectricCurrent? {
    get
  }
  final public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  final public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Measurement<Foundation.UnitElectricCurrent> {
  public var unit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitElectricCurrent>>.ElectricCurrent? {
    get
  }
  public var defaultUnit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitElectricCurrent>>.ElectricCurrent? {
    get
  }
  public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitElectricPotentialDifference> {
  final public var unit: AppIntents.IntentParameter<Value>.ElectricPotentialDifference? {
    get
  }
  final public var defaultUnit: AppIntents.IntentParameter<Value>.ElectricPotentialDifference? {
    get
  }
  final public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  final public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Measurement<Foundation.UnitElectricPotentialDifference> {
  public var unit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitElectricPotentialDifference>>.ElectricPotentialDifference? {
    get
  }
  public var defaultUnit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitElectricPotentialDifference>>.ElectricPotentialDifference? {
    get
  }
  public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitElectricResistance> {
  final public var unit: AppIntents.IntentParameter<Value>.ElectricResistance? {
    get
  }
  final public var defaultUnit: AppIntents.IntentParameter<Value>.ElectricResistance? {
    get
  }
  final public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  final public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Measurement<Foundation.UnitElectricResistance> {
  public var unit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitElectricResistance>>.ElectricResistance? {
    get
  }
  public var defaultUnit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitElectricResistance>>.ElectricResistance? {
    get
  }
  public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitEnergy> {
  final public var unit: AppIntents.IntentParameter<Value>.Energy? {
    get
  }
  final public var defaultUnit: AppIntents.IntentParameter<Value>.Energy? {
    get
  }
  final public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  final public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Measurement<Foundation.UnitEnergy> {
  public var unit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitEnergy>>.Energy? {
    get
  }
  public var defaultUnit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitEnergy>>.Energy? {
    get
  }
  public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitFrequency> {
  final public var unit: AppIntents.IntentParameter<Value>.Frequency? {
    get
  }
  final public var defaultUnit: AppIntents.IntentParameter<Value>.Frequency? {
    get
  }
  final public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  final public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Measurement<Foundation.UnitFrequency> {
  public var unit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitFrequency>>.Frequency? {
    get
  }
  public var defaultUnit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitFrequency>>.Frequency? {
    get
  }
  public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitFuelEfficiency> {
  final public var unit: AppIntents.IntentParameter<Value>.FuelEfficiency? {
    get
  }
  final public var defaultUnit: AppIntents.IntentParameter<Value>.FuelEfficiency? {
    get
  }
  final public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  final public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Measurement<Foundation.UnitFuelEfficiency> {
  public var unit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitFuelEfficiency>>.FuelEfficiency? {
    get
  }
  public var defaultUnit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitFuelEfficiency>>.FuelEfficiency? {
    get
  }
  public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitIlluminance> {
  final public var unit: AppIntents.IntentParameter<Value>.Illuminance? {
    get
  }
  final public var defaultUnit: AppIntents.IntentParameter<Value>.Illuminance? {
    get
  }
  final public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  final public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Measurement<Foundation.UnitIlluminance> {
  public var unit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitIlluminance>>.Illuminance? {
    get
  }
  public var defaultUnit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitIlluminance>>.Illuminance? {
    get
  }
  public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitInformationStorage> {
  final public var unit: AppIntents.IntentParameter<Value>.InformationStorage? {
    get
  }
  final public var defaultUnit: AppIntents.IntentParameter<Value>.InformationStorage? {
    get
  }
  final public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  final public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Measurement<Foundation.UnitInformationStorage> {
  public var unit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitInformationStorage>>.InformationStorage? {
    get
  }
  public var defaultUnit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitInformationStorage>>.InformationStorage? {
    get
  }
  public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitLength> {
  final public var unit: AppIntents.IntentParameter<Value>.Length? {
    get
  }
  final public var defaultUnit: AppIntents.IntentParameter<Value>.Length? {
    get
  }
  final public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  final public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Measurement<Foundation.UnitLength> {
  public var unit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitLength>>.Length? {
    get
  }
  public var defaultUnit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitLength>>.Length? {
    get
  }
  public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitMass> {
  final public var unit: AppIntents.IntentParameter<Value>.Mass? {
    get
  }
  final public var defaultUnit: AppIntents.IntentParameter<Value>.Mass? {
    get
  }
  final public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  final public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Measurement<Foundation.UnitMass> {
  public var unit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitMass>>.Mass? {
    get
  }
  public var defaultUnit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitMass>>.Mass? {
    get
  }
  public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitPower> {
  final public var unit: AppIntents.IntentParameter<Value>.Power? {
    get
  }
  final public var defaultUnit: AppIntents.IntentParameter<Value>.Power? {
    get
  }
  final public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  final public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Measurement<Foundation.UnitPower> {
  public var unit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitPower>>.Power? {
    get
  }
  public var defaultUnit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitPower>>.Power? {
    get
  }
  public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitPressure> {
  final public var unit: AppIntents.IntentParameter<Value>.Pressure? {
    get
  }
  final public var defaultUnit: AppIntents.IntentParameter<Value>.Pressure? {
    get
  }
  final public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  final public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Measurement<Foundation.UnitPressure> {
  public var unit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitPressure>>.Pressure? {
    get
  }
  public var defaultUnit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitPressure>>.Pressure? {
    get
  }
  public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitSpeed> {
  final public var unit: AppIntents.IntentParameter<Value>.Speed? {
    get
  }
  final public var defaultUnit: AppIntents.IntentParameter<Value>.Speed? {
    get
  }
  final public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  final public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Measurement<Foundation.UnitSpeed> {
  public var unit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitSpeed>>.Speed? {
    get
  }
  public var defaultUnit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitSpeed>>.Speed? {
    get
  }
  public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitTemperature> {
  final public var unit: AppIntents.IntentParameter<Value>.Temperature? {
    get
  }
  final public var defaultUnit: AppIntents.IntentParameter<Value>.Temperature? {
    get
  }
  final public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  final public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Measurement<Foundation.UnitTemperature> {
  public var unit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitTemperature>>.Temperature? {
    get
  }
  public var defaultUnit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitTemperature>>.Temperature? {
    get
  }
  public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter where Value.ValueType == Foundation.Measurement<Foundation.UnitVolume> {
  final public var unit: AppIntents.IntentParameter<Value>.Volume? {
    get
  }
  final public var defaultUnit: AppIntents.IntentParameter<Value>.Volume? {
    get
  }
  final public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  final public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameterContext where Value.ValueType == Foundation.Measurement<Foundation.UnitVolume> {
  public var unit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitVolume>>.Volume? {
    get
  }
  public var defaultUnit: AppIntents.IntentParameter<Foundation.Measurement<Foundation.UnitVolume>>.Volume? {
    get
  }
  public var unitAdjustForLocale: Swift.Bool? {
    get
  }
  public var supportsNegativeNumbers: Swift.Bool? {
    get
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock<R0, R1>(_ r0: R0, _ r1: R1) -> some AppIntents.ResolverSpecification where R0 : AppIntents.Resolver, R1 : AppIntents.Resolver
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock<R0, R1, R2>(_ r0: R0, _ r1: R1, _ r2: R2) -> some AppIntents.ResolverSpecification where R0 : AppIntents.Resolver, R1 : AppIntents.Resolver, R2 : AppIntents.Resolver
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock<R0, R1, R2, R3>(_ r0: R0, _ r1: R1, _ r2: R2, _ r3: R3) -> some AppIntents.ResolverSpecification where R0 : AppIntents.Resolver, R1 : AppIntents.Resolver, R2 : AppIntents.Resolver, R3 : AppIntents.Resolver
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock<R0, R1, R2, R3, R4>(_ r0: R0, _ r1: R1, _ r2: R2, _ r3: R3, _ r4: R4) -> some AppIntents.ResolverSpecification where R0 : AppIntents.Resolver, R1 : AppIntents.Resolver, R2 : AppIntents.Resolver, R3 : AppIntents.Resolver, R4 : AppIntents.Resolver
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock<R0, R1, R2, R3, R4, R5>(_ r0: R0, _ r1: R1, _ r2: R2, _ r3: R3, _ r4: R4, _ r5: R5) -> some AppIntents.ResolverSpecification where R0 : AppIntents.Resolver, R1 : AppIntents.Resolver, R2 : AppIntents.Resolver, R3 : AppIntents.Resolver, R4 : AppIntents.Resolver, R5 : AppIntents.Resolver
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock<R0, R1, R2, R3, R4, R5, R6>(_ r0: R0, _ r1: R1, _ r2: R2, _ r3: R3, _ r4: R4, _ r5: R5, _ r6: R6) -> some AppIntents.ResolverSpecification where R0 : AppIntents.Resolver, R1 : AppIntents.Resolver, R2 : AppIntents.Resolver, R3 : AppIntents.Resolver, R4 : AppIntents.Resolver, R5 : AppIntents.Resolver, R6 : AppIntents.Resolver
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7>(_ r0: R0, _ r1: R1, _ r2: R2, _ r3: R3, _ r4: R4, _ r5: R5, _ r6: R6, _ r7: R7) -> some AppIntents.ResolverSpecification where R0 : AppIntents.Resolver, R1 : AppIntents.Resolver, R2 : AppIntents.Resolver, R3 : AppIntents.Resolver, R4 : AppIntents.Resolver, R5 : AppIntents.Resolver, R6 : AppIntents.Resolver, R7 : AppIntents.Resolver
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7, R8>(_ r0: R0, _ r1: R1, _ r2: R2, _ r3: R3, _ r4: R4, _ r5: R5, _ r6: R6, _ r7: R7, _ r8: R8) -> some AppIntents.ResolverSpecification where R0 : AppIntents.Resolver, R1 : AppIntents.Resolver, R2 : AppIntents.Resolver, R3 : AppIntents.Resolver, R4 : AppIntents.Resolver, R5 : AppIntents.Resolver, R6 : AppIntents.Resolver, R7 : AppIntents.Resolver, R8 : AppIntents.Resolver
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9>(_ r0: R0, _ r1: R1, _ r2: R2, _ r3: R3, _ r4: R4, _ r5: R5, _ r6: R6, _ r7: R7, _ r8: R8, _ r9: R9) -> some AppIntents.ResolverSpecification where R0 : AppIntents.Resolver, R1 : AppIntents.Resolver, R2 : AppIntents.Resolver, R3 : AppIntents.Resolver, R4 : AppIntents.Resolver, R5 : AppIntents.Resolver, R6 : AppIntents.Resolver, R7 : AppIntents.Resolver, R8 : AppIntents.Resolver, R9 : AppIntents.Resolver
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10>(_ r0: R0, _ r1: R1, _ r2: R2, _ r3: R3, _ r4: R4, _ r5: R5, _ r6: R6, _ r7: R7, _ r8: R8, _ r9: R9, _ r10: R10) -> some AppIntents.ResolverSpecification where R0 : AppIntents.Resolver, R1 : AppIntents.Resolver, R2 : AppIntents.Resolver, R3 : AppIntents.Resolver, R4 : AppIntents.Resolver, R5 : AppIntents.Resolver, R6 : AppIntents.Resolver, R7 : AppIntents.Resolver, R8 : AppIntents.Resolver, R9 : AppIntents.Resolver, R10 : AppIntents.Resolver
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11>(_ r0: R0, _ r1: R1, _ r2: R2, _ r3: R3, _ r4: R4, _ r5: R5, _ r6: R6, _ r7: R7, _ r8: R8, _ r9: R9, _ r10: R10, _ r11: R11) -> some AppIntents.ResolverSpecification where R0 : AppIntents.Resolver, R1 : AppIntents.Resolver, R2 : AppIntents.Resolver, R3 : AppIntents.Resolver, R4 : AppIntents.Resolver, R5 : AppIntents.Resolver, R6 : AppIntents.Resolver, R7 : AppIntents.Resolver, R8 : AppIntents.Resolver, R9 : AppIntents.Resolver, R10 : AppIntents.Resolver, R11 : AppIntents.Resolver
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12>(_ r0: R0, _ r1: R1, _ r2: R2, _ r3: R3, _ r4: R4, _ r5: R5, _ r6: R6, _ r7: R7, _ r8: R8, _ r9: R9, _ r10: R10, _ r11: R11, _ r12: R12) -> some AppIntents.ResolverSpecification where R0 : AppIntents.Resolver, R1 : AppIntents.Resolver, R2 : AppIntents.Resolver, R3 : AppIntents.Resolver, R4 : AppIntents.Resolver, R5 : AppIntents.Resolver, R6 : AppIntents.Resolver, R7 : AppIntents.Resolver, R8 : AppIntents.Resolver, R9 : AppIntents.Resolver, R10 : AppIntents.Resolver, R11 : AppIntents.Resolver, R12 : AppIntents.Resolver
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13>(_ r0: R0, _ r1: R1, _ r2: R2, _ r3: R3, _ r4: R4, _ r5: R5, _ r6: R6, _ r7: R7, _ r8: R8, _ r9: R9, _ r10: R10, _ r11: R11, _ r12: R12, _ r13: R13) -> some AppIntents.ResolverSpecification where R0 : AppIntents.Resolver, R1 : AppIntents.Resolver, R2 : AppIntents.Resolver, R3 : AppIntents.Resolver, R4 : AppIntents.Resolver, R5 : AppIntents.Resolver, R6 : AppIntents.Resolver, R7 : AppIntents.Resolver, R8 : AppIntents.Resolver, R9 : AppIntents.Resolver, R10 : AppIntents.Resolver, R11 : AppIntents.Resolver, R12 : AppIntents.Resolver, R13 : AppIntents.Resolver
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ResolverSpecificationBuilder {
  public static func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14>(_ r0: R0, _ r1: R1, _ r2: R2, _ r3: R3, _ r4: R4, _ r5: R5, _ r6: R6, _ r7: R7, _ r8: R8, _ r9: R9, _ r10: R10, _ r11: R11, _ r12: R12, _ r13: R13, _ r14: R14) -> some AppIntents.ResolverSpecification where R0 : AppIntents.Resolver, R1 : AppIntents.Resolver, R2 : AppIntents.Resolver, R3 : AppIntents.Resolver, R4 : AppIntents.Resolver, R5 : AppIntents.Resolver, R6 : AppIntents.Resolver, R7 : AppIntents.Resolver, R8 : AppIntents.Resolver, R9 : AppIntents.Resolver, R10 : AppIntents.Resolver, R11 : AppIntents.Resolver, R12 : AppIntents.Resolver, R13 : AppIntents.Resolver, R14 : AppIntents.Resolver
  
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPrediction {
  public init<V0, P0>(parameters: T, displayRepresentation: @escaping (_ value0: V0) -> AppIntents.DisplayRepresentation) where T == Swift.KeyPath<Intent, P0>, V0 : AppIntents._IntentValue, V0 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPrediction {
  public init<V0, V1, P0, P1, K0, K1>(parameters: T, displayRepresentation: @escaping (_ value0: V0, _ value1: V1) -> AppIntents.DisplayRepresentation) where T == (K0, K1), V0 : AppIntents._IntentValue, V0 : Swift.Sendable, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, P1 : AppIntents.IntentParameter<V1>, K0 : Swift.KeyPath<Intent, P0>, K1 : Swift.KeyPath<Intent, P1>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPrediction {
  public init<V0, V1, V2, P0, P1, P2, K0, K1, K2>(parameters: T, displayRepresentation: @escaping (_ value0: V0, _ value1: V1, _ value2: V2) -> AppIntents.DisplayRepresentation) where T == (K0, K1, K2), V0 : AppIntents._IntentValue, V0 : Swift.Sendable, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, P1 : AppIntents.IntentParameter<V1>, P2 : AppIntents.IntentParameter<V2>, K0 : Swift.KeyPath<Intent, P0>, K1 : Swift.KeyPath<Intent, P1>, K2 : Swift.KeyPath<Intent, P2>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPrediction {
  public init<V0, V1, V2, V3, P0, P1, P2, P3, K0, K1, K2, K3>(parameters: T, displayRepresentation: @escaping (_ value0: V0, _ value1: V1, _ value2: V2, _ value3: V3) -> AppIntents.DisplayRepresentation) where T == (K0, K1, K2, K3), V0 : AppIntents._IntentValue, V0 : Swift.Sendable, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, P1 : AppIntents.IntentParameter<V1>, P2 : AppIntents.IntentParameter<V2>, P3 : AppIntents.IntentParameter<V3>, K0 : Swift.KeyPath<Intent, P0>, K1 : Swift.KeyPath<Intent, P1>, K2 : Swift.KeyPath<Intent, P2>, K3 : Swift.KeyPath<Intent, P3>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPrediction {
  public init<V0, V1, V2, V3, V4, P0, P1, P2, P3, P4, K0, K1, K2, K3, K4>(parameters: T, displayRepresentation: @escaping (_ value0: V0, _ value1: V1, _ value2: V2, _ value3: V3, _ value4: V4) -> AppIntents.DisplayRepresentation) where T == (K0, K1, K2, K3, K4), V0 : AppIntents._IntentValue, V0 : Swift.Sendable, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, P1 : AppIntents.IntentParameter<V1>, P2 : AppIntents.IntentParameter<V2>, P3 : AppIntents.IntentParameter<V3>, P4 : AppIntents.IntentParameter<V4>, K0 : Swift.KeyPath<Intent, P0>, K1 : Swift.KeyPath<Intent, P1>, K2 : Swift.KeyPath<Intent, P2>, K3 : Swift.KeyPath<Intent, P3>, K4 : Swift.KeyPath<Intent, P4>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPrediction {
  public init<V0, V1, V2, V3, V4, V5, P0, P1, P2, P3, P4, P5, K0, K1, K2, K3, K4, K5>(parameters: T, displayRepresentation: @escaping (_ value0: V0, _ value1: V1, _ value2: V2, _ value3: V3, _ value4: V4, _ value5: V5) -> AppIntents.DisplayRepresentation) where T == (K0, K1, K2, K3, K4, K5), V0 : AppIntents._IntentValue, V0 : Swift.Sendable, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, V5 : AppIntents._IntentValue, V5 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, P1 : AppIntents.IntentParameter<V1>, P2 : AppIntents.IntentParameter<V2>, P3 : AppIntents.IntentParameter<V3>, P4 : AppIntents.IntentParameter<V4>, P5 : AppIntents.IntentParameter<V5>, K0 : Swift.KeyPath<Intent, P0>, K1 : Swift.KeyPath<Intent, P1>, K2 : Swift.KeyPath<Intent, P2>, K3 : Swift.KeyPath<Intent, P3>, K4 : Swift.KeyPath<Intent, P4>, K5 : Swift.KeyPath<Intent, P5>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPrediction {
  public init<V0, V1, V2, V3, V4, V5, V6, P0, P1, P2, P3, P4, P5, P6, K0, K1, K2, K3, K4, K5, K6>(parameters: T, displayRepresentation: @escaping (_ value0: V0, _ value1: V1, _ value2: V2, _ value3: V3, _ value4: V4, _ value5: V5, _ value6: V6) -> AppIntents.DisplayRepresentation) where T == (K0, K1, K2, K3, K4, K5, K6), V0 : AppIntents._IntentValue, V0 : Swift.Sendable, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, V5 : AppIntents._IntentValue, V5 : Swift.Sendable, V6 : AppIntents._IntentValue, V6 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, P1 : AppIntents.IntentParameter<V1>, P2 : AppIntents.IntentParameter<V2>, P3 : AppIntents.IntentParameter<V3>, P4 : AppIntents.IntentParameter<V4>, P5 : AppIntents.IntentParameter<V5>, P6 : AppIntents.IntentParameter<V6>, K0 : Swift.KeyPath<Intent, P0>, K1 : Swift.KeyPath<Intent, P1>, K2 : Swift.KeyPath<Intent, P2>, K3 : Swift.KeyPath<Intent, P3>, K4 : Swift.KeyPath<Intent, P4>, K5 : Swift.KeyPath<Intent, P5>, K6 : Swift.KeyPath<Intent, P6>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPrediction {
  public init<V0, V1, V2, V3, V4, V5, V6, V7, P0, P1, P2, P3, P4, P5, P6, P7, K0, K1, K2, K3, K4, K5, K6, K7>(parameters: T, displayRepresentation: @escaping (_ value0: V0, _ value1: V1, _ value2: V2, _ value3: V3, _ value4: V4, _ value5: V5, _ value6: V6, _ value7: V7) -> AppIntents.DisplayRepresentation) where T == (K0, K1, K2, K3, K4, K5, K6, K7), V0 : AppIntents._IntentValue, V0 : Swift.Sendable, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, V5 : AppIntents._IntentValue, V5 : Swift.Sendable, V6 : AppIntents._IntentValue, V6 : Swift.Sendable, V7 : AppIntents._IntentValue, V7 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, P1 : AppIntents.IntentParameter<V1>, P2 : AppIntents.IntentParameter<V2>, P3 : AppIntents.IntentParameter<V3>, P4 : AppIntents.IntentParameter<V4>, P5 : AppIntents.IntentParameter<V5>, P6 : AppIntents.IntentParameter<V6>, P7 : AppIntents.IntentParameter<V7>, K0 : Swift.KeyPath<Intent, P0>, K1 : Swift.KeyPath<Intent, P1>, K2 : Swift.KeyPath<Intent, P2>, K3 : Swift.KeyPath<Intent, P3>, K4 : Swift.KeyPath<Intent, P4>, K5 : Swift.KeyPath<Intent, P5>, K6 : Swift.KeyPath<Intent, P6>, K7 : Swift.KeyPath<Intent, P7>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPrediction {
  public init<V0, V1, V2, V3, V4, V5, V6, V7, V8, P0, P1, P2, P3, P4, P5, P6, P7, P8, K0, K1, K2, K3, K4, K5, K6, K7, K8>(parameters: T, displayRepresentation: @escaping (_ value0: V0, _ value1: V1, _ value2: V2, _ value3: V3, _ value4: V4, _ value5: V5, _ value6: V6, _ value7: V7, _ value8: V8) -> AppIntents.DisplayRepresentation) where T == (K0, K1, K2, K3, K4, K5, K6, K7, K8), V0 : AppIntents._IntentValue, V0 : Swift.Sendable, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, V5 : AppIntents._IntentValue, V5 : Swift.Sendable, V6 : AppIntents._IntentValue, V6 : Swift.Sendable, V7 : AppIntents._IntentValue, V7 : Swift.Sendable, V8 : AppIntents._IntentValue, V8 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, P1 : AppIntents.IntentParameter<V1>, P2 : AppIntents.IntentParameter<V2>, P3 : AppIntents.IntentParameter<V3>, P4 : AppIntents.IntentParameter<V4>, P5 : AppIntents.IntentParameter<V5>, P6 : AppIntents.IntentParameter<V6>, P7 : AppIntents.IntentParameter<V7>, P8 : AppIntents.IntentParameter<V8>, K0 : Swift.KeyPath<Intent, P0>, K1 : Swift.KeyPath<Intent, P1>, K2 : Swift.KeyPath<Intent, P2>, K3 : Swift.KeyPath<Intent, P3>, K4 : Swift.KeyPath<Intent, P4>, K5 : Swift.KeyPath<Intent, P5>, K6 : Swift.KeyPath<Intent, P6>, K7 : Swift.KeyPath<Intent, P7>, K8 : Swift.KeyPath<Intent, P8>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPrediction {
  public init<V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, K0, K1, K2, K3, K4, K5, K6, K7, K8, K9>(parameters: T, displayRepresentation: @escaping (_ value0: V0, _ value1: V1, _ value2: V2, _ value3: V3, _ value4: V4, _ value5: V5, _ value6: V6, _ value7: V7, _ value8: V8, _ value9: V9) -> AppIntents.DisplayRepresentation) where T == (K0, K1, K2, K3, K4, K5, K6, K7, K8, K9), V0 : AppIntents._IntentValue, V0 : Swift.Sendable, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, V5 : AppIntents._IntentValue, V5 : Swift.Sendable, V6 : AppIntents._IntentValue, V6 : Swift.Sendable, V7 : AppIntents._IntentValue, V7 : Swift.Sendable, V8 : AppIntents._IntentValue, V8 : Swift.Sendable, V9 : AppIntents._IntentValue, V9 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, P1 : AppIntents.IntentParameter<V1>, P2 : AppIntents.IntentParameter<V2>, P3 : AppIntents.IntentParameter<V3>, P4 : AppIntents.IntentParameter<V4>, P5 : AppIntents.IntentParameter<V5>, P6 : AppIntents.IntentParameter<V6>, P7 : AppIntents.IntentParameter<V7>, P8 : AppIntents.IntentParameter<V8>, P9 : AppIntents.IntentParameter<V9>, K0 : Swift.KeyPath<Intent, P0>, K1 : Swift.KeyPath<Intent, P1>, K2 : Swift.KeyPath<Intent, P2>, K3 : Swift.KeyPath<Intent, P3>, K4 : Swift.KeyPath<Intent, P4>, K5 : Swift.KeyPath<Intent, P5>, K6 : Swift.KeyPath<Intent, P6>, K7 : Swift.KeyPath<Intent, P7>, K8 : Swift.KeyPath<Intent, P8>, K9 : Swift.KeyPath<Intent, P9>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPrediction {
  public init<V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, K0, K1, K2, K3, K4, K5, K6, K7, K8, K9, K10>(parameters: T, displayRepresentation: @escaping (_ value0: V0, _ value1: V1, _ value2: V2, _ value3: V3, _ value4: V4, _ value5: V5, _ value6: V6, _ value7: V7, _ value8: V8, _ value9: V9, _ value10: V10) -> AppIntents.DisplayRepresentation) where T == (K0, K1, K2, K3, K4, K5, K6, K7, K8, K9, K10), V0 : AppIntents._IntentValue, V0 : Swift.Sendable, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, V5 : AppIntents._IntentValue, V5 : Swift.Sendable, V6 : AppIntents._IntentValue, V6 : Swift.Sendable, V7 : AppIntents._IntentValue, V7 : Swift.Sendable, V8 : AppIntents._IntentValue, V8 : Swift.Sendable, V9 : AppIntents._IntentValue, V9 : Swift.Sendable, V10 : AppIntents._IntentValue, V10 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, P1 : AppIntents.IntentParameter<V1>, P2 : AppIntents.IntentParameter<V2>, P3 : AppIntents.IntentParameter<V3>, P4 : AppIntents.IntentParameter<V4>, P5 : AppIntents.IntentParameter<V5>, P6 : AppIntents.IntentParameter<V6>, P7 : AppIntents.IntentParameter<V7>, P8 : AppIntents.IntentParameter<V8>, P9 : AppIntents.IntentParameter<V9>, P10 : AppIntents.IntentParameter<V10>, K0 : Swift.KeyPath<Intent, P0>, K1 : Swift.KeyPath<Intent, P1>, K2 : Swift.KeyPath<Intent, P2>, K3 : Swift.KeyPath<Intent, P3>, K4 : Swift.KeyPath<Intent, P4>, K5 : Swift.KeyPath<Intent, P5>, K6 : Swift.KeyPath<Intent, P6>, K7 : Swift.KeyPath<Intent, P7>, K8 : Swift.KeyPath<Intent, P8>, K9 : Swift.KeyPath<Intent, P9>, K10 : Swift.KeyPath<Intent, P10>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPrediction {
  public init<V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, K0, K1, K2, K3, K4, K5, K6, K7, K8, K9, K10, K11>(parameters: T, displayRepresentation: @escaping (_ value0: V0, _ value1: V1, _ value2: V2, _ value3: V3, _ value4: V4, _ value5: V5, _ value6: V6, _ value7: V7, _ value8: V8, _ value9: V9, _ value10: V10, _ value11: V11) -> AppIntents.DisplayRepresentation) where T == (K0, K1, K2, K3, K4, K5, K6, K7, K8, K9, K10, K11), V0 : AppIntents._IntentValue, V0 : Swift.Sendable, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, V5 : AppIntents._IntentValue, V5 : Swift.Sendable, V6 : AppIntents._IntentValue, V6 : Swift.Sendable, V7 : AppIntents._IntentValue, V7 : Swift.Sendable, V8 : AppIntents._IntentValue, V8 : Swift.Sendable, V9 : AppIntents._IntentValue, V9 : Swift.Sendable, V10 : AppIntents._IntentValue, V10 : Swift.Sendable, V11 : AppIntents._IntentValue, V11 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, P1 : AppIntents.IntentParameter<V1>, P2 : AppIntents.IntentParameter<V2>, P3 : AppIntents.IntentParameter<V3>, P4 : AppIntents.IntentParameter<V4>, P5 : AppIntents.IntentParameter<V5>, P6 : AppIntents.IntentParameter<V6>, P7 : AppIntents.IntentParameter<V7>, P8 : AppIntents.IntentParameter<V8>, P9 : AppIntents.IntentParameter<V9>, P10 : AppIntents.IntentParameter<V10>, P11 : AppIntents.IntentParameter<V11>, K0 : Swift.KeyPath<Intent, P0>, K1 : Swift.KeyPath<Intent, P1>, K2 : Swift.KeyPath<Intent, P2>, K3 : Swift.KeyPath<Intent, P3>, K4 : Swift.KeyPath<Intent, P4>, K5 : Swift.KeyPath<Intent, P5>, K6 : Swift.KeyPath<Intent, P6>, K7 : Swift.KeyPath<Intent, P7>, K8 : Swift.KeyPath<Intent, P8>, K9 : Swift.KeyPath<Intent, P9>, K10 : Swift.KeyPath<Intent, P10>, K11 : Swift.KeyPath<Intent, P11>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPrediction {
  public init<V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, K0, K1, K2, K3, K4, K5, K6, K7, K8, K9, K10, K11, K12>(parameters: T, displayRepresentation: @escaping (_ value0: V0, _ value1: V1, _ value2: V2, _ value3: V3, _ value4: V4, _ value5: V5, _ value6: V6, _ value7: V7, _ value8: V8, _ value9: V9, _ value10: V10, _ value11: V11, _ value12: V12) -> AppIntents.DisplayRepresentation) where T == (K0, K1, K2, K3, K4, K5, K6, K7, K8, K9, K10, K11, K12), V0 : AppIntents._IntentValue, V0 : Swift.Sendable, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, V5 : AppIntents._IntentValue, V5 : Swift.Sendable, V6 : AppIntents._IntentValue, V6 : Swift.Sendable, V7 : AppIntents._IntentValue, V7 : Swift.Sendable, V8 : AppIntents._IntentValue, V8 : Swift.Sendable, V9 : AppIntents._IntentValue, V9 : Swift.Sendable, V10 : AppIntents._IntentValue, V10 : Swift.Sendable, V11 : AppIntents._IntentValue, V11 : Swift.Sendable, V12 : AppIntents._IntentValue, V12 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, P1 : AppIntents.IntentParameter<V1>, P2 : AppIntents.IntentParameter<V2>, P3 : AppIntents.IntentParameter<V3>, P4 : AppIntents.IntentParameter<V4>, P5 : AppIntents.IntentParameter<V5>, P6 : AppIntents.IntentParameter<V6>, P7 : AppIntents.IntentParameter<V7>, P8 : AppIntents.IntentParameter<V8>, P9 : AppIntents.IntentParameter<V9>, P10 : AppIntents.IntentParameter<V10>, P11 : AppIntents.IntentParameter<V11>, P12 : AppIntents.IntentParameter<V12>, K0 : Swift.KeyPath<Intent, P0>, K1 : Swift.KeyPath<Intent, P1>, K2 : Swift.KeyPath<Intent, P2>, K3 : Swift.KeyPath<Intent, P3>, K4 : Swift.KeyPath<Intent, P4>, K5 : Swift.KeyPath<Intent, P5>, K6 : Swift.KeyPath<Intent, P6>, K7 : Swift.KeyPath<Intent, P7>, K8 : Swift.KeyPath<Intent, P8>, K9 : Swift.KeyPath<Intent, P9>, K10 : Swift.KeyPath<Intent, P10>, K11 : Swift.KeyPath<Intent, P11>, K12 : Swift.KeyPath<Intent, P12>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPrediction {
  public init<V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, K0, K1, K2, K3, K4, K5, K6, K7, K8, K9, K10, K11, K12, K13>(parameters: T, displayRepresentation: @escaping (_ value0: V0, _ value1: V1, _ value2: V2, _ value3: V3, _ value4: V4, _ value5: V5, _ value6: V6, _ value7: V7, _ value8: V8, _ value9: V9, _ value10: V10, _ value11: V11, _ value12: V12, _ value13: V13) -> AppIntents.DisplayRepresentation) where T == (K0, K1, K2, K3, K4, K5, K6, K7, K8, K9, K10, K11, K12, K13), V0 : AppIntents._IntentValue, V0 : Swift.Sendable, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, V5 : AppIntents._IntentValue, V5 : Swift.Sendable, V6 : AppIntents._IntentValue, V6 : Swift.Sendable, V7 : AppIntents._IntentValue, V7 : Swift.Sendable, V8 : AppIntents._IntentValue, V8 : Swift.Sendable, V9 : AppIntents._IntentValue, V9 : Swift.Sendable, V10 : AppIntents._IntentValue, V10 : Swift.Sendable, V11 : AppIntents._IntentValue, V11 : Swift.Sendable, V12 : AppIntents._IntentValue, V12 : Swift.Sendable, V13 : AppIntents._IntentValue, V13 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, P1 : AppIntents.IntentParameter<V1>, P2 : AppIntents.IntentParameter<V2>, P3 : AppIntents.IntentParameter<V3>, P4 : AppIntents.IntentParameter<V4>, P5 : AppIntents.IntentParameter<V5>, P6 : AppIntents.IntentParameter<V6>, P7 : AppIntents.IntentParameter<V7>, P8 : AppIntents.IntentParameter<V8>, P9 : AppIntents.IntentParameter<V9>, P10 : AppIntents.IntentParameter<V10>, P11 : AppIntents.IntentParameter<V11>, P12 : AppIntents.IntentParameter<V12>, P13 : AppIntents.IntentParameter<V13>, K0 : Swift.KeyPath<Intent, P0>, K1 : Swift.KeyPath<Intent, P1>, K2 : Swift.KeyPath<Intent, P2>, K3 : Swift.KeyPath<Intent, P3>, K4 : Swift.KeyPath<Intent, P4>, K5 : Swift.KeyPath<Intent, P5>, K6 : Swift.KeyPath<Intent, P6>, K7 : Swift.KeyPath<Intent, P7>, K8 : Swift.KeyPath<Intent, P8>, K9 : Swift.KeyPath<Intent, P9>, K10 : Swift.KeyPath<Intent, P10>, K11 : Swift.KeyPath<Intent, P11>, K12 : Swift.KeyPath<Intent, P12>, K13 : Swift.KeyPath<Intent, P13>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPrediction {
  public init<V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, K0, K1, K2, K3, K4, K5, K6, K7, K8, K9, K10, K11, K12, K13, K14>(parameters: T, displayRepresentation: @escaping (_ value0: V0, _ value1: V1, _ value2: V2, _ value3: V3, _ value4: V4, _ value5: V5, _ value6: V6, _ value7: V7, _ value8: V8, _ value9: V9, _ value10: V10, _ value11: V11, _ value12: V12, _ value13: V13, _ value14: V14) -> AppIntents.DisplayRepresentation) where T == (K0, K1, K2, K3, K4, K5, K6, K7, K8, K9, K10, K11, K12, K13, K14), V0 : AppIntents._IntentValue, V0 : Swift.Sendable, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, V5 : AppIntents._IntentValue, V5 : Swift.Sendable, V6 : AppIntents._IntentValue, V6 : Swift.Sendable, V7 : AppIntents._IntentValue, V7 : Swift.Sendable, V8 : AppIntents._IntentValue, V8 : Swift.Sendable, V9 : AppIntents._IntentValue, V9 : Swift.Sendable, V10 : AppIntents._IntentValue, V10 : Swift.Sendable, V11 : AppIntents._IntentValue, V11 : Swift.Sendable, V12 : AppIntents._IntentValue, V12 : Swift.Sendable, V13 : AppIntents._IntentValue, V13 : Swift.Sendable, V14 : AppIntents._IntentValue, V14 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, P1 : AppIntents.IntentParameter<V1>, P2 : AppIntents.IntentParameter<V2>, P3 : AppIntents.IntentParameter<V3>, P4 : AppIntents.IntentParameter<V4>, P5 : AppIntents.IntentParameter<V5>, P6 : AppIntents.IntentParameter<V6>, P7 : AppIntents.IntentParameter<V7>, P8 : AppIntents.IntentParameter<V8>, P9 : AppIntents.IntentParameter<V9>, P10 : AppIntents.IntentParameter<V10>, P11 : AppIntents.IntentParameter<V11>, P12 : AppIntents.IntentParameter<V12>, P13 : AppIntents.IntentParameter<V13>, P14 : AppIntents.IntentParameter<V14>, K0 : Swift.KeyPath<Intent, P0>, K1 : Swift.KeyPath<Intent, P1>, K2 : Swift.KeyPath<Intent, P2>, K3 : Swift.KeyPath<Intent, P3>, K4 : Swift.KeyPath<Intent, P4>, K5 : Swift.KeyPath<Intent, P5>, K6 : Swift.KeyPath<Intent, P6>, K7 : Swift.KeyPath<Intent, P7>, K8 : Swift.KeyPath<Intent, P8>, K9 : Swift.KeyPath<Intent, P9>, K10 : Swift.KeyPath<Intent, P10>, K11 : Swift.KeyPath<Intent, P11>, K12 : Swift.KeyPath<Intent, P12>, K13 : Swift.KeyPath<Intent, P13>, K14 : Swift.KeyPath<Intent, P14>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterDependency {
  convenience public init<V0, P0>(_ k0: Swift.KeyPath<Intent, P0>) where V0 : AppIntents._IntentValue, V0 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterDependency {
  convenience public init<V0, P0, V1, P1>(_ k0: Swift.KeyPath<Intent, P0>, _ k1: Swift.KeyPath<Intent, P1>) where V0 : AppIntents._IntentValue, V0 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, P1 : AppIntents.IntentParameter<V1>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterDependency {
  convenience public init<V0, P0, V1, P1, V2, P2>(_ k0: Swift.KeyPath<Intent, P0>, _ k1: Swift.KeyPath<Intent, P1>, _ k2: Swift.KeyPath<Intent, P2>) where V0 : AppIntents._IntentValue, V0 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, P1 : AppIntents.IntentParameter<V1>, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, P2 : AppIntents.IntentParameter<V2>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterDependency {
  convenience public init<V0, P0, V1, P1, V2, P2, V3, P3>(_ k0: Swift.KeyPath<Intent, P0>, _ k1: Swift.KeyPath<Intent, P1>, _ k2: Swift.KeyPath<Intent, P2>, _ k3: Swift.KeyPath<Intent, P3>) where V0 : AppIntents._IntentValue, V0 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, P1 : AppIntents.IntentParameter<V1>, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, P2 : AppIntents.IntentParameter<V2>, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, P3 : AppIntents.IntentParameter<V3>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterDependency {
  convenience public init<V0, P0, V1, P1, V2, P2, V3, P3, V4, P4>(_ k0: Swift.KeyPath<Intent, P0>, _ k1: Swift.KeyPath<Intent, P1>, _ k2: Swift.KeyPath<Intent, P2>, _ k3: Swift.KeyPath<Intent, P3>, _ k4: Swift.KeyPath<Intent, P4>) where V0 : AppIntents._IntentValue, V0 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, P1 : AppIntents.IntentParameter<V1>, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, P2 : AppIntents.IntentParameter<V2>, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, P3 : AppIntents.IntentParameter<V3>, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, P4 : AppIntents.IntentParameter<V4>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterDependency {
  convenience public init<V0, P0, V1, P1, V2, P2, V3, P3, V4, P4, V5, P5>(_ k0: Swift.KeyPath<Intent, P0>, _ k1: Swift.KeyPath<Intent, P1>, _ k2: Swift.KeyPath<Intent, P2>, _ k3: Swift.KeyPath<Intent, P3>, _ k4: Swift.KeyPath<Intent, P4>, _ k5: Swift.KeyPath<Intent, P5>) where V0 : AppIntents._IntentValue, V0 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, P1 : AppIntents.IntentParameter<V1>, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, P2 : AppIntents.IntentParameter<V2>, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, P3 : AppIntents.IntentParameter<V3>, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, P4 : AppIntents.IntentParameter<V4>, V5 : AppIntents._IntentValue, V5 : Swift.Sendable, P5 : AppIntents.IntentParameter<V5>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterDependency {
  convenience public init<V0, P0, V1, P1, V2, P2, V3, P3, V4, P4, V5, P5, V6, P6>(_ k0: Swift.KeyPath<Intent, P0>, _ k1: Swift.KeyPath<Intent, P1>, _ k2: Swift.KeyPath<Intent, P2>, _ k3: Swift.KeyPath<Intent, P3>, _ k4: Swift.KeyPath<Intent, P4>, _ k5: Swift.KeyPath<Intent, P5>, _ k6: Swift.KeyPath<Intent, P6>) where V0 : AppIntents._IntentValue, V0 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, P1 : AppIntents.IntentParameter<V1>, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, P2 : AppIntents.IntentParameter<V2>, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, P3 : AppIntents.IntentParameter<V3>, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, P4 : AppIntents.IntentParameter<V4>, V5 : AppIntents._IntentValue, V5 : Swift.Sendable, P5 : AppIntents.IntentParameter<V5>, V6 : AppIntents._IntentValue, V6 : Swift.Sendable, P6 : AppIntents.IntentParameter<V6>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterDependency {
  convenience public init<V0, P0, V1, P1, V2, P2, V3, P3, V4, P4, V5, P5, V6, P6, V7, P7>(_ k0: Swift.KeyPath<Intent, P0>, _ k1: Swift.KeyPath<Intent, P1>, _ k2: Swift.KeyPath<Intent, P2>, _ k3: Swift.KeyPath<Intent, P3>, _ k4: Swift.KeyPath<Intent, P4>, _ k5: Swift.KeyPath<Intent, P5>, _ k6: Swift.KeyPath<Intent, P6>, _ k7: Swift.KeyPath<Intent, P7>) where V0 : AppIntents._IntentValue, V0 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, P1 : AppIntents.IntentParameter<V1>, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, P2 : AppIntents.IntentParameter<V2>, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, P3 : AppIntents.IntentParameter<V3>, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, P4 : AppIntents.IntentParameter<V4>, V5 : AppIntents._IntentValue, V5 : Swift.Sendable, P5 : AppIntents.IntentParameter<V5>, V6 : AppIntents._IntentValue, V6 : Swift.Sendable, P6 : AppIntents.IntentParameter<V6>, V7 : AppIntents._IntentValue, V7 : Swift.Sendable, P7 : AppIntents.IntentParameter<V7>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterDependency {
  convenience public init<V0, P0, V1, P1, V2, P2, V3, P3, V4, P4, V5, P5, V6, P6, V7, P7, V8, P8>(_ k0: Swift.KeyPath<Intent, P0>, _ k1: Swift.KeyPath<Intent, P1>, _ k2: Swift.KeyPath<Intent, P2>, _ k3: Swift.KeyPath<Intent, P3>, _ k4: Swift.KeyPath<Intent, P4>, _ k5: Swift.KeyPath<Intent, P5>, _ k6: Swift.KeyPath<Intent, P6>, _ k7: Swift.KeyPath<Intent, P7>, _ k8: Swift.KeyPath<Intent, P8>) where V0 : AppIntents._IntentValue, V0 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, P1 : AppIntents.IntentParameter<V1>, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, P2 : AppIntents.IntentParameter<V2>, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, P3 : AppIntents.IntentParameter<V3>, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, P4 : AppIntents.IntentParameter<V4>, V5 : AppIntents._IntentValue, V5 : Swift.Sendable, P5 : AppIntents.IntentParameter<V5>, V6 : AppIntents._IntentValue, V6 : Swift.Sendable, P6 : AppIntents.IntentParameter<V6>, V7 : AppIntents._IntentValue, V7 : Swift.Sendable, P7 : AppIntents.IntentParameter<V7>, V8 : AppIntents._IntentValue, V8 : Swift.Sendable, P8 : AppIntents.IntentParameter<V8>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterDependency {
  convenience public init<V0, P0, V1, P1, V2, P2, V3, P3, V4, P4, V5, P5, V6, P6, V7, P7, V8, P8, V9, P9>(_ k0: Swift.KeyPath<Intent, P0>, _ k1: Swift.KeyPath<Intent, P1>, _ k2: Swift.KeyPath<Intent, P2>, _ k3: Swift.KeyPath<Intent, P3>, _ k4: Swift.KeyPath<Intent, P4>, _ k5: Swift.KeyPath<Intent, P5>, _ k6: Swift.KeyPath<Intent, P6>, _ k7: Swift.KeyPath<Intent, P7>, _ k8: Swift.KeyPath<Intent, P8>, _ k9: Swift.KeyPath<Intent, P9>) where V0 : AppIntents._IntentValue, V0 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, P1 : AppIntents.IntentParameter<V1>, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, P2 : AppIntents.IntentParameter<V2>, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, P3 : AppIntents.IntentParameter<V3>, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, P4 : AppIntents.IntentParameter<V4>, V5 : AppIntents._IntentValue, V5 : Swift.Sendable, P5 : AppIntents.IntentParameter<V5>, V6 : AppIntents._IntentValue, V6 : Swift.Sendable, P6 : AppIntents.IntentParameter<V6>, V7 : AppIntents._IntentValue, V7 : Swift.Sendable, P7 : AppIntents.IntentParameter<V7>, V8 : AppIntents._IntentValue, V8 : Swift.Sendable, P8 : AppIntents.IntentParameter<V8>, V9 : AppIntents._IntentValue, V9 : Swift.Sendable, P9 : AppIntents.IntentParameter<V9>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterDependency {
  convenience public init<V0, P0, V1, P1, V2, P2, V3, P3, V4, P4, V5, P5, V6, P6, V7, P7, V8, P8, V9, P9, V10, P10>(_ k0: Swift.KeyPath<Intent, P0>, _ k1: Swift.KeyPath<Intent, P1>, _ k2: Swift.KeyPath<Intent, P2>, _ k3: Swift.KeyPath<Intent, P3>, _ k4: Swift.KeyPath<Intent, P4>, _ k5: Swift.KeyPath<Intent, P5>, _ k6: Swift.KeyPath<Intent, P6>, _ k7: Swift.KeyPath<Intent, P7>, _ k8: Swift.KeyPath<Intent, P8>, _ k9: Swift.KeyPath<Intent, P9>, _ k10: Swift.KeyPath<Intent, P10>) where V0 : AppIntents._IntentValue, V0 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, P1 : AppIntents.IntentParameter<V1>, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, P2 : AppIntents.IntentParameter<V2>, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, P3 : AppIntents.IntentParameter<V3>, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, P4 : AppIntents.IntentParameter<V4>, V5 : AppIntents._IntentValue, V5 : Swift.Sendable, P5 : AppIntents.IntentParameter<V5>, V6 : AppIntents._IntentValue, V6 : Swift.Sendable, P6 : AppIntents.IntentParameter<V6>, V7 : AppIntents._IntentValue, V7 : Swift.Sendable, P7 : AppIntents.IntentParameter<V7>, V8 : AppIntents._IntentValue, V8 : Swift.Sendable, P8 : AppIntents.IntentParameter<V8>, V9 : AppIntents._IntentValue, V9 : Swift.Sendable, P9 : AppIntents.IntentParameter<V9>, V10 : AppIntents._IntentValue, V10 : Swift.Sendable, P10 : AppIntents.IntentParameter<V10>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterDependency {
  convenience public init<V0, P0, V1, P1, V2, P2, V3, P3, V4, P4, V5, P5, V6, P6, V7, P7, V8, P8, V9, P9, V10, P10, V11, P11>(_ k0: Swift.KeyPath<Intent, P0>, _ k1: Swift.KeyPath<Intent, P1>, _ k2: Swift.KeyPath<Intent, P2>, _ k3: Swift.KeyPath<Intent, P3>, _ k4: Swift.KeyPath<Intent, P4>, _ k5: Swift.KeyPath<Intent, P5>, _ k6: Swift.KeyPath<Intent, P6>, _ k7: Swift.KeyPath<Intent, P7>, _ k8: Swift.KeyPath<Intent, P8>, _ k9: Swift.KeyPath<Intent, P9>, _ k10: Swift.KeyPath<Intent, P10>, _ k11: Swift.KeyPath<Intent, P11>) where V0 : AppIntents._IntentValue, V0 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, P1 : AppIntents.IntentParameter<V1>, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, P2 : AppIntents.IntentParameter<V2>, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, P3 : AppIntents.IntentParameter<V3>, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, P4 : AppIntents.IntentParameter<V4>, V5 : AppIntents._IntentValue, V5 : Swift.Sendable, P5 : AppIntents.IntentParameter<V5>, V6 : AppIntents._IntentValue, V6 : Swift.Sendable, P6 : AppIntents.IntentParameter<V6>, V7 : AppIntents._IntentValue, V7 : Swift.Sendable, P7 : AppIntents.IntentParameter<V7>, V8 : AppIntents._IntentValue, V8 : Swift.Sendable, P8 : AppIntents.IntentParameter<V8>, V9 : AppIntents._IntentValue, V9 : Swift.Sendable, P9 : AppIntents.IntentParameter<V9>, V10 : AppIntents._IntentValue, V10 : Swift.Sendable, P10 : AppIntents.IntentParameter<V10>, V11 : AppIntents._IntentValue, V11 : Swift.Sendable, P11 : AppIntents.IntentParameter<V11>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterDependency {
  convenience public init<V0, P0, V1, P1, V2, P2, V3, P3, V4, P4, V5, P5, V6, P6, V7, P7, V8, P8, V9, P9, V10, P10, V11, P11, V12, P12>(_ k0: Swift.KeyPath<Intent, P0>, _ k1: Swift.KeyPath<Intent, P1>, _ k2: Swift.KeyPath<Intent, P2>, _ k3: Swift.KeyPath<Intent, P3>, _ k4: Swift.KeyPath<Intent, P4>, _ k5: Swift.KeyPath<Intent, P5>, _ k6: Swift.KeyPath<Intent, P6>, _ k7: Swift.KeyPath<Intent, P7>, _ k8: Swift.KeyPath<Intent, P8>, _ k9: Swift.KeyPath<Intent, P9>, _ k10: Swift.KeyPath<Intent, P10>, _ k11: Swift.KeyPath<Intent, P11>, _ k12: Swift.KeyPath<Intent, P12>) where V0 : AppIntents._IntentValue, V0 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, P1 : AppIntents.IntentParameter<V1>, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, P2 : AppIntents.IntentParameter<V2>, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, P3 : AppIntents.IntentParameter<V3>, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, P4 : AppIntents.IntentParameter<V4>, V5 : AppIntents._IntentValue, V5 : Swift.Sendable, P5 : AppIntents.IntentParameter<V5>, V6 : AppIntents._IntentValue, V6 : Swift.Sendable, P6 : AppIntents.IntentParameter<V6>, V7 : AppIntents._IntentValue, V7 : Swift.Sendable, P7 : AppIntents.IntentParameter<V7>, V8 : AppIntents._IntentValue, V8 : Swift.Sendable, P8 : AppIntents.IntentParameter<V8>, V9 : AppIntents._IntentValue, V9 : Swift.Sendable, P9 : AppIntents.IntentParameter<V9>, V10 : AppIntents._IntentValue, V10 : Swift.Sendable, P10 : AppIntents.IntentParameter<V10>, V11 : AppIntents._IntentValue, V11 : Swift.Sendable, P11 : AppIntents.IntentParameter<V11>, V12 : AppIntents._IntentValue, V12 : Swift.Sendable, P12 : AppIntents.IntentParameter<V12>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterDependency {
  convenience public init<V0, P0, V1, P1, V2, P2, V3, P3, V4, P4, V5, P5, V6, P6, V7, P7, V8, P8, V9, P9, V10, P10, V11, P11, V12, P12, V13, P13>(_ k0: Swift.KeyPath<Intent, P0>, _ k1: Swift.KeyPath<Intent, P1>, _ k2: Swift.KeyPath<Intent, P2>, _ k3: Swift.KeyPath<Intent, P3>, _ k4: Swift.KeyPath<Intent, P4>, _ k5: Swift.KeyPath<Intent, P5>, _ k6: Swift.KeyPath<Intent, P6>, _ k7: Swift.KeyPath<Intent, P7>, _ k8: Swift.KeyPath<Intent, P8>, _ k9: Swift.KeyPath<Intent, P9>, _ k10: Swift.KeyPath<Intent, P10>, _ k11: Swift.KeyPath<Intent, P11>, _ k12: Swift.KeyPath<Intent, P12>, _ k13: Swift.KeyPath<Intent, P13>) where V0 : AppIntents._IntentValue, V0 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, P1 : AppIntents.IntentParameter<V1>, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, P2 : AppIntents.IntentParameter<V2>, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, P3 : AppIntents.IntentParameter<V3>, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, P4 : AppIntents.IntentParameter<V4>, V5 : AppIntents._IntentValue, V5 : Swift.Sendable, P5 : AppIntents.IntentParameter<V5>, V6 : AppIntents._IntentValue, V6 : Swift.Sendable, P6 : AppIntents.IntentParameter<V6>, V7 : AppIntents._IntentValue, V7 : Swift.Sendable, P7 : AppIntents.IntentParameter<V7>, V8 : AppIntents._IntentValue, V8 : Swift.Sendable, P8 : AppIntents.IntentParameter<V8>, V9 : AppIntents._IntentValue, V9 : Swift.Sendable, P9 : AppIntents.IntentParameter<V9>, V10 : AppIntents._IntentValue, V10 : Swift.Sendable, P10 : AppIntents.IntentParameter<V10>, V11 : AppIntents._IntentValue, V11 : Swift.Sendable, P11 : AppIntents.IntentParameter<V11>, V12 : AppIntents._IntentValue, V12 : Swift.Sendable, P12 : AppIntents.IntentParameter<V12>, V13 : AppIntents._IntentValue, V13 : Swift.Sendable, P13 : AppIntents.IntentParameter<V13>
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension AppIntents.IntentParameterDependency {
  convenience public init<V0, P0, V1, P1, V2, P2, V3, P3, V4, P4, V5, P5, V6, P6, V7, P7, V8, P8, V9, P9, V10, P10, V11, P11, V12, P12, V13, P13, V14, P14>(_ k0: Swift.KeyPath<Intent, P0>, _ k1: Swift.KeyPath<Intent, P1>, _ k2: Swift.KeyPath<Intent, P2>, _ k3: Swift.KeyPath<Intent, P3>, _ k4: Swift.KeyPath<Intent, P4>, _ k5: Swift.KeyPath<Intent, P5>, _ k6: Swift.KeyPath<Intent, P6>, _ k7: Swift.KeyPath<Intent, P7>, _ k8: Swift.KeyPath<Intent, P8>, _ k9: Swift.KeyPath<Intent, P9>, _ k10: Swift.KeyPath<Intent, P10>, _ k11: Swift.KeyPath<Intent, P11>, _ k12: Swift.KeyPath<Intent, P12>, _ k13: Swift.KeyPath<Intent, P13>, _ k14: Swift.KeyPath<Intent, P14>) where V0 : AppIntents._IntentValue, V0 : Swift.Sendable, P0 : AppIntents.IntentParameter<V0>, V1 : AppIntents._IntentValue, V1 : Swift.Sendable, P1 : AppIntents.IntentParameter<V1>, V2 : AppIntents._IntentValue, V2 : Swift.Sendable, P2 : AppIntents.IntentParameter<V2>, V3 : AppIntents._IntentValue, V3 : Swift.Sendable, P3 : AppIntents.IntentParameter<V3>, V4 : AppIntents._IntentValue, V4 : Swift.Sendable, P4 : AppIntents.IntentParameter<V4>, V5 : AppIntents._IntentValue, V5 : Swift.Sendable, P5 : AppIntents.IntentParameter<V5>, V6 : AppIntents._IntentValue, V6 : Swift.Sendable, P6 : AppIntents.IntentParameter<V6>, V7 : AppIntents._IntentValue, V7 : Swift.Sendable, P7 : AppIntents.IntentParameter<V7>, V8 : AppIntents._IntentValue, V8 : Swift.Sendable, P8 : AppIntents.IntentParameter<V8>, V9 : AppIntents._IntentValue, V9 : Swift.Sendable, P9 : AppIntents.IntentParameter<V9>, V10 : AppIntents._IntentValue, V10 : Swift.Sendable, P10 : AppIntents.IntentParameter<V10>, V11 : AppIntents._IntentValue, V11 : Swift.Sendable, P11 : AppIntents.IntentParameter<V11>, V12 : AppIntents._IntentValue, V12 : Swift.Sendable, P12 : AppIntents.IntentParameter<V12>, V13 : AppIntents._IntentValue, V13 : Swift.Sendable, P13 : AppIntents.IntentParameter<V13>, V14 : AppIntents._IntentValue, V14 : Swift.Sendable, P14 : AppIntents.IntentParameter<V14>
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentFile.IntentFileError : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentFile.IntentFileError : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter : AppIntents.AnyIntentValue {}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EnumURLRepresentation.StringInterpolation.Token : Swift.Equatable {}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EnumURLRepresentation.StringInterpolation.Token : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentAuthenticationPolicy : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentAuthenticationPolicy : Swift.Hashable {}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, *)
@available(tvOS, unavailable)
extension AppIntents.ParameterSummarySwitchCondition.WidgetFamily : Swift.Equatable {}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, *)
@available(tvOS, unavailable)
extension AppIntents.ParameterSummarySwitchCondition.WidgetFamily : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.InputConnectionBehavior : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.InputConnectionBehavior : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppShortcutPhraseToken : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.AppShortcutPhraseToken : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ShortcutTileColor : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ShortcutTileColor : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter.IntControlStyle : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter.IntControlStyle : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.HasValueComparisonOperator : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.HasValueComparisonOperator : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EquatableComparisonOperator : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EquatableComparisonOperator : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.OneOfComparisonOperator : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.OneOfComparisonOperator : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ComparableComparisonOperator : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.ComparableComparisonOperator : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.StringComparisonOperator : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.StringComparisonOperator : Swift.Hashable {}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, *)
@available(tvOS, unavailable)
extension AppIntents.IntentWidgetFamily : Swift.Equatable {}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, *)
@available(tvOS, unavailable)
extension AppIntents.IntentWidgetFamily : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityQuerySort.Ordering : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityQuerySort.Ordering : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityQuerySort.Ordering : Swift.Sendable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityQuerySort.Ordering : Swift.BitwiseCopyable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter.PlacemarkDisplayStyle : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter.PlacemarkDisplayStyle : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter.DoubleControlStyle : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter.DoubleControlStyle : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPaymentMethod.PaymentType : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPaymentMethod.PaymentType : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter.DateKind : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentParameter.DateKind : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityQueryComparatorMode : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityQueryComparatorMode : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityQueryComparatorMode : Swift.Sendable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.EntityQueryComparatorMode : Swift.BitwiseCopyable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.String.IntentInputOptions.KeyboardType : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.String.IntentInputOptions.KeyboardType : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.String.IntentInputOptions.CapitalizationType : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension Swift.String.IntentInputOptions.CapitalizationType : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.SetFocusFilterIntentError : Swift.Hashable {}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityURLRepresentation.StringInterpolation.Token : Swift.Equatable {}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension AppIntents.EntityURLRepresentation.StringInterpolation.Token : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPerson.ParameterMode : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPerson.ParameterMode : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.IntentPerson.ParameterMode : Swift.RawRepresentable {}
