// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target x86_64-apple-ios18.5-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 2575.60.5 -module-name AppKit
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
@_exported import Accessibility
@_exported import AppKit
@_exported import CoreGraphics
import CoreText
import DataDetection
@_exported import DeveloperToolsSupport
import Foundation
import OSLog
import OpenGL
import Swift
import UniformTypeIdentifiers.UTType
import UniformTypeIdentifiers
@_exported import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(macCatalyst 18.0, macOS 15.0, *)
@frozen public enum NSHorizontalDirection : Swift.Int8, Swift.CaseIterable, Swift.Codable {
  case left
  case right
  @frozen public struct Set : Swift.OptionSet, Swift.Equatable, Swift.Hashable {
    public typealias Element = AppKit.NSHorizontalDirection.Set
    public typealias RawValue = Swift.Int8
    public let rawValue: AppKit.NSHorizontalDirection.Set.RawValue
    public init(rawValue: AppKit.NSHorizontalDirection.Set.RawValue)
    public static let left: AppKit.NSHorizontalDirection.Set
    public static let right: AppKit.NSHorizontalDirection.Set
    public static let all: AppKit.NSHorizontalDirection.Set
    public init(_ direction: AppKit.NSHorizontalDirection)
    @available(macOS 15.0, macCatalyst 18.0, *)
    public typealias ArrayLiteralElement = AppKit.NSHorizontalDirection.Set.Element
  }
  public init?(rawValue: Swift.Int8)
  @available(macOS 15.0, macCatalyst 18.0, *)
  public typealias AllCases = [AppKit.NSHorizontalDirection]
  @available(macOS 15.0, macCatalyst 18.0, *)
  public typealias RawValue = Swift.Int8
  nonisolated public static var allCases: [AppKit.NSHorizontalDirection] {
    get
  }
  public var rawValue: Swift.Int8 {
    get
  }
}
extension AppKit.NSHorizontalDirection.Set {
  @available(macCatalyst 18.0, macOS 15.0, *)
  public func contains(_ member: AppKit.NSHorizontalDirection) -> Swift.Bool
  @available(macCatalyst 18.0, macOS 15.0, *)
  @discardableResult
  public mutating func insert(_ newMember: __owned AppKit.NSHorizontalDirection) -> (inserted: Swift.Bool, memberAfterInsert: AppKit.NSHorizontalDirection)
  @available(macCatalyst 18.0, macOS 15.0, *)
  @discardableResult
  public mutating func remove(_ member: AppKit.NSHorizontalDirection) -> AppKit.NSHorizontalDirection?
  @available(macCatalyst 18.0, macOS 15.0, *)
  @discardableResult
  public mutating func update(with newMember: __owned AppKit.NSHorizontalDirection) -> AppKit.NSHorizontalDirection?
}
@available(macCatalyst 18.0, macOS 15.0, *)
@frozen public enum NSVerticalDirection : Swift.Int8, Swift.CaseIterable, Swift.Codable {
  case up
  case down
  @frozen public struct Set : Swift.OptionSet, Swift.Equatable, Swift.Hashable {
    public typealias Element = AppKit.NSVerticalDirection.Set
    public typealias RawValue = Swift.Int8
    public let rawValue: AppKit.NSVerticalDirection.Set.RawValue
    public init(rawValue: AppKit.NSVerticalDirection.Set.RawValue)
    public static let up: AppKit.NSVerticalDirection.Set
    public static let down: AppKit.NSVerticalDirection.Set
    public static let all: AppKit.NSVerticalDirection.Set
    public init(_ direction: AppKit.NSVerticalDirection)
    @available(macOS 15.0, macCatalyst 18.0, *)
    public typealias ArrayLiteralElement = AppKit.NSVerticalDirection.Set.Element
  }
  public init?(rawValue: Swift.Int8)
  @available(macOS 15.0, macCatalyst 18.0, *)
  public typealias AllCases = [AppKit.NSVerticalDirection]
  @available(macOS 15.0, macCatalyst 18.0, *)
  public typealias RawValue = Swift.Int8
  nonisolated public static var allCases: [AppKit.NSVerticalDirection] {
    get
  }
  public var rawValue: Swift.Int8 {
    get
  }
}
extension AppKit.NSVerticalDirection.Set {
  @available(macCatalyst 18.0, macOS 15.0, *)
  public func contains(_ member: AppKit.NSVerticalDirection) -> Swift.Bool
  @available(macCatalyst 18.0, macOS 15.0, *)
  @discardableResult
  public mutating func insert(_ newMember: __owned AppKit.NSVerticalDirection) -> (inserted: Swift.Bool, memberAfterInsert: AppKit.NSVerticalDirection)
  @available(macCatalyst 18.0, macOS 15.0, *)
  @discardableResult
  public mutating func remove(_ member: AppKit.NSVerticalDirection) -> AppKit.NSVerticalDirection?
  @available(macCatalyst 18.0, macOS 15.0, *)
  @discardableResult
  public mutating func update(with newMember: __owned AppKit.NSVerticalDirection) -> AppKit.NSVerticalDirection?
}
@available(macCatalyst 18.0, macOS 15.0, *)
extension AppKit.NSCursor {
  public class func columnResize(directions: AppKit.NSHorizontalDirection.Set) -> AppKit.NSCursor
  public class func rowResize(directions: AppKit.NSVerticalDirection.Set) -> AppKit.NSCursor
  public enum FrameResizeDirection : Swift.Int8, Swift.CaseIterable {
    case inward
    case outward
    public struct Set : Swift.OptionSet, Swift.Equatable, Swift.Hashable {
      public typealias Element = AppKit.NSCursor.FrameResizeDirection.Set
      public typealias RawValue = Swift.Int8
      public let rawValue: AppKit.NSCursor.FrameResizeDirection.Set.RawValue
      public init(rawValue: AppKit.NSCursor.FrameResizeDirection.Set.RawValue)
      public static let inward: AppKit.NSCursor.FrameResizeDirection.Set
      public static let outward: AppKit.NSCursor.FrameResizeDirection.Set
      public static let all: AppKit.NSCursor.FrameResizeDirection.Set
      public init(_ direction: AppKit.NSCursor.FrameResizeDirection)
      @available(iOS 13.0, macOS 15.0, macCatalyst 18.0, *)
      public typealias ArrayLiteralElement = AppKit.NSCursor.FrameResizeDirection.Set.Element
    }
    public init?(rawValue: Swift.Int8)
    @available(iOS 13.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias AllCases = [AppKit.NSCursor.FrameResizeDirection]
    @available(iOS 13.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias RawValue = Swift.Int8
    nonisolated public static var allCases: [AppKit.NSCursor.FrameResizeDirection] {
      get
    }
    public var rawValue: Swift.Int8 {
      get
    }
  }
  public class func frameResize(position: AppKit.NSCursor.FrameResizePosition, directions: AppKit.NSCursor.FrameResizeDirection.Set) -> AppKit.NSCursor
}
extension AppKit.NSCursor.FrameResizeDirection.Set {
  @available(macCatalyst 18.0, macOS 15.0, *)
  public func contains(_ member: AppKit.NSCursor.FrameResizeDirection) -> Swift.Bool
  @available(macCatalyst 18.0, macOS 15.0, *)
  @discardableResult
  public mutating func insert(_ newMember: __owned AppKit.NSCursor.FrameResizeDirection) -> (inserted: Swift.Bool, memberAfterInsert: AppKit.NSCursor.FrameResizeDirection)
  @available(macCatalyst 18.0, macOS 15.0, *)
  @discardableResult
  public mutating func remove(_ member: AppKit.NSCursor.FrameResizeDirection) -> AppKit.NSCursor.FrameResizeDirection?
  @available(macCatalyst 18.0, macOS 15.0, *)
  @discardableResult
  public mutating func update(with newMember: __owned AppKit.NSCursor.FrameResizeDirection) -> AppKit.NSCursor.FrameResizeDirection?
}
@available(macCatalyst 18.0, macOS 15.0, *)
extension AppKit.NSCursor.FrameResizePosition : Swift.CaseIterable {
  public static var allCases: [AppKit.NSCursor.FrameResizePosition] {
    get
  }
  @available(macOS 15.0, macCatalyst 18.0, *)
  public typealias AllCases = [AppKit.NSCursor.FrameResizePosition]
}
@available(macCatalyst 18.0, macOS 15.0, *)
extension AppKit.NSHorizontalDirection : Swift.Equatable {}
@available(macCatalyst 18.0, macOS 15.0, *)
extension AppKit.NSHorizontalDirection : Swift.Hashable {}
@available(macCatalyst 18.0, macOS 15.0, *)
extension AppKit.NSHorizontalDirection : Swift.RawRepresentable {}
@available(macCatalyst 18.0, macOS 15.0, *)
extension AppKit.NSHorizontalDirection : Swift.Sendable {}
@available(macCatalyst 18.0, macOS 15.0, *)
extension AppKit.NSHorizontalDirection : Swift.BitwiseCopyable {}
@available(macCatalyst 18.0, macOS 15.0, *)
extension AppKit.NSHorizontalDirection.Set : Swift.Sendable {}
@available(macCatalyst 18.0, macOS 15.0, *)
extension AppKit.NSHorizontalDirection.Set : Swift.BitwiseCopyable {}
@available(macCatalyst 18.0, macOS 15.0, *)
extension AppKit.NSVerticalDirection : Swift.Equatable {}
@available(macCatalyst 18.0, macOS 15.0, *)
extension AppKit.NSVerticalDirection : Swift.Hashable {}
@available(macCatalyst 18.0, macOS 15.0, *)
extension AppKit.NSVerticalDirection : Swift.RawRepresentable {}
@available(macCatalyst 18.0, macOS 15.0, *)
extension AppKit.NSVerticalDirection : Swift.Sendable {}
@available(macCatalyst 18.0, macOS 15.0, *)
extension AppKit.NSVerticalDirection : Swift.BitwiseCopyable {}
@available(macCatalyst 18.0, macOS 15.0, *)
extension AppKit.NSVerticalDirection.Set : Swift.Sendable {}
@available(macCatalyst 18.0, macOS 15.0, *)
extension AppKit.NSVerticalDirection.Set : Swift.BitwiseCopyable {}
@available(macCatalyst 18.0, macOS 15.0, *)
extension AppKit.NSCursor.FrameResizeDirection : Swift.Equatable {}
@available(macCatalyst 18.0, macOS 15.0, *)
extension AppKit.NSCursor.FrameResizeDirection : Swift.Hashable {}
@available(macCatalyst 18.0, macOS 15.0, *)
extension AppKit.NSCursor.FrameResizeDirection : Swift.RawRepresentable {}
