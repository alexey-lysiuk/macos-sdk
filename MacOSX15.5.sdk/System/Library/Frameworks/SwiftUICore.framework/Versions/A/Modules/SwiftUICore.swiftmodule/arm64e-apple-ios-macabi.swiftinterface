// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64e-apple-ios18.5-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature Macros -enable-experimental-feature ExtensionMacros -module-abi-name SwiftUI -enable-experimental-feature IsolatedAny2 -enable-upcoming-feature InferSendableFromCaptures -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 6.5.4 -module-name SwiftUICore -package-name SwiftUI
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import Accessibility
import Combine
import CoreFoundation
import CoreTransferable
import DeveloperToolsSupport
import Foundation
import Observation
import Swift
@_exported import SwiftUICore
import Symbols
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
import simd
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _ViewInputs {
}
@available(*, unavailable)
extension SwiftUICore._ViewInputs : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum LayoutDirection : Swift.Hashable, Swift.CaseIterable, Swift.Sendable {
  case leftToRight
  case rightToLeft
  public static func == (a: SwiftUICore.LayoutDirection, b: SwiftUICore.LayoutDirection) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AllCases = [SwiftUICore.LayoutDirection]
  nonisolated public static var allCases: [SwiftUICore.LayoutDirection] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var layoutDirection: SwiftUICore.LayoutDirection {
    get
    set
  }
}
extension CoreFoundation.CGPoint {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package static var infinity: CoreFoundation.CGPoint {
    get {
        return .init(x: CGFloat.infinity, y: CGFloat.infinity)
    }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package init(_ size: CoreFoundation.CGSize) {
        self.init(x: size.width, y: size.height)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package var isFinite: Swift.Bool {
    get {
        return x.isFinite && y.isFinite
    }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func offsetBy(dx: CoreFoundation.CGFloat, dy: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint {
        return CGPoint(x: self.x + dx, y: self.y + dy)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func offsetBy(dx: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint {
        offsetBy(dx: dx, dy: 0)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func offsetBy(dy: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint {
        offsetBy(dx: 0, dy: dy)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func offset(by offset: CoreFoundation.CGSize) -> CoreFoundation.CGPoint {
        return offsetBy(dx: offset.width, dy: offset.height)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func scaledBy(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint {
        return CGPoint(x: self.x * x, y: self.y * y)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func scaledBy(x: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint {
        scaledBy(x: x, y: 1)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func scaledBy(y: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint {
        scaledBy(x: 1, y: y)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func scaled(by scale: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint {
        return self.scaledBy(x: scale, y: scale)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package var isNaN: Swift.Bool {
    get { x.isNaN || y.isNaN }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package var flushingNaNs: CoreFoundation.CGPoint {
    get {
        return CGPoint(x: !x.isNaN ? x : 0, y: !y.isNaN ? y : 0)
    }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func approximates(_ other: CoreFoundation.CGPoint, epsilon: CoreFoundation.CGFloat) -> Swift.Bool {
        x.approximates(other.x, epsilon: epsilon)
            && y.approximates(other.y, epsilon: epsilon)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package mutating func clamp(size: CoreFoundation.CGSize) {
        x.clamp(to: 0 ... size.width)
        y.clamp(to: 0 ... size.height)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func clamped(size: CoreFoundation.CGSize) -> CoreFoundation.CGPoint {
        var point = self
        point.clamp(size: size)
        return point
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package mutating func clamp(rect: CoreFoundation.CGRect) {
        x.clamp(to: rect.x ... rect.size.width)
        y.clamp(to: rect.y ... rect.size.height)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func clamped(rect: CoreFoundation.CGRect) -> CoreFoundation.CGPoint {
        var point = self
        point.clamp(rect: rect)
        return point
    }
}
extension CoreFoundation.CGPoint {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package subscript(d: SwiftUICore.Axis) -> CoreFoundation.CGFloat {
    get { return d == .horizontal ? x : y }
    set { if d == .horizontal { x = newValue } else { y = newValue } }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package init(_ l1: CoreFoundation.CGFloat, in first: SwiftUICore.Axis, by l2: CoreFoundation.CGFloat) {
        self = first == .horizontal ? CGPoint(x: l1, y: l2) :
            CGPoint(x: l2, y: l1)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension CoreFoundation.CGPoint : SwiftUICore.Animatable {
  public typealias AnimatableData = SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>
  public var animatableData: CoreFoundation.CGPoint.AnimatableData {
    @inlinable get { return .init(x, y) }
    @inlinable set { (x, y) = (newValue.first, newValue.second) }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var isEnabled: Swift.Bool {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func disabled(_ disabled: Swift.Bool) -> some SwiftUICore.View {
        return modifier(_EnvironmentKeyTransformModifier(
            keyPath: \.isEnabled, transform: { $0 = $0 && !disabled }))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct EventModifiers : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let capsLock: SwiftUICore.EventModifiers
  public static let shift: SwiftUICore.EventModifiers
  public static let control: SwiftUICore.EventModifiers
  public static let option: SwiftUICore.EventModifiers
  public static let command: SwiftUICore.EventModifiers
  public static let numericPad: SwiftUICore.EventModifiers
  @available(iOS, deprecated: 15.0, message: "Function modifier is reserved for system applications")
  @available(macOS, deprecated: 12.0, message: "Function modifier is reserved for system applications")
  @available(tvOS, deprecated: 15.0, message: "Function modifier is reserved for system applications")
  @available(watchOS, deprecated: 8.0, message: "Function modifier is reserved for system applications")
  @available(visionOS, deprecated: 1.0, message: "Function modifier is reserved for system applications")
  public static let function: SwiftUICore.EventModifiers
  public static let all: SwiftUICore.EventModifiers
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ArrayLiteralElement = SwiftUICore.EventModifiers
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Element = SwiftUICore.EventModifiers
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias RawValue = Swift.Int
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct ScrollGeometry : Swift.Equatable, Swift.Sendable {
  public var contentOffset: CoreFoundation.CGPoint {
    get
    set
  }
  public var contentSize: CoreFoundation.CGSize
  public var contentInsets: SwiftUICore.EdgeInsets
  public var containerSize: CoreFoundation.CGSize {
    get
    set
  }
  public var visibleRect: CoreFoundation.CGRect {
    get
  }
  public var bounds: CoreFoundation.CGRect {
    get
  }
  public static func == (a: SwiftUICore.ScrollGeometry, b: SwiftUICore.ScrollGeometry) -> Swift.Bool
}
extension SwiftUICore.ScrollGeometry {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public init(contentOffset: CoreFoundation.CGPoint, contentSize: CoreFoundation.CGSize, contentInsets: SwiftUICore.EdgeInsets, containerSize: CoreFoundation.CGSize)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.ScrollGeometry : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _ScrollLayout : Swift.Equatable {
  public var contentOffset: CoreFoundation.CGPoint
  public var size: CoreFoundation.CGSize
  public var visibleRect: CoreFoundation.CGRect
  public init(contentOffset: CoreFoundation.CGPoint, size: CoreFoundation.CGSize, visibleRect: CoreFoundation.CGRect)
  public static func == (a: SwiftUICore._ScrollLayout, b: SwiftUICore._ScrollLayout) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore._ScrollLayout : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image {
  public enum ResizingMode : Swift.Sendable {
    case tile
    case stretch
    public static func == (a: SwiftUICore.Image.ResizingMode, b: SwiftUICore.Image.ResizingMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func resizable(capInsets: SwiftUICore.EdgeInsets = EdgeInsets(), resizingMode: SwiftUICore.Image.ResizingMode = .stretch) -> SwiftUICore.Image
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func _ignoresAutomaticPadding(_ ignoresPadding: Swift.Bool) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func _automaticPadding(_ edgeInsets: SwiftUICore.EdgeInsets? = nil) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct ZStack<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @usableFromInline
  package var _tree: SwiftUICore._VariadicView.Tree<SwiftUICore._ZStackLayout, Content>
  @inlinable public init(alignment: SwiftUICore.Alignment = .center, @SwiftUICore.ViewBuilder content: () -> Content) {
        _tree = .init(_ZStackLayout(alignment: alignment)) { content() }
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.ZStack<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.ZStack : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _ZStackLayout : SwiftUICore._VariadicView.UnaryViewRoot, SwiftUICore.Animatable {
  public var alignment: SwiftUICore.Alignment
  @inlinable public init(alignment: SwiftUICore.Alignment = .center) {
        self.alignment = alignment
    }
  nonisolated public static func _makeView(root: SwiftUICore._GraphValue<SwiftUICore._ZStackLayout>, inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ZStackLayout : SwiftUICore.Layout {
  public static var layoutProperties: SwiftUICore.LayoutProperties {
    get
  }
  public func placeSubviews(in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUICore._ZStackLayout.Subviews, cache: inout Swift.Void)
  public func spacing(subviews: SwiftUICore._ZStackLayout.Subviews, cache: inout Swift.Void) -> SwiftUICore.ViewSpacing
  public func sizeThatFits(proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUICore._ZStackLayout.Subviews, cache: inout Swift.Void) -> CoreFoundation.CGSize
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Cache = Swift.Void
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct ZStackLayout : SwiftUICore.Layout {
  public var alignment: SwiftUICore.Alignment
  @inlinable public init(alignment: SwiftUICore.Alignment = .center) {
        self.alignment = alignment
    }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Cache = Swift.Void
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.LinearGradient {
  @_alwaysEmitIntoClient public static func linearGradient(_ gradient: SwiftUICore.Gradient, startPoint: SwiftUICore.UnitPoint, endPoint: SwiftUICore.UnitPoint) -> SwiftUICore.LinearGradient {
        .init(gradient: gradient, startPoint: startPoint, endPoint: endPoint)
    }
  @_alwaysEmitIntoClient public static func linearGradient(colors: [SwiftUICore.Color], startPoint: SwiftUICore.UnitPoint, endPoint: SwiftUICore.UnitPoint) -> SwiftUICore.LinearGradient {
        .init(colors: colors, startPoint: startPoint, endPoint: endPoint)
    }
  @_alwaysEmitIntoClient public static func linearGradient(stops: [SwiftUICore.Gradient.Stop], startPoint: SwiftUICore.UnitPoint, endPoint: SwiftUICore.UnitPoint) -> SwiftUICore.LinearGradient {
        .init(stops: stops, startPoint: startPoint, endPoint: endPoint)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.RadialGradient {
  @_alwaysEmitIntoClient public static func radialGradient(_ gradient: SwiftUICore.Gradient, center: SwiftUICore.UnitPoint, startRadius: CoreFoundation.CGFloat, endRadius: CoreFoundation.CGFloat) -> SwiftUICore.RadialGradient {
        .init(
            gradient: gradient, center: center,
            startRadius: startRadius, endRadius: endRadius)
    }
  @_alwaysEmitIntoClient public static func radialGradient(colors: [SwiftUICore.Color], center: SwiftUICore.UnitPoint, startRadius: CoreFoundation.CGFloat, endRadius: CoreFoundation.CGFloat) -> SwiftUICore.RadialGradient {
        .init(
            colors: colors, center: center,
            startRadius: startRadius, endRadius: endRadius)
    }
  @_alwaysEmitIntoClient public static func radialGradient(stops: [SwiftUICore.Gradient.Stop], center: SwiftUICore.UnitPoint, startRadius: CoreFoundation.CGFloat, endRadius: CoreFoundation.CGFloat) -> SwiftUICore.RadialGradient {
        .init(
            stops: stops, center: center,
            startRadius: startRadius, endRadius: endRadius)
    }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.EllipticalGradient {
  @_alwaysEmitIntoClient public static func ellipticalGradient(_ gradient: SwiftUICore.Gradient, center: SwiftUICore.UnitPoint = .center, startRadiusFraction: CoreFoundation.CGFloat = 0, endRadiusFraction: CoreFoundation.CGFloat = 0.5) -> SwiftUICore.EllipticalGradient {
        .init(
            gradient: gradient, center: center,
            startRadiusFraction: startRadiusFraction,
            endRadiusFraction: endRadiusFraction)
    }
  @_alwaysEmitIntoClient public static func ellipticalGradient(colors: [SwiftUICore.Color], center: SwiftUICore.UnitPoint = .center, startRadiusFraction: CoreFoundation.CGFloat = 0, endRadiusFraction: CoreFoundation.CGFloat = 0.5) -> SwiftUICore.EllipticalGradient {
        .init(
            colors: colors, center: center,
            startRadiusFraction: startRadiusFraction,
            endRadiusFraction: endRadiusFraction)
    }
  @_alwaysEmitIntoClient public static func ellipticalGradient(stops: [SwiftUICore.Gradient.Stop], center: SwiftUICore.UnitPoint = .center, startRadiusFraction: CoreFoundation.CGFloat = 0, endRadiusFraction: CoreFoundation.CGFloat = 0.5) -> SwiftUICore.EllipticalGradient {
        .init(
            stops: stops, center: center,
            startRadiusFraction: startRadiusFraction,
            endRadiusFraction: endRadiusFraction)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.AngularGradient {
  @_alwaysEmitIntoClient public static func angularGradient(_ gradient: SwiftUICore.Gradient, center: SwiftUICore.UnitPoint, startAngle: SwiftUICore.Angle, endAngle: SwiftUICore.Angle) -> SwiftUICore.AngularGradient {
        .init(
            gradient: gradient, center: center,
            startAngle: startAngle, endAngle: endAngle)
    }
  @_alwaysEmitIntoClient public static func angularGradient(colors: [SwiftUICore.Color], center: SwiftUICore.UnitPoint, startAngle: SwiftUICore.Angle, endAngle: SwiftUICore.Angle) -> SwiftUICore.AngularGradient {
        .init(
            colors: colors, center: center,
            startAngle: startAngle, endAngle: endAngle)
    }
  @_alwaysEmitIntoClient public static func angularGradient(stops: [SwiftUICore.Gradient.Stop], center: SwiftUICore.UnitPoint, startAngle: SwiftUICore.Angle, endAngle: SwiftUICore.Angle) -> SwiftUICore.AngularGradient {
        .init(
            stops: stops, center: center,
            startAngle: startAngle, endAngle: endAngle)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.AngularGradient {
  @_alwaysEmitIntoClient public static func conicGradient(_ gradient: SwiftUICore.Gradient, center: SwiftUICore.UnitPoint, angle: SwiftUICore.Angle = .zero) -> SwiftUICore.AngularGradient {
        .init(gradient: gradient, center: center, angle: angle)
    }
  @_alwaysEmitIntoClient public static func conicGradient(colors: [SwiftUICore.Color], center: SwiftUICore.UnitPoint, angle: SwiftUICore.Angle = .zero) -> SwiftUICore.AngularGradient {
        .init(colors: colors, center: center, angle: angle)
    }
  @_alwaysEmitIntoClient public static func conicGradient(stops: [SwiftUICore.Gradient.Stop], center: SwiftUICore.UnitPoint, angle: SwiftUICore.Angle = .zero) -> SwiftUICore.AngularGradient {
        .init(stops: stops, center: center, angle: angle)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct LinearGradient : SwiftUICore.ShapeStyle, SwiftUICore.View, Swift.Sendable {
  package var gradient: SwiftUICore.Gradient
  package var startPoint: SwiftUICore.UnitPoint
  package var endPoint: SwiftUICore.UnitPoint
  public init(gradient: SwiftUICore.Gradient, startPoint: SwiftUICore.UnitPoint, endPoint: SwiftUICore.UnitPoint)
  @_alwaysEmitIntoClient public init(colors: [SwiftUICore.Color], startPoint: SwiftUICore.UnitPoint, endPoint: SwiftUICore.UnitPoint) {
        self.init(
            gradient: Gradient(colors: colors),
            startPoint: startPoint, endPoint: endPoint)
    }
  @_alwaysEmitIntoClient public init(stops: [SwiftUICore.Gradient.Stop], startPoint: SwiftUICore.UnitPoint, endPoint: SwiftUICore.UnitPoint) {
        self.init(
            gradient: Gradient(stops: stops),
            startPoint: startPoint, endPoint: endPoint)
    }
  @available(*, deprecated, message: "obsolete")
  @_alwaysEmitIntoClient public static func _makeView<S>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<S, SwiftUICore.LinearGradient>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where S : SwiftUICore.Shape {
        _ShapeView<S, Self>._makeView(view: view, inputs: inputs)
    }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.Rectangle, SwiftUICore.LinearGradient>
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct RadialGradient : SwiftUICore.ShapeStyle, SwiftUICore.View, Swift.Sendable {
  package var gradient: SwiftUICore.Gradient
  package var center: SwiftUICore.UnitPoint
  package var startRadius: CoreFoundation.CGFloat
  package var endRadius: CoreFoundation.CGFloat
  public init(gradient: SwiftUICore.Gradient, center: SwiftUICore.UnitPoint, startRadius: CoreFoundation.CGFloat, endRadius: CoreFoundation.CGFloat)
  @_alwaysEmitIntoClient public init(colors: [SwiftUICore.Color], center: SwiftUICore.UnitPoint, startRadius: CoreFoundation.CGFloat, endRadius: CoreFoundation.CGFloat) {
        self.init(
            gradient: Gradient(colors: colors), center: center,
            startRadius: startRadius, endRadius: endRadius)
    }
  @_alwaysEmitIntoClient public init(stops: [SwiftUICore.Gradient.Stop], center: SwiftUICore.UnitPoint, startRadius: CoreFoundation.CGFloat, endRadius: CoreFoundation.CGFloat) {
        self.init(
            gradient: Gradient(stops: stops), center: center,
            startRadius: startRadius, endRadius: endRadius)
    }
  @available(*, deprecated, message: "obsolete")
  @_alwaysEmitIntoClient public static func _makeView<S>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<S, SwiftUICore.RadialGradient>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where S : SwiftUICore.Shape {
        _ShapeView<S, Self>._makeView(view: view, inputs: inputs)
    }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.Rectangle, SwiftUICore.RadialGradient>
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct EllipticalGradient : SwiftUICore.ShapeStyle, SwiftUICore.View, Swift.Sendable {
  package var gradient: SwiftUICore.Gradient
  package var center: SwiftUICore.UnitPoint
  package var startRadiusFraction: CoreFoundation.CGFloat
  package var endRadiusFraction: CoreFoundation.CGFloat
  public init(gradient: SwiftUICore.Gradient, center: SwiftUICore.UnitPoint = .center, startRadiusFraction: CoreFoundation.CGFloat = 0, endRadiusFraction: CoreFoundation.CGFloat = 0.5)
  public init(colors: [SwiftUICore.Color], center: SwiftUICore.UnitPoint = .center, startRadiusFraction: CoreFoundation.CGFloat = 0, endRadiusFraction: CoreFoundation.CGFloat = 0.5)
  public init(stops: [SwiftUICore.Gradient.Stop], center: SwiftUICore.UnitPoint = .center, startRadiusFraction: CoreFoundation.CGFloat = 0, endRadiusFraction: CoreFoundation.CGFloat = 0.5)
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.Rectangle, SwiftUICore.EllipticalGradient>
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct AngularGradient : SwiftUICore.ShapeStyle, SwiftUICore.View, Swift.Sendable {
  package var gradient: SwiftUICore.Gradient
  package var center: SwiftUICore.UnitPoint
  package var startAngle: SwiftUICore.Angle
  package var endAngle: SwiftUICore.Angle
  public init(gradient: SwiftUICore.Gradient, center: SwiftUICore.UnitPoint, startAngle: SwiftUICore.Angle = .zero, endAngle: SwiftUICore.Angle = .zero)
  @_alwaysEmitIntoClient public init(colors: [SwiftUICore.Color], center: SwiftUICore.UnitPoint, startAngle: SwiftUICore.Angle, endAngle: SwiftUICore.Angle) {
        self.init(gradient: Gradient(colors: colors), center: center,
            startAngle: startAngle, endAngle: endAngle)
    }
  @_alwaysEmitIntoClient public init(stops: [SwiftUICore.Gradient.Stop], center: SwiftUICore.UnitPoint, startAngle: SwiftUICore.Angle, endAngle: SwiftUICore.Angle) {
        self.init(gradient: Gradient(stops: stops), center: center,
            startAngle: startAngle, endAngle: endAngle)
    }
  public init(gradient: SwiftUICore.Gradient, center: SwiftUICore.UnitPoint, angle: SwiftUICore.Angle = .zero)
  @_alwaysEmitIntoClient public init(colors: [SwiftUICore.Color], center: SwiftUICore.UnitPoint, angle: SwiftUICore.Angle = .zero) {
        self.init(gradient: Gradient(colors: colors), center: center,
            angle: angle)
    }
  @_alwaysEmitIntoClient public init(stops: [SwiftUICore.Gradient.Stop], center: SwiftUICore.UnitPoint, angle: SwiftUICore.Angle = .zero) {
        self.init(gradient: Gradient(stops: stops), center: center,
            angle: angle)
    }
  @available(*, deprecated, message: "obsolete")
  @_alwaysEmitIntoClient public static func _makeView<S>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<S, SwiftUICore.AngularGradient>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where S : SwiftUICore.Shape {
        _ShapeView<S, Self>._makeView(view: view, inputs: inputs)
    }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.Rectangle, SwiftUICore.AngularGradient>
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View where Self : SwiftUICore.Animatable {
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public enum ScrollPhase : Swift.Equatable {
  case idle
  case tracking
  case interacting
  case decelerating
  case animating
  public var isScrolling: Swift.Bool {
    get
  }
  public static func == (a: SwiftUICore.ScrollPhase, b: SwiftUICore.ScrollPhase) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ScrollPhase : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension Foundation.FormatStyle where Self == SwiftUICore.SystemFormatStyle.DateReference {
  public static func reference(to date: Foundation.Date, allowedFields: Swift.Set<Foundation.Date.RelativeFormatStyle.Field> = [.year, .month, .day, .hour, .minute], maxFieldCount: Swift.Int = 2, thresholdField: Foundation.Date.RelativeFormatStyle.Field = .day) -> SwiftUICore.SystemFormatStyle.DateReference
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.SystemFormatStyle {
  public struct DateReference : Swift.Sendable {
    public init(to date: Foundation.Date, allowedFields: Swift.Set<Foundation.Date.RelativeFormatStyle.Field> = [.year, .month, .day, .hour, .minute], maxFieldCount: Swift.Int = 2, thresholdField: Foundation.Date.RelativeFormatStyle.Field = .day)
    public func calendar(_ calendar: Foundation.Calendar) -> SwiftUICore.SystemFormatStyle.DateReference
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.SystemFormatStyle.DateReference : Foundation.FormatStyle {
  public func format(_ referenceDate: Foundation.Date) -> Foundation.AttributedString
  public func locale(_ locale: Foundation.Locale) -> SwiftUICore.SystemFormatStyle.DateReference
  public static func == (a: SwiftUICore.SystemFormatStyle.DateReference, b: SwiftUICore.SystemFormatStyle.DateReference) -> Swift.Bool
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias FormatInput = Foundation.Date
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias FormatOutput = Foundation.AttributedString
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.SystemFormatStyle.DateReference : Foundation.DiscreteFormatStyle {
  public func discreteInput(before referenceDate: Foundation.Date) -> Foundation.Date?
  public func discreteInput(after referenceDate: Foundation.Date) -> Foundation.Date?
  public func input(before referenceDate: Foundation.Date) -> Foundation.Date?
  public func input(after referenceDate: Foundation.Date) -> Foundation.Date?
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
public struct ScrollPosition : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.ScrollPosition {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public init(id: some Hashable & Sendable, anchor: SwiftUICore.UnitPoint? = nil)
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public init(idType: (some Hashable & Sendable).Type = Never.self)
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public init(idType: (some Hashable & Sendable).Type = Never.self, edge: SwiftUICore.Edge)
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public init(idType: (some Hashable & Sendable).Type = Never.self, point: CoreFoundation.CGPoint)
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public init(idType: (some Hashable & Sendable).Type = Never.self, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public init(idType: (some Hashable & Sendable).Type = Never.self, x: CoreFoundation.CGFloat)
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public init(idType: (some Hashable & Sendable).Type = Never.self, y: CoreFoundation.CGFloat)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.ScrollPosition {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public mutating func scrollTo(id: some Hashable & Sendable, anchor: SwiftUICore.UnitPoint? = nil)
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public mutating func scrollTo(edge: SwiftUICore.Edge)
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public mutating func scrollTo(point: CoreFoundation.CGPoint)
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public mutating func scrollTo(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public mutating func scrollTo(x: CoreFoundation.CGFloat)
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public mutating func scrollTo(y: CoreFoundation.CGFloat)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.ScrollPosition {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public var isPositionedByUser: Swift.Bool {
    get
    set
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public var edge: SwiftUICore.Edge? {
    get
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public var point: CoreFoundation.CGPoint? {
    get
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public var viewID: (any Swift.Hashable & Swift.Sendable)? {
    get
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public func viewID<T>(type: T.Type) -> T? where T : Swift.Hashable, T : Swift.Sendable
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.ScrollPosition : Swift.Equatable {
  public static func == (lhs: SwiftUICore.ScrollPosition, rhs: SwiftUICore.ScrollPosition) -> Swift.Bool
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@frozen public enum HorizontalDirection : Swift.Int8, Swift.CaseIterable, Swift.Codable {
  case leading
  case trailing
  @frozen public struct Set : Swift.OptionSet, Swift.Equatable, Swift.Hashable {
    public typealias Element = SwiftUICore.HorizontalDirection.Set
    public let rawValue: Swift.Int8
    public init(rawValue: Swift.Int8)
    public static let leading: SwiftUICore.HorizontalDirection.Set
    public static let trailing: SwiftUICore.HorizontalDirection.Set
    public static let all: SwiftUICore.HorizontalDirection.Set
    public init(_ direction: SwiftUICore.HorizontalDirection)
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
    public typealias ArrayLiteralElement = SwiftUICore.HorizontalDirection.Set.Element
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
    public typealias RawValue = Swift.Int8
  }
  public init?(rawValue: Swift.Int8)
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias AllCases = [SwiftUICore.HorizontalDirection]
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias RawValue = Swift.Int8
  nonisolated public static var allCases: [SwiftUICore.HorizontalDirection] {
    get
  }
  public var rawValue: Swift.Int8 {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@frozen public enum VerticalDirection : Swift.Int8, Swift.CaseIterable, Swift.Codable {
  case up
  case down
  @frozen public struct Set : Swift.OptionSet {
    public typealias Element = SwiftUICore.VerticalDirection.Set
    public let rawValue: Swift.Int8
    public init(rawValue: Swift.Int8)
    public static let up: SwiftUICore.VerticalDirection.Set
    public static let down: SwiftUICore.VerticalDirection.Set
    public static let all: SwiftUICore.VerticalDirection.Set
    public init(_ direction: SwiftUICore.VerticalDirection)
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
    public typealias ArrayLiteralElement = SwiftUICore.VerticalDirection.Set.Element
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
    public typealias RawValue = Swift.Int8
  }
  public init?(rawValue: Swift.Int8)
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias AllCases = [SwiftUICore.VerticalDirection]
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias RawValue = Swift.Int8
  nonisolated public static var allCases: [SwiftUICore.VerticalDirection] {
    get
  }
  public var rawValue: Swift.Int8 {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnyTransition {
  public static func modifier<E>(active: E, identity: E) -> SwiftUICore.AnyTransition where E : SwiftUICore.ViewModifier
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct ScrollTarget {
  public var rect: CoreFoundation.CGRect
  public var anchor: SwiftUICore.UnitPoint?
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ScrollTarget : Swift.Hashable, Swift.Equatable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUICore.ScrollTarget, b: SwiftUICore.ScrollTarget) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore.ScrollTarget : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _OffsetEffect : SwiftUICore.GeometryEffect, Swift.Equatable {
  public var offset: CoreFoundation.CGSize
  @inlinable nonisolated public init(offset: CoreFoundation.CGSize) {
        self.offset = offset
    }
  public func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.ProjectionTransform
  public var animatableData: CoreFoundation.CGSize.AnimatableData {
    get
    set
  }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._OffsetEffect>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  public static func == (a: SwiftUICore._OffsetEffect, b: SwiftUICore._OffsetEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = CoreFoundation.CGSize.AnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func offset(_ offset: CoreFoundation.CGSize) -> some SwiftUICore.View {
        return modifier(_OffsetEffect(offset: offset))
    }
  
  @inlinable nonisolated public func offset(x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0) -> some SwiftUICore.View {
        return offset(CGSize(width: x, height: y))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnyTransition {
  public static func offset(_ offset: CoreFoundation.CGSize) -> SwiftUICore.AnyTransition
  public static func offset(x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0) -> SwiftUICore.AnyTransition
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Transition where Self == SwiftUICore.OffsetTransition {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static func offset(_ offset: CoreFoundation.CGSize) -> Self { Self(offset) }
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static func offset(x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0) -> Self {
        offset(CGSize(width: x, height: y))
    }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_Concurrency.MainActor @preconcurrency public struct OffsetTransition : SwiftUICore.Transition {
  @_Concurrency.MainActor @preconcurrency public var offset: CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency public init(_ offset: CoreFoundation.CGSize)
  @_Concurrency.MainActor @preconcurrency public func body(content: SwiftUICore.OffsetTransition.Content, phase: SwiftUICore.TransitionPhase) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func _makeContentTransition(transition: inout SwiftUICore._Transition_ContentTransition)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI16OffsetTransitionV4body7content5phaseQrAA22PlaceholderContentViewVyACG_AA0D5PhaseOtF", 0) __
}
@available(*, unavailable)
extension SwiftUICore.OffsetTransition : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _AnyAnimatableData : SwiftUICore.VectorArithmetic {
  package var vtable: SwiftUICore._AnyAnimatableDataVTable.Type
  package var value: Any
  public static var zero: SwiftUICore._AnyAnimatableData {
    get
  }
  public static func == (lhs: SwiftUICore._AnyAnimatableData, rhs: SwiftUICore._AnyAnimatableData) -> Swift.Bool
  public static func += (lhs: inout SwiftUICore._AnyAnimatableData, rhs: SwiftUICore._AnyAnimatableData)
  public static func -= (lhs: inout SwiftUICore._AnyAnimatableData, rhs: SwiftUICore._AnyAnimatableData)
  @_transparent public static func + (lhs: SwiftUICore._AnyAnimatableData, rhs: SwiftUICore._AnyAnimatableData) -> SwiftUICore._AnyAnimatableData {
        var ret = lhs
        ret += rhs
        return ret
    }
  @_transparent public static func - (lhs: SwiftUICore._AnyAnimatableData, rhs: SwiftUICore._AnyAnimatableData) -> SwiftUICore._AnyAnimatableData {
        var ret = lhs
        ret -= rhs
        return ret
    }
  public mutating func scale(by rhs: Swift.Double)
  public var magnitudeSquared: Swift.Double {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore._AnyAnimatableData : Swift.Sendable {
}
@_hasMissingDesignatedInitializers @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package class _AnyAnimatableDataVTable {
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUICore._AnyAnimatableDataVTable : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 14.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 14.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 7.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ColorMonochromeEffect : SwiftUICore.EnvironmentalModifier {
  @_Concurrency.MainActor @preconcurrency public var color: SwiftUICore.Color
  @_Concurrency.MainActor @preconcurrency public var amount: Swift.Double
  @_Concurrency.MainActor @preconcurrency public var bias: Swift.Double
  @inlinable @_Concurrency.MainActor @preconcurrency public init(color: SwiftUICore.Color, amount: Swift.Double = 1, bias: Swift.Double = 0) {
        self.color = color
        self.bias = bias
        self.amount = amount
    }
  @_Concurrency.MainActor @preconcurrency public func resolve(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore._ColorMonochromeEffect._Resolved
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_Concurrency.MainActor @preconcurrency public static var _requiresMainThread: Swift.Bool {
    get
  }
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var _requiresMainThread: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public struct _Resolved {
    public typealias AnimatableData = SwiftUICore.AnimatablePair<Swift.Float, SwiftUICore.AnimatablePair<Swift.Float, SwiftUICore.AnimatablePair<Swift.Float, SwiftUICore.AnimatablePair<Swift.Float, SwiftUICore.AnimatablePair<Swift.Float, Swift.Float>>>>>
    @_Concurrency.MainActor @preconcurrency public var animatableData: SwiftUICore._ColorMonochromeEffect._Resolved.AnimatableData {
      get
      set
    }
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    public typealias Body = Swift.Never
  }
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias ResolvedModifier = SwiftUICore._ColorMonochromeEffect._Resolved
}
@available(*, unavailable)
extension SwiftUICore._ColorMonochromeEffect._Resolved : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore._ColorMonochromeEffect : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 14.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 14.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 7.0)
extension SwiftUICore.View {
  @inlinable @_Concurrency.MainActor @preconcurrency public func _colorMonochrome(_ color: SwiftUICore.Color, amount: Swift.Double = 1, bias: Swift.Double = 0) -> some SwiftUICore.View {
        return modifier(_ColorMonochromeEffect(
            color: color, amount: amount, bias: bias))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Gesture {
  @inlinable @_Concurrency.MainActor @preconcurrency public func simultaneously<Other>(with other: Other) -> SwiftUICore.SimultaneousGesture<Self, Other> where Other : SwiftUICore.Gesture {
        return SimultaneousGesture(self, other)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct SimultaneousGesture<First, Second> : SwiftUICore.Gesture where First : SwiftUICore.Gesture, Second : SwiftUICore.Gesture {
  @frozen public struct Value {
    public var first: First.Value?
    public var second: Second.Value?
  }
  public var first: First
  public var second: Second
  @inlinable public init(_ first: First, _ second: Second) {
        (self.first, self.second) = (first, second)
    }
  nonisolated public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUICore.SimultaneousGesture<First, Second>>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<SwiftUICore.SimultaneousGesture<First, Second>.Value>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.SimultaneousGesture.Value : Swift.Sendable where First.Value : Swift.Sendable, Second.Value : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.SimultaneousGesture : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.SimultaneousGesture.Value : Swift.Equatable where First.Value : Swift.Equatable, Second.Value : Swift.Equatable {
  public static func == (a: SwiftUICore.SimultaneousGesture<First, Second>.Value, b: SwiftUICore.SimultaneousGesture<First, Second>.Value) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.SimultaneousGesture.Value : Swift.Hashable where First.Value : Swift.Hashable, Second.Value : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct VStack<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @usableFromInline
  internal var _tree: SwiftUICore._VariadicView.Tree<SwiftUICore._VStackLayout, Content>
  @inlinable public init(alignment: SwiftUICore.HorizontalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder content: () -> Content) {
        _tree = .init(
            _VStackLayout(alignment: alignment, spacing: spacing)
        ) {
            content()
        }
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.VStack<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.VStack : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _VStackLayout {
  public var alignment: SwiftUICore.HorizontalAlignment
  public var spacing: CoreFoundation.CGFloat?
  @inlinable public init(alignment: SwiftUICore.HorizontalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil) {
        self.alignment = alignment
        self.spacing = spacing
    }
}
extension SwiftUICore._VStackLayout {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore._VStackLayout : SwiftUICore.Layout {
  public typealias Cache = SwiftUICore._StackLayoutCache
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct VStackLayout : SwiftUICore.Layout {
  public var alignment: SwiftUICore.HorizontalAlignment
  public var spacing: CoreFoundation.CGFloat?
  @inlinable public init(alignment: SwiftUICore.HorizontalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil) {
        self.alignment = alignment
        self.spacing = spacing
    }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Cache = SwiftUICore._VStackLayout.Cache
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public enum Edge : Swift.Int8, Swift.CaseIterable {
  case top, leading, bottom, trailing
  @frozen public struct Set : Swift.OptionSet {
    public typealias Element = SwiftUICore.Edge.Set
    public let rawValue: Swift.Int8
    public init(rawValue: Swift.Int8)
    public static let top: SwiftUICore.Edge.Set
    public static let leading: SwiftUICore.Edge.Set
    public static let bottom: SwiftUICore.Edge.Set
    public static let trailing: SwiftUICore.Edge.Set
    public static let all: SwiftUICore.Edge.Set
    public static let horizontal: SwiftUICore.Edge.Set
    public static let vertical: SwiftUICore.Edge.Set
    public init(_ e: SwiftUICore.Edge)
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias ArrayLiteralElement = SwiftUICore.Edge.Set.Element
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias RawValue = Swift.Int8
  }
  public init?(rawValue: Swift.Int8)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AllCases = [SwiftUICore.Edge]
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias RawValue = Swift.Int8
  nonisolated public static var allCases: [SwiftUICore.Edge] {
    get
  }
  public var rawValue: Swift.Int8 {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Edge {
  @_alwaysEmitIntoClient internal init(vertical edge: SwiftUICore.VerticalEdge) {
        self = Edge(rawValue: edge.rawValue << 1).unsafelyUnwrapped
    }
  @_alwaysEmitIntoClient internal init(horizontal edge: SwiftUICore.HorizontalEdge) {
        self = Edge(rawValue: 1 &+ (edge.rawValue << 1)).unsafelyUnwrapped
    }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public enum HorizontalEdge : Swift.Int8, Swift.CaseIterable, Swift.Codable {
  case leading
  case trailing
  @frozen public struct Set : Swift.OptionSet {
    public typealias Element = SwiftUICore.HorizontalEdge.Set
    public let rawValue: Swift.Int8
    public init(rawValue: Swift.Int8)
    public static let leading: SwiftUICore.HorizontalEdge.Set
    public static let trailing: SwiftUICore.HorizontalEdge.Set
    public static let all: SwiftUICore.HorizontalEdge.Set
    public init(_ edge: SwiftUICore.HorizontalEdge)
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias ArrayLiteralElement = SwiftUICore.HorizontalEdge.Set.Element
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias RawValue = Swift.Int8
  }
  public init?(rawValue: Swift.Int8)
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias AllCases = [SwiftUICore.HorizontalEdge]
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias RawValue = Swift.Int8
  nonisolated public static var allCases: [SwiftUICore.HorizontalEdge] {
    get
  }
  public var rawValue: Swift.Int8 {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public enum VerticalEdge : Swift.Int8, Swift.CaseIterable, Swift.Codable {
  case top
  case bottom
  @frozen public struct Set : Swift.OptionSet {
    public typealias Element = SwiftUICore.VerticalEdge.Set
    public let rawValue: Swift.Int8
    public init(rawValue: Swift.Int8)
    public static let top: SwiftUICore.VerticalEdge.Set
    public static let bottom: SwiftUICore.VerticalEdge.Set
    public static let all: SwiftUICore.VerticalEdge.Set
    public init(_ e: SwiftUICore.VerticalEdge)
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias ArrayLiteralElement = SwiftUICore.VerticalEdge.Set.Element
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias RawValue = Swift.Int8
  }
  public init?(rawValue: Swift.Int8)
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias AllCases = [SwiftUICore.VerticalEdge]
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias RawValue = Swift.Int8
  nonisolated public static var allCases: [SwiftUICore.VerticalEdge] {
    get
  }
  public var rawValue: Swift.Int8 {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct ViewDimensions {
  public var width: CoreFoundation.CGFloat {
    get
  }
  public var height: CoreFoundation.CGFloat {
    get
  }
  public subscript(guide: SwiftUICore.HorizontalAlignment) -> CoreFoundation.CGFloat {
    get
  }
  public subscript(guide: SwiftUICore.VerticalAlignment) -> CoreFoundation.CGFloat {
    get
  }
  public subscript(explicit guide: SwiftUICore.HorizontalAlignment) -> CoreFoundation.CGFloat? {
    get
  }
  public subscript(explicit guide: SwiftUICore.VerticalAlignment) -> CoreFoundation.CGFloat? {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore.ViewDimensions : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ViewDimensions : Swift.Equatable {
  public static func == (lhs: SwiftUICore.ViewDimensions, rhs: SwiftUICore.ViewDimensions) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _FixedSizeLayout {
  @inlinable public init(horizontal: Swift.Bool = true, vertical: Swift.Bool = true) {
        self.horizontal = horizontal
        self.vertical = vertical
    }
  @usableFromInline
  internal var horizontal: Swift.Bool
  @usableFromInline
  internal var vertical: Swift.Bool
}
extension SwiftUICore._FixedSizeLayout {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func fixedSize(horizontal: Swift.Bool, vertical: Swift.Bool) -> some SwiftUICore.View {
        return modifier(
            _FixedSizeLayout(horizontal: horizontal, vertical: vertical))
    }
  
  @inlinable nonisolated public func fixedSize() -> some SwiftUICore.View {
        return fixedSize(horizontal: true, vertical: true)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Animation {
  public static let `default`: SwiftUICore.Animation
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.2)
extension SwiftUICore.ForEach {
  public init<V>(sections view: V, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.SectionConfiguration) -> Content) where Data == SwiftUICore.ForEachSectionCollection<Content>, ID == SwiftUICore.SectionConfiguration.ID, Content : SwiftUICore.View, V : SwiftUICore.View
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.2)
public struct ForEachSectionCollection<Content> : Swift.RandomAccessCollection where Content : SwiftUICore.View {
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(index: Swift.Int) -> SwiftUICore.SectionConfiguration {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Element = SwiftUICore.SectionConfiguration
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Index = Swift.Int
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Indices = Swift.Range<Swift.Int>
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Iterator = Swift.IndexingIterator<SwiftUICore.ForEachSectionCollection<Content>>
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias SubSequence = Swift.Slice<SwiftUICore.ForEachSectionCollection<Content>>
}
@available(*, unavailable)
extension SwiftUICore.ForEachSectionCollection : Swift.Sendable {
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public protocol CustomHoverEffect {
  associatedtype Body : SwiftUICore.CustomHoverEffect
  typealias Content = SwiftUICore.EmptyHoverEffect
  func body(content: Self.Content) -> Self.Body
  static func _makeCustomHoverEffect(effect: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._CustomHoverEffectInputs, body: @escaping (SwiftUICore._CustomHoverEffectInputs) -> SwiftUICore._CustomHoverEffectOutputs) -> SwiftUICore._CustomHoverEffectOutputs
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct EmptyHoverEffect : SwiftUICore.CustomHoverEffect {
  public static func _makeCustomHoverEffect(effect: SwiftUICore._GraphValue<SwiftUICore.EmptyHoverEffect>, inputs: SwiftUICore._CustomHoverEffectInputs, body: @escaping (SwiftUICore._CustomHoverEffectInputs) -> SwiftUICore._CustomHoverEffectOutputs) -> SwiftUICore._CustomHoverEffectOutputs
  @available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.EmptyHoverEffect : Swift.Sendable {
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.CustomHoverEffect where Self == SwiftUICore.EmptyHoverEffect {
  public static var empty: SwiftUICore.EmptyHoverEffect {
    get
  }
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct _CustomHoverEffectInputs {
}
@available(*, unavailable)
extension SwiftUICore._CustomHoverEffectInputs : Swift.Sendable {
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct _CustomHoverEffectOutputs {
}
@available(*, unavailable)
extension SwiftUICore._CustomHoverEffectOutputs : Swift.Sendable {
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.CustomHoverEffect where Self.Body == Swift.Never {
  public func body(content: Self.Content) -> Self.Body
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Never : SwiftUICore.CustomHoverEffect {
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.CustomHoverEffect {
  public static func _makeCustomHoverEffect(effect: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._CustomHoverEffectInputs, body: @escaping (SwiftUICore._CustomHoverEffectInputs) -> SwiftUICore._CustomHoverEffectOutputs) -> SwiftUICore._CustomHoverEffectOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color : SwiftUICore.ShapeStyle {
  @available(*, deprecated, message: "obsolete")
  @_alwaysEmitIntoClient nonisolated public static func _makeView<S>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<S, SwiftUICore.Color>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where S : SwiftUICore.Shape {
        _ShapeView<S, Self>._makeView(view: view, inputs: inputs)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Gesture {
  @inlinable @_Concurrency.MainActor @preconcurrency public func exclusively<Other>(before other: Other) -> SwiftUICore.ExclusiveGesture<Self, Other> where Other : SwiftUICore.Gesture {
        return ExclusiveGesture(self, other)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct ExclusiveGesture<First, Second> : SwiftUICore.Gesture where First : SwiftUICore.Gesture, Second : SwiftUICore.Gesture {
  @frozen public enum Value {
    case first(First.Value)
    case second(Second.Value)
  }
  public var first: First
  public var second: Second
  @inlinable public init(_ first: First, _ second: Second) {
        (self.first, self.second) = (first, second)
    }
  nonisolated public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUICore.ExclusiveGesture<First, Second>>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<SwiftUICore.ExclusiveGesture<First, Second>.Value>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ExclusiveGesture.Value : Swift.Sendable where First.Value : Swift.Sendable, Second.Value : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.ExclusiveGesture : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ExclusiveGesture.Value : Swift.Equatable where First.Value : Swift.Equatable, Second.Value : Swift.Equatable {
  public static func == (a: SwiftUICore.ExclusiveGesture<First, Second>.Value, b: SwiftUICore.ExclusiveGesture<First, Second>.Value) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _RotationEffect : SwiftUICore.GeometryEffect, Swift.Equatable {
  public var angle: SwiftUICore.Angle
  public var anchor: SwiftUICore.UnitPoint
  @inlinable nonisolated public init(angle: SwiftUICore.Angle, anchor: SwiftUICore.UnitPoint = .center) {
        self.angle = angle
        self.anchor = anchor
    }
  public func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.ProjectionTransform
  public typealias AnimatableData = SwiftUICore.AnimatablePair<SwiftUICore.Angle.AnimatableData, SwiftUICore.UnitPoint.AnimatableData>
  public var animatableData: SwiftUICore._RotationEffect.AnimatableData {
    get
    set
  }
  public static func == (a: SwiftUICore._RotationEffect, b: SwiftUICore._RotationEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func rotationEffect(_ angle: SwiftUICore.Angle, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.View {
        return modifier(_RotationEffect(angle: angle, anchor: anchor))
    }
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct AnyGradient : Swift.Hashable, SwiftUICore.ShapeStyle, Swift.Sendable {
  package var provider: SwiftUICore.AnyGradientBox
  public init(_ gradient: SwiftUICore.Gradient)
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: SwiftUICore.AnyGradient, rhs: SwiftUICore.AnyGradient) -> Swift.Bool
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package class AnyGradientBox : SwiftUICore.AnyShapeStyleBox, @unchecked Swift.Sendable {
  @objc @usableFromInline
  deinit
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.LinearGradient {
  @_alwaysEmitIntoClient public static func linearGradient(_ gradient: SwiftUICore.AnyGradient, startPoint: SwiftUICore.UnitPoint, endPoint: SwiftUICore.UnitPoint) -> some SwiftUICore.ShapeStyle {
        return _AnyLinearGradient(gradient: gradient,
            startPoint: startPoint, endPoint: endPoint)
    }
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.RadialGradient {
  @_alwaysEmitIntoClient public static func radialGradient(_ gradient: SwiftUICore.AnyGradient, center: SwiftUICore.UnitPoint = .center, startRadius: CoreFoundation.CGFloat = 0, endRadius: CoreFoundation.CGFloat) -> some SwiftUICore.ShapeStyle {
        return _AnyRadialGradient(gradient: gradient, center: center,
            startRadius: startRadius, endRadius: endRadius)
    }
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.EllipticalGradient {
  @_alwaysEmitIntoClient public static func ellipticalGradient(_ gradient: SwiftUICore.AnyGradient, center: SwiftUICore.UnitPoint = .center, startRadiusFraction: CoreFoundation.CGFloat = 0, endRadiusFraction: CoreFoundation.CGFloat = 0.5) -> some SwiftUICore.ShapeStyle {
        return _AnyEllipticalGradient(gradient: gradient, center: center,
            startRadiusFraction: startRadiusFraction,
            endRadiusFraction: endRadiusFraction)
    }
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.AngularGradient {
  @_alwaysEmitIntoClient public static func angularGradient(_ gradient: SwiftUICore.AnyGradient, center: SwiftUICore.UnitPoint = .center, startAngle: SwiftUICore.Angle, endAngle: SwiftUICore.Angle) -> some SwiftUICore.ShapeStyle {
        return _AnyAngularGradient(gradient: gradient, center: center,
            startAngle: startAngle, endAngle: endAngle)
    }
  
  @_alwaysEmitIntoClient public static func conicGradient(_ gradient: SwiftUICore.AnyGradient, center: SwiftUICore.UnitPoint = .center, angle: SwiftUICore.Angle = .zero) -> some SwiftUICore.ShapeStyle {
        return _AnyAngularGradient(gradient: gradient, center: center,
            startAngle: angle, endAngle: angle + .radians(2 * .pi))
    }
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _AnyLinearGradient : SwiftUICore.ShapeStyle {
  @usableFromInline
  internal var gradient: SwiftUICore.AnyGradient
  @usableFromInline
  internal var startPoint: SwiftUICore.UnitPoint
  @usableFromInline
  internal var endPoint: SwiftUICore.UnitPoint
  @inlinable internal init(gradient: SwiftUICore.AnyGradient, startPoint: SwiftUICore.UnitPoint, endPoint: SwiftUICore.UnitPoint) {
        self.gradient = gradient
        self.startPoint = startPoint
        self.endPoint = endPoint
    }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _AnyRadialGradient : SwiftUICore.ShapeStyle {
  @usableFromInline
  internal var gradient: SwiftUICore.AnyGradient
  @usableFromInline
  internal var center: SwiftUICore.UnitPoint
  @usableFromInline
  internal var startRadius: CoreFoundation.CGFloat
  @usableFromInline
  internal var endRadius: CoreFoundation.CGFloat
  @inlinable internal init(gradient: SwiftUICore.AnyGradient, center: SwiftUICore.UnitPoint, startRadius: CoreFoundation.CGFloat, endRadius: CoreFoundation.CGFloat) {
        self.gradient = gradient
        self.center = center
        self.startRadius = startRadius
        self.endRadius = endRadius
    }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _AnyEllipticalGradient : SwiftUICore.ShapeStyle {
  @usableFromInline
  internal var gradient: SwiftUICore.AnyGradient
  @usableFromInline
  internal var center: SwiftUICore.UnitPoint
  @usableFromInline
  internal var startRadiusFraction: CoreFoundation.CGFloat
  @usableFromInline
  internal var endRadiusFraction: CoreFoundation.CGFloat
  @inlinable internal init(gradient: SwiftUICore.AnyGradient, center: SwiftUICore.UnitPoint = .center, startRadiusFraction: CoreFoundation.CGFloat, endRadiusFraction: CoreFoundation.CGFloat) {
        self.gradient = gradient
        self.center = center
        self.startRadiusFraction = startRadiusFraction
        self.endRadiusFraction = endRadiusFraction
    }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _AnyAngularGradient : SwiftUICore.ShapeStyle {
  @usableFromInline
  internal var gradient: SwiftUICore.AnyGradient
  @usableFromInline
  internal var center: SwiftUICore.UnitPoint
  @usableFromInline
  internal var startAngle: SwiftUICore.Angle
  @usableFromInline
  internal var endAngle: SwiftUICore.Angle
  @usableFromInline
  internal init(gradient: SwiftUICore.AnyGradient, center: SwiftUICore.UnitPoint, startAngle: SwiftUICore.Angle, endAngle: SwiftUICore.Angle)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _ViewModifier_Content<Modifier> : SwiftUICore.View where Modifier : SwiftUICore.ViewModifier {
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore._ViewModifier_Content<Modifier>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUICore._ViewModifier_Content<Modifier>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @_alwaysEmitIntoClient nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int? {
        _viewListCount(inputs: inputs) { _ in nil }
    }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct PlaceholderContentView<Value> : SwiftUICore.View {
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.PlaceholderContentView<Value>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUICore.PlaceholderContentView<Value>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.PlaceholderContentView : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore._ViewModifier_Content : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ViewModifier {
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Animation {
  public func speed(_ speed: Swift.Double) -> SwiftUICore.Animation
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct KeyframeTrack<Root, Value, Content> : SwiftUICore.Keyframes where Value == Content.Value, Content : SwiftUICore.KeyframeTrackContent {
  public init(@SwiftUICore.KeyframeTrackContentBuilder<Root> content: () -> Content) where Root == Value
  public init(_ keyPath: Swift.WritableKeyPath<Root, Value>, @SwiftUICore.KeyframeTrackContentBuilder<Value> content: () -> Content)
  public func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframes<Root>, initialValue: Root, initialVelocity: Root?)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.KeyframeTrack : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "foregroundStyle(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "foregroundStyle(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "foregroundStyle(_:)")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "foregroundStyle(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "foregroundStyle(_:)")
  @inlinable nonisolated public func foregroundColor(_ color: SwiftUICore.Color?) -> some SwiftUICore.View {
        return environment(\.foregroundColor, color)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  @usableFromInline
  package var foregroundColor: SwiftUICore.Color? {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(*, deprecated, message: "will be removed")
@frozen public struct _ForegroundColorModifier {
  public var color: SwiftUICore.Color?
  @inlinable public init(color: SwiftUICore.Color?) { self.color = color }
  nonisolated public static func _makeViewInputs(modifier: SwiftUICore._GraphValue<SwiftUICore._ForegroundColorModifier>, inputs: inout SwiftUICore._ViewInputs)
  @available(*, deprecated, message: "will be removed")
  @available(iOS, introduced: 15.0, message: "will be removed")
  @available(tvOS, introduced: 15.0, message: "will be removed")
  @available(watchOS, introduced: 8.0, message: "will be removed")
  @available(macOS, introduced: 12.0, message: "will be removed")
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._ForegroundColorModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color {
  public static var accentColor: SwiftUICore.Color {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use the asset catalog's accent color or View.tint(_:) instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use the asset catalog's accent color or View.tint(_:) instead.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use the asset catalog's accent color or View.tint(_:) instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use the asset catalog's accent color or View.tint(_:) instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use the asset catalog's accent color or View.tint(_:) instead.")
  @inlinable nonisolated public func accentColor(_ accentColor: SwiftUICore.Color?) -> some SwiftUICore.View {
        return environment(\.accentColor, accentColor)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  @usableFromInline
  package var accentColor: SwiftUICore.Color? {
    get
    set
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @propertyWrapper public struct Namespace : SwiftUICore.DynamicProperty, Swift.Sendable {
  @usableFromInline
  internal var id: Swift.Int
  @inlinable public init() { id = 0 }
  public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
  public var wrappedValue: SwiftUICore.Namespace.ID {
    get
  }
  @frozen public struct ID : Swift.Hashable {
    @_hasStorage package var id: Swift.Int {
      get
    }
    public static func == (a: SwiftUICore.Namespace.ID, b: SwiftUICore.Namespace.ID) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.ImagePaint {
  @_alwaysEmitIntoClient public static func image(_ image: SwiftUICore.Image, sourceRect: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 1, height: 1), scale: CoreFoundation.CGFloat = 1) -> SwiftUICore.ImagePaint {
        .init(image: image, sourceRect: sourceRect, scale: scale)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct ImagePaint : SwiftUICore.ShapeStyle {
  public var image: SwiftUICore.Image
  public var sourceRect: CoreFoundation.CGRect
  public var scale: CoreFoundation.CGFloat
  public init(image: SwiftUICore.Image, sourceRect: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 1, height: 1), scale: CoreFoundation.CGFloat = 1)
  @available(*, deprecated, message: "obsolete")
  @_alwaysEmitIntoClient nonisolated public static func _makeView<S>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<S, SwiftUICore.ImagePaint>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where S : SwiftUICore.Shape {
        _ShapeView<S, Self>._makeView(view: view, inputs: inputs)
    }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol TimelineSchedule {
  typealias Mode = SwiftUICore.TimelineScheduleMode
  associatedtype Entries : Swift.Sequence where Self.Entries.Element == Foundation.Date
  func entries(from startDate: Foundation.Date, mode: Self.Mode) -> Self.Entries
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum TimelineScheduleMode : Swift.Sendable {
  case normal
  case lowFrequency
  public static func == (a: SwiftUICore.TimelineScheduleMode, b: SwiftUICore.TimelineScheduleMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.TimelineSchedule where Self == SwiftUICore.PeriodicTimelineSchedule {
  @_alwaysEmitIntoClient public static func periodic(from startDate: Foundation.Date, by interval: Foundation.TimeInterval) -> SwiftUICore.PeriodicTimelineSchedule {
        .init(from: startDate, by: interval)
    }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.TimelineSchedule where Self == SwiftUICore.EveryMinuteTimelineSchedule {
  @_alwaysEmitIntoClient public static var everyMinute: SwiftUICore.EveryMinuteTimelineSchedule {
    get { .init() }
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.TimelineSchedule {
  @_alwaysEmitIntoClient public static func explicit<S>(_ dates: S) -> SwiftUICore.ExplicitTimelineSchedule<S> where Self == SwiftUICore.ExplicitTimelineSchedule<S>, S : Swift.Sequence, S.Element == Foundation.Date {
        .init(dates)
    }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct PeriodicTimelineSchedule : SwiftUICore.TimelineSchedule, Swift.Sendable {
  public struct Entries : Swift.Sequence, Swift.IteratorProtocol, Swift.Sendable {
    public mutating func next() -> Foundation.Date?
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias Element = Foundation.Date
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias Iterator = SwiftUICore.PeriodicTimelineSchedule.Entries
  }
  public init(from startDate: Foundation.Date, by interval: Foundation.TimeInterval)
  public func entries(from startDate: Foundation.Date, mode: SwiftUICore.TimelineScheduleMode) -> SwiftUICore.PeriodicTimelineSchedule.Entries
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct EveryMinuteTimelineSchedule : SwiftUICore.TimelineSchedule, Swift.Sendable {
  public struct Entries : Swift.Sequence, Swift.IteratorProtocol, Swift.Sendable {
    public mutating func next() -> Foundation.Date?
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias Element = Foundation.Date
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias Iterator = SwiftUICore.EveryMinuteTimelineSchedule.Entries
  }
  public init()
  public func entries(from startDate: Foundation.Date, mode: SwiftUICore.TimelineScheduleMode) -> SwiftUICore.EveryMinuteTimelineSchedule.Entries
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct ExplicitTimelineSchedule<Entries> : SwiftUICore.TimelineSchedule where Entries : Swift.Sequence, Entries.Element == Foundation.Date {
  public init(_ dates: Entries)
  public func entries(from startDate: Foundation.Date, mode: SwiftUICore.TimelineScheduleMode) -> Entries
}
@available(*, unavailable)
extension SwiftUICore.ExplicitTimelineSchedule : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol EnvironmentalModifier : SwiftUICore.ViewModifier where Self.Body == Swift.Never {
  associatedtype ResolvedModifier : SwiftUICore.ViewModifier
  func resolve(in environment: SwiftUICore.EnvironmentValues) -> Self.ResolvedModifier
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  static var _requiresMainThread: Swift.Bool { get }
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  static var _tracksEnvironmentDependencies: Swift.Bool { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentalModifier {
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static var _requiresMainThread: Swift.Bool {
    get
  }
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public static var _tracksEnvironmentDependencies: Swift.Bool {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct Gradient : Swift.Equatable {
  @frozen public struct Stop : Swift.Equatable {
    public var color: SwiftUICore.Color
    public var location: CoreFoundation.CGFloat
    public init(color: SwiftUICore.Color, location: CoreFoundation.CGFloat)
    public static func == (a: SwiftUICore.Gradient.Stop, b: SwiftUICore.Gradient.Stop) -> Swift.Bool
  }
  public var stops: [SwiftUICore.Gradient.Stop]
  public init(stops: [SwiftUICore.Gradient.Stop])
  public init(colors: [SwiftUICore.Color])
  public static func == (a: SwiftUICore.Gradient, b: SwiftUICore.Gradient) -> Swift.Bool
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Gradient : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Gradient.Stop : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Gradient : SwiftUICore.ShapeStyle {
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color {
  @frozen public struct Resolved : Swift.Hashable {
    public var linearRed: Swift.Float
    public var linearGreen: Swift.Float
    public var linearBlue: Swift.Float
    public var opacity: Swift.Float
    public static func == (a: SwiftUICore.Color.Resolved, b: SwiftUICore.Color.Resolved) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(_ resolved: SwiftUICore.Color.Resolved)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color.Resolved : SwiftUICore.ShapeStyle {
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color.Resolved : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color.Resolved : SwiftUICore.Animatable {
  public typealias AnimatableData = SwiftUICore.AnimatablePair<Swift.Float, SwiftUICore.AnimatablePair<Swift.Float, SwiftUICore.AnimatablePair<Swift.Float, Swift.Float>>>
  public var animatableData: SwiftUICore.Color.Resolved.AnimatableData {
    get
    set
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color.Resolved {
  public init(colorSpace: SwiftUICore.Color.RGBColorSpace = .sRGB, red: Swift.Float, green: Swift.Float, blue: Swift.Float, opacity: Swift.Float = 1)
  public var red: Swift.Float {
    get
    set
  }
  public var green: Swift.Float {
    get
    set
  }
  public var blue: Swift.Float {
    get
    set
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color.Resolved : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.Text {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public func textVariant<V>(_ preference: V) -> some SwiftUICore.View where V : SwiftUICore.TextVariantPreference
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
public protocol TextVariantPreference {
  var _preference: SwiftUICore._TextVariantPreference<Self> { get }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
public struct _TextVariantPreference<Preference> : Swift.Sendable where Preference : SwiftUICore.TextVariantPreference {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
public struct FixedTextVariant : SwiftUICore.TextVariantPreference, Swift.Sendable {
  public var _preference: SwiftUICore._TextVariantPreference<SwiftUICore.FixedTextVariant> {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
public struct SizeDependentTextVariant : SwiftUICore.TextVariantPreference, Swift.Sendable {
  public var _preference: SwiftUICore._TextVariantPreference<SwiftUICore.SizeDependentTextVariant> {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.TextVariantPreference where Self == SwiftUICore.FixedTextVariant {
  public static var fixed: SwiftUICore.FixedTextVariant {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.TextVariantPreference where Self == SwiftUICore.SizeDependentTextVariant {
  public static var sizeDependent: SwiftUICore.SizeDependentTextVariant {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  nonisolated public func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, @SwiftUICore.ViewBuilder content: @escaping @Sendable (SwiftUICore.PlaceholderContentView<Self>, Value) -> some View, @SwiftUICore.KeyframesBuilder<Value> keyframes: @escaping (Value) -> some Keyframes<Value>) -> some SwiftUICore.View
  
  nonisolated public func keyframeAnimator<Value>(initialValue: Value, repeating: Swift.Bool = true, @SwiftUICore.ViewBuilder content: @escaping @Sendable (SwiftUICore.PlaceholderContentView<Self>, Value) -> some View, @SwiftUICore.KeyframesBuilder<Value> keyframes: @escaping (Value) -> some Keyframes<Value>) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct KeyframeAnimator<Value, KeyframePath, Content> : SwiftUICore.View where Value == KeyframePath.Value, KeyframePath : SwiftUICore.Keyframes, Content : SwiftUICore.View {
  public init(initialValue: Value, trigger: some Equatable, @SwiftUICore.ViewBuilder content: @escaping (Value) -> Content, @SwiftUICore.KeyframesBuilder<Value> keyframes: @escaping (Value) -> KeyframePath)
  public init(initialValue: Value, repeating: Swift.Bool = true, @SwiftUICore.ViewBuilder content: @escaping (Value) -> Content, @SwiftUICore.KeyframesBuilder<Value> keyframes: @escaping (Value) -> KeyframePath)
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.KeyframeAnimator<Value, KeyframePath, Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.KeyframeAnimator : Swift.Sendable {
}
@available(iOS 14.5, macOS 11.0, tvOS 14.5, watchOS 7.4, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
@usableFromInline
package struct IsLeafTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable package static var defaultValue: Swift.Bool {
    get { true }
  }
  @available(iOS 14.5, tvOS 14.5, watchOS 7.4, macOS 11.0, *)
  @usableFromInline
  package typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore.IsLeafTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public enum Axis : Swift.Int8, Swift.CaseIterable {
  case horizontal
  case vertical
  @inlinable package var otherAxis: SwiftUICore.Axis {
    get {
        return self == .horizontal ? .vertical : .horizontal
    }
  }
  @inlinable package var perpendicularEdges: (min: SwiftUICore.Edge, max: SwiftUICore.Edge) {
    get {
        return self == .vertical ? (.top, .bottom) : (.leading, .trailing)
    }
  }
  @frozen public struct Set : Swift.OptionSet {
    public typealias Element = SwiftUICore.Axis.Set
    public let rawValue: Swift.Int8
    public init(rawValue: Swift.Int8)
    public static let horizontal: SwiftUICore.Axis.Set
    public static let vertical: SwiftUICore.Axis.Set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias ArrayLiteralElement = SwiftUICore.Axis.Set.Element
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias RawValue = Swift.Int8
  }
  public init?(rawValue: Swift.Int8)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AllCases = [SwiftUICore.Axis]
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias RawValue = Swift.Int8
  nonisolated public static var allCases: [SwiftUICore.Axis] {
    get
  }
  public var rawValue: Swift.Int8 {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Axis : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _PaddingLayout {
  public var edges: SwiftUICore.Edge.Set
  public var insets: SwiftUICore.EdgeInsets?
  @inlinable public init(edges: SwiftUICore.Edge.Set = .all, insets: SwiftUICore.EdgeInsets?) {
        self.edges = edges
        self.insets = insets
    }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func padding(_ insets: SwiftUICore.EdgeInsets) -> some SwiftUICore.View {
        return modifier(_PaddingLayout(insets: insets))
    }
  
  @inlinable nonisolated public func padding(_ edges: SwiftUICore.Edge.Set = .all, _ length: CoreFoundation.CGFloat? = nil) -> some SwiftUICore.View {
        let insets = length.map { EdgeInsets(_all: $0) }
        return modifier(_PaddingLayout(edges: edges, insets: insets))
    }
  
  @inlinable nonisolated public func padding(_ length: CoreFoundation.CGFloat) -> some SwiftUICore.View {
        return padding(.all, length)
    }
  
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @_Concurrency.MainActor @preconcurrency public func _tightPadding() -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  nonisolated public func _defaultContext() -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct TupleView<T> : SwiftUICore.View {
  public var value: T
  @inlinable public init(_ value: T) { self.value = value }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.TupleView<T>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUICore.TupleView<T>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.TupleView : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _BlendModeEffect : Swift.Equatable, Swift.Sendable {
  @_Concurrency.MainActor @preconcurrency public var blendMode: SwiftUICore.BlendMode
  @inlinable nonisolated public init(blendMode: SwiftUICore.BlendMode) {
        self.blendMode = blendMode
    }
  nonisolated public static func == (a: SwiftUICore._BlendModeEffect, b: SwiftUICore._BlendModeEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._BlendModeEffect : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func blendMode(_ blendMode: SwiftUICore.BlendMode) -> some SwiftUICore.View {
        return modifier(_BlendModeEffect(blendMode: blendMode))
    }
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.VisualEffect {
  public func blendMode(_ blendMode: SwiftUICore.BlendMode) -> some SwiftUICore.VisualEffect
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _Placement : Swift.Equatable {
  public var proposedSize: CoreFoundation.CGSize {
    get
    set
  }
  public var anchor: SwiftUICore.UnitPoint
  public var anchorPosition: CoreFoundation.CGPoint
  public init(proposedSize: CoreFoundation.CGSize, anchoring anchor: SwiftUICore.UnitPoint = .topLeading, at anchorPosition: CoreFoundation.CGPoint)
  public static func == (a: SwiftUICore._Placement, b: SwiftUICore._Placement) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore._Placement : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ColorMatrixEffect {
  @_Concurrency.MainActor @preconcurrency public var matrix: SwiftUICore._ColorMatrix
  @inlinable @_Concurrency.MainActor @preconcurrency public init(matrix: SwiftUICore._ColorMatrix) {
        self.matrix = matrix
    }
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func _colorMatrix(_ matrix: SwiftUICore._ColorMatrix) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct Group<Content> {
  public typealias Body = Swift.Never
  @usableFromInline
  package var content: Content
  @_disfavoredOverload @inlinable package init(_content: Content) { self.content = _content }
}
@available(*, unavailable)
extension SwiftUICore.Group : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Group {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @available(*, deprecated, message: "Do not use this.")
  @_alwaysEmitIntoClient public static func _make(content: Content) -> SwiftUICore.Group<Content> {
         
         
        self.init(_content: content)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Group : SwiftUICore.View where Content : SwiftUICore.View {
  @inlinable nonisolated public init(@SwiftUICore.ViewBuilder content: () -> Content) {
        self.content = content()
    }
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUICore.Group<Content>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package struct DepthTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable package static var defaultValue: Swift.Int {
    get { 0 }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  package typealias Value = Swift.Int
}
@available(*, unavailable)
extension SwiftUICore.DepthTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package struct IsSectionedTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable package static var defaultValue: Swift.Bool {
    get { false }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  package typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore.IsSectionedTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package struct IsEmptyViewTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable package static var defaultValue: Swift.Bool {
    get { false }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  package typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore.IsEmptyViewTraitKey : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package struct IsSectionHeaderTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable package static var defaultValue: Swift.Bool {
    get { false }
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  @usableFromInline
  package typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore.IsSectionHeaderTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package struct IsSectionFooterTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable package static var defaultValue: Swift.Bool {
    get { false }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  package typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore.IsSectionFooterTraitKey : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  nonisolated public func privacySensitive(_ sensitive: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ContrastEffect : Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var amount: Swift.Double
  @inlinable nonisolated public init(amount: Swift.Double) {
        self.amount = amount
    }
  @_Concurrency.MainActor @preconcurrency public var animatableData: Swift.Double {
    get
    set
  }
  nonisolated public static func == (a: SwiftUICore._ContrastEffect, b: SwiftUICore._ContrastEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = Swift.Double
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func contrast(_ amount: Swift.Double) -> some SwiftUICore.View {
        return modifier(_ContrastEffect(amount: amount))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image {
  @frozen public enum Orientation : Swift.UInt8, Swift.CaseIterable, Swift.Hashable {
    case up
    case upMirrored
    case down
    case downMirrored
    case left
    case leftMirrored
    case right
    case rightMirrored
    public init?(rawValue: Swift.UInt8)
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias AllCases = [SwiftUICore.Image.Orientation]
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias RawValue = Swift.UInt8
    nonisolated public static var allCases: [SwiftUICore.Image.Orientation] {
      get
    }
    public var rawValue: Swift.UInt8 {
      get
    }
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct UnitCurve {
  public static func bezier(startControlPoint: SwiftUICore.UnitPoint, endControlPoint: SwiftUICore.UnitPoint) -> SwiftUICore.UnitCurve
  public func value(at progress: Swift.Double) -> Swift.Double
  public func velocity(at progress: Swift.Double) -> Swift.Double
  public var inverse: SwiftUICore.UnitCurve {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.UnitCurve : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.UnitCurve : Swift.Hashable {
  public static func == (a: SwiftUICore.UnitCurve, b: SwiftUICore.UnitCurve) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.UnitCurve {
  @available(*, deprecated, message: "Use easeInOut instead")
  public static let easeInEaseOut: SwiftUICore.UnitCurve
  public static let easeInOut: SwiftUICore.UnitCurve
  public static let easeIn: SwiftUICore.UnitCurve
  public static let easeOut: SwiftUICore.UnitCurve
  public static let circularEaseIn: SwiftUICore.UnitCurve
  public static let circularEaseOut: SwiftUICore.UnitCurve
  public static let circularEaseInOut: SwiftUICore.UnitCurve
  public static let linear: SwiftUICore.UnitCurve
}
@attached(accessor) @attached(peer, names: prefixed(__Key_)) public macro Entry() = #externalMacro(
    module: "SwiftUIMacros", type: "EntryMacro"
)
@attached(accessor) public macro __EntryDefaultValue() = #externalMacro(
    module: "SwiftUIMacros", type: "EntryDefaultValueMacro"
)
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct MatchedGeometryProperties : Swift.OptionSet {
  public let rawValue: Swift.UInt32
  @inlinable public init(rawValue: Swift.UInt32) { self.rawValue = rawValue }
  public static let position: SwiftUICore.MatchedGeometryProperties
  public static let size: SwiftUICore.MatchedGeometryProperties
  public static let frame: SwiftUICore.MatchedGeometryProperties
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias ArrayLiteralElement = SwiftUICore.MatchedGeometryProperties
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Element = SwiftUICore.MatchedGeometryProperties
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias RawValue = Swift.UInt32
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func matchedGeometryEffect<ID>(id: ID, in namespace: SwiftUICore.Namespace.ID, properties: SwiftUICore.MatchedGeometryProperties = .frame, anchor: SwiftUICore.UnitPoint = .center, isSource: Swift.Bool = true) -> some SwiftUICore.View where ID : Swift.Hashable {
        return modifier(_MatchedGeometryEffect(id: id,
            namespace: namespace, properties: properties,
            anchor: anchor, isSource: isSource))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _MatchedGeometryEffect<ID> where ID : Swift.Hashable {
  public var id: ID
  public var namespace: SwiftUICore.Namespace.ID
  public var args: (properties: SwiftUICore.MatchedGeometryProperties, anchor: SwiftUICore.UnitPoint, isSource: Swift.Bool)
  @inlinable public init(id: ID, namespace: SwiftUICore.Namespace.ID, properties: SwiftUICore.MatchedGeometryProperties, anchor: SwiftUICore.UnitPoint, isSource: Swift.Bool) {
        (self.id, self.namespace) = (id, namespace)
        args = (properties: properties, anchor: anchor, isSource: isSource)
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._MatchedGeometryEffect<ID>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._MatchedGeometryEffect : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _EnvironmentKeyWritingModifier<Value> : SwiftUICore.ViewModifier, SwiftUICore._GraphInputsModifier {
  public var keyPath: Swift.WritableKeyPath<SwiftUICore.EnvironmentValues, Value>
  public var value: Value
  @inlinable public init(keyPath: Swift.WritableKeyPath<SwiftUICore.EnvironmentValues, Value>, value: Value) {
        self.keyPath = keyPath
        self.value = value
    }
  public static func _makeInputs(modifier: SwiftUICore._GraphValue<SwiftUICore._EnvironmentKeyWritingModifier<Value>>, inputs: inout SwiftUICore._GraphInputs)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._EnvironmentKeyWritingModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func environment<V>(_ keyPath: Swift.WritableKeyPath<SwiftUICore.EnvironmentValues, V>, _ value: V) -> some SwiftUICore.View {
        modifier(_EnvironmentKeyWritingModifier(keyPath: keyPath, value: value))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@preconcurrency @_Concurrency.MainActor public struct OpenURLAction {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public struct Result : Swift.Sendable {
    public static let handled: SwiftUICore.OpenURLAction.Result
    public static let discarded: SwiftUICore.OpenURLAction.Result
    public static let systemAction: SwiftUICore.OpenURLAction.Result
    public static func systemAction(_ url: Foundation.URL) -> SwiftUICore.OpenURLAction.Result
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @preconcurrency @_Concurrency.MainActor public init(handler: @escaping (Foundation.URL) -> SwiftUICore.OpenURLAction.Result)
  @_Concurrency.MainActor @preconcurrency public func callAsFunction(_ url: Foundation.URL)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func callAsFunction(_ url: Foundation.URL, completion: @escaping (_ accepted: Swift.Bool) -> Swift.Void)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var openURL: SwiftUICore.OpenURLAction {
    get
    @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
    set
  }
  public var _openURL: SwiftUICore.OpenURLAction {
    get
    set
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var _openSensitiveURL: SwiftUICore.OpenURLAction {
    get
    set
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct Spring : Swift.Hashable, Swift.Sendable {
  public static func == (a: SwiftUICore.Spring, b: SwiftUICore.Spring) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Spring {
  public init(duration: Foundation.TimeInterval = 0.5, bounce: Swift.Double = 0.0)
  public var duration: Foundation.TimeInterval {
    get
  }
  public var bounce: Swift.Double {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Spring {
  public init(response: Swift.Double, dampingRatio: Swift.Double)
  public var response: Swift.Double {
    get
  }
  public var dampingRatio: Swift.Double {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Spring {
  public init(mass: Swift.Double = 1.0, stiffness: Swift.Double, damping: Swift.Double, allowOverDamping: Swift.Bool = false)
  public var mass: Swift.Double {
    get
  }
  public var stiffness: Swift.Double {
    get
  }
  public var damping: Swift.Double {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Spring {
  public init(settlingDuration: Foundation.TimeInterval, dampingRatio: Swift.Double, epsilon: Swift.Double = 0.001)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Spring {
  public var settlingDuration: Foundation.TimeInterval {
    get
  }
  public func settlingDuration<V>(target: V, initialVelocity: V = .zero, epsilon: Swift.Double) -> Foundation.TimeInterval where V : SwiftUICore.VectorArithmetic
  public func value<V>(target: V, initialVelocity: V = .zero, time: Foundation.TimeInterval) -> V where V : SwiftUICore.VectorArithmetic
  public func velocity<V>(target: V, initialVelocity: V = .zero, time: Foundation.TimeInterval) -> V where V : SwiftUICore.VectorArithmetic
  public func update<V>(value: inout V, velocity: inout V, target: V, deltaTime: Foundation.TimeInterval) where V : SwiftUICore.VectorArithmetic
  public func force<V>(target: V, position: V, velocity: V) -> V where V : SwiftUICore.VectorArithmetic
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Spring {
  public func settlingDuration<V>(fromValue: V, toValue: V, initialVelocity: V, epsilon: Swift.Double) -> Foundation.TimeInterval where V : SwiftUICore.Animatable
  public func value<V>(fromValue: V, toValue: V, initialVelocity: V, time: Foundation.TimeInterval) -> V where V : SwiftUICore.Animatable
  public func velocity<V>(fromValue: V, toValue: V, initialVelocity: V, time: Foundation.TimeInterval) -> V where V : SwiftUICore.Animatable
  public func force<V>(fromValue: V, toValue: V, position: V, velocity: V) -> V where V : SwiftUICore.Animatable
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Spring {
  @_alwaysEmitIntoClient public static var smooth: SwiftUICore.Spring {
    get { smooth() }
  }
  @_alwaysEmitIntoClient public static func smooth(duration: Foundation.TimeInterval = 0.5, extraBounce: Swift.Double = 0.0) -> SwiftUICore.Spring {
        Self(duration: duration, bounce: extraBounce)
    }
  @_alwaysEmitIntoClient public static var snappy: SwiftUICore.Spring {
    get { snappy() }
  }
  @_alwaysEmitIntoClient public static func snappy(duration: Foundation.TimeInterval = 0.5, extraBounce: Swift.Double = 0.0) -> SwiftUICore.Spring {
        Self(duration: duration, bounce: 0.15 + extraBounce)
    }
  @_alwaysEmitIntoClient public static var bouncy: SwiftUICore.Spring {
    get { bouncy() }
  }
  @_alwaysEmitIntoClient public static func bouncy(duration: Foundation.TimeInterval = 0.5, extraBounce: Swift.Double = 0.0) -> SwiftUICore.Spring {
        Self(duration: duration, bounce: 0.3 + extraBounce)
    }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Animation {
  public static func spring(_ spring: SwiftUICore.Spring, blendDuration: Foundation.TimeInterval = 0.0) -> SwiftUICore.Animation
  public static func interpolatingSpring(_ spring: SwiftUICore.Spring, initialVelocity: Swift.Double = 0.0) -> SwiftUICore.Animation
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _OverlayModifier<Overlay> : SwiftUICore.ViewModifier where Overlay : SwiftUICore.View {
  public var overlay: Overlay
  public var alignment: SwiftUICore.Alignment
  @inlinable public init(overlay: Overlay, alignment: SwiftUICore.Alignment = .center) {
        self.overlay = overlay
        self.alignment = alignment
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._OverlayModifier<Overlay>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._OverlayModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._OverlayModifier : Swift.Equatable where Overlay : Swift.Equatable {
  public static func == (a: SwiftUICore._OverlayModifier<Overlay>, b: SwiftUICore._OverlayModifier<Overlay>) -> Swift.Bool
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _OverlayStyleModifier<Style> : SwiftUICore.ViewModifier where Style : SwiftUICore.ShapeStyle {
  public var style: Style
  public var ignoresSafeAreaEdges: SwiftUICore.Edge.Set
  @inlinable public init(style: Style, ignoresSafeAreaEdges: SwiftUICore.Edge.Set) {
        self.style = style
        self.ignoresSafeAreaEdges = ignoresSafeAreaEdges
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._OverlayStyleModifier<Style>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._OverlayStyleModifier : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _OverlayShapeModifier<Style, Bounds> : SwiftUICore.ViewModifier where Style : SwiftUICore.ShapeStyle, Bounds : SwiftUICore.Shape {
  public var style: Style
  public var shape: Bounds
  public var fillStyle: SwiftUICore.FillStyle
  @inlinable public init(style: Style, shape: Bounds, fillStyle: SwiftUICore.FillStyle) {
        self.style = style
        self.shape = shape
        self.fillStyle = fillStyle
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._OverlayShapeModifier<Style, Bounds>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._OverlayShapeModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use `overlay(alignment:content:)` instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `overlay(alignment:content:)` instead.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use `overlay(alignment:content:)` instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use `overlay(alignment:content:)` instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use `overlay(alignment:content:)` instead.")
  @inlinable @_disfavoredOverload nonisolated public func overlay<Overlay>(_ overlay: Overlay, alignment: SwiftUICore.Alignment = .center) -> some SwiftUICore.View where Overlay : SwiftUICore.View {
        return modifier(_OverlayModifier(
            overlay: overlay, alignment: alignment))
    }
  
  @inlinable nonisolated public func border<S>(_ content: S, width: CoreFoundation.CGFloat = 1) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
        return overlay(Rectangle().strokeBorder(content, lineWidth: width))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func overlay<V>(alignment: SwiftUICore.Alignment = .center, @SwiftUICore.ViewBuilder content: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View {
        modifier(_OverlayModifier(overlay: content(), alignment: alignment))
    }
  
  @inlinable nonisolated public func overlay<S>(_ style: S, ignoresSafeAreaEdges edges: SwiftUICore.Edge.Set = .all) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
        modifier(_OverlayStyleModifier(
            style: style, ignoresSafeAreaEdges: edges))
    }
  
  @inlinable nonisolated public func overlay<S, T>(_ style: S, in shape: T, fillStyle: SwiftUICore.FillStyle = FillStyle()) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle, T : SwiftUICore.Shape {
        modifier(_OverlayShapeModifier(
            style: style, shape: shape, fillStyle: fillStyle))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct Font : Swift.Hashable, Swift.Sendable {
  private var provider: SwiftUICore.AnyFontBox
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: SwiftUICore.Font, rhs: SwiftUICore.Font) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
internal class AnyFontBox : @unchecked Swift.Sendable {
  @objc @usableFromInline
  deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _ProposedSize {
}
@available(*, unavailable)
extension SwiftUICore._ProposedSize : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ProposedSize : Swift.Hashable {
  public static func == (a: SwiftUICore._ProposedSize, b: SwiftUICore._ProposedSize) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct Spacer {
  @_Concurrency.MainActor @preconcurrency public var minLength: CoreFoundation.CGFloat?
  @inlinable @_Concurrency.MainActor @preconcurrency public init(minLength: CoreFoundation.CGFloat? = nil) {
        self.minLength = minLength
    }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _TextBaselineRelativeSpacer {
  @_Concurrency.MainActor @preconcurrency public var minLength: CoreFoundation.CGFloat?
  @inlinable @_Concurrency.MainActor @preconcurrency public init(minLength: CoreFoundation.CGFloat? = nil) {
        self.minLength = minLength
    }
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _HSpacer {
  @_Concurrency.MainActor @preconcurrency public var minWidth: CoreFoundation.CGFloat?
  @inlinable @_Concurrency.MainActor @preconcurrency public init(minWidth: CoreFoundation.CGFloat? = nil) {
        self.minWidth = minWidth
    }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _VSpacer {
  @_Concurrency.MainActor @preconcurrency public var minHeight: CoreFoundation.CGFloat?
  @inlinable @_Concurrency.MainActor @preconcurrency public init(minHeight: CoreFoundation.CGFloat? = nil) {
        self.minHeight = minHeight
    }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_functionBuilder public struct KeyframesBuilder<Value> {
  public static func buildExpression<K>(_ expression: K) -> K where Value == K.Value, K : SwiftUICore.KeyframeTrackContent
  @available(*, unavailable, message: "this expression does not conform to 'KeyframeTrackContent'")
  @_disfavoredOverload @_alwaysEmitIntoClient public static func buildExpression(_ invalid: Any) -> some SwiftUICore.KeyframeTrackContent<Value> where Value : SwiftUICore.Animatable {
        buildBlock()
    }
  
  public static func buildArray(_ components: [some KeyframeTrackContent<Value>]) -> some SwiftUICore.KeyframeTrackContent<Value>
  
  public static func buildEither<First, Second>(first component: First) -> SwiftUICore.KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second> where Value == First.Value, First : SwiftUICore.KeyframeTrackContent, Second : SwiftUICore.KeyframeTrackContent, First.Value == Second.Value
  public static func buildEither<First, Second>(second component: Second) -> SwiftUICore.KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second> where Value == First.Value, First : SwiftUICore.KeyframeTrackContent, Second : SwiftUICore.KeyframeTrackContent, First.Value == Second.Value
  public static func buildPartialBlock<K>(first: K) -> K where Value == K.Value, K : SwiftUICore.KeyframeTrackContent
  public static func buildPartialBlock(accumulated: some KeyframeTrackContent<Value>, next: some KeyframeTrackContent<Value>) -> some SwiftUICore.KeyframeTrackContent<Value>
  
  public static func buildBlock() -> some SwiftUICore.KeyframeTrackContent<Value> where Value : SwiftUICore.Animatable
  
  public static func buildFinalResult<Content>(_ component: Content) -> SwiftUICore.KeyframeTrack<Value, Value, Content> where Value == Content.Value, Content : SwiftUICore.KeyframeTrackContent
  public static func buildExpression<Content>(_ expression: Content) -> Content where Value == Content.Value, Content : SwiftUICore.Keyframes
  @available(*, unavailable, message: "this expression does not conform to 'Keyframes'")
  @_disfavoredOverload @_alwaysEmitIntoClient public static func buildExpression(_ invalid: Any) -> some SwiftUICore.Keyframes<Value> {
        buildBlock()
    }
  
  public static func buildPartialBlock<Content>(first: Content) -> Content where Value == Content.Value, Content : SwiftUICore.Keyframes
  public static func buildPartialBlock(accumulated: some Keyframes<Value>, next: some Keyframes<Value>) -> some SwiftUICore.Keyframes<Value>
  
  public static func buildBlock() -> some SwiftUICore.Keyframes<Value>
  
  public static func buildFinalResult<Content>(_ component: Content) -> Content where Value == Content.Value, Content : SwiftUICore.Keyframes
}
@available(*, unavailable)
extension SwiftUICore.KeyframesBuilder : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnyTransition {
  public static func move(edge: SwiftUICore.Edge) -> SwiftUICore.AnyTransition
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Transition where Self == SwiftUICore.MoveTransition {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static func move(edge: SwiftUICore.Edge) -> Self { Self(edge: edge) }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_Concurrency.MainActor @preconcurrency public struct MoveTransition : SwiftUICore.Transition {
  @_Concurrency.MainActor @preconcurrency public var edge: SwiftUICore.Edge
  @_Concurrency.MainActor @preconcurrency public init(edge: SwiftUICore.Edge)
  @_Concurrency.MainActor @preconcurrency public func body(content: SwiftUICore.MoveTransition.Content, phase: SwiftUICore.TransitionPhase) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func _makeContentTransition(transition: inout SwiftUICore._Transition_ContentTransition)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI14MoveTransitionV4body7content5phaseQrAA22PlaceholderContentViewVyACG_AA0D5PhaseOtF", 0) __
}
@available(*, unavailable)
extension SwiftUICore.MoveTransition : Swift.Sendable {
}
extension CoreFoundation.CGSize {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package init(_ point: CoreFoundation.CGPoint) {
        self.init(width: point.x, height: point.y)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func scaledBy(x: CoreFoundation.CGFloat = 1, y: CoreFoundation.CGFloat = 1) -> CoreFoundation.CGSize {
         
        return CGSize(width: width == 0 ? 0 : width * x,
            height: height == 0 ? 0 : height * y)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func scaled(by scale: CoreFoundation.CGFloat) -> CoreFoundation.CGSize {
        return self.scaledBy(x: scale, y: scale)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func scaled(by scale: CoreFoundation.CGSize) -> CoreFoundation.CGSize {
        return self.scaledBy(x: scale.width, y: scale.height)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func increasedBy(dWidth: CoreFoundation.CGFloat = 0, dHeight: CoreFoundation.CGFloat = 0) -> CoreFoundation.CGSize {
        CGSize(width: width + dWidth, height: height + dHeight)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package var isFinite: Swift.Bool {
    get { width.isFinite && height.isFinite }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package var isNaN: Swift.Bool {
    get { width.isNaN || height.isNaN }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package var hasZero: Swift.Bool {
    get { width == 0.0 || height == 0.0 }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package var isNegative: Swift.Bool {
    get { width < 0.0 || height < 0.0 }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package var isNonEmpty: Swift.Bool {
    get { width > 0.0 && height > 0.0 }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package var flushingNaNs: CoreFoundation.CGSize {
    get {
        return CGSize(width: !width.isNaN ? width : 0,
            height: !height.isNaN ? height : 0)
    }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package var flushingNegatives: CoreFoundation.CGSize {
    get {
        CGSize(width: max(width, 0.0), height: max(height, 0.0))
    }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func approximates(_ other: CoreFoundation.CGSize, epsilon: CoreFoundation.CGFloat) -> Swift.Bool {
        width.approximates(other.width, epsilon: epsilon)
            && height.approximates(other.height, epsilon: epsilon)
    }
}
extension CoreFoundation.CGSize {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package subscript(d: SwiftUICore.Axis) -> CoreFoundation.CGFloat {
    get { return d == .horizontal ? width : height }
    set { if d == .horizontal { width = newValue } else { height = newValue } }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package init(_ l1: CoreFoundation.CGFloat, in first: SwiftUICore.Axis, by l2: CoreFoundation.CGFloat) {
        self = first == .horizontal ? CGSize(width: l1, height: l2) : CGSize(width: l2, height: l1)
    }
}
extension CoreFoundation.CGSize {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func contains(point p: CoreFoundation.CGPoint) -> Swift.Bool {
        return !(p.x < 0) && !(p.y < 0) && p.x < width && p.y < height
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension CoreFoundation.CGSize : SwiftUICore.Animatable {
  public typealias AnimatableData = SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>
  public var animatableData: CoreFoundation.CGSize.AnimatableData {
    @inlinable get { return .init(width, height) }
    @inlinable set { (width, height) = (newValue.first, newValue.second) }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color {
  public enum RGBColorSpace : Swift.Sendable {
    case sRGB
    case sRGBLinear
    case displayP3
    public static func == (a: SwiftUICore.Color.RGBColorSpace, b: SwiftUICore.Color.RGBColorSpace) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(_ colorSpace: SwiftUICore.Color.RGBColorSpace = .sRGB, red: Swift.Double, green: Swift.Double, blue: Swift.Double, opacity: Swift.Double = 1)
  public init(_ colorSpace: SwiftUICore.Color.RGBColorSpace = .sRGB, white: Swift.Double, opacity: Swift.Double = 1)
  public init(hue: Swift.Double, saturation: Swift.Double, brightness: Swift.Double, opacity: Swift.Double = 1)
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _StackLayoutCache {
}
@available(*, unavailable)
extension SwiftUICore._StackLayoutCache : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _BlurEffect : Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var radius: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public var isOpaque: Swift.Bool
  @inlinable nonisolated public init(radius: CoreFoundation.CGFloat, opaque: Swift.Bool) {
        self.radius = radius
        self.isOpaque = opaque
    }
  @_Concurrency.MainActor @preconcurrency public var animatableData: CoreFoundation.CGFloat {
    get
    set
  }
  nonisolated public static func == (a: SwiftUICore._BlurEffect, b: SwiftUICore._BlurEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = CoreFoundation.CGFloat
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func blur(radius: CoreFoundation.CGFloat, opaque: Swift.Bool = false) -> some SwiftUICore.View {
        return modifier(_BlurEffect(radius: radius, opaque: opaque))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct AccessibilityTextContentType : Swift.Sendable {
  public static let plain: SwiftUICore.AccessibilityTextContentType
  public static let console: SwiftUICore.AccessibilityTextContentType
  public static let fileSystem: SwiftUICore.AccessibilityTextContentType
  public static let messaging: SwiftUICore.AccessibilityTextContentType
  public static let narrative: SwiftUICore.AccessibilityTextContentType
  public static let sourceCode: SwiftUICore.AccessibilityTextContentType
  public static let spreadsheet: SwiftUICore.AccessibilityTextContentType
  public static let wordProcessing: SwiftUICore.AccessibilityTextContentType
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol GeometryEffect : SwiftUICore.Animatable, SwiftUICore.ViewModifier, SwiftUICore._RemoveGlobalActorIsolation where Self.Body == Swift.Never {
  func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.ProjectionTransform
  static var _affectsLayout: Swift.Bool { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GeometryEffect {
  public static var _affectsLayout: Swift.Bool {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GeometryEffect {
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ColorInvertEffect : Swift.Equatable {
  @inlinable nonisolated public init() {}
  nonisolated public static func == (a: SwiftUICore._ColorInvertEffect, b: SwiftUICore._ColorInvertEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func colorInvert() -> some SwiftUICore.View {
        return modifier(_ColorInvertEffect())
    }
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color {
  public var gradient: SwiftUICore.AnyGradient {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func _trait<K>(_ key: K.Type, _ value: K.Value) -> some SwiftUICore.View where K : SwiftUICore._ViewTraitKey {
        return modifier(_TraitWritingModifier<K>(value: value))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol _ViewTraitKey {
  associatedtype Value
  static var defaultValue: Self.Value { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _TraitWritingModifier<Trait> where Trait : SwiftUICore._ViewTraitKey {
  public let value: Trait.Value
  @inlinable public init(value: Trait.Value) {
        self.value = value
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._TraitWritingModifier<Trait>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUICore._TraitWritingModifier<Trait>>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._TraitWritingModifier : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _ConditionalTraitWritingModifier<Trait> where Trait : SwiftUICore._ViewTraitKey {
  public var value: Trait.Value
  public var isEnabled: Swift.Bool
  @_alwaysEmitIntoClient public init(traitKey: Trait.Type = Trait.self, value: Trait.Value, isEnabled: Swift.Bool) {
        self.value = value
        self.isEnabled = isEnabled
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._ConditionalTraitWritingModifier<Trait>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUICore._ConditionalTraitWritingModifier<Trait>>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._ConditionalTraitWritingModifier : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public func _trait<K>(_ key: K.Type = K.self, _ value: K.Value, isEnabled: Swift.Bool) -> some SwiftUICore.View where K : SwiftUICore._ViewTraitKey {
        modifier(_ConditionalTraitWritingModifier<K>(
            value: value, isEnabled: isEnabled))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ForegroundLayerViewModifier {
  @inlinable @_Concurrency.MainActor @preconcurrency public init() {}
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _ForegroundLayerColorMatrixEffect {
  public var foreground: SwiftUICore._ColorMatrix
  public var background: SwiftUICore._ColorMatrix
  @inlinable public init(foreground: SwiftUICore._ColorMatrix = .init(), background: SwiftUICore._ColorMatrix = .init()) {
        (self.foreground, self.background) = (foreground, background)
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._ForegroundLayerColorMatrixEffect>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct ContentShapeKinds : Swift.OptionSet, Swift.Sendable {
  public var rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let interaction: SwiftUICore.ContentShapeKinds
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public static let dragPreview: SwiftUICore.ContentShapeKinds
  @available(tvOS 17.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public static let contextMenuPreview: SwiftUICore.ContentShapeKinds
  @available(tvOS 18.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public static let hoverEffect: SwiftUICore.ContentShapeKinds
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  public static let focusEffect: SwiftUICore.ContentShapeKinds
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public static let accessibility: SwiftUICore.ContentShapeKinds
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias ArrayLiteralElement = SwiftUICore.ContentShapeKinds
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Element = SwiftUICore.ContentShapeKinds
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias RawValue = Swift.Int
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _GrayscaleEffect : Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var amount: Swift.Double
  @inlinable nonisolated public init(amount: Swift.Double) {
        self.amount = amount
    }
  @_Concurrency.MainActor @preconcurrency public var animatableData: Swift.Double {
    get
    set
  }
  nonisolated public static func == (a: SwiftUICore._GrayscaleEffect, b: SwiftUICore._GrayscaleEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = Swift.Double
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func grayscale(_ amount: Swift.Double) -> some SwiftUICore.View {
        return modifier(_GrayscaleEffect(amount: amount))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct Anchor<Value> {
  fileprivate let box: SwiftUICore.AnchorValueBoxBase<Value>
  @frozen public struct Source {
    private var box: SwiftUICore.AnchorBoxBase<Value>
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Anchor.Source : Swift.Sendable where Value : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Anchor : Swift.Sendable where Value : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Anchor : Swift.Equatable where Value : Swift.Equatable {
  public static func == (lhs: SwiftUICore.Anchor<Value>, rhs: SwiftUICore.Anchor<Value>) -> Swift.Bool
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Anchor : Swift.Hashable where Value : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package class AnchorBoxBase<T> {
  @objc @usableFromInline
  deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnchorBoxBase : @unchecked Swift.Sendable where T : Swift.Sendable {
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
internal class AnchorValueBoxBase<T> {
  @objc @usableFromInline
  deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnchorValueBoxBase : @unchecked Swift.Sendable where T : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Anchor.Source {
  public init<T>(_ array: [SwiftUICore.Anchor<T>.Source]) where Value == [T]
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Anchor.Source {
  public init<T>(_ anchor: SwiftUICore.Anchor<T>.Source?) where Value == T?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _Rotation3DEffect : SwiftUICore.GeometryEffect, Swift.Equatable {
  public var angle: SwiftUICore.Angle
  public var axis: (x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat, z: CoreFoundation.CGFloat)
  public var anchor: SwiftUICore.UnitPoint
  public var anchorZ: CoreFoundation.CGFloat
  public var perspective: CoreFoundation.CGFloat
  @_alwaysEmitIntoClient nonisolated public init(angle: SwiftUICore.Angle, axis: (x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat, z: CoreFoundation.CGFloat), anchor: SwiftUICore.UnitPoint = .center, anchorZ: CoreFoundation.CGFloat = 0, perspective: CoreFoundation.CGFloat = 1) {
        self.angle = angle
        self.axis = axis
        self.anchor = anchor
        self.anchorZ = anchorZ
        self.perspective = perspective
    }
  public func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.ProjectionTransform
  public typealias AnimatableData = SwiftUICore.AnimatablePair<SwiftUICore.Angle.AnimatableData, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, SwiftUICore.AnimatablePair<SwiftUICore.UnitPoint.AnimatableData, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>>>>>>
  public var animatableData: SwiftUICore._Rotation3DEffect.AnimatableData {
    get
    set
  }
  public static func == (lhs: SwiftUICore._Rotation3DEffect, rhs: SwiftUICore._Rotation3DEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum LayoutDirectionBehavior : Swift.Hashable, Swift.Sendable {
  case fixed
  case mirrors(in: SwiftUICore.LayoutDirection)
  public static var mirrors: SwiftUICore.LayoutDirectionBehavior {
    get
  }
  public static func == (a: SwiftUICore.LayoutDirectionBehavior, b: SwiftUICore.LayoutDirectionBehavior) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public protocol HoverEffectContent {
  static func _makeHoverEffectContent(effect: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._HoverEffectContentInputs, body: @escaping (SwiftUICore._HoverEffectContentInputs) -> SwiftUICore._HoverEffectContentOutputs) -> SwiftUICore._HoverEffectContentOutputs
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct EmptyHoverEffectContent : SwiftUICore.HoverEffectContent {
  public static func _makeHoverEffectContent(effect: SwiftUICore._GraphValue<SwiftUICore.EmptyHoverEffectContent>, inputs: SwiftUICore._HoverEffectContentInputs, body: @escaping (SwiftUICore._HoverEffectContentInputs) -> SwiftUICore._HoverEffectContentOutputs) -> SwiftUICore._HoverEffectContentOutputs
}
@available(*, unavailable)
extension SwiftUICore.EmptyHoverEffectContent : Swift.Sendable {
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct _HoverEffectContentInputs {
}
@available(*, unavailable)
extension SwiftUICore._HoverEffectContentInputs : Swift.Sendable {
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct _HoverEffectContentOutputs {
}
@available(*, unavailable)
extension SwiftUICore._HoverEffectContentOutputs : Swift.Sendable {
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.ModifiedContent : SwiftUICore.HoverEffectContent where Content : SwiftUICore.HoverEffectContent, Modifier : SwiftUICore.HoverEffectContent {
  public static func _makeHoverEffectContent(effect: SwiftUICore._GraphValue<SwiftUICore.ModifiedContent<Content, Modifier>>, inputs: SwiftUICore._HoverEffectContentInputs, body: @escaping (SwiftUICore._HoverEffectContentInputs) -> SwiftUICore._HoverEffectContentOutputs) -> SwiftUICore._HoverEffectContentOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _OpacityEffect : Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var opacity: Swift.Double
  @inlinable nonisolated public init(opacity: Swift.Double) {
        self.opacity = opacity
    }
  @_Concurrency.MainActor @preconcurrency public var animatableData: Swift.Double {
    get
    set
  }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._OpacityEffect>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func == (a: SwiftUICore._OpacityEffect, b: SwiftUICore._OpacityEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = Swift.Double
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func opacity(_ opacity: Swift.Double) -> some SwiftUICore.View {
        return modifier(_OpacityEffect(opacity: opacity))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnyTransition {
  public static let opacity: SwiftUICore.AnyTransition
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Transition where Self == SwiftUICore.OpacityTransition {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var opacity: SwiftUICore.OpacityTransition {
    get { Self() }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.AnyShapeStyle {
  @_alwaysEmitIntoClient public static func opacity(_ opacity: Swift.Double) -> some SwiftUICore.ShapeStyle {
        return _OpacityShapeStyle(
            style: _ImplicitShapeStyle(), opacity: Float(opacity))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _OpacityShapeStyle<Style> : SwiftUICore.ShapeStyle where Style : SwiftUICore.ShapeStyle {
  public var style: Style
  public var opacity: Swift.Float
  @inlinable public init(style: Style, opacity: Swift.Float) {
        self.style = style
        self.opacity = opacity
    }
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_Concurrency.MainActor @preconcurrency public struct OpacityTransition : SwiftUICore.Transition {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func body(content: SwiftUICore.OpacityTransition.Content, phase: SwiftUICore.TransitionPhase) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public static let properties: SwiftUICore.TransitionProperties
  @_Concurrency.MainActor @preconcurrency public func _makeContentTransition(transition: inout SwiftUICore._Transition_ContentTransition)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI17OpacityTransitionV4body7content5phaseQrAA22PlaceholderContentViewVyACG_AA0D5PhaseOtF", 0) __
}
@available(*, unavailable)
extension SwiftUICore.OpacityTransition : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ShadowEffect : SwiftUICore.EnvironmentalModifier, Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var color: SwiftUICore.Color
  @_Concurrency.MainActor @preconcurrency public var radius: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public var offset: CoreFoundation.CGSize
  @inlinable nonisolated public init(color: SwiftUICore.Color, radius: CoreFoundation.CGFloat, offset: CoreFoundation.CGSize) {
        self.color = color
        self.radius = radius
        self.offset = offset
    }
  @_Concurrency.MainActor @preconcurrency public func resolve(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore._ShadowEffect._Resolved
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_Concurrency.MainActor @preconcurrency public static var _requiresMainThread: Swift.Bool {
    get
  }
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var _requiresMainThread: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public struct _Resolved {
    public typealias AnimatableData = SwiftUICore.AnimatablePair<SwiftUICore.AnimatablePair<Swift.Float, SwiftUICore.AnimatablePair<Swift.Float, SwiftUICore.AnimatablePair<Swift.Float, Swift.Float>>>, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGSize.AnimatableData>>
    @_Concurrency.MainActor @preconcurrency public var animatableData: SwiftUICore._ShadowEffect._Resolved.AnimatableData {
      get
      set
    }
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias Body = Swift.Never
  }
  nonisolated public static func == (a: SwiftUICore._ShadowEffect, b: SwiftUICore._ShadowEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ResolvedModifier = SwiftUICore._ShadowEffect._Resolved
}
@available(*, unavailable)
extension SwiftUICore._ShadowEffect : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore._ShadowEffect._Resolved : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func shadow(color: SwiftUICore.Color = Color(.sRGBLinear, white: 0, opacity: 0.33), radius: CoreFoundation.CGFloat, x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0) -> some SwiftUICore.View {
        return modifier(
            _ShadowEffect(
                color: color,
                radius: radius,
                offset: CGSize(width: x, height: y)
        ))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum ColorRenderingMode : Swift.Sendable {
  case nonLinear
  case linear
  case extendedLinear
  public static func == (a: SwiftUICore.ColorRenderingMode, b: SwiftUICore.ColorRenderingMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _DrawingGroupEffect : SwiftUICore.ViewModifier, Swift.Equatable {
  public var isOpaque: Swift.Bool {
    get
    set
  }
  public var colorMode: SwiftUICore.ColorRenderingMode {
    get
    set
  }
  public init(opaque: Swift.Bool = false, colorMode: SwiftUICore.ColorRenderingMode = .nonLinear)
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._DrawingGroupEffect>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  public static func == (a: SwiftUICore._DrawingGroupEffect, b: SwiftUICore._DrawingGroupEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._DrawingGroupEffect : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  nonisolated public func drawingGroup(opaque: Swift.Bool = false, colorMode: SwiftUICore.ColorRenderingMode = .nonLinear) -> some SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var isLuminanceReduced: Swift.Bool {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _BrightnessEffect : Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var amount: Swift.Double
  @inlinable nonisolated public init(amount: Swift.Double) {
        self.amount = amount
    }
  @_Concurrency.MainActor @preconcurrency public var animatableData: Swift.Double {
    get
    set
  }
  nonisolated public static func == (a: SwiftUICore._BrightnessEffect, b: SwiftUICore._BrightnessEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = Swift.Double
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func brightness(_ amount: Swift.Double) -> some SwiftUICore.View {
        return modifier(_BrightnessEffect(amount: amount))
    }
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _GeometryGroupEffect : Swift.Equatable {
  @_alwaysEmitIntoClient nonisolated public init() {}
  nonisolated public static func == (a: SwiftUICore._GeometryGroupEffect, b: SwiftUICore._GeometryGroupEffect) -> Swift.Bool
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_alwaysEmitIntoClient nonisolated public func geometryGroup() -> some SwiftUICore.View {
        return modifier(_GeometryGroupEffect())
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnyTransition {
  public static func asymmetric(insertion: SwiftUICore.AnyTransition, removal: SwiftUICore.AnyTransition) -> SwiftUICore.AnyTransition
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_Concurrency.MainActor @preconcurrency public struct AsymmetricTransition<Insertion, Removal> : SwiftUICore.Transition where Insertion : SwiftUICore.Transition, Removal : SwiftUICore.Transition {
  @_Concurrency.MainActor @preconcurrency public var insertion: Insertion
  @_Concurrency.MainActor @preconcurrency public var removal: Removal
  @_Concurrency.MainActor @preconcurrency public init(insertion: Insertion, removal: Removal)
  @_Concurrency.MainActor @preconcurrency public func body(content: SwiftUICore.AsymmetricTransition<Insertion, Removal>.Content, phase: SwiftUICore.TransitionPhase) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public static var properties: SwiftUICore.TransitionProperties {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func _makeContentTransition(transition: inout SwiftUICore._Transition_ContentTransition)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI20AsymmetricTransitionV4body7content5phaseQrAA22PlaceholderContentViewVyACyxq_GG_AA0D5PhaseOtF", 0) __<Insertion, Removal>
}
@available(*, unavailable)
extension SwiftUICore.AsymmetricTransition : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Anchor.Source where Value == CoreFoundation.CGPoint {
  public static func point(_ p: CoreFoundation.CGPoint) -> SwiftUICore.Anchor<Value>.Source
  public static func unitPoint(_ p: SwiftUICore.UnitPoint) -> SwiftUICore.Anchor<Value>.Source
  public static var topLeading: SwiftUICore.Anchor<CoreFoundation.CGPoint>.Source {
    get
  }
  public static var top: SwiftUICore.Anchor<CoreFoundation.CGPoint>.Source {
    get
  }
  public static var topTrailing: SwiftUICore.Anchor<CoreFoundation.CGPoint>.Source {
    get
  }
  public static var leading: SwiftUICore.Anchor<CoreFoundation.CGPoint>.Source {
    get
  }
  public static var center: SwiftUICore.Anchor<CoreFoundation.CGPoint>.Source {
    get
  }
  public static var trailing: SwiftUICore.Anchor<CoreFoundation.CGPoint>.Source {
    get
  }
  public static var bottomLeading: SwiftUICore.Anchor<CoreFoundation.CGPoint>.Source {
    get
  }
  public static var bottom: SwiftUICore.Anchor<CoreFoundation.CGPoint>.Source {
    get
  }
  public static var bottomTrailing: SwiftUICore.Anchor<CoreFoundation.CGPoint>.Source {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_functionBuilder public struct ViewBuilder {
  @_alwaysEmitIntoClient public static func buildExpression<Content>(_ content: Content) -> Content where Content : SwiftUICore.View {
       content
    }
  @available(*, unavailable, message: "this expression does not conform to 'View'")
  @_disfavoredOverload @_alwaysEmitIntoClient public static func buildExpression(_ invalid: Any) -> some SwiftUICore.View {
        fatalError()
    }
  
  @_alwaysEmitIntoClient public static func buildBlock() -> SwiftUICore.EmptyView {
        EmptyView()
    }
  @_alwaysEmitIntoClient public static func buildBlock<Content>(_ content: Content) -> Content where Content : SwiftUICore.View {
        content
    }
  @_disfavoredOverload @_alwaysEmitIntoClient public static func buildBlock<each Content>(_ content: repeat each Content) -> SwiftUICore.TupleView<(repeat each Content)> where repeat each Content : SwiftUICore.View {
        TupleView((repeat each content))
    }
}
@available(*, unavailable)
extension SwiftUICore.ViewBuilder : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ViewBuilder {
  @_alwaysEmitIntoClient public static func buildIf<Content>(_ content: Content?) -> Content? where Content : SwiftUICore.View {
        content
    }
  @_alwaysEmitIntoClient public static func buildEither<TrueContent, FalseContent>(first: TrueContent) -> SwiftUICore._ConditionalContent<TrueContent, FalseContent> where TrueContent : SwiftUICore.View, FalseContent : SwiftUICore.View {
        .init(storage: .trueContent(first))
    }
  @_alwaysEmitIntoClient public static func buildEither<TrueContent, FalseContent>(second: FalseContent) -> SwiftUICore._ConditionalContent<TrueContent, FalseContent> where TrueContent : SwiftUICore.View, FalseContent : SwiftUICore.View {
        .init(storage: .falseContent(second))
    }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ViewBuilder {
  @_alwaysEmitIntoClient public static func buildLimitedAvailability<Content>(_ content: Content) -> SwiftUICore.AnyView where Content : SwiftUICore.View {
        .init(content)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @propertyWrapper @preconcurrency @_Concurrency.MainActor public struct EnvironmentObject<ObjectType> : SwiftUICore.DynamicProperty where ObjectType : Combine.ObservableObject {
  @dynamicMemberLookup @frozen @preconcurrency @_Concurrency.MainActor public struct Wrapper {
    @_Concurrency.MainActor @preconcurrency internal let root: ObjectType
    @_Concurrency.MainActor @preconcurrency public subscript<Subject>(dynamicMember keyPath: Swift.ReferenceWritableKeyPath<ObjectType, Subject>) -> SwiftUICore.Binding<Subject> {
      get
    }
  }
  @inlinable @_Concurrency.MainActor @preconcurrency public var wrappedValue: ObjectType {
    get {
      guard let store = _store else { error() }
      return store
    }
  }
  @inlinable @_Concurrency.MainActor @preconcurrency package var optionalWrappedValue: ObjectType? {
    get {
        _store
    }
  }
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency package var _store: ObjectType?
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var _seed: Swift.Int = 0
  @_Concurrency.MainActor @preconcurrency public var projectedValue: SwiftUICore.EnvironmentObject<ObjectType>.Wrapper {
    get
  }
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal func error() -> Swift.Never
  @_Concurrency.MainActor @preconcurrency public init()
  nonisolated public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentObject {
  @_Concurrency.MainActor @preconcurrency public static var _propertyBehaviors: Swift.UInt32 {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func environmentObject<T>(_ object: T) -> some SwiftUICore.View where T : Combine.ObservableObject {
        environment(T.environmentStore, object)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Combine.ObservableObject {
  @usableFromInline
  package static var environmentStore: Swift.WritableKeyPath<SwiftUICore.EnvironmentValues, Self?> {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func mask<Mask>(alignment: SwiftUICore.Alignment = .center, @SwiftUICore.ViewBuilder _ mask: () -> Mask) -> some SwiftUICore.View where Mask : SwiftUICore.View {
        return modifier(_MaskAlignmentEffect(
            alignment: alignment, mask: mask()))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _MaskAlignmentEffect<Mask> : SwiftUICore.ViewModifier where Mask : SwiftUICore.View {
  public var alignment: SwiftUICore.Alignment
  public var mask: Mask
  @inlinable public init(alignment: SwiftUICore.Alignment, mask: Mask) {
        self.mask = mask
        self.alignment = alignment
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._MaskAlignmentEffect<Mask>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._MaskAlignmentEffect : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._MaskEffect : Swift.Equatable where Mask : Swift.Equatable {
  public static func == (a: SwiftUICore._MaskEffect<Mask>, b: SwiftUICore._MaskEffect<Mask>) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore._MaskEffect : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @available(iOS, deprecated: 100000.0, message: "Use overload where mask accepts a @ViewBuilder instead.")
  @available(macOS, deprecated: 100000.0, message: "Use overload where mask accepts a @ViewBuilder instead.")
  @available(tvOS, deprecated: 100000.0, message: "Use overload where mask accepts a @ViewBuilder instead.")
  @available(watchOS, deprecated: 100000.0, message: "Use overload where mask accepts a @ViewBuilder instead.")
  @available(visionOS, deprecated: 100000.0, message: "Use overload where mask accepts a @ViewBuilder instead.")
  @inlinable nonisolated public func mask<Mask>(_ mask: Mask) -> some SwiftUICore.View where Mask : SwiftUICore.View {
        return modifier(_MaskEffect(mask: mask))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _MaskEffect<Mask> : SwiftUICore.ViewModifier where Mask : SwiftUICore.View {
  public var mask: Mask
  @inlinable public init(mask: Mask) {
        self.mask = mask
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._MaskEffect<Mask>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
}
extension Swift.Comparable {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func clamp(min minValue: Self, max maxValue: Self) -> Self {
        return min(max(minValue, self), maxValue)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package mutating func clamp(to limits: Swift.ClosedRange<Self>) {
        self = self.clamp(
            min: limits.lowerBound, max: limits.upperBound)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func clamped(to limits: Swift.ClosedRange<Self>) -> Self {
        var result = self
        result.clamp(to: limits)
        return result
    }
}
@available(iOS 18.4, macOS 15.4, tvOS 18.4, watchOS 11.4, visionOS 2.4, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _AlphaThresholdEffect : SwiftUICore.EnvironmentalModifier {
  @_Concurrency.MainActor @preconcurrency public var color: SwiftUICore.Color
  @_Concurrency.MainActor @preconcurrency public var amount: Swift.Double
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init(color: SwiftUICore.Color = .black, amount: Swift.Double = 0.5) {
        self.color = color
        self.amount = amount
    }
  @_Concurrency.MainActor @preconcurrency public func resolve(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore._AlphaThresholdEffect._Resolved
  @_Concurrency.MainActor @preconcurrency public static var _requiresMainThread: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public struct _Resolved {
    public typealias AnimatableData = SwiftUICore.AnimatablePair<Swift.Float, SwiftUICore.AnimatablePair<Swift.Float, SwiftUICore.AnimatablePair<Swift.Float, SwiftUICore.AnimatablePair<Swift.Float, Swift.Float>>>>
    @_Concurrency.MainActor @preconcurrency public var animatableData: SwiftUICore._AlphaThresholdEffect._Resolved.AnimatableData {
      get
      set
    }
    @available(iOS 18.4, tvOS 18.4, watchOS 11.4, visionOS 2.4, macOS 15.4, *)
    public typealias Body = Swift.Never
  }
  @available(iOS 18.4, tvOS 18.4, watchOS 11.4, visionOS 2.4, macOS 15.4, *)
  public typealias Body = Swift.Never
  @available(iOS 18.4, tvOS 18.4, watchOS 11.4, visionOS 2.4, macOS 15.4, *)
  public typealias ResolvedModifier = SwiftUICore._AlphaThresholdEffect._Resolved
}
@available(*, unavailable)
extension SwiftUICore._AlphaThresholdEffect._Resolved : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore._AlphaThresholdEffect : Swift.Sendable {
}
extension CoreFoundation.CGPoint {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package static func + (lhs: CoreFoundation.CGPoint, rhs: CoreFoundation.CGSize) -> CoreFoundation.CGPoint {
        return lhs.offset(by: rhs)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package static func - (lhs: CoreFoundation.CGPoint, rhs: CoreFoundation.CGSize) -> CoreFoundation.CGPoint {
        return lhs + -rhs
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package static func += (lhs: inout CoreFoundation.CGPoint, rhs: CoreFoundation.CGSize) {
        lhs = lhs + rhs
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package static func -= (lhs: inout CoreFoundation.CGPoint, rhs: CoreFoundation.CGSize) {
        lhs = lhs - rhs
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable prefix package static func - (lhs: CoreFoundation.CGPoint) -> CoreFoundation.CGPoint {
        return CGPoint(x: -lhs.x, y: -lhs.y)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package static func - (lhs: CoreFoundation.CGPoint, rhs: CoreFoundation.CGPoint) -> CoreFoundation.CGSize {
        return CGSize(width: lhs.x - rhs.x, height: lhs.y - rhs.y)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package static func * (lhs: CoreFoundation.CGPoint, rhs: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint {
        return lhs.scaled(by: rhs)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package static func *= (lhs: inout CoreFoundation.CGPoint, rhs: CoreFoundation.CGFloat) {
        lhs = lhs * rhs
    }
}
extension CoreFoundation.CGSize {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package static func + (lhs: CoreFoundation.CGSize, rhs: CoreFoundation.CGPoint) -> CoreFoundation.CGPoint {
        return CGPoint(x: rhs.x + lhs.width, y: rhs.y + lhs.height)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct AccessibilityTraits : Swift.SetAlgebra, Swift.Sendable {
  public static let isButton: SwiftUICore.AccessibilityTraits
  public static let isHeader: SwiftUICore.AccessibilityTraits
  public static let isSelected: SwiftUICore.AccessibilityTraits
  public static let isLink: SwiftUICore.AccessibilityTraits
  public static let isSearchField: SwiftUICore.AccessibilityTraits
  public static let isImage: SwiftUICore.AccessibilityTraits
  public static let playsSound: SwiftUICore.AccessibilityTraits
  public static let isKeyboardKey: SwiftUICore.AccessibilityTraits
  public static let isStaticText: SwiftUICore.AccessibilityTraits
  public static let isSummaryElement: SwiftUICore.AccessibilityTraits
  public static let updatesFrequently: SwiftUICore.AccessibilityTraits
  public static let startsMediaSession: SwiftUICore.AccessibilityTraits
  public static let allowsDirectInteraction: SwiftUICore.AccessibilityTraits
  public static let causesPageTurn: SwiftUICore.AccessibilityTraits
  public static let isModal: SwiftUICore.AccessibilityTraits
  @available(macOS 14.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
  public static let isToggle: SwiftUICore.AccessibilityTraits
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public static let isTabBar: SwiftUICore.AccessibilityTraits
  public init()
  public func union(_ other: SwiftUICore.AccessibilityTraits) -> SwiftUICore.AccessibilityTraits
  public mutating func formUnion(_ other: SwiftUICore.AccessibilityTraits)
  public func intersection(_ other: SwiftUICore.AccessibilityTraits) -> SwiftUICore.AccessibilityTraits
  public mutating func formIntersection(_ other: SwiftUICore.AccessibilityTraits)
  public func symmetricDifference(_ other: SwiftUICore.AccessibilityTraits) -> SwiftUICore.AccessibilityTraits
  public mutating func formSymmetricDifference(_ other: SwiftUICore.AccessibilityTraits)
  public func contains(_ member: SwiftUICore.AccessibilityTraits) -> Swift.Bool
  public mutating func insert(_ newMember: SwiftUICore.AccessibilityTraits) -> (inserted: Swift.Bool, memberAfterInsert: SwiftUICore.AccessibilityTraits)
  public mutating func remove(_ member: SwiftUICore.AccessibilityTraits) -> SwiftUICore.AccessibilityTraits?
  public mutating func update(with newMember: SwiftUICore.AccessibilityTraits) -> SwiftUICore.AccessibilityTraits?
  public static func == (a: SwiftUICore.AccessibilityTraits, b: SwiftUICore.AccessibilityTraits) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ArrayLiteralElement = SwiftUICore.AccessibilityTraits
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Element = SwiftUICore.AccessibilityTraits
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  @_semantics("swiftui.init_with_localization") public init(_ key: SwiftUICore.LocalizedStringKey, tableName: Swift.String? = nil, bundle: Foundation.Bundle? = nil, comment: Swift.StaticString? = nil)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct LocalizedStringKey : Swift.Equatable, Swift.ExpressibleByStringInterpolation {
  internal var key: Swift.String
  internal var hasFormatting: Swift.Bool = false
  private var arguments: [SwiftUICore.LocalizedStringKey.FormatArgument]
  public init(_ value: Swift.String)
  @_semantics("swiftui.localized_string_key.init_literal") public init(stringLiteral value: Swift.String)
  @_semantics("swiftui.localized_string_key.init_interpolation") public init(stringInterpolation: SwiftUICore.LocalizedStringKey.StringInterpolation)
  @usableFromInline
  internal struct FormatArgument : Swift.Equatable {
    @usableFromInline
    internal static func == (lhs: SwiftUICore.LocalizedStringKey.FormatArgument, rhs: SwiftUICore.LocalizedStringKey.FormatArgument) -> Swift.Bool
  }
  public struct StringInterpolation : Swift.StringInterpolationProtocol {
    @_semantics("swiftui.localized.interpolation_init") public init(literalCapacity: Swift.Int, interpolationCount: Swift.Int)
    @_semantics("swiftui.localized.appendLiteral") public mutating func appendLiteral(_ literal: Swift.String)
    @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(_ string: Swift.String)
    @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation<Subject>(_ subject: Subject, formatter: Foundation.Formatter? = nil) where Subject : Foundation.ReferenceConvertible
    @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation<Subject>(_ subject: Subject, formatter: Foundation.Formatter? = nil) where Subject : ObjectiveC.NSObject
    @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
    @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation<F>(_ input: F.FormatInput, format: F) where F : Foundation.FormatStyle, F.FormatInput : Swift.Equatable, F.FormatOutput == Swift.String
    @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
    @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation<F>(_ input: F.FormatInput, format: F) where F : Foundation.FormatStyle, F.FormatInput : Swift.Equatable, F.FormatOutput == Foundation.AttributedString
    @_transparent public mutating func appendInterpolation<T>(_ value: T) where T : SwiftUICore._FormatSpecifiable {
            appendInterpolation(value, specifier: formatSpecifier(T.self))
        }
    @_semantics("swiftui.localized.appendInterpolation_param_specifier") public mutating func appendInterpolation<T>(_ value: T, specifier: Swift.String) where T : SwiftUICore._FormatSpecifiable
    @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
    @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(_ text: SwiftUICore.Text)
    @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
    @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(_ attributedString: Foundation.AttributedString)
    @available(*, unavailable, message: "Unsupported type for interpolation, see LocalizedStringKey.StringInterpolation for supported types.")
    public mutating func appendInterpolation<T>(_ view: T) where T : SwiftUICore.View
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias StringLiteralType = Swift.String
  }
  public static func == (a: SwiftUICore.LocalizedStringKey, b: SwiftUICore.LocalizedStringKey) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias StringLiteralType = Swift.String
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias UnicodeScalarLiteralType = Swift.String
}
@available(*, unavailable)
extension SwiftUICore.LocalizedStringKey.StringInterpolation : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.LocalizedStringKey : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.LocalizedStringKey.FormatArgument : Swift.Sendable {
}
@_alwaysEmitIntoClient internal var int64Specifier: Swift.String {
  get { "%lld" }
}
@_alwaysEmitIntoClient internal var int32Specifier: Swift.String {
  get { "%d" }
}
@_alwaysEmitIntoClient internal var uint64Specifier: Swift.String {
  get { "%llu" }
}
@_alwaysEmitIntoClient internal var uint32Specifier: Swift.String {
  get { "%u" }
}
@_alwaysEmitIntoClient internal var floatSpecifier: Swift.String {
  get { "%f" }
}
@_alwaysEmitIntoClient internal var doubleSpecifier: Swift.String {
  get { "%lf" }
}
@_alwaysEmitIntoClient @_semantics("constant_evaluable") internal func formatSpecifier<T>(_ type: T.Type) -> Swift.String {
    switch type {
    case is Int.Type:
        fallthrough
    case is Int64.Type:
        return int64Specifier
    case is Int8.Type:
        fallthrough
    case is Int16.Type:
        fallthrough
    case is Int32.Type:
        return int32Specifier
    case is UInt.Type:
        fallthrough
    case is UInt64.Type:
        return uint64Specifier
    case is UInt8.Type:
        fallthrough
    case is UInt16.Type:
        fallthrough
    case is UInt32.Type:
        return uint32Specifier
    case is Float.Type:
        return floatSpecifier
    case is CGFloat.Type:
        fallthrough
    case is Double.Type:
        return doubleSpecifier
    default:
        return "%@"
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol _FormatSpecifiable : Swift.Equatable {
  associatedtype _Arg : Swift.CVarArg
  var _arg: Self._Arg { get }
  var _specifier: Swift.String { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Int : SwiftUICore._FormatSpecifiable {
  public var _arg: Swift.Int64 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Int8 : SwiftUICore._FormatSpecifiable {
  public var _arg: Swift.Int32 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Int16 : SwiftUICore._FormatSpecifiable {
  public var _arg: Swift.Int32 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Int32 : SwiftUICore._FormatSpecifiable {
  public var _arg: Swift.Int32 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Int64 : SwiftUICore._FormatSpecifiable {
  public var _arg: Swift.Int64 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.UInt : SwiftUICore._FormatSpecifiable {
  public var _arg: Swift.UInt64 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.UInt8 : SwiftUICore._FormatSpecifiable {
  public var _arg: Swift.UInt32 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.UInt16 : SwiftUICore._FormatSpecifiable {
  public var _arg: Swift.UInt32 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.UInt32 : SwiftUICore._FormatSpecifiable {
  public var _arg: Swift.UInt32 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.UInt64 : SwiftUICore._FormatSpecifiable {
  public var _arg: Swift.UInt64 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Float : SwiftUICore._FormatSpecifiable {
  public var _arg: Swift.Float {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Double : SwiftUICore._FormatSpecifiable {
  public var _arg: Swift.Double {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension CoreFoundation.CGFloat : SwiftUICore._FormatSpecifiable {
  public var _arg: CoreFoundation.CGFloat {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 15.0, macOS 12.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol TextSelectability {
  static var allowsSelection: Swift.Bool { get }
}
@available(iOS 15.0, macOS 12.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.TextSelectability where Self == SwiftUICore.EnabledTextSelectability {
  @_alwaysEmitIntoClient public static var enabled: SwiftUICore.EnabledTextSelectability {
    get { .init() }
  }
}
@available(iOS 15.0, macOS 12.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.TextSelectability where Self == SwiftUICore.DisabledTextSelectability {
  @_alwaysEmitIntoClient public static var disabled: SwiftUICore.DisabledTextSelectability {
    get { .init() }
  }
}
@available(iOS 15.0, macOS 12.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct EnabledTextSelectability : SwiftUICore.TextSelectability {
  public static let allowsSelection: Swift.Bool
  @usableFromInline
  internal init()
}
@available(*, unavailable)
extension SwiftUICore.EnabledTextSelectability : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DisabledTextSelectability : SwiftUICore.TextSelectability {
  public static let allowsSelection: Swift.Bool
  @usableFromInline
  internal init()
}
@available(*, unavailable)
extension SwiftUICore.DisabledTextSelectability : Swift.Sendable {
}
@available(iOS 16.0, macOS 13, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  @available(iOS 16.0, macOS 13, tvOS 16.0, watchOS 9.0, *)
  @_disfavoredOverload public init(_ resource: Foundation.LocalizedStringResource)
}
@available(iOS 16.0, macOS 13, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.LocalizedStringKey.StringInterpolation {
  @available(iOS 16.0, macOS 13, tvOS 16.0, watchOS 9.0, *)
  @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(_ resource: Foundation.LocalizedStringResource)
}
@available(iOS 17.0, macOS 11.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
@usableFromInline
package struct IsExpandedTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable package static var defaultValue: SwiftUICore.Binding<Swift.Bool>? {
    get { nil }
  }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 11.0, *)
  @usableFromInline
  package typealias Value = SwiftUICore.Binding<Swift.Bool>?
}
@available(*, unavailable)
extension SwiftUICore.IsExpandedTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct HStack<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @usableFromInline
  internal var _tree: SwiftUICore._VariadicView.Tree<SwiftUICore._HStackLayout, Content>
  @inlinable public init(alignment: SwiftUICore.VerticalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder content: () -> Content) {
        _tree = .init(
            _HStackLayout(alignment: alignment, spacing: spacing)
        ) {
            content()
        }
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.HStack<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.HStack : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _HStackLayout {
  public var alignment: SwiftUICore.VerticalAlignment
  public var spacing: CoreFoundation.CGFloat?
  @inlinable public init(alignment: SwiftUICore.VerticalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil) {
        self.alignment = alignment
        self.spacing = spacing
    }
}
extension SwiftUICore._HStackLayout {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore._HStackLayout : SwiftUICore.Layout {
  public typealias Cache = SwiftUICore._StackLayoutCache
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct HStackLayout : SwiftUICore.Layout {
  public var alignment: SwiftUICore.VerticalAlignment
  public var spacing: CoreFoundation.CGFloat?
  @inlinable public init(alignment: SwiftUICore.VerticalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil) {
        self.alignment = alignment
        self.spacing = spacing
    }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Cache = SwiftUICore._HStackLayout.Cache
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _CompositingGroupEffect : Swift.Equatable {
  @inlinable nonisolated public init() {}
  nonisolated public static func == (a: SwiftUICore._CompositingGroupEffect, b: SwiftUICore._CompositingGroupEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func compositingGroup() -> some SwiftUICore.View {
        return modifier(_CompositingGroupEffect())
    }
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol Keyframes<Value> {
  associatedtype Value = Self.Body.Value
  associatedtype Body : SwiftUICore.Keyframes
  @SwiftUICore.KeyframesBuilder<Self.Value> var body: Self.Body { get }
  func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframes<Self.Value>, initialValue: Self.Value, initialVelocity: Self.Value?)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Keyframes where Self.Value == Self.Body.Value {
  public func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframes<Self.Value>, initialValue: Self.Value, initialVelocity: Self.Value?)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Never : SwiftUICore.Keyframes {
  public func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframes<Swift.Never>, initialValue: Swift.Never, initialVelocity: Swift.Never?)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _ResolvedKeyframes<Value> {
}
@available(*, unavailable)
extension SwiftUICore._ResolvedKeyframes : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct AnyShapeStyle : SwiftUICore.ShapeStyle {
  @usableFromInline
  @frozen package struct Storage : Swift.Equatable {
    package var box: SwiftUICore.AnyShapeStyleBox
    @usableFromInline
    package static func == (lhs: SwiftUICore.AnyShapeStyle.Storage, rhs: SwiftUICore.AnyShapeStyle.Storage) -> Swift.Bool
  }
  package var storage: SwiftUICore.AnyShapeStyle.Storage
  public init<S>(_ style: S) where S : SwiftUICore.ShapeStyle
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnyShapeStyle.Storage : @unchecked Swift.Sendable {
}
@_hasMissingDesignatedInitializers @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package class AnyShapeStyleBox {
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUICore.AnyShapeStyleBox : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _PreferenceReadingView<Key, Content> : SwiftUICore.View where Key : SwiftUICore.PreferenceKey, Content : SwiftUICore.View {
  public var value: SwiftUICore._PreferenceValue<Key>
  public var transform: (Key.Value) -> Content
  @inlinable public init(value: SwiftUICore._PreferenceValue<Key>, transform: @escaping (Key.Value) -> Content) {
        self.value = value
        self.transform = transform
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore._PreferenceReadingView<Key, Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._PreferenceReadingView : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._PreferenceValue {
  @inlinable public func _force<T>(_ transform: @escaping (Key.Value) -> T) -> SwiftUICore._PreferenceReadingView<Key, T> where T : SwiftUICore.View {
        return _PreferenceReadingView(value: self, transform: transform)
    }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct AccessibilityCustomContentKey {
  public init(_ label: SwiftUICore.Text, id: Swift.String)
  public init(_ labelKey: SwiftUICore.LocalizedStringKey, id: Swift.String)
  public init(_ labelKey: SwiftUICore.LocalizedStringKey)
}
@available(*, unavailable)
extension SwiftUICore.AccessibilityCustomContentKey : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.AccessibilityCustomContentKey : Swift.Equatable {
  public static func == (a: SwiftUICore.AccessibilityCustomContentKey, b: SwiftUICore.AccessibilityCustomContentKey) -> Swift.Bool
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public enum AccessibilityHeadingLevel : Swift.UInt {
  case unspecified
  case h1
  case h2
  case h3
  case h4
  case h5
  case h6
  public init?(rawValue: Swift.UInt)
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _TrimmedShape<S> : SwiftUICore.Shape where S : SwiftUICore.Shape {
  public var shape: S
  public var startFraction: CoreFoundation.CGFloat
  public var endFraction: CoreFoundation.CGFloat
  @inlinable public init(shape: S, startFraction: CoreFoundation.CGFloat = 0, endFraction: CoreFoundation.CGFloat = 1) {
        self.shape = shape
        self.startFraction = startFraction
        self.endFraction = endFraction
    }
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public static var role: SwiftUICore.ShapeRole {
    get
  }
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
    get
  }
  public typealias AnimatableData = SwiftUICore.AnimatablePair<S.AnimatableData, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>>
  public var animatableData: SwiftUICore._TrimmedShape<S>.AnimatableData {
    get
    set
  }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore._TrimmedShape<S>, SwiftUICore.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape {
  @inlinable nonisolated public func trim(from startFraction: CoreFoundation.CGFloat = 0, to endFraction: CoreFoundation.CGFloat = 1) -> some SwiftUICore.Shape {
        return _TrimmedShape(shape: self, startFraction: startFraction,
            endFraction: endFraction)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Gesture {
  nonisolated public func onEnded(@_inheritActorContext _ action: @escaping (Self.Value) -> Swift.Void) -> SwiftUICore._EndedGesture<Self>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Gesture where Self.Value : Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public func onChanged(@_inheritActorContext _ action: @escaping (Self.Value) -> Swift.Void) -> SwiftUICore._ChangedGesture<Self>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_Concurrency.MainActor @preconcurrency public struct _EndedGesture<Content> where Content : SwiftUICore.Gesture {
  nonisolated public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUICore._EndedGesture<Content>>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Content.Value>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Value = Content.Value
}
@available(*, unavailable)
extension SwiftUICore._EndedGesture : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_Concurrency.MainActor @preconcurrency public struct _ChangedGesture<Content> where Content : SwiftUICore.Gesture, Content.Value : Swift.Equatable {
  nonisolated public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUICore._ChangedGesture<Content>>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Content.Value>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Value = Content.Value
}
@available(*, unavailable)
extension SwiftUICore._ChangedGesture : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text : SwiftUICore.View {
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.Text>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _DynamicPropertyBuffer {
}
@available(*, unavailable)
extension SwiftUICore._DynamicPropertyBuffer : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol AXChartDescriptorRepresentable {
  func makeChartDescriptor() -> Accessibility.AXChartDescriptor
  func updateChartDescriptor(_ descriptor: Accessibility.AXChartDescriptor)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AXChartDescriptorRepresentable {
  public func updateChartDescriptor(_ descriptor: Accessibility.AXChartDescriptor)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  public struct LineStyle : Swift.Hashable, Swift.Sendable {
    public init(pattern: SwiftUICore.Text.LineStyle.Pattern = .solid, color: SwiftUICore.Color? = nil)
    public struct Pattern : Swift.Sendable {
      public static let solid: SwiftUICore.Text.LineStyle.Pattern
      public static let dot: SwiftUICore.Text.LineStyle.Pattern
      public static let dash: SwiftUICore.Text.LineStyle.Pattern
      public static let dashDot: SwiftUICore.Text.LineStyle.Pattern
      public static let dashDotDot: SwiftUICore.Text.LineStyle.Pattern
    }
    public static let single: SwiftUICore.Text.LineStyle
    public static func == (a: SwiftUICore.Text.LineStyle, b: SwiftUICore.Text.LineStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func underline(_ isActive: Swift.Bool = true, pattern: SwiftUICore.Text.LineStyle.Pattern = .solid, color: SwiftUICore.Color? = nil) -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func strikethrough(_ isActive: Swift.Bool = true, pattern: SwiftUICore.Text.LineStyle.Pattern = .solid, color: SwiftUICore.Color? = nil) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _Graph {
}
@available(*, unavailable)
extension SwiftUICore._Graph : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _GraphValue<Value> : Swift.Equatable {
  public subscript<U>(keyPath: Swift.KeyPath<Value, U>) -> SwiftUICore._GraphValue<U> {
    get
  }
  public static func == (a: SwiftUICore._GraphValue<Value>, b: SwiftUICore._GraphValue<Value>) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore._GraphValue : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol TransactionKey {
  associatedtype Value
  static var defaultValue: Self.Value { get }
  static func _valuesEqual(_ lhs: Self.Value, _ rhs: Self.Value) -> Swift.Bool
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.TransactionKey {
  public static func _valuesEqual(_ lhs: Self.Value, _ rhs: Self.Value) -> Swift.Bool
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.TransactionKey where Self.Value : Swift.Equatable {
  public static func _valuesEqual(_ lhs: Self.Value, _ rhs: Self.Value) -> Swift.Bool
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.TransactionKey where Self : SwiftUICore.EnvironmentKey, Self.Value : Swift.Equatable {
  public static func _valuesEqual(_ lhs: Self.Value, _ rhs: Self.Value) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct Transaction {
  @usableFromInline
  package var plist: SwiftUICore.PropertyList
  @inlinable public init() {
        plist = PropertyList()
    }
  @inlinable package init(plist: SwiftUICore.PropertyList) {
        self.plist = plist
    }
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public subscript<K>(key: K.Type) -> K.Value where K : SwiftUICore.TransactionKey {
    get
    set
  }
  @inlinable package var isEmpty: Swift.Bool {
    get {
        return plist.isEmpty
    }
  }
}
@available(*, unavailable)
extension SwiftUICore.Transaction : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public func withTransaction<Result>(_ transaction: SwiftUICore.Transaction, _ body: () throws -> Result) rethrows -> Result
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_alwaysEmitIntoClient public func withTransaction<R, V>(_ keyPath: Swift.WritableKeyPath<SwiftUICore.Transaction, V>, _ value: V, _ body: () throws -> R) rethrows -> R {
    var transaction = Transaction()
    transaction[keyPath: keyPath] = value
    return try withTransaction(transaction, body)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct RedactionReasons : Swift.OptionSet, Swift.Sendable {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let placeholder: SwiftUICore.RedactionReasons
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static let privacy: SwiftUICore.RedactionReasons
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public static let invalidated: SwiftUICore.RedactionReasons
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias ArrayLiteralElement = SwiftUICore.RedactionReasons
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Element = SwiftUICore.RedactionReasons
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias RawValue = Swift.Int
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  nonisolated public func redacted(reason: SwiftUICore.RedactionReasons) -> some SwiftUICore.View
  
  nonisolated public func unredacted() -> some SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var redactionReasons: SwiftUICore.RedactionReasons {
    get
    set
  }
}
@available(iOS 15.0, macOS 10.15, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(tvOS, unavailable)
public enum ControlSize : Swift.CaseIterable, Swift.Sendable {
  case mini
  case small
  case regular
  @available(macOS 11.0, *)
  case large
  @available(iOS 17.0, macOS 14.0, watchOS 10.0, visionOS 1.0, *)
  case extraLarge
  public static var allCases: [SwiftUICore.ControlSize] {
    get
  }
  public static func == (a: SwiftUICore.ControlSize, b: SwiftUICore.ControlSize) -> Swift.Bool
  @available(iOS 15.0, watchOS 9.0, macOS 10.15, *)
  @available(tvOS, unavailable)
  public typealias AllCases = [SwiftUICore.ControlSize]
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, macOS 10.15, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(tvOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var controlSize: SwiftUICore.ControlSize {
    get
    set
  }
}
@available(iOS 15.0, macOS 10.15, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  @inlinable nonisolated public func controlSize(_ controlSize: SwiftUICore.ControlSize) -> some SwiftUICore.View {
        return environment(\.controlSize, controlSize)
    }
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension Foundation.FormatStyle where Self == SwiftUICore.SystemFormatStyle.DateOffset {
  public static func offset(to anchor: Foundation.Date, allowedFields: Swift.Set<Foundation.Date.ComponentsFormatStyle.Field> = [.year, .month, .day, .hour, .minute, .second], maxFieldCount: Swift.Int = 2, sign: Foundation.NumberFormatStyleConfiguration.SignDisplayStrategy = .automatic) -> SwiftUICore.SystemFormatStyle.DateOffset
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.SystemFormatStyle {
  public struct DateOffset : Swift.Sendable {
    public init(to anchor: Foundation.Date, allowedFields: Swift.Set<Foundation.Date.ComponentsFormatStyle.Field> = [.year, .month, .week, .day, .hour, .minute, .second], maxFieldCount: Swift.Int = 2, sign: Foundation.NumberFormatStyleConfiguration.SignDisplayStrategy = .automatic)
    public func calendar(_ calendar: Foundation.Calendar) -> SwiftUICore.SystemFormatStyle.DateOffset
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.SystemFormatStyle.DateOffset : Foundation.FormatStyle {
  public func format(_ referenceDate: Foundation.Date) -> Foundation.AttributedString
  public func locale(_ locale: Foundation.Locale) -> SwiftUICore.SystemFormatStyle.DateOffset
  public static func == (a: SwiftUICore.SystemFormatStyle.DateOffset, b: SwiftUICore.SystemFormatStyle.DateOffset) -> Swift.Bool
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias FormatInput = Foundation.Date
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias FormatOutput = Foundation.AttributedString
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.SystemFormatStyle.DateOffset : Foundation.DiscreteFormatStyle {
  public func discreteInput(before referenceDate: Foundation.Date) -> Foundation.Date?
  public func discreteInput(after referenceDate: Foundation.Date) -> Foundation.Date?
  public func input(before referenceDate: Foundation.Date) -> Foundation.Date?
  public func input(after referenceDate: Foundation.Date) -> Foundation.Date?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct FillStyle : Swift.Equatable {
  public var isEOFilled: Swift.Bool
  public var isAntialiased: Swift.Bool
  @inlinable public init(eoFill: Swift.Bool = false, antialiased: Swift.Bool = true) {
        self.isEOFilled = eoFill
        self.isAntialiased = antialiased
    }
  public static func == (a: SwiftUICore.FillStyle, b: SwiftUICore.FillStyle) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum BlendMode : Swift.Sendable {
  case normal
  case multiply
  case screen
  case overlay
  case darken
  case lighten
  case colorDodge
  case colorBurn
  case softLight
  case hardLight
  case difference
  case exclusion
  case hue
  case saturation
  case color
  case luminosity
  case sourceAtop
  case destinationOver
  case destinationOut
  case plusDarker
  case plusLighter
  public static func == (a: SwiftUICore.BlendMode, b: SwiftUICore.BlendMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle {
  @inlinable public func blendMode(_ mode: SwiftUICore.BlendMode) -> some SwiftUICore.ShapeStyle {
        _BlendModeShapeStyle(style: self, blendMode: mode)
    }
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.AnyShapeStyle {
  @_alwaysEmitIntoClient public static func blendMode(_ mode: SwiftUICore.BlendMode) -> some SwiftUICore.ShapeStyle {
        return _BlendModeShapeStyle(
            style: _ImplicitShapeStyle(), blendMode: mode)
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _BlendModeShapeStyle<Style> : SwiftUICore.ShapeStyle where Style : SwiftUICore.ShapeStyle {
  public var style: Style
  public var blendMode: SwiftUICore.BlendMode
  @inlinable public init(style: Style, blendMode: SwiftUICore.BlendMode) {
        self.style = style
        self.blendMode = blendMode
    }
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct Material : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.Material {
  @_alwaysEmitIntoClient public static var regularMaterial: SwiftUICore.Material {
    get { .regular }
  }
  @_alwaysEmitIntoClient public static var thickMaterial: SwiftUICore.Material {
    get { .thick }
  }
  @_alwaysEmitIntoClient public static var thinMaterial: SwiftUICore.Material {
    get { .thin }
  }
  @_alwaysEmitIntoClient public static var ultraThinMaterial: SwiftUICore.Material {
    get { .ultraThin }
  }
  @_alwaysEmitIntoClient public static var ultraThickMaterial: SwiftUICore.Material {
    get { .ultraThick }
  }
}
@available(iOS 15.0, macOS 12.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.Material {
  @_alwaysEmitIntoClient public static var bar: SwiftUICore.Material {
    get { .bar }
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Material {
  public static let regular: SwiftUICore.Material
  public static let thick: SwiftUICore.Material
  public static let thin: SwiftUICore.Material
  public static let ultraThin: SwiftUICore.Material
  public static let ultraThick: SwiftUICore.Material
}
@available(iOS 15.0, macOS 12.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.Material {
  public static let bar: SwiftUICore.Material
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var backgroundMaterial: SwiftUICore.Material? {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Material : SwiftUICore.ShapeStyle {
  nonisolated public static func _makeView<S>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<S, SwiftUICore.Material>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where S : SwiftUICore.Shape
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
public struct MaterialActiveAppearance : Swift.Sendable, Swift.Equatable {
  public static let automatic: SwiftUICore.MaterialActiveAppearance
  public static let active: SwiftUICore.MaterialActiveAppearance
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static let inactive: SwiftUICore.MaterialActiveAppearance
  public static let matchWindow: SwiftUICore.MaterialActiveAppearance
  public static func == (a: SwiftUICore.MaterialActiveAppearance, b: SwiftUICore.MaterialActiveAppearance) -> Swift.Bool
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.EnvironmentValues {
  public var materialActiveAppearance: SwiftUICore.MaterialActiveAppearance {
    get
    set
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.Material {
  public func materialActiveAppearance(_ appearance: SwiftUICore.MaterialActiveAppearance) -> SwiftUICore.Material
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.ShapeStyle {
  public func materialActiveAppearance(_ appearance: SwiftUICore.MaterialActiveAppearance) -> some SwiftUICore.ShapeStyle
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.View {
  nonisolated public func materialActiveAppearance(_ appearance: SwiftUICore.MaterialActiveAppearance) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image {
  public enum Interpolation : Swift.Sendable {
    case none
    case low
    case medium
    case high
    public static func == (a: SwiftUICore.Image.Interpolation, b: SwiftUICore.Image.Interpolation) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image {
  public func interpolation(_ interpolation: SwiftUICore.Image.Interpolation) -> SwiftUICore.Image
  public func antialiased(_ isAntialiased: Swift.Bool) -> SwiftUICore.Image
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum _VariadicView {
  public typealias Root = SwiftUICore._VariadicView_Root
  public typealias ViewRoot = SwiftUICore._VariadicView_ViewRoot
  public typealias Children = SwiftUICore._VariadicView_Children
  public typealias UnaryViewRoot = SwiftUICore._VariadicView_UnaryViewRoot
  public typealias MultiViewRoot = SwiftUICore._VariadicView_MultiViewRoot
  @frozen public struct Tree<Root, Content> where Root : SwiftUICore._VariadicView_Root {
    public var root: Root
    public var content: Content
    @inlinable package init(root: Root, content: Content) {
            self.root = root
            self.content = content
        }
    @inlinable public init(_ root: Root, @SwiftUICore.ViewBuilder content: () -> Content) {
            self.root = root
            self.content = content()
        }
  }
}
@available(*, unavailable)
extension SwiftUICore._VariadicView.Tree : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore._VariadicView : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol _VariadicView_Root {
  static var _viewListOptions: Swift.Int { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VariadicView_Root {
  public static var _viewListOptions: Swift.Int {
    get
  }
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@preconcurrency @_Concurrency.MainActor public protocol _VariadicView_ViewRoot : SwiftUICore._VariadicView_Root {
  nonisolated static func _makeView(root: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewOutputs
  nonisolated static func _makeViewList(root: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func body(children: SwiftUICore._VariadicView.Children) -> Self.Body
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VariadicView_ViewRoot where Self.Body == Swift.Never {
  @_Concurrency.MainActor @preconcurrency public func body(children: SwiftUICore._VariadicView.Children) -> Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol _VariadicView_UnaryViewRoot : SwiftUICore._VariadicView_ViewRoot {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VariadicView_UnaryViewRoot {
  nonisolated public static func _makeViewList(root: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol _VariadicView_MultiViewRoot : SwiftUICore._VariadicView_ViewRoot {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VariadicView_MultiViewRoot {
  nonisolated public static func _makeView(root: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _VariadicView_Children {
}
@available(*, unavailable)
extension SwiftUICore._VariadicView_Children : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VariadicView_ViewRoot {
  nonisolated public static func _makeView(root: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(root: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VariadicView.Tree : SwiftUICore.View where Root : SwiftUICore._VariadicView_ViewRoot, Content : SwiftUICore.View {
  public typealias Body = Swift.Never
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore._VariadicView.Tree<Root, Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUICore._VariadicView.Tree<Root, Content>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.HierarchicalShapeStyle {
  @_alwaysEmitIntoClient public static var primary: SwiftUICore.HierarchicalShapeStyle {
    get { .primary }
  }
  @_alwaysEmitIntoClient public static var secondary: SwiftUICore.HierarchicalShapeStyle {
    get { .secondary }
  }
  @_alwaysEmitIntoClient public static var tertiary: SwiftUICore.HierarchicalShapeStyle {
    get { .tertiary }
  }
  @_alwaysEmitIntoClient public static var quaternary: SwiftUICore.HierarchicalShapeStyle {
    get { .quaternary }
  }
}
@available(iOS 16.0, macOS 12.0, macCatalyst 15.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.HierarchicalShapeStyle {
  @_alwaysEmitIntoClient public static var quinary: SwiftUICore.HierarchicalShapeStyle {
    get { .quinary }
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct HierarchicalShapeStyle : SwiftUICore.ShapeStyle {
  package var id: Swift.UInt32
  public static let primary: SwiftUICore.HierarchicalShapeStyle
  public static let secondary: SwiftUICore.HierarchicalShapeStyle
  public static let tertiary: SwiftUICore.HierarchicalShapeStyle
  public static let quaternary: SwiftUICore.HierarchicalShapeStyle
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 16.0, macOS 12.0, macCatalyst 15.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.HierarchicalShapeStyle {
  public static let quinary: SwiftUICore.HierarchicalShapeStyle
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle {
  @_alwaysEmitIntoClient public var secondary: some SwiftUICore.ShapeStyle {
    get {
        HierarchicalShapeStyleModifier(base: self, level: 1)
    }
  }
  @_alwaysEmitIntoClient public var tertiary: some SwiftUICore.ShapeStyle {
    get {
        HierarchicalShapeStyleModifier(base: self, level: 2)
    }
  }
  @_alwaysEmitIntoClient public var quaternary: some SwiftUICore.ShapeStyle {
    get {
        HierarchicalShapeStyleModifier(base: self, level: 3)
    }
  }
  @_alwaysEmitIntoClient public var quinary: some SwiftUICore.ShapeStyle {
    get {
        HierarchicalShapeStyleModifier(base: self, level: 4)
    }
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct HierarchicalShapeStyleModifier<Base> : SwiftUICore.ShapeStyle where Base : SwiftUICore.ShapeStyle {
  @usableFromInline
  internal var base: Base
  @usableFromInline
  internal var level: Swift.Int
  @_alwaysEmitIntoClient internal init(base: Base, level: Swift.Int) {
        (self.base, self.level) = (base, level)
    }
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol DynamicProperty {
  static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  static var _propertyBehaviors: Swift.UInt32 { get }
  mutating func update()
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.DynamicProperty {
  public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
  public mutating func update()
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static var _propertyBehaviors: Swift.UInt32 {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct SymbolRenderingMode : Swift.Sendable {
  public static let monochrome: SwiftUICore.SymbolRenderingMode
  public static let multicolor: SwiftUICore.SymbolRenderingMode
  public static let hierarchical: SwiftUICore.SymbolRenderingMode
  public static let palette: SwiftUICore.SymbolRenderingMode
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func symbolRenderingMode(_ mode: SwiftUICore.SymbolRenderingMode?) -> some SwiftUICore.View {
        return environment(\.symbolRenderingMode, mode)
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image {
  public func symbolRenderingMode(_ mode: SwiftUICore.SymbolRenderingMode?) -> SwiftUICore.Image
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var symbolRenderingMode: SwiftUICore.SymbolRenderingMode? {
    get
    set
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@available(watchOS, unavailable)
@dynamicMemberLookup public struct ShaderLibrary : Swift.Equatable, @unchecked Swift.Sendable {
  public static let `default`: SwiftUICore.ShaderLibrary
  public static func bundle(_ bundle: Foundation.Bundle) -> SwiftUICore.ShaderLibrary
  public init(data: Foundation.Data)
  public init(url: Foundation.URL)
  public static subscript(dynamicMember name: Swift.String) -> SwiftUICore.ShaderFunction {
    get
  }
  public subscript(dynamicMember name: Swift.String) -> SwiftUICore.ShaderFunction {
    get
  }
  public static func == (lhs: SwiftUICore.ShaderLibrary, rhs: SwiftUICore.ShaderLibrary) -> Swift.Bool
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@available(watchOS, unavailable)
@dynamicCallable public struct ShaderFunction : Swift.Equatable, Swift.Sendable {
  public var library: SwiftUICore.ShaderLibrary
  public var name: Swift.String
  public init(library: SwiftUICore.ShaderLibrary, name: Swift.String)
  public func dynamicallyCall(withArguments args: [SwiftUICore.Shader.Argument]) -> SwiftUICore.Shader
  public static func == (a: SwiftUICore.ShaderFunction, b: SwiftUICore.ShaderFunction) -> Swift.Bool
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@available(watchOS, unavailable)
public struct Shader : Swift.Equatable, Swift.Sendable {
  public struct Argument : Swift.Equatable, Swift.Sendable {
    @usableFromInline
    internal static func _float(_ x: Swift.Float) -> SwiftUICore.Shader.Argument
    @usableFromInline
    internal static func _float2(_ x: Swift.Float, _ y: Swift.Float) -> SwiftUICore.Shader.Argument
    @usableFromInline
    internal static func _float3(_ x: Swift.Float, _ y: Swift.Float, _ z: Swift.Float) -> SwiftUICore.Shader.Argument
    @usableFromInline
    internal static func _float4(_ x: Swift.Float, _ y: Swift.Float, _ z: Swift.Float, _ w: Swift.Float) -> SwiftUICore.Shader.Argument
    @_alwaysEmitIntoClient public static func float<T>(_ x: T) -> SwiftUICore.Shader.Argument where T : Swift.BinaryFloatingPoint {
            return _float(Float(x))
        }
    @_alwaysEmitIntoClient public static func float2<T>(_ x: T, _ y: T) -> SwiftUICore.Shader.Argument where T : Swift.BinaryFloatingPoint {
            return _float2(Float(x), Float(y))
        }
    @_alwaysEmitIntoClient public static func float3<T>(_ x: T, _ y: T, _ z: T) -> SwiftUICore.Shader.Argument where T : Swift.BinaryFloatingPoint {
            return _float3(Float(x), Float(y), Float(z))
        }
    @_alwaysEmitIntoClient public static func float4<T>(_ x: T, _ y: T, _ z: T, _ w: T) -> SwiftUICore.Shader.Argument where T : Swift.BinaryFloatingPoint {
            return _float4(Float(x), Float(y), Float(z), Float(w))
        }
    @_alwaysEmitIntoClient public static func float2(_ point: CoreFoundation.CGPoint) -> SwiftUICore.Shader.Argument {
            return _float2(Float(point.x), Float(point.y))
        }
    @_alwaysEmitIntoClient public static func float2(_ size: CoreFoundation.CGSize) -> SwiftUICore.Shader.Argument {
            return _float2(Float(size.width), Float(size.height))
        }
    @_alwaysEmitIntoClient public static func float2(_ vector: CoreFoundation.CGVector) -> SwiftUICore.Shader.Argument {
            return _float2(Float(vector.dx), Float(vector.dy))
        }
    public static func floatArray(_ array: [Swift.Float]) -> SwiftUICore.Shader.Argument
    public static var boundingRect: SwiftUICore.Shader.Argument {
      get
    }
    public static func color(_ color: SwiftUICore.Color) -> SwiftUICore.Shader.Argument
    public static func colorArray(_ array: [SwiftUICore.Color]) -> SwiftUICore.Shader.Argument
    public static func image(_ image: SwiftUICore.Image) -> SwiftUICore.Shader.Argument
    public static func data(_ data: Foundation.Data) -> SwiftUICore.Shader.Argument
    public static func == (a: SwiftUICore.Shader.Argument, b: SwiftUICore.Shader.Argument) -> Swift.Bool
  }
  public var function: SwiftUICore.ShaderFunction
  public var arguments: [SwiftUICore.Shader.Argument]
  public var dithersColor: Swift.Bool {
    get
    set
  }
  public init(function: SwiftUICore.ShaderFunction, arguments: [SwiftUICore.Shader.Argument])
  public static func == (a: SwiftUICore.Shader, b: SwiftUICore.Shader) -> Swift.Bool
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@available(watchOS, unavailable)
extension SwiftUICore.Shader {
  public func compile(as type: SwiftUICore.Shader.UsageType) async throws
  public struct UsageType : Swift.Hashable, Swift.Sendable {
    public static let shapeStyle: SwiftUICore.Shader.UsageType
    public static let colorEffect: SwiftUICore.Shader.UsageType
    public static let distortionEffect: SwiftUICore.Shader.UsageType
    public static let layerEffect: SwiftUICore.Shader.UsageType
    public static func == (a: SwiftUICore.Shader.UsageType, b: SwiftUICore.Shader.UsageType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUICore.Shader {
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func colorEffect(_ shader: SwiftUICore.Shader, isEnabled: Swift.Bool = true) -> some SwiftUICore.View
  
  nonisolated public func distortionEffect(_ shader: SwiftUICore.Shader, maxSampleOffset: CoreFoundation.CGSize, isEnabled: Swift.Bool = true) -> some SwiftUICore.View
  
  nonisolated public func layerEffect(_ shader: SwiftUICore.Shader, maxSampleOffset: CoreFoundation.CGSize, isEnabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@available(watchOS, unavailable)
public struct _ShaderFilterEffect : Swift.Sendable {
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._ShaderFilterEffect>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 17.0, tvOS 17.0, macOS 14.0, *)
  @available(watchOS, unavailable)
  public typealias Body = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct GraphicsContext {
  @_hasMissingDesignatedInitializers @usableFromInline
  final internal class Storage {
    @objc deinit
  }
  internal var storage: SwiftUICore.GraphicsContext.Storage
  @frozen public struct BlendMode : Swift.RawRepresentable, Swift.Equatable {
    public let rawValue: Swift.Int32
    @inlinable public init(rawValue: Swift.Int32) { self.rawValue = rawValue }
    @inlinable public static var normal: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.normal.rawValue)
        }
    }
    @inlinable public static var multiply: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.multiply.rawValue)
        }
    }
    @inlinable public static var screen: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.screen.rawValue)
        }
    }
    @inlinable public static var overlay: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.overlay.rawValue)
        }
    }
    @inlinable public static var darken: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.darken.rawValue)
        }
    }
    @inlinable public static var lighten: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.lighten.rawValue)
        }
    }
    @inlinable public static var colorDodge: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.colorDodge.rawValue)
        }
    }
    @inlinable public static var colorBurn: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.colorBurn.rawValue)
        }
    }
    @inlinable public static var softLight: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.softLight.rawValue)
        }
    }
    @inlinable public static var hardLight: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.hardLight.rawValue)
        }
    }
    @inlinable public static var difference: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.difference.rawValue)
        }
    }
    @inlinable public static var exclusion: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.exclusion.rawValue)
        }
    }
    @inlinable public static var hue: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.hue.rawValue)
        }
    }
    @inlinable public static var saturation: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.saturation.rawValue)
        }
    }
    @inlinable public static var color: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.color.rawValue)
        }
    }
    @inlinable public static var luminosity: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.luminosity.rawValue)
        }
    }
    @inlinable public static var clear: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.clear.rawValue)
        }
    }
    @inlinable public static var copy: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.copy.rawValue)
        }
    }
    @inlinable public static var sourceIn: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.sourceIn.rawValue)
        }
    }
    @inlinable public static var sourceOut: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.sourceOut.rawValue)
        }
    }
    @inlinable public static var sourceAtop: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.sourceAtop.rawValue)
        }
    }
    @inlinable public static var destinationOver: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.destinationOver.rawValue)
        }
    }
    @inlinable public static var destinationIn: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.destinationIn.rawValue)
        }
    }
    @inlinable public static var destinationOut: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.destinationOut.rawValue)
        }
    }
    @inlinable public static var destinationAtop: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.destinationAtop.rawValue)
        }
    }
    @inlinable public static var xor: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.xor.rawValue)
        }
    }
    @inlinable public static var plusDarker: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.plusDarker.rawValue)
        }
    }
    @inlinable public static var plusLighter: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.plusLighter.rawValue)
        }
    }
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias RawValue = Swift.Int32
  }
  public var opacity: Swift.Double {
    get
    set
  }
  public var blendMode: SwiftUICore.GraphicsContext.BlendMode {
    get
    set
  }
  public var environment: SwiftUICore.EnvironmentValues {
    get
  }
  public var transform: CoreFoundation.CGAffineTransform {
    get
    set
  }
  public mutating func scaleBy(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
  public mutating func translateBy(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
  public mutating func rotate(by angle: SwiftUICore.Angle)
  public mutating func concatenate(_ matrix: CoreFoundation.CGAffineTransform)
  @frozen public struct ClipOptions : Swift.OptionSet {
    public let rawValue: Swift.UInt32
    @inlinable public init(rawValue: Swift.UInt32) { self.rawValue = rawValue }
    @inlinable public static var inverse: SwiftUICore.GraphicsContext.ClipOptions {
      get { Self(rawValue: 1 << 0) }
    }
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias ArrayLiteralElement = SwiftUICore.GraphicsContext.ClipOptions
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias Element = SwiftUICore.GraphicsContext.ClipOptions
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias RawValue = Swift.UInt32
  }
  public var clipBoundingRect: CoreFoundation.CGRect {
    get
  }
  public mutating func clip(to path: SwiftUICore.Path, style: SwiftUICore.FillStyle = FillStyle(), options: SwiftUICore.GraphicsContext.ClipOptions = ClipOptions())
  public mutating func clipToLayer(opacity: Swift.Double = 1, options: SwiftUICore.GraphicsContext.ClipOptions = ClipOptions(), content: (inout SwiftUICore.GraphicsContext) throws -> Swift.Void) rethrows
  public struct Filter : Swift.Sendable {
    public static func projectionTransform(_ matrix: SwiftUICore.ProjectionTransform) -> SwiftUICore.GraphicsContext.Filter
    public static func shadow(color: SwiftUICore.Color = Color(.sRGBLinear, white: 0, opacity: 0.33), radius: CoreFoundation.CGFloat, x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0, blendMode: SwiftUICore.GraphicsContext.BlendMode = .normal, options: SwiftUICore.GraphicsContext.ShadowOptions = ShadowOptions()) -> SwiftUICore.GraphicsContext.Filter
    public static func colorMultiply(_ color: SwiftUICore.Color) -> SwiftUICore.GraphicsContext.Filter
    public static func colorMatrix(_ matrix: SwiftUICore.ColorMatrix) -> SwiftUICore.GraphicsContext.Filter
    public static func hueRotation(_ angle: SwiftUICore.Angle) -> SwiftUICore.GraphicsContext.Filter
    public static func saturation(_ amount: Swift.Double) -> SwiftUICore.GraphicsContext.Filter
    public static func brightness(_ amount: Swift.Double) -> SwiftUICore.GraphicsContext.Filter
    public static func contrast(_ amount: Swift.Double) -> SwiftUICore.GraphicsContext.Filter
    public static func colorInvert(_ amount: Swift.Double = 1) -> SwiftUICore.GraphicsContext.Filter
    public static func grayscale(_ amount: Swift.Double) -> SwiftUICore.GraphicsContext.Filter
    public static var luminanceToAlpha: SwiftUICore.GraphicsContext.Filter {
      get
    }
    public static func blur(radius: CoreFoundation.CGFloat, options: SwiftUICore.GraphicsContext.BlurOptions = BlurOptions()) -> SwiftUICore.GraphicsContext.Filter
    public static func alphaThreshold(min: Swift.Double, max: Swift.Double = 1, color: SwiftUICore.Color = Color.black) -> SwiftUICore.GraphicsContext.Filter
    @available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
    @available(watchOS, unavailable)
    public static func colorShader(_ shader: SwiftUICore.Shader) -> SwiftUICore.GraphicsContext.Filter
    @available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
    @available(watchOS, unavailable)
    public static func distortionShader(_ shader: SwiftUICore.Shader, maxSampleOffset: CoreFoundation.CGSize) -> SwiftUICore.GraphicsContext.Filter
    @available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
    @available(watchOS, unavailable)
    public static func layerShader(_ shader: SwiftUICore.Shader, maxSampleOffset: CoreFoundation.CGSize) -> SwiftUICore.GraphicsContext.Filter
  }
  @frozen public struct ShadowOptions : Swift.OptionSet {
    public let rawValue: Swift.UInt32
    @inlinable public init(rawValue: Swift.UInt32) { self.rawValue = rawValue }
    @inlinable public static var shadowAbove: SwiftUICore.GraphicsContext.ShadowOptions {
      get { Self(rawValue: 1 << 0) }
    }
    @inlinable public static var shadowOnly: SwiftUICore.GraphicsContext.ShadowOptions {
      get { Self(rawValue: 1 << 1) }
    }
    @inlinable public static var invertsAlpha: SwiftUICore.GraphicsContext.ShadowOptions {
      get { Self(rawValue: 1 << 2) }
    }
    @inlinable public static var disablesGroup: SwiftUICore.GraphicsContext.ShadowOptions {
      get { Self(rawValue: 1 << 3) }
    }
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias ArrayLiteralElement = SwiftUICore.GraphicsContext.ShadowOptions
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias Element = SwiftUICore.GraphicsContext.ShadowOptions
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias RawValue = Swift.UInt32
  }
  @frozen public struct BlurOptions : Swift.OptionSet {
    public let rawValue: Swift.UInt32
    @inlinable public init(rawValue: Swift.UInt32) { self.rawValue = rawValue }
    @inlinable public static var opaque: SwiftUICore.GraphicsContext.BlurOptions {
      get { Self(rawValue: 1 << 0) }
    }
    @inlinable public static var dithersResult: SwiftUICore.GraphicsContext.BlurOptions {
      get { Self(rawValue: 1 << 1) }
    }
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias ArrayLiteralElement = SwiftUICore.GraphicsContext.BlurOptions
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias Element = SwiftUICore.GraphicsContext.BlurOptions
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias RawValue = Swift.UInt32
  }
  @frozen public struct FilterOptions : Swift.OptionSet {
    public let rawValue: Swift.UInt32
    @inlinable public init(rawValue: Swift.UInt32) {
            self.rawValue = rawValue
        }
    @inlinable public static var linearColor: SwiftUICore.GraphicsContext.FilterOptions {
      get { Self(rawValue: 1 << 0) }
    }
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias ArrayLiteralElement = SwiftUICore.GraphicsContext.FilterOptions
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias Element = SwiftUICore.GraphicsContext.FilterOptions
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias RawValue = Swift.UInt32
  }
  public mutating func addFilter(_ filter: SwiftUICore.GraphicsContext.Filter, options: SwiftUICore.GraphicsContext.FilterOptions = FilterOptions())
  public struct Shading : Swift.Sendable {
    public static var backdrop: SwiftUICore.GraphicsContext.Shading {
      get
    }
    public static var foreground: SwiftUICore.GraphicsContext.Shading {
      get
    }
    public static func palette(_ array: [SwiftUICore.GraphicsContext.Shading]) -> SwiftUICore.GraphicsContext.Shading
    public static func color(_ color: SwiftUICore.Color) -> SwiftUICore.GraphicsContext.Shading
    public static func color(_ colorSpace: SwiftUICore.Color.RGBColorSpace = .sRGB, red: Swift.Double, green: Swift.Double, blue: Swift.Double, opacity: Swift.Double = 1) -> SwiftUICore.GraphicsContext.Shading
    public static func color(_ colorSpace: SwiftUICore.Color.RGBColorSpace = .sRGB, white: Swift.Double, opacity: Swift.Double = 1) -> SwiftUICore.GraphicsContext.Shading
    @available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
    @available(watchOS, unavailable)
    public static func shader(_ shader: SwiftUICore.Shader, bounds: CoreFoundation.CGRect = .zero) -> SwiftUICore.GraphicsContext.Shading
    @available(iOS 18.0, macOS 15.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    public static func meshGradient(_ mesh: SwiftUICore.MeshGradient) -> SwiftUICore.GraphicsContext.Shading
    public static func style<S>(_ style: S) -> SwiftUICore.GraphicsContext.Shading where S : SwiftUICore.ShapeStyle
    public static func linearGradient(_ gradient: SwiftUICore.Gradient, startPoint: CoreFoundation.CGPoint, endPoint: CoreFoundation.CGPoint, options: SwiftUICore.GraphicsContext.GradientOptions = GradientOptions()) -> SwiftUICore.GraphicsContext.Shading
    public static func radialGradient(_ gradient: SwiftUICore.Gradient, center: CoreFoundation.CGPoint, startRadius: CoreFoundation.CGFloat, endRadius: CoreFoundation.CGFloat, options: SwiftUICore.GraphicsContext.GradientOptions = GradientOptions()) -> SwiftUICore.GraphicsContext.Shading
    public static func conicGradient(_ gradient: SwiftUICore.Gradient, center: CoreFoundation.CGPoint, angle: SwiftUICore.Angle = Angle(), options: SwiftUICore.GraphicsContext.GradientOptions = GradientOptions()) -> SwiftUICore.GraphicsContext.Shading
    public static func tiledImage(_ image: SwiftUICore.Image, origin: CoreFoundation.CGPoint = .zero, sourceRect: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 1, height: 1), scale: CoreFoundation.CGFloat = 1) -> SwiftUICore.GraphicsContext.Shading
  }
  @frozen public struct GradientOptions : Swift.OptionSet {
    public let rawValue: Swift.UInt32
    @inlinable public init(rawValue: Swift.UInt32) { self.rawValue = rawValue }
    @inlinable public static var `repeat`: SwiftUICore.GraphicsContext.GradientOptions {
      get { Self(rawValue: 1 << 0) }
    }
    @inlinable public static var mirror: SwiftUICore.GraphicsContext.GradientOptions {
      get { Self(rawValue: 1 << 1) }
    }
    @inlinable public static var linearColor: SwiftUICore.GraphicsContext.GradientOptions {
      get { Self(rawValue: 1 << 2) }
    }
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias ArrayLiteralElement = SwiftUICore.GraphicsContext.GradientOptions
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias Element = SwiftUICore.GraphicsContext.GradientOptions
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias RawValue = Swift.UInt32
  }
  public func resolve(_ shading: SwiftUICore.GraphicsContext.Shading) -> SwiftUICore.GraphicsContext.Shading
  public func drawLayer(content: (inout SwiftUICore.GraphicsContext) throws -> Swift.Void) rethrows
  public func fill(_ path: SwiftUICore.Path, with shading: SwiftUICore.GraphicsContext.Shading, style: SwiftUICore.FillStyle = FillStyle())
  public func stroke(_ path: SwiftUICore.Path, with shading: SwiftUICore.GraphicsContext.Shading, style: SwiftUICore.StrokeStyle)
  public func stroke(_ path: SwiftUICore.Path, with shading: SwiftUICore.GraphicsContext.Shading, lineWidth: CoreFoundation.CGFloat = 1)
  public struct ResolvedImage {
    public var size: CoreFoundation.CGSize {
      get
    }
    public let baseline: CoreFoundation.CGFloat
    public var shading: SwiftUICore.GraphicsContext.Shading?
  }
  public func resolve(_ image: SwiftUICore.Image) -> SwiftUICore.GraphicsContext.ResolvedImage
  public func draw(_ image: SwiftUICore.GraphicsContext.ResolvedImage, in rect: CoreFoundation.CGRect, style: SwiftUICore.FillStyle = FillStyle())
  public func draw(_ image: SwiftUICore.GraphicsContext.ResolvedImage, at point: CoreFoundation.CGPoint, anchor: SwiftUICore.UnitPoint = .center)
  public func draw(_ image: SwiftUICore.Image, in rect: CoreFoundation.CGRect, style: SwiftUICore.FillStyle = FillStyle())
  public func draw(_ image: SwiftUICore.Image, at point: CoreFoundation.CGPoint, anchor: SwiftUICore.UnitPoint = .center)
  public struct ResolvedText {
    public var shading: SwiftUICore.GraphicsContext.Shading
    public func measure(in size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
    public func firstBaseline(in size: CoreFoundation.CGSize) -> CoreFoundation.CGFloat
    public func lastBaseline(in size: CoreFoundation.CGSize) -> CoreFoundation.CGFloat
  }
  public func resolve(_ text: SwiftUICore.Text) -> SwiftUICore.GraphicsContext.ResolvedText
  public func draw(_ text: SwiftUICore.GraphicsContext.ResolvedText, in rect: CoreFoundation.CGRect)
  public func draw(_ text: SwiftUICore.GraphicsContext.ResolvedText, at point: CoreFoundation.CGPoint, anchor: SwiftUICore.UnitPoint = .center)
  public func draw(_ text: SwiftUICore.Text, in rect: CoreFoundation.CGRect)
  public func draw(_ text: SwiftUICore.Text, at point: CoreFoundation.CGPoint, anchor: SwiftUICore.UnitPoint = .center)
  public struct ResolvedSymbol {
    public var size: CoreFoundation.CGSize {
      get
    }
  }
  public func resolveSymbol<ID>(id: ID) -> SwiftUICore.GraphicsContext.ResolvedSymbol? where ID : Swift.Hashable
  public func draw(_ symbol: SwiftUICore.GraphicsContext.ResolvedSymbol, in rect: CoreFoundation.CGRect)
  public func draw(_ symbol: SwiftUICore.GraphicsContext.ResolvedSymbol, at point: CoreFoundation.CGPoint, anchor: SwiftUICore.UnitPoint = .center)
}
@available(*, unavailable)
extension SwiftUICore.GraphicsContext.ResolvedImage : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.GraphicsContext.ResolvedText : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.GraphicsContext.ResolvedSymbol : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GraphicsContext {
  public func withCGContext(content: (CoreGraphics.CGContext) throws -> Swift.Void) rethrows
}
@available(*, unavailable)
extension SwiftUICore.GraphicsContext : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.GraphicsContext.Storage : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public enum ContentMode : Swift.Hashable, Swift.CaseIterable {
  case fit
  case fill
  public static func == (a: SwiftUICore.ContentMode, b: SwiftUICore.ContentMode) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AllCases = [SwiftUICore.ContentMode]
  nonisolated public static var allCases: [SwiftUICore.ContentMode] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _AspectRatioLayout {
  public var aspectRatio: CoreFoundation.CGFloat?
  public var contentMode: SwiftUICore.ContentMode
  @inlinable public init(aspectRatio: CoreFoundation.CGFloat? = nil, contentMode: SwiftUICore.ContentMode) {
        self.aspectRatio = aspectRatio
        self.contentMode = contentMode
    }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
extension SwiftUICore.View {
  @inlinable nonisolated public func aspectRatio(_ aspectRatio: CoreFoundation.CGFloat? = nil, contentMode: SwiftUICore.ContentMode) -> some SwiftUICore.View {
        return modifier(_AspectRatioLayout(
            aspectRatio: aspectRatio, contentMode: contentMode))
    }
  
  @inlinable nonisolated public func aspectRatio(_ aspectRatio: CoreFoundation.CGSize, contentMode: SwiftUICore.ContentMode) -> some SwiftUICore.View {
        return self.aspectRatio(
            aspectRatio.width / aspectRatio.height, contentMode: contentMode)
    }
  
  @inlinable nonisolated public func scaledToFit() -> some SwiftUICore.View {
        return aspectRatio(contentMode: .fit)
    }
  
  @inlinable nonisolated public func scaledToFill() -> some SwiftUICore.View {
        return aspectRatio(contentMode: .fill)
    }
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.LocalizedStringKey.StringInterpolation {
  @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(accessibilityName color: SwiftUICore.Color)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  public init<Subject>(_ subject: Subject, formatter: Foundation.Formatter) where Subject : Foundation.ReferenceConvertible
  public init<Subject>(_ subject: Subject, formatter: Foundation.Formatter) where Subject : ObjectiveC.NSObject
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  public init<F>(_ input: F.FormatInput, format: F) where F : Foundation.FormatStyle, F.FormatInput : Swift.Equatable, F.FormatOutput == Swift.String
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.Text {
  public init<F>(_ input: F.FormatInput, format: F) where F : Foundation.FormatStyle, F.FormatInput : Swift.Equatable, F.FormatOutput == Foundation.AttributedString
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public init(_ image: SwiftUICore.Image)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.LocalizedStringKey.StringInterpolation {
  @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(_ image: SwiftUICore.Image)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  public struct DateStyle : Swift.Sendable {
    public static let time: SwiftUICore.Text.DateStyle
    public static let date: SwiftUICore.Text.DateStyle
    public static let relative: SwiftUICore.Text.DateStyle
    public static let offset: SwiftUICore.Text.DateStyle
    public static let timer: SwiftUICore.Text.DateStyle
  }
  public init(_ date: Foundation.Date, style: SwiftUICore.Text.DateStyle)
  public init(_ dates: Swift.ClosedRange<Foundation.Date>)
  public init(_ interval: Foundation.DateInterval)
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  public init(timerInterval: Swift.ClosedRange<Foundation.Date>, pauseTime: Foundation.Date? = nil, countsDown: Swift.Bool = true, showsHours: Swift.Bool = true)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.LocalizedStringKey.StringInterpolation {
  @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(_ date: Foundation.Date, style: SwiftUICore.Text.DateStyle)
  @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(_ dates: Swift.ClosedRange<Foundation.Date>)
  @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(_ interval: Foundation.DateInterval)
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.LocalizedStringKey.StringInterpolation {
  @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(timerInterval: Swift.ClosedRange<Foundation.Date>, pauseTime: Foundation.Date? = nil, countsDown: Swift.Bool = true, showsHours: Swift.Bool = true)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.Text.DateStyle : Swift.Equatable {
  public static func == (a: SwiftUICore.Text.DateStyle, b: SwiftUICore.Text.DateStyle) -> Swift.Bool
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text.DateStyle : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color {
  public static let red: SwiftUICore.Color
  public static let orange: SwiftUICore.Color
  public static let yellow: SwiftUICore.Color
  public static let green: SwiftUICore.Color
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static let mint: SwiftUICore.Color
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static let teal: SwiftUICore.Color
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static let cyan: SwiftUICore.Color
  public static let blue: SwiftUICore.Color
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static let indigo: SwiftUICore.Color
  public static let purple: SwiftUICore.Color
  public static let pink: SwiftUICore.Color
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static let brown: SwiftUICore.Color
  public static let white: SwiftUICore.Color
  public static let gray: SwiftUICore.Color
  public static let black: SwiftUICore.Color
  public static let clear: SwiftUICore.Color
  public static let primary: SwiftUICore.Color
  public static let secondary: SwiftUICore.Color
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.Color {
  @_alwaysEmitIntoClient public static var red: SwiftUICore.Color {
    get { .red }
  }
  @_alwaysEmitIntoClient public static var orange: SwiftUICore.Color {
    get { .orange }
  }
  @_alwaysEmitIntoClient public static var yellow: SwiftUICore.Color {
    get { .yellow }
  }
  @_alwaysEmitIntoClient public static var green: SwiftUICore.Color {
    get { .green }
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_alwaysEmitIntoClient public static var mint: SwiftUICore.Color {
    get { .mint }
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_alwaysEmitIntoClient public static var teal: SwiftUICore.Color {
    get { .teal }
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_alwaysEmitIntoClient public static var cyan: SwiftUICore.Color {
    get { .cyan }
  }
  @_alwaysEmitIntoClient public static var blue: SwiftUICore.Color {
    get { .blue }
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_alwaysEmitIntoClient public static var indigo: SwiftUICore.Color {
    get { .indigo }
  }
  @_alwaysEmitIntoClient public static var purple: SwiftUICore.Color {
    get { .purple }
  }
  @_alwaysEmitIntoClient public static var pink: SwiftUICore.Color {
    get { .pink }
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_alwaysEmitIntoClient public static var brown: SwiftUICore.Color {
    get { .brown }
  }
  @_alwaysEmitIntoClient public static var white: SwiftUICore.Color {
    get { .white }
  }
  @_alwaysEmitIntoClient public static var gray: SwiftUICore.Color {
    get { .gray }
  }
  @_alwaysEmitIntoClient public static var black: SwiftUICore.Color {
    get { .black }
  }
  @_alwaysEmitIntoClient public static var clear: SwiftUICore.Color {
    get { .clear }
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  @_disfavoredOverload public init(_ attributedContent: Foundation.AttributedString)
}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes {
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var swiftUI: Foundation.AttributeScopes.SwiftUIAttributes.Type {
    get
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public struct SwiftUIAttributes : Foundation.AttributeScope {
    public let font: Foundation.AttributeScopes.SwiftUIAttributes.FontAttribute
    public let foregroundColor: Foundation.AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute
    public let backgroundColor: Foundation.AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute
    public let strikethroughStyle: Foundation.AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute
    public let underlineStyle: Foundation.AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute
    public let kern: Foundation.AttributeScopes.SwiftUIAttributes.KerningAttribute
    public let tracking: Foundation.AttributeScopes.SwiftUIAttributes.TrackingAttribute
    public let baselineOffset: Foundation.AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute
    @available(macOS 15.0, iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
    public let adaptiveImageGlyph: Foundation.AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute
    public let accessibility: Foundation.AttributeScopes.AccessibilityAttributes
    public let foundation: Foundation.AttributeScopes.FoundationAttributes
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias DecodingConfiguration = Foundation.AttributeScopeCodableConfiguration
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias EncodingConfiguration = Foundation.AttributeScopeCodableConfiguration
  }
}
@available(*, unavailable)
extension Foundation.AttributeScopes.SwiftUIAttributes : Swift.Sendable {
}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes {
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @frozen public enum FontAttribute : Foundation.AttributedStringKey {
    public typealias Value = SwiftUICore.Font
    public static let name: Swift.String
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @frozen public enum ForegroundColorAttribute : Foundation.AttributedStringKey {
    public typealias Value = SwiftUICore.Color
    public static let name: Swift.String
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @frozen public enum BackgroundColorAttribute : Foundation.AttributedStringKey {
    public typealias Value = SwiftUICore.Color
    public static let name: Swift.String
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @frozen public enum StrikethroughStyleAttribute : Foundation.AttributedStringKey {
    public typealias Value = SwiftUICore.Text.LineStyle
    public static let name: Swift.String
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @frozen public enum UnderlineStyleAttribute : Foundation.AttributedStringKey {
    public typealias Value = SwiftUICore.Text.LineStyle
    public static let name: Swift.String
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @frozen public enum KerningAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = CoreFoundation.CGFloat
    public static let name: Swift.String
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @frozen public enum TrackingAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = CoreFoundation.CGFloat
    public static let name: Swift.String
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @frozen public enum BaselineOffsetAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = CoreFoundation.CGFloat
    public static let name: Swift.String
  }
  @available(macOS 15.0, iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @frozen public enum AdaptiveImageGlyphAttribute : Foundation.AttributedStringKey {
    public typealias Value = Foundation.AttributedString.AdaptiveImageGlyph
    public static let name: Swift.String
    public static var inheritedByAddedText: Swift.Bool
    public static var runBoundaries: Foundation.AttributedString.AttributeRunBoundaries? {
      get
    }
  }
}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeDynamicLookup {
  public subscript<T>(dynamicMember keyPath: Swift.KeyPath<Foundation.AttributeScopes.SwiftUIAttributes, T>) -> T where T : Foundation.AttributedStringKey {
    get
  }
}
@available(iOS 17.0, macOS 10.15, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.SeparatorShapeStyle {
  @_alwaysEmitIntoClient public static var separator: SwiftUICore.SeparatorShapeStyle {
    get { .init() }
  }
}
@available(iOS 17.0, macOS 10.15, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct SeparatorShapeStyle : SwiftUICore.ShapeStyle {
  public init()
  nonisolated public static func _makeView<S>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<S, SwiftUICore.SeparatorShapeStyle>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where S : SwiftUICore.Shape
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 17.0, macOS 12.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.SeparatorShapeStyle {
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct GeometryReader<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  public var content: (SwiftUICore.GeometryProxy) -> Content
  @inlinable public init(@SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.GeometryProxy) -> Content) {
        self.content = content
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.GeometryReader<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.GeometryReader : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct GeometryProxy {
  public var size: CoreFoundation.CGSize {
    get
  }
  public subscript<T>(anchor: SwiftUICore.Anchor<T>) -> T {
    get
  }
  public var safeAreaInsets: SwiftUICore.EdgeInsets {
    get
  }
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @_disfavoredOverload public func frame(in coordinateSpace: SwiftUICore.CoordinateSpace) -> CoreFoundation.CGRect
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GeometryProxy {
  public func bounds(of coordinateSpace: SwiftUICore.NamedCoordinateSpace) -> CoreFoundation.CGRect?
  public func frame(in coordinateSpace: some CoordinateSpaceProtocol) -> CoreFoundation.CGRect
}
@available(*, unavailable)
extension SwiftUICore.GeometryProxy : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Transaction {
  public var isContinuous: Swift.Bool {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@propertyWrapper @preconcurrency @_Concurrency.MainActor @frozen public struct ObservedObject<ObjectType> : SwiftUICore.DynamicProperty where ObjectType : Combine.ObservableObject {
  @dynamicMemberLookup @preconcurrency @_Concurrency.MainActor @frozen public struct Wrapper {
    @_Concurrency.MainActor @preconcurrency internal let root: ObjectType
    @_Concurrency.MainActor @preconcurrency public subscript<Subject>(dynamicMember keyPath: Swift.ReferenceWritableKeyPath<ObjectType, Subject>) -> SwiftUICore.Binding<Subject> {
      get
    }
  }
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var _seed: Swift.Int = 0
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init(initialValue: ObjectType) {
      self.init(wrappedValue: initialValue)
    }
  @_Concurrency.MainActor @preconcurrency public init(wrappedValue: ObjectType)
  @_Concurrency.MainActor @preconcurrency public var wrappedValue: ObjectType
  @_Concurrency.MainActor @preconcurrency public var projectedValue: SwiftUICore.ObservedObject<ObjectType>.Wrapper {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ObservedObject {
  nonisolated public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ObservedObject {
  nonisolated public static var _propertyBehaviors: Swift.UInt32 {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func overlayPreferenceValue<K, V>(_ key: K.Type, alignment: SwiftUICore.Alignment = .center, @SwiftUICore.ViewBuilder _ transform: @escaping (K.Value) -> V) -> some SwiftUICore.View where K : SwiftUICore.PreferenceKey, V : SwiftUICore.View {
        return modifier(_OverlayPreferenceModifier<K, V>(
            alignment: alignment, transform: transform))
    }
  
  @inlinable nonisolated public func backgroundPreferenceValue<K, V>(_ key: K.Type, alignment: SwiftUICore.Alignment = .center, @SwiftUICore.ViewBuilder _ transform: @escaping (K.Value) -> V) -> some SwiftUICore.View where K : SwiftUICore.PreferenceKey, V : SwiftUICore.View {
        return modifier(_BackgroundPreferenceModifier<K, V>(
            alignment: alignment, transform: transform))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public func overlayPreferenceValue<K, V>(_v0: Swift.Void = (), _ key: K.Type, alignment: SwiftUICore.Alignment, @SwiftUICore.ViewBuilder _ transform: @escaping (K.Value) -> V) -> some SwiftUICore.View where K : SwiftUICore.PreferenceKey, V : SwiftUICore.View {
        K._delay { self.overlay($0._force(transform), alignment: alignment) }
    }
  
  @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public func backgroundPreferenceValue<K, V>(_v0: Swift.Void = (), _ key: K.Type, alignment: SwiftUICore.Alignment, @SwiftUICore.ViewBuilder _ transform: @escaping (K.Value) -> V) -> some SwiftUICore.View where K : SwiftUICore.PreferenceKey, V : SwiftUICore.View {
        K._delay { self.background($0._force(transform), alignment: alignment) }
    }
  
  @inlinable @_disfavoredOverload nonisolated public func overlayPreferenceValue<Key, T>(_ key: Key.Type = Key.self, @SwiftUICore.ViewBuilder _ transform: @escaping (Key.Value) -> T) -> some SwiftUICore.View where Key : SwiftUICore.PreferenceKey, T : SwiftUICore.View {
        return Key._delay { self.overlay($0._force(transform)) }
    }
  
  @inlinable @_disfavoredOverload nonisolated public func backgroundPreferenceValue<Key, T>(_ key: Key.Type = Key.self, @SwiftUICore.ViewBuilder _ transform: @escaping (Key.Value) -> T) -> some SwiftUICore.View where Key : SwiftUICore.PreferenceKey, T : SwiftUICore.View {
        return Key._delay { self.background($0._force(transform)) }
    }
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _OverlayPreferenceModifier<Key, Overlay> where Key : SwiftUICore.PreferenceKey, Overlay : SwiftUICore.View {
  public var transform: (Key.Value) -> Overlay
  public var alignment: SwiftUICore.Alignment
  @inlinable public init(alignment: SwiftUICore.Alignment, @SwiftUICore.ViewBuilder transform: @escaping (Key.Value) -> Overlay) {
        self.transform = transform
        self.alignment = alignment
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._OverlayPreferenceModifier<Key, Overlay>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._OverlayPreferenceModifier : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _BackgroundPreferenceModifier<Key, Overlay> where Key : SwiftUICore.PreferenceKey, Overlay : SwiftUICore.View {
  public var transform: (Key.Value) -> Overlay
  public var alignment: SwiftUICore.Alignment
  @inlinable public init(alignment: SwiftUICore.Alignment, @SwiftUICore.ViewBuilder transform: @escaping (Key.Value) -> Overlay) {
        self.transform = transform
        self.alignment = alignment
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._BackgroundPreferenceModifier<Key, Overlay>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._BackgroundPreferenceModifier : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct AnyLayout : SwiftUICore.Layout {
  internal var storage: SwiftUICore.AnyLayoutBox
  public init<L>(_ layout: L) where L : SwiftUICore.Layout
  public struct Cache {
  }
  public typealias AnimatableData = SwiftUICore._AnyAnimatableData
  public func makeCache(subviews: SwiftUICore.AnyLayout.Subviews) -> SwiftUICore.AnyLayout.Cache
  public func updateCache(_ cache: inout SwiftUICore.AnyLayout.Cache, subviews: SwiftUICore.AnyLayout.Subviews)
  public func spacing(subviews: SwiftUICore.AnyLayout.Subviews, cache: inout SwiftUICore.AnyLayout.Cache) -> SwiftUICore.ViewSpacing
  public func sizeThatFits(proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUICore.AnyLayout.Subviews, cache: inout SwiftUICore.AnyLayout.Cache) -> CoreFoundation.CGSize
  public func placeSubviews(in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUICore.AnyLayout.Subviews, cache: inout SwiftUICore.AnyLayout.Cache)
  public func explicitAlignment(of guide: SwiftUICore.HorizontalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUICore.AnyLayout.Subviews, cache: inout SwiftUICore.AnyLayout.Cache) -> CoreFoundation.CGFloat?
  public func explicitAlignment(of guide: SwiftUICore.VerticalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUICore.AnyLayout.Subviews, cache: inout SwiftUICore.AnyLayout.Cache) -> CoreFoundation.CGFloat?
  public var animatableData: SwiftUICore.AnyLayout.AnimatableData {
    get
    set
  }
}
@available(*, unavailable)
extension SwiftUICore.AnyLayout.Cache : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.AnyLayout : Swift.Sendable {
}
@_hasMissingDesignatedInitializers @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@usableFromInline
internal class AnyLayoutBox {
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUICore.AnyLayoutBox : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Animation {
  public func logicallyComplete(after duration: Foundation.TimeInterval) -> SwiftUICore.Animation
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func zIndex(_ value: Swift.Double) -> some SwiftUICore.View {
        return _trait(ZIndexTraitKey.self, value)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
package struct ZIndexTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable package static var defaultValue: Swift.Double {
    get { 0.0 }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  package typealias Value = Swift.Double
}
@available(*, unavailable)
extension SwiftUICore.ZIndexTraitKey : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol Layout : SwiftUICore.Animatable {
  static var layoutProperties: SwiftUICore.LayoutProperties { get }
  associatedtype Cache = Swift.Void
  typealias Subviews = SwiftUICore.LayoutSubviews
  func makeCache(subviews: Self.Subviews) -> Self.Cache
  func updateCache(_ cache: inout Self.Cache, subviews: Self.Subviews)
  func spacing(subviews: Self.Subviews, cache: inout Self.Cache) -> SwiftUICore.ViewSpacing
  func sizeThatFits(proposal: SwiftUICore.ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CoreFoundation.CGSize
  func placeSubviews(in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache)
  func explicitAlignment(of guide: SwiftUICore.HorizontalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CoreFoundation.CGFloat?
  func explicitAlignment(of guide: SwiftUICore.VerticalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CoreFoundation.CGFloat?
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  static func _makeLayoutView(root: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewOutputs
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Layout {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public static func _makeLayoutView(root: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewOutputs
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Layout {
  public static var layoutProperties: SwiftUICore.LayoutProperties {
    get
  }
  public func updateCache(_ cache: inout Self.Cache, subviews: Self.Subviews)
  public func explicitAlignment(of guide: SwiftUICore.HorizontalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CoreFoundation.CGFloat?
  public func explicitAlignment(of guide: SwiftUICore.VerticalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CoreFoundation.CGFloat?
  public func spacing(subviews: Self.Subviews, cache: inout Self.Cache) -> SwiftUICore.ViewSpacing
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.Layout where Self.Cache == () {
  public func makeCache(subviews: Self.Subviews) -> Self.Cache
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct LayoutProperties : Swift.Sendable {
  public init()
  public var stackOrientation: SwiftUICore.Axis?
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct ProposedViewSize : Swift.Equatable {
  public var width: CoreFoundation.CGFloat?
  public var height: CoreFoundation.CGFloat?
  public static let zero: SwiftUICore.ProposedViewSize
  public static let unspecified: SwiftUICore.ProposedViewSize
  public static let infinity: SwiftUICore.ProposedViewSize
  @inlinable public init(width: CoreFoundation.CGFloat?, height: CoreFoundation.CGFloat?) {
        (self.width, self.height) = (width, height)
    }
  @inlinable public init(_ size: CoreFoundation.CGSize) {
        self.init(width: size.width, height: size.height)
    }
  @inlinable public func replacingUnspecifiedDimensions(by size: CoreFoundation.CGSize = CGSize(width: 10, height: 10)) -> CoreFoundation.CGSize {
        return CGSize(width: width ?? size.width,
            height: height ?? size.height)
    }
  public static func == (a: SwiftUICore.ProposedViewSize, b: SwiftUICore.ProposedViewSize) -> Swift.Bool
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct ViewSpacing : Swift.Sendable {
  public static let zero: SwiftUICore.ViewSpacing
  public init()
  public mutating func formUnion(_ other: SwiftUICore.ViewSpacing, edges: SwiftUICore.Edge.Set = .all)
  public func union(_ other: SwiftUICore.ViewSpacing, edges: SwiftUICore.Edge.Set = .all) -> SwiftUICore.ViewSpacing
  public func distance(to next: SwiftUICore.ViewSpacing, along axis: SwiftUICore.Axis) -> CoreFoundation.CGFloat
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct LayoutSubviews : Swift.Equatable, Swift.RandomAccessCollection, Swift.Sendable {
  public typealias SubSequence = SwiftUICore.LayoutSubviews
  public typealias Element = SwiftUICore.LayoutSubview
  public typealias Index = Swift.Int
  public var layoutDirection: SwiftUICore.LayoutDirection
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(index: Swift.Int) -> SwiftUICore.LayoutSubviews.Element {
    get
  }
  public subscript(bounds: Swift.Range<Swift.Int>) -> SwiftUICore.LayoutSubviews {
    get
  }
  public subscript<S>(indices: S) -> SwiftUICore.LayoutSubviews where S : Swift.Sequence, S.Element == Swift.Int {
    get
  }
  public static func == (lhs: SwiftUICore.LayoutSubviews, rhs: SwiftUICore.LayoutSubviews) -> Swift.Bool
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Indices = Swift.Range<SwiftUICore.LayoutSubviews.Index>
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Iterator = Swift.IndexingIterator<SwiftUICore.LayoutSubviews>
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct LayoutSubview : Swift.Equatable {
  public func _trait<K>(key: K.Type) -> K.Value where K : SwiftUICore._ViewTraitKey
  public subscript<K>(key: K.Type) -> K.Value where K : SwiftUICore.LayoutValueKey {
    get
  }
  public var priority: Swift.Double {
    get
  }
  public func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
  public func dimensions(in proposal: SwiftUICore.ProposedViewSize) -> SwiftUICore.ViewDimensions
  public var spacing: SwiftUICore.ViewSpacing {
    get
  }
  public func place(at position: CoreFoundation.CGPoint, anchor: SwiftUICore.UnitPoint = .topLeading, proposal: SwiftUICore.ProposedViewSize)
  public static func == (a: SwiftUICore.LayoutSubview, b: SwiftUICore.LayoutSubview) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore.LayoutSubview : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol LayoutValueKey {
  associatedtype Value
  static var defaultValue: Self.Value { get }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func layoutValue<K>(key: K.Type, value: K.Value) -> some SwiftUICore.View where K : SwiftUICore.LayoutValueKey {
        return _trait(_LayoutTrait<K>.self, value)
    }
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _LayoutTrait<K> : SwiftUICore._ViewTraitKey where K : SwiftUICore.LayoutValueKey {
  public static var defaultValue: K.Value {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Value = K.Value
}
@available(*, unavailable)
extension SwiftUICore._LayoutTrait : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Layout {
  @_alwaysEmitIntoClient @_disfavoredOverload public func callAsFunction<V>(@SwiftUICore.ViewBuilder _ content: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View {
        return _VariadicView.Tree(_LayoutRoot(self)) { content() }
    }
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _LayoutRoot<L> : SwiftUICore._VariadicView.UnaryViewRoot where L : SwiftUICore.Layout {
  @usableFromInline
  internal var layout: L
  @inlinable package init(_ layout: L) { self.layout = layout }
  nonisolated public static func _makeView(root: SwiftUICore._GraphValue<SwiftUICore._LayoutRoot<L>>, inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._LayoutRoot : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _IdentifiedViewProxy {
  public var identifier: Swift.AnyHashable
  public var boundingRect: CoreFoundation.CGRect {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore._IdentifiedViewProxy : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BenchmarkHost {
  public func viewForIdentifier<I, V>(_ identifier: I, _ type: V.Type) -> V? where I : Swift.Hashable, V : SwiftUICore.View
  public func stateForIdentifier<I, S, V>(_ id: I, type stateType: S.Type, in viewType: V.Type) -> SwiftUICore.Binding<S>? where I : Swift.Hashable, V : SwiftUICore.View
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  public static func + (lhs: SwiftUICore.Text, rhs: SwiftUICore.Text) -> SwiftUICore.Text
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnyTransition {
  public static var slide: SwiftUICore.AnyTransition {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Transition where Self == SwiftUICore.SlideTransition {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var slide: SwiftUICore.SlideTransition {
    get { Self() }
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_Concurrency.MainActor @preconcurrency public struct SlideTransition : SwiftUICore.Transition {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func body(content: SwiftUICore.SlideTransition.Content, phase: SwiftUICore.TransitionPhase) -> some SwiftUICore.View
  
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15SlideTransitionV4body7content5phaseQrAA22PlaceholderContentViewVyACG_AA0D5PhaseOtF", 0) __
}
@available(*, unavailable)
extension SwiftUICore.SlideTransition : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  public enum TruncationMode : Swift.Sendable {
    case head
    case tail
    case middle
    public static func == (a: SwiftUICore.Text.TruncationMode, b: SwiftUICore.Text.TruncationMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public enum Case : Swift.Sendable {
    case uppercase
    case lowercase
    public static func == (a: SwiftUICore.Text.Case, b: SwiftUICore.Text.Case) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var multilineTextAlignment: SwiftUICore.TextAlignment {
    get
    set
  }
  public var truncationMode: SwiftUICore.Text.TruncationMode {
    get
    set
  }
  public var lineSpacing: CoreFoundation.CGFloat {
    get
    set
  }
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public var _lineHeightMultiple: CoreFoundation.CGFloat {
    get
    set
  }
  public var allowsTightening: Swift.Bool {
    get
    set
  }
  public var minimumScaleFactor: CoreFoundation.CGFloat {
    get
    set
  }
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public var textCase: SwiftUICore.Text.Case? {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func multilineTextAlignment(_ alignment: SwiftUICore.TextAlignment) -> some SwiftUICore.View {
        return environment(\.multilineTextAlignment, alignment)
    }
  
  @inlinable nonisolated public func truncationMode(_ mode: SwiftUICore.Text.TruncationMode) -> some SwiftUICore.View {
        return environment(\.truncationMode, mode)
    }
  
  @inlinable nonisolated public func lineSpacing(_ lineSpacing: CoreFoundation.CGFloat) -> some SwiftUICore.View {
        return environment(\.lineSpacing, lineSpacing)
    }
  
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @usableFromInline
  @available(*, deprecated, renamed: "lineHeightMultiple")
  @_Concurrency.MainActor @preconcurrency internal func _lineHeightMultiple(_ multiple: CoreFoundation.CGFloat) -> some SwiftUICore.View
  
  @inlinable nonisolated public func allowsTightening(_ flag: Swift.Bool) -> some SwiftUICore.View {
        return environment(\.allowsTightening, flag)
    }
  
  @inlinable nonisolated public func minimumScaleFactor(_ factor: CoreFoundation.CGFloat) -> some SwiftUICore.View {
        return environment(\.minimumScaleFactor, factor)
    }
  
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @inlinable nonisolated public func textCase(_ textCase: SwiftUICore.Text.Case?) -> some SwiftUICore.View {
        environment(\.textCase, textCase)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image {
  public init(_ cgImage: CoreGraphics.CGImage, scale: CoreFoundation.CGFloat, orientation: SwiftUICore.Image.Orientation = .up, label: SwiftUICore.Text)
  public init(decorative cgImage: CoreGraphics.CGImage, scale: CoreFoundation.CGFloat, orientation: SwiftUICore.Image.Orientation = .up)
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct ShadowStyle : Swift.Equatable, Swift.Sendable {
  public static func drop(color: SwiftUICore.Color = .init(.sRGBLinear, white: 0, opacity: 0.33), radius: CoreFoundation.CGFloat, x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0) -> SwiftUICore.ShadowStyle
  public static func inner(color: SwiftUICore.Color = .init(.sRGBLinear, white: 0, opacity: 0.55), radius: CoreFoundation.CGFloat, x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0) -> SwiftUICore.ShadowStyle
  public static func == (a: SwiftUICore.ShadowStyle, b: SwiftUICore.ShadowStyle) -> Swift.Bool
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle {
  @inlinable public func shadow(_ style: SwiftUICore.ShadowStyle) -> some SwiftUICore.ShapeStyle {
        return _ShadowShapeStyle(style: self, shadowStyle: style)
    }
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.AnyShapeStyle {
  @_alwaysEmitIntoClient public static func shadow(_ style: SwiftUICore.ShadowStyle) -> some SwiftUICore.ShapeStyle {
        return _ShadowShapeStyle(
            style: _ImplicitShapeStyle(), shadowStyle: style)
    }
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _ShadowShapeStyle<Style> : SwiftUICore.ShapeStyle where Style : SwiftUICore.ShapeStyle {
  @usableFromInline
  internal var style: Style
  @usableFromInline
  internal var shadowStyle: SwiftUICore.ShadowStyle
  @inlinable internal init(style: Style, shadowStyle: SwiftUICore.ShadowStyle) {
        self.style = style
        self.shadowStyle = shadowStyle
    }
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _AnchoredShapeStyle<S> : SwiftUICore.ShapeStyle where S : SwiftUICore.ShapeStyle {
  public var style: S
  public var bounds: CoreFoundation.CGRect
  @inlinable internal init(style: S, bounds: CoreFoundation.CGRect) {
        self.style = style
        self.bounds = bounds
    }
  nonisolated public static func _makeView<T>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<T, SwiftUICore._AnchoredShapeStyle<S>>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where T : SwiftUICore.Shape
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._AnchoredShapeStyle {
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle {
  @inlinable public func `in`(_ rect: CoreFoundation.CGRect) -> some SwiftUICore.ShapeStyle {
        return _AnchoredShapeStyle(style: self, bounds: rect)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct StrokeStyle : Swift.Equatable {
  public var lineWidth: CoreFoundation.CGFloat
  public var lineCap: CoreGraphics.CGLineCap
  public var lineJoin: CoreGraphics.CGLineJoin
  public var miterLimit: CoreFoundation.CGFloat
  public var dash: [CoreFoundation.CGFloat]
  public var dashPhase: CoreFoundation.CGFloat
  public init(lineWidth: CoreFoundation.CGFloat = 1, lineCap: CoreGraphics.CGLineCap = .butt, lineJoin: CoreGraphics.CGLineJoin = .miter, miterLimit: CoreFoundation.CGFloat = 10, dash: [CoreFoundation.CGFloat] = [CGFloat](), dashPhase: CoreFoundation.CGFloat = 0)
  public static func == (a: SwiftUICore.StrokeStyle, b: SwiftUICore.StrokeStyle) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.StrokeStyle : SwiftUICore.Animatable {
  public typealias AnimatableData = SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>>
  public var animatableData: SwiftUICore.StrokeStyle.AnimatableData {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image {
  public func renderingMode(_ renderingMode: SwiftUICore.Image.TemplateRenderingMode?) -> SwiftUICore.Image
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct TypesettingLanguage : Swift.Sendable, Swift.Equatable {
  public static let automatic: SwiftUICore.TypesettingLanguage
  public static func explicit(_ language: Foundation.Locale.Language) -> SwiftUICore.TypesettingLanguage
  public static func == (a: SwiftUICore.TypesettingLanguage, b: SwiftUICore.TypesettingLanguage) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func typesettingLanguage(_ language: Foundation.Locale.Language, isEnabled: Swift.Bool = true) -> some SwiftUICore.View
  
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func typesettingLanguage(_ language: SwiftUICore.TypesettingLanguage, isEnabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func typesettingLanguage(_ language: Foundation.Locale.Language, isEnabled: Swift.Bool = true) -> SwiftUICore.Text
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func typesettingLanguage(_ language: SwiftUICore.TypesettingLanguage, isEnabled: Swift.Bool = true) -> SwiftUICore.Text
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Transaction {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public var scrollTargetAnchor: SwiftUICore.UnitPoint? {
    get
    set
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Transaction {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public var scrollPositionUpdatePreservesVelocity: Swift.Bool {
    get
    set
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.2)
public struct ScrollContentOffsetAdjustmentBehavior {
  public static var automatic: SwiftUICore.ScrollContentOffsetAdjustmentBehavior {
    get
  }
  public static var disabled: SwiftUICore.ScrollContentOffsetAdjustmentBehavior {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore.ScrollContentOffsetAdjustmentBehavior : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.2)
extension SwiftUICore.Transaction {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public var scrollContentOffsetAdjustmentBehavior: SwiftUICore.ScrollContentOffsetAdjustmentBehavior {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @inlinable nonisolated public func lineLimit(_ number: Swift.Int?) -> some SwiftUICore.View {
        environment(\.lineLimit, number)
    }
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func lineLimit(_ limit: Swift.PartialRangeFrom<Swift.Int>) -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func lineLimit(_ limit: Swift.PartialRangeThrough<Swift.Int>) -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func lineLimit(_ limit: Swift.ClosedRange<Swift.Int>) -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func lineLimit(_ limit: Swift.Int, reservesSpace: Swift.Bool) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  public var lineLimit: Swift.Int? {
    get
    set
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct BackgroundProminence : Swift.Hashable, Swift.Sendable {
  public static let standard: SwiftUICore.BackgroundProminence
  public static let increased: SwiftUICore.BackgroundProminence
  public static func == (a: SwiftUICore.BackgroundProminence, b: SwiftUICore.BackgroundProminence) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var backgroundProminence: SwiftUICore.BackgroundProminence {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image {
  public static let _mainNamedBundle: Foundation.Bundle?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image {
  public init(_ name: Swift.String, bundle: Foundation.Bundle? = nil)
  public init(_ name: Swift.String, bundle: Foundation.Bundle? = nil, label: SwiftUICore.Text)
  public init(decorative name: Swift.String, bundle: Foundation.Bundle? = nil)
  @available(macOS 11.0, *)
  public init(systemName: Swift.String)
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public init(_internalSystemName systemName: Swift.String)
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image {
  public init(systemName: Swift.String, variableValue: Swift.Double?)
  public init(_internalSystemName systemName: Swift.String, variableValue: Swift.Double?)
  public init(_ name: Swift.String, variableValue: Swift.Double?, bundle: Foundation.Bundle? = nil)
  public init(_ name: Swift.String, variableValue: Swift.Double?, bundle: Foundation.Bundle? = nil, label: SwiftUICore.Text)
  public init(decorative name: Swift.String, variableValue: Swift.Double?, bundle: Foundation.Bundle? = nil)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image {
  @available(*, deprecated, message: "Use .renderingMode(.original)")
  public init(_systemName systemName: Swift.String, colorPalette: [SwiftUICore.Color]? = nil)
  @available(*, deprecated, message: "Use .renderingMode(.original)")
  public init(_internalSystemName systemName: Swift.String, colorPalette: [SwiftUICore.Color]? = nil)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image {
  public init(_ resource: DeveloperToolsSupport.ImageResource)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol VectorArithmetic : Swift.AdditiveArithmetic {
  mutating func scale(by rhs: Swift.Double)
  var magnitudeSquared: Swift.Double { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.VectorArithmetic {
  @_alwaysEmitIntoClient public func scaled(by rhs: Swift.Double) -> Self {
        var result = self
        result.scale(by: rhs)
        return result
    }
  @_alwaysEmitIntoClient public mutating func interpolate(towards other: Self, amount: Swift.Double) {
         
        var result = other
        result -= self
        result.scale(by: amount)
        result += self
        self = result
    }
  @_alwaysEmitIntoClient public func interpolated(towards other: Self, amount: Swift.Double) -> Self {
        var result = self
        result.interpolate(towards: other, amount: amount)
        return result
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Float : SwiftUICore.VectorArithmetic {
  @_transparent public mutating func scale(by rhs: Swift.Double) { self *= Float(rhs) }
  @_transparent public var magnitudeSquared: Swift.Double {
    @_transparent get { return Double(self * self) }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Double : SwiftUICore.VectorArithmetic {
  @_transparent public mutating func scale(by rhs: Swift.Double) { self *= rhs }
  @_transparent public var magnitudeSquared: Swift.Double {
    @_transparent get { return self * self }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension CoreFoundation.CGFloat : SwiftUICore.VectorArithmetic {
  @_transparent public mutating func scale(by rhs: Swift.Double) { self *= CGFloat(rhs) }
  @_transparent public var magnitudeSquared: Swift.Double {
    @_transparent get { return Double(self * self) }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _ViewListInputs {
}
@available(*, unavailable)
extension SwiftUICore._ViewListInputs : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _ViewListCountInputs {
}
@available(*, unavailable)
extension SwiftUICore._ViewListCountInputs : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _ViewListOutputs {
}
@available(*, unavailable)
extension SwiftUICore._ViewListOutputs : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.2)
extension SwiftUICore.ForEach {
  public init<V>(subviews view: V, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Subview) -> Content) where Data == SwiftUICore.ForEachSubviewCollection<Content>, ID == SwiftUICore.Subview.ID, Content : SwiftUICore.View, V : SwiftUICore.View
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.2)
public struct ForEachSubviewCollection<Content> : Swift.RandomAccessCollection where Content : SwiftUICore.View {
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(index: Swift.Int) -> SwiftUICore.Subview {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Element = SwiftUICore.Subview
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Index = Swift.Int
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Indices = Swift.Range<Swift.Int>
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Iterator = Swift.IndexingIterator<SwiftUICore.ForEachSubviewCollection<Content>>
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias SubSequence = Swift.Slice<SwiftUICore.ForEachSubviewCollection<Content>>
}
@available(*, unavailable)
extension SwiftUICore.ForEachSubviewCollection : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.BackgroundStyle {
  @_alwaysEmitIntoClient public static var background: SwiftUICore.BackgroundStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct BackgroundStyle : SwiftUICore.ShapeStyle {
  @inlinable public init() {}
  nonisolated public static func _makeView<S>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<S, SwiftUICore.BackgroundStyle>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where S : SwiftUICore.Shape
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func _addingBackgroundGroup() -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func _addingBackgroundLayer() -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @inlinable nonisolated public func backgroundStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
        return modifier(_EnvironmentBackgroundStyleModifier(style: style))
    }
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var backgroundStyle: SwiftUICore.AnyShapeStyle? {
    get
    set
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _EnvironmentBackgroundStyleModifier<S> where S : SwiftUICore.ShapeStyle {
  @usableFromInline
  internal var style: S
  @inlinable internal init(style: S) { self.style = style }
  nonisolated public static func _makeViewInputs(modifier: SwiftUICore._GraphValue<SwiftUICore._EnvironmentBackgroundStyleModifier<S>>, inputs: inout SwiftUICore._ViewInputs)
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUICore._EnvironmentBackgroundStyleModifier<S>>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._EnvironmentBackgroundStyleModifier : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func foregroundStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
        modifier(_ForegroundStyleModifier(style: style))
    }
  
  @inlinable nonisolated public func foregroundStyle<S1, S2>(_ primary: S1, _ secondary: S2) -> some SwiftUICore.View where S1 : SwiftUICore.ShapeStyle, S2 : SwiftUICore.ShapeStyle {
        modifier(_ForegroundStyleModifier2(
            primary: primary, secondary: secondary))
    }
  
  @inlinable nonisolated public func foregroundStyle<S1, S2, S3>(_ primary: S1, _ secondary: S2, _ tertiary: S3) -> some SwiftUICore.View where S1 : SwiftUICore.ShapeStyle, S2 : SwiftUICore.ShapeStyle, S3 : SwiftUICore.ShapeStyle {
        modifier(_ForegroundStyleModifier3(
            primary: primary, secondary: secondary, tertiary: tertiary))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _ForegroundStyleModifier<Style> where Style : SwiftUICore.ShapeStyle {
  public var style: Style
  @inlinable public init(style: Style) {
        self.style = style
    }
  nonisolated public static func _makeViewInputs(modifier: SwiftUICore._GraphValue<SwiftUICore._ForegroundStyleModifier<Style>>, inputs: inout SwiftUICore._ViewInputs)
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._ForegroundStyleModifier : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _ForegroundStyleModifier2<S1, S2> where S1 : SwiftUICore.ShapeStyle, S2 : SwiftUICore.ShapeStyle {
  public var primary: S1
  public var secondary: S2
  @inlinable public init(primary: S1, secondary: S2) {
        self.primary = primary
        self.secondary = secondary
    }
  nonisolated public static func _makeViewInputs(modifier: SwiftUICore._GraphValue<SwiftUICore._ForegroundStyleModifier2<S1, S2>>, inputs: inout SwiftUICore._ViewInputs)
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._ForegroundStyleModifier2 : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _ForegroundStyleModifier3<S1, S2, S3> where S1 : SwiftUICore.ShapeStyle, S2 : SwiftUICore.ShapeStyle, S3 : SwiftUICore.ShapeStyle {
  public var primary: S1
  public var secondary: S2
  public var tertiary: S3
  @inlinable public init(primary: S1, secondary: S2, tertiary: S3) {
        self.primary = primary
        self.secondary = secondary
        self.tertiary = tertiary
    }
  nonisolated public static func _makeViewInputs(modifier: SwiftUICore._GraphValue<SwiftUICore._ForegroundStyleModifier3<S1, S2, S3>>, inputs: inout SwiftUICore._ViewInputs)
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._ForegroundStyleModifier3 : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.ForegroundStyle {
  @_alwaysEmitIntoClient public static var foreground: SwiftUICore.ForegroundStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct ForegroundStyle : SwiftUICore.ShapeStyle {
  @inlinable public init() {}
  nonisolated public static func _makeView<S>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<S, SwiftUICore.ForegroundStyle>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where S : SwiftUICore.Shape
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ForegroundStyle {
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _ImplicitShapeStyle : SwiftUICore.ShapeStyle {
  @inlinable internal init() {}
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol ShapeStyle : Swift.Sendable {
  @available(*, deprecated, message: "obsolete")
  static func _makeView<S>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<S, Self>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where S : SwiftUICore.Shape
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_weakLinked associatedtype Resolved : SwiftUICore.ShapeStyle = Swift.Never
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  func resolve(in environment: SwiftUICore.EnvironmentValues) -> Self.Resolved
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Never : SwiftUICore.ShapeStyle {
  public typealias Resolved = Swift.Never
  nonisolated public static func _makeView<S>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<S, Swift.Never>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where S : SwiftUICore.Shape
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self.Resolved == Swift.Never {
  public func resolve(in environment: SwiftUICore.EnvironmentValues) -> Swift.Never
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle {
  nonisolated public static func _makeView<S>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<S, Self>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where S : SwiftUICore.Shape
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _ShapeStyle_Shape {
}
@available(*, unavailable)
extension SwiftUICore._ShapeStyle_Shape : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _ShapeStyle_ShapeType {
}
@available(*, unavailable)
extension SwiftUICore._ShapeStyle_ShapeType : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol Shape : Swift.Sendable, SwiftUICore.Animatable, SwiftUICore.View, SwiftUICore._RemoveGlobalActorIsolation {
  nonisolated func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated static var role: SwiftUICore.ShapeRole { get }
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior { get }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape {
  nonisolated public func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum ShapeRole : Swift.Sendable {
  case fill
  case stroke
  case separator
  public static func == (a: SwiftUICore.ShapeRole, b: SwiftUICore.ShapeRole) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static var role: SwiftUICore.ShapeRole {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape {
  public var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _StrokedShape<S> : SwiftUICore.Shape where S : SwiftUICore.Shape {
  public var shape: S
  public var style: SwiftUICore.StrokeStyle
  @inlinable public init(shape: S, style: SwiftUICore.StrokeStyle) {
        self.shape = shape
        self.style = style
    }
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public static var role: SwiftUICore.ShapeRole {
    get
  }
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
    get
  }
  public typealias AnimatableData = SwiftUICore.AnimatablePair<S.AnimatableData, SwiftUICore.StrokeStyle.AnimatableData>
  public var animatableData: SwiftUICore._StrokedShape<S>.AnimatableData {
    get
    set
  }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore._StrokedShape<S>, SwiftUICore.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape {
  @inlinable nonisolated public func stroke(style: SwiftUICore.StrokeStyle) -> some SwiftUICore.Shape {
        return _StrokedShape(shape: self, style: style)
    }
  
  @inlinable nonisolated public func stroke(lineWidth: CoreFoundation.CGFloat = 1) -> some SwiftUICore.Shape {
        return stroke(style: StrokeStyle(lineWidth: lineWidth))
    }
  
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_documentation(visibility: private) open class AnyLocationBase {
  @objc deinit
}
@available(*, unavailable)
extension SwiftUICore.AnyLocationBase : Swift.Sendable {
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_documentation(visibility: private) open class AnyLocation<Value> : SwiftUICore.AnyLocationBase, @unchecked Swift.Sendable {
  @objc deinit
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnyLocation : Swift.Equatable {
  public static func == (lhs: SwiftUICore.AnyLocation<Value>, rhs: SwiftUICore.AnyLocation<Value>) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore.AnyLocation : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct UnitPoint : Swift.Hashable {
  public var x: CoreFoundation.CGFloat
  public var y: CoreFoundation.CGFloat
  @inlinable public init() {
        self.init(x: 0, y: 0)
    }
  @inlinable public init(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) {
        self.x = x
        self.y = y
    }
  public static let zero: SwiftUICore.UnitPoint
  public static let center: SwiftUICore.UnitPoint
  public static let leading: SwiftUICore.UnitPoint
  public static let trailing: SwiftUICore.UnitPoint
  public static let top: SwiftUICore.UnitPoint
  public static let bottom: SwiftUICore.UnitPoint
  public static let topLeading: SwiftUICore.UnitPoint
  public static let topTrailing: SwiftUICore.UnitPoint
  public static let bottomLeading: SwiftUICore.UnitPoint
  public static let bottomTrailing: SwiftUICore.UnitPoint
  public static func == (a: SwiftUICore.UnitPoint, b: SwiftUICore.UnitPoint) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.UnitPoint : SwiftUICore.Animatable {
  public typealias AnimatableData = SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>
  public var animatableData: SwiftUICore.UnitPoint.AnimatableData {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _PreferenceTransformModifier<Key> : SwiftUICore.ViewModifier where Key : SwiftUICore.PreferenceKey {
  public var transform: (inout Key.Value) -> Swift.Void
  public typealias Body = Swift.Never
  @inlinable public init(key _: Key.Type = Key.self, transform: @escaping (inout Key.Value) -> Swift.Void) {
        self.transform = transform
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._PreferenceTransformModifier<Key>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
}
@available(*, unavailable)
extension SwiftUICore._PreferenceTransformModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func transformPreference<K>(_ key: K.Type = K.self, _ callback: @escaping (inout K.Value) -> Swift.Void) -> some SwiftUICore.View where K : SwiftUICore.PreferenceKey {
        return modifier(_PreferenceTransformModifier<K>(transform: callback))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _ViewOutputs {
}
@available(*, unavailable)
extension SwiftUICore._ViewOutputs : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _PreferenceWritingModifier<Key> : SwiftUICore.ViewModifier where Key : SwiftUICore.PreferenceKey {
  public var value: Key.Value
  public typealias Body = Swift.Never
  @inlinable public init(key: Key.Type = Key.self, value: Key.Value) {
        self.value = value
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._PreferenceWritingModifier<Key>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUICore._PreferenceWritingModifier<Key>>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
}
@available(*, unavailable)
extension SwiftUICore._PreferenceWritingModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._PreferenceWritingModifier : Swift.Equatable where Key.Value : Swift.Equatable {
  public static func == (a: SwiftUICore._PreferenceWritingModifier<Key>, b: SwiftUICore._PreferenceWritingModifier<Key>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func preference<K>(key: K.Type = K.self, value: K.Value) -> some SwiftUICore.View where K : SwiftUICore.PreferenceKey {
        return modifier(_PreferenceWritingModifier<K>(value: value))
    }
  
}
@available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package struct PreviewColorSchemeTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable package static var defaultValue: SwiftUICore.ColorScheme? {
    get { nil }
  }
  @available(iOS 14.5, tvOS 14.5, watchOS 7.4, macOS 11.3, *)
  @usableFromInline
  package typealias Value = SwiftUICore.ColorScheme?
}
@available(*, unavailable)
extension SwiftUICore.PreviewColorSchemeTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _LuminanceToAlphaEffect : Swift.Equatable {
  @inlinable nonisolated public init() {}
  nonisolated public static func == (a: SwiftUICore._LuminanceToAlphaEffect, b: SwiftUICore._LuminanceToAlphaEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func luminanceToAlpha() -> some SwiftUICore.View {
        return modifier(_LuminanceToAlphaEffect())
    }
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.2)
public protocol ContainerValueKey {
  associatedtype Value
  static var defaultValue: Self.Value { get }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct AnyShape : SwiftUICore.Shape, @unchecked Swift.Sendable {
  internal var storage: SwiftUICore.AnyShapeBox
  public init<S>(_ shape: S) where S : SwiftUICore.Shape
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  nonisolated public func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
  public typealias AnimatableData = SwiftUICore._AnyAnimatableData
  public var animatableData: SwiftUICore.AnyShape.AnimatableData {
    get
    set
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.AnyShape, SwiftUICore.ForegroundStyle>
}
@_hasMissingDesignatedInitializers @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
internal class AnyShapeBox {
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUICore.AnyShapeBox : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Gesture {
  @_Concurrency.MainActor @preconcurrency public func map<T>(_ body: @escaping (Self.Value) -> T) -> SwiftUICore._MapGesture<Self, T>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_Concurrency.MainActor @preconcurrency public struct _MapGesture<Content, Value> where Content : SwiftUICore.Gesture {
  nonisolated public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUICore._MapGesture<Content, Value>>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Value>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._MapGesture : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct AnyGesture<Value> : SwiftUICore.Gesture {
  fileprivate var storage: SwiftUICore.AnyGestureStorageBase<Value>
  public init<T>(_ gesture: T) where Value == T.Value, T : SwiftUICore.Gesture
  nonisolated public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUICore.AnyGesture<Value>>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Value>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.AnyGesture : Swift.Sendable {
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
internal class AnyGestureStorageBase<Value> {
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUICore.AnyGestureStorageBase : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct Path : Swift.Equatable, Swift.LosslessStringConvertible, @unchecked Swift.Sendable {
  @_hasMissingDesignatedInitializers @usableFromInline
  final package class PathBox : Swift.Equatable {
    @objc @usableFromInline
    deinit
    @usableFromInline
    package static func == (lhs: SwiftUICore.Path.PathBox, rhs: SwiftUICore.Path.PathBox) -> Swift.Bool
  }
  @usableFromInline
  @frozen package enum Storage : Swift.Equatable {
    case empty
    case rect(CoreFoundation.CGRect)
    case ellipse(CoreFoundation.CGRect)
    indirect case roundedRect(SwiftUICore.FixedRoundedRect)
    @available(*, deprecated, message: "obsolete")
    indirect case stroked(SwiftUICore.StrokedPath)
    @available(*, deprecated, message: "obsolete")
    indirect case trimmed(SwiftUICore.TrimmedPath)
    case path(SwiftUICore.Path.PathBox)
    @usableFromInline
    package static func == (a: SwiftUICore.Path.Storage, b: SwiftUICore.Path.Storage) -> Swift.Bool
  }
  package var storage: SwiftUICore.Path.Storage
  public init()
  public init(_ path: CoreGraphics.CGPath)
  public init(_ path: CoreGraphics.CGMutablePath)
  public init(_ rect: CoreFoundation.CGRect)
  public init(roundedRect rect: CoreFoundation.CGRect, cornerSize: CoreFoundation.CGSize, style: SwiftUICore.RoundedCornerStyle = .continuous)
  public init(roundedRect rect: CoreFoundation.CGRect, cornerRadius: CoreFoundation.CGFloat, style: SwiftUICore.RoundedCornerStyle = .continuous)
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public init(roundedRect rect: CoreFoundation.CGRect, cornerRadii: SwiftUICore.RectangleCornerRadii, style: SwiftUICore.RoundedCornerStyle = .continuous)
  public init(ellipseIn rect: CoreFoundation.CGRect)
  public init(_ callback: (inout SwiftUICore.Path) -> ())
  public init?(_ string: Swift.String)
  public var description: Swift.String {
    get
  }
  public var cgPath: CoreGraphics.CGPath {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public var boundingRect: CoreFoundation.CGRect {
    get
  }
  public func contains(_ p: CoreFoundation.CGPoint, eoFill: Swift.Bool = false) -> Swift.Bool
  @frozen public enum Element : Swift.Equatable {
    case move(to: CoreFoundation.CGPoint)
    case line(to: CoreFoundation.CGPoint)
    case quadCurve(to: CoreFoundation.CGPoint, control: CoreFoundation.CGPoint)
    case curve(to: CoreFoundation.CGPoint, control1: CoreFoundation.CGPoint, control2: CoreFoundation.CGPoint)
    case closeSubpath
    public static func == (a: SwiftUICore.Path.Element, b: SwiftUICore.Path.Element) -> Swift.Bool
  }
  public func forEach(_ body: (SwiftUICore.Path.Element) -> Swift.Void)
  public func strokedPath(_ style: SwiftUICore.StrokeStyle) -> SwiftUICore.Path
  public func trimmedPath(from: CoreFoundation.CGFloat, to: CoreFoundation.CGFloat) -> SwiftUICore.Path
  public static func == (a: SwiftUICore.Path, b: SwiftUICore.Path) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore.Path.Storage : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.Path.PathBox : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Path : SwiftUICore.Shape {
  nonisolated public func path(in _: CoreFoundation.CGRect) -> SwiftUICore.Path
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.Path, SwiftUICore.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(*, deprecated, message: "obsolete")
@usableFromInline
package struct StrokedPath : Swift.Equatable {
  public init(path: SwiftUICore.Path, style: SwiftUICore.StrokeStyle)
  @usableFromInline
  package static func == (a: SwiftUICore.StrokedPath, b: SwiftUICore.StrokedPath) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore.StrokedPath : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(*, deprecated, message: "obsolete")
@usableFromInline
package struct TrimmedPath : Swift.Equatable {
  @usableFromInline
  package static func == (a: SwiftUICore.TrimmedPath, b: SwiftUICore.TrimmedPath) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore.TrimmedPath : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Path {
  public mutating func move(to end: CoreFoundation.CGPoint)
  public mutating func addLine(to end: CoreFoundation.CGPoint)
  public mutating func addQuadCurve(to end: CoreFoundation.CGPoint, control: CoreFoundation.CGPoint)
  public mutating func addCurve(to end: CoreFoundation.CGPoint, control1: CoreFoundation.CGPoint, control2: CoreFoundation.CGPoint)
  public mutating func closeSubpath()
  public mutating func addRect(_ rect: CoreFoundation.CGRect, transform: CoreFoundation.CGAffineTransform = .identity)
  public mutating func addRoundedRect(in rect: CoreFoundation.CGRect, cornerSize: CoreFoundation.CGSize, style: SwiftUICore.RoundedCornerStyle = .continuous, transform: CoreFoundation.CGAffineTransform = .identity)
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public mutating func addRoundedRect(in rect: CoreFoundation.CGRect, cornerRadii: SwiftUICore.RectangleCornerRadii, style: SwiftUICore.RoundedCornerStyle = .continuous, transform: CoreFoundation.CGAffineTransform = .identity)
  public mutating func addEllipse(in rect: CoreFoundation.CGRect, transform: CoreFoundation.CGAffineTransform = .identity)
  public mutating func addRects(_ rects: [CoreFoundation.CGRect], transform: CoreFoundation.CGAffineTransform = .identity)
  public mutating func addLines(_ lines: [CoreFoundation.CGPoint])
  public mutating func addRelativeArc(center: CoreFoundation.CGPoint, radius: CoreFoundation.CGFloat, startAngle: SwiftUICore.Angle, delta: SwiftUICore.Angle, transform: CoreFoundation.CGAffineTransform = .identity)
  public mutating func addArc(center: CoreFoundation.CGPoint, radius: CoreFoundation.CGFloat, startAngle: SwiftUICore.Angle, endAngle: SwiftUICore.Angle, clockwise: Swift.Bool, transform: CoreFoundation.CGAffineTransform = .identity)
  public mutating func addArc(tangent1End: CoreFoundation.CGPoint, tangent2End: CoreFoundation.CGPoint, radius: CoreFoundation.CGFloat, transform: CoreFoundation.CGAffineTransform = .identity)
  public mutating func addPath(_ path: SwiftUICore.Path, transform: CoreFoundation.CGAffineTransform = .identity)
  public var currentPoint: CoreFoundation.CGPoint? {
    get
  }
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func normalized(eoFill: Swift.Bool = true) -> SwiftUICore.Path
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func intersection(_ other: SwiftUICore.Path, eoFill: Swift.Bool = false) -> SwiftUICore.Path
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func union(_ other: SwiftUICore.Path, eoFill: Swift.Bool = false) -> SwiftUICore.Path
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func subtracting(_ other: SwiftUICore.Path, eoFill: Swift.Bool = false) -> SwiftUICore.Path
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func symmetricDifference(_ other: SwiftUICore.Path, eoFill: Swift.Bool = false) -> SwiftUICore.Path
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func lineIntersection(_ other: SwiftUICore.Path, eoFill: Swift.Bool = false) -> SwiftUICore.Path
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func lineSubtraction(_ other: SwiftUICore.Path, eoFill: Swift.Bool = false) -> SwiftUICore.Path
  public func applying(_ transform: CoreFoundation.CGAffineTransform) -> SwiftUICore.Path
  public func offsetBy(dx: CoreFoundation.CGFloat, dy: CoreFoundation.CGFloat) -> SwiftUICore.Path
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape where Self == SwiftUICore.Rectangle {
  @_alwaysEmitIntoClient public static var rect: SwiftUICore.Rectangle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct Rectangle : SwiftUICore.Shape {
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
    get
  }
  @inlinable public init() {}
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.Rectangle, SwiftUICore.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape where Self == SwiftUICore.RoundedRectangle {
  @_alwaysEmitIntoClient public static func rect(cornerSize: CoreFoundation.CGSize, style: SwiftUICore.RoundedCornerStyle = .continuous) -> Self { .init(cornerSize: cornerSize, style: style) }
  @_alwaysEmitIntoClient public static func rect(cornerRadius: CoreFoundation.CGFloat, style: SwiftUICore.RoundedCornerStyle = .continuous) -> Self { .init(cornerRadius: cornerRadius, style: style) }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct RoundedRectangle : SwiftUICore.Shape {
  public var cornerSize: CoreFoundation.CGSize
  public var style: SwiftUICore.RoundedCornerStyle
  @inlinable public init(cornerSize: CoreFoundation.CGSize, style: SwiftUICore.RoundedCornerStyle = .continuous) {
        self.cornerSize = cornerSize
        self.style = style
    }
  @inlinable public init(cornerRadius: CoreFoundation.CGFloat, style: SwiftUICore.RoundedCornerStyle = .continuous) {
        let cornerSize = CGSize(width: cornerRadius, height: cornerRadius)
        self.init(cornerSize: cornerSize, style: style)
    }
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
    get
  }
  public var animatableData: CoreFoundation.CGSize.AnimatableData {
    get
    set
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = CoreFoundation.CGSize.AnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.RoundedRectangle, SwiftUICore.ForegroundStyle>
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape where Self == SwiftUICore.UnevenRoundedRectangle {
  @_alwaysEmitIntoClient public static func rect(cornerRadii: SwiftUICore.RectangleCornerRadii, style: SwiftUICore.RoundedCornerStyle = .continuous) -> Self { .init(cornerRadii: cornerRadii, style: style) }
  @_alwaysEmitIntoClient public static func rect(topLeadingRadius: CoreFoundation.CGFloat = 0, bottomLeadingRadius: CoreFoundation.CGFloat = 0, bottomTrailingRadius: CoreFoundation.CGFloat = 0, topTrailingRadius: CoreFoundation.CGFloat = 0, style: SwiftUICore.RoundedCornerStyle = .continuous) -> Self {
        .init(
            topLeadingRadius: topLeadingRadius,
            bottomLeadingRadius: bottomLeadingRadius,
            bottomTrailingRadius: bottomTrailingRadius,
            topTrailingRadius: topTrailingRadius, style: style)
    }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct UnevenRoundedRectangle : SwiftUICore.Shape {
  public var cornerRadii: SwiftUICore.RectangleCornerRadii
  public var style: SwiftUICore.RoundedCornerStyle
  @inlinable public init(cornerRadii: SwiftUICore.RectangleCornerRadii, style: SwiftUICore.RoundedCornerStyle = .continuous) {
        self.cornerRadii = cornerRadii
        self.style = style
    }
  @_alwaysEmitIntoClient public init(topLeadingRadius: CoreFoundation.CGFloat = 0, bottomLeadingRadius: CoreFoundation.CGFloat = 0, bottomTrailingRadius: CoreFoundation.CGFloat = 0, topTrailingRadius: CoreFoundation.CGFloat = 0, style: SwiftUICore.RoundedCornerStyle = .continuous) {
        self.init(
            cornerRadii: .init(
                topLeading: topLeadingRadius,
                bottomLeading: bottomLeadingRadius,
                bottomTrailing: bottomTrailingRadius,
                topTrailing: topTrailingRadius),
            style: style)
    }
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  public var animatableData: SwiftUICore.RectangleCornerRadii.AnimatableData {
    get
    set
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias AnimatableData = SwiftUICore.RectangleCornerRadii.AnimatableData
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.UnevenRoundedRectangle, SwiftUICore.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape where Self == SwiftUICore.Capsule {
  @_alwaysEmitIntoClient public static var capsule: SwiftUICore.Capsule {
    get { .init() }
  }
  @_alwaysEmitIntoClient public static func capsule(style: SwiftUICore.RoundedCornerStyle) -> Self {
        .init(style: style)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct Capsule : SwiftUICore.Shape {
  public var style: SwiftUICore.RoundedCornerStyle
  @inlinable public init(style: SwiftUICore.RoundedCornerStyle = .continuous) {
        self.style = style
    }
  nonisolated public func path(in r: CoreFoundation.CGRect) -> SwiftUICore.Path
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.Capsule, SwiftUICore.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape where Self == SwiftUICore.Ellipse {
  @_alwaysEmitIntoClient public static var ellipse: SwiftUICore.Ellipse {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct Ellipse : SwiftUICore.Shape {
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  @inlinable public init() {}
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.Ellipse, SwiftUICore.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape where Self == SwiftUICore.Circle {
  @_alwaysEmitIntoClient public static var circle: SwiftUICore.Circle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct Circle : SwiftUICore.Shape {
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  @inlinable public init() {}
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.Circle, SwiftUICore.ForegroundStyle>
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Circle {
  nonisolated public func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol InsettableShape : SwiftUICore.Shape {
  associatedtype InsetShape : SwiftUICore.InsettableShape
  nonisolated func inset(by amount: CoreFoundation.CGFloat) -> Self.InsetShape
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.InsettableShape {
  @inlinable @_disfavoredOverload public func strokeBorder<S>(_ content: S, style: SwiftUICore.StrokeStyle, antialiased: Swift.Bool = true) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
        return inset(by: style.lineWidth * 0.5)
             .stroke(style: style)
             .fill(content, style: FillStyle(antialiased: antialiased))
    }
  
  @inlinable @_disfavoredOverload public func strokeBorder(style: SwiftUICore.StrokeStyle, antialiased: Swift.Bool = true) -> some SwiftUICore.View {
        return inset(by: style.lineWidth * 0.5)
             .stroke(style: style)
             .fill(style: FillStyle(antialiased: antialiased))
    }
  
  @inlinable @_disfavoredOverload public func strokeBorder<S>(_ content: S, lineWidth: CoreFoundation.CGFloat = 1, antialiased: Swift.Bool = true) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
        return strokeBorder(content, style: StrokeStyle(lineWidth: lineWidth),
                     antialiased: antialiased)
    }
  
  @inlinable @_disfavoredOverload public func strokeBorder(lineWidth: CoreFoundation.CGFloat = 1, antialiased: Swift.Bool = true) -> some SwiftUICore.View {
        return strokeBorder(style: StrokeStyle(lineWidth: lineWidth),
            antialiased: antialiased)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Rectangle : SwiftUICore.InsettableShape {
  @inlinable nonisolated public func inset(by amount: CoreFoundation.CGFloat) -> some SwiftUICore.InsettableShape {
        return _Inset(amount: amount)
    }
  
  @usableFromInline
  @frozen internal struct _Inset : SwiftUICore.InsettableShape {
    @usableFromInline
    internal var amount: CoreFoundation.CGFloat
    @inlinable nonisolated internal init(amount: CoreFoundation.CGFloat) {
            self.amount = amount
        }
    @usableFromInline
    nonisolated internal func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
    @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
    @usableFromInline
    nonisolated internal var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
      get
    }
    @usableFromInline
    internal var animatableData: CoreFoundation.CGFloat {
      get
      set
    }
    @inlinable nonisolated internal func inset(by amount: CoreFoundation.CGFloat) -> SwiftUICore.Rectangle._Inset {
            var copy = self
            copy.amount += amount
            return copy
        }
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @usableFromInline
    internal typealias AnimatableData = CoreFoundation.CGFloat
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @usableFromInline
    internal typealias Body = SwiftUICore._ShapeView<SwiftUICore.Rectangle._Inset, SwiftUICore.ForegroundStyle>
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @usableFromInline
    internal typealias InsetShape = SwiftUICore.Rectangle._Inset
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias InsetShape = @_opaqueReturnTypeOf("$s7SwiftUI9RectangleV5inset2byQr12CoreGraphics7CGFloatV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.RoundedRectangle : SwiftUICore.InsettableShape {
  @inlinable nonisolated public func inset(by amount: CoreFoundation.CGFloat) -> some SwiftUICore.InsettableShape {
        return _Inset(base: self, amount: amount)
    }
  
  @usableFromInline
  @frozen internal struct _Inset : SwiftUICore.InsettableShape {
    @usableFromInline
    internal var base: SwiftUICore.RoundedRectangle
    @usableFromInline
    internal var amount: CoreFoundation.CGFloat
    @inlinable internal init(base: SwiftUICore.RoundedRectangle, amount: CoreFoundation.CGFloat) {
            (self.base, self.amount) = (base, amount)
        }
    @usableFromInline
    nonisolated internal func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
    @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
    @usableFromInline
    nonisolated internal var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
      get
    }
    @usableFromInline
    internal var animatableData: SwiftUICore.AnimatablePair<SwiftUICore.RoundedRectangle.AnimatableData, CoreFoundation.CGFloat> {
      get
      set
    }
    @inlinable nonisolated internal func inset(by amount: CoreFoundation.CGFloat) -> SwiftUICore.RoundedRectangle._Inset {
            var copy = self
            copy.amount += amount
            return copy
        }
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @usableFromInline
    internal typealias AnimatableData = SwiftUICore.AnimatablePair<SwiftUICore.RoundedRectangle.AnimatableData, CoreFoundation.CGFloat>
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @usableFromInline
    internal typealias Body = SwiftUICore._ShapeView<SwiftUICore.RoundedRectangle._Inset, SwiftUICore.ForegroundStyle>
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @usableFromInline
    internal typealias InsetShape = SwiftUICore.RoundedRectangle._Inset
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias InsetShape = @_opaqueReturnTypeOf("$s7SwiftUI16RoundedRectangleV5inset2byQr12CoreGraphics7CGFloatV_tF", 0) __
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.UnevenRoundedRectangle : SwiftUICore.InsettableShape {
  @inlinable nonisolated public func inset(by amount: CoreFoundation.CGFloat) -> some SwiftUICore.InsettableShape {
        return _Inset(base: self, amount: amount)
    }
  
  @usableFromInline
  @frozen internal struct _Inset : SwiftUICore.InsettableShape {
    @usableFromInline
    internal var base: SwiftUICore.UnevenRoundedRectangle
    @usableFromInline
    internal var amount: CoreFoundation.CGFloat
    @inlinable internal init(base: SwiftUICore.UnevenRoundedRectangle, amount: CoreFoundation.CGFloat) {
            (self.base, self.amount) = (base, amount)
        }
    @usableFromInline
    nonisolated internal func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
    @usableFromInline
    internal var animatableData: SwiftUICore.AnimatablePair<SwiftUICore.UnevenRoundedRectangle.AnimatableData, CoreFoundation.CGFloat> {
      get
      set
    }
    @inlinable nonisolated internal func inset(by amount: CoreFoundation.CGFloat) -> SwiftUICore.UnevenRoundedRectangle._Inset {
            var copy = self
            copy.amount += amount
            return copy
        }
    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
    @usableFromInline
    internal typealias AnimatableData = SwiftUICore.AnimatablePair<SwiftUICore.UnevenRoundedRectangle.AnimatableData, CoreFoundation.CGFloat>
    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
    @usableFromInline
    internal typealias Body = SwiftUICore._ShapeView<SwiftUICore.UnevenRoundedRectangle._Inset, SwiftUICore.ForegroundStyle>
    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
    @usableFromInline
    internal typealias InsetShape = SwiftUICore.UnevenRoundedRectangle._Inset
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias InsetShape = @_opaqueReturnTypeOf("$s7SwiftUI22UnevenRoundedRectangleV5inset2byQr12CoreGraphics7CGFloatV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Capsule : SwiftUICore.InsettableShape {
  @inlinable nonisolated public func inset(by amount: CoreFoundation.CGFloat) -> some SwiftUICore.InsettableShape {
        return _Inset(amount: _Inset._makeInset(amount, style: style))
    }
  
  @usableFromInline
  @frozen internal struct _Inset : SwiftUICore.InsettableShape {
    @usableFromInline
    internal var amount: CoreFoundation.CGFloat
    @inlinable internal init(amount: CoreFoundation.CGFloat) {
            self.amount = amount
        }
    @usableFromInline
    nonisolated internal func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
    @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
    @usableFromInline
    nonisolated internal var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
      get
    }
    @usableFromInline
    internal var animatableData: CoreFoundation.CGFloat {
      get
      set
    }
    @inlinable nonisolated internal func inset(by amount: CoreFoundation.CGFloat) -> SwiftUICore.Capsule._Inset {
            let (inset, style) = Self._extractInset(self.amount)
            return Self(amount: Self._makeInset(inset + amount, style: style))
        }
    @_alwaysEmitIntoClient internal static func _makeInset(_ inset: CoreFoundation.CGFloat, style: SwiftUICore.RoundedCornerStyle) -> CoreFoundation.CGFloat {
            var u = unsafeBitCast(inset, to: UInt.self)
            u = (u & ~1) | (style == .circular ? 0 : 1)
            return unsafeBitCast(u, to: CGFloat.self)
        }
    @_alwaysEmitIntoClient internal static func _extractInset(_ inset: CoreFoundation.CGFloat) -> (CoreFoundation.CGFloat, SwiftUICore.RoundedCornerStyle) {
            let u = unsafeBitCast(inset, to: UInt.self)
            return (unsafeBitCast(u & ~1, to: CGFloat.self),
                (u & 1) == 0 ? .circular : .continuous)
        }
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @usableFromInline
    internal typealias AnimatableData = CoreFoundation.CGFloat
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @usableFromInline
    internal typealias Body = SwiftUICore._ShapeView<SwiftUICore.Capsule._Inset, SwiftUICore.ForegroundStyle>
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @usableFromInline
    internal typealias InsetShape = SwiftUICore.Capsule._Inset
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias InsetShape = @_opaqueReturnTypeOf("$s7SwiftUI7CapsuleV5inset2byQr12CoreGraphics7CGFloatV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Ellipse : SwiftUICore.InsettableShape {
  @inlinable nonisolated public func inset(by amount: CoreFoundation.CGFloat) -> some SwiftUICore.InsettableShape {
        return _Inset(amount: amount)
    }
  
  @usableFromInline
  @frozen internal struct _Inset : SwiftUICore.InsettableShape {
    @usableFromInline
    internal var amount: CoreFoundation.CGFloat
    @inlinable internal init(amount: CoreFoundation.CGFloat) {
            self.amount = amount
        }
    @usableFromInline
    nonisolated internal func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
    @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
    @usableFromInline
    nonisolated internal var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
      get
    }
    @usableFromInline
    internal var animatableData: CoreFoundation.CGFloat {
      get
      set
    }
    @inlinable nonisolated internal func inset(by amount: CoreFoundation.CGFloat) -> SwiftUICore.Ellipse._Inset {
            var copy = self
            copy.amount += amount
            return copy
        }
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @usableFromInline
    internal typealias AnimatableData = CoreFoundation.CGFloat
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @usableFromInline
    internal typealias Body = SwiftUICore._ShapeView<SwiftUICore.Ellipse._Inset, SwiftUICore.ForegroundStyle>
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @usableFromInline
    internal typealias InsetShape = SwiftUICore.Ellipse._Inset
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias InsetShape = @_opaqueReturnTypeOf("$s7SwiftUI7EllipseV5inset2byQr12CoreGraphics7CGFloatV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Circle : SwiftUICore.InsettableShape {
  @inlinable nonisolated public func inset(by amount: CoreFoundation.CGFloat) -> some SwiftUICore.InsettableShape {
        return _Inset(amount: amount)
    }
  
  @usableFromInline
  @frozen internal struct _Inset : SwiftUICore.InsettableShape {
    @usableFromInline
    internal var amount: CoreFoundation.CGFloat
    @inlinable internal init(amount: CoreFoundation.CGFloat) {
            self.amount = amount
        }
    @usableFromInline
    nonisolated internal func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
    @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
    @usableFromInline
    nonisolated internal var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
      get
    }
    @usableFromInline
    internal var animatableData: CoreFoundation.CGFloat {
      get
      set
    }
    @inlinable nonisolated internal func inset(by amount: CoreFoundation.CGFloat) -> SwiftUICore.Circle._Inset {
            var copy = self
            copy.amount += amount
            return copy
        }
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @usableFromInline
    internal typealias AnimatableData = CoreFoundation.CGFloat
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @usableFromInline
    internal typealias Body = SwiftUICore._ShapeView<SwiftUICore.Circle._Inset, SwiftUICore.ForegroundStyle>
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @usableFromInline
    internal typealias InsetShape = SwiftUICore.Circle._Inset
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias InsetShape = @_opaqueReturnTypeOf("$s7SwiftUI6CircleV5inset2byQr12CoreGraphics7CGFloatV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public enum _VAlignment {
  case top
  case center
  case bottom
  public static func == (a: SwiftUICore._VAlignment, b: SwiftUICore._VAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _AlignmentLayout {
  public var horizontal: SwiftUICore.TextAlignment?
  public var vertical: SwiftUICore._VAlignment?
  @inlinable public init(horizontal: SwiftUICore.TextAlignment? = nil, vertical: SwiftUICore._VAlignment? = nil) {
        self.horizontal = horizontal
        self.vertical = vertical
    }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct ProjectionTransform {
  public var m11: CoreFoundation.CGFloat = 1.0, m12: CoreFoundation.CGFloat = 0.0, m13: CoreFoundation.CGFloat = 0.0
  public var m21: CoreFoundation.CGFloat = 0.0, m22: CoreFoundation.CGFloat = 1.0, m23: CoreFoundation.CGFloat = 0.0
  public var m31: CoreFoundation.CGFloat = 0.0, m32: CoreFoundation.CGFloat = 0.0, m33: CoreFoundation.CGFloat = 1.0
  @inlinable public init() {}
  @inlinable public init(_ m: CoreFoundation.CGAffineTransform) {
        m11 = m.a
        m12 = m.b
        m21 = m.c
        m22 = m.d
        m31 = m.tx
        m32 = m.ty
    }
  @inlinable public init(_ m: QuartzCore.CATransform3D) {
        m11 = m.m11
        m12 = m.m12
        m13 = m.m14
        m21 = m.m21
        m22 = m.m22
        m23 = m.m24
        m31 = m.m41
        m32 = m.m42
        m33 = m.m44
    }
  @inlinable public var isIdentity: Swift.Bool {
    get {
        return self == ProjectionTransform()
    }
  }
  @inlinable public var isAffine: Swift.Bool {
    get {
        return m13 == 0 && m23 == 0 && m33 == 1
    }
  }
  public mutating func invert() -> Swift.Bool
  public func inverted() -> SwiftUICore.ProjectionTransform
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ProjectionTransform : Swift.Equatable {
  public static func == (a: SwiftUICore.ProjectionTransform, b: SwiftUICore.ProjectionTransform) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ProjectionTransform {
  @inline(__always) @inlinable package func dot(_ a: (CoreFoundation.CGFloat, CoreFoundation.CGFloat, CoreFoundation.CGFloat), _ b: (CoreFoundation.CGFloat, CoreFoundation.CGFloat, CoreFoundation.CGFloat)) -> CoreFoundation.CGFloat {
        return a.0 * b.0 + a.1 * b.1 + a.2 * b.2
    }
  @inlinable public func concatenating(_ rhs: SwiftUICore.ProjectionTransform) -> SwiftUICore.ProjectionTransform {
        var m = ProjectionTransform()
        m.m11 = dot((m11, m12, m13), (rhs.m11, rhs.m21, rhs.m31))
        m.m12 = dot((m11, m12, m13), (rhs.m12, rhs.m22, rhs.m32))
        m.m13 = dot((m11, m12, m13), (rhs.m13, rhs.m23, rhs.m33))
        m.m21 = dot((m21, m22, m23), (rhs.m11, rhs.m21, rhs.m31))
        m.m22 = dot((m21, m22, m23), (rhs.m12, rhs.m22, rhs.m32))
        m.m23 = dot((m21, m22, m23), (rhs.m13, rhs.m23, rhs.m33))
        m.m31 = dot((m31, m32, m33), (rhs.m11, rhs.m21, rhs.m31))
        m.m32 = dot((m31, m32, m33), (rhs.m12, rhs.m22, rhs.m32))
        m.m33 = dot((m31, m32, m33), (rhs.m13, rhs.m23, rhs.m33))
        return m
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension CoreFoundation.CGPoint {
  public func applying(_ m: SwiftUICore.ProjectionTransform) -> CoreFoundation.CGPoint
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Animation {
  public static func interpolatingSpring(mass: Swift.Double = 1.0, stiffness: Swift.Double, damping: Swift.Double, initialVelocity: Swift.Double = 0.0) -> SwiftUICore.Animation
  @_alwaysEmitIntoClient public static func interpolatingSpring(duration: Foundation.TimeInterval = 0.5, bounce: Swift.Double = 0.0, initialVelocity: Swift.Double = 0.0) -> SwiftUICore.Animation {
        let stiffness = springStiffness(response: duration)
        let fraction = springDampingFraction(bounce: bounce)
        let damping = springDamping(fraction: fraction, stiffness: stiffness)
        return interpolatingSpring(
            stiffness: stiffness, damping: damping,
            initialVelocity: initialVelocity)
    }
  @_alwaysEmitIntoClient public static var interpolatingSpring: SwiftUICore.Animation {
    get { .interpolatingSpring() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct EdgeInsets : Swift.Equatable {
  public var top: CoreFoundation.CGFloat
  public var leading: CoreFoundation.CGFloat
  public var bottom: CoreFoundation.CGFloat
  public var trailing: CoreFoundation.CGFloat
  @inlinable public init(top: CoreFoundation.CGFloat, leading: CoreFoundation.CGFloat, bottom: CoreFoundation.CGFloat, trailing: CoreFoundation.CGFloat) {
        self.top = top
        self.leading = leading
        self.bottom = bottom
        self.trailing = trailing
    }
  @inlinable public init() {
        self.init(top: 0, leading: 0, bottom: 0, trailing: 0)
    }
  public static func == (a: SwiftUICore.EdgeInsets, b: SwiftUICore.EdgeInsets) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EdgeInsets : SwiftUICore.Animatable, SwiftUICore._VectorMath {
  public typealias AnimatableData = SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>>>
  public var animatableData: SwiftUICore.EdgeInsets.AnimatableData {
    @inlinable get {
            return .init(top, .init(leading, .init(bottom, trailing)))
        }
    @inlinable set {
            let top = newValue.first
            let leading = newValue.second.first
            let bottom = newValue.second.second.first
            let trailing = newValue.second.second.second
            self = .init(
                top: top, leading: leading, bottom: bottom, trailing: trailing)
        }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EdgeInsets {
  @usableFromInline
  package init(_all: CoreFoundation.CGFloat)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _AppearanceActionModifier : SwiftUICore.ViewModifier {
  public var appear: (() -> Swift.Void)?
  public var disappear: (() -> Swift.Void)?
  @inlinable public init(appear: (() -> Swift.Void)? = nil, disappear: (() -> Swift.Void)? = nil) {
        self.appear = appear
        self.disappear = disappear
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._AppearanceActionModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUICore._AppearanceActionModifier>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._AppearanceActionModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func onAppear(perform action: (() -> Swift.Void)? = nil) -> some SwiftUICore.View {
        return modifier(
            _AppearanceActionModifier(appear: action, disappear: nil))
    }
  
  @inlinable nonisolated public func onDisappear(perform action: (() -> Swift.Void)? = nil) -> some SwiftUICore.View {
        return modifier(
            _AppearanceActionModifier(appear: nil, disappear: action))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _PreferenceValue<Key> where Key : SwiftUICore.PreferenceKey {
}
@available(*, unavailable)
extension SwiftUICore._PreferenceValue : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _DelayedPreferenceView<Key, Content> : SwiftUICore.View where Key : SwiftUICore.PreferenceKey, Content : SwiftUICore.View {
  public var transform: (SwiftUICore._PreferenceValue<Key>) -> Content
  @inlinable public init(transform: @escaping (SwiftUICore._PreferenceValue<Key>) -> Content) {
        self.transform = transform
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore._DelayedPreferenceView<Key, Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._DelayedPreferenceView : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.PreferenceKey {
  @inlinable public static func _delay<T>(_ transform: @escaping (SwiftUICore._PreferenceValue<Self>) -> T) -> some SwiftUICore.View where T : SwiftUICore.View {
        return _DelayedPreferenceView(transform: transform)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _EnvironmentKeyTransformModifier<Value> : SwiftUICore.ViewModifier, SwiftUICore._GraphInputsModifier {
  public var keyPath: Swift.WritableKeyPath<SwiftUICore.EnvironmentValues, Value>
  public var transform: (inout Value) -> Swift.Void
  @inlinable public init(keyPath: Swift.WritableKeyPath<SwiftUICore.EnvironmentValues, Value>, transform: @escaping (inout Value) -> Swift.Void) {
        self.keyPath = keyPath
        self.transform = transform
    }
  public static func _makeInputs(modifier: SwiftUICore._GraphValue<SwiftUICore._EnvironmentKeyTransformModifier<Value>>, inputs: inout SwiftUICore._GraphInputs)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._EnvironmentKeyTransformModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func transformEnvironment<V>(_ keyPath: Swift.WritableKeyPath<SwiftUICore.EnvironmentValues, V>, transform: @escaping (inout V) -> Swift.Void) -> some SwiftUICore.View {
        return modifier(_EnvironmentKeyTransformModifier(
            keyPath: keyPath, transform: transform))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol _Detachable {
  static func matches<K>(key: K.Type) -> Swift.Bool where K : SwiftUICore.PreferenceKey
  static var detachedProperties: SwiftUICore._DetachableProperties { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _DetachableProperties : Swift.OptionSet {
  public let rawValue: Swift.UInt32
  public init(rawValue: Swift.UInt32)
  public static let position: SwiftUICore._DetachableProperties
  public static let dimensions: SwiftUICore._DetachableProperties
  public static let environment: SwiftUICore._DetachableProperties
  public static let transaction: SwiftUICore._DetachableProperties
  public static let layout: SwiftUICore._DetachableProperties
  public static let all: SwiftUICore._DetachableProperties
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ArrayLiteralElement = SwiftUICore._DetachableProperties
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Element = SwiftUICore._DetachableProperties
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias RawValue = Swift.UInt32
}
@available(*, unavailable)
extension SwiftUICore._DetachableProperties : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._Detachable {
  public static var detachedProperties: SwiftUICore._DetachableProperties {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _DetachedView<Detached, Content, Child> : SwiftUICore.View where Detached : SwiftUICore._Detachable, Content : SwiftUICore.View, Child : SwiftUICore.View {
  public var content: Content
  public var transform: (SwiftUICore._DetachedPlaceholder<Detached>) -> Child
  @inlinable public init(content: Content, transform: @escaping (SwiftUICore._DetachedPlaceholder<Detached>) -> Child) {
        self.content = content
        self.transform = transform
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore._DetachedView<Detached, Content, Child>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._DetachedView : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable @_Concurrency.MainActor @preconcurrency public func _detached<T, U>(with _: T.Type = T.self, _ transform: @escaping (SwiftUICore._DetachedPlaceholder<T>) -> U) -> some SwiftUICore.View where T : SwiftUICore._Detachable, U : SwiftUICore.View {
        return _DetachedView(content: self, transform: transform)
    }
  
  @inlinable @_Concurrency.MainActor @preconcurrency public func _detached<T>(_ transform: @escaping (SwiftUICore._DetachedPlaceholder<SwiftUICore._EmptyDetached>) -> T) -> some SwiftUICore.View where T : SwiftUICore.View {
        return _DetachedView(content: self, transform: transform)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _DetachedKey<Key> : SwiftUICore._Detachable where Key : SwiftUICore.PreferenceKey {
  public static func matches<K>(key: K.Type) -> Swift.Bool where K : SwiftUICore.PreferenceKey
}
@available(*, unavailable)
extension SwiftUICore._DetachedKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _EmptyDetached : SwiftUICore._Detachable {
  public static func matches<K>(key: K.Type) -> Swift.Bool where K : SwiftUICore.PreferenceKey
  public static var detachedProperties: SwiftUICore._DetachableProperties {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore._EmptyDetached : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _DetachedPlaceholder<Detached> : SwiftUICore.View where Detached : SwiftUICore._Detachable {
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore._DetachedPlaceholder<Detached>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._DetachedPlaceholder : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@usableFromInline
package struct AppearsActiveKey : SwiftUICore.EnvironmentKey {
  @usableFromInline
  package static let defaultValue: Swift.Bool
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @usableFromInline
  package typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore.AppearsActiveKey : Swift.Sendable {
}
@available(iOS 18.0, macOS 10.15, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.EnvironmentValues {
  @available(iOS 18.0, macOS 10.15, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @backDeployed(before: macOS 15.0)
  public var appearsActive: Swift.Bool {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol AlignmentID {
  static func defaultValue(in context: SwiftUICore.ViewDimensions) -> CoreFoundation.CGFloat
  static func _combineExplicit(childValue: CoreFoundation.CGFloat, _ n: Swift.Int, into parentValue: inout CoreFoundation.CGFloat?)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.AlignmentID {
  public static func _combineExplicit(childValue: CoreFoundation.CGFloat, _ n: Swift.Int, into parentValue: inout CoreFoundation.CGFloat?)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct HorizontalAlignment : Swift.Equatable {
  public init(_ id: any SwiftUICore.AlignmentID.Type)
  @_documentation(visibility: private) public let key: SwiftUICore.AlignmentKey
  public static func == (a: SwiftUICore.HorizontalAlignment, b: SwiftUICore.HorizontalAlignment) -> Swift.Bool
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.HorizontalAlignment {
  public func combineExplicit<S>(_ values: S) -> CoreFoundation.CGFloat? where S : Swift.Sequence, S.Element == CoreFoundation.CGFloat?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct VerticalAlignment : Swift.Equatable {
  public init(_ id: any SwiftUICore.AlignmentID.Type)
  @_documentation(visibility: private) public let key: SwiftUICore.AlignmentKey
  public static func == (a: SwiftUICore.VerticalAlignment, b: SwiftUICore.VerticalAlignment) -> Swift.Bool
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.VerticalAlignment {
  public func combineExplicit<S>(_ values: S) -> CoreFoundation.CGFloat? where S : Swift.Sequence, S.Element == CoreFoundation.CGFloat?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct Alignment : Swift.Equatable {
  public var horizontal: SwiftUICore.HorizontalAlignment
  public var vertical: SwiftUICore.VerticalAlignment
  @inlinable public init(horizontal: SwiftUICore.HorizontalAlignment, vertical: SwiftUICore.VerticalAlignment) {
        self.horizontal = horizontal
        self.vertical = vertical
    }
  public static func == (a: SwiftUICore.Alignment, b: SwiftUICore.Alignment) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.HorizontalAlignment {
  public static let leading: SwiftUICore.HorizontalAlignment
  public static let center: SwiftUICore.HorizontalAlignment
  public static let trailing: SwiftUICore.HorizontalAlignment
}
@available(iOS 16.0, macOS 13.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.HorizontalAlignment {
  public static let listRowSeparatorLeading: SwiftUICore.HorizontalAlignment
  public static let listRowSeparatorTrailing: SwiftUICore.HorizontalAlignment
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.VerticalAlignment {
  public static let top: SwiftUICore.VerticalAlignment
  public static let center: SwiftUICore.VerticalAlignment
  public static let bottom: SwiftUICore.VerticalAlignment
  public static let firstTextBaseline: SwiftUICore.VerticalAlignment
  public static let lastTextBaseline: SwiftUICore.VerticalAlignment
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Alignment {
  public static let center: SwiftUICore.Alignment
  public static let leading: SwiftUICore.Alignment
  public static let trailing: SwiftUICore.Alignment
  public static let top: SwiftUICore.Alignment
  public static let bottom: SwiftUICore.Alignment
  public static let topLeading: SwiftUICore.Alignment
  public static let topTrailing: SwiftUICore.Alignment
  public static let bottomLeading: SwiftUICore.Alignment
  public static let bottomTrailing: SwiftUICore.Alignment
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Alignment {
  @_alwaysEmitIntoClient public static var centerFirstTextBaseline: SwiftUICore.Alignment {
    get {
        .init(horizontal: .center, vertical: .firstTextBaseline) }
  }
  @_alwaysEmitIntoClient public static var centerLastTextBaseline: SwiftUICore.Alignment {
    get {
        .init(horizontal: .center, vertical: .lastTextBaseline) }
  }
  @_alwaysEmitIntoClient public static var leadingFirstTextBaseline: SwiftUICore.Alignment {
    get {
        .init(horizontal: .leading, vertical: .firstTextBaseline) }
  }
  @_alwaysEmitIntoClient public static var leadingLastTextBaseline: SwiftUICore.Alignment {
    get {
        .init(horizontal: .leading, vertical: .lastTextBaseline) }
  }
  @_alwaysEmitIntoClient public static var trailingFirstTextBaseline: SwiftUICore.Alignment {
    get {
        .init(horizontal: .trailing, vertical: .firstTextBaseline) }
  }
  @_alwaysEmitIntoClient public static var trailingLastTextBaseline: SwiftUICore.Alignment {
    get {
        .init(horizontal: .trailing, vertical: .lastTextBaseline) }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_documentation(visibility: private) @frozen public struct AlignmentKey : Swift.Hashable, Swift.Comparable {
  private let bits: Swift.UInt
  public static func < (lhs: SwiftUICore.AlignmentKey, rhs: SwiftUICore.AlignmentKey) -> Swift.Bool
  public static func == (a: SwiftUICore.AlignmentKey, b: SwiftUICore.AlignmentKey) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public func __previewThunksHaveFinishedLoading()
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @propertyWrapper public struct Environment<Value> : SwiftUICore.DynamicProperty {
  @usableFromInline
  @frozen internal enum Content : @unchecked Swift.Sendable {
    case keyPath(Swift.KeyPath<SwiftUICore.EnvironmentValues, Value>)
    case value(Value)
  }
  @usableFromInline
  internal var content: SwiftUICore.Environment<Value>.Content
  @inlinable public init(_ keyPath: Swift.KeyPath<SwiftUICore.EnvironmentValues, Value>) {
        content = .keyPath(keyPath)
    }
  @inlinable public var wrappedValue: Value {
    get {
        switch content {
        case let .value(value):
            return value
        case let .keyPath(keyPath):
            if #available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *) {
                os_log(.fault, log: Log.runtimeIssuesLog, """
                    Accessing Environment<\(Value.self)>'s value outside of \
                    being installed on a View. \
                    This will always read the default value \
                    and will not update.
                    """)
            } else {
                os_log(.fault, log: Log.runtimeIssuesLog, """
                    Accessing Environment's value outside of being \
                    installed on a View. \
                    This will always read the default value \
                    and will not update.
                    """)
            }
             
            return EnvironmentValues()[keyPath: keyPath]
        }
    }
  }
  @usableFromInline
  internal func error() -> Swift.Never
  public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.Environment : Swift.Sendable where Value : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnyTransition {
  public static func push(from edge: SwiftUICore.Edge) -> SwiftUICore.AnyTransition
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Transition where Self == SwiftUICore.PushTransition {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static func push(from edge: SwiftUICore.Edge) -> Self { Self(edge: edge) }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_Concurrency.MainActor @preconcurrency public struct PushTransition : SwiftUICore.Transition {
  @_Concurrency.MainActor @preconcurrency public var edge: SwiftUICore.Edge
  @_Concurrency.MainActor @preconcurrency public init(edge: SwiftUICore.Edge)
  @_Concurrency.MainActor @preconcurrency public func body(content: SwiftUICore.PushTransition.Content, phase: SwiftUICore.TransitionPhase) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func _makeContentTransition(transition: inout SwiftUICore._Transition_ContentTransition)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI14PushTransitionV4body7content5phaseQrAA22PlaceholderContentViewVyACG_AA0D5PhaseOtF", 0) __
}
@available(*, unavailable)
extension SwiftUICore.PushTransition : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @propertyWrapper @dynamicMemberLookup public struct Binding<Value> {
  public var transaction: SwiftUICore.Transaction
  package var location: SwiftUICore.AnyLocation<Value>
  package var _value: Value
  #if compiler(>=5.3) && $IsolatedAny
  @usableFromInline
  internal static func getIsolated(@_inheritActorContext _ get: @escaping @isolated(any) @Sendable () -> Value) -> () -> Value
  #endif
  #if compiler(>=5.3) && $IsolatedAny
  @preconcurrency public init(@_inheritActorContext get: @escaping @isolated(any) @Sendable () -> Value, @_inheritActorContext set: @escaping @isolated(any) @Sendable (Value) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $IsolatedAny
  @preconcurrency public init(@_inheritActorContext get: @escaping @isolated(any) @Sendable () -> Value, @_inheritActorContext set: @escaping @isolated(any) @Sendable (Value, SwiftUICore.Transaction) -> Swift.Void)
  #endif
  public static func constant(_ value: Value) -> SwiftUICore.Binding<Value>
  public var wrappedValue: Value {
    get
    nonmutating set
  }
  public var projectedValue: SwiftUICore.Binding<Value> {
    get
  }
  @_alwaysEmitIntoClient public init(projectedValue: SwiftUICore.Binding<Value>) {
        self = projectedValue
    }
  public subscript<Subject>(dynamicMember keyPath: Swift.WritableKeyPath<Value, Subject>) -> SwiftUICore.Binding<Subject> {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.Binding : @unchecked Swift.Sendable where Value : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Binding : Swift.Identifiable where Value : Swift.Identifiable {
  public var id: Value.ID {
    get
  }
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias ID = Value.ID
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Binding : Swift.Sequence where Value : Swift.MutableCollection {
  public typealias Element = SwiftUICore.Binding<Value.Element>
  public typealias Iterator = Swift.IndexingIterator<SwiftUICore.Binding<Value>>
  public typealias SubSequence = Swift.Slice<SwiftUICore.Binding<Value>>
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Binding : Swift.Collection where Value : Swift.MutableCollection {
  public typealias Index = Value.Index
  public typealias Indices = Value.Indices
  public var startIndex: SwiftUICore.Binding<Value>.Index {
    get
  }
  public var endIndex: SwiftUICore.Binding<Value>.Index {
    get
  }
  public var indices: Value.Indices {
    get
  }
  public func index(after i: SwiftUICore.Binding<Value>.Index) -> SwiftUICore.Binding<Value>.Index
  public func formIndex(after i: inout SwiftUICore.Binding<Value>.Index)
  public subscript(position: SwiftUICore.Binding<Value>.Index) -> SwiftUICore.Binding<Value>.Element {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Binding : Swift.BidirectionalCollection where Value : Swift.BidirectionalCollection, Value : Swift.MutableCollection {
  public func index(before i: SwiftUICore.Binding<Value>.Index) -> SwiftUICore.Binding<Value>.Index
  public func formIndex(before i: inout SwiftUICore.Binding<Value>.Index)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Binding : Swift.RandomAccessCollection where Value : Swift.MutableCollection, Value : Swift.RandomAccessCollection {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Binding {
  public func transaction(_ transaction: SwiftUICore.Transaction) -> SwiftUICore.Binding<Value>
  public func animation(_ animation: SwiftUICore.Animation? = .default) -> SwiftUICore.Binding<Value>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Binding : SwiftUICore.DynamicProperty {
  public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct EnableRuntimeConcurrencyCheck {
  @usableFromInline
  internal static var isEnabled: Swift.Bool {
    get
  }
}
@available(watchOS, unavailable, introduced: 6.0)
@available(tvOS, unavailable, introduced: 13.0)
@available(macOS, unavailable, introduced: 10.15)
@available(iOS, unavailable, introduced: 13.0)
@available(*, unavailable)
extension SwiftUICore.EnableRuntimeConcurrencyCheck : @unchecked Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_alwaysEmitIntoClient nonisolated public func tag<V>(_ tag: V, includeOptional: Swift.Bool = true) -> some SwiftUICore.View where V : Swift.Hashable {
        return _trait(TagValueTraitKey<V>.self, .tagged(tag))
            ._trait(
                TagValueTraitKey<V?>.self,
                includeOptional ? .tagged(Optional(tag)) : .untagged)
    }
  
  @inlinable nonisolated public func _untagged() -> some SwiftUICore.View {
        return _trait(IsAuxiliaryContentTraitKey.self, true)
    }
  
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal func tag<V>(_ tag: V) -> some SwiftUICore.View where V : Swift.Hashable
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package struct TagValueTraitKey<V> : SwiftUICore._ViewTraitKey where V : Swift.Hashable {
  @usableFromInline
  @frozen package enum Value {
    case untagged
    case tagged(V)
  }
  @inlinable package static var defaultValue: SwiftUICore.TagValueTraitKey<V>.Value {
    get { .untagged }
  }
}
@available(*, unavailable)
extension SwiftUICore.TagValueTraitKey.Value : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.TagValueTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package struct IsAuxiliaryContentTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable package static var defaultValue: Swift.Bool {
    get { false }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  package typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore.IsAuxiliaryContentTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _Velocity<Value> : Swift.Equatable where Value : Swift.Equatable {
  public var valuePerSecond: Value
  @inlinable public init(valuePerSecond: Value) {
        self.valuePerSecond = valuePerSecond
    }
  public static func == (a: SwiftUICore._Velocity<Value>, b: SwiftUICore._Velocity<Value>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._Velocity : Swift.Sendable where Value : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._Velocity : Swift.Comparable where Value : Swift.Comparable {
  public static func < (lhs: SwiftUICore._Velocity<Value>, rhs: SwiftUICore._Velocity<Value>) -> Swift.Bool
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._Velocity : Swift.Hashable where Value : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
extension SwiftUICore._Velocity : @retroactive SwiftUICore.Animatable where Value : SwiftUICore.Animatable {
  public typealias AnimatableData = Value.AnimatableData
  public var animatableData: SwiftUICore._Velocity<Value>.AnimatableData {
    @inlinable get { return valuePerSecond.animatableData }
    @inlinable set { valuePerSecond.animatableData = newValue }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._Velocity : Swift.AdditiveArithmetic where Value : Swift.AdditiveArithmetic {
  @inlinable public init() {
        self.init(valuePerSecond: .zero)
    }
  @inlinable public static var zero: SwiftUICore._Velocity<Value> {
    get {
        return .init(valuePerSecond: .zero)
    }
  }
  @inlinable public static func += (lhs: inout SwiftUICore._Velocity<Value>, rhs: SwiftUICore._Velocity<Value>) {
        lhs.valuePerSecond += rhs.valuePerSecond
    }
  @inlinable public static func -= (lhs: inout SwiftUICore._Velocity<Value>, rhs: SwiftUICore._Velocity<Value>) {
        lhs.valuePerSecond -= rhs.valuePerSecond
    }
  @inlinable public static func + (lhs: SwiftUICore._Velocity<Value>, rhs: SwiftUICore._Velocity<Value>) -> SwiftUICore._Velocity<Value> {
        var r = lhs; r += rhs; return r
    }
  @inlinable public static func - (lhs: SwiftUICore._Velocity<Value>, rhs: SwiftUICore._Velocity<Value>) -> SwiftUICore._Velocity<Value> {
        var r = lhs; r -= rhs; return r
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._Velocity : SwiftUICore.VectorArithmetic where Value : SwiftUICore.VectorArithmetic {
  @inlinable public mutating func scale(by rhs: Swift.Double) {
        valuePerSecond.scale(by: rhs)
    }
  @inlinable public var magnitudeSquared: Swift.Double {
    get {
        return valuePerSecond.magnitudeSquared
    }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct EnvironmentValues : Swift.CustomStringConvertible {
  public init()
  public subscript<K>(key: K.Type) -> K.Value where K : SwiftUICore.EnvironmentKey {
    get
    set
  }
  public var description: Swift.String {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore.EnvironmentValues : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum DynamicTypeSize : Swift.Hashable, Swift.Comparable, Swift.CaseIterable, Swift.Sendable {
  case xSmall
  case small
  case medium
  case large
  case xLarge
  case xxLarge
  case xxxLarge
  case accessibility1
  case accessibility2
  case accessibility3
  case accessibility4
  case accessibility5
  public var isAccessibilitySize: Swift.Bool {
    get
  }
  public static func < (a: SwiftUICore.DynamicTypeSize, b: SwiftUICore.DynamicTypeSize) -> Swift.Bool
  public static func == (a: SwiftUICore.DynamicTypeSize, b: SwiftUICore.DynamicTypeSize) -> Swift.Bool
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias AllCases = [SwiftUICore.DynamicTypeSize]
  nonisolated public static var allCases: [SwiftUICore.DynamicTypeSize] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var dynamicTypeSize: SwiftUICore.DynamicTypeSize {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  nonisolated public func dynamicTypeSize(_ size: SwiftUICore.DynamicTypeSize) -> some SwiftUICore.View
  
  nonisolated public func dynamicTypeSize<T>(_ range: T) -> some SwiftUICore.View where T : Swift.RangeExpression, T.Bound == SwiftUICore.DynamicTypeSize
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Animation {
  public func delay(_ delay: Foundation.TimeInterval) -> SwiftUICore.Animation
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _ScrollClipEffect<ClipShape> : SwiftUICore.ViewModifier, SwiftUICore.Animatable where ClipShape : SwiftUICore.Shape {
  public var shape: ClipShape
  @inlinable public init(shape: ClipShape) {
        self.shape = shape
    }
  public var animatableData: ClipShape.AnimatableData {
    get
    set
  }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._ScrollClipEffect<ClipShape>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias AnimatableData = ClipShape.AnimatableData
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _EnabledScrollClipEffect<ClipShape> : SwiftUICore.ViewModifier, SwiftUICore.Animatable where ClipShape : SwiftUICore.Shape {
  public var shape: ClipShape
  public var isEnabled: Swift.Bool
  @_alwaysEmitIntoClient public init(shape: ClipShape, isEnabled: Swift.Bool) {
        self.shape = shape
        self.isEnabled = isEnabled
    }
  public var animatableData: ClipShape.AnimatableData {
    get
    set
  }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._EnabledScrollClipEffect<ClipShape>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias AnimatableData = ClipShape.AnimatableData
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape {
  @_alwaysEmitIntoClient nonisolated public func intersection<T>(_ other: T, eoFill: Swift.Bool = false) -> some SwiftUICore.Shape where T : SwiftUICore.Shape {
        return _ShapeIntersection(self, other, eoFill: eoFill)
    }
  
  @_alwaysEmitIntoClient nonisolated public func union<T>(_ other: T, eoFill: Swift.Bool = false) -> some SwiftUICore.Shape where T : SwiftUICore.Shape {
        return _ShapeUnion(self, other, eoFill: eoFill)
    }
  
  @_alwaysEmitIntoClient nonisolated public func subtracting<T>(_ other: T, eoFill: Swift.Bool = false) -> some SwiftUICore.Shape where T : SwiftUICore.Shape {
        return _ShapeSubtraction(self, other, eoFill: eoFill)
    }
  
  @_alwaysEmitIntoClient nonisolated public func symmetricDifference<T>(_ other: T, eoFill: Swift.Bool = false) -> some SwiftUICore.Shape where T : SwiftUICore.Shape {
        return _ShapeSymmetricDifference(self, other, eoFill: eoFill)
    }
  
  @_alwaysEmitIntoClient nonisolated public func lineIntersection<T>(_ other: T, eoFill: Swift.Bool = false) -> some SwiftUICore.Shape where T : SwiftUICore.Shape {
        return _ShapeLineIntersection(self, other, eoFill: eoFill)
    }
  
  @_alwaysEmitIntoClient nonisolated public func lineSubtraction<T>(_ other: T, eoFill: Swift.Bool = false) -> some SwiftUICore.Shape where T : SwiftUICore.Shape {
        return _ShapeLineSubtraction(self, other, eoFill: eoFill)
    }
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _ShapeIntersection<T, U> : SwiftUICore.Shape where T : SwiftUICore.Shape, U : SwiftUICore.Shape {
  @usableFromInline
  internal var lhs: T
  @usableFromInline
  internal var rhs: U
  @usableFromInline
  internal var eoFill: Swift.Bool
  @_alwaysEmitIntoClient internal init(_ lhs: T, _ rhs: U, eoFill: Swift.Bool) {
        (self.lhs, self.rhs, self.eoFill) = (lhs, rhs, eoFill)
    }
  nonisolated public func path(in r: CoreFoundation.CGRect) -> SwiftUICore.Path
  nonisolated public func sizeThatFits(_ p: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
  public typealias AnimatableData = SwiftUICore.AnimatablePair<T.AnimatableData, U.AnimatableData>
  public var animatableData: SwiftUICore._ShapeIntersection<T, U>.AnimatableData {
    get
    set
  }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore._ShapeIntersection<T, U>, SwiftUICore.ForegroundStyle>
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _ShapeUnion<T, U> : SwiftUICore.Shape where T : SwiftUICore.Shape, U : SwiftUICore.Shape {
  @usableFromInline
  internal var lhs: T
  @usableFromInline
  internal var rhs: U
  @usableFromInline
  internal var eoFill: Swift.Bool
  @_alwaysEmitIntoClient internal init(_ lhs: T, _ rhs: U, eoFill: Swift.Bool) {
        (self.lhs, self.rhs, self.eoFill) = (lhs, rhs, eoFill)
    }
  nonisolated public func path(in r: CoreFoundation.CGRect) -> SwiftUICore.Path
  nonisolated public func sizeThatFits(_ p: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
  public typealias AnimatableData = SwiftUICore.AnimatablePair<T.AnimatableData, U.AnimatableData>
  public var animatableData: SwiftUICore._ShapeUnion<T, U>.AnimatableData {
    get
    set
  }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore._ShapeUnion<T, U>, SwiftUICore.ForegroundStyle>
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _ShapeSubtraction<T, U> : SwiftUICore.Shape where T : SwiftUICore.Shape, U : SwiftUICore.Shape {
  @usableFromInline
  internal var lhs: T
  @usableFromInline
  internal var rhs: U
  @usableFromInline
  internal var eoFill: Swift.Bool
  @_alwaysEmitIntoClient internal init(_ lhs: T, _ rhs: U, eoFill: Swift.Bool) {
        (self.lhs, self.rhs, self.eoFill) = (lhs, rhs, eoFill)
    }
  nonisolated public func path(in r: CoreFoundation.CGRect) -> SwiftUICore.Path
  nonisolated public func sizeThatFits(_ p: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
  public typealias AnimatableData = SwiftUICore.AnimatablePair<T.AnimatableData, U.AnimatableData>
  public var animatableData: SwiftUICore._ShapeSubtraction<T, U>.AnimatableData {
    get
    set
  }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore._ShapeSubtraction<T, U>, SwiftUICore.ForegroundStyle>
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _ShapeSymmetricDifference<T, U> : SwiftUICore.Shape where T : SwiftUICore.Shape, U : SwiftUICore.Shape {
  @usableFromInline
  internal var lhs: T
  @usableFromInline
  internal var rhs: U
  @usableFromInline
  internal var eoFill: Swift.Bool
  @_alwaysEmitIntoClient internal init(_ lhs: T, _ rhs: U, eoFill: Swift.Bool) {
        (self.lhs, self.rhs, self.eoFill) = (lhs, rhs, eoFill)
    }
  nonisolated public func path(in r: CoreFoundation.CGRect) -> SwiftUICore.Path
  nonisolated public func sizeThatFits(_ p: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
  public typealias AnimatableData = SwiftUICore.AnimatablePair<T.AnimatableData, U.AnimatableData>
  public var animatableData: SwiftUICore._ShapeSymmetricDifference<T, U>.AnimatableData {
    get
    set
  }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore._ShapeSymmetricDifference<T, U>, SwiftUICore.ForegroundStyle>
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _ShapeLineIntersection<T, U> : SwiftUICore.Shape where T : SwiftUICore.Shape, U : SwiftUICore.Shape {
  @usableFromInline
  internal var lhs: T
  @usableFromInline
  internal var rhs: U
  @usableFromInline
  internal var eoFill: Swift.Bool
  @_alwaysEmitIntoClient internal init(_ lhs: T, _ rhs: U, eoFill: Swift.Bool) {
        (self.lhs, self.rhs, self.eoFill) = (lhs, rhs, eoFill)
    }
  nonisolated public func path(in r: CoreFoundation.CGRect) -> SwiftUICore.Path
  nonisolated public func sizeThatFits(_ p: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
  public typealias AnimatableData = SwiftUICore.AnimatablePair<T.AnimatableData, U.AnimatableData>
  public var animatableData: SwiftUICore._ShapeLineIntersection<T, U>.AnimatableData {
    get
    set
  }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore._ShapeLineIntersection<T, U>, SwiftUICore.ForegroundStyle>
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _ShapeLineSubtraction<T, U> : SwiftUICore.Shape where T : SwiftUICore.Shape, U : SwiftUICore.Shape {
  @usableFromInline
  internal var lhs: T
  @usableFromInline
  internal var rhs: U
  @usableFromInline
  internal var eoFill: Swift.Bool
  @_alwaysEmitIntoClient internal init(_ lhs: T, _ rhs: U, eoFill: Swift.Bool) {
        (self.lhs, self.rhs, self.eoFill) = (lhs, rhs, eoFill)
    }
  nonisolated public func path(in r: CoreFoundation.CGRect) -> SwiftUICore.Path
  nonisolated public func sizeThatFits(_ p: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
  public typealias AnimatableData = SwiftUICore.AnimatablePair<T.AnimatableData, U.AnimatableData>
  public var animatableData: SwiftUICore._ShapeLineSubtraction<T, U>.AnimatableData {
    get
    set
  }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore._ShapeLineSubtraction<T, U>, SwiftUICore.ForegroundStyle>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@propertyWrapper public struct ScaledMetric<Value> : SwiftUICore.DynamicProperty where Value : Swift.BinaryFloatingPoint {
  public init(wrappedValue: Value, relativeTo textStyle: SwiftUICore.Font.TextStyle)
  public init(wrappedValue: Value)
  public var wrappedValue: Value {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ScaledMetric : Swift.Sendable where Value : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(*, deprecated, message: "Use @ScaledMetric")
@propertyWrapper public struct _ScaledValue : SwiftUICore.DynamicProperty {
  public init(wrappedValue: CoreFoundation.CGFloat, textStyle: SwiftUICore.Font.TextStyle = .body)
  public var wrappedValue: CoreFoundation.CGFloat {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore._ScaledValue : Swift.Sendable {
}
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "DynamicTypeSize")
@available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "DynamicTypeSize")
@available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "DynamicTypeSize")
@available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "DynamicTypeSize")
@available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "DynamicTypeSize")
public enum ContentSizeCategory : Swift.Hashable, Swift.CaseIterable {
  case extraSmall
  case small
  case medium
  case large
  case extraLarge
  case extraExtraLarge
  case extraExtraExtraLarge
  case accessibilityMedium
  case accessibilityLarge
  case accessibilityExtraLarge
  case accessibilityExtraExtraLarge
  case accessibilityExtraExtraExtraLarge
  @available(iOS 13.4, macOS 10.15.4, tvOS 13.4, watchOS 6.2, *)
  public var isAccessibilityCategory: Swift.Bool {
    get
  }
  public static func == (a: SwiftUICore.ContentSizeCategory, b: SwiftUICore.ContentSizeCategory) -> Swift.Bool
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "DynamicTypeSize")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "DynamicTypeSize")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "DynamicTypeSize")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "DynamicTypeSize")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "DynamicTypeSize")
  public typealias AllCases = [SwiftUICore.ContentSizeCategory]
  nonisolated public static var allCases: [SwiftUICore.ContentSizeCategory] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore.ContentSizeCategory : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ContentSizeCategory {
  @_alwaysEmitIntoClient public static func < (lhs: SwiftUICore.ContentSizeCategory, rhs: SwiftUICore.ContentSizeCategory) -> Swift.Bool {
        func comparisonValue(for sizeCategory: Self) -> Int {
            switch sizeCategory {
            case .extraSmall: return 0
            case .small: return 1
            case .medium: return 2
            case .large: return 3
            case .extraLarge: return 4
            case .extraExtraLarge: return 5
            case .extraExtraExtraLarge: return 6
            case .accessibilityMedium: return 7
            case .accessibilityLarge: return 8
            case .accessibilityExtraLarge: return 9
            case .accessibilityExtraExtraLarge: return 10
            case .accessibilityExtraExtraExtraLarge: return 11
            @unknown default: return 3
            }
        }
        return comparisonValue(for: lhs) < comparisonValue(for: rhs)
    }
  @_alwaysEmitIntoClient public static func <= (lhs: SwiftUICore.ContentSizeCategory, rhs: SwiftUICore.ContentSizeCategory) -> Swift.Bool {
        !(rhs < lhs)
    }
  @_alwaysEmitIntoClient public static func > (lhs: SwiftUICore.ContentSizeCategory, rhs: SwiftUICore.ContentSizeCategory) -> Swift.Bool {
        rhs < lhs
    }
  @_alwaysEmitIntoClient public static func >= (lhs: SwiftUICore.ContentSizeCategory, rhs: SwiftUICore.ContentSizeCategory) -> Swift.Bool {
        !(lhs < rhs)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, visionOS 1.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "dynamicTypeSize")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "dynamicTypeSize")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "dynamicTypeSize")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "dynamicTypeSize")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "dynamicTypeSize")
  public var sizeCategory: SwiftUICore.ContentSizeCategory {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Font {
  public static let largeTitle: SwiftUICore.Font
  public static let title: SwiftUICore.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static let title2: SwiftUICore.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static let title3: SwiftUICore.Font
  public static let headline: SwiftUICore.Font
  public static let subheadline: SwiftUICore.Font
  public static let body: SwiftUICore.Font
  public static let callout: SwiftUICore.Font
  public static let footnote: SwiftUICore.Font
  public static let caption: SwiftUICore.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static let caption2: SwiftUICore.Font
  @available(visionOS 1.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let extraLargeTitle: SwiftUICore.Font
  @available(visionOS 1.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let extraLargeTitle2: SwiftUICore.Font
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func system(_ style: SwiftUICore.Font.TextStyle, design: SwiftUICore.Font.Design? = nil, weight: SwiftUICore.Font.Weight? = nil) -> SwiftUICore.Font
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use `system(_:design:weight:)` instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `system(_:design:weight:)` instead.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use `system(_:design:weight:)` instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use `system(_:design:weight:)` instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use `system(_:design:weight:)` instead.")
  @_disfavoredOverload public static func system(_ style: SwiftUICore.Font.TextStyle, design: SwiftUICore.Font.Design = .default) -> SwiftUICore.Font
  public enum TextStyle : Swift.CaseIterable, Swift.Sendable {
    case largeTitle
    case title
    @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
    case title2
    @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
    case title3
    case headline
    case subheadline
    case body
    case callout
    case footnote
    case caption
    @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
    case caption2
    @available(visionOS 1.0, *)
    @available(iOS, unavailable)
    @available(macOS, unavailable)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    case extraLargeTitle
    @available(visionOS 1.0, *)
    @available(iOS, unavailable)
    @available(macOS, unavailable)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    case extraLargeTitle2
    public static let allCases: [SwiftUICore.Font.TextStyle]
    public static func == (a: SwiftUICore.Font.TextStyle, b: SwiftUICore.Font.TextStyle) -> Swift.Bool
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias AllCases = [SwiftUICore.Font.TextStyle]
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.Font.TextStyle {
  @_silgen_name("$s7SwiftUI4FontV9TextStyleO8allCasesSayAEGvsZ")
  @usableFromInline
  internal func _setTextStyleAllCases(_ allCases: [SwiftUICore.Font.TextStyle])
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Font {
  public func italic() -> SwiftUICore.Font
  public func smallCaps() -> SwiftUICore.Font
  public func lowercaseSmallCaps() -> SwiftUICore.Font
  public func uppercaseSmallCaps() -> SwiftUICore.Font
  public func monospacedDigit() -> SwiftUICore.Font
  public func weight(_ weight: SwiftUICore.Font.Weight) -> SwiftUICore.Font
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public func width(_ width: SwiftUICore.Font.Width) -> SwiftUICore.Font
  public func bold() -> SwiftUICore.Font
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func monospaced() -> SwiftUICore.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public func leading(_ leading: SwiftUICore.Font.Leading) -> SwiftUICore.Font
  @available(iOS, introduced: 14.0, deprecated: 14.0, renamed: "leading")
  @available(macOS, introduced: 11.0, deprecated: 11.0, renamed: "leading")
  @available(tvOS, introduced: 14.0, deprecated: 14.0, renamed: "leading")
  @available(watchOS, introduced: 7.0, deprecated: 7.0, renamed: "leading")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, renamed: "leading")
  public func _leading(_ leading: SwiftUICore.Font._Leading) -> SwiftUICore.Font
  public func _stylisticAlternative(_ alternative: SwiftUICore.Font._StylisticAlternative) -> SwiftUICore.Font
  @frozen public struct Weight : Swift.Hashable {
    package var value: CoreFoundation.CGFloat
    public static let ultraLight: SwiftUICore.Font.Weight
    public static let thin: SwiftUICore.Font.Weight
    public static let light: SwiftUICore.Font.Weight
    public static let regular: SwiftUICore.Font.Weight
    public static let medium: SwiftUICore.Font.Weight
    public static let semibold: SwiftUICore.Font.Weight
    public static let bold: SwiftUICore.Font.Weight
    public static let heavy: SwiftUICore.Font.Weight
    public static let black: SwiftUICore.Font.Weight
    public static func == (a: SwiftUICore.Font.Weight, b: SwiftUICore.Font.Weight) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public struct Width : Swift.Hashable, Swift.Sendable {
    public var value: CoreFoundation.CGFloat
    public static let compressed: SwiftUICore.Font.Width
    public static let condensed: SwiftUICore.Font.Width
    public static let standard: SwiftUICore.Font.Width
    public static let expanded: SwiftUICore.Font.Width
    public init(_ value: CoreFoundation.CGFloat)
    public static func == (a: SwiftUICore.Font.Width, b: SwiftUICore.Font.Width) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum _StylisticAlternative : Swift.Int, Swift.Hashable {
    case one
    case two
    case three
    case four
    case five
    case six
    case seven
    case eight
    case nine
    case ten
    case eleven
    case twelve
    case thirteen
    case fourteen
    case fifteen
    case sixteen
    case seventeen
    case eighteen
    case nineteen
    case twenty
    public init?(rawValue: Swift.Int)
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public enum Leading : Swift.Sendable {
    case standard
    case tight
    case loose
    public static func == (a: SwiftUICore.Font.Leading, b: SwiftUICore.Font.Leading) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum _Leading : Swift.Hashable {
    case tight
    case loose
    case standard
    public static func == (a: SwiftUICore.Font._Leading, b: SwiftUICore.Font._Leading) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(*, unavailable)
extension SwiftUICore.Font._Leading : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.Font._StylisticAlternative : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
extension SwiftUICore.Anchor.Source where Value == CoreFoundation.CGRect {
  public static func rect(_ r: CoreFoundation.CGRect) -> SwiftUICore.Anchor<Value>.Source
  public static var bounds: SwiftUICore.Anchor<CoreFoundation.CGRect>.Source {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.2)
extension SwiftUICore.View {
  @_alwaysEmitIntoClient nonisolated public func containerValue<V>(_ keyPath: Swift.WritableKeyPath<SwiftUICore.ContainerValues, V>, _ value: V) -> some SwiftUICore.View {
        modifier(_ContainerValueWritingModifier(keyPath: keyPath, value: value))
    }
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.2)
@frozen public struct _ContainerValueWritingModifier<Value> {
  public var keyPath: Swift.WritableKeyPath<SwiftUICore.ContainerValues, Value>
  public var value: Value
  @_alwaysEmitIntoClient public init(keyPath: Swift.WritableKeyPath<SwiftUICore.ContainerValues, Value>, value: Value) {
        self.keyPath = keyPath
        self.value = value
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._ContainerValueWritingModifier<Value>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUICore._ContainerValueWritingModifier<Value>>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._ContainerValueWritingModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol EnvironmentKey {
  associatedtype Value
  static var defaultValue: Self.Value { get }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  static func _valuesEqual(_ lhs: Self.Value, _ rhs: Self.Value) -> Swift.Bool
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentKey {
  public static func _valuesEqual(_ lhs: Self.Value, _ rhs: Self.Value) -> Swift.Bool
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentKey where Self.Value : Swift.Equatable {
  public static func _valuesEqual(_ lhs: Self.Value, _ rhs: Self.Value) -> Swift.Bool
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@dynamicMemberLookup @propertyWrapper public struct Bindable<Value> {
  public var wrappedValue: Value
  public var projectedValue: SwiftUICore.Bindable<Value> {
    get
  }
  @available(*, unavailable, message: "The wrapped value must be an object that conforms to Observable")
  public init(wrappedValue: Value)
  @available(*, unavailable, message: "The wrapped value must be an object that conforms to Observable")
  public init(projectedValue: SwiftUICore.Bindable<Value>)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Bindable where Value : AnyObject {
  public subscript<Subject>(dynamicMember keyPath: Swift.ReferenceWritableKeyPath<Value, Subject>) -> SwiftUICore.Binding<Subject> {
    get
  }
}
extension SwiftUICore.Bindable where Value : Combine.ObservableObject {
  @available(*, unavailable, message: "@Bindable only works with Observable types. For ObservableObject types, use @ObservedObject instead.")
  public init(wrappedValue: Value)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Bindable where Value : AnyObject, Value : Observation.Observable {
  public init(wrappedValue: Value)
  public init(_ wrappedValue: Value)
  public init(projectedValue: SwiftUICore.Bindable<Value>)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Bindable : Swift.Identifiable where Value : Swift.Identifiable {
  public var id: Value.ID {
    get
  }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias ID = Value.ID
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Bindable : Swift.Sendable where Value : Swift.Sendable {
}
extension Swift.OptionSet {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package mutating func setValue(_ value: Swift.Bool, for set: Self) {
        if value {
            formUnion(set)
        } else {
            subtract(set)
        }
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
extension SwiftUICore.View {
  @inlinable nonisolated public func anchorPreference<A, K>(key _: K.Type = K.self, value: SwiftUICore.Anchor<A>.Source, transform: @escaping (SwiftUICore.Anchor<A>) -> K.Value) -> some SwiftUICore.View where K : SwiftUICore.PreferenceKey {
        return modifier(_AnchorWritingModifier<A, K>(
            anchor: value, transform: transform))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
@frozen public struct _AnchorWritingModifier<AnchorValue, Key> : SwiftUICore.ViewModifier where Key : SwiftUICore.PreferenceKey {
  public var anchor: SwiftUICore.Anchor<AnchorValue>.Source
  public var transform: (SwiftUICore.Anchor<AnchorValue>) -> Key.Value
  @inlinable public init(anchor: SwiftUICore.Anchor<AnchorValue>.Source, transform: @escaping (SwiftUICore.Anchor<AnchorValue>) -> Key.Value) {
        self.anchor = anchor
        self.transform = transform
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._AnchorWritingModifier<AnchorValue, Key>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._AnchorWritingModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Optional : SwiftUICore.Gesture where Wrapped : SwiftUICore.Gesture {
  public typealias Value = Wrapped.Value
  nonisolated public static func _makeGesture(gesture: SwiftUICore._GraphValue<Swift.Optional<Wrapped>>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Wrapped.Value>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _FrameLayout {
  internal let width: CoreFoundation.CGFloat?
  internal let height: CoreFoundation.CGFloat?
  internal let alignment: SwiftUICore.Alignment
  @usableFromInline
  package init(width: CoreFoundation.CGFloat?, height: CoreFoundation.CGFloat?, alignment: SwiftUICore.Alignment)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func frame(width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil, alignment: SwiftUICore.Alignment = .center) -> some SwiftUICore.View {
        return modifier(
            _FrameLayout(width: width, height: height, alignment: alignment))
    }
  
  @available(*, deprecated, message: "Please pass one or more parameters.")
  @inlinable nonisolated public func frame() -> some SwiftUICore.View {
        return frame(width: nil, height: nil, alignment: .center)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _FlexFrameLayout {
  internal let minWidth: CoreFoundation.CGFloat?
  internal let idealWidth: CoreFoundation.CGFloat?
  internal let maxWidth: CoreFoundation.CGFloat?
  internal let minHeight: CoreFoundation.CGFloat?
  internal let idealHeight: CoreFoundation.CGFloat?
  internal let maxHeight: CoreFoundation.CGFloat?
  internal let alignment: SwiftUICore.Alignment
  @usableFromInline
  package init(minWidth: CoreFoundation.CGFloat? = nil, idealWidth: CoreFoundation.CGFloat? = nil, maxWidth: CoreFoundation.CGFloat? = nil, minHeight: CoreFoundation.CGFloat? = nil, idealHeight: CoreFoundation.CGFloat? = nil, maxHeight: CoreFoundation.CGFloat? = nil, alignment: SwiftUICore.Alignment)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func frame(minWidth: CoreFoundation.CGFloat? = nil, idealWidth: CoreFoundation.CGFloat? = nil, maxWidth: CoreFoundation.CGFloat? = nil, minHeight: CoreFoundation.CGFloat? = nil, idealHeight: CoreFoundation.CGFloat? = nil, maxHeight: CoreFoundation.CGFloat? = nil, alignment: SwiftUICore.Alignment = .center) -> some SwiftUICore.View {
        func areInNondecreasingOrder(
            _ min: CGFloat?, _ ideal: CGFloat?, _ max: CGFloat?
        ) -> Bool {
            let min = min ?? -.infinity
            let ideal = ideal ?? min
            let max = max ?? ideal
            return min <= ideal && ideal <= max
        }

        if !areInNondecreasingOrder(minWidth, idealWidth, maxWidth)
            || !areInNondecreasingOrder(minHeight, idealHeight, maxHeight)
        {
            os_log(
                .fault, log: Log.runtimeIssuesLog,
                "Contradictory frame constraints specified.")
        }

        return modifier(
            _FlexFrameLayout(
                minWidth: minWidth,
                idealWidth: idealWidth, maxWidth: maxWidth,
                minHeight: minHeight,
                idealHeight: idealHeight, maxHeight: maxHeight,
                alignment: alignment))
    }
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol TextRenderer : SwiftUICore.Animatable {
  func draw(layout: SwiftUICore.Text.Layout, in ctx: inout SwiftUICore.GraphicsContext)
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  func sizeThatFits(proposal: SwiftUICore.ProposedViewSize, text: SwiftUICore.TextProxy) -> CoreFoundation.CGSize
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  var displayPadding: SwiftUICore.EdgeInsets { get }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.TextRenderer {
  @_alwaysEmitIntoClient public func sizeThatFits(proposal: SwiftUICore.ProposedViewSize, text: SwiftUICore.TextProxy) -> CoreFoundation.CGSize { text.sizeThatFits(proposal) }
  @_alwaysEmitIntoClient public var displayPadding: SwiftUICore.EdgeInsets {
    get { EdgeInsets() }
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
public struct TextProxy {
  public func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
}
@available(*, unavailable)
extension SwiftUICore.TextProxy : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.View {
  @_alwaysEmitIntoClient nonisolated public func textRenderer<T>(_ renderer: T) -> some SwiftUICore.View where T : SwiftUICore.TextRenderer {
        return modifier(_TextRendererViewModifier(renderer: renderer))
    }
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol TextAttribute : Swift.Hashable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  public func customAttribute<T>(_ value: T) -> SwiftUICore.Text where T : SwiftUICore.TextAttribute
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _TextRendererViewModifier<Renderer> where Renderer : SwiftUICore.TextRenderer {
  @usableFromInline
  internal var renderer: Renderer
  @_alwaysEmitIntoClient internal init(renderer: Renderer) {
        self.renderer = renderer
    }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._TextRendererViewModifier : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  public struct Layout : Swift.RandomAccessCollection, Swift.Equatable {
    @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
    public var isTruncated: Swift.Bool {
      get
    }
    public var startIndex: Swift.Int {
      @_alwaysEmitIntoClient get { 0 }
    }
    public var endIndex: Swift.Int {
      get
    }
    public subscript(index: Swift.Int) -> SwiftUICore.Text.Layout.Line {
      get
    }
    @frozen public struct CharacterIndex : Swift.Comparable, Swift.Hashable, Swift.Strideable, Swift.Sendable {
      @usableFromInline
      package var value: Swift.Int
      @_alwaysEmitIntoClient internal init(value: Swift.Int) {
                self.value = value
            }
      @_alwaysEmitIntoClient public static func < (lhs: SwiftUICore.Text.Layout.CharacterIndex, rhs: SwiftUICore.Text.Layout.CharacterIndex) -> Swift.Bool {
                return lhs.value < rhs.value
            }
      @_alwaysEmitIntoClient public func advanced(by n: Swift.Int) -> SwiftUICore.Text.Layout.CharacterIndex {
                return .init(value: value + n)
            }
      @_alwaysEmitIntoClient public func distance(to other: SwiftUICore.Text.Layout.CharacterIndex) -> Swift.Int {
                return other.value - value
            }
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias Stride = Swift.Int
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public struct TypographicBounds : Swift.Equatable, Swift.Sendable {
      public var origin: CoreFoundation.CGPoint
      public var width: CoreFoundation.CGFloat
      public var ascent: CoreFoundation.CGFloat
      public var descent: CoreFoundation.CGFloat
      public var leading: CoreFoundation.CGFloat
      @_alwaysEmitIntoClient public init() {
                origin = .init()
                (width, ascent, descent, leading) = (0, 0, 0, 0)
            }
      public var rect: CoreFoundation.CGRect {
        @_alwaysEmitIntoClient get {
                    return CGRect(x: origin.x, y: origin.y - ascent,
                        width: width, height: ascent + descent)
                }
      }
      public static func == (a: SwiftUICore.Text.Layout.TypographicBounds, b: SwiftUICore.Text.Layout.TypographicBounds) -> Swift.Bool
    }
    public struct Line : Swift.RandomAccessCollection, Swift.Equatable {
      public var origin: CoreFoundation.CGPoint
      public var startIndex: Swift.Int {
        @_alwaysEmitIntoClient get { 0 }
      }
      public var endIndex: Swift.Int {
        get
      }
      public subscript(index: Swift.Int) -> SwiftUICore.Text.Layout.Run {
        get
      }
      public var typographicBounds: SwiftUICore.Text.Layout.TypographicBounds {
        get
      }
      public static func == (lhs: SwiftUICore.Text.Layout.Line, rhs: SwiftUICore.Text.Layout.Line) -> Swift.Bool
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias Element = SwiftUICore.Text.Layout.Run
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias Index = Swift.Int
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias Indices = Swift.Range<Swift.Int>
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias Iterator = Swift.IndexingIterator<SwiftUICore.Text.Layout.Line>
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias SubSequence = Swift.Slice<SwiftUICore.Text.Layout.Line>
    }
    public struct Run : Swift.RandomAccessCollection, Swift.Equatable {
      public var startIndex: Swift.Int {
        @_alwaysEmitIntoClient get { 0 }
      }
      public var endIndex: Swift.Int {
        get
      }
      public subscript(index: Swift.Int) -> SwiftUICore.Text.Layout.RunSlice {
        @_alwaysEmitIntoClient get {
                    return self[index ..< index &+ 1]
                }
      }
      public subscript(bounds: Swift.Range<Swift.Int>) -> SwiftUICore.Text.Layout.RunSlice {
        @_alwaysEmitIntoClient get {
                    return RunSlice(run: self, indices: bounds)
                }
      }
      public subscript<T>(key: T.Type) -> T? where T : SwiftUICore.TextAttribute {
        get
      }
      public var layoutDirection: SwiftUICore.LayoutDirection {
        get
      }
      public var typographicBounds: SwiftUICore.Text.Layout.TypographicBounds {
        get
      }
      public var characterIndices: [SwiftUICore.Text.Layout.CharacterIndex] {
        get
      }
      public static func == (lhs: SwiftUICore.Text.Layout.Run, rhs: SwiftUICore.Text.Layout.Run) -> Swift.Bool
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias Element = SwiftUICore.Text.Layout.RunSlice
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias Index = Swift.Int
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias Indices = Swift.Range<Swift.Int>
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias Iterator = Swift.IndexingIterator<SwiftUICore.Text.Layout.Run>
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias SubSequence = SwiftUICore.Text.Layout.RunSlice
    }
    public struct RunSlice : Swift.RandomAccessCollection, Swift.Equatable {
      public var run: SwiftUICore.Text.Layout.Run
      public var indices: Swift.Range<Swift.Int>
      public init(run: SwiftUICore.Text.Layout.Run, indices: Swift.Range<Swift.Int>)
      public var startIndex: Swift.Int {
        @_alwaysEmitIntoClient get { indices.lowerBound }
      }
      public var endIndex: Swift.Int {
        @_alwaysEmitIntoClient get { indices.upperBound }
      }
      public subscript(index: Swift.Int) -> SwiftUICore.Text.Layout.RunSlice {
        @_alwaysEmitIntoClient get { self[index ..< index &+ 1] }
      }
      public subscript(bounds: Swift.Range<Swift.Int>) -> SwiftUICore.Text.Layout.RunSlice {
        get
      }
      public subscript<T>(key: T.Type) -> T? where T : SwiftUICore.TextAttribute {
        @_alwaysEmitIntoClient get { run[key] }
      }
      public var typographicBounds: SwiftUICore.Text.Layout.TypographicBounds {
        get
      }
      public var characterIndices: [SwiftUICore.Text.Layout.CharacterIndex] {
        get
      }
      public static func == (a: SwiftUICore.Text.Layout.RunSlice, b: SwiftUICore.Text.Layout.RunSlice) -> Swift.Bool
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias Element = SwiftUICore.Text.Layout.RunSlice
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias Index = Swift.Int
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias Indices = Swift.Range<Swift.Int>
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias Iterator = Swift.IndexingIterator<SwiftUICore.Text.Layout.RunSlice>
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias SubSequence = SwiftUICore.Text.Layout.RunSlice
    }
    public static func == (a: SwiftUICore.Text.Layout, b: SwiftUICore.Text.Layout) -> Swift.Bool
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias Element = SwiftUICore.Text.Layout.Line
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias Index = Swift.Int
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias Indices = Swift.Range<Swift.Int>
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias Iterator = Swift.IndexingIterator<SwiftUICore.Text.Layout>
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias SubSequence = Swift.Slice<SwiftUICore.Text.Layout>
  }
}
@available(*, unavailable)
extension SwiftUICore.Text.Layout : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.Text.Layout.Line : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.Text.Layout.Run : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.Text.Layout.RunSlice : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  public struct LayoutKey : SwiftUICore.PreferenceKey, Swift.Sendable {
    public struct AnchoredLayout : Swift.Equatable {
      public var origin: SwiftUICore.Anchor<CoreFoundation.CGPoint>
      public var layout: SwiftUICore.Text.Layout
      public static func == (a: SwiftUICore.Text.LayoutKey.AnchoredLayout, b: SwiftUICore.Text.LayoutKey.AnchoredLayout) -> Swift.Bool
    }
    public typealias Value = [SwiftUICore.Text.LayoutKey.AnchoredLayout]
    public static let defaultValue: SwiftUICore.Text.LayoutKey.Value
    public static func reduce(value: inout SwiftUICore.Text.LayoutKey.Value, nextValue: () -> SwiftUICore.Text.LayoutKey.Value)
  }
}
@available(*, unavailable)
extension SwiftUICore.Text.LayoutKey.AnchoredLayout : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text.Layout {
  @frozen public struct DrawingOptions : Swift.OptionSet {
    public let rawValue: Swift.UInt32
    @_alwaysEmitIntoClient public init(rawValue: Swift.UInt32) { self.rawValue = rawValue }
    @_alwaysEmitIntoClient public static var disablesSubpixelQuantization: SwiftUICore.Text.Layout.DrawingOptions {
      get {
            return .init(rawValue: 1 << 0)
        }
    }
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias ArrayLiteralElement = SwiftUICore.Text.Layout.DrawingOptions
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias Element = SwiftUICore.Text.Layout.DrawingOptions
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias RawValue = Swift.UInt32
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GraphicsContext {
  public func draw(_ line: SwiftUICore.Text.Layout.Line, options: SwiftUICore.Text.Layout.DrawingOptions = .init())
  public func draw(_ run: SwiftUICore.Text.Layout.Run, options: SwiftUICore.Text.Layout.DrawingOptions = .init())
  public func draw(_ slice: SwiftUICore.Text.Layout.RunSlice, options: SwiftUICore.Text.Layout.DrawingOptions = .init())
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "foregroundStyle(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "foregroundStyle(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "foregroundStyle(_:)")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "foregroundStyle(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "foregroundStyle(_:)")
  nonisolated public func foregroundColor(_ color: SwiftUICore.Color?) -> SwiftUICore.Text
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func foregroundStyle<S>(_ style: S) -> SwiftUICore.Text where S : SwiftUICore.ShapeStyle
  nonisolated public func font(_ font: SwiftUICore.Font?) -> SwiftUICore.Text
  nonisolated public func fontWeight(_ weight: SwiftUICore.Font.Weight?) -> SwiftUICore.Text
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func fontWidth(_ width: SwiftUICore.Font.Width?) -> SwiftUICore.Text
  nonisolated public func bold() -> SwiftUICore.Text
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func bold(_ isActive: Swift.Bool) -> SwiftUICore.Text
  nonisolated public func italic() -> SwiftUICore.Text
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func italic(_ isActive: Swift.Bool) -> SwiftUICore.Text
  @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
  nonisolated public func monospaced(_ isActive: Swift.Bool = true) -> SwiftUICore.Text
  @available(iOS 16.1, macOS 13.0, tvOS 16.1, watchOS 9.1, *)
  nonisolated public func fontDesign(_ design: SwiftUICore.Font.Design?) -> SwiftUICore.Text
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public func monospacedDigit() -> SwiftUICore.Text
  nonisolated public func strikethrough(_ isActive: Swift.Bool = true, color: SwiftUICore.Color? = nil) -> SwiftUICore.Text
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func strikethrough(_ isActive: Swift.Bool = true, pattern: SwiftUICore.Text.LineStyle.Pattern, color: SwiftUICore.Color? = nil) -> SwiftUICore.Text
  nonisolated public func underline(_ isActive: Swift.Bool = true, color: SwiftUICore.Color? = nil) -> SwiftUICore.Text
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func underline(_ isActive: Swift.Bool = true, pattern: SwiftUICore.Text.LineStyle.Pattern, color: SwiftUICore.Color? = nil) -> SwiftUICore.Text
  nonisolated public func kerning(_ kerning: CoreFoundation.CGFloat) -> SwiftUICore.Text
  nonisolated public func tracking(_ tracking: CoreFoundation.CGFloat) -> SwiftUICore.Text
  nonisolated public func baselineOffset(_ baselineOffset: CoreFoundation.CGFloat) -> SwiftUICore.Text
  nonisolated public func _stylisticAlternative(_ alternative: SwiftUICore.Font._StylisticAlternative) -> SwiftUICore.Text
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public struct Scale : Swift.Sendable, Swift.Hashable {
    public static let `default`: SwiftUICore.Text.Scale
    public static let secondary: SwiftUICore.Text.Scale
    public static func == (a: SwiftUICore.Text.Scale, b: SwiftUICore.Text.Scale) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func textScale(_ scale: SwiftUICore.Text.Scale, isEnabled: Swift.Bool = true) -> SwiftUICore.Text
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func textScale(_ scale: SwiftUICore.Text.Scale, isEnabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
@_alwaysEmitIntoClient internal func springStiffness(response: Swift.Double) -> Swift.Double {
    if response <= 0 {
        return .infinity
    } else {
        let freq = (2.0 * Double.pi) / response
        return freq * freq
    }
}
@_alwaysEmitIntoClient internal func springDamping(fraction: Swift.Double, stiffness: Swift.Double) -> Swift.Double {
    let criticalDamping = 2 * stiffness.squareRoot()
    return criticalDamping * fraction
}
@_alwaysEmitIntoClient internal func springDampingFraction(bounce: Swift.Double) -> Swift.Double {
    if bounce <= -1.0 {
         
         
         
        .infinity
    } else if bounce < 0.0 {
         
        1.0 / (bounce + 1.0)
    } else if bounce == 0.0 {
         
        1.0
    } else {
         
         
        1.0 - min(bounce, 1.0)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Animation {
  @_alwaysEmitIntoClient public static func spring(duration: Foundation.TimeInterval = 0.5, bounce: Swift.Double = 0.0, blendDuration: Swift.Double = 0) -> SwiftUICore.Animation {
        spring(
            response: duration,
            dampingFraction: springDampingFraction(bounce: bounce),
            blendDuration: blendDuration)
    }
  @_disfavoredOverload public static func spring(response: Swift.Double = 0.5, dampingFraction: Swift.Double = 0.825, blendDuration: Foundation.TimeInterval = 0) -> SwiftUICore.Animation
  @_alwaysEmitIntoClient public static var spring: SwiftUICore.Animation {
    get { spring() }
  }
  @_disfavoredOverload public static func interactiveSpring(response: Swift.Double = 0.15, dampingFraction: Swift.Double = 0.86, blendDuration: Foundation.TimeInterval = 0.25) -> SwiftUICore.Animation
  @_alwaysEmitIntoClient public static var interactiveSpring: SwiftUICore.Animation {
    get { interactiveSpring() }
  }
  @_alwaysEmitIntoClient public static func interactiveSpring(duration: Foundation.TimeInterval = 0.15, extraBounce: Swift.Double = 0.0, blendDuration: Foundation.TimeInterval = 0.25) -> SwiftUICore.Animation {
        spring(
            duration: duration, bounce: 0.15 + extraBounce,
            blendDuration: blendDuration)
    }
  @_alwaysEmitIntoClient public static var smooth: SwiftUICore.Animation {
    get { smooth() }
  }
  @_alwaysEmitIntoClient public static func smooth(duration: Foundation.TimeInterval = 0.5, extraBounce: Swift.Double = 0.0) -> SwiftUICore.Animation {
        spring(duration: duration, bounce: extraBounce)
    }
  @_alwaysEmitIntoClient public static var snappy: SwiftUICore.Animation {
    get { snappy() }
  }
  @_alwaysEmitIntoClient public static func snappy(duration: Foundation.TimeInterval = 0.5, extraBounce: Swift.Double = 0.0) -> SwiftUICore.Animation {
        spring(duration: duration, bounce: 0.15 + extraBounce)
    }
  @_alwaysEmitIntoClient public static var bouncy: SwiftUICore.Animation {
    get { bouncy() }
  }
  @_alwaysEmitIntoClient public static func bouncy(duration: Foundation.TimeInterval = 0.5, extraBounce: Swift.Double = 0.0) -> SwiftUICore.Animation {
        spring(duration: duration, bounce: 0.3 + extraBounce)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _AnimationModifier<Value> : SwiftUICore.ViewModifier where Value : Swift.Equatable {
  public var animation: SwiftUICore.Animation?
  public var value: Value
  @inlinable public init(animation: SwiftUICore.Animation?, value: Value) {
        self.animation = animation
        self.value = value
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._AnimationModifier<Value>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUICore._AnimationModifier<Value>>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._AnimationModifier : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _AnimationView<Content> : SwiftUICore.View where Content : Swift.Equatable, Content : SwiftUICore.View {
  public var content: Content
  public var animation: SwiftUICore.Animation?
  @inlinable public init(content: Content, animation: SwiftUICore.Animation?) {
        self.content = content
        self.animation = animation
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore._AnimationView<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUICore._AnimationView<Content>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._AnimationView : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._AnimationModifier : Swift.Equatable {
  public static func == (a: SwiftUICore._AnimationModifier<Value>, b: SwiftUICore._AnimationModifier<Value>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func animation<V>(_ animation: SwiftUICore.Animation?, value: V) -> some SwiftUICore.View where V : Swift.Equatable {
        return modifier(_AnimationModifier(animation: animation, value: value))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View where Self : Swift.Equatable {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @inlinable nonisolated public func animation(_ animation: SwiftUICore.Animation?) -> some SwiftUICore.View {
        return _AnimationView(content: self, animation: animation)
    }
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.2)
public struct ContainerValues {
  public subscript<Key>(key: Key.Type) -> Key.Value where Key : SwiftUICore.ContainerValueKey {
    get
    set
  }
  public func tag<V>(for type: V.Type) -> V? where V : Swift.Hashable
  public func hasTag<V>(_ tag: V) -> Swift.Bool where V : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUICore.ContainerValues : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _GraphInputs {
}
@available(*, unavailable)
extension SwiftUICore._GraphInputs : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol _GraphInputsModifier {
  static func _makeInputs(modifier: SwiftUICore._GraphValue<Self>, inputs: inout SwiftUICore._GraphInputs)
}
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, deprecated, introduced: 6.0, renamed: "WatchDisplayVariant")
@available(visionOS, unavailable)
public enum _DeviceVariant : Swift.Equatable {
  case compact
  case regular
  case h394
  case h448
  public static func == (a: SwiftUICore._DeviceVariant, b: SwiftUICore._DeviceVariant) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore._DeviceVariant : Swift.Sendable {
}
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, introduced: 6.0, deprecated: 8.0, renamed: "watchDisplayVariant")
@available(visionOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  public var _deviceVariant: SwiftUICore._DeviceVariant {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct Color : Swift.Hashable, Swift.CustomStringConvertible, Swift.Sendable {
  package var provider: SwiftUICore.AnyColorBox
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public init<T>(_ color: T) where T : Swift.Hashable, T : SwiftUICore.ShapeStyle, T.Resolved == SwiftUICore.Color.Resolved
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func resolve(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color.Resolved
  @available(iOS, introduced: 14.0, deprecated: 100000.0, renamed: "resolve(in:)")
  @available(macOS, introduced: 11.0, deprecated: 100000.0, renamed: "resolve(in:)")
  @available(tvOS, introduced: 14.0, deprecated: 100000.0, renamed: "resolve(in:)")
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, renamed: "resolve(in:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "resolve(in:)")
  public var cgColor: CoreGraphics.CGColor? {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: SwiftUICore.Color, rhs: SwiftUICore.Color) -> Swift.Bool
  public var description: Swift.String {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color {
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color : SwiftUICore.View {
  public typealias Body = Swift.Never
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package class AnyColorBox : SwiftUICore.AnyShapeStyleBox, @unchecked Swift.Sendable {
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUICore.AnyColorBox : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable @_Concurrency.MainActor @preconcurrency public func _onBindingChange<Value>(_ binding: SwiftUICore.Binding<Value>, perform action: @escaping (Value) -> Swift.Void) -> some SwiftUICore.View where Value : Swift.Equatable {
        return modifier(_BindingActionModifier(
            binding: binding, action: action))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _BindingActionModifier<Value> : SwiftUICore.ViewModifier where Value : Swift.Equatable {
  public var binding: SwiftUICore.Binding<Value>
  public var action: (Value) -> Swift.Void
  @inlinable public init(binding: SwiftUICore.Binding<Value>, action: @escaping (Value) -> Swift.Void) {
        (self.binding, self.action) = (binding, action)
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._BindingActionModifier<Value>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUICore._BindingActionModifier<Value>>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._BindingActionModifier : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @available(iOS, deprecated: 17.0, message: "Use `onChange` with a two or zero parameter action closure instead.")
  @available(macOS, deprecated: 14.0, message: "Use `onChange` with a two or zero parameter action closure instead.")
  @available(tvOS, deprecated: 17.0, message: "Use `onChange` with a two or zero parameter action closure instead.")
  @available(watchOS, deprecated: 10.0, message: "Use `onChange` with a two or zero parameter action closure instead.")
  @available(visionOS, deprecated: 1.0, message: "Use `onChange` with a two or zero parameter action closure instead.")
  @inlinable nonisolated public func onChange<V>(of value: V, perform action: @escaping (_ newValue: V) -> Swift.Void) -> some SwiftUICore.View where V : Swift.Equatable {
        modifier(_ValueActionModifier(value: value, action: action))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _ValueActionModifier<Value> : SwiftUICore.ViewModifier where Value : Swift.Equatable {
  public typealias Body = Swift.Never
  public var value: Value
  public var action: (Value) -> Swift.Void
  @inlinable public init(value: Value, action: @escaping (Value) -> Swift.Void) {
        (self.value, self.action) = (value, action)
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._ValueActionModifier<Value>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUICore._ValueActionModifier<Value>>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
}
@available(*, unavailable)
extension SwiftUICore._ValueActionModifier : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  nonisolated public func onChange<V>(of value: V, initial: Swift.Bool = false, _ action: @escaping (_ oldValue: V, _ newValue: V) -> Swift.Void) -> some SwiftUICore.View where V : Swift.Equatable
  
  nonisolated public func onChange<V>(of value: V, initial: Swift.Bool = false, _ action: @escaping () -> Swift.Void) -> some SwiftUICore.View where V : Swift.Equatable
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct AnimationState<Value> where Value : SwiftUICore.VectorArithmetic {
  public init()
  public subscript<K>(key: K.Type) -> K.Value where K : SwiftUICore.AnimationStateKey {
    get
    set
  }
}
@available(*, unavailable)
extension SwiftUICore.AnimationState : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol AnimationStateKey {
  associatedtype Value
  static var defaultValue: Self.Value { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Transaction {
  public init(animation: SwiftUICore.Animation?)
  public var animation: SwiftUICore.Animation? {
    get
    set
  }
  public var disablesAnimations: Swift.Bool {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_typeEraser(AnyView) @preconcurrency @_Concurrency.MainActor public protocol View {
  nonisolated static func _makeView(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated static func _makeViewList(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _UnaryViewAdaptor<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  public var content: Content
  @inlinable public init(_ content: Content) { self.content = content }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore._UnaryViewAdaptor<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._UnaryViewAdaptor : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct AnimatablePair<First, Second> : SwiftUICore.VectorArithmetic where First : SwiftUICore.VectorArithmetic, Second : SwiftUICore.VectorArithmetic {
  public var first: First
  public var second: Second
  @inlinable public init(_ first: First, _ second: Second) {
        self.first = first
        self.second = second
    }
  @inlinable package subscript() -> (First, Second) {
    get { return (first, second) }
    set { (first, second) = newValue }
  }
  @_transparent public static var zero: SwiftUICore.AnimatablePair<First, Second> {
    @_transparent get {
        return .init(First.zero, Second.zero)
    }
  }
  @_transparent public static func += (lhs: inout SwiftUICore.AnimatablePair<First, Second>, rhs: SwiftUICore.AnimatablePair<First, Second>) {
        lhs.first += rhs.first
        lhs.second += rhs.second
    }
  @_transparent public static func -= (lhs: inout SwiftUICore.AnimatablePair<First, Second>, rhs: SwiftUICore.AnimatablePair<First, Second>) {
        lhs.first -= rhs.first
        lhs.second -= rhs.second
    }
  @_transparent public static func + (lhs: SwiftUICore.AnimatablePair<First, Second>, rhs: SwiftUICore.AnimatablePair<First, Second>) -> SwiftUICore.AnimatablePair<First, Second> {
        return .init(lhs.first + rhs.first, lhs.second + rhs.second)
    }
  @_transparent public static func - (lhs: SwiftUICore.AnimatablePair<First, Second>, rhs: SwiftUICore.AnimatablePair<First, Second>) -> SwiftUICore.AnimatablePair<First, Second> {
        return .init(lhs.first - rhs.first, lhs.second - rhs.second)
    }
  @_transparent public mutating func scale(by rhs: Swift.Double) {
        first.scale(by: rhs)
        second.scale(by: rhs)
    }
  @_transparent public var magnitudeSquared: Swift.Double {
    @_transparent get {
        return first.magnitudeSquared + second.magnitudeSquared
    }
  }
  public static func == (a: SwiftUICore.AnimatablePair<First, Second>, b: SwiftUICore.AnimatablePair<First, Second>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.AnimatablePair : Swift.Sendable where First : Swift.Sendable, Second : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@preconcurrency @_Concurrency.MainActor public protocol Gesture<Value> {
  associatedtype Value
  nonisolated static func _makeGesture(gesture: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Self.Value>
  associatedtype Body : SwiftUICore.Gesture
  @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Never : SwiftUICore.Gesture {
  public typealias Value = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Gesture where Self.Value == Self.Body.Value {
  nonisolated public static func _makeGesture(gesture: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Self.Body.Value>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _GestureInputs {
}
@available(*, unavailable)
extension SwiftUICore._GestureInputs : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _GestureOutputs<Value> {
}
@available(*, unavailable)
extension SwiftUICore._GestureOutputs : Swift.Sendable {
}
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(iOS, introduced: 14.0, deprecated: 100000.0, message: "Use Color(cgColor:) when converting a CGColor, or create a standard Color directly")
@available(macOS, introduced: 11.0, deprecated: 100000.0, message: "Use Color(cgColor:) when converting a CGColor, or create a standard Color directly")
@available(tvOS, introduced: 14.0, deprecated: 100000.0, message: "Use Color(cgColor:) when converting a CGColor, or create a standard Color directly")
@available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "Use Color(cgColor:) when converting a CGColor, or create a standard Color directly")
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use Color(cgColor:) when converting a CGColor, or create a standard Color directly")
extension SwiftUICore.Color {
  public init(_ cgColor: CoreGraphics.CGColor)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color {
  public init(cgColor: CoreGraphics.CGColor)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color.Resolved {
  public var cgColor: CoreGraphics.CGColor {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _LayoutTraits : Swift.Equatable {
  public static func == (a: SwiftUICore._LayoutTraits, b: SwiftUICore._LayoutTraits) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore._LayoutTraits : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore._LayoutTraits : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ViewModifier where Self : SwiftUICore.Animatable {
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct EmptyView : SwiftUICore.View {
  @inlinable public init() {}
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.EmptyView>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUICore.EmptyView>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VariadicView_Children : SwiftUICore.View {
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUICore._VariadicView.Children>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VariadicView_Children : Swift.RandomAccessCollection {
  public struct Element : SwiftUICore.View, Swift.Identifiable {
    public var id: Swift.AnyHashable {
      get
    }
    public func id<ID>(as _: ID.Type = ID.self) -> ID? where ID : Swift.Hashable
    public subscript<Trait>(key: Trait.Type) -> Trait.Value where Trait : SwiftUICore._ViewTraitKey {
      get
      set
    }
    nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore._VariadicView_Children.Element>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias Body = Swift.Never
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias ID = Swift.AnyHashable
  }
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(index: Swift.Int) -> SwiftUICore._VariadicView_Children.Element {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Index = Swift.Int
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Indices = Swift.Range<Swift.Int>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Iterator = Swift.IndexingIterator<SwiftUICore._VariadicView_Children>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias SubSequence = Swift.Slice<SwiftUICore._VariadicView_Children>
}
@available(*, unavailable)
extension SwiftUICore._VariadicView_Children.Element : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.RangeReplaceableCollection where Self : Swift.MutableCollection {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  public mutating func remove(atOffsets offsets: Foundation.IndexSet)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.MutableCollection {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  public mutating func move(fromOffsets source: Foundation.IndexSet, toOffset destination: Swift.Int)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color {
  public init(_ name: Swift.String, bundle: Foundation.Bundle? = nil)
  public static let _mainNamedBundle: Foundation.Bundle?
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color {
  public init(_ resource: DeveloperToolsSupport.ColorResource)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct TimeDataSource<Value> {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.TimeDataSource : Swift.Sendable where Value : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.TimeDataSource {
  public static var currentDate: SwiftUICore.TimeDataSource<Foundation.Date> {
    get
  }
  public static func durationOffset(to date: Foundation.Date) -> SwiftUICore.TimeDataSource<Swift.Duration>
  public static func dateRange(startingAt date: Foundation.Date) -> SwiftUICore.TimeDataSource<Swift.Range<Foundation.Date>>
  public static func dateRange(endingAt date: Foundation.Date) -> SwiftUICore.TimeDataSource<Swift.Range<Foundation.Date>>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public enum SystemFormatStyle : Swift.Sendable {
}
extension SwiftUICore.Text {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public init<V, F>(_ source: SwiftUICore.TimeDataSource<V>, format: F) where V == F.FormatInput, F : Foundation.DiscreteFormatStyle, F.FormatOutput == Foundation.AttributedString
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @_disfavoredOverload public init<V, F>(_ source: SwiftUICore.TimeDataSource<V>, format: F) where V == F.FormatInput, F : Foundation.DiscreteFormatStyle, F.FormatOutput == Swift.String
}
extension SwiftUICore.LocalizedStringKey.StringInterpolation {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation<V, F>(_ source: SwiftUICore.TimeDataSource<V>, format: F) where V == F.FormatInput, F : Foundation.DiscreteFormatStyle, F.FormatOutput == Foundation.AttributedString
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @_disfavoredOverload @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation<V, F>(_ source: SwiftUICore.TimeDataSource<V>, format: F) where V == F.FormatInput, F : Foundation.DiscreteFormatStyle, F.FormatOutput == Swift.String
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct ContainerRelativeShape : SwiftUICore.Shape {
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  @inlinable public init() {}
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.ContainerRelativeShape, SwiftUICore.ForegroundStyle>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape where Self == SwiftUICore.ContainerRelativeShape {
  @_alwaysEmitIntoClient public static var containerRelative: SwiftUICore.ContainerRelativeShape {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ContainerRelativeShape : SwiftUICore.InsettableShape {
  @inlinable nonisolated public func inset(by amount: CoreFoundation.CGFloat) -> some SwiftUICore.InsettableShape {
        return _Inset(amount: amount)
    }
  
  @usableFromInline
  @frozen internal struct _Inset : SwiftUICore.InsettableShape {
    @usableFromInline
    internal var amount: CoreFoundation.CGFloat
    @inlinable internal init(amount: CoreFoundation.CGFloat) {
            self.amount = amount
        }
    @usableFromInline
    nonisolated internal func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
    @usableFromInline
    internal var animatableData: CoreFoundation.CGFloat {
      get
      set
    }
    @inlinable nonisolated internal func inset(by amount: CoreFoundation.CGFloat) -> SwiftUICore.ContainerRelativeShape._Inset {
            var copy = self
            copy.amount += amount
            return copy
        }
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    @usableFromInline
    internal typealias AnimatableData = CoreFoundation.CGFloat
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    @usableFromInline
    internal typealias Body = SwiftUICore._ShapeView<SwiftUICore.ContainerRelativeShape._Inset, SwiftUICore.ForegroundStyle>
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    @usableFromInline
    internal typealias InsetShape = SwiftUICore.ContainerRelativeShape._Inset
  }
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias InsetShape = @_opaqueReturnTypeOf("$s7SwiftUI22ContainerRelativeShapeV5inset2byQr12CoreGraphics7CGFloatV_tF", 0) __
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle {
  public func _fillingContainerShape() -> some SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func containerShape<T>(_ shape: T) -> some SwiftUICore.View where T : SwiftUICore.InsettableShape {
        modifier(_ContainerShapeModifier(shape: shape))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func _containerShape<T>(_ shape: T) -> some SwiftUICore.View where T : SwiftUICore.InsettableShape
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _ContainerShapeModifier<Shape> where Shape : SwiftUICore.InsettableShape {
  public var shape: Shape
  @inlinable public init(shape: Shape) { self.shape = shape }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._ContainerShapeModifier<Shape>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._ContainerShapeModifier : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol KeyframeTrackContent<Value> {
  associatedtype Value : SwiftUICore.Animatable = Self.Body.Value
  associatedtype Body : SwiftUICore.KeyframeTrackContent
  @SwiftUICore.KeyframeTrackContentBuilder<Self.Value> var body: Self.Body { get }
  func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframeTrackContent<Self.Value>)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.KeyframeTrackContent where Self.Value == Self.Body.Value {
  public func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframeTrackContent<Self.Value>)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _ResolvedKeyframeTrackContent<Value> where Value : SwiftUICore.Animatable {
}
@available(*, unavailable)
extension SwiftUICore._ResolvedKeyframeTrackContent : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct CubicKeyframe<Value> : SwiftUICore.KeyframeTrackContent where Value : SwiftUICore.Animatable {
  public init(_ to: Value, duration: Foundation.TimeInterval, startVelocity: Value? = nil, endVelocity: Value? = nil)
  public func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframeTrackContent<Value>)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = SwiftUICore.CubicKeyframe<Value>
}
@available(*, unavailable)
extension SwiftUICore.CubicKeyframe : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct SpringKeyframe<Value> : SwiftUICore.KeyframeTrackContent where Value : SwiftUICore.Animatable {
  public init(_ to: Value, duration: Foundation.TimeInterval? = nil, spring: SwiftUICore.Spring = Spring(), startVelocity: Value? = nil)
  public func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframeTrackContent<Value>)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = SwiftUICore.SpringKeyframe<Value>
}
@available(*, unavailable)
extension SwiftUICore.SpringKeyframe : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct LinearKeyframe<Value> : SwiftUICore.KeyframeTrackContent where Value : SwiftUICore.Animatable {
  public init(_ to: Value, duration: Foundation.TimeInterval, timingCurve: SwiftUICore.UnitCurve = .linear)
  public func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframeTrackContent<Value>)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = SwiftUICore.LinearKeyframe<Value>
}
@available(*, unavailable)
extension SwiftUICore.LinearKeyframe : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct MoveKeyframe<Value> : SwiftUICore.KeyframeTrackContent where Value : SwiftUICore.Animatable {
  public init(_ to: Value)
  public func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframeTrackContent<Value>)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = SwiftUICore.MoveKeyframe<Value>
}
@available(*, unavailable)
extension SwiftUICore.MoveKeyframe : Swift.Sendable {
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@globalActor public actor _ImpossibleActor : Swift.Sendable {
  public static var shared: SwiftUICore._ImpossibleActor
  nonisolated public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ActorType = SwiftUICore._ImpossibleActor
  @objc deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_marker @SwiftUICore._ImpossibleActor public protocol _RemoveGlobalActorIsolation {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct PhaseAnimator<Phase, Content> : SwiftUICore.View where Phase : Swift.Equatable, Content : SwiftUICore.View {
  public init(_ phases: some Sequence<Phase>, trigger: some Equatable, @SwiftUICore.ViewBuilder content: @escaping (Phase) -> Content, animation: @escaping (Phase) -> SwiftUICore.Animation? = { _ in .default })
  public init(_ phases: some Sequence<Phase>, @SwiftUICore.ViewBuilder content: @escaping (Phase) -> Content, animation: @escaping (Phase) -> SwiftUICore.Animation? = { _ in .default })
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI13PhaseAnimatorV4bodyQrvp", 0) __<Phase, Content>
}
@available(*, unavailable)
extension SwiftUICore.PhaseAnimator : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  nonisolated public func phaseAnimator<Phase>(_ phases: some Sequence<Phase>, trigger: some Equatable, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.PlaceholderContentView<Self>, Phase) -> some View, animation: @escaping (Phase) -> SwiftUICore.Animation? = { _ in .default }) -> some SwiftUICore.View where Phase : Swift.Equatable
  
  nonisolated public func phaseAnimator<Phase>(_ phases: some Sequence<Phase>, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.PlaceholderContentView<Self>, Phase) -> some View, animation: @escaping (Phase) -> SwiftUICore.Animation? = { _ in .default }) -> some SwiftUICore.View where Phase : Swift.Equatable
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _RendererConfiguration {
  public enum Renderer {
    case `default`
    indirect case rasterized(_: SwiftUICore._RendererConfiguration.RasterizationOptions = .init())
  }
  public var renderer: SwiftUICore._RendererConfiguration.Renderer
  public var minFrameInterval: Swift.Double
  public init(renderer: SwiftUICore._RendererConfiguration.Renderer = .default)
  public static func rasterized(_ options: SwiftUICore._RendererConfiguration.RasterizationOptions = .init()) -> SwiftUICore._RendererConfiguration
  public struct RasterizationOptions {
    public var colorMode: SwiftUICore.ColorRenderingMode
    public var rbColorMode: Swift.Int32?
    public var rendersAsynchronously: Swift.Bool
    public var isOpaque: Swift.Bool
    public var drawsPlatformViews: Swift.Bool
    public var prefersDisplayCompositing: Swift.Bool
    public var maxDrawableCount: Swift.Int
    public init()
  }
}
@available(*, unavailable)
extension SwiftUICore._RendererConfiguration : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore._RendererConfiguration.Renderer : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore._RendererConfiguration.RasterizationOptions : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct KeyframeTimeline<Value> {
  public init(initialValue: Value, @SwiftUICore.KeyframesBuilder<Value> content: () -> some Keyframes<Value>)
  public var duration: Foundation.TimeInterval {
    get
  }
  public func value(time: Swift.Double) -> Value
  public func value(progress: Swift.Double) -> Value
}
@available(*, unavailable)
extension SwiftUICore.KeyframeTimeline : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 16.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct TapGesture : SwiftUICore.Gesture {
  public var count: Swift.Int
  public init(count: Swift.Int = 1)
  nonisolated public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUICore.TapGesture>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Swift.Void>
  @available(iOS 13.0, tvOS 16.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 16.0, watchOS 6.0, macOS 10.15, *)
  public typealias Value = Swift.Void
}
@available(*, unavailable)
extension SwiftUICore.TapGesture : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 16.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  nonisolated public func onTapGesture(count: Swift.Int = 1, perform action: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_functionBuilder public struct KeyframeTrackContentBuilder<Value> where Value : SwiftUICore.Animatable {
  public static func buildExpression<K>(_ expression: K) -> K where Value == K.Value, K : SwiftUICore.KeyframeTrackContent
  @available(*, unavailable, message: "this expression does not conform to 'KeyframeTrackContent'")
  @_disfavoredOverload @_alwaysEmitIntoClient public static func buildExpression(_ invalid: Any) -> some SwiftUICore.KeyframeTrackContent<Value> {
        buildBlock()
    }
  
  public static func buildArray(_ components: [some KeyframeTrackContent<Value>]) -> some SwiftUICore.KeyframeTrackContent<Value>
  
  public static func buildEither<First, Second>(first component: First) -> SwiftUICore.KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second> where Value == First.Value, First : SwiftUICore.KeyframeTrackContent, Second : SwiftUICore.KeyframeTrackContent, First.Value == Second.Value
  public static func buildEither<First, Second>(second component: Second) -> SwiftUICore.KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second> where Value == First.Value, First : SwiftUICore.KeyframeTrackContent, Second : SwiftUICore.KeyframeTrackContent, First.Value == Second.Value
  public static func buildPartialBlock<K>(first: K) -> K where Value == K.Value, K : SwiftUICore.KeyframeTrackContent
  public static func buildPartialBlock(accumulated: some KeyframeTrackContent<Value>, next: some KeyframeTrackContent<Value>) -> some SwiftUICore.KeyframeTrackContent<Value>
  
  public static func buildBlock() -> some SwiftUICore.KeyframeTrackContent<Value>
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.KeyframeTrackContentBuilder {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public struct Conditional<ConditionalValue, First, Second> : SwiftUICore.KeyframeTrackContent where ConditionalValue == First.Value, First : SwiftUICore.KeyframeTrackContent, Second : SwiftUICore.KeyframeTrackContent, First.Value == Second.Value {
    public func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframeTrackContent<ConditionalValue>)
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias Body = SwiftUICore.KeyframeTrackContentBuilder<Value>.Conditional<ConditionalValue, First, Second>
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias Value = ConditionalValue
  }
}
@available(*, unavailable)
extension SwiftUICore.KeyframeTrackContentBuilder : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.KeyframeTrackContentBuilder.Conditional : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @propertyWrapper @preconcurrency @_Concurrency.MainActor public struct StateObject<ObjectType> : SwiftUICore.DynamicProperty where ObjectType : Combine.ObservableObject {
  @usableFromInline
  @preconcurrency @_Concurrency.MainActor @frozen internal enum Storage {
    case initially(() -> ObjectType)
    case object(SwiftUICore.ObservedObject<ObjectType>)
  }
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var storage: SwiftUICore.StateObject<ObjectType>.Storage
  @inlinable nonisolated public init(wrappedValue thunk: @autoclosure @escaping () -> ObjectType) {
        storage = .initially(thunk)
    }
  @_Concurrency.MainActor @preconcurrency public var wrappedValue: ObjectType {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var projectedValue: SwiftUICore.ObservedObject<ObjectType>.Wrapper {
    get
  }
  nonisolated public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.StateObject {
  @_Concurrency.MainActor @preconcurrency public static var _propertyBehaviors: Swift.UInt32 {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func layoutPriority(_ value: Swift.Double) -> some SwiftUICore.View {
        return _trait(LayoutPriorityTraitKey.self, value)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package struct LayoutPriorityTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable package static var defaultValue: Swift.Double {
    get { 0.0 }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  package typealias Value = Swift.Double
}
@available(*, unavailable)
extension SwiftUICore.LayoutPriorityTraitKey : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Environment {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public init(_ objectType: Value.Type) where Value : AnyObject, Value : Observation.Observable
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public init<T>(_ objectType: T.Type) where Value == T?, T : AnyObject, T : Observation.Observable
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public subscript<T>(objectType: T.Type) -> T? where T : AnyObject, T : Observation.Observable {
    get
    set
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func environment<T>(_ object: T?) -> some SwiftUICore.View where T : AnyObject, T : Observation.Observable
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
extension SwiftUICore.View {
  @inlinable nonisolated public func onPreferenceChange<K>(_ key: K.Type = K.self, perform action: @escaping (K.Value) -> Swift.Void) -> some SwiftUICore.View where K : SwiftUICore.PreferenceKey, K.Value : Swift.Equatable {
        return modifier(_PreferenceActionModifier<K>(action: action))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
@frozen public struct _PreferenceActionModifier<Key> : SwiftUICore.ViewModifier where Key : SwiftUICore.PreferenceKey, Key.Value : Swift.Equatable {
  public var action: (Key.Value) -> Swift.Void
  @inlinable public init(action: @escaping (Key.Value) -> Swift.Void) {
        self.action = action
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._PreferenceActionModifier<Key>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._PreferenceActionModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct AnyView : SwiftUICore.View {
  internal var storage: SwiftUICore.AnyViewStorageBase
  public init<V>(_ view: V) where V : SwiftUICore.View
  @_alwaysEmitIntoClient public init<V>(erasing view: V) where V : SwiftUICore.View {
        self.init(view)
    }
  public init?(_fromValue value: Any)
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.AnyView>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUICore.AnyView>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.AnyView : Swift.Sendable {
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
internal class AnyViewStorageBase {
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUICore.AnyViewStorageBase : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol _VectorMath : SwiftUICore.Animatable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VectorMath {
  @inlinable public var magnitude: Swift.Double {
    get {
        return animatableData.magnitudeSquared.squareRoot()
    }
  }
  @inlinable public mutating func negate() {
        animatableData = .zero - animatableData
    }
  @inlinable prefix public static func - (operand: Self) -> Self {
        var result = operand
        result.negate()
        return result
    }
  @inlinable public static func += (lhs: inout Self, rhs: Self) {
        lhs.animatableData += rhs.animatableData
    }
  @inlinable public static func + (lhs: Self, rhs: Self) -> Self {
        var result = lhs
        result += rhs
        return result
    }
  @inlinable public static func -= (lhs: inout Self, rhs: Self) {
        lhs.animatableData -= rhs.animatableData
    }
  @inlinable public static func - (lhs: Self, rhs: Self) -> Self {
        var result = lhs
        result -= rhs
        return result
    }
  @inlinable public static func *= (lhs: inout Self, rhs: Swift.Double) {
        lhs.animatableData.scale(by: rhs)
    }
  @inlinable public static func * (lhs: Self, rhs: Swift.Double) -> Self {
        var result = lhs
        result *= rhs
        return result
    }
  @inlinable public static func /= (lhs: inout Self, rhs: Swift.Double) {
        lhs *= 1 / rhs
    }
  @inlinable public static func / (lhs: Self, rhs: Swift.Double) -> Self {
        var result = lhs
        result /= rhs
        return result
    }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum Prominence : Swift.Sendable {
  case standard
  case increased
  public static func == (a: SwiftUICore.Prominence, b: SwiftUICore.Prominence) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var headerProminence: SwiftUICore.Prominence {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  nonisolated public func headerProminence(_ prominence: SwiftUICore.Prominence) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _EventDebugTriggers : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let responders: SwiftUICore._EventDebugTriggers
  public static let sendEvents: SwiftUICore._EventDebugTriggers
  public static let eventBindings: SwiftUICore._EventDebugTriggers
  public static let eventPhases: SwiftUICore._EventDebugTriggers
  public static let gestures: SwiftUICore._EventDebugTriggers
  public static let hitTest: SwiftUICore._EventDebugTriggers
  public static let all: SwiftUICore._EventDebugTriggers
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ArrayLiteralElement = SwiftUICore._EventDebugTriggers
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Element = SwiftUICore._EventDebugTriggers
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias RawValue = Swift.Int
}
@available(*, unavailable)
extension SwiftUICore._EventDebugTriggers : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public var _eventDebugTriggers: SwiftUICore._EventDebugTriggers
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct ColorMatrix : Swift.Equatable {
  public var r1: Swift.Float = 1, r2: Swift.Float = 0, r3: Swift.Float = 0, r4: Swift.Float = 0, r5: Swift.Float = 0
  public var g1: Swift.Float = 0, g2: Swift.Float = 1, g3: Swift.Float = 0, g4: Swift.Float = 0, g5: Swift.Float = 0
  public var b1: Swift.Float = 0, b2: Swift.Float = 0, b3: Swift.Float = 1, b4: Swift.Float = 0, b5: Swift.Float = 0
  public var a1: Swift.Float = 0, a2: Swift.Float = 0, a3: Swift.Float = 0, a4: Swift.Float = 1, a5: Swift.Float = 0
  @inlinable public init() {}
  public static func == (a: SwiftUICore.ColorMatrix, b: SwiftUICore.ColorMatrix) -> Swift.Bool
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _ColorMatrix : Swift.Equatable, Swift.Codable {
  public var m11: Swift.Float = 1, m12: Swift.Float = 0, m13: Swift.Float = 0, m14: Swift.Float = 0, m15: Swift.Float = 0
  public var m21: Swift.Float = 0, m22: Swift.Float = 1, m23: Swift.Float = 0, m24: Swift.Float = 0, m25: Swift.Float = 0
  public var m31: Swift.Float = 0, m32: Swift.Float = 0, m33: Swift.Float = 1, m34: Swift.Float = 0, m35: Swift.Float = 0
  public var m41: Swift.Float = 0, m42: Swift.Float = 0, m43: Swift.Float = 0, m44: Swift.Float = 1, m45: Swift.Float = 0
  @inlinable public init() {}
  public init(color: SwiftUICore.Color, in environment: SwiftUICore.EnvironmentValues)
  public static func * (a: SwiftUICore._ColorMatrix, b: SwiftUICore._ColorMatrix) -> SwiftUICore._ColorMatrix
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
  public static func == (a: SwiftUICore._ColorMatrix, b: SwiftUICore._ColorMatrix) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum _ViewDebug {
  public enum Property : Swift.UInt32, Swift.Hashable {
    case type
    case value
    case transform
    case position
    case size
    case environment
    case phase
    case layoutComputer
    case displayList
    public init?(rawValue: Swift.UInt32)
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias RawValue = Swift.UInt32
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public struct Properties : Swift.OptionSet {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    @inlinable package init(_ property: SwiftUICore._ViewDebug.Property) {
            self.init(rawValue: 1 << property.rawValue)
        }
    public static let type: SwiftUICore._ViewDebug.Properties
    public static let value: SwiftUICore._ViewDebug.Properties
    public static let transform: SwiftUICore._ViewDebug.Properties
    public static let position: SwiftUICore._ViewDebug.Properties
    public static let size: SwiftUICore._ViewDebug.Properties
    public static let environment: SwiftUICore._ViewDebug.Properties
    public static let phase: SwiftUICore._ViewDebug.Properties
    public static let layoutComputer: SwiftUICore._ViewDebug.Properties
    public static let displayList: SwiftUICore._ViewDebug.Properties
    public static let all: SwiftUICore._ViewDebug.Properties
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias ArrayLiteralElement = SwiftUICore._ViewDebug.Properties
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias Element = SwiftUICore._ViewDebug.Properties
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias RawValue = Swift.UInt32
  }
  public struct Data {
  }
}
@available(*, unavailable)
extension SwiftUICore._ViewDebug.Properties : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore._ViewDebug.Property : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore._ViewDebug.Data : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore._ViewDebug : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ViewDebug {
  public static func serializedData(_ viewDebugData: [SwiftUICore._ViewDebug.Data]) -> Foundation.Data?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ViewDebug.Data : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(iOS 17.1, macOS 14.1, tvOS 17.1, watchOS 10.1, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public static func _logChanges()
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Animation {
  public static func easeInOut(duration: Foundation.TimeInterval) -> SwiftUICore.Animation
  public static var easeInOut: SwiftUICore.Animation {
    get
  }
  public static func easeIn(duration: Foundation.TimeInterval) -> SwiftUICore.Animation
  public static var easeIn: SwiftUICore.Animation {
    get
  }
  public static func easeOut(duration: Foundation.TimeInterval) -> SwiftUICore.Animation
  public static var easeOut: SwiftUICore.Animation {
    get
  }
  public static func linear(duration: Foundation.TimeInterval) -> SwiftUICore.Animation
  public static var linear: SwiftUICore.Animation {
    get
  }
  public static func timingCurve(_ p1x: Swift.Double, _ p1y: Swift.Double, _ p2x: Swift.Double, _ p2y: Swift.Double, duration: Foundation.TimeInterval = 0.35) -> SwiftUICore.Animation
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated package func _backdropEffect<T>(_ effect: (SwiftUICore._BackdropEffectPlaceholder) -> T) -> some SwiftUICore.View where T : SwiftUICore.View {
        modifier(_BackdropEffect(backdrop: effect(.init())))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _BackdropEffect<Backdrop> where Backdrop : SwiftUICore.View {
  @usableFromInline
  internal var backdrop: Backdrop
  @inlinable internal init(backdrop: Backdrop) {
        self.backdrop = backdrop
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._BackdropEffect<Backdrop>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._BackdropEffect : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _BackdropEffectPlaceholder {
  @inlinable internal init() {}
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore._BackdropEffectPlaceholder>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol Animatable {
  associatedtype AnimatableData : SwiftUICore.VectorArithmetic
  var animatableData: Self.AnimatableData { get set }
  static func _makeAnimatable(value: inout SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._GraphInputs)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Animatable where Self : SwiftUICore.VectorArithmetic {
  public var animatableData: Self {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Animatable where Self.AnimatableData == SwiftUICore.EmptyAnimatableData {
  public var animatableData: SwiftUICore.EmptyAnimatableData {
    @inlinable get { return EmptyAnimatableData() }
    @inlinable set {}
  }
  public static func _makeAnimatable(value: inout SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._GraphInputs)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Animatable {
  public static func _makeAnimatable(value: inout SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._GraphInputs)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct EmptyAnimatableData : SwiftUICore.VectorArithmetic {
  @inlinable public init() {}
  @inlinable public static var zero: SwiftUICore.EmptyAnimatableData {
    get { return .init() }
  }
  @inlinable public static func += (lhs: inout SwiftUICore.EmptyAnimatableData, rhs: SwiftUICore.EmptyAnimatableData) {}
  @inlinable public static func -= (lhs: inout SwiftUICore.EmptyAnimatableData, rhs: SwiftUICore.EmptyAnimatableData) {}
  @inlinable public static func + (lhs: SwiftUICore.EmptyAnimatableData, rhs: SwiftUICore.EmptyAnimatableData) -> SwiftUICore.EmptyAnimatableData {
        return .zero
    }
  @inlinable public static func - (lhs: SwiftUICore.EmptyAnimatableData, rhs: SwiftUICore.EmptyAnimatableData) -> SwiftUICore.EmptyAnimatableData {
        return .zero
    }
  @inlinable public mutating func scale(by rhs: Swift.Double) {}
  @inlinable public var magnitudeSquared: Swift.Double {
    get { return 0 }
  }
  public static func == (a: SwiftUICore.EmptyAnimatableData, b: SwiftUICore.EmptyAnimatableData) -> Swift.Bool
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Double : SwiftUICore.Animatable {
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias AnimatableData = Swift.Double
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension CoreFoundation.CGFloat : SwiftUICore.Animatable {
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias AnimatableData = CoreFoundation.CGFloat
}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct MeshGradient : SwiftUICore.ShapeStyle, Swift.Equatable, Swift.Sendable {
  public enum Locations : Swift.Equatable, Swift.Sendable {
    case points([Swift.SIMD2<Swift.Float>])
    case bezierPoints([SwiftUICore.MeshGradient.BezierPoint])
    public static func == (a: SwiftUICore.MeshGradient.Locations, b: SwiftUICore.MeshGradient.Locations) -> Swift.Bool
  }
  public enum Colors : Swift.Equatable, Swift.Sendable {
    case colors([SwiftUICore.Color])
    case resolvedColors([SwiftUICore.Color.Resolved])
    public static func == (a: SwiftUICore.MeshGradient.Colors, b: SwiftUICore.MeshGradient.Colors) -> Swift.Bool
  }
  @frozen public struct BezierPoint : Swift.Equatable, Swift.Sendable {
    public var position: Swift.SIMD2<Swift.Float>
    public var leadingControlPoint: Swift.SIMD2<Swift.Float>
    public var topControlPoint: Swift.SIMD2<Swift.Float>
    public var trailingControlPoint: Swift.SIMD2<Swift.Float>
    public var bottomControlPoint: Swift.SIMD2<Swift.Float>
    @_alwaysEmitIntoClient public init(position: Swift.SIMD2<Swift.Float>, leadingControlPoint: Swift.SIMD2<Swift.Float>, topControlPoint: Swift.SIMD2<Swift.Float>, trailingControlPoint: Swift.SIMD2<Swift.Float>, bottomControlPoint: Swift.SIMD2<Swift.Float>) {
            self.position = position
            self.leadingControlPoint = leadingControlPoint
            self.topControlPoint = topControlPoint
            self.trailingControlPoint = trailingControlPoint
            self.bottomControlPoint = bottomControlPoint
        }
    public static func == (a: SwiftUICore.MeshGradient.BezierPoint, b: SwiftUICore.MeshGradient.BezierPoint) -> Swift.Bool
  }
  public var width: Swift.Int
  public var height: Swift.Int
  public var locations: SwiftUICore.MeshGradient.Locations
  public var colors: SwiftUICore.MeshGradient.Colors
  public var background: SwiftUICore.Color
  public var smoothsColors: Swift.Bool
  public var colorSpace: SwiftUICore.Gradient.ColorSpace
  public init(width: Swift.Int, height: Swift.Int, locations: SwiftUICore.MeshGradient.Locations, colors: SwiftUICore.MeshGradient.Colors, background: SwiftUICore.Color = .clear, smoothsColors: Swift.Bool = true, colorSpace: SwiftUICore.Gradient.ColorSpace = .device)
  @_alwaysEmitIntoClient public init(width: Swift.Int, height: Swift.Int, points: [Swift.SIMD2<Swift.Float>], colors: [SwiftUICore.Color], background: SwiftUICore.Color = .clear, smoothsColors: Swift.Bool = true, colorSpace: SwiftUICore.Gradient.ColorSpace = .device) {
        self.init(width: width, height: height, locations: .points(points),
            colors: .colors(colors), background: background,
            smoothsColors: smoothsColors, colorSpace: colorSpace)
    }
  @_alwaysEmitIntoClient public init(width: Swift.Int, height: Swift.Int, points: [Swift.SIMD2<Swift.Float>], resolvedColors: [SwiftUICore.Color.Resolved], background: SwiftUICore.Color = .clear, smoothsColors: Swift.Bool = true, colorSpace: SwiftUICore.Gradient.ColorSpace = .device) {
        self.init(width: width, height: height, locations: .points(points),
            colors: .resolvedColors(resolvedColors), background: background,
            smoothsColors: smoothsColors, colorSpace: colorSpace)
    }
  @_alwaysEmitIntoClient public init(width: Swift.Int, height: Swift.Int, bezierPoints: [SwiftUICore.MeshGradient.BezierPoint], colors: [SwiftUICore.Color], background: SwiftUICore.Color = .clear, smoothsColors: Swift.Bool = true, colorSpace: SwiftUICore.Gradient.ColorSpace = .device) {
        self.init(width: width, height: height,
            locations: .bezierPoints(bezierPoints), colors: .colors(colors),
            background: background, smoothsColors: smoothsColors,
            colorSpace: colorSpace)
    }
  @_alwaysEmitIntoClient public init(width: Swift.Int, height: Swift.Int, bezierPoints: [SwiftUICore.MeshGradient.BezierPoint], resolvedColors: [SwiftUICore.Color.Resolved], background: SwiftUICore.Color = .clear, smoothsColors: Swift.Bool = true, colorSpace: SwiftUICore.Gradient.ColorSpace = .device) {
        self.init(width: width, height: height,
            locations: .bezierPoints(bezierPoints),
            colors: .resolvedColors(resolvedColors),
            background: background, smoothsColors: smoothsColors,
            colorSpace: colorSpace)
    }
  public static func == (a: SwiftUICore.MeshGradient, b: SwiftUICore.MeshGradient) -> Swift.Bool
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.Rectangle, SwiftUICore.MeshGradient>
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Optional : SwiftUICore.View where Wrapped : SwiftUICore.View {
  public typealias Body = Swift.Never
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<Swift.Optional<Wrapped>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<Swift.Optional<Wrapped>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
@frozen package struct PropertyList : Swift.CustomStringConvertible {
  @usableFromInline
  internal var elements: SwiftUICore.PropertyList.Element?
  @inlinable package init() { elements = nil }
  @inlinable package var data: Swift.AnyObject? {
    get { return elements }
  }
  @inlinable package var isEmpty: Swift.Bool {
    get { return elements === nil }
  }
  @inlinable package func isIdentical(to other: SwiftUICore.PropertyList) -> Swift.Bool {
        return elements === other.elements
    }
  @usableFromInline
  package var description: Swift.String {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore.PropertyList : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.PropertyList {
  @_hasMissingDesignatedInitializers @usableFromInline
  package class Tracker {
    @objc @usableFromInline
    deinit
  }
}
@available(*, unavailable)
extension SwiftUICore.PropertyList.Tracker : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.PropertyList {
  @_hasMissingDesignatedInitializers @usableFromInline
  package class Element : Swift.CustomStringConvertible {
    @objc deinit
    @usableFromInline
    package var description: Swift.String {
      get
    }
  }
}
@available(*, unavailable)
extension SwiftUICore.PropertyList.Element : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _SizedShape<S> : SwiftUICore.Shape where S : SwiftUICore.Shape {
  public var shape: S
  public var size: CoreFoundation.CGSize
  @inlinable public init(shape: S, size: CoreFoundation.CGSize) {
        self.shape = shape
        self.size = size
    }
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public static var role: SwiftUICore.ShapeRole {
    get
  }
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
    get
  }
  public typealias AnimatableData = SwiftUICore.AnimatablePair<S.AnimatableData, CoreFoundation.CGSize.AnimatableData>
  public var animatableData: SwiftUICore._SizedShape<S>.AnimatableData {
    get
    set
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore._SizedShape<S>, SwiftUICore.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape {
  @inlinable nonisolated public func size(_ size: CoreFoundation.CGSize) -> some SwiftUICore.Shape {
        return _SizedShape(shape: self, size: size)
    }
  
  @inlinable nonisolated public func size(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat) -> some SwiftUICore.Shape {
        return size(.init(width: width, height: height))
    }
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape {
  nonisolated public func size(_ size: CoreFoundation.CGSize, anchor: SwiftUICore.UnitPoint) -> some SwiftUICore.Shape
  
  nonisolated public func size(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat, anchor: SwiftUICore.UnitPoint) -> some SwiftUICore.Shape
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@preconcurrency @_Concurrency.MainActor public protocol ViewModifier {
  nonisolated static func _makeView(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated static func _makeViewList(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func body(content: Self.Content) -> Self.Body
  typealias Content = SwiftUICore._ViewModifier_Content<Self>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ViewModifier where Self.Body == Swift.Never {
  @_Concurrency.MainActor @preconcurrency public func body(content: Self.Content) -> Self.Body
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ViewModifier where Self : SwiftUICore._GraphInputsModifier, Self.Body == Swift.Never {
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct EmptyModifier : SwiftUICore.ViewModifier {
  public static let identity: SwiftUICore.EmptyModifier
  public typealias Body = Swift.Never
  @inlinable public init() {}
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore.EmptyModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUICore.EmptyModifier>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  @_Concurrency.MainActor @preconcurrency public func body(content: SwiftUICore.EmptyModifier.Content) -> SwiftUICore.EmptyModifier.Body
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func modifier<T>(_ modifier: T) -> SwiftUICore.ModifiedContent<Self, T> {
        return .init(content: self, modifier: modifier)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct ModifiedContent<Content, Modifier> {
  public typealias Body = Swift.Never
  public var content: Content
  public var modifier: Modifier
  @inlinable nonisolated public init(content: Content, modifier: Modifier) {
        self.content = content
        self.modifier = modifier
    }
}
@available(*, unavailable)
extension SwiftUICore.ModifiedContent : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ModifiedContent : Swift.Equatable where Content : Swift.Equatable, Modifier : Swift.Equatable {
  public static func == (a: SwiftUICore.ModifiedContent<Content, Modifier>, b: SwiftUICore.ModifiedContent<Content, Modifier>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ModifiedContent : SwiftUICore.View where Content : SwiftUICore.View, Modifier : SwiftUICore.ViewModifier {
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.ModifiedContent<Content, Modifier>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUICore.ModifiedContent<Content, Modifier>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  @_Concurrency.MainActor @preconcurrency public var body: SwiftUICore.ModifiedContent<Content, Modifier>.Body {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ModifiedContent : SwiftUICore.ViewModifier where Content : SwiftUICore.ViewModifier, Modifier : SwiftUICore.ViewModifier {
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore.ModifiedContent<Content, Modifier>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUICore.ModifiedContent<Content, Modifier>>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ViewModifier {
  @inlinable nonisolated public func concat<T>(_ modifier: T) -> SwiftUICore.ModifiedContent<Self, T> {
        return .init(content: self, modifier: modifier)
    }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@available(watchOS, unavailable)
extension SwiftUICore.Image {
  public struct DynamicRange : Swift.Hashable, Swift.Sendable {
    public static let standard: SwiftUICore.Image.DynamicRange
    public static let constrainedHigh: SwiftUICore.Image.DynamicRange
    public static let high: SwiftUICore.Image.DynamicRange
    public static func == (a: SwiftUICore.Image.DynamicRange, b: SwiftUICore.Image.DynamicRange) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func allowedDynamicRange(_ range: SwiftUICore.Image.DynamicRange?) -> SwiftUICore.Image
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@available(watchOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var allowedDynamicRange: SwiftUICore.Image.DynamicRange? {
    get
    set
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_alwaysEmitIntoClient nonisolated public func allowedDynamicRange(_ range: SwiftUICore.Image.DynamicRange?) -> some SwiftUICore.View {
        return environment(\.allowedDynamicRange, range)
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct SymbolVariants : Swift.Hashable, Swift.Sendable {
  public static let none: SwiftUICore.SymbolVariants
  public static let circle: SwiftUICore.SymbolVariants
  public static let square: SwiftUICore.SymbolVariants
  public static let rectangle: SwiftUICore.SymbolVariants
  public var circle: SwiftUICore.SymbolVariants {
    get
  }
  public var square: SwiftUICore.SymbolVariants {
    get
  }
  public var rectangle: SwiftUICore.SymbolVariants {
    get
  }
  public static let fill: SwiftUICore.SymbolVariants
  public var fill: SwiftUICore.SymbolVariants {
    get
  }
  public static let slash: SwiftUICore.SymbolVariants
  public var slash: SwiftUICore.SymbolVariants {
    get
  }
  public func contains(_ other: SwiftUICore.SymbolVariants) -> Swift.Bool
  public static func == (a: SwiftUICore.SymbolVariants, b: SwiftUICore.SymbolVariants) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  nonisolated public func symbolVariant(_ variant: SwiftUICore.SymbolVariants) -> some SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var symbolVariants: SwiftUICore.SymbolVariants {
    get
    set
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image {
  public init(size: CoreFoundation.CGSize, label: SwiftUICore.Text? = nil, opaque: Swift.Bool = false, colorMode: SwiftUICore.ColorRenderingMode = .nonLinear, renderer: @escaping (inout SwiftUICore.GraphicsContext) -> Swift.Void)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
@frozen public enum Visibility : Swift.Hashable, Swift.CaseIterable {
  case automatic
  case visible
  case hidden
  public static func == (a: SwiftUICore.Visibility, b: SwiftUICore.Visibility) -> Swift.Bool
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias AllCases = [SwiftUICore.Visibility]
  nonisolated public static var allCases: [SwiftUICore.Visibility] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _BackgroundModifier<Background> : SwiftUICore.ViewModifier where Background : SwiftUICore.View {
  public var background: Background
  public var alignment: SwiftUICore.Alignment
  @inlinable public init(background: Background, alignment: SwiftUICore.Alignment = .center) {
        self.background = background
        self.alignment = alignment
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._BackgroundModifier<Background>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._BackgroundModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BackgroundModifier : Swift.Equatable where Background : Swift.Equatable {
  public static func == (a: SwiftUICore._BackgroundModifier<Background>, b: SwiftUICore._BackgroundModifier<Background>) -> Swift.Bool
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _BackgroundStyleModifier<Style> : SwiftUICore.ViewModifier where Style : SwiftUICore.ShapeStyle {
  public var style: Style
  public var ignoresSafeAreaEdges: SwiftUICore.Edge.Set
  @inlinable public init(style: Style, ignoresSafeAreaEdges: SwiftUICore.Edge.Set) {
        self.style = style
        self.ignoresSafeAreaEdges = ignoresSafeAreaEdges
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._BackgroundStyleModifier<Style>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._BackgroundStyleModifier : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _BackgroundShapeModifier<Style, Bounds> : SwiftUICore.ViewModifier where Style : SwiftUICore.ShapeStyle, Bounds : SwiftUICore.Shape {
  public var style: Style
  public var shape: Bounds
  public var fillStyle: SwiftUICore.FillStyle
  @inlinable public init(style: Style, shape: Bounds, fillStyle: SwiftUICore.FillStyle) {
        self.style = style
        self.shape = shape
        self.fillStyle = fillStyle
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._BackgroundShapeModifier<Style, Bounds>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._BackgroundShapeModifier : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _InsettableBackgroundShapeModifier<Style, Bounds> : SwiftUICore.ViewModifier where Style : SwiftUICore.ShapeStyle, Bounds : SwiftUICore.InsettableShape {
  public var style: Style
  public var shape: Bounds
  public var fillStyle: SwiftUICore.FillStyle
  @inlinable public init(style: Style, shape: Bounds, fillStyle: SwiftUICore.FillStyle) {
        self.style = style
        self.shape = shape
        self.fillStyle = fillStyle
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._InsettableBackgroundShapeModifier<Style, Bounds>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._InsettableBackgroundShapeModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use `background(alignment:content:)` instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `background(alignment:content:)` instead.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use `background(alignment:content:)` instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use `background(alignment:content:)` instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use `background(alignment:content:)` instead.")
  @inlinable @_disfavoredOverload nonisolated public func background<Background>(_ background: Background, alignment: SwiftUICore.Alignment = .center) -> some SwiftUICore.View where Background : SwiftUICore.View {
        return modifier(
            _BackgroundModifier(background: background, alignment: alignment))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func background<V>(alignment: SwiftUICore.Alignment = .center, @SwiftUICore.ViewBuilder content: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View {
        modifier(
            _BackgroundModifier(background: content(), alignment: alignment))
    }
  
  @inlinable nonisolated public func background(ignoresSafeAreaEdges edges: SwiftUICore.Edge.Set = .all) -> some SwiftUICore.View {
        modifier(_BackgroundStyleModifier(
            style: .background, ignoresSafeAreaEdges: edges))
    }
  
  @inlinable nonisolated public func background<S>(_ style: S, ignoresSafeAreaEdges edges: SwiftUICore.Edge.Set = .all) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
        modifier(_BackgroundStyleModifier(
            style: style, ignoresSafeAreaEdges: edges))
    }
  
  @inlinable nonisolated public func background<S>(in shape: S, fillStyle: SwiftUICore.FillStyle = FillStyle()) -> some SwiftUICore.View where S : SwiftUICore.Shape {
        modifier(_BackgroundShapeModifier(
            style: .background, shape: shape, fillStyle: fillStyle))
    }
  
  @inlinable nonisolated public func background<S, T>(_ style: S, in shape: T, fillStyle: SwiftUICore.FillStyle = FillStyle()) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle, T : SwiftUICore.Shape {
        modifier(_BackgroundShapeModifier(
            style: style, shape: shape, fillStyle: fillStyle))
    }
  
  @inlinable nonisolated public func background<S>(in shape: S, fillStyle: SwiftUICore.FillStyle = FillStyle()) -> some SwiftUICore.View where S : SwiftUICore.InsettableShape {
        modifier(_InsettableBackgroundShapeModifier(
            style: .background, shape: shape, fillStyle: fillStyle))
    }
  
  @inlinable nonisolated public func background<S, T>(_ style: S, in shape: T, fillStyle: SwiftUICore.FillStyle = FillStyle()) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle, T : SwiftUICore.InsettableShape {
        modifier(_InsettableBackgroundShapeModifier(
            style: style, shape: shape, fillStyle: fillStyle))
    }
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@preconcurrency public protocol CustomAnimation : Swift.Hashable, Swift.Sendable {
  nonisolated func animate<V>(value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  nonisolated func velocity<V>(value: V, time: Foundation.TimeInterval, context: SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  nonisolated func shouldMerge<V>(previous: SwiftUICore.Animation, value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> Swift.Bool where V : SwiftUICore.VectorArithmetic
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.CustomAnimation {
  public func velocity<V>(value: V, time: Foundation.TimeInterval, context: SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  public func shouldMerge<V>(previous: SwiftUICore.Animation, value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> Swift.Bool where V : SwiftUICore.VectorArithmetic
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Swift.Never : SwiftUICore.View {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol DynamicViewContent : SwiftUICore.View {
  associatedtype Data : Swift.Collection
  var data: Self.Data { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ForEach : SwiftUICore.DynamicViewContent where Content : SwiftUICore.View {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ModifiedContent : SwiftUICore.DynamicViewContent where Content : SwiftUICore.DynamicViewContent, Modifier : SwiftUICore.ViewModifier {
  public var data: Content.Data {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Data = Content.Data
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @propertyWrapper public struct State<Value> : SwiftUICore.DynamicProperty {
  @usableFromInline
  internal var _value: Value
  @usableFromInline
  internal var _location: SwiftUICore.AnyLocation<Value>?
  public init(wrappedValue value: Value)
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @usableFromInline
  internal init(wrappedValue thunk: @autoclosure @escaping () -> Value) where Value : AnyObject, Value : Observation.Observable
  @_alwaysEmitIntoClient public init(initialValue value: Value) {
        _value = value
    }
  public var wrappedValue: Value {
    get
    nonmutating set
  }
  public var projectedValue: SwiftUICore.Binding<Value> {
    get
  }
  public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.State : Swift.Sendable where Value : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.State where Value : Swift.ExpressibleByNilLiteral {
  @inlinable public init() {
        self.init(wrappedValue: nil)
    }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct AnimationContext<Value> where Value : SwiftUICore.VectorArithmetic {
  public var state: SwiftUICore.AnimationState<Value>
  public var isLogicallyComplete: Swift.Bool
  public var environment: SwiftUICore.EnvironmentValues {
    get
  }
  public func withState<T>(_ state: SwiftUICore.AnimationState<T>) -> SwiftUICore.AnimationContext<T> where T : SwiftUICore.VectorArithmetic
}
@available(*, unavailable)
extension SwiftUICore.AnimationContext : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _TestApp {
  public init()
}
@available(*, unavailable)
extension SwiftUICore._TestApp : Swift.Sendable {
}
extension CoreFoundation.CGSize {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable prefix package static func - (operand: CoreFoundation.CGSize) -> CoreFoundation.CGSize {
        var result = operand
        result.width = -result.width
        result.height = -result.height
        return result
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package static func += (lhs: inout CoreFoundation.CGSize, rhs: CoreFoundation.CGSize) {
        lhs.width += rhs.width
        lhs.height += rhs.height
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package static func + (lhs: CoreFoundation.CGSize, rhs: CoreFoundation.CGSize) -> CoreFoundation.CGSize {
        var result = lhs
        result += rhs
        return result
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package static func -= (lhs: inout CoreFoundation.CGSize, rhs: CoreFoundation.CGSize) {
        lhs.width -= rhs.width
        lhs.height -= rhs.height
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package static func - (lhs: CoreFoundation.CGSize, rhs: CoreFoundation.CGSize) -> CoreFoundation.CGSize {
        var result = lhs
        result -= rhs
        return result
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package static func *= (lhs: inout CoreFoundation.CGSize, rhs: Swift.Double) {
        lhs.width *= CGFloat(rhs)
        lhs.height *= CGFloat(rhs)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package static func * (lhs: CoreFoundation.CGSize, rhs: Swift.Double) -> CoreFoundation.CGSize {
        var result = lhs
        result *= rhs
        return result
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package static func /= (lhs: inout CoreFoundation.CGSize, rhs: Swift.Double) {
        lhs *= 1 / rhs
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package static func / (lhs: CoreFoundation.CGSize, rhs: Swift.Double) -> CoreFoundation.CGSize {
        var result = lhs
        result /= rhs
        return result
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct AnyTransition {
  fileprivate let box: SwiftUICore.AnyTransitionBox
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public init<T>(_ transition: T) where T : SwiftUICore.Transition
}
@available(*, unavailable)
extension SwiftUICore.AnyTransition : Swift.Sendable {
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
internal class AnyTransitionBox {
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUICore.AnyTransitionBox : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnyTransition {
  public func animation(_ animation: SwiftUICore.Animation?) -> SwiftUICore.AnyTransition
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Transition {
  @_Concurrency.MainActor @preconcurrency public func animation(_ animation: SwiftUICore.Animation?) -> some SwiftUICore.Transition
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnyTransition {
  public func combined(with other: SwiftUICore.AnyTransition) -> SwiftUICore.AnyTransition
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Transition {
  @_Concurrency.MainActor @preconcurrency public func combined<T>(with other: T) -> some SwiftUICore.Transition where T : SwiftUICore.Transition
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct ContentTransition : Swift.Equatable, Swift.Sendable {
  public static let identity: SwiftUICore.ContentTransition
  public static let opacity: SwiftUICore.ContentTransition
  public static let interpolate: SwiftUICore.ContentTransition
  public static func numericText(countsDown: Swift.Bool = false) -> SwiftUICore.ContentTransition
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public static func numericText(value: Swift.Double) -> SwiftUICore.ContentTransition
  public static func == (a: SwiftUICore.ContentTransition, b: SwiftUICore.ContentTransition) -> Swift.Bool
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_alwaysEmitIntoClient nonisolated public func contentTransition(_ transition: SwiftUICore.ContentTransition) -> some SwiftUICore.View {
        return environment(\.contentTransition, transition)
    }
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var contentTransition: SwiftUICore.ContentTransition {
    get
    set
  }
  public var contentTransitionAddsDrawingGroup: Swift.Bool {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Animation {
  public func repeatCount(_ repeatCount: Swift.Int, autoreverses: Swift.Bool = true) -> SwiftUICore.Animation
  public func repeatForever(autoreverses: Swift.Bool = true) -> SwiftUICore.Animation
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol _BenchmarkHost : AnyObject {
  func _renderForTest(interval: Swift.Double)
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  func _renderAsyncForTest(interval: Swift.Double) -> Swift.Bool
  func _performScrollTest(startOffset: CoreFoundation.CGFloat, iterations: Swift.Int, delta: CoreFoundation.CGFloat, length: CoreFoundation.CGFloat, completion: (() -> Swift.Void)?)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol _Benchmark : SwiftUICore._Test {
  func measure(host: any SwiftUICore._BenchmarkHost) -> [Swift.Double]
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BenchmarkHost {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func _renderAsyncForTest(interval: Swift.Double) -> Swift.Bool
  public func _performScrollTest(startOffset: CoreFoundation.CGFloat, iterations: Swift.Int, delta: CoreFoundation.CGFloat, length: CoreFoundation.CGFloat, completion: (() -> Swift.Void)?)
  public func measureAction(action: () -> Swift.Void) -> Swift.Double
  public func measureRender(interval: Swift.Double = 1.0 / 60.0) -> Swift.Double
  public func measureRenders(seconds: Swift.Double) -> [Swift.Double]
  public func measureRenders(duration: Swift.Double) -> [Swift.Double]
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@preconcurrency @_Concurrency.MainActor public protocol Transition {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func body(content: Self.Content, phase: SwiftUICore.TransitionPhase) -> Self.Body
  @_Concurrency.MainActor @preconcurrency static var properties: SwiftUICore.TransitionProperties { get }
  typealias Content = SwiftUICore.PlaceholderContentView<Self>
  @_Concurrency.MainActor @preconcurrency func _makeContentTransition(transition: inout SwiftUICore._Transition_ContentTransition)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Transition {
  @_Concurrency.MainActor @preconcurrency public static var properties: SwiftUICore.TransitionProperties {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func _makeContentTransition(transition: inout SwiftUICore._Transition_ContentTransition)
  @_Concurrency.MainActor @preconcurrency public func apply<V>(content: V, phase: SwiftUICore.TransitionPhase) -> some SwiftUICore.View where V : SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _Transition_ContentTransition {
}
@available(*, unavailable)
extension SwiftUICore._Transition_ContentTransition : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public enum TransitionPhase {
  case willAppear
  case identity
  case didDisappear
  public var isIdentity: Swift.Bool {
    get
  }
  public static func == (a: SwiftUICore.TransitionPhase, b: SwiftUICore.TransitionPhase) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.TransitionPhase {
  public var value: Swift.Double {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct TransitionProperties : Swift.Sendable {
  public init(hasMotion: Swift.Bool = true)
  public var hasMotion: Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnyTransition {
  public static let identity: SwiftUICore.AnyTransition
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Transition where Self == SwiftUICore.IdentityTransition {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var identity: SwiftUICore.IdentityTransition {
    get { Self() }
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_Concurrency.MainActor @preconcurrency public struct IdentityTransition : SwiftUICore.Transition {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func body(content: SwiftUICore.IdentityTransition.Content, phase: SwiftUICore.TransitionPhase) -> SwiftUICore.IdentityTransition.Content
  @_Concurrency.MainActor @preconcurrency public static let properties: SwiftUICore.TransitionProperties
  @_Concurrency.MainActor @preconcurrency public func _makeContentTransition(transition: inout SwiftUICore._Transition_ContentTransition)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = SwiftUICore.IdentityTransition.Content
}
@available(*, unavailable)
extension SwiftUICore.IdentityTransition : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol VisualEffect : Swift.Sendable, SwiftUICore.Animatable {
  static func _makeVisualEffect(effect: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  nonisolated public func visualEffect(_ effect: @escaping @Sendable (SwiftUICore.EmptyVisualEffect, SwiftUICore.GeometryProxy) -> some VisualEffect) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct EmptyVisualEffect : SwiftUICore.VisualEffect {
  public init()
  public static func _makeVisualEffect(effect: SwiftUICore._GraphValue<SwiftUICore.EmptyVisualEffect>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum CoordinateSpace {
  case global
  case local
  case named(Swift.AnyHashable)
}
@available(*, unavailable)
extension SwiftUICore.CoordinateSpace : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.CoordinateSpace {
  public var isGlobal: Swift.Bool {
    get
  }
  public var isLocal: Swift.Bool {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.CoordinateSpace : Swift.Equatable, Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: SwiftUICore.CoordinateSpace, rhs: SwiftUICore.CoordinateSpace) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol CoordinateSpaceProtocol {
  var coordinateSpace: SwiftUICore.CoordinateSpace { get }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct NamedCoordinateSpace : SwiftUICore.CoordinateSpaceProtocol, Swift.Equatable {
  public var coordinateSpace: SwiftUICore.CoordinateSpace {
    get
  }
  public static func == (a: SwiftUICore.NamedCoordinateSpace, b: SwiftUICore.NamedCoordinateSpace) -> Swift.Bool
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.CoordinateSpaceProtocol where Self == SwiftUICore.NamedCoordinateSpace {
  public static func named(_ name: some Hashable) -> SwiftUICore.NamedCoordinateSpace
}
@available(*, unavailable)
extension SwiftUICore.NamedCoordinateSpace : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct LocalCoordinateSpace : SwiftUICore.CoordinateSpaceProtocol {
  public init()
  public var coordinateSpace: SwiftUICore.CoordinateSpace {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore.LocalCoordinateSpace : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.CoordinateSpaceProtocol where Self == SwiftUICore.LocalCoordinateSpace {
  public static var local: SwiftUICore.LocalCoordinateSpace {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct GlobalCoordinateSpace : SwiftUICore.CoordinateSpaceProtocol {
  public init()
  public var coordinateSpace: SwiftUICore.CoordinateSpace {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore.GlobalCoordinateSpace : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.CoordinateSpaceProtocol where Self == SwiftUICore.GlobalCoordinateSpace {
  public static var global: SwiftUICore.GlobalCoordinateSpace {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.2)
extension SwiftUICore.Group {
  public init<Base, Result>(subviews view: Base, @SwiftUICore.ViewBuilder transform: @escaping (SwiftUICore.SubviewsCollection) -> Result) where Content == SwiftUICore.GroupElementsOfContent<Base, Result>, Base : SwiftUICore.View, Result : SwiftUICore.View
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.2)
public struct GroupElementsOfContent<Subviews, Content> : SwiftUICore.View where Subviews : SwiftUICore.View, Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI22GroupElementsOfContentV4bodyQrvp", 0) __<Subviews, Content>
}
@available(*, unavailable)
extension SwiftUICore.GroupElementsOfContent : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.2)
public struct SubviewsCollection : Swift.RandomAccessCollection {
  public func index(before i: Swift.Int) -> Swift.Int
  public func index(after i: Swift.Int) -> Swift.Int
  public subscript(index: Swift.Int) -> SwiftUICore.Subview {
    get
  }
  public subscript(bounds: Swift.Range<Swift.Int>) -> SwiftUICore.SubviewsCollectionSlice {
    get
  }
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Element = SwiftUICore.Subview
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Index = Swift.Int
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Indices = Swift.Range<Swift.Int>
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Iterator = Swift.IndexingIterator<SwiftUICore.SubviewsCollection>
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias SubSequence = SwiftUICore.SubviewsCollectionSlice
}
@available(*, unavailable)
extension SwiftUICore.SubviewsCollection : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.2)
extension SwiftUICore.SubviewsCollection : SwiftUICore.View {
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUICore.SubviewsCollection>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.2)
public struct SubviewsCollectionSlice : Swift.RandomAccessCollection {
  public subscript(index: Swift.Int) -> SwiftUICore.Subview {
    get
  }
  public subscript(bounds: Swift.Range<Swift.Int>) -> SwiftUICore.SubviewsCollectionSlice {
    get
  }
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Element = SwiftUICore.Subview
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Index = Swift.Int
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Indices = Swift.Range<Swift.Int>
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Iterator = Swift.IndexingIterator<SwiftUICore.SubviewsCollectionSlice>
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias SubSequence = SwiftUICore.SubviewsCollectionSlice
}
@available(*, unavailable)
extension SwiftUICore.SubviewsCollectionSlice : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.2)
extension SwiftUICore.SubviewsCollectionSlice : SwiftUICore.View {
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUICore.SubviewsCollectionSlice>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
final public class ImageRenderer<Content> : Combine.ObservableObject where Content : SwiftUICore.View {
  final public let objectWillChange: Combine.PassthroughSubject<Swift.Void, Swift.Never>
  @available(iOS 17.2, macOS 14.2, tvOS 17.2, watchOS 10.2, *)
  @usableFromInline
  final internal var observationEnabled: Swift.Bool
  @available(iOS 17.2, macOS 14.2, tvOS 17.2, watchOS 10.2, *)
  @_alwaysEmitIntoClient final public var isObservationEnabled: Swift.Bool {
    get { observationEnabled }
    set { observationEnabled = newValue }
  }
  @_Concurrency.MainActor final public var content: Content {
    get
    set
  }
  @_Concurrency.MainActor final public var proposedSize: SwiftUICore.ProposedViewSize {
    get
    set
  }
  @_Concurrency.MainActor final public var scale: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor final public var isOpaque: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor final public var colorMode: SwiftUICore.ColorRenderingMode {
    get
    set
  }
  @_Concurrency.MainActor public init(content view: Content)
  @_Concurrency.MainActor final public var cgImage: CoreGraphics.CGImage? {
    get
  }
  @_Concurrency.MainActor final public func render(rasterizationScale: CoreFoundation.CGFloat = 1, renderer: (CoreFoundation.CGSize, (CoreGraphics.CGContext) -> Swift.Void) -> Swift.Void)
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ObjectWillChangePublisher = Combine.PassthroughSubject<Swift.Void, Swift.Never>
  @objc deinit
}
@available(iOS 17.1, macOS 14.1, tvOS 17.1, watchOS 10.1, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
extension SwiftUICore.ImageRenderer : Observation.Observable {
}
@available(*, unavailable)
extension SwiftUICore.ImageRenderer : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _SaturationEffect : Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var amount: Swift.Double
  @inlinable nonisolated public init(amount: Swift.Double) {
        self.amount = amount
    }
  @_Concurrency.MainActor @preconcurrency public var animatableData: Swift.Double {
    get
    set
  }
  nonisolated public static func == (a: SwiftUICore._SaturationEffect, b: SwiftUICore._SaturationEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = Swift.Double
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func saturation(_ amount: Swift.Double) -> some SwiftUICore.View {
        return modifier(_SaturationEffect(amount: amount))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color {
  public func opacity(_ opacity: Swift.Double) -> SwiftUICore.Color
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public func mix(with rhs: SwiftUICore.Color, by fraction: Swift.Double, in colorSpace: SwiftUICore.Gradient.ColorSpace = .perceptual) -> SwiftUICore.Color
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public enum TextAlignment : Swift.Hashable, Swift.CaseIterable {
  case leading
  case center
  case trailing
  public static func == (a: SwiftUICore.TextAlignment, b: SwiftUICore.TextAlignment) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AllCases = [SwiftUICore.TextAlignment]
  nonisolated public static var allCases: [SwiftUICore.TextAlignment] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct Angle {
  public var radians: Swift.Double
  @inlinable public var degrees: Swift.Double {
    get { return radians * (180.0 / .pi) }
    set { radians = newValue * (.pi / 180.0) }
  }
  @inlinable public init() {
        self.init(radians: 0.0)
    }
  @inlinable public init(radians: Swift.Double) {
        self.radians = radians
    }
  @inlinable public init(degrees: Swift.Double) {
        self.init(radians: degrees * (.pi / 180.0))
    }
  @inlinable public static func radians(_ radians: Swift.Double) -> SwiftUICore.Angle {
        return Angle(radians: radians)
    }
  @inlinable public static func degrees(_ degrees: Swift.Double) -> SwiftUICore.Angle {
        return Angle(degrees: degrees)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Angle : Swift.Hashable, Swift.Comparable {
  @inlinable public static func < (lhs: SwiftUICore.Angle, rhs: SwiftUICore.Angle) -> Swift.Bool {
        return lhs.radians < rhs.radians
    }
  public static func == (a: SwiftUICore.Angle, b: SwiftUICore.Angle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Angle : SwiftUICore.Animatable, SwiftUICore._VectorMath {
  public var animatableData: Swift.Double {
    get
    set
  }
  @inlinable public static var zero: SwiftUICore.Angle {
    get {
        return .init()
    }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = Swift.Double
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _SafeAreaIgnoringLayout {
  public var edges: SwiftUICore.Edge.Set
  @inlinable public init(edges: SwiftUICore.Edge.Set = .all) {
        self.edges = edges
    }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _SafeAreaRegionsIgnoringLayout {
  public var regions: SwiftUICore.SafeAreaRegions
  public var edges: SwiftUICore.Edge.Set
  @inlinable package init(regions: SwiftUICore.SafeAreaRegions, edges: SwiftUICore.Edge.Set) {
        self.regions = regions
        self.edges = edges
    }
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use ignoresSafeArea(_:edges:) instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use ignoresSafeArea(_:edges:) instead.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use ignoresSafeArea(_:edges:) instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use ignoresSafeArea(_:edges:) instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use ignoresSafeArea(_:edges:) instead.")
  @inlinable nonisolated public func edgesIgnoringSafeArea(_ edges: SwiftUICore.Edge.Set) -> some SwiftUICore.View {
        return modifier(_SafeAreaIgnoringLayout(edges: edges))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func ignoresSafeArea(_ regions: SwiftUICore.SafeAreaRegions = .all, edges: SwiftUICore.Edge.Set = .all) -> some SwiftUICore.View {
        return modifier(_SafeAreaRegionsIgnoringLayout(
            regions: regions, edges: edges))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _ConditionalContent<TrueContent, FalseContent> {
  @frozen public enum Storage {
    case trueContent(TrueContent)
    case falseContent(FalseContent)
  }
  public let storage: SwiftUICore._ConditionalContent<TrueContent, FalseContent>.Storage
}
@available(*, unavailable)
extension SwiftUICore._ConditionalContent.Storage : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore._ConditionalContent : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ConditionalContent {
  @available(*, deprecated, message: "Do not use this.")
  @_alwaysEmitIntoClient public init(_storage: SwiftUICore._ConditionalContent<TrueContent, FalseContent>.Storage) {
        self.storage = _storage
    }
  @_alwaysEmitIntoClient package init(__storage: SwiftUICore._ConditionalContent<TrueContent, FalseContent>.Storage) {
        self.storage = __storage
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ConditionalContent : SwiftUICore.View where TrueContent : SwiftUICore.View, FalseContent : SwiftUICore.View {
  public typealias Body = Swift.Never
  @usableFromInline
  internal init(storage: SwiftUICore._ConditionalContent<TrueContent, FalseContent>.Storage)
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore._ConditionalContent<TrueContent, FalseContent>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUICore._ConditionalContent<TrueContent, FalseContent>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct PinnedScrollableViews : Swift.OptionSet, Swift.Sendable {
  public let rawValue: Swift.UInt32
  public init(rawValue: Swift.UInt32)
  public static let sectionHeaders: SwiftUICore.PinnedScrollableViews
  public static let sectionFooters: SwiftUICore.PinnedScrollableViews
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias ArrayLiteralElement = SwiftUICore.PinnedScrollableViews
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Element = SwiftUICore.PinnedScrollableViews
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias RawValue = Swift.UInt32
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image {
  public enum TemplateRenderingMode : Swift.Sendable {
    case template
    case original
    public static func == (a: SwiftUICore.Image.TemplateRenderingMode, b: SwiftUICore.Image.TemplateRenderingMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(macOS 11.0, *)
  public enum Scale : Swift.Hashable, Swift.Sendable {
    case small
    case medium
    case large
    public static func == (a: SwiftUICore.Image.Scale, b: SwiftUICore.Image.Scale) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum UserInterfaceSizeClass : Swift.Sendable {
  case compact
  case regular
  public static func == (a: SwiftUICore.UserInterfaceSizeClass, b: SwiftUICore.UserInterfaceSizeClass) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@available(iOS, unavailable)
@available(macCatalyst, introduced: 13.0, deprecated: 100000.0, message: "Use `EnvironmentValues.appearsActive` instead.")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `EnvironmentValues.appearsActive` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public enum ControlActiveState : Swift.Equatable, Swift.CaseIterable, Swift.Sendable {
  case key
  case active
  case inactive
  public static func == (a: SwiftUICore.ControlActiveState, b: SwiftUICore.ControlActiveState) -> Swift.Bool
  @available(iOS, unavailable, message: "Use `EnvironmentValues.appearsActive` instead.")
  @available(tvOS, unavailable, message: "Use `EnvironmentValues.appearsActive` instead.")
  @available(watchOS, unavailable, message: "Use `EnvironmentValues.appearsActive` instead.")
  @available(visionOS, unavailable, message: "Use `EnvironmentValues.appearsActive` instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `EnvironmentValues.appearsActive` instead.")
  @available(macCatalyst, introduced: 13.0, deprecated: 100000.0, message: "Use `EnvironmentValues.appearsActive` instead.")
  public typealias AllCases = [SwiftUICore.ControlActiveState]
  nonisolated public static var allCases: [SwiftUICore.ControlActiveState] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum LegibilityWeight : Swift.Hashable, Swift.Sendable {
  case regular
  case bold
  public static func == (a: SwiftUICore.LegibilityWeight, b: SwiftUICore.LegibilityWeight) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @available(macOS 11.0, *)
  @inlinable nonisolated public func imageScale(_ scale: SwiftUICore.Image.Scale) -> some SwiftUICore.View {
        return environment(\.imageScale, scale)
    }
  
  @inlinable nonisolated public func font(_ font: SwiftUICore.Font?) -> some SwiftUICore.View {
        return environment(\.font, font)
    }
  
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public func monospacedDigit() -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func monospaced(_ isActive: Swift.Bool = true) -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func fontWeight(_ weight: SwiftUICore.Font.Weight?) -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func fontWidth(_ width: SwiftUICore.Font.Width?) -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func bold(_ isActive: Swift.Bool = true) -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func italic(_ isActive: Swift.Bool = true) -> some SwiftUICore.View
  
  @available(iOS 16.1, macOS 13.0, tvOS 16.1, watchOS 9.1, *)
  nonisolated public func fontDesign(_ design: SwiftUICore.Font.Design?) -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func kerning(_ kerning: CoreFoundation.CGFloat) -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func tracking(_ tracking: CoreFoundation.CGFloat) -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func baselineOffset(_ baselineOffset: CoreFoundation.CGFloat) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var font: SwiftUICore.Font? {
    get
    set
  }
  @available(macOS 11.0, *)
  public var imageScale: SwiftUICore.Image.Scale {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var displayScale: CoreFoundation.CGFloat {
    get
    set
  }
  public var pixelLength: CoreFoundation.CGFloat {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var legibilityWeight: SwiftUICore.LegibilityWeight? {
    get
    set
  }
  public var locale: Foundation.Locale {
    get
    set
  }
  public var calendar: Foundation.Calendar {
    get
    set
  }
  public var timeZone: Foundation.TimeZone {
    get
    set
  }
  @available(iOS, unavailable)
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `EnvironmentValues.appearsActive` instead.")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public var controlActiveState: SwiftUICore.ControlActiveState {
    get
    set
  }
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @backDeployed(before: macOS 14.0, tvOS 17.0, watchOS 10.0)
  public var horizontalSizeClass: SwiftUICore.UserInterfaceSizeClass? {
    get
    set
  }
  @available(iOS 13.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @usableFromInline
  internal var realHorizontalSizeClass: SwiftUICore.UserInterfaceSizeClass? {
    get
    set
  }
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @backDeployed(before: macOS 14.0, tvOS 17.0, watchOS 10.0)
  public var verticalSizeClass: SwiftUICore.UserInterfaceSizeClass? {
    get
    set
  }
  @available(iOS 13.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @usableFromInline
  internal var realVerticalSizeClass: SwiftUICore.UserInterfaceSizeClass? {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  @available(iOS, unavailable)
  @available(macOS, introduced: 11.0, deprecated: 12.0, message: "Use `backgroundMaterial` instead")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public var _useVibrantStyling: Swift.Bool {
    get
    set
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Gradient {
  public struct ColorSpace : Swift.Hashable, Swift.Sendable {
    public static let device: SwiftUICore.Gradient.ColorSpace
    public static let perceptual: SwiftUICore.Gradient.ColorSpace
    public static func == (a: SwiftUICore.Gradient.ColorSpace, b: SwiftUICore.Gradient.ColorSpace) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func colorSpace(_ space: SwiftUICore.Gradient.ColorSpace) -> SwiftUICore.AnyGradient
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnyGradient {
  public func colorSpace(_ space: SwiftUICore.Gradient.ColorSpace) -> SwiftUICore.AnyGradient
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct ForEach<Data, ID, Content> where Data : Swift.RandomAccessCollection, ID : Swift.Hashable {
  public var data: Data
  public var content: (Data.Element) -> Content
}
@available(*, unavailable)
extension SwiftUICore.ForEach : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ForEach : SwiftUICore.View where Content : SwiftUICore.View {
  public typealias Body = Swift.Never
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.ForEach<Data, ID, Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUICore.ForEach<Data, ID, Content>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ForEach where ID == Data.Element.ID, Content : SwiftUICore.View, Data.Element : Swift.Identifiable {
  public init(_ data: Data, @SwiftUICore.ViewBuilder content: @escaping (Data.Element) -> Content)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ForEach where Content : SwiftUICore.View {
  public init(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUICore.ViewBuilder content: @escaping (Data.Element) -> Content)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ForEach where Content : SwiftUICore.View {
  @_disfavoredOverload @_alwaysEmitIntoClient public init<C>(_ data: SwiftUICore.Binding<C>, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<C.Element>) -> Content) where Data == Swift.LazyMapSequence<C.Indices, (C.Index, ID)>, ID == C.Element.ID, C : Swift.MutableCollection, C : Swift.RandomAccessCollection, C.Element : Swift.Identifiable, C.Index : Swift.Hashable {
        self.init(data, id: \.id, content: content)
    }
  @_disfavoredOverload @_alwaysEmitIntoClient public init<C>(_ data: SwiftUICore.Binding<C>, id: Swift.KeyPath<C.Element, ID>, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<C.Element>) -> Content) where Data == Swift.LazyMapSequence<C.Indices, (C.Index, ID)>, C : Swift.MutableCollection, C : Swift.RandomAccessCollection, C.Index : Swift.Hashable {
        let elementIDs = data.wrappedValue.indices.lazy.map { index in
            (index, data.wrappedValue[index][keyPath: id])
        }
        self.init(elementIDs, id: \.1) { (index, _) in
            let elementBinding = Binding {
                data.wrappedValue[index]
            } set: {
                data.wrappedValue[index] = $0
            }
            content(elementBinding)
        }
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ForEach where Data == Swift.Range<Swift.Int>, ID == Swift.Int, Content : SwiftUICore.View {
  @_semantics("swiftui.requires_constant_range") public init(_ data: Swift.Range<Swift.Int>, @SwiftUICore.ViewBuilder content: @escaping (Swift.Int) -> Content)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct OffsetShape<Content> : SwiftUICore.Shape where Content : SwiftUICore.Shape {
  public var shape: Content
  public var offset: CoreFoundation.CGSize
  @inlinable public init(shape: Content, offset: CoreFoundation.CGSize) {
        self.shape = shape
        self.offset = offset
    }
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public static var role: SwiftUICore.ShapeRole {
    get
  }
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
    get
  }
  public typealias AnimatableData = SwiftUICore.AnimatablePair<Content.AnimatableData, CoreFoundation.CGSize.AnimatableData>
  public var animatableData: SwiftUICore.OffsetShape<Content>.AnimatableData {
    get
    set
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.OffsetShape<Content>, SwiftUICore.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.OffsetShape : SwiftUICore.InsettableShape where Content : SwiftUICore.InsettableShape {
  @inlinable nonisolated public func inset(by amount: CoreFoundation.CGFloat) -> SwiftUICore.OffsetShape<Content.InsetShape> {
        return shape.inset(by: amount).offset(offset)
    }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias InsetShape = SwiftUICore.OffsetShape<Content.InsetShape>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct ScaledShape<Content> : SwiftUICore.Shape where Content : SwiftUICore.Shape {
  public var shape: Content
  public var scale: CoreFoundation.CGSize
  public var anchor: SwiftUICore.UnitPoint
  @inlinable public init(shape: Content, scale: CoreFoundation.CGSize, anchor: SwiftUICore.UnitPoint = .center) {
        self.shape = shape
        self.scale = scale
        self.anchor = anchor
    }
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public static var role: SwiftUICore.ShapeRole {
    get
  }
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
    get
  }
  public typealias AnimatableData = SwiftUICore.AnimatablePair<Content.AnimatableData, SwiftUICore.AnimatablePair<CoreFoundation.CGSize.AnimatableData, SwiftUICore.UnitPoint.AnimatableData>>
  public var animatableData: SwiftUICore.ScaledShape<Content>.AnimatableData {
    get
    set
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.ScaledShape<Content>, SwiftUICore.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct RotatedShape<Content> : SwiftUICore.Shape where Content : SwiftUICore.Shape {
  public var shape: Content
  public var angle: SwiftUICore.Angle
  public var anchor: SwiftUICore.UnitPoint
  @inlinable public init(shape: Content, angle: SwiftUICore.Angle, anchor: SwiftUICore.UnitPoint = .center) {
        self.shape = shape
        self.angle = angle
        self.anchor = anchor
    }
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public static var role: SwiftUICore.ShapeRole {
    get
  }
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
    get
  }
  public typealias AnimatableData = SwiftUICore.AnimatablePair<Content.AnimatableData, SwiftUICore.AnimatablePair<SwiftUICore.Angle.AnimatableData, SwiftUICore.UnitPoint.AnimatableData>>
  public var animatableData: SwiftUICore.RotatedShape<Content>.AnimatableData {
    get
    set
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.RotatedShape<Content>, SwiftUICore.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.RotatedShape : SwiftUICore.InsettableShape where Content : SwiftUICore.InsettableShape {
  @inlinable nonisolated public func inset(by amount: CoreFoundation.CGFloat) -> SwiftUICore.RotatedShape<Content.InsetShape> {
        return shape.inset(by: amount).rotation(angle, anchor: anchor)
    }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias InsetShape = SwiftUICore.RotatedShape<Content.InsetShape>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct TransformedShape<Content> : SwiftUICore.Shape where Content : SwiftUICore.Shape {
  public var shape: Content
  public var transform: CoreFoundation.CGAffineTransform
  @inlinable public init(shape: Content, transform: CoreFoundation.CGAffineTransform) {
        self.shape = shape
        self.transform = transform
    }
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public static var role: SwiftUICore.ShapeRole {
    get
  }
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
    get
  }
  public typealias AnimatableData = Content.AnimatableData
  public var animatableData: SwiftUICore.TransformedShape<Content>.AnimatableData {
    get
    set
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.TransformedShape<Content>, SwiftUICore.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape {
  @inlinable public func offset(_ offset: CoreFoundation.CGSize) -> SwiftUICore.OffsetShape<Self> {
        return OffsetShape(shape: self, offset: offset)
    }
  @inlinable public func offset(_ offset: CoreFoundation.CGPoint) -> SwiftUICore.OffsetShape<Self> {
        return OffsetShape(
            shape: self, offset: CGSize(width: offset.x, height: offset.y))
    }
  @inlinable public func offset(x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0) -> SwiftUICore.OffsetShape<Self> {
        return OffsetShape(shape: self, offset: .init(width: x, height: y))
    }
  @inlinable public func scale(x: CoreFoundation.CGFloat = 1, y: CoreFoundation.CGFloat = 1, anchor: SwiftUICore.UnitPoint = .center) -> SwiftUICore.ScaledShape<Self> {
        return ScaledShape(shape: self,
            scale: CGSize(width: x, height: y), anchor: anchor)
    }
  @inlinable public func scale(_ scale: CoreFoundation.CGFloat, anchor: SwiftUICore.UnitPoint = .center) -> SwiftUICore.ScaledShape<Self> {
        return self.scale(x: scale, y: scale, anchor: anchor)
    }
  @inlinable public func rotation(_ angle: SwiftUICore.Angle, anchor: SwiftUICore.UnitPoint = .center) -> SwiftUICore.RotatedShape<Self> {
        return RotatedShape(shape: self, angle: angle, anchor: anchor)
    }
  @inlinable public func transform(_ transform: CoreFoundation.CGAffineTransform) -> SwiftUICore.TransformedShape<Self> {
        return TransformedShape(shape: self, transform: transform)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ColorMultiplyEffect : SwiftUICore.EnvironmentalModifier, Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var color: SwiftUICore.Color
  @inlinable nonisolated public init(color: SwiftUICore.Color) {
        self.color = color
    }
  @_Concurrency.MainActor @preconcurrency public func resolve(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore._ColorMultiplyEffect._Resolved
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_Concurrency.MainActor @preconcurrency public static var _requiresMainThread: Swift.Bool {
    get
  }
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var _requiresMainThread: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public struct _Resolved {
    public typealias AnimatableData = SwiftUICore.AnimatablePair<Swift.Float, SwiftUICore.AnimatablePair<Swift.Float, SwiftUICore.AnimatablePair<Swift.Float, Swift.Float>>>
    @_Concurrency.MainActor @preconcurrency public var animatableData: SwiftUICore._ColorMultiplyEffect._Resolved.AnimatableData {
      get
      set
    }
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias Body = Swift.Never
  }
  nonisolated public static func == (a: SwiftUICore._ColorMultiplyEffect, b: SwiftUICore._ColorMultiplyEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ResolvedModifier = SwiftUICore._ColorMultiplyEffect._Resolved
}
@available(*, unavailable)
extension SwiftUICore._ColorMultiplyEffect : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore._ColorMultiplyEffect._Resolved : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func colorMultiply(_ color: SwiftUICore.Color) -> some SwiftUICore.View {
        return modifier(_ColorMultiplyEffect(color: color))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct Canvas<Symbols> where Symbols : SwiftUICore.View {
  public var symbols: Symbols
  public var renderer: (inout SwiftUICore.GraphicsContext, CoreFoundation.CGSize) -> Swift.Void
  public var isOpaque: Swift.Bool {
    get
    set
  }
  public var colorMode: SwiftUICore.ColorRenderingMode {
    get
    set
  }
  public var rendersAsynchronously: Swift.Bool {
    get
    set
  }
  public init(opaque: Swift.Bool = false, colorMode: SwiftUICore.ColorRenderingMode = .nonLinear, rendersAsynchronously: Swift.Bool = false, renderer: @escaping (inout SwiftUICore.GraphicsContext, CoreFoundation.CGSize) -> Swift.Void, @SwiftUICore.ViewBuilder symbols: () -> Symbols)
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.Canvas<Symbols>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.Canvas : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Canvas where Symbols == SwiftUICore.EmptyView {
  public init(opaque: Swift.Bool = false, colorMode: SwiftUICore.ColorRenderingMode = .nonLinear, rendersAsynchronously: Swift.Bool = false, renderer: @escaping (inout SwiftUICore.GraphicsContext, CoreFoundation.CGSize) -> Swift.Void)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public func withAnimation<Result>(_ animation: SwiftUICore.Animation? = .default, _ body: () throws -> Result) rethrows -> Result
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
extension SwiftUICore.View {
  @inlinable nonisolated public func transformAnchorPreference<A, K>(key _: K.Type = K.self, value: SwiftUICore.Anchor<A>.Source, transform: @escaping (inout K.Value, SwiftUICore.Anchor<A>) -> Swift.Void) -> some SwiftUICore.View where K : SwiftUICore.PreferenceKey {
        return modifier(_AnchorTransformModifier<A, K>(
            anchor: value, transform: transform))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
@frozen public struct _AnchorTransformModifier<AnchorValue, Key> : SwiftUICore.ViewModifier where Key : SwiftUICore.PreferenceKey {
  public var anchor: SwiftUICore.Anchor<AnchorValue>.Source
  public var transform: (inout Key.Value, SwiftUICore.Anchor<AnchorValue>) -> Swift.Void
  @inlinable public init(anchor: SwiftUICore.Anchor<AnchorValue>.Source, transform: @escaping (inout Key.Value, SwiftUICore.Anchor<AnchorValue>) -> Swift.Void) {
        self.anchor = anchor
        self.transform = transform
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._AnchorTransformModifier<AnchorValue, Key>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._AnchorTransformModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ClipEffect<ClipShape> where ClipShape : SwiftUICore.Shape {
  @_Concurrency.MainActor @preconcurrency public var shape: ClipShape
  @_Concurrency.MainActor @preconcurrency public var style: SwiftUICore.FillStyle
  @inlinable nonisolated public init(shape: ClipShape, style: SwiftUICore.FillStyle = FillStyle()) {
        self.shape = shape
        self.style = style
    }
  @_Concurrency.MainActor @preconcurrency public var animatableData: ClipShape.AnimatableData {
    get
    set
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = ClipShape.AnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func clipShape<S>(_ shape: S, style: SwiftUICore.FillStyle = FillStyle()) -> some SwiftUICore.View where S : SwiftUICore.Shape {
        return modifier(_ClipEffect(shape: shape, style: style))
    }
  
  @inlinable nonisolated public func clipped(antialiased: Swift.Bool = false) -> some SwiftUICore.View {
        return clipShape(Rectangle(),
            style: FillStyle(antialiased: antialiased))
    }
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use `clipShape` or `fill` instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `clipShape` or `fill` instead.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use `clipShape` or `fill` instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use `clipShape` or `fill` instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use `clipShape` or `fill` instead.")
  @inlinable nonisolated public func cornerRadius(_ radius: CoreFoundation.CGFloat, antialiased: Swift.Bool = true) -> some SwiftUICore.View {
        return clipShape(RoundedRectangle(cornerRadius: radius),
            style: FillStyle(antialiased: antialiased))
    }
  
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.HoverEffectContent {
  public func clipShape<S>(_ shape: S, style: SwiftUICore.FillStyle = FillStyle()) -> some SwiftUICore.HoverEffectContent where S : SwiftUICore.Shape
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func transaction(_ transform: @escaping (inout SwiftUICore.Transaction) -> Swift.Void) -> some SwiftUICore.View {
        modifier(_TransactionModifier(transform: transform))
    }
  
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_alwaysEmitIntoClient nonisolated public func transaction(value: some Equatable, _ transform: @escaping (inout SwiftUICore.Transaction) -> Swift.Void) -> some SwiftUICore.View {
        modifier(_ValueTransactionModifier(value: value, transform: transform))
    }
  
  @available(iOS, introduced: 13.0, deprecated: 15.0, message: "Use withAnimation or animation(_:value:) instead.")
  @available(macOS, introduced: 10.15, deprecated: 12.0, message: "Use withAnimation or animation(_:value:) instead.")
  @available(tvOS, introduced: 13.0, deprecated: 15.0, message: "Use withAnimation or animation(_:value:) instead.")
  @available(watchOS, introduced: 6.0, deprecated: 8.0, message: "Use withAnimation or animation(_:value:) instead.")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "Use withAnimation or animation(_:value:) instead.")
  @_disfavoredOverload @inlinable nonisolated public func animation(_ animation: SwiftUICore.Animation?) -> some SwiftUICore.View {
        return transaction { t in
            if !t.disablesAnimations {
                t.animation = animation
            }
        }
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ViewModifier {
  @inlinable nonisolated public func transaction(_ transform: @escaping (inout SwiftUICore.Transaction) -> Swift.Void) -> some SwiftUICore.ViewModifier {
        return _PushPopTransactionModifier(content: self, transform: transform)
    }
  
  @inlinable @_Concurrency.MainActor @preconcurrency public func animation(_ animation: SwiftUICore.Animation?) -> some SwiftUICore.ViewModifier {
        return transaction { t in
            if !t.disablesAnimations {
                t.animation = animation
            }
        }
    }
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  nonisolated public func transaction<V>(_ transform: @escaping (inout SwiftUICore.Transaction) -> Swift.Void, @SwiftUICore.ViewBuilder body: (SwiftUICore.PlaceholderContentView<Self>) -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
  nonisolated public func animation<V>(_ animation: SwiftUICore.Animation?, @SwiftUICore.ViewBuilder body: (SwiftUICore.PlaceholderContentView<Self>) -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _TransactionModifier : SwiftUICore.ViewModifier, SwiftUICore._GraphInputsModifier {
  public var transform: (inout SwiftUICore.Transaction) -> Swift.Void
  @inlinable public init(transform: @escaping (inout SwiftUICore.Transaction) -> Swift.Void) {
        self.transform = transform
    }
  public static func _makeInputs(modifier: SwiftUICore._GraphValue<SwiftUICore._TransactionModifier>, inputs: inout SwiftUICore._GraphInputs)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._TransactionModifier : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _ValueTransactionModifier<Value> : SwiftUICore.ViewModifier, SwiftUICore._GraphInputsModifier where Value : Swift.Equatable {
  public var value: Value
  public var transform: (inout SwiftUICore.Transaction) -> Swift.Void
  @inlinable public init(value: Value, transform: @escaping (inout SwiftUICore.Transaction) -> Swift.Void) {
        self.value = value
        self.transform = transform
    }
  public static func _makeInputs(modifier: SwiftUICore._GraphValue<SwiftUICore._ValueTransactionModifier<Value>>, inputs: inout SwiftUICore._GraphInputs)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._ValueTransactionModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _PushPopTransactionModifier<Content> : SwiftUICore.ViewModifier where Content : SwiftUICore.ViewModifier {
  public var content: Content
  public var base: SwiftUICore._TransactionModifier
  @inlinable public init(content: Content, transform: @escaping (inout SwiftUICore.Transaction) -> Swift.Void) {
        self.content = content
        base = .init(transform: transform)
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._PushPopTransactionModifier<Content>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._PushPopTransactionModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Font {
  public static func custom(_ name: Swift.String, size: CoreFoundation.CGFloat) -> SwiftUICore.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func custom(_ name: Swift.String, size: CoreFoundation.CGFloat, relativeTo textStyle: SwiftUICore.Font.TextStyle) -> SwiftUICore.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @available(*, deprecated, renamed: "custom(_:size:textStyle:)")
  public static func _custom(_ name: Swift.String, size: CoreFoundation.CGFloat, textStyle: SwiftUICore.Font.TextStyle) -> SwiftUICore.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func custom(_ name: Swift.String, fixedSize: CoreFoundation.CGFloat) -> SwiftUICore.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @available(*, deprecated, renamed: "custom(_:fixedSize:)")
  public static func _custom(_ name: Swift.String, verbatimSize: CoreFoundation.CGFloat) -> SwiftUICore.Font
  public init(_ font: CoreText.CTFont)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Font {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func system(size: CoreFoundation.CGFloat, weight: SwiftUICore.Font.Weight? = nil, design: SwiftUICore.Font.Design? = nil) -> SwiftUICore.Font
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use `system(size:weight:design:)` instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `system(size:weight:design:)` instead.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use `system(size:weight:design:)` instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use `system(size:weight:design:)` instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use `system(size:weight:design:)` instead.")
  @_disfavoredOverload public static func system(size: CoreFoundation.CGFloat, weight: SwiftUICore.Font.Weight = .regular, design: SwiftUICore.Font.Design = .default) -> SwiftUICore.Font
  public enum Design : Swift.Hashable, Swift.Sendable {
    case `default`
    @available(watchOS 7.0, *)
    case serif
    case rounded
    @available(watchOS 7.0, *)
    case monospaced
    public static func == (a: SwiftUICore.Font.Design, b: SwiftUICore.Font.Design) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol PreferenceKey {
  associatedtype Value
  static var defaultValue: Self.Value { get }
  static func reduce(value: inout Self.Value, nextValue: () -> Self.Value)
  static var _includesRemovedValues: Swift.Bool { get }
  static var _isReadableByHost: Swift.Bool { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.PreferenceKey where Self.Value : Swift.ExpressibleByNilLiteral {
  public static var defaultValue: Self.Value {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.PreferenceKey {
  public static var _includesRemovedValues: Swift.Bool {
    get
  }
  public static var _isReadableByHost: Swift.Bool {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape {
  @inlinable @_disfavoredOverload nonisolated public func fill<S>(_ content: S, style: SwiftUICore.FillStyle = FillStyle()) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
        return _ShapeView(shape: self, style: content, fillStyle: style)
    }
  
  @inlinable @_disfavoredOverload nonisolated public func fill(style: SwiftUICore.FillStyle = FillStyle()) -> some SwiftUICore.View {
        return _ShapeView(shape: self, style: .foreground, fillStyle: style)
    }
  
  @inlinable @_disfavoredOverload nonisolated public func stroke<S>(_ content: S, style: SwiftUICore.StrokeStyle) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
        return _ShapeView(shape: stroke(style: style), style: content)
    }
  
  @inlinable @_disfavoredOverload nonisolated public func stroke<S>(_ content: S, lineWidth: CoreFoundation.CGFloat = 1) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
        return _ShapeView(
            shape: stroke(style: StrokeStyle(lineWidth: lineWidth)),
            style: content)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape {
  public var body: SwiftUICore._ShapeView<Self, SwiftUICore.ForegroundStyle> {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape {
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self : SwiftUICore.View, Self.Body == SwiftUICore._ShapeView<SwiftUICore.Rectangle, Self> {
  public var body: SwiftUICore._ShapeView<SwiftUICore.Rectangle, Self> {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _ShapeView<Content, Style> : SwiftUICore.View where Content : SwiftUICore.Shape, Style : SwiftUICore.ShapeStyle {
  public var shape: Content
  public var style: Style
  public var fillStyle: SwiftUICore.FillStyle
  @inlinable public init(shape: Content, style: Style, fillStyle: SwiftUICore.FillStyle = FillStyle()) {
        self.shape = shape
        self.style = style
        self.fillStyle = fillStyle
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<Content, Style>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._ShapeView : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol ShapeView<Content> : SwiftUICore.View {
  associatedtype Content : SwiftUICore.Shape
  var shape: Self.Content { get }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape {
  @_alwaysEmitIntoClient nonisolated public func fill<S>(_ content: S = .foreground, style: SwiftUICore.FillStyle = FillStyle()) -> SwiftUICore._ShapeView<Self, S> where S : SwiftUICore.ShapeStyle {
        _ShapeView(shape: self, style: content, fillStyle: style)
    }
  @_alwaysEmitIntoClient nonisolated public func stroke<S>(_ content: S, style: SwiftUICore.StrokeStyle, antialiased: Swift.Bool = true) -> SwiftUICore.StrokeShapeView<Self, S, SwiftUICore.EmptyView> where S : SwiftUICore.ShapeStyle {
        StrokeShapeView(
            shape: self, style: content, strokeStyle: style,
            isAntialiased: antialiased, background: EmptyView())
    }
  @_alwaysEmitIntoClient nonisolated public func stroke<S>(_ content: S, lineWidth: CoreFoundation.CGFloat = 1, antialiased: Swift.Bool = true) -> SwiftUICore.StrokeShapeView<Self, S, SwiftUICore.EmptyView> where S : SwiftUICore.ShapeStyle {
        stroke(
            content, style: StrokeStyle(lineWidth: lineWidth),
            antialiased: antialiased)
    }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.InsettableShape {
  @_alwaysEmitIntoClient nonisolated public func strokeBorder<S>(_ content: S = .foreground, style: SwiftUICore.StrokeStyle, antialiased: Swift.Bool = true) -> SwiftUICore.StrokeBorderShapeView<Self, S, SwiftUICore.EmptyView> where S : SwiftUICore.ShapeStyle {
        StrokeBorderShapeView(
            shape: self, style: content, strokeStyle: style,
            isAntialiased: antialiased, background: EmptyView())
    }
  @_alwaysEmitIntoClient nonisolated public func strokeBorder<S>(_ content: S = .foreground, lineWidth: CoreFoundation.CGFloat = 1, antialiased: Swift.Bool = true) -> SwiftUICore.StrokeBorderShapeView<Self, S, SwiftUICore.EmptyView> where S : SwiftUICore.ShapeStyle {
        strokeBorder(content, style: StrokeStyle(lineWidth: lineWidth),
            antialiased: antialiased)
    }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore._ShapeView : SwiftUICore.ShapeView {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct FillShapeView<Content, Style, Background> : SwiftUICore.ShapeView where Content : SwiftUICore.Shape, Style : SwiftUICore.ShapeStyle, Background : SwiftUICore.View {
  @usableFromInline
  internal typealias ViewType = SwiftUICore.ModifiedContent<SwiftUICore._ShapeView<Content, Style>, SwiftUICore._BackgroundModifier<Background>>
  @usableFromInline
  internal var view: SwiftUICore.FillShapeView<Content, Style, Background>.ViewType
  @_alwaysEmitIntoClient public var shape: Content {
    get { view.content.shape }
    set { view.content.shape = newValue }
  }
  @_alwaysEmitIntoClient public var style: Style {
    get { view.content.style }
    set { view.content.style = newValue }
  }
  @_alwaysEmitIntoClient public var fillStyle: SwiftUICore.FillStyle {
    get { view.content.fillStyle }
    set { view.content.fillStyle = newValue }
  }
  @_alwaysEmitIntoClient public var background: Background {
    get { view.modifier.background }
    set { view.modifier.background = newValue }
  }
  @_alwaysEmitIntoClient public init(shape: Content, style: Style, fillStyle: SwiftUICore.FillStyle, background: Background) {
        view = .init(content: _ShapeView(
            shape: shape, style: style, fillStyle: fillStyle),
            modifier: .init(background: background))
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.FillShapeView<Content, Style, Background>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.FillShapeView : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct StrokeShapeView<Content, Style, Background> : SwiftUICore.ShapeView where Content : SwiftUICore.Shape, Style : SwiftUICore.ShapeStyle, Background : SwiftUICore.View {
  @usableFromInline
  internal typealias ViewType = SwiftUICore.ModifiedContent<SwiftUICore._ShapeView<SwiftUICore._StrokedShape<Content>, Style>, SwiftUICore._BackgroundModifier<Background>>
  @usableFromInline
  internal var view: SwiftUICore.StrokeShapeView<Content, Style, Background>.ViewType
  @_alwaysEmitIntoClient public var shape: Content {
    get { view.content.shape.shape }
    set { view.content.shape.shape = newValue }
  }
  @_alwaysEmitIntoClient public var style: Style {
    get { view.content.style }
    set { view.content.style = newValue }
  }
  @_alwaysEmitIntoClient public var strokeStyle: SwiftUICore.StrokeStyle {
    get { view.content.shape.style }
    set { view.content.shape.style = newValue }
  }
  @_alwaysEmitIntoClient public var isAntialiased: Swift.Bool {
    get { view.content.fillStyle.isAntialiased }
    set { view.content.fillStyle.isAntialiased = newValue }
  }
  @_alwaysEmitIntoClient public var background: Background {
    get { view.modifier.background }
    set { view.modifier.background = newValue }
  }
  @_alwaysEmitIntoClient public init(shape: Content, style: Style, strokeStyle: SwiftUICore.StrokeStyle, isAntialiased: Swift.Bool, background: Background) {
        view = .init(content: _ShapeView(
            shape: _StrokedShape(shape: shape, style: strokeStyle),
            style: style, fillStyle: .init(antialiased: isAntialiased)),
            modifier: .init(background: background))
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.StrokeShapeView<Content, Style, Background>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.StrokeShapeView : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct StrokeBorderShapeView<Content, Style, Background> : SwiftUICore.ShapeView where Content : SwiftUICore.InsettableShape, Style : SwiftUICore.ShapeStyle, Background : SwiftUICore.View {
  @usableFromInline
  internal typealias ViewType = SwiftUICore.ModifiedContent<SwiftUICore._ShapeView<SwiftUICore._StrokedShape<Content.InsetShape>, Style>, SwiftUICore._BackgroundModifier<Background>>
  public var shape: Content
  @usableFromInline
  internal var view: SwiftUICore.StrokeBorderShapeView<Content, Style, Background>.ViewType
  @_alwaysEmitIntoClient public var style: Style {
    get { view.content.style }
    set { view.content.style = newValue }
  }
  @_alwaysEmitIntoClient public var strokeStyle: SwiftUICore.StrokeStyle {
    get { view.content.shape.style }
    set { view.content.shape.style = newValue }
  }
  @_alwaysEmitIntoClient public var isAntialiased: Swift.Bool {
    get { view.content.fillStyle.isAntialiased }
    set { view.content.fillStyle.isAntialiased = newValue }
  }
  @_alwaysEmitIntoClient public var background: Background {
    get { view.modifier.background }
    set { view.modifier.background = newValue }
  }
  @_alwaysEmitIntoClient public init(shape: Content, style: Style, strokeStyle: SwiftUICore.StrokeStyle, isAntialiased: Swift.Bool, background: Background) {
        self.shape = shape
        view = .init(content: _ShapeView(
            shape: _StrokedShape(
                shape: shape.inset(by: strokeStyle.lineWidth * 0.5),
                style: strokeStyle),
            style: style, fillStyle: .init(antialiased: isAntialiased)),
            modifier: .init(background: background))
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.StrokeBorderShapeView<Content, Style, Background>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.StrokeBorderShapeView : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeView {
  @_alwaysEmitIntoClient nonisolated public func fill<S>(_ content: S = .foreground, style: SwiftUICore.FillStyle = FillStyle()) -> SwiftUICore.FillShapeView<Self.Content, S, Self> where S : SwiftUICore.ShapeStyle {
        FillShapeView(
            shape: shape, style: content, fillStyle: style, background: self)
    }
  @_alwaysEmitIntoClient nonisolated public func stroke<S>(_ content: S, style: SwiftUICore.StrokeStyle, antialiased: Swift.Bool = true) -> SwiftUICore.StrokeShapeView<Self.Content, S, Self> where S : SwiftUICore.ShapeStyle {
        StrokeShapeView(
            shape: shape, style: content, strokeStyle: style,
            isAntialiased: antialiased, background: self)
    }
  @_alwaysEmitIntoClient nonisolated public func stroke<S>(_ content: S, lineWidth: CoreFoundation.CGFloat = 1, antialiased: Swift.Bool = true) -> SwiftUICore.StrokeShapeView<Self.Content, S, Self> where S : SwiftUICore.ShapeStyle {
        stroke(
            content, style: StrokeStyle(lineWidth: lineWidth),
            antialiased: antialiased)
    }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeView where Self.Content : SwiftUICore.InsettableShape {
  @_alwaysEmitIntoClient nonisolated public func strokeBorder<S>(_ content: S = .foreground, style: SwiftUICore.StrokeStyle, antialiased: Swift.Bool = true) -> SwiftUICore.StrokeBorderShapeView<Self.Content, S, Self> where S : SwiftUICore.ShapeStyle {
        StrokeBorderShapeView(
            shape: shape, style: content, strokeStyle: style,
            isAntialiased: antialiased, background: self)
    }
  @_alwaysEmitIntoClient nonisolated public func strokeBorder<S>(_ content: S = .foreground, lineWidth: CoreFoundation.CGFloat = 1, antialiased: Swift.Bool = true) -> SwiftUICore.StrokeBorderShapeView<Self.Content, S, Self> where S : SwiftUICore.ShapeStyle {
        strokeBorder(content, style: StrokeStyle(lineWidth: lineWidth),
            antialiased: antialiased)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Binding {
  public init<V>(_ base: SwiftUICore.Binding<V>) where Value == V?
  public init?(_ base: SwiftUICore.Binding<Value?>)
  public init<V>(_ base: SwiftUICore.Binding<V>) where Value == Swift.AnyHashable, V : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package enum Log {
  @usableFromInline
  package static let runtimeIssuesLog: os.OSLog
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @usableFromInline
  package static var internalErrorsLog: os.OSLog
  @usableFromInline
  package static var eventDebuggingLog: os.OSLog
}
@available(*, unavailable)
extension SwiftUICore.Log : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension os.OSLog {
  @usableFromInline
  internal static var runtimeIssuesLog: os.OSLog
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.ModifiedContent : SwiftUICore.CustomHoverEffect where Content : SwiftUICore.CustomHoverEffect, Modifier : SwiftUICore.CustomHoverEffect {
  public static func _makeCustomHoverEffect(effect: SwiftUICore._GraphValue<SwiftUICore.ModifiedContent<Content, Modifier>>, inputs: SwiftUICore._CustomHoverEffectInputs, body: @escaping (SwiftUICore._CustomHoverEffectInputs) -> SwiftUICore._CustomHoverEffectOutputs) -> SwiftUICore._CustomHoverEffectOutputs
}
extension Swift.FloatingPoint {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package mutating func round(_ rule: Swift.FloatingPointRoundingRule, toMultipleOf m: Self) {
        if m == 1 {
            round(rule)
        } else {
            self /= m
            round(rule)
            self *= m
        }
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package mutating func round(toMultipleOf m: Self) {
        round(.toNearestOrAwayFromZero, toMultipleOf: m)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func rounded(_ rule: Swift.FloatingPointRoundingRule, toMultipleOf m: Self) -> Self {
        var r = self
        r.round(rule, toMultipleOf: m)
        return r
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func rounded(toMultipleOf m: Self) -> Self {
        rounded(.toNearestOrAwayFromZero, toMultipleOf: m)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package mutating func roundToNearestOrUp(toMultipleOf m: Self) {
        self += m / 2
        round(.down, toMultipleOf: m)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func roundedToNearestOrUp(toMultipleOf m: Self) -> Self {
        var r = self
        r.roundToNearestOrUp(toMultipleOf: m)
        return r
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func approximates(_ value: Self, epsilon: Self) -> Swift.Bool {
        abs(self - value) < epsilon
    }
}
extension CoreFoundation.CGPoint {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package mutating func round(_ rule: Swift.FloatingPointRoundingRule, toMultipleOf m: CoreFoundation.CGFloat) {
        x.round(rule, toMultipleOf: m)
        y.round(rule, toMultipleOf: m)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package mutating func round(toMultipleOf m: CoreFoundation.CGFloat) {
        round(.toNearestOrAwayFromZero, toMultipleOf: m)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func rounded(_ rule: Swift.FloatingPointRoundingRule, toMultipleOf m: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint {
        var r = self
        r.round(rule, toMultipleOf: m)
        return r
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func rounded(toMultipleOf m: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint {
        rounded(.toNearestOrAwayFromZero, toMultipleOf: m)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package mutating func roundToNearestOrUp(toMultipleOf m: CoreFoundation.CGFloat) {
        x.roundToNearestOrUp(toMultipleOf: m)
        y.roundToNearestOrUp(toMultipleOf: m)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func roundedToNearestOrUp(toMultipleOf m: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint {
        var r = self
        r.roundToNearestOrUp(toMultipleOf: m)
        return r
    }
}
extension CoreFoundation.CGSize {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package mutating func round(_ rule: Swift.FloatingPointRoundingRule, toMultipleOf m: CoreFoundation.CGFloat) {
        width.round(rule, toMultipleOf: m)
        height.round(rule, toMultipleOf: m)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package mutating func round(toMultipleOf m: CoreFoundation.CGFloat) {
        round(.toNearestOrAwayFromZero, toMultipleOf: m)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func rounded(_ rule: Swift.FloatingPointRoundingRule = .toNearestOrAwayFromZero, toMultipleOf m: CoreFoundation.CGFloat) -> CoreFoundation.CGSize {
        var r = self
        r.round(rule, toMultipleOf: m)
        return r
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func rounded(toMultipleOf m: CoreFoundation.CGFloat) -> CoreFoundation.CGSize {
        rounded(.toNearestOrAwayFromZero, toMultipleOf: m)
    }
}
extension CoreFoundation.CGRect {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package mutating func roundCoordinatesToNearestOrUp(toMultipleOf m: CoreFoundation.CGFloat) {
        self = self.standardized
        var max = origin + size
        origin.roundToNearestOrUp(toMultipleOf: m)
        max.roundToNearestOrUp(toMultipleOf: m)
        size.width = max.x - x
        size.height = max.y - y
         
         
        size.round(toMultipleOf: m)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func roundedCoordinatesToNearestOrUp(toMultipleOf m: CoreFoundation.CGFloat) -> CoreFoundation.CGRect {
        var r = self
        r.roundCoordinatesToNearestOrUp(toMultipleOf: m)
        return r
    }
}
extension SwiftUICore.EdgeInsets {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package mutating func round(_ rule: Swift.FloatingPointRoundingRule, toMultipleOf m: CoreFoundation.CGFloat) {
        top.round(rule, toMultipleOf: m)
        leading.round(rule, toMultipleOf: m)
        bottom.round(rule, toMultipleOf: m)
        trailing.round(rule, toMultipleOf: m)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package mutating func round(toMultipleOf m: CoreFoundation.CGFloat) {
        round(.toNearestOrAwayFromZero, toMultipleOf: m)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func rounded(_ rule: Swift.FloatingPointRoundingRule = .toNearestOrAwayFromZero, toMultipleOf m: CoreFoundation.CGFloat) -> SwiftUICore.EdgeInsets {
        var r = self
        r.round(rule, toMultipleOf: m)
        return r
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func rounded(toMultipleOf m: CoreFoundation.CGFloat) -> SwiftUICore.EdgeInsets {
        rounded(.toNearestOrAwayFromZero, toMultipleOf: m)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func approximates(_ other: SwiftUICore.EdgeInsets, epsilon: CoreFoundation.CGFloat) -> Swift.Bool {
        top.approximates(other.top, epsilon: epsilon)
            && leading.approximates(other.leading, epsilon: epsilon)
            && bottom.approximates(other.bottom, epsilon: epsilon)
            && trailing.approximates(other.trailing, epsilon: epsilon)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var accessibilityEnabled: Swift.Bool {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var accessibilityDifferentiateWithoutColor: Swift.Bool {
    get
  }
  public var _accessibilityDifferentiateWithoutColor: Swift.Bool {
    get
    set
  }
  public var accessibilityReduceTransparency: Swift.Bool {
    get
  }
  public var _accessibilityReduceTransparency: Swift.Bool {
    get
    set
  }
  public var accessibilityReduceMotion: Swift.Bool {
    get
  }
  public var _accessibilityReduceMotion: Swift.Bool {
    get
    set
  }
  public var accessibilityInvertColors: Swift.Bool {
    get
  }
  public var _accessibilityInvertColors: Swift.Bool {
    get
    set
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var accessibilityShowButtonShapes: Swift.Bool {
    get
  }
  public var _accessibilityShowButtonShapes: Swift.Bool {
    get
    set
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var accessibilityDimFlashingLights: Swift.Bool {
    get
  }
  public var accessibilityPlayAnimatedImages: Swift.Bool {
    get
  }
}
@available(visionOS 1.0, *)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var accessibilityPrefersHeadAnchorAlternative: Swift.Bool {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Transition where Self == SwiftUICore.BlurReplaceTransition {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static func blurReplace(_ config: SwiftUICore.BlurReplaceTransition.Configuration = .downUp) -> Self {
        return Self(configuration: config)
    }
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var blurReplace: SwiftUICore.BlurReplaceTransition {
    get { blurReplace(.downUp) }
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_Concurrency.MainActor @preconcurrency public struct BlurReplaceTransition : SwiftUICore.Transition {
  public struct Configuration : Swift.Equatable {
    public static let downUp: SwiftUICore.BlurReplaceTransition.Configuration
    public static let upUp: SwiftUICore.BlurReplaceTransition.Configuration
    public static func == (a: SwiftUICore.BlurReplaceTransition.Configuration, b: SwiftUICore.BlurReplaceTransition.Configuration) -> Swift.Bool
  }
  @_Concurrency.MainActor @preconcurrency public var configuration: SwiftUICore.BlurReplaceTransition.Configuration
  @_Concurrency.MainActor @preconcurrency public init(configuration: SwiftUICore.BlurReplaceTransition.Configuration)
  @_Concurrency.MainActor @preconcurrency public func body(content: SwiftUICore.BlurReplaceTransition.Content, phase: SwiftUICore.TransitionPhase) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func _makeContentTransition(transition: inout SwiftUICore._Transition_ContentTransition)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI21BlurReplaceTransitionV4body7content5phaseQrAA22PlaceholderContentViewVyACG_AA0E5PhaseOtF", 0) __
}
@available(*, unavailable)
extension SwiftUICore.BlurReplaceTransition : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.BlurReplaceTransition.Configuration : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct Text : Swift.Equatable, Swift.Sendable {
  @usableFromInline
  @frozen package enum Storage : Swift.Equatable {
    case verbatim(Swift.String)
    case anyTextStorage(SwiftUICore.AnyTextStorage)
    @usableFromInline
    package static func == (lhs: SwiftUICore.Text.Storage, rhs: SwiftUICore.Text.Storage) -> Swift.Bool
  }
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @usableFromInline
  @frozen package enum Modifier : Swift.Equatable {
    case color(SwiftUICore.Color?)
    case font(SwiftUICore.Font?)
    case italic
    case weight(SwiftUICore.Font.Weight?)
    case kerning(CoreFoundation.CGFloat)
    case tracking(CoreFoundation.CGFloat)
    case baseline(CoreFoundation.CGFloat)
    case rounded
    case anyTextModifier(SwiftUICore.AnyTextModifier)
    @usableFromInline
    package static func == (lhs: SwiftUICore.Text.Modifier, rhs: SwiftUICore.Text.Modifier) -> Swift.Bool
  }
  @usableFromInline
  package var storage: SwiftUICore.Text.Storage
  @usableFromInline
  package var modifiers: [SwiftUICore.Text.Modifier] = [Modifier]()
  @inlinable public init(verbatim content: Swift.String) {
        storage = .verbatim(content)
    }
  @_disfavoredOverload public init<S>(_ content: S) where S : Swift.StringProtocol
  public static func == (a: SwiftUICore.Text, b: SwiftUICore.Text) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text.Storage : @unchecked Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text.Modifier : @unchecked Swift.Sendable {
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package class AnyTextStorage {
  @objc @usableFromInline
  deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnyTextStorage : @unchecked Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnyTextStorage : Swift.CustomDebugStringConvertible {
  @usableFromInline
  package var debugDescription: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package class AnyTextModifier {
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUICore.AnyTextModifier : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public func _resolveText(in environment: SwiftUICore.EnvironmentValues) -> Swift.String
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum _LocalizationInfo : Swift.Equatable {
  case none
  case verbatim(Swift.String)
  case localized(key: Swift.String, tableName: Swift.String? = nil, bundle: Foundation.Bundle? = nil, hasFormatting: Swift.Bool = false)
  public static func == (a: SwiftUICore._LocalizationInfo, b: SwiftUICore._LocalizationInfo) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore._LocalizationInfo : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  public var _localizationInfo: SwiftUICore._LocalizationInfo {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct SafeAreaRegions : Swift.OptionSet {
  public let rawValue: Swift.UInt
  @inlinable public init(rawValue: Swift.UInt) { self.rawValue = rawValue }
  public static let container: SwiftUICore.SafeAreaRegions
  public static let keyboard: SwiftUICore.SafeAreaRegions
  public static let all: SwiftUICore.SafeAreaRegions
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias ArrayLiteralElement = SwiftUICore.SafeAreaRegions
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Element = SwiftUICore.SafeAreaRegions
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias RawValue = Swift.UInt
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @_Concurrency.MainActor @preconcurrency public func _safeAreaInsets(_ insets: SwiftUICore.EdgeInsets) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
@frozen package struct IDView<Content, ID> : SwiftUICore.View where Content : SwiftUICore.View, ID : Swift.Hashable {
  @usableFromInline
  internal var content: Content
  @usableFromInline
  internal var id: ID
  @inlinable package init(_ content: Content, id: ID) {
        self.content = content
        self.id = id
    }
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency package var body: Swift.Never {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  package typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.IDView : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func id<ID>(_ id: ID) -> some SwiftUICore.View where ID : Swift.Hashable {
        return IDView(self, id: id)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.IDView {
  @usableFromInline
  package static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.IDView<Content, ID>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.IDView {
  @usableFromInline
  package static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUICore.IDView<Content, ID>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @usableFromInline
  package static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum ColorScheme : Swift.CaseIterable, Swift.Sendable {
  case light
  case dark
  public static func == (a: SwiftUICore.ColorScheme, b: SwiftUICore.ColorScheme) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AllCases = [SwiftUICore.ColorScheme]
  nonisolated public static var allCases: [SwiftUICore.ColorScheme] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum ColorSchemeContrast : Swift.CaseIterable, Swift.Sendable {
  case standard
  case increased
  public static func == (a: SwiftUICore.ColorSchemeContrast, b: SwiftUICore.ColorSchemeContrast) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AllCases = [SwiftUICore.ColorSchemeContrast]
  nonisolated public static var allCases: [SwiftUICore.ColorSchemeContrast] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "preferredColorScheme(_:)")
@available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "preferredColorScheme(_:)")
@available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "preferredColorScheme(_:)")
@available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "preferredColorScheme(_:)")
@available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "preferredColorScheme(_:)")
extension SwiftUICore.View {
  @inlinable nonisolated public func colorScheme(_ colorScheme: SwiftUICore.ColorScheme) -> some SwiftUICore.View {
        return environment(\.colorScheme, colorScheme)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var colorScheme: SwiftUICore.ColorScheme {
    get
    set
  }
  public var colorSchemeContrast: SwiftUICore.ColorSchemeContrast {
    get
  }
  public var _colorSchemeContrast: SwiftUICore.ColorSchemeContrast {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol _Test {
  func setUpTest()
  func tearDownTest()
  @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
  func tearDownTestWithError() throws
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._Test {
  public func setUpTest()
  public func tearDownTest()
  @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
  public func tearDownTestWithError() throws
}
@available(iOS 13.0, macOS 11.0, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct PreferredColorSchemeKey : SwiftUICore.PreferenceKey {
  public typealias Value = SwiftUICore.ColorScheme?
  public static func reduce(value: inout SwiftUICore.PreferredColorSchemeKey.Value, nextValue: () -> SwiftUICore.PreferredColorSchemeKey.Value)
}
@available(*, unavailable)
extension SwiftUICore.PreferredColorSchemeKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 11.0, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func preferredColorScheme(_ colorScheme: SwiftUICore.ColorScheme?) -> some SwiftUICore.View {
        return preference(key: PreferredColorSchemeKey.self,
            value: colorScheme)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct Image : Swift.Equatable, Swift.Sendable {
  package var provider: SwiftUICore.AnyImageProviderBox
  public static func == (lhs: SwiftUICore.Image, rhs: SwiftUICore.Image) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image : SwiftUICore.View {
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.Image>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package class AnyImageProviderBox : @unchecked Swift.Sendable {
  @objc @usableFromInline
  deinit
}
extension CoreFoundation.CGRect {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package var x: CoreFoundation.CGFloat {
    get { return origin.x }
    set { origin.x = newValue }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package var y: CoreFoundation.CGFloat {
    get { return origin.y }
    set { origin.y = newValue }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package var center: CoreFoundation.CGPoint {
    get { return CGPoint(x: x + width / 2, y: y + height / 2) }
    set { x = newValue.x - width / 2; y = newValue.y - height / 2 }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package init(size: CoreFoundation.CGSize) {
        self.init(x: 0, y: 0, width: size.width, height: size.height)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package init(center: CoreFoundation.CGPoint, size: CoreFoundation.CGSize) {
        self.init(x: center.x - size.width * 0.5,
                  y: center.y - size.height * 0.5,
                  width: size.width, height: size.height)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package var isFinite: Swift.Bool {
    get {
        return x.isFinite && y.isFinite && width.isFinite && height.isFinite
    }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func flushNullToZero() -> CoreFoundation.CGRect {
        return isNull ? .zero : self
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func offset(by offset: CoreFoundation.CGSize) -> CoreFoundation.CGRect {
        return offsetBy(dx: offset.width, dy: offset.height)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func scaledBy(x: CoreFoundation.CGFloat = 1, y: CoreFoundation.CGFloat = 1) -> CoreFoundation.CGRect {
        if isNull || isInfinite {
            return self
        }
        return CGRect(x: self.x * x, y: self.y * y, width: width * x, height: height * y)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func scaled(by scale: CoreFoundation.CGFloat) -> CoreFoundation.CGRect {
        return self.scaledBy(x: scale, y: scale)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package func hasIntersection(_ rect: CoreFoundation.CGRect) -> Swift.Bool {
        return !intersection(rect).isEmpty
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package var maxXY: CoreFoundation.CGPoint {
    get { return CGPoint(x: maxX, y: maxY) }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package var minXY: CoreFoundation.CGPoint {
    get { return CGPoint(x: minX, y: minY) }
  }
}
extension CoreFoundation.CGRect {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package init(position: CoreFoundation.CGPoint, size: CoreFoundation.CGSize, anchor: SwiftUICore.UnitPoint) {
        self.init(x: position.x - size.width * anchor.x,
            y: position.y - size.height * anchor.y,
            width: size.width, height: size.height)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package subscript(axis: SwiftUICore.Axis) -> Swift.ClosedRange<CoreFoundation.CGFloat> {
    get {
        guard !isNull else { return 0 ... 0 }
        let x0 = origin[axis], x1 = x0 + size[axis]
         
        var lower = min(x0, x1), upper = max(x0, x1)
         
         
        if !(lower <= upper) {
            (lower, upper) = (0, 0)
        }
        return ClosedRange(uncheckedBounds: (lower: lower, upper: upper))
    }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package subscript(edge: SwiftUICore.Edge) -> CoreFoundation.CGFloat {
    get {
        switch edge {
        case .leading: return minX
        case .trailing: return maxX
        case .top: return minY
        case .bottom: return maxY
        }
    }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @inlinable package mutating func finalizeLayoutDirection(_ layoutDirection: SwiftUICore.LayoutDirection, parentSize: CoreFoundation.CGSize) {
        guard layoutDirection == .rightToLeft else { return }
        origin.x = parentSize.width - maxX
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension CoreFoundation.CGRect : SwiftUICore.Animatable {
  public typealias AnimatableData = SwiftUICore.AnimatablePair<CoreFoundation.CGPoint.AnimatableData, CoreFoundation.CGSize.AnimatableData>
  public var animatableData: CoreFoundation.CGRect.AnimatableData {
    @inlinable get {
            return .init(origin.animatableData, size.animatableData)
        }
    @inlinable set {
            (origin.animatableData, size.animatableData)
                = (newValue.first, newValue.second)
        }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  nonisolated public func gesture<T>(_ gesture: T, including mask: SwiftUICore.GestureMask = .all) -> some SwiftUICore.View where T : SwiftUICore.Gesture
  
  nonisolated public func highPriorityGesture<T>(_ gesture: T, including mask: SwiftUICore.GestureMask = .all) -> some SwiftUICore.View where T : SwiftUICore.Gesture
  
  nonisolated public func simultaneousGesture<T>(_ gesture: T, including mask: SwiftUICore.GestureMask = .all) -> some SwiftUICore.View where T : SwiftUICore.Gesture
  
  @_alwaysEmitIntoClient nonisolated public func gesture<T>(_ gesture: T, isEnabled: Swift.Bool) -> some SwiftUICore.View where T : SwiftUICore.Gesture {
        self.gesture(gesture, including: isEnabled ? .all : .subviews)
    }
  
  @_alwaysEmitIntoClient nonisolated public func highPriorityGesture<T>(_ gesture: T, isEnabled: Swift.Bool) -> some SwiftUICore.View where T : SwiftUICore.Gesture {
        highPriorityGesture(gesture, including: isEnabled ? .all : .subviews)
    }
  
  @_alwaysEmitIntoClient nonisolated public func simultaneousGesture<T>(_ gesture: T, isEnabled: Swift.Bool) -> some SwiftUICore.View where T : SwiftUICore.Gesture {
        simultaneousGesture(gesture, including: isEnabled ? .all : .subviews)
    }
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  nonisolated public func gesture<T>(_ gesture: T, name: Swift.String, isEnabled: Swift.Bool = true) -> some SwiftUICore.View where T : SwiftUICore.Gesture
  
  nonisolated public func highPriorityGesture<T>(_ gesture: T, name: Swift.String, isEnabled: Swift.Bool = true) -> some SwiftUICore.View where T : SwiftUICore.Gesture
  
  nonisolated public func simultaneousGesture<T>(_ gesture: T, name: Swift.String, isEnabled: Swift.Bool = true) -> some SwiftUICore.View where T : SwiftUICore.Gesture
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct GestureMask : Swift.OptionSet {
  public let rawValue: Swift.UInt32
  public init(rawValue: Swift.UInt32)
  public static let none: SwiftUICore.GestureMask
  public static let gesture: SwiftUICore.GestureMask
  public static let subviews: SwiftUICore.GestureMask
  public static let all: SwiftUICore.GestureMask
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ArrayLiteralElement = SwiftUICore.GestureMask
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Element = SwiftUICore.GestureMask
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias RawValue = Swift.UInt32
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _ScaleEffect : SwiftUICore.GeometryEffect, Swift.Equatable {
  public var scale: CoreFoundation.CGSize
  public var anchor: SwiftUICore.UnitPoint
  @inlinable nonisolated public init(scale: CoreFoundation.CGSize, anchor: SwiftUICore.UnitPoint = .center) {
        self.scale = scale
        self.anchor = anchor
    }
  public func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.ProjectionTransform
  public typealias AnimatableData = SwiftUICore.AnimatablePair<CoreFoundation.CGSize.AnimatableData, SwiftUICore.UnitPoint.AnimatableData>
  public var animatableData: SwiftUICore._ScaleEffect.AnimatableData {
    get
    set
  }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._ScaleEffect>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  public static func == (a: SwiftUICore._ScaleEffect, b: SwiftUICore._ScaleEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func scaleEffect(_ scale: CoreFoundation.CGSize, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.View {
        return modifier(_ScaleEffect(scale: scale, anchor: anchor))
    }
  
  @inlinable nonisolated public func scaleEffect(_ s: CoreFoundation.CGFloat, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.View {
        return scaleEffect(CGSize(width: s, height: s), anchor: anchor)
    }
  
  @inlinable nonisolated public func scaleEffect(x: CoreFoundation.CGFloat = 1.0, y: CoreFoundation.CGFloat = 1.0, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.View {
        return scaleEffect(CGSize(width: x, height: y), anchor: anchor)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnyTransition {
  public static var scale: SwiftUICore.AnyTransition {
    get
  }
  public static func scale(scale: CoreFoundation.CGFloat, anchor: SwiftUICore.UnitPoint = .center) -> SwiftUICore.AnyTransition
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Transition where Self == SwiftUICore.ScaleTransition {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var scale: SwiftUICore.ScaleTransition {
    get { Self(1e-5) }
  }
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static func scale(_ scale: Swift.Double, anchor: SwiftUICore.UnitPoint = .center) -> Self {
        Self(scale, anchor: anchor)
    }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_Concurrency.MainActor @preconcurrency public struct ScaleTransition : SwiftUICore.Transition {
  @_Concurrency.MainActor @preconcurrency public var scale: Swift.Double
  @_Concurrency.MainActor @preconcurrency public var anchor: SwiftUICore.UnitPoint
  @_Concurrency.MainActor @preconcurrency public init(_ scale: Swift.Double, anchor: SwiftUICore.UnitPoint = .center)
  @_Concurrency.MainActor @preconcurrency public func body(content: SwiftUICore.ScaleTransition.Content, phase: SwiftUICore.TransitionPhase) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func _makeContentTransition(transition: inout SwiftUICore._Transition_ContentTransition)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15ScaleTransitionV4body7content5phaseQrAA22PlaceholderContentViewVyACG_AA0D5PhaseOtF", 0) __
}
@available(*, unavailable)
extension SwiftUICore.ScaleTransition : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func safeAreaInset<V>(edge: SwiftUICore.VerticalEdge, alignment: SwiftUICore.HorizontalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder content: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View {
        modifier(_InsetViewModifier(
            content: content(), edge: Edge(vertical: edge),
            regions: .container, spacing: spacing,
            alignmentKey: alignment.key))
    }
  
  @inlinable nonisolated public func safeAreaInset<V>(edge: SwiftUICore.HorizontalEdge, alignment: SwiftUICore.VerticalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder content: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View {
        modifier(_InsetViewModifier(
            content: content(), edge: Edge(horizontal: edge),
            regions: .container, spacing: spacing,
            alignmentKey: alignment.key))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _InsetViewModifier<Content> : SwiftUICore.ViewModifier where Content : SwiftUICore.View {
  @usableFromInline
  internal var content: Content
  @usableFromInline
  internal var properties: (regions: SwiftUICore.SafeAreaRegions, spacing: CoreFoundation.CGFloat?, edge: SwiftUICore.Edge, alignmentKey: SwiftUICore.AlignmentKey)
  @inlinable package init(content: Content, edge: SwiftUICore.Edge, regions: SwiftUICore.SafeAreaRegions, spacing: CoreFoundation.CGFloat?, alignmentKey: SwiftUICore.AlignmentKey) {
        self.content = content
        properties = (regions, spacing, edge, alignmentKey)
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._InsetViewModifier<Content>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._InsetViewModifier : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
@usableFromInline
internal struct SafeAreaPaddingModifier : SwiftUICore.ViewModifier {
  @usableFromInline
  internal init(edges: SwiftUICore.Edge.Set, insets: SwiftUICore.EdgeInsets?)
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal func body(content: SwiftUICore.SafeAreaPaddingModifier.Content) -> some SwiftUICore.View
  
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  @usableFromInline
  internal typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI23SafeAreaPaddingModifierV4body7contentQrAA05_ViewF8_ContentVyACG_tF", 0) __
}
@available(*, unavailable)
extension SwiftUICore.SafeAreaPaddingModifier : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_alwaysEmitIntoClient nonisolated public func safeAreaPadding(_ insets: SwiftUICore.EdgeInsets) -> some SwiftUICore.View {
        modifier(
            SafeAreaPaddingModifier(edges: .all, insets: insets)
        )
    }
  
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_alwaysEmitIntoClient nonisolated public func safeAreaPadding(_ edges: SwiftUICore.Edge.Set = .all, _ length: CoreFoundation.CGFloat? = nil) -> some SwiftUICore.View {
        modifier(
            SafeAreaPaddingModifier(
                edges: edges,
                insets: length.map { EdgeInsets(_all: $0) }
            )
        )
    }
  
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_alwaysEmitIntoClient nonisolated public func safeAreaPadding(_ length: CoreFoundation.CGFloat) -> some SwiftUICore.View {
        safeAreaPadding(.all, length)
    }
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.2)
extension SwiftUICore.Group {
  public init<Base, Result>(sections view: Base, @SwiftUICore.ViewBuilder transform: @escaping (SwiftUICore.SectionCollection) -> Result) where Content == SwiftUICore.GroupSectionsOfContent<Base, Result>, Base : SwiftUICore.View, Result : SwiftUICore.View
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.2)
public struct GroupSectionsOfContent<Sections, Content> : SwiftUICore.View where Sections : SwiftUICore.View, Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI22GroupSectionsOfContentV4bodyQrvp", 0) __<Sections, Content>
}
@available(*, unavailable)
extension SwiftUICore.GroupSectionsOfContent : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.2)
public struct SectionCollection : Swift.RandomAccessCollection {
  public subscript(index: Swift.Int) -> SwiftUICore.SectionConfiguration {
    get
  }
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Element = SwiftUICore.SectionConfiguration
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Index = Swift.Int
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Indices = Swift.Range<Swift.Int>
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Iterator = Swift.IndexingIterator<SwiftUICore.SectionCollection>
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias SubSequence = Swift.Slice<SwiftUICore.SectionCollection>
}
@available(*, unavailable)
extension SwiftUICore.SectionCollection : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.2)
public struct SectionConfiguration : Swift.Identifiable {
  public struct ID : Swift.Hashable {
    public static func == (a: SwiftUICore.SectionConfiguration.ID, b: SwiftUICore.SectionConfiguration.ID) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var id: SwiftUICore.SectionConfiguration.ID {
    get
  }
  public var containerValues: SwiftUICore.ContainerValues {
    get
  }
  public var header: SwiftUICore.SubviewsCollection {
    get
  }
  public var footer: SwiftUICore.SubviewsCollection {
    get
  }
  public var content: SwiftUICore.SubviewsCollection {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore.SectionConfiguration : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.SectionConfiguration.ID : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.CoordinateSpaceProtocol where Self == SwiftUICore.NamedCoordinateSpace {
  public static func scrollView(axis: SwiftUICore.Axis) -> Self
  public static var scrollView: SwiftUICore.NamedCoordinateSpace {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum RoundedCornerStyle : Swift.Sendable {
  case circular
  case continuous
  public static func == (a: SwiftUICore.RoundedCornerStyle, b: SwiftUICore.RoundedCornerStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package struct FixedRoundedRect : Swift.Equatable {
  @usableFromInline
  package static func == (a: SwiftUICore.FixedRoundedRect, b: SwiftUICore.FixedRoundedRect) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore.FixedRoundedRect : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct RectangleCornerRadii : Swift.Equatable, SwiftUICore.Animatable {
  @usableFromInline
  package var topLeft: CoreFoundation.CGFloat
  @usableFromInline
  package var topRight: CoreFoundation.CGFloat
  @usableFromInline
  package var bottomRight: CoreFoundation.CGFloat
  @usableFromInline
  package var bottomLeft: CoreFoundation.CGFloat
  @_alwaysEmitIntoClient public var topLeading: CoreFoundation.CGFloat {
    get { topLeft }
    set { topLeft = newValue }
  }
  @_alwaysEmitIntoClient public var bottomLeading: CoreFoundation.CGFloat {
    get { bottomLeft }
    set { bottomLeft = newValue }
  }
  @_alwaysEmitIntoClient public var bottomTrailing: CoreFoundation.CGFloat {
    get { bottomRight }
    set { bottomRight = newValue }
  }
  @_alwaysEmitIntoClient public var topTrailing: CoreFoundation.CGFloat {
    get { topRight }
    set { topRight = newValue }
  }
  @usableFromInline
  package init(topLeft: CoreFoundation.CGFloat, topRight: CoreFoundation.CGFloat, bottomRight: CoreFoundation.CGFloat, bottomLeft: CoreFoundation.CGFloat)
  @_alwaysEmitIntoClient public init(topLeading: CoreFoundation.CGFloat = 0, bottomLeading: CoreFoundation.CGFloat = 0, bottomTrailing: CoreFoundation.CGFloat = 0, topTrailing: CoreFoundation.CGFloat = 0) {
        self.init(
            topLeft: topLeading, topRight: topTrailing,
            bottomRight: bottomTrailing, bottomLeft: bottomLeading)
    }
  public typealias AnimatableData = SwiftUICore.AnimatablePair<SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>>
  public var animatableData: SwiftUICore.RectangleCornerRadii.AnimatableData {
    get
    set
  }
  public static func == (a: SwiftUICore.RectangleCornerRadii, b: SwiftUICore.RectangleCornerRadii) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct Animation : Swift.Equatable, Swift.Sendable {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public init<A>(_ base: A) where A : SwiftUICore.CustomAnimation
  internal var box: SwiftUICore.AnimationBoxBase
  public static func == (lhs: SwiftUICore.Animation, rhs: SwiftUICore.Animation) -> Swift.Bool
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Animation : Swift.Hashable {
  @_specialize(exported: false, kind: partial, where V == Swift.Double)
  @_specialize(exported: false, kind: partial, where V == SwiftUICore.AnimatablePair<SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>>)
  public func animate<V>(value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  public func velocity<V>(value: V, time: Foundation.TimeInterval, context: SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  public func shouldMerge<V>(previous: SwiftUICore.Animation, value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> Swift.Bool where V : SwiftUICore.VectorArithmetic
  public var base: any SwiftUICore.CustomAnimation {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Animation : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible, Swift.CustomReflectable {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var customMirror: Swift.Mirror {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
internal class AnimationBoxBase : @unchecked Swift.Sendable {
  @objc @usableFromInline
  deinit
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func tint<S>(_ tint: S?) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
        return environment(\.tint, tint.map(AnyShapeStyle.init))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable @_disfavoredOverload nonisolated public func tint(_ tint: SwiftUICore.Color?) -> some SwiftUICore.View {
        environment(\.tintColor, tint)
    }
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  @usableFromInline
  package var tint: SwiftUICore.AnyShapeStyle? {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  @usableFromInline
  package var tintColor: SwiftUICore.Color? {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.TintShapeStyle {
  @_alwaysEmitIntoClient public static var tint: SwiftUICore.TintShapeStyle {
    get { .init() }
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct TintShapeStyle : SwiftUICore.ShapeStyle {
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  public init()
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Transaction {
  public var tracksVelocity: Swift.Bool {
    get
    set
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension Foundation.FormatStyle where Self == SwiftUICore.SystemFormatStyle.Timer {
  public static func timer(countingDownIn interval: Swift.Range<Foundation.Date>, showsHours: Swift.Bool = true, maxFieldCount: Swift.Int = 3, maxPrecision: Swift.Duration = .seconds(1)) -> SwiftUICore.SystemFormatStyle.Timer
  public static func timer(countingUpIn interval: Swift.Range<Foundation.Date>, showsHours: Swift.Bool = true, maxFieldCount: Swift.Int = 3, maxPrecision: Swift.Duration = .seconds(1)) -> SwiftUICore.SystemFormatStyle.Timer
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.SystemFormatStyle {
  public struct Timer : Swift.Sendable {
    public typealias FormatInput = Foundation.Date
    public init(countingDownIn interval: Swift.Range<Foundation.Date>, showsHours: Swift.Bool = true, maxFieldCount: Swift.Int = 3, maxPrecision: Swift.Duration = .seconds(1))
    public init(countingUpIn interval: Swift.Range<Foundation.Date>, showsHours: Swift.Bool = true, maxFieldCount: Swift.Int = 3, maxPrecision: Swift.Duration = .seconds(1))
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.SystemFormatStyle.Timer : Foundation.FormatStyle {
  public func format(_ input: Foundation.Date) -> Foundation.AttributedString
  public func locale(_ locale: Foundation.Locale) -> SwiftUICore.SystemFormatStyle.Timer
  public static func == (a: SwiftUICore.SystemFormatStyle.Timer, b: SwiftUICore.SystemFormatStyle.Timer) -> Swift.Bool
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias FormatOutput = Foundation.AttributedString
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.SystemFormatStyle.Timer : Foundation.DiscreteFormatStyle {
  public func discreteInput(before input: Foundation.Date) -> Foundation.Date?
  public func discreteInput(after input: Foundation.Date) -> Foundation.Date?
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension Foundation.FormatStyle where Self == SwiftUICore.SystemFormatStyle.Stopwatch {
  public static func stopwatch(startingAt startDate: Foundation.Date, showsHours: Swift.Bool = true, maxFieldCount: Swift.Int = 4, maxPrecision: Swift.Duration = .milliseconds(10)) -> SwiftUICore.SystemFormatStyle.Stopwatch
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.SystemFormatStyle {
  public struct Stopwatch : Swift.Sendable {
    public typealias FormatInput = Foundation.Date
    public init(startingAt startDate: Foundation.Date, showsHours: Swift.Bool = true, maxFieldCount: Swift.Int = 4, maxPrecision: Swift.Duration = .milliseconds(10))
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.SystemFormatStyle.Stopwatch : Foundation.FormatStyle {
  public func format(_ input: Foundation.Date) -> Foundation.AttributedString
  public func locale(_ locale: Foundation.Locale) -> SwiftUICore.SystemFormatStyle.Stopwatch
  public static func == (a: SwiftUICore.SystemFormatStyle.Stopwatch, b: SwiftUICore.SystemFormatStyle.Stopwatch) -> Swift.Bool
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias FormatOutput = Foundation.AttributedString
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.SystemFormatStyle.Stopwatch : Foundation.DiscreteFormatStyle {
  public func discreteInput(before input: Foundation.Date) -> Foundation.Date?
  public func discreteInput(after input: Foundation.Date) -> Foundation.Date?
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.SystemFormatStyle.Stopwatch {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.2)
public struct Subview : SwiftUICore.View, Swift.Identifiable {
  public struct ID : Swift.Hashable {
    public static func == (a: SwiftUICore.Subview.ID, b: SwiftUICore.Subview.ID) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var id: SwiftUICore.Subview.ID {
    get
  }
  public var containerValues: SwiftUICore.ContainerValues {
    get
  }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.Subview>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUICore.Subview>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.Subview : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.Subview.ID : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _HueRotationEffect : Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var angle: SwiftUICore.Angle
  @inlinable nonisolated public init(angle: SwiftUICore.Angle) {
        self.angle = angle
    }
  @_Concurrency.MainActor @preconcurrency public var animatableData: SwiftUICore.Angle.AnimatableData {
    get
    set
  }
  nonisolated public static func == (a: SwiftUICore._HueRotationEffect, b: SwiftUICore._HueRotationEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.Angle.AnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func hueRotation(_ angle: SwiftUICore.Angle) -> some SwiftUICore.View {
        return modifier(_HueRotationEffect(angle: angle))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable @_disfavoredOverload nonisolated public func transition(_ t: SwiftUICore.AnyTransition) -> some SwiftUICore.View {
        return _trait(TransitionTraitKey.self, t)
    }
  
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_alwaysEmitIntoClient nonisolated public func transition<T>(_ transition: T) -> some SwiftUICore.View where T : SwiftUICore.Transition {
        self.transition(AnyTransition(transition))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
internal struct TransitionTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUICore.AnyTransition {
    get { .opacity }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  internal typealias Value = SwiftUICore.AnyTransition
}
@available(*, unavailable)
extension SwiftUICore.TransitionTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
internal struct CanTransitionTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore.CanTransitionTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EventModifiers : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EventModifiers : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image.ResizingMode : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image.ResizingMode : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ZStackLayout : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ZStackLayout : Swift.BitwiseCopyable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ZStackLayout : Swift.Sendable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ZStackLayout : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Alignment : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Alignment : Swift.BitwiseCopyable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ScrollPhase : Swift.Hashable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ScrollPhase : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ScrollPhase : Swift.BitwiseCopyable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.HorizontalDirection : Swift.Equatable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.HorizontalDirection : Swift.Hashable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.HorizontalDirection : Swift.RawRepresentable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.HorizontalDirection : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.HorizontalDirection : Swift.BitwiseCopyable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.HorizontalDirection.Set : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.HorizontalDirection.Set : Swift.BitwiseCopyable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.VerticalDirection : Swift.Equatable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.VerticalDirection : Swift.Hashable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.VerticalDirection : Swift.RawRepresentable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.VerticalDirection : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.VerticalDirection : Swift.BitwiseCopyable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.VerticalDirection.Set : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.VerticalDirection.Set : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._OffsetEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._OffsetEffect : Swift.BitwiseCopyable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 14.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 14.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 7.0)
extension SwiftUICore._ColorMonochromeEffect._Resolved : SwiftUICore.Animatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 14.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 14.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 7.0)
extension SwiftUICore._ColorMonochromeEffect._Resolved : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VStackLayout : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VStackLayout : Swift.BitwiseCopyable {}
extension SwiftUICore._VStackLayout : SwiftUICore._VariadicView_UnaryViewRoot {}
extension SwiftUICore._VStackLayout : SwiftUICore._VariadicView_ViewRoot {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.VStackLayout : Swift.Sendable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.VStackLayout : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Edge : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Edge : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Edge : Swift.RawRepresentable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Edge : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Edge : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Edge.Set : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Edge.Set : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.HorizontalEdge : Swift.Equatable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.HorizontalEdge : Swift.Hashable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.HorizontalEdge : Swift.RawRepresentable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.HorizontalEdge : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.HorizontalEdge : Swift.BitwiseCopyable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.HorizontalEdge.Set : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.HorizontalEdge.Set : Swift.BitwiseCopyable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.VerticalEdge : Swift.Equatable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.VerticalEdge : Swift.Hashable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.VerticalEdge : Swift.RawRepresentable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.VerticalEdge : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.VerticalEdge : Swift.BitwiseCopyable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.VerticalEdge.Set : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.VerticalEdge.Set : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._FixedSizeLayout : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._FixedSizeLayout : Swift.BitwiseCopyable {}
extension SwiftUICore._FixedSizeLayout : SwiftUICore.Animatable {}
extension SwiftUICore._FixedSizeLayout : SwiftUICore.ViewModifier {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color.Resolved : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._RotationEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._RotationEffect : Swift.BitwiseCopyable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(*, deprecated, message: "will be removed")
extension SwiftUICore._ForegroundColorModifier : SwiftUICore.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Namespace : Swift.BitwiseCopyable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Namespace.ID : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Namespace.ID : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EdgeInsets : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EdgeInsets : Swift.BitwiseCopyable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.TimelineScheduleMode : Swift.Equatable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.TimelineScheduleMode : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Gradient.Stop : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Axis : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Axis : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Axis : Swift.RawRepresentable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Axis : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Axis : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Axis.Set : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Axis.Set : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._PaddingLayout : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._PaddingLayout : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._PaddingLayout : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._PaddingLayout : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BlendModeEffect : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BlendModeEffect : SwiftUICore.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ColorMatrixEffect : SwiftUICore.Animatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ColorMatrixEffect : SwiftUICore.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ColorMatrixEffect : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ColorMatrixEffect : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ContrastEffect : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ContrastEffect : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ContrastEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ContrastEffect : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image.Orientation : Swift.RawRepresentable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image.Orientation : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image.Orientation : Swift.BitwiseCopyable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.MatchedGeometryProperties : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.MatchedGeometryProperties : Swift.BitwiseCopyable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._MatchedGeometryEffect : SwiftUICore.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.OpenURLAction : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Spacer : SwiftUICore.View {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Spacer : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Spacer : Swift.BitwiseCopyable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._TextBaselineRelativeSpacer : SwiftUICore.View {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._TextBaselineRelativeSpacer : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._TextBaselineRelativeSpacer : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._HSpacer : SwiftUICore.View {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._HSpacer : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._HSpacer : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VSpacer : SwiftUICore.View {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VSpacer : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VSpacer : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color.RGBColorSpace : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color.RGBColorSpace : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BlurEffect : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BlurEffect : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BlurEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BlurEffect : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ProjectionTransform : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ProjectionTransform : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ColorInvertEffect : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ColorInvertEffect : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ColorInvertEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ColorInvertEffect : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._TraitWritingModifier : SwiftUICore.ViewModifier {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ConditionalTraitWritingModifier : SwiftUICore.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ForegroundLayerViewModifier : SwiftUICore.Animatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ForegroundLayerViewModifier : SwiftUICore.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ForegroundLayerViewModifier : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ForegroundLayerViewModifier : Swift.BitwiseCopyable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ForegroundLayerColorMatrixEffect : SwiftUICore.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ForegroundLayerColorMatrixEffect : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ForegroundLayerColorMatrixEffect : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._GrayscaleEffect : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._GrayscaleEffect : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._GrayscaleEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._GrayscaleEffect : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._Rotation3DEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._Rotation3DEffect : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._OpacityEffect : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._OpacityEffect : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._OpacityEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._OpacityEffect : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ShadowEffect._Resolved : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ShadowEffect._Resolved : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ColorRenderingMode : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ColorRenderingMode : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BrightnessEffect : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BrightnessEffect : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BrightnessEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BrightnessEffect : Swift.BitwiseCopyable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._GeometryGroupEffect : SwiftUICore.Animatable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._GeometryGroupEffect : SwiftUICore.ViewModifier {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._GeometryGroupEffect : Swift.Sendable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._GeometryGroupEffect : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.UnitPoint : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.UnitPoint : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentObject : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentObject.Wrapper : Swift.Sendable {}
@available(iOS 18.4, macOS 15.4, tvOS 18.4, watchOS 11.4, visionOS 2.4, *)
extension SwiftUICore._AlphaThresholdEffect._Resolved : SwiftUICore.Animatable {}
@available(iOS 18.4, macOS 15.4, tvOS 18.4, watchOS 11.4, visionOS 2.4, *)
extension SwiftUICore._AlphaThresholdEffect._Resolved : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._HStackLayout : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._HStackLayout : Swift.BitwiseCopyable {}
extension SwiftUICore._HStackLayout : SwiftUICore._VariadicView_UnaryViewRoot {}
extension SwiftUICore._HStackLayout : SwiftUICore._VariadicView_ViewRoot {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.HStackLayout : Swift.Sendable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.HStackLayout : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._CompositingGroupEffect : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._CompositingGroupEffect : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._CompositingGroupEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._CompositingGroupEffect : Swift.BitwiseCopyable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AccessibilityHeadingLevel : Swift.Equatable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AccessibilityHeadingLevel : Swift.Hashable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AccessibilityHeadingLevel : Swift.RawRepresentable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AccessibilityHeadingLevel : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AccessibilityHeadingLevel : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._EndedGesture : SwiftUICore.Gesture {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ChangedGesture : SwiftUICore.Gesture {}
@available(iOS 15.0, macOS 10.15, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(tvOS, unavailable)
extension SwiftUICore.ControlSize : Swift.Equatable {}
@available(iOS 15.0, macOS 10.15, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(tvOS, unavailable)
extension SwiftUICore.ControlSize : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.FillStyle : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.FillStyle : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.BlendMode : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.BlendMode : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image.Interpolation : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image.Interpolation : Swift.Hashable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.HierarchicalShapeStyle : Swift.BitwiseCopyable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUICore.Shader : SwiftUICore.ShapeStyle {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@available(watchOS, unavailable)
extension SwiftUICore._ShaderFilterEffect : SwiftUICore.ViewModifier {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GraphicsContext.BlendMode : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GraphicsContext.BlendMode : Swift.BitwiseCopyable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GraphicsContext.ClipOptions : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GraphicsContext.ClipOptions : Swift.BitwiseCopyable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GraphicsContext.ShadowOptions : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GraphicsContext.ShadowOptions : Swift.BitwiseCopyable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GraphicsContext.BlurOptions : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GraphicsContext.BlurOptions : Swift.BitwiseCopyable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GraphicsContext.FilterOptions : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GraphicsContext.FilterOptions : Swift.BitwiseCopyable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GraphicsContext.GradientOptions : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GraphicsContext.GradientOptions : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ContentMode : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ContentMode : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._AspectRatioLayout : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._AspectRatioLayout : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._AspectRatioLayout : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._AspectRatioLayout : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.RoundedCornerStyle : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.RoundedCornerStyle : Swift.Hashable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes.FontAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes.FontAttribute : Swift.BitwiseCopyable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute : Swift.BitwiseCopyable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute : Swift.BitwiseCopyable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute : Swift.BitwiseCopyable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute : Swift.BitwiseCopyable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes.KerningAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes.KerningAttribute : Swift.BitwiseCopyable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes.TrackingAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes.TrackingAttribute : Swift.BitwiseCopyable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute : Swift.BitwiseCopyable {}
@available(macOS 15.0, iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute : Swift.Sendable {}
@available(macOS 15.0, iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ObservedObject : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ObservedObject.Wrapper : Swift.Sendable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._OverlayPreferenceModifier : SwiftUICore.ViewModifier {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BackgroundPreferenceModifier : SwiftUICore.ViewModifier {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ProposedViewSize : Swift.Sendable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ProposedViewSize : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text.TruncationMode : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text.TruncationMode : Swift.Hashable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text.Case : Swift.Equatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text.Case : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.StrokeStyle : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Font.Weight : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Font.Weight : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.UserInterfaceSizeClass : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.UserInterfaceSizeClass : Swift.Hashable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.BackgroundStyle : Swift.BitwiseCopyable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._EnvironmentBackgroundStyleModifier : SwiftUICore.ViewModifier {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ForegroundStyleModifier : SwiftUICore.ViewModifier {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ForegroundStyleModifier2 : SwiftUICore.ViewModifier {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ForegroundStyleModifier3 : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ForegroundStyle : Swift.BitwiseCopyable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ImplicitShapeStyle : Swift.BitwiseCopyable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeRole : Swift.Equatable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeRole : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._LuminanceToAlphaEffect : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._LuminanceToAlphaEffect : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._LuminanceToAlphaEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._LuminanceToAlphaEffect : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._MapGesture : SwiftUICore.Gesture {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Path.Element : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Path.Element : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Rectangle : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Ellipse : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Circle : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Rectangle._Inset : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Capsule._Inset : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Ellipse._Inset : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Circle._Inset : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VAlignment : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VAlignment : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VAlignment : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VAlignment : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._AlignmentLayout : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._AlignmentLayout : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._AlignmentLayout : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._AlignmentLayout : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.HorizontalAlignment : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.HorizontalAlignment : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.VerticalAlignment : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.VerticalAlignment : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AlignmentKey : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AlignmentKey : Swift.BitwiseCopyable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.TransitionPhase : Swift.Equatable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.TransitionPhase : Swift.Hashable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.TransitionPhase : Swift.Sendable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.TransitionPhase : Swift.BitwiseCopyable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ScrollClipEffect : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._EnabledScrollClipEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Font.TextStyle : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Font.TextStyle : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Font._StylisticAlternative : Swift.RawRepresentable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Font.Leading : Swift.Equatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Font.Leading : Swift.Hashable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.2)
extension SwiftUICore._ContainerValueWritingModifier : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._FrameLayout : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._FrameLayout : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._FrameLayout : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._FrameLayout : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._FlexFrameLayout : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._FlexFrameLayout : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._FlexFrameLayout : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._FlexFrameLayout : Swift.BitwiseCopyable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._TextRendererViewModifier : SwiftUICore.ViewModifier {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text.Layout.CharacterIndex : Swift.BitwiseCopyable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text.Layout.TypographicBounds : Swift.BitwiseCopyable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text.Layout.DrawingOptions : Swift.Sendable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text.Layout.DrawingOptions : Swift.BitwiseCopyable {}
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, deprecated, introduced: 6.0, renamed: "WatchDisplayVariant")
@available(visionOS, unavailable)
extension SwiftUICore._DeviceVariant : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EmptyView : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EmptyView : Swift.BitwiseCopyable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ContainerRelativeShape : Swift.BitwiseCopyable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ContainerRelativeShape._Inset : Swift.BitwiseCopyable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ContainerShapeModifier : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore._ImpossibleActor : _Concurrency.GlobalActor {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.StateObject : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.StateObject.Storage : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Prominence : Swift.Equatable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Prominence : Swift.Hashable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ColorMatrix : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ColorMatrix : Swift.BitwiseCopyable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ColorMatrix : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ViewDebug.Property : Swift.RawRepresentable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BackdropEffect : SwiftUICore.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BackdropEffectPlaceholder : SwiftUICore.View {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BackdropEffectPlaceholder : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BackdropEffectPlaceholder : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EmptyAnimatableData : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EmptyAnimatableData : Swift.BitwiseCopyable {}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.MeshGradient : SwiftUICore.View {}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.MeshGradient.BezierPoint : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EmptyModifier : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EmptyModifier : Swift.BitwiseCopyable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
extension SwiftUICore.Visibility : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.2)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.2)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.2)
extension SwiftUICore.Visibility : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._SaturationEffect : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._SaturationEffect : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._SaturationEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._SaturationEffect : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.TextAlignment : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.TextAlignment : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Angle : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Angle : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._SafeAreaIgnoringLayout : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._SafeAreaIgnoringLayout : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._SafeAreaIgnoringLayout : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._SafeAreaIgnoringLayout : Swift.BitwiseCopyable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._SafeAreaRegionsIgnoringLayout : SwiftUICore.Animatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._SafeAreaRegionsIgnoringLayout : SwiftUICore.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._SafeAreaRegionsIgnoringLayout : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._SafeAreaRegionsIgnoringLayout : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image.TemplateRenderingMode : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image.TemplateRenderingMode : Swift.Hashable {}
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@available(iOS, unavailable)
@available(macCatalyst, introduced: 13.0, deprecated: 100000.0, message: "Use `EnvironmentValues.appearsActive` instead.")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `EnvironmentValues.appearsActive` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.ControlActiveState : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ColorMultiplyEffect._Resolved : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ColorMultiplyEffect._Resolved : SwiftUICore.ViewModifier {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Canvas : SwiftUICore.View {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ClipEffect : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ClipEffect : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ClipEffect : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.SafeAreaRegions : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.SafeAreaRegions : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ColorScheme : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ColorScheme : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ColorSchemeContrast : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ColorSchemeContrast : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GestureMask : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GestureMask : Swift.BitwiseCopyable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ScaleEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ScaleEffect : Swift.BitwiseCopyable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.RectangleCornerRadii : Swift.BitwiseCopyable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.RectangleCornerRadii : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._HueRotationEffect : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._HueRotationEffect : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._HueRotationEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._HueRotationEffect : Swift.BitwiseCopyable {}
