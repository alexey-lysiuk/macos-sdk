// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target x86_64-apple-ios18.5-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 224.5.3 -module-name FinanceKit
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import CoreData
import CoreGraphics
@_exported import FinanceKit
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@available(iOS 17, *)
@available(tvOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension FinanceKit.FinanceStore {
  public enum ContainsOrderResult : Swift.CaseIterable, Swift.Hashable, Swift.Sendable {
    case exists
    case notFound
    case newerExists
    case olderExists
    public static func == (a: FinanceKit.FinanceStore.ContainsOrderResult, b: FinanceKit.FinanceStore.ContainsOrderResult) -> Swift.Bool
    @available(iOS 17, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(macOS, unavailable)
    public typealias AllCases = [FinanceKit.FinanceStore.ContainsOrderResult]
    nonisolated public static var allCases: [FinanceKit.FinanceStore.ContainsOrderResult] {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 17, *)
@available(tvOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension FinanceKit.FinanceStore {
  public func containsOrder(matching fqoid: FinanceKit.FullyQualifiedOrderIdentifier, updatedDate: Foundation.Date? = nil) async throws -> FinanceKit.FinanceStore.ContainsOrderResult
}
@available(iOS 17, *)
@available(tvOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension FinanceKit.FinanceStore {
  public enum SaveOrderResult : Swift.CaseIterable, Swift.Hashable, Swift.Sendable {
    case added
    case cancelled
    case newerExisting
    public static func == (a: FinanceKit.FinanceStore.SaveOrderResult, b: FinanceKit.FinanceStore.SaveOrderResult) -> Swift.Bool
    @available(iOS 17, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(macOS, unavailable)
    public typealias AllCases = [FinanceKit.FinanceStore.SaveOrderResult]
    nonisolated public static var allCases: [FinanceKit.FinanceStore.SaveOrderResult] {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 17, *)
@available(tvOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension FinanceKit.FinanceStore {
  public func saveOrder(signedArchive: Foundation.Data) async throws -> FinanceKit.FinanceStore.SaveOrderResult
}
@available(iOS 17, *)
@available(tvOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension FinanceKit.FinanceStore {
  public enum DataType : Swift.Equatable, Swift.Sendable {
    case orders
    public static func == (a: FinanceKit.FinanceStore.DataType, b: FinanceKit.FinanceStore.DataType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 17, *)
@available(tvOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension FinanceKit.FinanceStore {
  public static func isDataAvailable(_ type: FinanceKit.FinanceStore.DataType) -> Swift.Bool
}
@available(iOS 17, *)
@available(tvOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct FullyQualifiedOrderIdentifier : Swift.Codable, Swift.Hashable, Swift.Sendable {
  public var orderTypeIdentifier: Swift.String
  public var orderIdentifier: Swift.String
  public init(orderTypeIdentifier: Swift.String, orderIdentifier: Swift.String)
  public static func == (a: FinanceKit.FullyQualifiedOrderIdentifier, b: FinanceKit.FullyQualifiedOrderIdentifier) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 17, *)
@available(tvOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension FinanceKit.FullyQualifiedOrderIdentifier : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 17, *)
@available(tvOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public class FinanceStore : @unchecked Swift.Sendable {
  public static let shared: FinanceKit.FinanceStore
  @objc deinit
}
@available(iOS 17, *)
@available(tvOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public enum FinanceError : Foundation.CustomNSError, Foundation.LocalizedError, Swift.Equatable, Swift.Sendable {
  case dataRestricted(FinanceKit.FinanceStore.DataType)
  case unknown
  @available(iOS 18, *)
  @available(tvOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  case historyTokenInvalid
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
  public static var errorDomain: Swift.String {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
  public static func == (a: FinanceKit.FinanceError, b: FinanceKit.FinanceError) -> Swift.Bool
}
@available(iOS 17, *)
@available(tvOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension FinanceKit.FinanceStore.DataType : Swift.Hashable {}
