// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64e-apple-ios18.5-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 225.600.1 -module-name GroupActivities
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import AVFoundation
import CloudKit
import Combine
import CoreGraphics
import CoreImage
import CoreTransferable
import CryptoKit
import Darwin
import Foundation
@_exported import GroupActivities
import ImageIO
import Spatial
import Swift
import UniformTypeIdentifiers
@_exported import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@_hasMissingDesignatedInitializers @available(iOS 15, macOS 12, tvOS 15, *)
@available(watchOS, unavailable)
final public class GroupSession<ActivityType> : Combine.ObservableObject where ActivityType : GroupActivities.GroupActivity {
  public enum State : Swift.Sendable {
    case waiting
    case joined
    case invalidated(reason: any Swift.Error)
  }
  final public let id: Foundation.UUID
  @Combine.Published @_projectedValueProperty($state) final public var state: GroupActivities.GroupSession<ActivityType>.State {
    get
  }
  final public var $state: Combine.Published<GroupActivities.GroupSession<ActivityType>.State>.Publisher {
    get
  }
  @Combine.Published @_projectedValueProperty($activity) final public var activity: ActivityType {
    get
    @available(iOS 15, tvOS 15, macOS 12, *)
    @available(watchOS, unavailable, introduced: 6.0)
    set
  }
  final public var $activity: Combine.Published<ActivityType>.Publisher {
    get
    @available(iOS 15, tvOS 15, macOS 12, *)
    @available(watchOS, unavailable, introduced: 7.0)
    set
  }
  @Combine.Published @_projectedValueProperty($activeParticipants) final public var activeParticipants: Swift.Set<GroupActivities.Participant> {
    get
  }
  final public var $activeParticipants: Combine.Published<Swift.Set<GroupActivities.Participant>>.Publisher {
    get
  }
  final public var localParticipant: GroupActivities.Participant {
    get
  }
  @available(iOS 17, macOS 14, tvOS 17, visionOS 1, *)
  @available(watchOS, unavailable)
  final public var sceneSessionIdentifier: Swift.String? {
    get
  }
  @available(iOS 18.0, watchOS 11.0, visionOS 2.0, macCatalyst 18.0, macOS 15.0, *)
  final public let isLocallyInitiated: Swift.Bool
  @objc deinit
  final public func join()
  final public func leave()
  final public func end()
  final public func requestForegroundPresentation()
  @available(iOS 15, tvOS 15, macOS 12, *)
  @available(watchOS, unavailable)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
}
extension GroupActivities.GroupSession.State : Swift.Equatable {
  public static func == (lhs: GroupActivities.GroupSession<ActivityType>.State, rhs: GroupActivities.GroupSession<ActivityType>.State) -> Swift.Bool
}
extension GroupActivities.GroupSession : Swift.CustomStringConvertible {
  final public var description: Swift.String {
    get
  }
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct SpatialTemplatePreference : Swift.CustomStringConvertible, Swift.Sendable {
  public var description: Swift.String {
    get
  }
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension GroupActivities.SpatialTemplatePreference {
  public static let none: GroupActivities.SpatialTemplatePreference
  public static let sideBySide: GroupActivities.SpatialTemplatePreference
  public static let conversational: GroupActivities.SpatialTemplatePreference
  @available(visionOS 2.0, *)
  @available(iOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @available(macOS, unavailable)
  public static let surround: GroupActivities.SpatialTemplatePreference
  @available(visionOS 2.0, *)
  @available(iOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @available(macOS, unavailable)
  public static func custom(_ spatialTemplate: any GroupActivities.SpatialTemplate) -> GroupActivities.SpatialTemplatePreference
  public func contentExtent(_ contentExtent: CoreFoundation.CGFloat) -> GroupActivities.SpatialTemplatePreference
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
public protocol SpatialTemplateRole : Swift.Hashable, Swift.Sendable {
  var roleIdentifier: Swift.String { get }
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
extension GroupActivities.SpatialTemplateRole where Self : Swift.RawRepresentable, Self.RawValue == Swift.String {
  public var roleIdentifier: Swift.String {
    get
  }
}
@available(iOS 15, macOS 12, tvOS 15, *)
@available(watchOS, unavailable)
public enum GroupActivityActivationResult : Swift.Sendable {
  case activationPreferred
  case activationDisabled
  case cancelled
  public static func == (a: GroupActivities.GroupActivityActivationResult, b: GroupActivities.GroupActivityActivationResult) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15, macOS 12, tvOS 15, *)
@available(watchOS, unavailable)
public protocol GroupActivity : Swift.Decodable, Swift.Encodable {
  static var activityIdentifier: Swift.String { get }
  var metadata: GroupActivities.GroupActivityMetadata { get async }
  static func _identifiable(by activityIdentifier: Swift.String) -> Swift.Bool
}
extension GroupActivities.GroupActivity {
  public static var activityIdentifier: Swift.String {
    get
  }
  public static func _identifiable(by activityIdentifier: Swift.String) -> Swift.Bool
}
@available(iOS 15, macOS 12, tvOS 15, *)
@available(watchOS, unavailable)
extension GroupActivities.GroupActivity {
  public func prepareForActivation() async -> GroupActivities.GroupActivityActivationResult
  public func activate() async throws -> Swift.Bool
}
@available(iOS 17, macOS 14, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct GroupActivityTransferRepresentation<Item> : CoreTransferable.TransferRepresentation where Item : CoreTransferable.Transferable {
  public init<ActivityType>(exporting: @escaping @Sendable (Item) async throws -> ActivityType) where ActivityType : GroupActivities.GroupActivity
  public var body: some CoreTransferable.TransferRepresentation {
    get
  }
  @available(iOS 17, macOS 14, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s15GroupActivities0A30ActivityTransferRepresentationV4bodyQrvp", 0) __<Item>
}
@available(iOS 17, macOS 14, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension GroupActivities.GroupActivity where Self : CoreTransferable.Transferable {
  public static var transferRepresentation: some CoreTransferable.TransferRepresentation {
    get
  }
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
public protocol SpatialTemplate : Swift.Sendable {
  var configuration: GroupActivities.SpatialTemplateConfiguration { get }
  var elements: [any GroupActivities.SpatialTemplateElement] { get }
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
extension GroupActivities.SpatialTemplate {
  public var configuration: GroupActivities.SpatialTemplateConfiguration {
    get
  }
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
public struct SpatialTemplateConfiguration : Swift.Hashable, Swift.Sendable {
  public let defaultInitiatorRole: (any GroupActivities.SpatialTemplateRole)?
  public init(defaultInitiatorRole: (any GroupActivities.SpatialTemplateRole)? = nil)
  public static func == (lhs: GroupActivities.SpatialTemplateConfiguration, rhs: GroupActivities.SpatialTemplateConfiguration) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 15, macOS 12, tvOS 15, *)
@available(watchOS, unavailable)
final public class GroupStateObserver : Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($isEligibleForGroupSession) final public var isEligibleForGroupSession: Swift.Bool {
    get
  }
  final public var $isEligibleForGroupSession: Combine.Published<Swift.Bool>.Publisher {
    get
  }
  convenience public init()
  @available(iOS 15, tvOS 15, macOS 12, *)
  @available(watchOS, unavailable)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 17, macOS 14, tvOS 17, *)
@available(watchOS, unavailable)
final public class GroupSessionJournal : @unchecked Swift.Sendable {
  final public var attachments: GroupActivities.GroupSessionJournal.Attachments {
    get
    set
  }
  final public func add<ItemType>(_ item: ItemType) async throws -> GroupActivities.GroupSessionJournal.Attachment where ItemType : CoreTransferable.Transferable
  final public func add<ItemType, MetadataType>(_ item: ItemType, metadata: MetadataType) async throws -> GroupActivities.GroupSessionJournal.Attachment where ItemType : CoreTransferable.Transferable, MetadataType : Swift.Decodable, MetadataType : Swift.Encodable
  final public func remove(attachment: GroupActivities.GroupSessionJournal.Attachment) async throws
  convenience public init<Activity>(session: GroupActivities.GroupSession<Activity>) where Activity : GroupActivities.GroupActivity
  @objc deinit
}
@available(iOS 17, macOS 14, tvOS 17, *)
@available(watchOS, unavailable)
extension GroupActivities.GroupSessionJournal {
  public struct Attachment : Swift.Identifiable, Swift.Sendable {
    public var id: Foundation.UUID
    public func load<AttachmentType>(_ attachmentType: AttachmentType.Type) async throws -> AttachmentType where AttachmentType : CoreTransferable.Transferable
    public func loadMetadata<MetadataType>(of: MetadataType.Type) async throws -> MetadataType where MetadataType : Swift.Decodable, MetadataType : Swift.Encodable
    @available(iOS 17, tvOS 17, macOS 14, *)
    @available(watchOS, unavailable)
    public typealias ID = Foundation.UUID
  }
}
@available(iOS 17, macOS 14, tvOS 17, *)
@available(watchOS, unavailable)
extension GroupActivities.GroupSessionJournal {
  public struct Attachments : _Concurrency.AsyncSequence, @unchecked Swift.Sendable {
    public typealias Element = [GroupActivities.GroupSessionJournal.Attachment]
    public func makeAsyncIterator() -> GroupActivities.GroupSessionJournal.Attachments.Iterator
    public struct Iterator : _Concurrency.AsyncIteratorProtocol, Swift.Sendable {
      public mutating func next() async -> GroupActivities.GroupSessionJournal.Attachments.Element?
      @available(iOS 17, tvOS 17, macOS 14, *)
      @available(watchOS, unavailable)
      public typealias Element = GroupActivities.GroupSessionJournal.Attachments.Element
      @available(iOS 18.0, tvOS 18.0, visionOS 2.0, macOS 15.0, *)
      @available(watchOS, unavailable, introduced: 11.0)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = Swift.Never
    }
    @available(iOS 17, tvOS 17, macOS 14, *)
    @available(watchOS, unavailable)
    public typealias AsyncIterator = GroupActivities.GroupSessionJournal.Attachments.Iterator
    @available(iOS 18.0, tvOS 18.0, visionOS 2.0, macOS 15.0, *)
    @available(watchOS, unavailable, introduced: 11.0)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  }
}
@objc extension Foundation.NSItemProvider {
  @available(iOS 15.4, macCatalyst 15.4, macOS 13.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @nonobjc public func registerGroupActivity<ActivityType>(preparationHandler: @escaping () async throws -> ActivityType) where ActivityType : GroupActivities.GroupActivity
  @available(iOS 15.4, macCatalyst 15.4, macOS 13.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @nonobjc public func registerGroupActivity<ActivityType>(_ activity: ActivityType) where ActivityType : GroupActivities.GroupActivity
}
@available(iOS 15, macOS 12, tvOS 15, *)
@available(watchOS, unavailable)
public struct BroadcastOptions : Swift.OptionSet, Swift.Sendable {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let mirroredVideo: GroupActivities.BroadcastOptions
  @available(iOS 15, tvOS 15, macOS 12, *)
  @available(watchOS, unavailable)
  public typealias ArrayLiteralElement = GroupActivities.BroadcastOptions
  @available(iOS 15, tvOS 15, macOS 12, *)
  @available(watchOS, unavailable)
  public typealias Element = GroupActivities.BroadcastOptions
  @available(iOS 15, tvOS 15, macOS 12, *)
  @available(watchOS, unavailable)
  public typealias RawValue = Swift.Int
}
@_hasMissingDesignatedInitializers @available(iOS 15, macOS 12, tvOS 15, *)
@available(watchOS, unavailable)
final public class GroupSessionMessenger : @unchecked Swift.Sendable {
  @available(iOS 16, macOS 13, tvOS 16, *)
  @available(watchOS, unavailable)
  final public let deliveryMode: GroupActivities.GroupSessionMessenger.DeliveryMode
  public init<Activity>(session: GroupActivities.GroupSession<Activity>) where Activity : GroupActivities.GroupActivity
  @available(iOS 16, macOS 13, tvOS 16, *)
  @available(watchOS, unavailable)
  public init<Activity>(session: GroupActivities.GroupSession<Activity>, deliveryMode: GroupActivities.GroupSessionMessenger.DeliveryMode) where Activity : GroupActivities.GroupActivity
  @objc deinit
}
extension GroupActivities.GroupSessionMessenger {
  @available(iOS 16, macOS 13, tvOS 16, *)
  @available(watchOS, unavailable)
  public enum DeliveryMode : Swift.Sendable {
    case reliable
    case unreliable
    public static func == (a: GroupActivities.GroupSessionMessenger.DeliveryMode, b: GroupActivities.GroupSessionMessenger.DeliveryMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GroupActivities.GroupSessionMessenger {
  @available(iOS 15, macOS 12, tvOS 15, *)
  @available(watchOS, unavailable)
  public struct MessageContext : Swift.Sendable {
    public var source: GroupActivities.Participant
  }
}
extension GroupActivities.GroupSessionMessenger {
  final public func send<Message>(_ value: Message, to participants: GroupActivities.Participants = .all, completion: @escaping ((any Swift.Error)?) -> Swift.Void) where Message : Swift.Decodable, Message : Swift.Encodable
  final public func send(_ value: Foundation.Data, to participants: GroupActivities.Participants = .all, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
}
@available(iOS 15, macOS 12, tvOS 15, *)
@available(watchOS, unavailable)
public protocol CustomMessageIdentifiable {
  static var messageIdentifier: Swift.String { get }
}
@available(iOS 15, macOS 12, tvOS 15, *)
@available(watchOS, unavailable)
public struct Participant : Swift.Hashable, Swift.Identifiable, Swift.Sendable {
  public let id: Foundation.UUID
  public static func == (a: GroupActivities.Participant, b: GroupActivities.Participant) -> Swift.Bool
  @available(iOS 15, tvOS 15, macOS 12, *)
  @available(watchOS, unavailable)
  public typealias ID = Foundation.UUID
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GroupActivities.Participant : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
extension GroupActivities.SystemCoordinator {
  public struct ParticipantState : Swift.Equatable, Swift.Sendable {
    public let isSpatial: Swift.Bool
    @available(visionOS 2.0, *)
    public let seat: GroupActivities.SystemCoordinator.ParticipantState.Seat?
    @available(visionOS 2.0, *)
    public let role: (any GroupActivities.SpatialTemplateRole)?
    public static func == (lhs: GroupActivities.SystemCoordinator.ParticipantState, rhs: GroupActivities.SystemCoordinator.ParticipantState) -> Swift.Bool
  }
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
extension GroupActivities.SystemCoordinator.ParticipantState {
  public struct Seat : Swift.Hashable, Swift.Sendable {
    public let pose: Spatial.Pose3D
    public let role: (any GroupActivities.SpatialTemplateRole)?
    public static func == (lhs: GroupActivities.SystemCoordinator.ParticipantState.Seat, rhs: GroupActivities.SystemCoordinator.ParticipantState.Seat) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
extension GroupActivities.SystemCoordinator {
  public struct ParticipantStates : _Concurrency.AsyncSequence, @unchecked Swift.Sendable {
    public typealias Element = GroupActivities.SystemCoordinator.ParticipantState
    public func makeAsyncIterator() -> GroupActivities.SystemCoordinator.ParticipantStates.Iterator
    public struct Iterator : _Concurrency.AsyncIteratorProtocol, @unchecked Swift.Sendable {
      public mutating func next() async -> GroupActivities.SystemCoordinator.ParticipantStates.Element?
      @available(visionOS 1.0, *)
      @available(iOS, unavailable)
      @available(tvOS, unavailable)
      @available(watchOS, unavailable)
      @available(macOS, unavailable)
      public typealias Element = GroupActivities.SystemCoordinator.ParticipantStates.Element
      @available(visionOS 2.0, *)
      @available(iOS, unavailable, introduced: 18.0)
      @available(tvOS, unavailable, introduced: 18.0)
      @available(watchOS, unavailable, introduced: 11.0)
      @available(macOS, unavailable, introduced: 15.0)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = Swift.Never
    }
    @available(visionOS 1.0, *)
    @available(iOS, unavailable)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(macOS, unavailable)
    public typealias AsyncIterator = GroupActivities.SystemCoordinator.ParticipantStates.Iterator
    @available(visionOS 2.0, *)
    @available(iOS, unavailable, introduced: 18.0)
    @available(tvOS, unavailable, introduced: 18.0)
    @available(watchOS, unavailable, introduced: 11.0)
    @available(macOS, unavailable, introduced: 15.0)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  }
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
public protocol SpatialTemplateElement : Swift.Hashable, Swift.Sendable {
  var position: GroupActivities.SpatialTemplateElementPosition { get }
  var direction: GroupActivities.SpatialTemplateElementDirection { get }
  var role: (any GroupActivities.SpatialTemplateRole)? { get }
  var _output: GroupActivities._SpatialTemplateElementOutput { get }
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
public struct _SpatialTemplateElementOutput : Swift.Sendable {
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
public struct SpatialTemplateSeatElement : GroupActivities.SpatialTemplateElement {
  public let position: GroupActivities.SpatialTemplateElementPosition
  public let direction: GroupActivities.SpatialTemplateElementDirection
  public let role: (any GroupActivities.SpatialTemplateRole)?
  public var _output: GroupActivities._SpatialTemplateElementOutput {
    get
  }
  public init(position: GroupActivities.SpatialTemplateElementPosition, direction: GroupActivities.SpatialTemplateElementDirection = .lookingAt(.app), role: (any GroupActivities.SpatialTemplateRole)? = nil)
  public static func == (lhs: GroupActivities.SpatialTemplateSeatElement, rhs: GroupActivities.SpatialTemplateSeatElement) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
extension GroupActivities.SpatialTemplateElement where Self == GroupActivities.SpatialTemplateSeatElement {
  public static func seat(position: GroupActivities.SpatialTemplateElementPosition, direction: GroupActivities.SpatialTemplateElementDirection = .lookingAt(.app), role: (any GroupActivities.SpatialTemplateRole)? = nil) -> Self
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
public struct SpatialTemplateElementDirection : Swift.Hashable, Swift.Sendable {
  public static func lookingAt(_ position: GroupActivities.SpatialTemplateElementPosition) -> GroupActivities.SpatialTemplateElementDirection
  public static func lookingAt(_ element: any GroupActivities.SpatialTemplateElement) -> GroupActivities.SpatialTemplateElementDirection
  public static func alignedWith(appAxis: GroupActivities.SpatialTemplateElementAxis) -> GroupActivities.SpatialTemplateElementDirection
  public static func + (lhs: GroupActivities.SpatialTemplateElementDirection, rhs: Spatial.Angle2D) -> GroupActivities.SpatialTemplateElementDirection
  public func rotatedBy(_ rotationAngle: Spatial.Angle2D) -> GroupActivities.SpatialTemplateElementDirection
  public static func == (a: GroupActivities.SpatialTemplateElementDirection, b: GroupActivities.SpatialTemplateElementDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
public struct SpatialTemplateElementAxis : Swift.Hashable, Swift.Sendable {
  public static let x: GroupActivities.SpatialTemplateElementAxis
  public static let z: GroupActivities.SpatialTemplateElementAxis
  public static func == (a: GroupActivities.SpatialTemplateElementAxis, b: GroupActivities.SpatialTemplateElementAxis) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
public struct SpatialTemplateElementPosition : Swift.Hashable, Swift.Sendable {
  public static var app: GroupActivities.SpatialTemplateElementPosition {
    get
  }
  public func offsetBy(x: Swift.Double, z: Swift.Double) -> GroupActivities.SpatialTemplateElementPosition
  public static func == (a: GroupActivities.SpatialTemplateElementPosition, b: GroupActivities.SpatialTemplateElementPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15, macOS 12, tvOS 15, *)
@available(watchOS, unavailable)
public struct GroupSessionEvent {
  public let originator: GroupActivities.Participant
  public let action: GroupActivities.GroupSessionEvent.Action
  public let url: Foundation.URL?
  public init(originator: GroupActivities.Participant, action: GroupActivities.GroupSessionEvent.Action, url: Foundation.URL?)
}
@available(iOS 15, macOS 12, tvOS 15, *)
@available(watchOS, unavailable)
extension GroupActivities.GroupSessionEvent {
  public struct Action {
    public static let play: GroupActivities.GroupSessionEvent.Action
    public static let pause: GroupActivities.GroupSessionEvent.Action
    public static let seek: GroupActivities.GroupSessionEvent.Action
    public static func skip(item: Swift.String) -> GroupActivities.GroupSessionEvent.Action
  }
}
extension GroupActivities.GroupSessionEvent.Action {
  public struct QueueChange {
    public struct Item {
      public static func song(_ name: Swift.String) -> GroupActivities.GroupSessionEvent.Action.QueueChange.Item
      public static func container(_ name: Swift.String) -> GroupActivities.GroupSessionEvent.Action.QueueChange.Item
    }
    public static func setUpNext(_ item: GroupActivities.GroupSessionEvent.Action.QueueChange.Item) -> GroupActivities.GroupSessionEvent.Action.QueueChange
    public static func added(_ item: GroupActivities.GroupSessionEvent.Action.QueueChange.Item) -> GroupActivities.GroupSessionEvent.Action.QueueChange
  }
  public static let updatedQueue: GroupActivities.GroupSessionEvent.Action
  public static func updatedQueue(_ change: GroupActivities.GroupSessionEvent.Action.QueueChange) -> GroupActivities.GroupSessionEvent.Action
}
extension GroupActivities.GroupSession {
  @available(iOS 15, macOS 12, tvOS 15, *)
  @available(watchOS, unavailable)
  final public func showNotice(_ event: GroupActivities.GroupSessionEvent)
}
extension GroupActivities.GroupSession {
  @available(iOS 15, macOS 12, tvOS 15, *)
  @available(watchOS, unavailable)
  @available(*, deprecated, renamed: "GroupSessionEvent")
  public struct Event {
    public let originator: GroupActivities.Participant
  }
  @available(iOS 15, macOS 12, tvOS 15, *)
  @available(watchOS, unavailable)
  @available(*, deprecated, message: "Use GroupSessionEvent")
  final public func postEvent(_ event: GroupActivities.GroupSession<ActivityType>.Event)
}
@available(iOS, introduced: 15, deprecated: 15, message: "`GroupSession.Event` is renamed to `GroupSessionEvent`")
@available(macOS, introduced: 12, deprecated: 12, message: "`GroupSession.Event` is renamed to `GroupSessionEvent`")
@available(tvOS, introduced: 15, deprecated: 15, message: "`GroupSession.Event` is renamed to `GroupSessionEvent`")
@available(watchOS, unavailable)
extension GroupActivities.GroupSession.Event {
  @available(iOS, introduced: 15, deprecated: 15, message: "This has been deprecated in favor of the action property")
  @available(macOS, introduced: 12, deprecated: 12, message: "This has been deprecated in favor of the action property")
  @available(tvOS, introduced: 15, deprecated: 15, message: "This has been deprecated in favor of the action property")
  @available(watchOS, unavailable)
  public var localizedDescription: Swift.String {
    get
  }
  @available(*, deprecated, message: "Use the new initializer instead")
  public init(originator: GroupActivities.Participant, localizedDescription: Swift.String)
}
@available(iOS 15, macOS 12, tvOS 15, *)
@available(watchOS, unavailable)
public enum Participants {
  case all
  case only(Swift.Set<GroupActivities.Participant>)
}
extension GroupActivities.Participants {
  public static func only(_ participant: GroupActivities.Participant) -> GroupActivities.Participants
}
extension GroupActivities.GroupSessionMessenger {
  @available(iOS 15, macOS 12, tvOS 15, *)
  @available(watchOS, unavailable)
  public struct Messages<Message> : _Concurrency.AsyncSequence where Message : Swift.Decodable, Message : Swift.Encodable {
    public typealias Element = (Message, GroupActivities.GroupSessionMessenger.MessageContext)
    public func makeAsyncIterator() -> GroupActivities.GroupSessionMessenger.Messages<Message>.Iterator
    @available(iOS 15, macOS 12, tvOS 15, *)
    @available(watchOS, unavailable)
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      public mutating func next() async -> GroupActivities.GroupSessionMessenger.Messages<Message>.Element?
      @available(iOS 15, tvOS 15, macOS 12, *)
      @available(watchOS, unavailable)
      public typealias Element = GroupActivities.GroupSessionMessenger.Messages<Message>.Element
      @available(iOS 18.0, tvOS 18.0, visionOS 2.0, macOS 15.0, *)
      @available(watchOS, unavailable, introduced: 11.0)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = Swift.Never
    }
    @available(iOS 15, tvOS 15, macOS 12, *)
    @available(watchOS, unavailable)
    public typealias AsyncIterator = GroupActivities.GroupSessionMessenger.Messages<Message>.Iterator
    @available(iOS 18.0, tvOS 18.0, visionOS 2.0, macOS 15.0, *)
    @available(watchOS, unavailable, introduced: 11.0)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  }
}
extension GroupActivities.GroupSessionMessenger.Messages : Swift.Sendable where Message : Swift.Sendable {
}
extension GroupActivities.GroupSessionMessenger.Messages.Iterator : Swift.Sendable where Message : Swift.Sendable {
}
extension GroupActivities.GroupSessionMessenger {
  @_unsafeInheritExecutor final public func send<Message>(_ value: Message, to participants: GroupActivities.Participants = .all) async throws where Message : Swift.Decodable, Message : Swift.Encodable
  @_unsafeInheritExecutor final public func send(_ value: Foundation.Data, to participants: GroupActivities.Participants = .all) async throws
  final public func messages<Message>(of type: Message.Type) -> GroupActivities.GroupSessionMessenger.Messages<Message> where Message : Swift.Decodable, Message : Swift.Encodable
  final public func messages(of type: Foundation.Data.Type) -> GroupActivities.GroupSessionMessenger.Messages<Foundation.Data>
}
@available(iOS 15, macOS 12, tvOS 15, *)
@available(watchOS, unavailable)
extension GroupActivities.GroupActivity {
  public typealias Sessions = GroupActivities.GroupSession<Self>.Sessions
  public static func sessions() -> Self.Sessions
}
extension GroupActivities.GroupSession {
  @available(iOS 15, macOS 12, tvOS 15, *)
  @available(watchOS, unavailable)
  public struct Sessions : _Concurrency.AsyncSequence {
    public typealias Element = GroupActivities.GroupSession<ActivityType>
    public func makeAsyncIterator() -> GroupActivities.GroupSession<ActivityType>.Sessions.Iterator
    @available(iOS 15, macOS 12, tvOS 15, *)
    @available(watchOS, unavailable)
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      public mutating func next() async -> GroupActivities.GroupSession<ActivityType>?
      @available(iOS 15, tvOS 15, macOS 12, *)
      @available(watchOS, unavailable)
      public typealias Element = GroupActivities.GroupSession<ActivityType>
      @available(iOS 18.0, tvOS 18.0, visionOS 2.0, macOS 15.0, *)
      @available(watchOS, unavailable, introduced: 11.0)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = Swift.Never
    }
    @available(iOS 15, tvOS 15, macOS 12, *)
    @available(watchOS, unavailable)
    public typealias AsyncIterator = GroupActivities.GroupSession<ActivityType>.Sessions.Iterator
    @available(iOS 18.0, tvOS 18.0, visionOS 2.0, macOS 15.0, *)
    @available(watchOS, unavailable, introduced: 11.0)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  }
}
extension GroupActivities.GroupSession.Sessions : Swift.Sendable where ActivityType : Swift.Sendable {
}
extension GroupActivities.GroupSession.Sessions.Iterator : Swift.Sendable where ActivityType : Swift.Sendable {
}
@available(iOS 17, macOS 14, tvOS 17, visionOS 1, *)
@available(watchOS, unavailable)
public struct SceneAssociationBehavior : Swift.Equatable, Swift.Sendable {
  public static func == (a: GroupActivities.SceneAssociationBehavior, b: GroupActivities.SceneAssociationBehavior) -> Swift.Bool
}
@available(iOS 17, macOS 14, tvOS 17, visionOS 1, *)
@available(watchOS, unavailable)
extension GroupActivities.SceneAssociationBehavior {
  public static let `default`: GroupActivities.SceneAssociationBehavior
  public static func content(_ contentIdentifier: Swift.String) -> GroupActivities.SceneAssociationBehavior
  public static let none: GroupActivities.SceneAssociationBehavior
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
extension GroupActivities.GroupSession {
  final public var systemCoordinator: GroupActivities.SystemCoordinator? {
    get async
  }
}
@_hasMissingDesignatedInitializers @available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
final public class SystemCoordinator : @unchecked Swift.Sendable {
  final public var localParticipantState: GroupActivities.SystemCoordinator.ParticipantState {
    get
  }
  final public var localParticipantStates: GroupActivities.SystemCoordinator.ParticipantStates {
    get
  }
  public struct Configuration : Swift.Sendable {
    public var spatialTemplatePreference: GroupActivities.SpatialTemplatePreference
    public var supportsGroupImmersiveSpace: Swift.Bool
    public init()
  }
  final public var configuration: GroupActivities.SystemCoordinator.Configuration {
    get
    set
  }
  @available(visionOS 2.0, *)
  final public func assignRole(_ role: some SpatialTemplateRole)
  @available(visionOS 2.0, *)
  final public func resignRole()
  @objc deinit
}
extension AVFoundation.AVPlaybackCoordinator {
  @available(iOS 15, macOS 12, tvOS 15, *)
  @available(watchOS, unavailable)
  public func coordinateWithSession<T>(_ session: GroupActivities.GroupSession<T>) where T : GroupActivities.GroupActivity
}
prefix operator >>
@available(iOS 15, macOS 12, tvOS 15, *)
@available(watchOS, unavailable)
public struct GroupActivityMetadata : Swift.Equatable, Swift.Sendable {
  public struct ActivityType : Swift.Hashable, Swift.Sendable {
    public static let generic: GroupActivities.GroupActivityMetadata.ActivityType
    public static let listenTogether: GroupActivities.GroupActivityMetadata.ActivityType
    public static let watchTogether: GroupActivities.GroupActivityMetadata.ActivityType
    @available(iOS 17, macOS 14, tvOS 17, *)
    @available(watchOS, unavailable)
    public static let workoutTogether: GroupActivities.GroupActivityMetadata.ActivityType
    @available(iOS 17, macOS 14, tvOS 17, *)
    @available(watchOS, unavailable)
    public static let shopTogether: GroupActivities.GroupActivityMetadata.ActivityType
    @available(iOS 17, macOS 14, tvOS 17, *)
    @available(watchOS, unavailable)
    public static let readTogether: GroupActivities.GroupActivityMetadata.ActivityType
    @available(iOS 17, macOS 14, tvOS 17, *)
    @available(watchOS, unavailable)
    public static let exploreTogether: GroupActivities.GroupActivityMetadata.ActivityType
    @available(iOS 17, macOS 14, tvOS 17, *)
    @available(watchOS, unavailable)
    public static let learnTogether: GroupActivities.GroupActivityMetadata.ActivityType
    @available(iOS 17, macOS 14, tvOS 17, *)
    @available(watchOS, unavailable)
    public static let createTogether: GroupActivities.GroupActivityMetadata.ActivityType
    public static func == (a: GroupActivities.GroupActivityMetadata.ActivityType, b: GroupActivities.GroupActivityMetadata.ActivityType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(iOS 18, macOS 15, tvOS 18, visionOS 2, *)
  @available(watchOS, unavailable)
  public struct LifetimePolicy : Swift.Hashable, Swift.Sendable {
    public static let automatic: GroupActivities.GroupActivityMetadata.LifetimePolicy
    public static let endsWhenInitiatorLeaves: GroupActivities.GroupActivityMetadata.LifetimePolicy
    public static func == (a: GroupActivities.GroupActivityMetadata.LifetimePolicy, b: GroupActivities.GroupActivityMetadata.LifetimePolicy) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var type: GroupActivities.GroupActivityMetadata.ActivityType
  public var title: Swift.String?
  public var subtitle: Swift.String?
  public var previewImage: CoreGraphics.CGImage?
  public var fallbackURL: Foundation.URL?
  public var preferredBroadcastOptions: GroupActivities.BroadcastOptions
  public var supportsContinuationOnTV: Swift.Bool
  @available(iOS 17, macOS 14, tvOS 17, visionOS 1, *)
  @available(watchOS, unavailable)
  public var sceneAssociationBehavior: GroupActivities.SceneAssociationBehavior
  @available(iOS 18, macOS 15, tvOS 18, visionOS 2, *)
  public var lifetimePolicy: GroupActivities.GroupActivityMetadata.LifetimePolicy
  public init()
  public static func == (a: GroupActivities.GroupActivityMetadata, b: GroupActivities.GroupActivityMetadata) -> Swift.Bool
}
extension GroupActivities.GroupActivityMetadata : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(iOS 15, macOS 12, tvOS 15, *)
@available(watchOS, unavailable)
extension GroupActivities.GroupActivityMetadata {
  @available(*, deprecated, renamed: "ActivityType")
  public enum Experience : Swift.Int, Swift.Codable {
    case watchTogether, listenTogether
    public init?(rawValue: Swift.Int)
    @available(*, deprecated, renamed: "ActivityType")
    @available(iOS, introduced: 15, renamed: "ActivityType")
    @available(tvOS, introduced: 15, renamed: "ActivityType")
    @available(watchOS, unavailable, renamed: "ActivityType")
    @available(macOS, introduced: 12, renamed: "ActivityType")
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @available(*, deprecated, renamed: "type")
  public var experience: GroupActivities.GroupActivityMetadata.Experience? {
    get
    set
  }
  @available(*, deprecated, renamed: "title")
  public var localizedTitle: Swift.String? {
    get
    set
  }
  @available(*, deprecated, renamed: "subtitle")
  public var localizedSubtitle: Swift.String? {
    get
    set
  }
}
@available(iOS 15, macOS 12, tvOS 15, *)
@available(watchOS, unavailable)
extension GroupActivities.GroupActivityActivationResult : Swift.Equatable {}
@available(iOS 15, macOS 12, tvOS 15, *)
@available(watchOS, unavailable)
extension GroupActivities.GroupActivityActivationResult : Swift.Hashable {}
@available(iOS 16, macOS 13, tvOS 16, *)
@available(watchOS, unavailable)
extension GroupActivities.GroupSessionMessenger.DeliveryMode : Swift.Equatable {}
@available(iOS 16, macOS 13, tvOS 16, *)
@available(watchOS, unavailable)
extension GroupActivities.GroupSessionMessenger.DeliveryMode : Swift.Hashable {}
@available(iOS 15, macOS 12, tvOS 15, *)
@available(watchOS, unavailable)
@available(*, deprecated, renamed: "ActivityType")
extension GroupActivities.GroupActivityMetadata.Experience : Swift.Equatable {}
@available(iOS 15, macOS 12, tvOS 15, *)
@available(watchOS, unavailable)
@available(*, deprecated, renamed: "ActivityType")
extension GroupActivities.GroupActivityMetadata.Experience : Swift.Hashable {}
@available(iOS 15, macOS 12, tvOS 15, *)
@available(watchOS, unavailable)
@available(*, deprecated, renamed: "ActivityType")
extension GroupActivities.GroupActivityMetadata.Experience : Swift.RawRepresentable {}
