// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64e-apple-ios18.5-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 135.2 -module-name ProximityReader
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import Contacts
import Foundation
import OSLog
@_exported import ProximityReader
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
@available(iOS 18.4, macCatalyst 18.4, visionOS 2.4, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct StoreAndForwardBatchDeletionToken : Swift.RawRepresentable, Swift.Hashable, Swift.Sendable {
  public let rawValue: Swift.String
  public init(rawValue: Swift.String)
  @available(iOS 18.4, visionOS 2.4, macCatalyst 18.4, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias RawValue = Swift.String
}
@available(iOS 15.4, macCatalyst 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct PaymentCardReadResult : Swift.Identifiable, Swift.Sendable {
  @available(iOS 16.4, macCatalyst 17.0, *)
  public enum ReadOutcome : Swift.Sendable {
    case success
    case cardDeclined
    case failure
    public static func == (a: ProximityReader.PaymentCardReadResult.ReadOutcome, b: ProximityReader.PaymentCardReadResult.ReadOutcome) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(iOS 18.4, macCatalyst 18.4, visionOS 2.4, *)
  public enum CardEffectiveState : Swift.Sendable {
    case active
    case inactive
    case invalid
    case unknown
    public static func == (a: ProximityReader.PaymentCardReadResult.CardEffectiveState, b: ProximityReader.PaymentCardReadResult.CardEffectiveState) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(iOS 18.4, macCatalyst 18.4, visionOS 2.4, *)
  public enum CardExpirationState : Swift.Sendable {
    case notExpired
    case expired
    case invalid
    case unknown
    public static func == (a: ProximityReader.PaymentCardReadResult.CardExpirationState, b: ProximityReader.PaymentCardReadResult.CardExpirationState) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let id: Swift.String
  public let paymentCardData: Swift.String?
  public let generalCardData: Swift.String?
  @available(iOS 18.0, macCatalyst 18, visionOS 2.0, *)
  public let applicationTypeIdentifier: Swift.String?
  @available(iOS 16.4, macCatalyst 17.0, *)
  public let outcome: ProximityReader.PaymentCardReadResult.ReadOutcome
  @available(iOS 17.0, *)
  public let pinBypassed: Swift.Bool
  @available(iOS 17.0, *)
  public let isPINFallback: Swift.Bool
  @available(iOS 18.4, macCatalyst 18.4, visionOS 2.4, *)
  public let cardEffectiveState: ProximityReader.PaymentCardReadResult.CardEffectiveState?
  @available(iOS 18.4, macCatalyst 18.4, visionOS 2.4, *)
  public let cardExpirationState: ProximityReader.PaymentCardReadResult.CardExpirationState?
  @available(iOS 15.4, macCatalyst 17.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias ID = Swift.String
}
@available(iOS 18.4, macCatalyst 18.4, visionOS 2.4, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct StoreAndForwardBatch : Swift.Sendable, Swift.Encodable, Swift.Identifiable {
  public let id: Swift.String
  public let count: Swift.Int
  public let signature: Swift.String
  public let intermediateCertificate: [Swift.String]
  public let leafCertificate: Swift.String
  public let payments: [ProximityReader.StoreAndForwardBatch.StoredPaymentCardReadResult]
  @available(iOS 18.4, visionOS 2.4, macCatalyst 18.4, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias ID = Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
}
extension ProximityReader.StoreAndForwardBatch {
  @available(iOS 18.4, macCatalyst 18.4, visionOS 2.4, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public struct StoredPaymentCardReadResult : Swift.Sendable, Swift.Encodable, Swift.Identifiable {
    public let id: Swift.String
    public let paymentCardData: Swift.String
    public let generalCardData: Swift.String
    public let signature: Swift.String
    @available(iOS 18.4, visionOS 2.4, macCatalyst 18.4, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(macOS, unavailable)
    public typealias ID = Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileDocumentReader {
  public struct Configuration : Swift.Hashable, Swift.Sendable {
    public let readerInstanceIdentifier: Swift.String
    public static func == (a: ProximityReader.MobileDocumentReader.Configuration, b: ProximityReader.MobileDocumentReader.Configuration) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 18.4, macCatalyst 18.4, visionOS 2.4, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public class StoreAndForwardPaymentCardReaderSession : ProximityReader.PaymentCardReaderSession, @unchecked Swift.Sendable {
  @available(iOS 18.4, macCatalyst 18.4, visionOS 2.4, *)
  public func decline() async throws
  @available(iOS 18.4, macCatalyst 18.4, visionOS 2.4, *)
  public func status() async throws -> ProximityReader.StoreAndForwardStatus
  @objc deinit
}
@available(iOS 15.4, macCatalyst 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct PaymentCardVerificationRequest : Swift.Sendable {
  public let currencyCode: Swift.String
  public let verificationReason: ProximityReader.PaymentCardVerificationRequest.Reason
  @available(iOS 17.0, *)
  public var userInterfaceLanguage: Foundation.Locale.Language?
  public enum Reason : Swift.Sendable {
    case lookUp
    case saveCard
    case openTab
    case other
    public static func == (a: ProximityReader.PaymentCardVerificationRequest.Reason, b: ProximityReader.PaymentCardVerificationRequest.Reason) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(currencyCode: Swift.String, for reason: ProximityReader.PaymentCardVerificationRequest.Reason = .other)
}
@available(iOS 15.4, macCatalyst 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum PaymentCardReaderError : Swift.Error, Swift.Sendable {
  case notAllowed
  case backgroundRequestNotAllowed
  case unsupported
  case osVersionNotSupported
  case modelNotSupported
  case passcodeDisabled
  case networkError
  case networkAuthenticationError
  case serviceConnectionError
  case notReady
  case emptyReaderToken
  case invalidReaderToken(Swift.String?)
  case prepareFailed(Swift.String?)
  case prepareExpired
  case tokenExpired
  case deviceBanned(Foundation.Date?)
  case readerMemoryFull
  case readerBusy
  case accountNotLinked
  case accountAlreadyLinked
  case accountLinkingFailed
  case accountLinkingRequiresiCloudSignIn
  case accountLinkingCancelled
  @available(iOS 16.4, macCatalyst 17.0, *)
  case accountLinkingCheckFailed
  case merchantBlocked
  @available(iOS 17.0, *)
  case accountDeactivated
  case invalidMerchant
  @available(iOS 18.4, macCatalyst 18.4, visionOS 2.4, *)
  case storeAndForwardNotAllowed
  @available(iOS 18.4, macCatalyst 18.4, visionOS 2.4, *)
  case storeAndForwardSessionExpired
  @available(iOS 18.4, macCatalyst 18.4, visionOS 2.4, *)
  case storeAndForwardSessionInvalidated
  @available(iOS 18.4, macCatalyst 18.4, visionOS 2.4, *)
  case storeAndForwardTokenIssuerChanged
  @available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
  case unknown(code: Swift.Int)
  public var errorDescription: Swift.String {
    get
  }
  public var errorName: Swift.String {
    get
  }
}
@available(iOS 15.4, macCatalyst 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public class PaymentCardReader : @unchecked Swift.Sendable {
  public static let isSupported: Swift.Bool
  @available(iOS, introduced: 15.4, deprecated: 16.0, message: "Use ObjectIdentifier instead")
  @available(macCatalyst, introduced: 17.0, deprecated: 17.0, message: "Use ObjectIdentifier instead")
  final public let id: Swift.String
  @available(iOS 16.0, macCatalyst 17.0, *)
  final public let events: _Concurrency.AsyncStream<ProximityReader.PaymentCardReader.Event>
  @available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
  final public let options: ProximityReader.PaymentCardReader.Options
  @available(iOS 16.0, macCatalyst 17.0, *)
  public enum Event : Swift.Sendable {
    case updateProgress(Swift.Int)
    case notReady
    case readyForTap
    case cardDetected
    case removeCard
    case readCompleted
    case readRetry
    case readCancelled
    case readNotCompleted
    case pinEntryRequested
    case pinEntryCompleted
    @available(iOS 16.4, macCatalyst 17.0, *)
    case userInterfaceDismissed
    public var name: Swift.String {
      get
    }
  }
  @available(iOS, introduced: 15.4, deprecated: 16.0, message: "Use PaymentCardReader.Event")
  @available(macCatalyst, introduced: 17.0, deprecated: 17.0, message: "Use PaymentCardReader.Event")
  public enum UpdateEvent : Swift.Sendable {
    case progress(Swift.Int)
    case notReady
    public var name: Swift.String {
      get
    }
  }
  public struct Options : Swift.Sendable {
    @available(iOS, introduced: 15.4, deprecated: 18.0, message: "Use VASRequest to specify VAS  merchants")
    @available(macCatalyst, introduced: 17.0, deprecated: 18.0, message: "Use VASRequest to specify VAS  merchants")
    public var vasMerchants: [ProximityReader.VASRequest.Merchant]
    @available(iOS 16.4, macCatalyst 17.0, *)
    public var returnReadResultImmediately: Swift.Bool
    @available(iOS 16.4, macCatalyst 17.0, *)
    public var includeErrorInReadResult: Swift.Bool
    @available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
    public init()
    @available(iOS, introduced: 15.4, deprecated: 18.0, message: "Use the init without vasMerchants")
    @available(macCatalyst, introduced: 17.0, deprecated: 18.0, message: "Use the init without vasMerchants")
    public init(vasMerchants: [ProximityReader.VASRequest.Merchant] = [])
  }
  public struct Token : Swift.RawRepresentable, Swift.Hashable, Swift.Sendable {
    public let rawValue: Swift.String
    public init(rawValue: Swift.String)
    @available(iOS 15.4, macCatalyst 17.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(macOS, unavailable)
    public typealias RawValue = Swift.String
  }
  public init(options: ProximityReader.PaymentCardReader.Options = .init())
  @objc deinit
  @available(iOS 16.4, macCatalyst 17.0, *)
  public func isAccountLinked(using token: ProximityReader.PaymentCardReader.Token) async throws -> Swift.Bool
  public func linkAccount(using token: ProximityReader.PaymentCardReader.Token) async throws
  @available(iOS 16.1, macCatalyst 17.0, *)
  public func relinkAccount(using token: ProximityReader.PaymentCardReader.Token) async throws
  public var readerIdentifier: Swift.String {
    get async throws
  }
  @available(iOS 16.0, macCatalyst 17.0, *)
  public func prepare(using token: ProximityReader.PaymentCardReader.Token) async throws -> ProximityReader.PaymentCardReaderSession
  @available(iOS, introduced: 15.4, deprecated: 16.0, message: "Use events instead of passing in updateHandler")
  @available(macCatalyst, introduced: 17.0, deprecated: 17.0, message: "Use events instead of passing in updateHandler")
  public func prepare(using token: ProximityReader.PaymentCardReader.Token, updateHandler: ((ProximityReader.PaymentCardReader.UpdateEvent) -> Swift.Void)?) async throws -> ProximityReader.PaymentCardReaderSession
  @available(iOS 18.4, macCatalyst 18.4, visionOS 2.4, *)
  public func prepareStoreAndForward() async throws -> ProximityReader.StoreAndForwardPaymentCardReaderSession
  @available(iOS 18.4, macCatalyst 18.4, visionOS 2.4, *)
  public func fetchPaymentCardReaderStore() throws -> ProximityReader.PaymentCardReaderStore
}
@available(iOS 18.4, macCatalyst 18.4, visionOS 2.4, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct StoreAndForwardStatus : Swift.Hashable, Swift.Sendable {
  public let readCount: Swift.Int
  public let expiration: Foundation.Date
  public static func == (a: ProximityReader.StoreAndForwardStatus, b: ProximityReader.StoreAndForwardStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileDriversLicenseDisplayRequest {
  public struct Element : Swift.Hashable, Swift.Sendable {
    public static let givenName: ProximityReader.MobileDriversLicenseDisplayRequest.Element
    public static let familyName: ProximityReader.MobileDriversLicenseDisplayRequest.Element
    public static let age: ProximityReader.MobileDriversLicenseDisplayRequest.Element
    public static func ageAtLeast(_ age: Swift.Int) -> ProximityReader.MobileDriversLicenseDisplayRequest.Element
    public static func == (a: ProximityReader.MobileDriversLicenseDisplayRequest.Element, b: ProximityReader.MobileDriversLicenseDisplayRequest.Element) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 15.4, macCatalyst 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct PaymentCardTransactionRequest : Swift.Sendable {
  public let amount: Foundation.Decimal
  public let currencyCode: Swift.String
  public let type: ProximityReader.PaymentCardTransactionRequest.TransactionType
  @available(iOS 16.4, macCatalyst 17.0, *)
  public var preferredAIDList: [Foundation.Data]
  @available(iOS 17.0, macCatalyst 17.0, *)
  public var userInterfaceLanguage: Foundation.Locale.Language?
  @available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
  public var transactionDescription: ProximityReader.PaymentCardTransactionRequest.TransactionAmountDescription?
  public init(amount: Foundation.Decimal, currencyCode: Swift.String, for type: ProximityReader.PaymentCardTransactionRequest.TransactionType = .purchase)
  public enum TransactionType : Swift.Sendable {
    case purchase
    case refund
    public static func == (a: ProximityReader.PaymentCardTransactionRequest.TransactionType, b: ProximityReader.PaymentCardTransactionRequest.TransactionType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
  public enum PaymentCycle : Swift.Sendable {
    case weekly
    case monthly
    case yearly
    public static func == (a: ProximityReader.PaymentCardTransactionRequest.PaymentCycle, b: ProximityReader.PaymentCardTransactionRequest.PaymentCycle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
  public enum TransactionAmountDescription : Swift.Sendable {
    case surchargePercent(Swift.Double)
    case surchargeAmount(Foundation.Decimal)
    case installment(ProximityReader.PaymentCardTransactionRequest.PaymentCycle, amount: Foundation.Decimal, payments: Swift.Int)
    case membership(ProximityReader.PaymentCardTransactionRequest.PaymentCycle)
    case preauthorizationAmount(Foundation.Decimal)
    case preauthorization
    case preauthorizationRelease
  }
}
@available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct MobileNationalIDCardDisplayRequest : ProximityReader.MobileDocumentRequest {
  public static func isSupportedRegion(_ region: Foundation.Locale.Region) -> Swift.Bool
  public var region: Foundation.Locale.Region
  public var elements: [ProximityReader.MobileNationalIDCardDisplayRequest.Element]
  public var options: ProximityReader.MobileNationalIDCardDisplayRequest.Options
  public init(region: Foundation.Locale.Region, elements: [ProximityReader.MobileNationalIDCardDisplayRequest.Element] = [], options: ProximityReader.MobileNationalIDCardDisplayRequest.Options = .init())
  public static func == (a: ProximityReader.MobileNationalIDCardDisplayRequest, b: ProximityReader.MobileNationalIDCardDisplayRequest) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileDocumentRequest where Self == ProximityReader.MobileNationalIDCardDisplayRequest {
  public static func nationalIDCard(region: Foundation.Locale.Region, _ elements: [ProximityReader.MobileNationalIDCardDisplayRequest.Element], options: ProximityReader.MobileNationalIDCardDisplayRequest.Options = .init()) -> Self
}
@available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
final public class ProximityReaderDiscovery : Swift.Sendable {
  public enum Topic : Swift.Sendable {
    case payment(ProximityReader.ProximityReaderDiscovery.Topic.Payment)
    public enum Payment : Swift.Sendable {
      case howToTap
      public static func == (a: ProximityReader.ProximityReaderDiscovery.Topic.Payment, b: ProximityReader.ProximityReaderDiscovery.Topic.Payment) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
  }
  public enum ContentError : Foundation.LocalizedError {
    case contentNotFound
    case contentDisplayFailed
    case notSupported
    case networkUnavailable
    case systemBusy
    case unknown
    public static func == (a: ProximityReader.ProximityReaderDiscovery.ContentError, b: ProximityReader.ProximityReaderDiscovery.ContentError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Content : Swift.Identifiable, Swift.Sendable {
    public let id: Swift.String
    public let description: Swift.String
    @available(iOS 18.0, visionOS 2.0, macCatalyst 18.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(macOS, unavailable)
    public typealias ID = Swift.String
  }
  final public var contentList: [ProximityReader.ProximityReaderDiscovery.Content] {
    get async throws
  }
  final public func content(for topic: ProximityReader.ProximityReaderDiscovery.Topic) async throws -> ProximityReader.ProximityReaderDiscovery.Content
  final public func presentContent(_ content: ProximityReader.ProximityReaderDiscovery.Content, from viewController: UIKit.UIViewController) async throws
  public init()
  @objc deinit
}
@available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileNationalIDCardDataRequest.Response {
  public struct DocumentElements : Swift.Hashable, Swift.Sendable {
    public let nameComponents: Foundation.PersonNameComponents?
    public let portraitData: Foundation.Data?
    public let ageAtLeastElements: [Swift.Int : Swift.Bool]
    public let age: Swift.Int?
    public let dateOfBirth: Foundation.DateComponents?
    public let sex: ProximityReader.MobileNationalIDCardDataRequest.Response.DocumentElements.Sex?
    @available(iOS 18.4, visionOS 2.4, *)
    public let documentNumber: Swift.String?
    public static func == (a: ProximityReader.MobileNationalIDCardDataRequest.Response.DocumentElements, b: ProximityReader.MobileNationalIDCardDataRequest.Response.DocumentElements) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileNationalIDCardDisplayRequest {
  public struct Element : Swift.Hashable, Swift.Sendable {
    public static let givenName: ProximityReader.MobileNationalIDCardDisplayRequest.Element
    public static let familyName: ProximityReader.MobileNationalIDCardDisplayRequest.Element
    public static let age: ProximityReader.MobileNationalIDCardDisplayRequest.Element
    public static func ageAtLeast(_ age: Swift.Int) -> ProximityReader.MobileNationalIDCardDisplayRequest.Element
    public static func == (a: ProximityReader.MobileNationalIDCardDisplayRequest.Element, b: ProximityReader.MobileNationalIDCardDisplayRequest.Element) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileNationalIDCardDisplayRequest {
  public struct Options : Swift.Hashable, Swift.Sendable {
    public var validationMode: ProximityReader.MobileNationalIDCardDisplayRequest.Options.ValidationMode
    public init(validationMode: ProximityReader.MobileNationalIDCardDisplayRequest.Options.ValidationMode = .check)
    public static func == (a: ProximityReader.MobileNationalIDCardDisplayRequest.Options, b: ProximityReader.MobileNationalIDCardDisplayRequest.Options) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileNationalIDCardDisplayRequest.Response {
  public enum ValidationOutcome : Swift.Hashable, Swift.Sendable {
    case dismissed
    case approved
    case rejected
    public static func == (a: ProximityReader.MobileNationalIDCardDisplayRequest.Response.ValidationOutcome, b: ProximityReader.MobileNationalIDCardDisplayRequest.Response.ValidationOutcome) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileNationalIDCardDataRequest {
  public struct Element : Swift.Hashable, Swift.Sendable {
    public static let givenName: ProximityReader.MobileNationalIDCardDataRequest.Element
    public static let familyName: ProximityReader.MobileNationalIDCardDataRequest.Element
    public static let portrait: ProximityReader.MobileNationalIDCardDataRequest.Element
    public static let age: ProximityReader.MobileNationalIDCardDataRequest.Element
    public static let dateOfBirth: ProximityReader.MobileNationalIDCardDataRequest.Element
    public static let sex: ProximityReader.MobileNationalIDCardDataRequest.Element
    @available(iOS 18.4, visionOS 2.4, *)
    public static let documentNumber: ProximityReader.MobileNationalIDCardDataRequest.Element
    public static func ageAtLeast(_ age: Swift.Int) -> ProximityReader.MobileNationalIDCardDataRequest.Element
    public static func == (a: ProximityReader.MobileNationalIDCardDataRequest.Element, b: ProximityReader.MobileNationalIDCardDataRequest.Element) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct MobileNationalIDCardRawDataRequest : ProximityReader.MobileDocumentRequest {
  public static func isSupportedRegion(_ region: Foundation.Locale.Region) -> Swift.Bool
  public var region: Foundation.Locale.Region
  public var retainedElements: [ProximityReader.MobileNationalIDCardRawDataRequest.Element]
  public var nonRetainedElements: [ProximityReader.MobileNationalIDCardRawDataRequest.Element]
  public init(region: Foundation.Locale.Region, retainedElements: [ProximityReader.MobileNationalIDCardRawDataRequest.Element] = [], nonRetainedElements: [ProximityReader.MobileNationalIDCardRawDataRequest.Element] = [])
  public static func == (a: ProximityReader.MobileNationalIDCardRawDataRequest, b: ProximityReader.MobileNationalIDCardRawDataRequest) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileDocumentRequest where Self == ProximityReader.MobileNationalIDCardRawDataRequest {
  public static func nationalIDCardRawData(region: Foundation.Locale.Region, retaining retainedElements: [ProximityReader.MobileNationalIDCardRawDataRequest.Element] = [], notRetaining nonRetainedElements: [ProximityReader.MobileNationalIDCardRawDataRequest.Element] = []) -> Self
}
@available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct MobileNationalIDCardDataRequest : ProximityReader.MobileDocumentRequest {
  public static func isSupportedRegion(_ region: Foundation.Locale.Region) -> Swift.Bool
  public var region: Foundation.Locale.Region
  public var retainedElements: [ProximityReader.MobileNationalIDCardDataRequest.Element]
  public var nonRetainedElements: [ProximityReader.MobileNationalIDCardDataRequest.Element]
  public init(region: Foundation.Locale.Region, retainedElements: [ProximityReader.MobileNationalIDCardDataRequest.Element] = [], nonRetainedElements: [ProximityReader.MobileNationalIDCardDataRequest.Element] = [])
  public static func == (a: ProximityReader.MobileNationalIDCardDataRequest, b: ProximityReader.MobileNationalIDCardDataRequest) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileDocumentRequest where Self == ProximityReader.MobileNationalIDCardDataRequest {
  public static func nationalIDCardData(region: Foundation.Locale.Region, retaining retainedElements: [ProximityReader.MobileNationalIDCardDataRequest.Element] = [], notRetaining nonRetainedElements: [ProximityReader.MobileNationalIDCardDataRequest.Element] = []) -> Self
}
@available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileNationalIDCardDataRequest.Response.DocumentElements {
  public enum Sex : Swift.Hashable, Swift.Sendable {
    case female
    case male
    case notApplicable
    case unknown
    public static func == (a: ProximityReader.MobileNationalIDCardDataRequest.Response.DocumentElements.Sex, b: ProximityReader.MobileNationalIDCardDataRequest.Response.DocumentElements.Sex) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileNationalIDCardDataRequest.Response.DocumentElements.Sex {
  public var localizedName: Swift.String {
    get
  }
}
@available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileNationalIDCardRawDataRequest {
  public struct Element : Swift.Hashable, Swift.Sendable {
    public static let givenName: ProximityReader.MobileNationalIDCardRawDataRequest.Element
    public static let familyName: ProximityReader.MobileNationalIDCardRawDataRequest.Element
    public static let portrait: ProximityReader.MobileNationalIDCardRawDataRequest.Element
    public static let age: ProximityReader.MobileNationalIDCardRawDataRequest.Element
    public static let dateOfBirth: ProximityReader.MobileNationalIDCardRawDataRequest.Element
    public static let sex: ProximityReader.MobileNationalIDCardRawDataRequest.Element
    public static let address: ProximityReader.MobileNationalIDCardRawDataRequest.Element
    @available(iOS 18.4, visionOS 2.4, *)
    public static let documentNumber: ProximityReader.MobileNationalIDCardRawDataRequest.Element
    public static func ageAtLeast(_ age: Swift.Int) -> ProximityReader.MobileNationalIDCardRawDataRequest.Element
    public static func == (a: ProximityReader.MobileNationalIDCardRawDataRequest.Element, b: ProximityReader.MobileNationalIDCardRawDataRequest.Element) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileNationalIDCardRawDataRequest {
  public struct Response : Swift.Hashable, Swift.Sendable {
    public let responseData: Foundation.Data
    public let sessionTranscript: Foundation.Data
    public static func == (a: ProximityReader.MobileNationalIDCardRawDataRequest.Response, b: ProximityReader.MobileNationalIDCardRawDataRequest.Response) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileNationalIDCardDisplayRequest {
  public struct Response : Swift.Hashable, Swift.Sendable {
    public let validationOutcome: ProximityReader.MobileNationalIDCardDisplayRequest.Response.ValidationOutcome
    public static func == (a: ProximityReader.MobileNationalIDCardDisplayRequest.Response, b: ProximityReader.MobileNationalIDCardDisplayRequest.Response) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileNationalIDCardDataRequest {
  public struct Response : Swift.Hashable, Swift.Sendable {
    public let documentElements: ProximityReader.MobileNationalIDCardDataRequest.Response.DocumentElements
    public static func == (a: ProximityReader.MobileNationalIDCardDataRequest.Response, b: ProximityReader.MobileNationalIDCardDataRequest.Response) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileNationalIDCardDisplayRequest.Options {
  public struct ValidationMode : Swift.Hashable, Swift.Sendable {
    public static let check: ProximityReader.MobileNationalIDCardDisplayRequest.Options.ValidationMode
    public static let checkMultiple: ProximityReader.MobileNationalIDCardDisplayRequest.Options.ValidationMode
    public static let confirm: ProximityReader.MobileNationalIDCardDisplayRequest.Options.ValidationMode
    public static func == (a: ProximityReader.MobileNationalIDCardDisplayRequest.Options.ValidationMode, b: ProximityReader.MobileNationalIDCardDisplayRequest.Options.ValidationMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol MobileDocumentRequest : Swift.Hashable, Swift.Sendable {
  associatedtype Response : Swift.Hashable, Swift.Sendable
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileDriversLicenseRawDataRequest {
  public struct Response : Swift.Hashable, Swift.Sendable {
    public let responseData: Foundation.Data
    public let sessionTranscript: Foundation.Data
    public static func == (a: ProximityReader.MobileDriversLicenseRawDataRequest.Response, b: ProximityReader.MobileDriversLicenseRawDataRequest.Response) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileDriversLicenseDataRequest {
  public struct Element : Swift.Hashable, Swift.Sendable {
    public static let givenName: ProximityReader.MobileDriversLicenseDataRequest.Element
    public static let familyName: ProximityReader.MobileDriversLicenseDataRequest.Element
    public static let portrait: ProximityReader.MobileDriversLicenseDataRequest.Element
    public static let age: ProximityReader.MobileDriversLicenseDataRequest.Element
    public static let dateOfBirth: ProximityReader.MobileDriversLicenseDataRequest.Element
    @available(iOS 17.2, *)
    public static let sex: ProximityReader.MobileDriversLicenseDataRequest.Element
    public static let address: ProximityReader.MobileDriversLicenseDataRequest.Element
    public static let issuingAuthority: ProximityReader.MobileDriversLicenseDataRequest.Element
    public static let drivingPrivileges: ProximityReader.MobileDriversLicenseDataRequest.Element
    public static let documentNumber: ProximityReader.MobileDriversLicenseDataRequest.Element
    public static let documentIssueDate: ProximityReader.MobileDriversLicenseDataRequest.Element
    public static let documentExpirationDate: ProximityReader.MobileDriversLicenseDataRequest.Element
    @available(iOS 17.2, *)
    public static let documentDHSComplianceStatus: ProximityReader.MobileDriversLicenseDataRequest.Element
    public static func ageAtLeast(_ age: Swift.Int) -> ProximityReader.MobileDriversLicenseDataRequest.Element
    public static func == (a: ProximityReader.MobileDriversLicenseDataRequest.Element, b: ProximityReader.MobileDriversLicenseDataRequest.Element) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct MobileDriversLicenseRawDataRequest : ProximityReader.MobileDocumentRequest {
  public var retainedElements: [ProximityReader.MobileDriversLicenseRawDataRequest.Element]
  public var nonRetainedElements: [ProximityReader.MobileDriversLicenseRawDataRequest.Element]
  public init(retainedElements: [ProximityReader.MobileDriversLicenseRawDataRequest.Element] = [], nonRetainedElements: [ProximityReader.MobileDriversLicenseRawDataRequest.Element] = [])
  public static func == (a: ProximityReader.MobileDriversLicenseRawDataRequest, b: ProximityReader.MobileDriversLicenseRawDataRequest) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileDocumentRequest where Self == ProximityReader.MobileDriversLicenseRawDataRequest {
  public static func driversLicenseRawData(retaining retainedElements: [ProximityReader.MobileDriversLicenseRawDataRequest.Element], notRetaining nonRetainedElements: [ProximityReader.MobileDriversLicenseRawDataRequest.Element]) -> Self
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements {
  public struct IssuingAuthority : Swift.Hashable, Swift.Sendable {
    public let name: Swift.String?
    public let jurisdiction: Swift.String?
    public let isoCountryCode: Swift.String?
    public static func == (a: ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.IssuingAuthority, b: ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.IssuingAuthority) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileDocumentReader {
  public struct Token : Swift.Hashable, Swift.Sendable {
    public let tokenString: Swift.String
    public init(_ tokenString: Swift.String)
    public static func == (a: ProximityReader.MobileDocumentReader.Token, b: ProximityReader.MobileDocumentReader.Token) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum MobileDocumentReaderError : Foundation.LocalizedError {
  case unknown
  case notAllowed
  case notSupported
  case cancelled
  case sessionExpired
  case networkUnavailable
  case serviceUnavailable
  case systemBusy
  case invalidToken
  case invalidRequest
  case invalidResponse
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (a: ProximityReader.MobileDocumentReaderError, b: ProximityReader.MobileDocumentReaderError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.2, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements {
  @available(iOS 17.2, *)
  public enum DHSComplianceStatus : Swift.Hashable, Swift.Sendable {
    case compliant
    case noncompliant
    public static func == (a: ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.DHSComplianceStatus, b: ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.DHSComplianceStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 17.2, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements {
  @available(iOS 17.2, *)
  public enum Sex : Swift.Hashable, Swift.Sendable {
    case female
    case male
    case notApplicable
    case notSpecified
    case unknown
    public static func == (a: ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.Sex, b: ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.Sex) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 17.2, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.Sex {
  public var localizedName: Swift.String {
    get
  }
}
@available(iOS 15.4, macCatalyst 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public class VASRequest : @unchecked Swift.Sendable {
  final public let vasMerchants: [ProximityReader.VASRequest.Merchant]
  final public let localizedVASType: Swift.String
  @available(iOS 17.0, *)
  public var userInterfaceLanguage: Foundation.Locale.Language?
  public init(vasMerchants: [ProximityReader.VASRequest.Merchant] = [], localizedVASType: Swift.String = "")
  public struct Merchant : Swift.Identifiable, Swift.Sendable {
    public let id: Swift.String
    public let url: Foundation.URL?
    @available(iOS, introduced: 15.4, deprecated: 16.4, message: "Not supported")
    @available(macCatalyst, introduced: 17.0, deprecated: 17.0, message: "Not supported")
    public let shouldSendURLOnly: Swift.Bool
    public var localizedName: Swift.String
    @available(iOS, introduced: 15.4, deprecated: 16.4, message: "Not supported")
    @available(macCatalyst, introduced: 17.0, deprecated: 17.0, message: "Not supported")
    public init(id: Swift.String, url: Foundation.URL? = nil, shouldSendURLOnly: Swift.Bool = false, localizedName: Swift.String? = nil)
    @available(iOS 16.4, macCatalyst 17.0, *)
    public init(id: Swift.String, url: Foundation.URL? = nil, localizedName: Swift.String? = nil)
    @available(iOS 15.4, macCatalyst 17.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(macOS, unavailable)
    public typealias ID = Swift.String
  }
  @objc deinit
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileDriversLicenseRawDataRequest {
  public struct Element : Swift.Hashable, Swift.Sendable {
    public static let givenName: ProximityReader.MobileDriversLicenseRawDataRequest.Element
    public static let familyName: ProximityReader.MobileDriversLicenseRawDataRequest.Element
    public static let portrait: ProximityReader.MobileDriversLicenseRawDataRequest.Element
    public static let age: ProximityReader.MobileDriversLicenseRawDataRequest.Element
    public static let dateOfBirth: ProximityReader.MobileDriversLicenseRawDataRequest.Element
    @available(iOS 17.2, *)
    public static let sex: ProximityReader.MobileDriversLicenseRawDataRequest.Element
    public static let address: ProximityReader.MobileDriversLicenseRawDataRequest.Element
    public static let issuingAuthority: ProximityReader.MobileDriversLicenseRawDataRequest.Element
    public static let drivingPrivileges: ProximityReader.MobileDriversLicenseRawDataRequest.Element
    public static let documentNumber: ProximityReader.MobileDriversLicenseRawDataRequest.Element
    public static let documentIssueDate: ProximityReader.MobileDriversLicenseRawDataRequest.Element
    public static let documentExpirationDate: ProximityReader.MobileDriversLicenseRawDataRequest.Element
    @available(iOS 17.2, *)
    public static let documentDHSComplianceStatus: ProximityReader.MobileDriversLicenseRawDataRequest.Element
    public static func ageAtLeast(_ age: Swift.Int) -> ProximityReader.MobileDriversLicenseRawDataRequest.Element
    public static func == (a: ProximityReader.MobileDriversLicenseRawDataRequest.Element, b: ProximityReader.MobileDriversLicenseRawDataRequest.Element) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements {
  public struct AAMVADrivingPrivilege : Swift.Hashable, Swift.Sendable {
    public let vehicleClass: ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.AAMVADrivingPrivilege.VehicleClass?
    public let vehicleRestrictions: [ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.AAMVADrivingPrivilege.VehicleRestriction]
    public let vehicleEndorsements: [ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.AAMVADrivingPrivilege.VehicleEndorsement]
    public static func == (a: ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.AAMVADrivingPrivilege, b: ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.AAMVADrivingPrivilege) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.AAMVADrivingPrivilege {
  public struct VehicleClass : Swift.Hashable, Swift.Sendable {
    public let code: Swift.String
    public let description: Swift.String
    public let issueDate: Foundation.DateComponents?
    public let expirationDate: Foundation.DateComponents?
    public static func == (a: ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.AAMVADrivingPrivilege.VehicleClass, b: ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.AAMVADrivingPrivilege.VehicleClass) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.AAMVADrivingPrivilege {
  public struct VehicleRestriction : Swift.Hashable, Swift.Sendable {
    public let code: Swift.String?
    public let description: Swift.String
    public static func == (a: ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.AAMVADrivingPrivilege.VehicleRestriction, b: ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.AAMVADrivingPrivilege.VehicleRestriction) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.AAMVADrivingPrivilege {
  public struct VehicleEndorsement : Swift.Hashable, Swift.Sendable {
    public let code: Swift.String?
    public let description: Swift.String
    public static func == (a: ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.AAMVADrivingPrivilege.VehicleEndorsement, b: ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.AAMVADrivingPrivilege.VehicleEndorsement) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 15.4, macCatalyst 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct VASReadResult : Swift.Identifiable, Swift.Sendable {
  public let id: Swift.String
  public let entries: [ProximityReader.VASReadResult.ReadEntry]
  @available(iOS, introduced: 15.4, deprecated: 16.0, message: "Not meant to be created")
  @available(macCatalyst, introduced: 17.0, deprecated: 17.0, message: "Not meant to be created")
  public init(id: Swift.String, entries: [ProximityReader.VASReadResult.ReadEntry])
  public struct ReadEntry : Swift.Identifiable, Swift.Sendable {
    public let id: Swift.String
    public let customerVASData: Foundation.Data?
    public let status: ProximityReader.VASReadResult.ReadEntry.Status
    public enum Status : Swift.Int, Swift.Sendable {
      case success
      case vasDataNotFound
      case vasDataNotActivated
      case wrongP1P2
      case wrongCommandLength
      case userInterventionRequired
      case incorrectData
      case unsupportedApplicationVersion
      public init?(rawValue: Swift.Int)
      @available(iOS 15.4, macCatalyst 17.0, *)
      @available(tvOS, unavailable)
      @available(watchOS, unavailable)
      @available(macOS, unavailable)
      public typealias RawValue = Swift.Int
      public var rawValue: Swift.Int {
        get
      }
    }
    @available(iOS 15.4, macCatalyst 17.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(macOS, unavailable)
    public typealias ID = Swift.String
  }
  @available(iOS 15.4, macCatalyst 17.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias ID = Swift.String
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct MobileDriversLicenseDisplayRequest : ProximityReader.MobileDocumentRequest {
  public var elements: [ProximityReader.MobileDriversLicenseDisplayRequest.Element]
  public var options: ProximityReader.MobileDriversLicenseDisplayRequest.Options
  public init(elements: [ProximityReader.MobileDriversLicenseDisplayRequest.Element] = [], options: ProximityReader.MobileDriversLicenseDisplayRequest.Options = .init())
  public static func == (a: ProximityReader.MobileDriversLicenseDisplayRequest, b: ProximityReader.MobileDriversLicenseDisplayRequest) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileDocumentRequest where Self == ProximityReader.MobileDriversLicenseDisplayRequest {
  public static func displayDriversLicense(_ elements: [ProximityReader.MobileDriversLicenseDisplayRequest.Element], options: ProximityReader.MobileDriversLicenseDisplayRequest.Options = .init()) -> Self
}
@_hasMissingDesignatedInitializers @available(iOS 15.4, macCatalyst 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public class PaymentCardReaderSession : @unchecked Swift.Sendable {
  @available(iOS, introduced: 15.4, deprecated: 16.0, message: "Use ObjectIdentifier instead")
  @available(macCatalyst, introduced: 17.0, deprecated: 17.0, message: "Use ObjectIdentifier instead")
  final public let id: Swift.String
  @available(iOS 18.4, macCatalyst 18.4, *)
  final public let currentOSVersionDeprecationDate: Foundation.Date?
  @available(iOS, introduced: 15.4, deprecated: 16.0, message: "Use PaymentCardReader.Event")
  @available(macCatalyst, introduced: 17.0, deprecated: 17.0, message: "Use PaymentCardReader.Event")
  public enum Event : Swift.Sendable {
    case readyForTap
    case cardDetected
    case removeCard
    case completed
    case retry
    case readCancelled
    case readNotCompleted
    public var name: Swift.String {
      get
    }
    public static func == (a: ProximityReader.PaymentCardReaderSession.Event, b: ProximityReader.PaymentCardReaderSession.Event) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ReadError : Swift.Error, Swift.Sendable {
    case readNotAllowed
    case readFromBackgroundError
    case readerServiceConnectionError
    case readerServiceError
    case noReaderSession
    case readerSessionExpired
    case readerTokenExpired
    case readerSessionNetworkError
    case readerSessionAuthenticationError
    case readerSessionBusy
    case readCancelled
    case invalidAmount
    case invalidCurrencyCode
    @available(iOS 16.4, macCatalyst 17.0, *)
    case invalidPreferredAID
    case nfcDisabled
    case readNotAllowedDuringCall
    case passcodeDisabled
    case cardReadFailed
    case vasReadFail
    case paymentReadFailed
    case paymentCardDeclined
    case invalidVASMerchants(Swift.String?)
    case invalidVASRequestParameters(Swift.String?)
    @available(iOS 16.0, macCatalyst 17.0, *)
    case pinEntryFailed
    @available(iOS 16.0, macCatalyst 17.0, *)
    case pinTokenInvalid
    @available(iOS 16.0, macCatalyst 17.0, *)
    case pinEntryTimeout
    @available(iOS 16.0, macCatalyst 17.0, *)
    case pinCancelled
    @available(iOS 16.0, macCatalyst 17.0, *)
    case pinNotAllowed
    @available(iOS 18.4, macCatalyst 18.4, visionOS 2.4, *)
    case storeAndForwardDeclineFailed
    @available(iOS 18.4, macCatalyst 18.4, visionOS 2.4, *)
    case storeAndForwardResultNotFound
    @available(iOS 18.4, macCatalyst 18.4, visionOS 2.4, *)
    case unknown(code: Swift.Int)
    public var errorDescription: Swift.String {
      get
    }
    public var errorName: Swift.String {
      get
    }
  }
  @available(iOS 16.0, macCatalyst 17.0, *)
  public struct PINToken : Swift.RawRepresentable, Swift.Hashable, Swift.Sendable {
    public let rawValue: Swift.String
    public init(rawValue: Swift.String)
    @available(iOS 16.0, macCatalyst 17.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(macOS, unavailable)
    public typealias RawValue = Swift.String
  }
  @objc deinit
  public func cancelRead() async throws -> Swift.Bool
  @available(iOS 16.0, macCatalyst 17.0, *)
  public func readPaymentCard(_ request: ProximityReader.PaymentCardTransactionRequest) async throws -> ProximityReader.PaymentCardReadResult
  @available(iOS, introduced: 15.4, deprecated: 16.0, message: "Use PaymentCardReader events instead of eventHandler")
  @available(macCatalyst, introduced: 17.0, deprecated: 17.0, message: "Use PaymentCardReader events instead of eventHandler")
  public func readPaymentCard(_ request: ProximityReader.PaymentCardTransactionRequest, eventHandler: ((ProximityReader.PaymentCardReaderSession.Event) -> Swift.Void)? = nil) async throws -> ProximityReader.PaymentCardReadResult
  @available(iOS 16.0, macCatalyst 17.0, *)
  public func readPaymentCard(_ request: ProximityReader.PaymentCardVerificationRequest) async throws -> ProximityReader.PaymentCardReadResult
  @available(iOS, introduced: 15.4, deprecated: 16.0, message: "Use PaymentCardReader events instead of eventHandler")
  @available(macCatalyst, introduced: 17.0, deprecated: 17.0, message: "Use PaymentCardReader events instead of eventHandler")
  public func readPaymentCard(_ request: ProximityReader.PaymentCardVerificationRequest, eventHandler: ((ProximityReader.PaymentCardReaderSession.Event) -> Swift.Void)? = nil) async throws -> ProximityReader.PaymentCardReadResult
  @available(iOS 16.0, macCatalyst 17.0, *)
  public func readVAS(_ request: ProximityReader.VASRequest) async throws -> ProximityReader.VASReadResult
  @available(iOS, introduced: 15.4, deprecated: 16.0, message: "Use PaymentCardReader events instead of eventHandler")
  @available(macCatalyst, introduced: 17.0, deprecated: 17.0, message: "Use PaymentCardReader events instead of eventHandler")
  public func readVAS(_ request: ProximityReader.VASRequest, eventHandler: ((ProximityReader.PaymentCardReaderSession.Event) -> Swift.Void)? = nil) async throws -> ProximityReader.VASReadResult
  @available(iOS 16.0, macCatalyst 17.0, *)
  public func readPaymentCard(_ request: ProximityReader.PaymentCardTransactionRequest, vasRequest: ProximityReader.VASRequest, stopOnVASResult: Swift.Bool) async throws -> (ProximityReader.PaymentCardReadResult?, ProximityReader.VASReadResult?)
  @available(iOS, introduced: 15.4, deprecated: 16.0, message: "Use PaymentCardReader events instead of eventHandler")
  @available(macCatalyst, introduced: 17.0, deprecated: 17.0, message: "Use PaymentCardReader events instead of eventHandler")
  public func readPaymentCard(_ request: ProximityReader.PaymentCardTransactionRequest, vasRequest: ProximityReader.VASRequest, stopOnVASResult: Swift.Bool, eventHandler: ((ProximityReader.PaymentCardReaderSession.Event) -> Swift.Void)? = nil) async throws -> (ProximityReader.PaymentCardReadResult?, ProximityReader.VASReadResult?)
  @available(iOS 16.0, macCatalyst 17.0, *)
  public func capturePIN(using token: ProximityReader.PaymentCardReaderSession.PINToken, cardReaderTransactionID: Swift.String) async throws -> ProximityReader.PaymentCardReadResult
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileDriversLicenseDisplayRequest {
  public struct Options : Swift.Hashable, Swift.Sendable {
    public var validationMode: ProximityReader.MobileDriversLicenseDisplayRequest.Options.ValidationMode
    public init(validationMode: ProximityReader.MobileDriversLicenseDisplayRequest.Options.ValidationMode = .check)
    public static func == (a: ProximityReader.MobileDriversLicenseDisplayRequest.Options, b: ProximityReader.MobileDriversLicenseDisplayRequest.Options) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileDriversLicenseDisplayRequest {
  public struct Response : Swift.Hashable, Swift.Sendable {
    public let validationOutcome: ProximityReader.MobileDriversLicenseDisplayRequest.Response.ValidationOutcome
    public static func == (a: ProximityReader.MobileDriversLicenseDisplayRequest.Response, b: ProximityReader.MobileDriversLicenseDisplayRequest.Response) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileDriversLicenseDisplayRequest.Response {
  public enum ValidationOutcome : Swift.Hashable, Swift.Sendable {
    case dismissed
    case approved
    case rejected
    public static func == (a: ProximityReader.MobileDriversLicenseDisplayRequest.Response.ValidationOutcome, b: ProximityReader.MobileDriversLicenseDisplayRequest.Response.ValidationOutcome) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@_hasMissingDesignatedInitializers @available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
final public class MobileDocumentReaderSession : Swift.Sendable {
  @discardableResult
  final public func requestDocument<Request>(_ request: Request) async throws -> Request.Response where Request : ProximityReader.MobileDocumentRequest
  @objc deinit
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
final public class MobileDocumentReader : Swift.Sendable {
  public static var isSupported: Swift.Bool {
    get
  }
  public init()
  final public var configuration: ProximityReader.MobileDocumentReader.Configuration {
    get async throws
  }
  final public func prepare(using token: ProximityReader.MobileDocumentReader.Token? = nil) async throws -> ProximityReader.MobileDocumentReaderSession
  @objc deinit
}
@available(iOS 18.4, macCatalyst 18.4, visionOS 2.4, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct PaymentCardReaderStore : Swift.Sendable {
  public func fetchStoredPaymentCardReadResultCount() async throws -> Swift.Int
  public func fetchStoredPaymentCardReadResultBatch(size: Swift.Int = 0) async throws -> ProximityReader.StoreAndForwardBatch
  public func resetBatchState() async throws
  public func resolveBatch(batchDeletionToken: ProximityReader.StoreAndForwardBatchDeletionToken) async throws -> Swift.Int
}
extension ProximityReader.PaymentCardReaderStore {
  @available(iOS 18.4, macCatalyst 18.4, visionOS 2.4, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public enum StoreError : Swift.Error {
    case notAllowed
    case busy
    case unknown(code: Swift.Int)
    case networkError
    case passcodeDisabled
    case storeAndForwardResultsNotFound
    case storeAndForwardBatchNotFound
    case storeAndForwardBatchSizeInvalid
    case storeAndForwardBatchAlreadyExists
    case storeAndForwardDeletionTokenInvalid
    case storeAndForwardDeletionTokenExpired
  }
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileDriversLicenseDisplayRequest.Options {
  public struct ValidationMode : Swift.Hashable, Swift.Sendable {
    public static let check: ProximityReader.MobileDriversLicenseDisplayRequest.Options.ValidationMode
    public static let checkMultiple: ProximityReader.MobileDriversLicenseDisplayRequest.Options.ValidationMode
    public static let confirm: ProximityReader.MobileDriversLicenseDisplayRequest.Options.ValidationMode
    public static func == (a: ProximityReader.MobileDriversLicenseDisplayRequest.Options.ValidationMode, b: ProximityReader.MobileDriversLicenseDisplayRequest.Options.ValidationMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements {
  public struct DrivingPrivilege : Swift.Hashable, Swift.Sendable {
    public let vehicleCategoryCode: Swift.String
    public let issueDate: Foundation.DateComponents?
    public let expirationDate: Foundation.DateComponents?
    public let codes: [ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.DrivingPrivilege.Code]
    public static func == (a: ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.DrivingPrivilege, b: ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.DrivingPrivilege) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.DrivingPrivilege {
  public struct Code : Swift.Hashable, Swift.Sendable {
    public let code: Swift.String
    public let sign: Swift.String?
    public let value: Swift.String?
    public static func == (a: ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.DrivingPrivilege.Code, b: ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.DrivingPrivilege.Code) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct MobileDriversLicenseDataRequest : ProximityReader.MobileDocumentRequest {
  public var retainedElements: [ProximityReader.MobileDriversLicenseDataRequest.Element]
  public var nonRetainedElements: [ProximityReader.MobileDriversLicenseDataRequest.Element]
  public init(retainedElements: [ProximityReader.MobileDriversLicenseDataRequest.Element] = [], nonRetainedElements: [ProximityReader.MobileDriversLicenseDataRequest.Element] = [])
  public static func == (a: ProximityReader.MobileDriversLicenseDataRequest, b: ProximityReader.MobileDriversLicenseDataRequest) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileDocumentRequest where Self == ProximityReader.MobileDriversLicenseDataRequest {
  public static func driversLicenseData(retaining retainedElements: [ProximityReader.MobileDriversLicenseDataRequest.Element], notRetaining nonRetainedElements: [ProximityReader.MobileDriversLicenseDataRequest.Element]) -> Self
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileDriversLicenseDataRequest {
  public struct Response : Swift.Hashable, Swift.Sendable {
    public let documentElements: ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements
    public static func == (a: ProximityReader.MobileDriversLicenseDataRequest.Response, b: ProximityReader.MobileDriversLicenseDataRequest.Response) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileDriversLicenseDataRequest.Response {
  public struct DocumentElements : Swift.Hashable, Swift.Sendable {
    public let nameComponents: Foundation.PersonNameComponents?
    public let portraitData: Foundation.Data?
    public let ageAtLeastElements: [Swift.Int : Swift.Bool]
    public let age: Swift.Int?
    public let dateOfBirth: Foundation.DateComponents?
    @available(iOS 17.2, *)
    public let sex: ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.Sex?
    public var address: Contacts.CNPostalAddress? {
      get
    }
    public let issuingAuthority: ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.IssuingAuthority?
    public let drivingPrivileges: [ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.DrivingPrivilege]
    public let aamvaDrivingPrivileges: [ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.AAMVADrivingPrivilege]
    public let documentNumber: Swift.String?
    public let documentIssueDate: Foundation.DateComponents?
    public let documentExpirationDate: Foundation.DateComponents?
    @available(iOS 17.2, *)
    public let documentDHSComplianceStatus: ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements.DHSComplianceStatus?
    public static func == (a: ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements, b: ProximityReader.MobileDriversLicenseDataRequest.Response.DocumentElements) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 16.4, macCatalyst 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.PaymentCardReadResult.ReadOutcome : Swift.Equatable {}
@available(iOS 16.4, macCatalyst 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.PaymentCardReadResult.ReadOutcome : Swift.Hashable {}
@available(iOS 18.4, macCatalyst 18.4, visionOS 2.4, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.PaymentCardReadResult.CardEffectiveState : Swift.Equatable {}
@available(iOS 18.4, macCatalyst 18.4, visionOS 2.4, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.PaymentCardReadResult.CardEffectiveState : Swift.Hashable {}
@available(iOS 18.4, macCatalyst 18.4, visionOS 2.4, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.PaymentCardReadResult.CardExpirationState : Swift.Equatable {}
@available(iOS 18.4, macCatalyst 18.4, visionOS 2.4, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.PaymentCardReadResult.CardExpirationState : Swift.Hashable {}
@available(iOS 15.4, macCatalyst 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.PaymentCardTransactionRequest.TransactionType : Swift.Equatable {}
@available(iOS 15.4, macCatalyst 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.PaymentCardTransactionRequest.TransactionType : Swift.Hashable {}
@available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.PaymentCardTransactionRequest.PaymentCycle : Swift.Equatable {}
@available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.PaymentCardTransactionRequest.PaymentCycle : Swift.Hashable {}
@available(iOS 15.4, macCatalyst 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.PaymentCardVerificationRequest.Reason : Swift.Equatable {}
@available(iOS 15.4, macCatalyst 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.PaymentCardVerificationRequest.Reason : Swift.Hashable {}
@available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.ProximityReaderDiscovery.Topic.Payment : Swift.Equatable {}
@available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.ProximityReaderDiscovery.Topic.Payment : Swift.Hashable {}
@available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.ProximityReaderDiscovery.ContentError : Swift.Equatable {}
@available(iOS 18.0, macCatalyst 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.ProximityReaderDiscovery.ContentError : Swift.Hashable {}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileDocumentReaderError : Swift.Equatable {}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.MobileDocumentReaderError : Swift.Hashable {}
@available(iOS 15.4, macCatalyst 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.VASReadResult.ReadEntry.Status : Swift.Equatable {}
@available(iOS 15.4, macCatalyst 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.VASReadResult.ReadEntry.Status : Swift.Hashable {}
@available(iOS 15.4, macCatalyst 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ProximityReader.VASReadResult.ReadEntry.Status : Swift.RawRepresentable {}
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(iOS, introduced: 15.4, deprecated: 16.0, message: "Use PaymentCardReader.Event")
@available(macCatalyst, introduced: 17.0, deprecated: 17.0, message: "Use PaymentCardReader.Event")
extension ProximityReader.PaymentCardReaderSession.Event : Swift.Equatable {}
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(iOS, introduced: 15.4, deprecated: 16.0, message: "Use PaymentCardReader.Event")
@available(macCatalyst, introduced: 17.0, deprecated: 17.0, message: "Use PaymentCardReader.Event")
extension ProximityReader.PaymentCardReaderSession.Event : Swift.Hashable {}
