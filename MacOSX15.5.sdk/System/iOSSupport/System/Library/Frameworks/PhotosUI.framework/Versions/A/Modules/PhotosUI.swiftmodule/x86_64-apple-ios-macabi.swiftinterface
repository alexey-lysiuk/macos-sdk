// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target x86_64-apple-ios18.5-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Osize -library-level api -enable-experimental-feature ObjCImplementation -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 760.6.150 -module-name PhotosUI
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import DeveloperToolsSupport
import Foundation
import Photos
@_exported import PhotosUI
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(iOS 17.0, macOS 14.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct PHPickerMode : Swift.Equatable, Swift.Hashable, Swift.Sendable {
  public static let `default`: PhotosUI.PHPickerMode
  @available(watchOS, unavailable)
  public static var compact: PhotosUI.PHPickerMode
  public static func == (a: PhotosUI.PHPickerMode, b: PhotosUI.PHPickerMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
public struct PHPickerFilter : Swift.Equatable, Swift.Hashable, @unchecked Swift.Sendable {
  public static let images: PhotosUI.PHPickerFilter
  @available(watchOS, unavailable)
  public static let videos: PhotosUI.PHPickerFilter
  @available(watchOS, unavailable)
  public static let livePhotos: PhotosUI.PHPickerFilter
  @available(iOS 16.0, *)
  @available(watchOS, unavailable)
  public static let depthEffectPhotos: PhotosUI.PHPickerFilter
  @available(iOS 16.0, *)
  @available(watchOS, unavailable)
  public static let bursts: PhotosUI.PHPickerFilter
  @available(iOS 15.0, *)
  @available(watchOS, unavailable)
  public static let panoramas: PhotosUI.PHPickerFilter
  @available(iOS 15.0, *)
  @available(watchOS, unavailable)
  public static let screenshots: PhotosUI.PHPickerFilter
  @available(iOS 15.0, *)
  @available(watchOS, unavailable)
  public static let screenRecordings: PhotosUI.PHPickerFilter
  @available(iOS 15.0, *)
  @available(watchOS, unavailable)
  public static let slomoVideos: PhotosUI.PHPickerFilter
  @available(iOS 15.0, *)
  @available(watchOS, unavailable)
  public static let timelapseVideos: PhotosUI.PHPickerFilter
  @available(iOS 16.0, *)
  @available(watchOS, unavailable)
  public static let cinematicVideos: PhotosUI.PHPickerFilter
  @available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
  @available(watchOS, unavailable)
  public static let spatialMedia: PhotosUI.PHPickerFilter
  @available(iOS 15.0, *)
  @available(watchOS, unavailable)
  public static func playbackStyle(_ playbackStyle: Photos.PHAsset.PlaybackStyle) -> PhotosUI.PHPickerFilter
  @available(watchOS, unavailable)
  public static func any(of subfilters: [PhotosUI.PHPickerFilter]) -> PhotosUI.PHPickerFilter
  @available(iOS 15.0, *)
  @available(watchOS, unavailable)
  public static func all(of subfilters: [PhotosUI.PHPickerFilter]) -> PhotosUI.PHPickerFilter
  @available(iOS 15.0, *)
  @available(watchOS, unavailable)
  public static func not(_ filter: PhotosUI.PHPickerFilter) -> PhotosUI.PHPickerFilter
  public static func == (a: PhotosUI.PHPickerFilter, b: PhotosUI.PHPickerFilter) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, macOS 13.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct PHPickerConfiguration : Swift.Equatable, Swift.Hashable, @unchecked Swift.Sendable {
  public enum AssetRepresentationMode : Swift.Sendable {
    case automatic
    case current
    case compatible
    public static func == (a: PhotosUI.PHPickerConfiguration.AssetRepresentationMode, b: PhotosUI.PHPickerConfiguration.AssetRepresentationMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(iOS 15.0, *)
  public enum Selection : Swift.Sendable {
    case `default`
    case ordered
    @available(iOS 17.0, macOS 14.0, *)
    @available(watchOS, unavailable)
    case continuous
    @available(iOS 17.0, macOS 14.0, *)
    @available(watchOS, unavailable)
    case continuousAndOrdered
    public static func == (a: PhotosUI.PHPickerConfiguration.Selection, b: PhotosUI.PHPickerConfiguration.Selection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(iOS 17.0, macOS 14.0, *)
  @available(watchOS, unavailable)
  public struct Update : Swift.Equatable, Swift.Hashable, Swift.Sendable {
    public var selectionLimit: Swift.Int?
    public var edgesWithoutContentMargins: UIKit.NSDirectionalRectEdge?
    public init()
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PhotosUI.PHPickerConfiguration.Update, b: PhotosUI.PHPickerConfiguration.Update) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public var preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode
  @available(iOS 15.0, *)
  public var selection: PhotosUI.PHPickerConfiguration.Selection {
    get
    set
  }
  public var selectionLimit: Swift.Int
  public var filter: PhotosUI.PHPickerFilter?
  @available(iOS 15.0, *)
  public var preselectedAssetIdentifiers: [Swift.String] {
    get
    set
  }
  @available(iOS 17.0, macOS 14.0, *)
  @available(watchOS, unavailable)
  public var mode: PhotosUI.PHPickerMode {
    get
    set
  }
  @available(iOS 17.0, macOS 14.0, *)
  @available(watchOS, unavailable)
  public var edgesWithoutContentMargins: UIKit.NSDirectionalRectEdge {
    get
    set
  }
  @available(iOS 17.0, macOS 14.0, *)
  @available(watchOS, unavailable)
  public var disabledCapabilities: PhotosUI.PHPickerCapabilities {
    get
    set
  }
  public init()
  public init(photoLibrary: Photos.PHPhotoLibrary)
  public static func == (a: PhotosUI.PHPickerConfiguration, b: PhotosUI.PHPickerConfiguration) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, macOS 13.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct PHPickerResult : Swift.Equatable, Swift.Hashable {
  public let itemProvider: Foundation.NSItemProvider
  public var assetIdentifier: Swift.String? {
    get
  }
  public static func == (a: PhotosUI.PHPickerResult, b: PhotosUI.PHPickerResult) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, macOS 13.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol PHPickerViewControllerDelegate : AnyObject {
  @_Concurrency.MainActor @preconcurrency func picker(_ picker: PhotosUI.PHPickerViewController, didFinishPicking results: [PhotosUI.PHPickerResult])
}
@available(iOS 14.0, macOS 13.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension PhotosUI.PHPickerViewController {
  @_Concurrency.MainActor @preconcurrency public var configuration: PhotosUI.PHPickerConfiguration {
    get
  }
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any PhotosUI.PHPickerViewControllerDelegate)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency convenience public init(configuration: PhotosUI.PHPickerConfiguration)
  @available(iOS 17.0, macOS 14.0, *)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func updatePicker(using configuration: PhotosUI.PHPickerConfiguration.Update)
}
@available(iOS 14.0, macOS 13.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension PhotosUI.PHPickerConfiguration.AssetRepresentationMode : Swift.Equatable {}
@available(iOS 14.0, macOS 13.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension PhotosUI.PHPickerConfiguration.AssetRepresentationMode : Swift.Hashable {}
@available(macOS 13.0, iOS 15.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension PhotosUI.PHPickerConfiguration.Selection : Swift.Equatable {}
@available(macOS 13.0, iOS 15.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension PhotosUI.PHPickerConfiguration.Selection : Swift.Hashable {}
