// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target x86_64-apple-ios18.5-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Osize -library-level api -target-min-inlining-version min -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 227.19 -module-name _AppIntents_UIKit
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
@_exported import AppIntents
import Foundation
import Swift
import SwiftUI
import UIKit
import _AppIntents_SwiftUI
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.DisplayRepresentation.Image {
  public init?(systemName name: Swift.String, tintColor: UIKit.UIColor? = nil, symbolConfiguration: UIKit.UIImage.SymbolConfiguration? = nil)
}
@objc @_hasMissingDesignatedInitializers @available(iOS 16.0, *)
@_Concurrency.MainActor @preconcurrency final public class ShortcutsUIButton : UIKit.UIButton {
  @_Concurrency.MainActor @preconcurrency final public var style: _AppIntents_SwiftUI.ShortcutsLinkStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public init(style: _AppIntents_SwiftUI.ShortcutsLinkStyle = .automatic)
  @_Concurrency.MainActor @preconcurrency @objc override final public func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency @objc override final public func addTarget(_ target: Any?, action: ObjectiveC.Selector, for controlEvents: UIKit.UIControl.Event)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(iOS 16.0, *)
@available(macCatalyst, unavailable)
@_Concurrency.MainActor @preconcurrency final public class SiriTipUIView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency final public var style: _AppIntents_SwiftUI.SiriTipViewStyle {
    get
    set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic final public var isPresented: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency final public var allowsDismissal: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public init(style: _AppIntents_SwiftUI.SiriTipViewStyle = .automatic)
  @_Concurrency.MainActor @preconcurrency @objc override final public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency @objc override final public func didMoveToWindow()
  @_Concurrency.MainActor @preconcurrency final public func setIntent<Intent>(intent: Intent) where Intent : AppIntents.AppIntent
  @objc deinit
}
