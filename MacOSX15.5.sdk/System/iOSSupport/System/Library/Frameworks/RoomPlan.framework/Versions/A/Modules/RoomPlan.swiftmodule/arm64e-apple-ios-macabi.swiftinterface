// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64e-apple-ios17.0-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 2.15 -module-name RoomPlan
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import ARKit
import CoreGraphics
import CoreVideo
import CryptoKit
import Foundation
import ModelIO
import OSLog
import QuartzCore
@_exported import RoomPlan
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
import simd
@available(iOS 17.0, *)
extension RoomPlan.CapturedRoom {
  public struct ModelProvider {
    public enum Error : Foundation.LocalizedError {
      case attributeCombinationNotSupported
      case nonExistingFile(url: Foundation.URL)
      public var errorDescription: Swift.String? {
        get
      }
    }
    public var modelFileURLs: [Foundation.URL] {
      get
    }
    public init()
    public func modelFileURL(for object: RoomPlan.CapturedRoom.Object) throws -> Foundation.URL?
    public func modelFileURL(for attributes: [any RoomPlan.CapturedRoomAttribute]) throws -> Foundation.URL?
    public func modelFileURL(for category: RoomPlan.CapturedRoom.Object.Category) throws -> Foundation.URL?
    public mutating func setModelFileURL(_ url: Foundation.URL?, for attributes: [any RoomPlan.CapturedRoomAttribute]) throws
    public mutating func setModelFileURL(_ url: Foundation.URL?, for category: RoomPlan.CapturedRoom.Object.Category) throws
  }
}
@available(iOS 17.0, *)
extension RoomPlan.CapturedRoom.Object.Category {
  public var supportedCombinations: [[any RoomPlan.CapturedRoomAttribute]] {
    get
  }
  public func supportsCombination(_ attributes: [any RoomPlan.CapturedRoomAttribute]) -> Swift.Bool
}
@available(iOS 16.0, *)
@available(visionOS, deprecated: 1.0)
public class RoomCaptureSession {
  @available(iOS 16.0, *)
  public init()
  @available(iOS 17.0, *)
  @_disfavoredOverload public init(arSession: ARKit.ARSession? = nil)
  public func run(configuration: RoomPlan.RoomCaptureSession.Configuration)
  public func stop()
  @available(iOS 17.0, *)
  @_disfavoredOverload public func stop(pauseARSession: Swift.Bool = true)
  public struct Configuration {
    public var isCoachingEnabled: Swift.Bool
    public init()
  }
  public enum CaptureError : Foundation.LocalizedError {
    case exceedSceneSizeLimit
    case worldTrackingFailure
    case invalidARConfiguration
    case deviceTooHot
    case deviceNotSupported
    case internalError
    public var errorDescription: Swift.String? {
      get
    }
    public static func == (a: RoomPlan.RoomCaptureSession.CaptureError, b: RoomPlan.RoomCaptureSession.CaptureError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Instruction {
    case moveCloseToWall
    case moveAwayFromWall
    case slowDown
    case turnOnLight
    case normal
    case lowTexture
    public static func == (a: RoomPlan.RoomCaptureSession.Instruction, b: RoomPlan.RoomCaptureSession.Instruction) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  weak public var delegate: (any RoomPlan.RoomCaptureSessionDelegate)?
  public var arSession: ARKit.ARSession
  public static var isSupported: Swift.Bool {
    get
  }
  @objc deinit
}
@available(iOS 16.0, *)
@available(visionOS, deprecated: 1.0)
public protocol RoomCaptureSessionDelegate : AnyObject {
  func captureSession(_ session: RoomPlan.RoomCaptureSession, didUpdate room: RoomPlan.CapturedRoom)
  func captureSession(_ session: RoomPlan.RoomCaptureSession, didAdd room: RoomPlan.CapturedRoom)
  func captureSession(_ session: RoomPlan.RoomCaptureSession, didChange room: RoomPlan.CapturedRoom)
  func captureSession(_ session: RoomPlan.RoomCaptureSession, didRemove room: RoomPlan.CapturedRoom)
  func captureSession(_ session: RoomPlan.RoomCaptureSession, didProvide instruction: RoomPlan.RoomCaptureSession.Instruction)
  func captureSession(_ session: RoomPlan.RoomCaptureSession, didStartWith configuration: RoomPlan.RoomCaptureSession.Configuration)
  func captureSession(_ session: RoomPlan.RoomCaptureSession, didEndWith data: RoomPlan.CapturedRoomData, error: (any Swift.Error)?)
}
@available(iOS 16.0, *)
@available(visionOS, deprecated: 1.0)
extension RoomPlan.RoomCaptureSessionDelegate {
  public func captureSession(_ session: RoomPlan.RoomCaptureSession, didUpdate room: RoomPlan.CapturedRoom)
  public func captureSession(_ session: RoomPlan.RoomCaptureSession, didAdd room: RoomPlan.CapturedRoom)
  public func captureSession(_ session: RoomPlan.RoomCaptureSession, didChange room: RoomPlan.CapturedRoom)
  public func captureSession(_ session: RoomPlan.RoomCaptureSession, didRemove room: RoomPlan.CapturedRoom)
  public func captureSession(_ session: RoomPlan.RoomCaptureSession, didProvide instruction: RoomPlan.RoomCaptureSession.Instruction)
  public func captureSession(_ session: RoomPlan.RoomCaptureSession, didStartWith configuration: RoomPlan.RoomCaptureSession.Configuration)
  public func captureSession(_ session: RoomPlan.RoomCaptureSession, didEndWith data: RoomPlan.CapturedRoomData, error: (any Swift.Error)?)
}
@available(iOS 16.0, *)
@available(visionOS, deprecated: 1.0)
public class RoomBuilder {
  public init(options: RoomPlan.RoomBuilder.ConfigurationOptions)
  public func capturedRoom(from capturedRoomData: RoomPlan.CapturedRoomData) async throws -> RoomPlan.CapturedRoom
  public struct ConfigurationOptions : Swift.OptionSet {
    public let rawValue: Swift.Int
    public static let beautifyObjects: RoomPlan.RoomBuilder.ConfigurationOptions
    public init(rawValue: Swift.Int)
    @available(iOS 16.0, *)
    @available(visionOS, deprecated: 1.0)
    public typealias ArrayLiteralElement = RoomPlan.RoomBuilder.ConfigurationOptions
    @available(iOS 16.0, *)
    @available(visionOS, deprecated: 1.0)
    public typealias Element = RoomPlan.RoomBuilder.ConfigurationOptions
    @available(iOS 16.0, *)
    @available(visionOS, deprecated: 1.0)
    public typealias RawValue = Swift.Int
  }
  public enum BuildError : Foundation.LocalizedError {
    case insufficientInput
    case invalidInput
    case exceedSceneSizeLimit
    case deviceNotSupported
    case internalError
    public var errorDescription: Swift.String? {
      get
    }
    public static func == (a: RoomPlan.RoomBuilder.BuildError, b: RoomPlan.RoomBuilder.BuildError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
@available(iOS 16.0, *)
public struct CapturedRoomData : Swift.Codable, Swift.Sendable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @available(iOS 16.0, *)
@available(visionOS, deprecated: 1.0)
@_Concurrency.MainActor @preconcurrency public class RoomCaptureView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var captureSession: RoomPlan.RoomCaptureSession! {
    get
  }
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any RoomPlan.RoomCaptureViewDelegate)?
  @_Concurrency.MainActor @preconcurrency public var isModelEnabled: Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @available(iOS 17.0, *)
  @_Concurrency.MainActor @preconcurrency public init(frame: CoreFoundation.CGRect, arSession: ARKit.ARSession)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@available(iOS 16.0, *)
@available(visionOS, deprecated: 1.0)
public protocol RoomCaptureViewDelegate : Foundation.NSCoding {
  func captureView(shouldPresent roomDataForProcessing: RoomPlan.CapturedRoomData, error: (any Swift.Error)?) -> Swift.Bool
  func captureView(didPresent processedResult: RoomPlan.CapturedRoom, error: (any Swift.Error)?)
}
@available(iOS 16.0, *)
@available(visionOS, deprecated: 1.0)
extension RoomPlan.RoomCaptureViewDelegate {
  public func captureView(shouldPresent roomDataForProcessing: RoomPlan.CapturedRoomData, error: (any Swift.Error)?) -> Swift.Bool
  public func captureView(didPresent processedResult: RoomPlan.CapturedRoom, error: (any Swift.Error)?)
}
@available(iOS 17.0, *)
@available(visionOS, deprecated: 1.0)
public class StructureBuilder {
  public typealias ConfigurationOptions = RoomPlan.RoomBuilder.ConfigurationOptions
  public init(options: RoomPlan.StructureBuilder.ConfigurationOptions)
  public func capturedStructure(from rooms: [RoomPlan.CapturedRoom]) async throws -> RoomPlan.CapturedStructure
  public enum BuildError : Foundation.LocalizedError {
    case insufficientInput
    case invalidInput
    case invalidRoomLocation
    case exceedSceneSizeLimit
    case deviceNotSupported
    case internalError
    public var errorDescription: Swift.String? {
      get
    }
    public static func == (a: RoomPlan.StructureBuilder.BuildError, b: RoomPlan.StructureBuilder.BuildError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
@available(iOS 17.0, *)
public struct CapturedStructure : Swift.Codable, Swift.Sendable {
  public var rooms: [RoomPlan.CapturedRoom] {
    get
  }
  public typealias Surface = RoomPlan.CapturedRoom.Surface
  public typealias Object = RoomPlan.CapturedRoom.Object
  public typealias USDExportOptions = RoomPlan.CapturedRoom.USDExportOptions
  public typealias Section = RoomPlan.CapturedRoom.Section
  public typealias ModelProvider = RoomPlan.CapturedRoom.ModelProvider
  public typealias Error = RoomPlan.CapturedRoom.Error
  public var walls: [RoomPlan.CapturedStructure.Surface] {
    get
  }
  public var doors: [RoomPlan.CapturedStructure.Surface] {
    get
  }
  public var windows: [RoomPlan.CapturedStructure.Surface] {
    get
  }
  public var openings: [RoomPlan.CapturedStructure.Surface] {
    get
  }
  public var objects: [RoomPlan.CapturedStructure.Object] {
    get
  }
  public var floors: [RoomPlan.CapturedStructure.Surface] {
    get
  }
  public var sections: [RoomPlan.CapturedStructure.Section] {
    get
  }
  public var identifier: Foundation.UUID {
    get
  }
  public var version: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func export(to url: Foundation.URL, metadataURL: Foundation.URL? = nil, modelProvider: RoomPlan.CapturedStructure.ModelProvider? = nil, exportOptions: RoomPlan.CapturedStructure.USDExportOptions = .mesh) throws
}
@available(iOS 16.0, *)
public struct CapturedRoom : Swift.Codable, Swift.Sendable {
  public var walls: [RoomPlan.CapturedRoom.Surface] {
    get
  }
  public var doors: [RoomPlan.CapturedRoom.Surface] {
    get
  }
  public var windows: [RoomPlan.CapturedRoom.Surface] {
    get
  }
  public var openings: [RoomPlan.CapturedRoom.Surface] {
    get
  }
  @available(iOS 17.0, *)
  public var floors: [RoomPlan.CapturedRoom.Surface] {
    get
  }
  public var objects: [RoomPlan.CapturedRoom.Object] {
    get
  }
  public var identifier: Foundation.UUID {
    get
  }
  @available(iOS 17.0, *)
  public var sections: [RoomPlan.CapturedRoom.Section] {
    get
  }
  @available(iOS 17.0, *)
  public var story: Swift.Int {
    get
  }
  @available(iOS 17.0, *)
  public var version: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @available(iOS 16.0, *)
  public func export(to url: Foundation.URL, exportOptions: RoomPlan.CapturedRoom.USDExportOptions = .mesh) throws
  @available(iOS 17.0, *)
  @_disfavoredOverload public func export(to url: Foundation.URL, metadataURL: Foundation.URL? = nil, modelProvider: RoomPlan.CapturedRoom.ModelProvider? = nil, exportOptions: RoomPlan.CapturedRoom.USDExportOptions = .mesh) throws
  public enum Error : Foundation.LocalizedError {
    case urlInvalidScheme
    case urlInvalidFilePath
    case urlMissingFileExtension
    case urlInvalidFileExtension
    case deviceNotSupported
    public var errorDescription: Swift.String? {
      get
    }
    public static func == (a: RoomPlan.CapturedRoom.Error, b: RoomPlan.CapturedRoom.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Confidence : Swift.Codable, Swift.Sendable {
    case high
    case medium
    case low
    public static func == (a: RoomPlan.CapturedRoom.Confidence, b: RoomPlan.CapturedRoom.Confidence) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  @available(iOS 17.0, *)
  public struct Section : Swift.Codable, Swift.Sendable {
    public var label: RoomPlan.CapturedRoom.Section.Label {
      get
    }
    public enum Label : Swift.String, Swift.Codable, Swift.Sendable {
      case livingRoom
      case bedroom
      case bathroom
      case kitchen
      case diningRoom
      case unidentified
      public init?(rawValue: Swift.String)
      @available(iOS 17.0, *)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var center: simd.simd_float3 {
      get
    }
    @available(iOS 17.0, *)
    public var story: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
    public func encode(to encoder: any Swift.Encoder) throws
  }
  public struct Surface : Swift.Codable, Swift.Sendable {
    public var category: RoomPlan.CapturedRoom.Surface.Category {
      get
    }
    public var confidence: RoomPlan.CapturedRoom.Confidence {
      get
    }
    public var completedEdges: Swift.Set<RoomPlan.CapturedRoom.Surface.Edge> {
      get
    }
    public var dimensions: simd.simd_float3 {
      get
    }
    public var transform: simd.simd_float4x4 {
      get
    }
    public var identifier: Foundation.UUID {
      get
    }
    @available(iOS 17.0, *)
    public var story: Swift.Int {
      get
    }
    public var curve: RoomPlan.CapturedRoom.Surface.Curve? {
      get
    }
    @available(iOS 17.0, *)
    public var parentIdentifier: Foundation.UUID? {
      get
    }
    @available(iOS 17.0, *)
    public var polygonCorners: [simd.simd_float3] {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
    public func encode(to encoder: any Swift.Encoder) throws
    public enum Category : Swift.Codable, Swift.Sendable, Swift.Equatable, Swift.Hashable {
      case wall
      case opening
      case window
      case door(isOpen: Swift.Bool)
      @available(iOS 17.0, *)
      case floor
      public static func == (a: RoomPlan.CapturedRoom.Surface.Category, b: RoomPlan.CapturedRoom.Surface.Category) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Curve : Swift.Codable, Swift.Sendable {
      @available(iOS 17.0, *)
      public var center: simd.simd_float2 {
        get
      }
      public var radius: Swift.Float {
        get
      }
      public var startAngle: Foundation.Measurement<Foundation.UnitAngle> {
        get
      }
      public var endAngle: Foundation.Measurement<Foundation.UnitAngle> {
        get
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public enum Edge : Swift.CaseIterable, Swift.Codable, Swift.Sendable {
      case top
      case right
      case bottom
      case left
      public static func == (a: RoomPlan.CapturedRoom.Surface.Edge, b: RoomPlan.CapturedRoom.Surface.Edge) -> Swift.Bool
      @available(iOS 16.0, *)
      public typealias AllCases = [RoomPlan.CapturedRoom.Surface.Edge]
      nonisolated public static var allCases: [RoomPlan.CapturedRoom.Surface.Edge] {
        get
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
  }
  public struct Object : Swift.Codable, Swift.Sendable {
    public var category: RoomPlan.CapturedRoom.Object.Category {
      get
    }
    public var confidence: RoomPlan.CapturedRoom.Confidence {
      get
    }
    public var dimensions: simd.simd_float3 {
      get
    }
    public var transform: simd.simd_float4x4 {
      get
    }
    public var identifier: Foundation.UUID {
      get
    }
    @available(iOS 17.0, *)
    public var attributes: [any RoomPlan.CapturedRoomAttribute] {
      get
    }
    @available(iOS 17.0, *)
    public var story: Swift.Int {
      get
    }
    @available(iOS 17.0, *)
    public var parentIdentifier: Foundation.UUID? {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
    public func encode(to encoder: any Swift.Encoder) throws
    public enum Category : Swift.Codable, Swift.Sendable, Swift.CaseIterable {
      case storage
      case refrigerator
      case stove
      case bed
      case sink
      case washerDryer
      case toilet
      case bathtub
      case oven
      case dishwasher
      case table
      case sofa
      case chair
      case fireplace
      case television
      case stairs
      @available(iOS 17.0, *)
      public var supportedAttributeTypes: [any RoomPlan.CapturedRoomAttribute.Type] {
        get
      }
      public static func == (a: RoomPlan.CapturedRoom.Object.Category, b: RoomPlan.CapturedRoom.Object.Category) -> Swift.Bool
      @available(iOS 16.0, *)
      public typealias AllCases = [RoomPlan.CapturedRoom.Object.Category]
      nonisolated public static var allCases: [RoomPlan.CapturedRoom.Object.Category] {
        get
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @available(iOS 17.0, *)
    public func attribute<T>(of attributeType: T.Type) -> T? where T : RoomPlan.CapturedRoomAttribute
  }
  public struct USDExportOptions : Swift.OptionSet {
    public let rawValue: Swift.Int32
    public init(rawValue: Swift.Int32)
    public static let parametric: RoomPlan.CapturedRoom.USDExportOptions
    public static let mesh: RoomPlan.CapturedRoom.USDExportOptions
    public static let model: RoomPlan.CapturedRoom.USDExportOptions
    @available(iOS 16.0, *)
    public typealias ArrayLiteralElement = RoomPlan.CapturedRoom.USDExportOptions
    @available(iOS 16.0, *)
    public typealias Element = RoomPlan.CapturedRoom.USDExportOptions
    @available(iOS 16.0, *)
    public typealias RawValue = Swift.Int32
  }
}
@available(iOS 17.0, *)
public enum CapturedElementCategory : Swift.Sendable, Swift.Codable, Swift.Equatable {
  case surface(RoomPlan.CapturedRoom.Surface.Category)
  case object(RoomPlan.CapturedRoom.Object.Category)
  public static func == (a: RoomPlan.CapturedElementCategory, b: RoomPlan.CapturedElementCategory) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 17.0, *)
public protocol CapturedRoomAttribute : Swift.CaseIterable, Swift.RawRepresentable, Swift.Sendable where Self.RawValue == Swift.String {
  static var parentCategory: RoomPlan.CapturedElementCategory? { get }
  var shortIdentifier: Swift.String { get }
}
@available(iOS 17.0, *)
extension RoomPlan.CapturedRoom {
  public struct AttributesCodableRepresentation : Swift.Codable {
    public let attributes: [any RoomPlan.CapturedRoomAttribute]
    public init(attributes: [any RoomPlan.CapturedRoomAttribute])
    public init(from decoder: any Swift.Decoder) throws
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
@available(iOS 17.0, *)
public enum ChairType : Swift.String, RoomPlan.CapturedRoomAttribute {
  public static var parentCategory: RoomPlan.CapturedElementCategory? {
    get
  }
  case dining
  case stool
  case swivel
  case unidentified
  public var shortIdentifier: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  @available(iOS 17.0, *)
  public typealias AllCases = [RoomPlan.ChairType]
  @available(iOS 17.0, *)
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [RoomPlan.ChairType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 17.0, *)
public enum ChairLegType : Swift.String, RoomPlan.CapturedRoomAttribute {
  public static var parentCategory: RoomPlan.CapturedElementCategory? {
    get
  }
  case four
  case star
  case unidentified
  public var shortIdentifier: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  @available(iOS 17.0, *)
  public typealias AllCases = [RoomPlan.ChairLegType]
  @available(iOS 17.0, *)
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [RoomPlan.ChairLegType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 17.0, *)
public enum ChairArmType : Swift.String, RoomPlan.CapturedRoomAttribute {
  public static var parentCategory: RoomPlan.CapturedElementCategory? {
    get
  }
  case existing
  case missing
  public var shortIdentifier: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  @available(iOS 17.0, *)
  public typealias AllCases = [RoomPlan.ChairArmType]
  @available(iOS 17.0, *)
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [RoomPlan.ChairArmType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 17.0, *)
public enum ChairBackType : Swift.String, RoomPlan.CapturedRoomAttribute {
  public static var parentCategory: RoomPlan.CapturedElementCategory? {
    get
  }
  case existing
  case missing
  public var shortIdentifier: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  @available(iOS 17.0, *)
  public typealias AllCases = [RoomPlan.ChairBackType]
  @available(iOS 17.0, *)
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [RoomPlan.ChairBackType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 17.0, *)
public enum SofaType : Swift.String, RoomPlan.CapturedRoomAttribute {
  public static var parentCategory: RoomPlan.CapturedElementCategory? {
    get
  }
  case rectangular
  case lShaped
  case lShapedExtension
  case singleSeat
  case unidentified
  public var shortIdentifier: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  @available(iOS 17.0, *)
  public typealias AllCases = [RoomPlan.SofaType]
  @available(iOS 17.0, *)
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [RoomPlan.SofaType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 17.0, *)
public enum TableType : Swift.String, RoomPlan.CapturedRoomAttribute {
  public static var parentCategory: RoomPlan.CapturedElementCategory? {
    get
  }
  case coffee
  case dining
  case unidentified
  public var shortIdentifier: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  @available(iOS 17.0, *)
  public typealias AllCases = [RoomPlan.TableType]
  @available(iOS 17.0, *)
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [RoomPlan.TableType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 17.0, *)
public enum TableShapeType : Swift.String, RoomPlan.CapturedRoomAttribute {
  public static var parentCategory: RoomPlan.CapturedElementCategory? {
    get
  }
  case rectangular
  case circularElliptic
  case lShaped
  case unidentified
  public var shortIdentifier: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  @available(iOS 17.0, *)
  public typealias AllCases = [RoomPlan.TableShapeType]
  @available(iOS 17.0, *)
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [RoomPlan.TableShapeType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 17.0, *)
public enum StorageType : Swift.String, RoomPlan.CapturedRoomAttribute {
  public static var parentCategory: RoomPlan.CapturedElementCategory? {
    get
  }
  case cabinet
  case shelf
  public var shortIdentifier: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  @available(iOS 17.0, *)
  public typealias AllCases = [RoomPlan.StorageType]
  @available(iOS 17.0, *)
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [RoomPlan.StorageType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 16.0, *)
extension RoomPlan.CapturedRoom.Object.Category : Swift.Equatable {}
@available(iOS 16.0, *)
extension RoomPlan.CapturedRoom.Object.Category : Swift.Hashable {}
@available(iOS 16.0, *)
@available(visionOS, deprecated: 1.0)
extension RoomPlan.RoomCaptureSession.CaptureError : Swift.Equatable {}
@available(iOS 16.0, *)
@available(visionOS, deprecated: 1.0)
extension RoomPlan.RoomCaptureSession.CaptureError : Swift.Hashable {}
@available(iOS 16.0, *)
@available(visionOS, deprecated: 1.0)
extension RoomPlan.RoomCaptureSession.Instruction : Swift.Equatable {}
@available(iOS 16.0, *)
@available(visionOS, deprecated: 1.0)
extension RoomPlan.RoomCaptureSession.Instruction : Swift.Hashable {}
@available(iOS 16.0, *)
@available(visionOS, deprecated: 1.0)
extension RoomPlan.RoomBuilder.BuildError : Swift.Equatable {}
@available(iOS 16.0, *)
@available(visionOS, deprecated: 1.0)
extension RoomPlan.RoomBuilder.BuildError : Swift.Hashable {}
@available(iOS 17.0, *)
@available(visionOS, deprecated: 1.0)
extension RoomPlan.StructureBuilder.BuildError : Swift.Equatable {}
@available(iOS 17.0, *)
@available(visionOS, deprecated: 1.0)
extension RoomPlan.StructureBuilder.BuildError : Swift.Hashable {}
@available(iOS 16.0, *)
extension RoomPlan.CapturedRoom.Error : Swift.Equatable {}
@available(iOS 16.0, *)
extension RoomPlan.CapturedRoom.Error : Swift.Hashable {}
@available(iOS 16.0, *)
extension RoomPlan.CapturedRoom.Confidence : Swift.Equatable {}
@available(iOS 16.0, *)
extension RoomPlan.CapturedRoom.Confidence : Swift.Hashable {}
@available(iOS 17.0, *)
extension RoomPlan.CapturedRoom.Section.Label : Swift.Equatable {}
@available(iOS 17.0, *)
extension RoomPlan.CapturedRoom.Section.Label : Swift.Hashable {}
@available(iOS 17.0, *)
extension RoomPlan.CapturedRoom.Section.Label : Swift.RawRepresentable {}
@available(iOS 16.0, *)
extension RoomPlan.CapturedRoom.Surface.Edge : Swift.Equatable {}
@available(iOS 16.0, *)
extension RoomPlan.CapturedRoom.Surface.Edge : Swift.Hashable {}
@available(iOS 17.0, *)
extension RoomPlan.ChairType : Swift.Equatable {}
@available(iOS 17.0, *)
extension RoomPlan.ChairType : Swift.Hashable {}
@available(iOS 17.0, *)
extension RoomPlan.ChairLegType : Swift.Equatable {}
@available(iOS 17.0, *)
extension RoomPlan.ChairLegType : Swift.Hashable {}
@available(iOS 17.0, *)
extension RoomPlan.ChairArmType : Swift.Equatable {}
@available(iOS 17.0, *)
extension RoomPlan.ChairArmType : Swift.Hashable {}
@available(iOS 17.0, *)
extension RoomPlan.ChairBackType : Swift.Equatable {}
@available(iOS 17.0, *)
extension RoomPlan.ChairBackType : Swift.Hashable {}
@available(iOS 17.0, *)
extension RoomPlan.SofaType : Swift.Equatable {}
@available(iOS 17.0, *)
extension RoomPlan.SofaType : Swift.Hashable {}
@available(iOS 17.0, *)
extension RoomPlan.TableType : Swift.Equatable {}
@available(iOS 17.0, *)
extension RoomPlan.TableType : Swift.Hashable {}
@available(iOS 17.0, *)
extension RoomPlan.TableShapeType : Swift.Equatable {}
@available(iOS 17.0, *)
extension RoomPlan.TableShapeType : Swift.Hashable {}
@available(iOS 17.0, *)
extension RoomPlan.StorageType : Swift.Equatable {}
@available(iOS 17.0, *)
extension RoomPlan.StorageType : Swift.Hashable {}
