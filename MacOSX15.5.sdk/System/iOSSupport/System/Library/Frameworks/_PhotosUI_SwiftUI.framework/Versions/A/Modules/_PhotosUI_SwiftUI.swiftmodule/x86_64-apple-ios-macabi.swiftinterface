// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target x86_64-apple-ios18.5-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Osize -library-level api -enable-experimental-feature ObjCImplementation -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 760.6.150 -module-name _PhotosUI_SwiftUI
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import CoreTransferable
@_exported import PhotosUI
import Swift
import SwiftUI
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(iOS 16.0, macOS 13.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Photos.PHLivePhoto : @retroactive CoreTransferable.Transferable {
  public static var transferRepresentation: some CoreTransferable.TransferRepresentation {
    get
  }
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Representation = @_opaqueReturnTypeOf("$sSo11PHLivePhotoC015_PhotosUI_SwiftD0E22transferRepresentationQrvpZ", 0) __
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
public struct PhotosPickerSelectionBehavior : Swift.Equatable, Swift.Hashable, Swift.Sendable {
  public static let `default`: _PhotosUI_SwiftUI.PhotosPickerSelectionBehavior
  public static let ordered: _PhotosUI_SwiftUI.PhotosPickerSelectionBehavior
  @available(iOS 17.0, macOS 14.0, *)
  @available(watchOS, unavailable)
  public static let continuous: _PhotosUI_SwiftUI.PhotosPickerSelectionBehavior
  @available(iOS 17.0, macOS 14.0, *)
  @available(watchOS, unavailable)
  public static let continuousAndOrdered: _PhotosUI_SwiftUI.PhotosPickerSelectionBehavior
  public static func == (a: _PhotosUI_SwiftUI.PhotosPickerSelectionBehavior, b: _PhotosUI_SwiftUI.PhotosPickerSelectionBehavior) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macOS 14.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct PhotosPickerStyle : Swift.Equatable, Swift.Hashable, Swift.Sendable {
  public static let presentation: _PhotosUI_SwiftUI.PhotosPickerStyle
  public static let inline: _PhotosUI_SwiftUI.PhotosPickerStyle
  public static let compact: _PhotosUI_SwiftUI.PhotosPickerStyle
  public static func == (a: _PhotosUI_SwiftUI.PhotosPickerStyle, b: _PhotosUI_SwiftUI.PhotosPickerStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
public struct PhotosPickerItem : Swift.Equatable, Swift.Hashable, @unchecked Swift.Sendable {
  public struct EncodingDisambiguationPolicy : Swift.Equatable, Swift.Hashable, Swift.Sendable {
    public static let automatic: _PhotosUI_SwiftUI.PhotosPickerItem.EncodingDisambiguationPolicy
    public static let current: _PhotosUI_SwiftUI.PhotosPickerItem.EncodingDisambiguationPolicy
    public static let compatible: _PhotosUI_SwiftUI.PhotosPickerItem.EncodingDisambiguationPolicy
    public static func == (a: _PhotosUI_SwiftUI.PhotosPickerItem.EncodingDisambiguationPolicy, b: _PhotosUI_SwiftUI.PhotosPickerItem.EncodingDisambiguationPolicy) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(watchOS, unavailable)
  public var itemIdentifier: Swift.String? {
    get
  }
  public var supportedContentTypes: [UniformTypeIdentifiers.UTType] {
    get
  }
  @discardableResult
  @preconcurrency public func loadTransferable<T>(type: T.Type, completionHandler: @escaping @Sendable (Swift.Result<T?, any Swift.Error>) -> Swift.Void) -> Foundation.Progress where T : CoreTransferable.Transferable
  #if compiler(>=5.3) && $SendingArgsAndResults
  public func loadTransferable<T>(type: T.Type) async throws -> sending T? where T : CoreTransferable.Transferable
  #else
  public func loadTransferable<T>(type: T.Type) async throws -> T? where T : CoreTransferable.Transferable
  #endif
  @available(watchOS, unavailable)
  public init(itemIdentifier: Swift.String)
  public static func == (a: _PhotosUI_SwiftUI.PhotosPickerItem, b: _PhotosUI_SwiftUI.PhotosPickerItem) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct PhotosPicker<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  @preconcurrency nonisolated public init(selection: SwiftUICore.Binding<_PhotosUI_SwiftUI.PhotosPickerItem?>, matching filter: PhotosUI.PHPickerFilter? = nil, preferredItemEncoding: _PhotosUI_SwiftUI.PhotosPickerItem.EncodingDisambiguationPolicy = .automatic, @SwiftUICore.ViewBuilder label: @Sendable () -> Label)
  @preconcurrency nonisolated public init(selection: SwiftUICore.Binding<[_PhotosUI_SwiftUI.PhotosPickerItem]>, maxSelectionCount: Swift.Int? = nil, selectionBehavior: _PhotosUI_SwiftUI.PhotosPickerSelectionBehavior = .default, matching filter: PhotosUI.PHPickerFilter? = nil, preferredItemEncoding: _PhotosUI_SwiftUI.PhotosPickerItem.EncodingDisambiguationPolicy = .automatic, @SwiftUICore.ViewBuilder label: @Sendable () -> Label)
  @available(watchOS, unavailable)
  @preconcurrency nonisolated public init(selection: SwiftUICore.Binding<_PhotosUI_SwiftUI.PhotosPickerItem?>, matching filter: PhotosUI.PHPickerFilter? = nil, preferredItemEncoding: _PhotosUI_SwiftUI.PhotosPickerItem.EncodingDisambiguationPolicy = .automatic, photoLibrary: Photos.PHPhotoLibrary, @SwiftUICore.ViewBuilder label: @Sendable () -> Label)
  @available(watchOS, unavailable)
  @preconcurrency nonisolated public init(selection: SwiftUICore.Binding<[_PhotosUI_SwiftUI.PhotosPickerItem]>, maxSelectionCount: Swift.Int? = nil, selectionBehavior: _PhotosUI_SwiftUI.PhotosPickerSelectionBehavior = .default, matching filter: PhotosUI.PHPickerFilter? = nil, preferredItemEncoding: _PhotosUI_SwiftUI.PhotosPickerItem.EncodingDisambiguationPolicy = .automatic, photoLibrary: Photos.PHPhotoLibrary, @SwiftUICore.ViewBuilder label: @Sendable () -> Label)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, watchOS 9.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s015_PhotosUI_SwiftB00A6PickerV4bodyQrvp", 0) __<Label>
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension _PhotosUI_SwiftUI.PhotosPicker where Label == SwiftUICore.Text {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<_PhotosUI_SwiftUI.PhotosPickerItem?>, matching filter: PhotosUI.PHPickerFilter? = nil, preferredItemEncoding: _PhotosUI_SwiftUI.PhotosPickerItem.EncodingDisambiguationPolicy = .automatic)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, selection: SwiftUICore.Binding<_PhotosUI_SwiftUI.PhotosPickerItem?>, matching filter: PhotosUI.PHPickerFilter? = nil, preferredItemEncoding: _PhotosUI_SwiftUI.PhotosPickerItem.EncodingDisambiguationPolicy = .automatic) where S : Swift.StringProtocol
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<[_PhotosUI_SwiftUI.PhotosPickerItem]>, maxSelectionCount: Swift.Int? = nil, selectionBehavior: _PhotosUI_SwiftUI.PhotosPickerSelectionBehavior = .default, matching filter: PhotosUI.PHPickerFilter? = nil, preferredItemEncoding: _PhotosUI_SwiftUI.PhotosPickerItem.EncodingDisambiguationPolicy = .automatic)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, selection: SwiftUICore.Binding<[_PhotosUI_SwiftUI.PhotosPickerItem]>, maxSelectionCount: Swift.Int? = nil, selectionBehavior: _PhotosUI_SwiftUI.PhotosPickerSelectionBehavior = .default, matching filter: PhotosUI.PHPickerFilter? = nil, preferredItemEncoding: _PhotosUI_SwiftUI.PhotosPickerItem.EncodingDisambiguationPolicy = .automatic) where S : Swift.StringProtocol
  @available(watchOS, unavailable)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<_PhotosUI_SwiftUI.PhotosPickerItem?>, matching filter: PhotosUI.PHPickerFilter? = nil, preferredItemEncoding: _PhotosUI_SwiftUI.PhotosPickerItem.EncodingDisambiguationPolicy = .automatic, photoLibrary: Photos.PHPhotoLibrary)
  @available(watchOS, unavailable)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, selection: SwiftUICore.Binding<_PhotosUI_SwiftUI.PhotosPickerItem?>, matching filter: PhotosUI.PHPickerFilter? = nil, preferredItemEncoding: _PhotosUI_SwiftUI.PhotosPickerItem.EncodingDisambiguationPolicy = .automatic, photoLibrary: Photos.PHPhotoLibrary) where S : Swift.StringProtocol
  @available(watchOS, unavailable)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<[_PhotosUI_SwiftUI.PhotosPickerItem]>, maxSelectionCount: Swift.Int? = nil, selectionBehavior: _PhotosUI_SwiftUI.PhotosPickerSelectionBehavior = .default, matching filter: PhotosUI.PHPickerFilter? = nil, preferredItemEncoding: _PhotosUI_SwiftUI.PhotosPickerItem.EncodingDisambiguationPolicy = .automatic, photoLibrary: Photos.PHPhotoLibrary)
  @available(watchOS, unavailable)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, selection: SwiftUICore.Binding<[_PhotosUI_SwiftUI.PhotosPickerItem]>, maxSelectionCount: Swift.Int? = nil, selectionBehavior: _PhotosUI_SwiftUI.PhotosPickerSelectionBehavior = .default, matching filter: PhotosUI.PHPickerFilter? = nil, preferredItemEncoding: _PhotosUI_SwiftUI.PhotosPickerItem.EncodingDisambiguationPolicy = .automatic, photoLibrary: Photos.PHPhotoLibrary) where S : Swift.StringProtocol
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func photosPicker(isPresented: SwiftUICore.Binding<Swift.Bool>, selection: SwiftUICore.Binding<_PhotosUI_SwiftUI.PhotosPickerItem?>, matching filter: PhotosUI.PHPickerFilter? = nil, preferredItemEncoding: _PhotosUI_SwiftUI.PhotosPickerItem.EncodingDisambiguationPolicy = .automatic) -> some SwiftUICore.View
  
  nonisolated public func photosPicker(isPresented: SwiftUICore.Binding<Swift.Bool>, selection: SwiftUICore.Binding<[_PhotosUI_SwiftUI.PhotosPickerItem]>, maxSelectionCount: Swift.Int? = nil, selectionBehavior: _PhotosUI_SwiftUI.PhotosPickerSelectionBehavior = .default, matching filter: PhotosUI.PHPickerFilter? = nil, preferredItemEncoding: _PhotosUI_SwiftUI.PhotosPickerItem.EncodingDisambiguationPolicy = .automatic) -> some SwiftUICore.View
  
  @available(watchOS, unavailable)
  nonisolated public func photosPicker(isPresented: SwiftUICore.Binding<Swift.Bool>, selection: SwiftUICore.Binding<_PhotosUI_SwiftUI.PhotosPickerItem?>, matching filter: PhotosUI.PHPickerFilter? = nil, preferredItemEncoding: _PhotosUI_SwiftUI.PhotosPickerItem.EncodingDisambiguationPolicy = .automatic, photoLibrary: Photos.PHPhotoLibrary) -> some SwiftUICore.View
  
  @available(watchOS, unavailable)
  nonisolated public func photosPicker(isPresented: SwiftUICore.Binding<Swift.Bool>, selection: SwiftUICore.Binding<[_PhotosUI_SwiftUI.PhotosPickerItem]>, maxSelectionCount: Swift.Int? = nil, selectionBehavior: _PhotosUI_SwiftUI.PhotosPickerSelectionBehavior = .default, matching filter: PhotosUI.PHPickerFilter? = nil, preferredItemEncoding: _PhotosUI_SwiftUI.PhotosPickerItem.EncodingDisambiguationPolicy = .automatic, photoLibrary: Photos.PHPhotoLibrary) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func photosPickerStyle(_ style: _PhotosUI_SwiftUI.PhotosPickerStyle) -> some SwiftUICore.View
  
  nonisolated public func photosPickerAccessoryVisibility(_ visibility: SwiftUICore.Visibility, edges: SwiftUICore.Edge.Set = .all) -> some SwiftUICore.View
  
  nonisolated public func photosPickerDisabledCapabilities(_ disabledCapabilities: PhotosUI.PHPickerCapabilities) -> some SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension _PhotosUI_SwiftUI.PhotosPicker : Swift.Sendable {}
