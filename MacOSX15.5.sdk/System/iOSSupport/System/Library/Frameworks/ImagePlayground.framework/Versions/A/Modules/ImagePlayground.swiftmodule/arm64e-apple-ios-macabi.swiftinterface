// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64e-apple-ios18.4-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-upcoming-feature InternalImportsByDefault -enable-bare-slash-regex -user-module-version 112 -module-name ImagePlayground
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
public import CoreGraphics
public import Foundation
public import ImageIO
@_exported public import ImagePlayground
public import PencilKit.PKDrawing
public import PencilKit
public import Swift
public import SwiftUI
public import UIKit
public import _Concurrency
public import _StringProcessing
public import _SwiftConcurrencyShims
extension SwiftUICore.View {
  @available(iOS 18.1, macOS 15.1, visionOS 2.4, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func imagePlaygroundSheet(isPresented: SwiftUICore.Binding<Swift.Bool>, concepts: [ImagePlayground.ImagePlaygroundConcept] = [], sourceImage: SwiftUICore.Image? = nil, onCompletion: @escaping (Foundation.URL) -> Swift.Void, onCancellation: (() -> Swift.Void)? = nil) -> some SwiftUICore.View
  
  @available(iOS 18.1, macOS 15.1, visionOS 2.4, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func imagePlaygroundSheet(isPresented: SwiftUICore.Binding<Swift.Bool>, concepts: [ImagePlayground.ImagePlaygroundConcept] = [], sourceImageURL: Foundation.URL, onCompletion: @escaping (_ url: Foundation.URL) -> Swift.Void, onCancellation: (() -> Swift.Void)? = nil) -> some SwiftUICore.View
  
  @available(iOS 18.1, macOS 15.1, visionOS 2.4, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func imagePlaygroundSheet(isPresented: SwiftUICore.Binding<Swift.Bool>, concept: Swift.String, sourceImageURL: Foundation.URL, onCompletion: @escaping (_ url: Foundation.URL) -> Swift.Void, onCancellation: (() -> Swift.Void)? = nil) -> some SwiftUICore.View
  
  @available(iOS 18.1, macOS 15.1, visionOS 2.4, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func imagePlaygroundSheet(isPresented: SwiftUICore.Binding<Swift.Bool>, concept: Swift.String, sourceImage: SwiftUICore.Image? = nil, onCompletion: @escaping (_ url: Foundation.URL) -> Swift.Void, onCancellation: (() -> Swift.Void)? = nil) -> some SwiftUICore.View
  
  @available(iOS 18.4, macOS 15.4, visionOS 2.4, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func imagePlaygroundGenerationStyle(_ style: ImagePlayground.ImagePlaygroundStyle, in allowedStyles: [ImagePlayground.ImagePlaygroundStyle] = ImagePlaygroundStyle.all) -> some SwiftUICore.View
  
  @available(iOS 18.4, macOS 15.4, visionOS 2.4, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func imagePlaygroundPersonalizationPolicy(_ policy: ImagePlayground.ImagePlaygroundPersonalizationPolicy = .automatic) -> some SwiftUICore.View
  
}
@available(iOS 18.4, macOS 15.4, visionOS 2.4, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var imagePlaygroundAllowedGenerationStyles: [ImagePlayground.ImagePlaygroundStyle] {
    get
  }
  public var imagePlaygroundSelectedGenerationStyle: ImagePlayground.ImagePlaygroundStyle {
    get
  }
  public var imagePlaygroundPersonalizationPolicy: ImagePlayground.ImagePlaygroundPersonalizationPolicy {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @available(iOS 18.1, macOS 15.1, visionOS 2.4, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public class ImagePlaygroundViewController : UIKit.UIViewController {
  @available(iOS 18.4, macOS 15.4, visionOS 2.4, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public var allowedGenerationStyles: [ImagePlayground.ImagePlaygroundStyle] {
    get
    set
  }
  @available(iOS 18.4, macOS 15.4, visionOS 2.4, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public var selectedGenerationStyle: ImagePlayground.ImagePlaygroundStyle {
    get
    set
  }
  @available(iOS 18.4, macOS 15.4, visionOS 2.4, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public var personalizationPolicy: ImagePlayground.ImagePlaygroundPersonalizationPolicy {
    get
    set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var sourceImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any ImagePlayground.ImagePlaygroundViewController.Delegate)?
  @_Concurrency.MainActor @preconcurrency public var concepts: [ImagePlayground.ImagePlaygroundConcept] {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var isModalInPresentation: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc deinit
}
@available(iOS 18.1, macOS 15.1, visionOS 2.4, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension ImagePlayground.ImagePlaygroundViewController {
  @objc(available) @_Concurrency.MainActor @preconcurrency dynamic public class var isAvailable: Swift.Bool {
    @objc get
  }
}
@available(iOS 18.1, macOS 15.1, visionOS 2.4, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension ImagePlayground.ImagePlaygroundViewController {
  @available(iOS 18.1, macOS 15.1, visionOS 2.4, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @objc(ImageGenerationViewControllerDelegate) public protocol Delegate : ObjectiveC.NSObjectProtocol {
    @objc @_Concurrency.MainActor func imagePlaygroundViewController(_ imagePlaygroundViewController: ImagePlayground.ImagePlaygroundViewController, didCreateImageAt imageURL: Foundation.URL)
    @_Concurrency.MainActor @objc optional func imagePlaygroundViewControllerDidCancel(_ imagePlaygroundViewController: ImagePlayground.ImagePlaygroundViewController)
  }
}
@available(iOS 18.4, macOS 15.4, visionOS 2.4, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension ImagePlayground.ImageCreator {
  public enum Error : Foundation.LocalizedError, Foundation.CustomNSError, Swift.CaseIterable {
    case notSupported
    case unavailable
    case creationCancelled
    case faceInImageTooSmall
    case unsupportedLanguage
    case unsupportedInputImage
    case backgroundCreationForbidden
    case creationFailed
    public static var errorDomain: Swift.String {
      get
    }
    public var errorUserInfo: [Swift.String : Any] {
      get
    }
    public static func == (a: ImagePlayground.ImageCreator.Error, b: ImagePlayground.ImageCreator.Error) -> Swift.Bool
    @available(iOS 18.4, visionOS 2.4, macOS 15.4, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    public typealias AllCases = [ImagePlayground.ImageCreator.Error]
    nonisolated public static var allCases: [ImagePlayground.ImageCreator.Error] {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 18.1, macOS 15.1, visionOS 2.4, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct ImagePlaygroundConcept {
  public static func text(_ text: Swift.String) -> ImagePlayground.ImagePlaygroundConcept
  public static func extracted(from text: Swift.String, title: Swift.String? = nil) -> ImagePlayground.ImagePlaygroundConcept
  public static func drawing(_ drawing: PencilKit.PKDrawing) -> ImagePlayground.ImagePlaygroundConcept
  public static func image(_ image: CoreGraphics.CGImage) -> ImagePlayground.ImagePlaygroundConcept
  public static func image(_ url: Foundation.URL) -> ImagePlayground.ImagePlaygroundConcept?
  @available(*, deprecated, message: "Use extracted(from text: title:) instead.")
  public static func extracted(from text: Swift.String) -> ImagePlayground.ImagePlaygroundConcept
}
@available(iOS 18.4, macOS 15.4, visionOS 2.4, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct ImagePlaygroundStyle : Swift.Codable, Swift.Equatable, Swift.Hashable, Swift.Identifiable, Swift.Sendable {
  public static let animation: ImagePlayground.ImagePlaygroundStyle
  public static let illustration: ImagePlayground.ImagePlaygroundStyle
  public static let sketch: ImagePlayground.ImagePlaygroundStyle
  public static var all: [ImagePlayground.ImagePlaygroundStyle] {
    get
  }
  public let id: Swift.String
  public static func == (a: ImagePlayground.ImagePlaygroundStyle, b: ImagePlayground.ImagePlaygroundStyle) -> Swift.Bool
  @available(iOS 18.4, visionOS 2.4, macOS 15.4, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias ID = Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension SwiftUICore.EnvironmentValues {
  @available(iOS 18.1, macOS 15.1, visionOS 2.4, *)
  public var supportsImagePlayground: Swift.Bool {
    get
  }
}
@available(iOS 18.4, macOS 15.4, visionOS 2.4, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public enum ImagePlaygroundPersonalizationPolicy : Swift.Int {
  case automatic
  case enabled
  case disabled
  public init?(rawValue: Swift.Int)
  @available(iOS 18.4, visionOS 2.4, macOS 15.4, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 18.4, macOS 15.4, visionOS 2.4, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
final public class ImageCreator : Swift.Sendable {
  public struct CreatedImage {
    public let cgImage: CoreGraphics.CGImage
  }
  public init() async throws
  final public let availableStyles: [ImagePlayground.ImagePlaygroundStyle]
  final public func images(for concepts: [ImagePlayground.ImagePlaygroundConcept], style: ImagePlayground.ImagePlaygroundStyle, limit: Swift.Int) -> some _Concurrency.AsyncSequence<ImagePlayground.ImageCreator.CreatedImage, any Swift.Error>
  
  @objc deinit
}
@available(iOS 18.1, macOS 15.1, visionOS 2.4, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension ImagePlayground.ImagePlaygroundViewController : Swift.Sendable {}
@available(iOS 18.4, macOS 15.4, visionOS 2.4, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension ImagePlayground.ImageCreator.Error : Swift.Equatable {}
@available(iOS 18.4, macOS 15.4, visionOS 2.4, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension ImagePlayground.ImageCreator.Error : Swift.Hashable {}
@available(iOS 18.4, macOS 15.4, visionOS 2.4, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension ImagePlayground.ImagePlaygroundPersonalizationPolicy : Swift.Equatable {}
@available(iOS 18.4, macOS 15.4, visionOS 2.4, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension ImagePlayground.ImagePlaygroundPersonalizationPolicy : Swift.Hashable {}
@available(iOS 18.4, macOS 15.4, visionOS 2.4, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension ImagePlayground.ImagePlaygroundPersonalizationPolicy : Swift.RawRepresentable {}
