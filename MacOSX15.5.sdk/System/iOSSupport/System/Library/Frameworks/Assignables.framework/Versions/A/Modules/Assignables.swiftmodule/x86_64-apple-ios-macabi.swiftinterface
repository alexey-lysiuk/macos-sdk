// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target x86_64-apple-ios18.0-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 1.5 -module-name Assignables
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import AppKit
import AppleArchive
@_exported import Assignables
import Combine
import CoreFoundation
import DeveloperToolsSupport
import Foundation
import OSLog
import PDFKit
import Swift
import SwiftUI
import System
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct MergeablePartsContainerPartID : Swift.Hashable {
  @available(iOS 17.5, *)
  public var rawValue: Swift.String
  @available(iOS 17.5, *)
  public init(_ rawValue: Swift.String)
  public static func == (a: Assignables.MergeablePartsContainerPartID, b: Assignables.MergeablePartsContainerPartID) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.5, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public enum MergeablePartData {
  case data(Foundation.Data)
  case fileURL(Foundation.URL)
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public protocol MergeablePartsContainer : Swift.Hashable {
  typealias PartID = Assignables.MergeablePartsContainerPartID
  @available(*, deprecated, message: "Use merge(_:)")
  mutating func merge(other: Self) throws -> Swift.Bool
  @available(*, deprecated, message: "Use merge(partData:into:)")
  mutating func merge(partID: Self.PartID, partDataURL: Foundation.URL) throws -> Swift.Bool
  @available(*, deprecated, message: "Use exportParts(identifiedBy:)")
  func export(partIDs: [Self.PartID]) async throws -> [Self.PartID : Foundation.URL]
  @available(iOS 17.5, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  func exportParts(identifiedBy partIDs: [Self.PartID]) async throws -> [Self.PartID : Assignables.MergeablePartData]
  @available(iOS 17.5, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  mutating func merge(_ other: Self) async throws -> Swift.Bool
  @available(iOS 17.5, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  mutating func merge(partData: Assignables.MergeablePartData, into partID: Self.PartID) async throws -> Swift.Bool
  @available(iOS 18, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  func makePart(for partID: Self.PartID) throws -> Assignables.MergeablePartData?
  var isPartial: Swift.Bool { get }
  var partIDs: [Self.PartID] { get }
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public protocol AssignedWorkDocumentElement : Assignables.DocumentElement {
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct AssignedWorkDocument : Swift.Identifiable {
  public static func == (lhs: Assignables.AssignedWorkDocument, rhs: Assignables.AssignedWorkDocument) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public enum PartIDs {
    public static let assignableDocumentBase: Assignables.MergeablePartsContainerPartID
    public static let assignableDocumentInstructionMarkup: Assignables.MergeablePartsContainerPartID
    public static let assignableDocumentQuestionBoxes: Assignables.MergeablePartsContainerPartID
    public static let assignableDocumentAuthors: Assignables.MergeablePartsContainerPartID
    public static let takerMarkup: Assignables.MergeablePartsContainerPartID
    public static let scorerMarkup: Assignables.MergeablePartsContainerPartID
    public static let scoreAnnotations: Assignables.MergeablePartsContainerPartID
    public static let assignees: Assignables.MergeablePartsContainerPartID
    public static let scorers: Assignables.MergeablePartsContainerPartID
    public typealias Document = Assignables.AssignedWorkDocument
    public static let all: [Assignables.MergeablePartsContainerPartID]
  }
  @available(*, deprecated, message: "Use merge(_:)")
  @discardableResult
  public mutating func merge(other: Assignables.AssignedWorkDocument) throws -> Swift.Bool
  @available(*, deprecated, message: "Use merge(partData:into:)")
  @discardableResult
  public mutating func merge(partID: Assignables.AssignedWorkDocument.PartID, partDataURL: Foundation.URL) throws -> Swift.Bool
  @available(*, deprecated, message: "Use exportParts(identifiedBy:)")
  public func export(partIDs: [Assignables.AssignedWorkDocument.PartID]) async throws -> [Assignables.AssignedWorkDocument.PartID : Foundation.URL]
  @available(iOS 17.5, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public func exportParts(identifiedBy partIDs: [Assignables.AssignedWorkDocument.PartID]) async throws -> [Assignables.AssignedWorkDocument.PartID : Assignables.MergeablePartData]
  @available(iOS 17.5, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @discardableResult
  public mutating func merge(_ other: Assignables.AssignedWorkDocument) async throws -> Swift.Bool
  @available(iOS 17.5, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @discardableResult
  public mutating func merge(partData: Assignables.MergeablePartData, into partID: Assignables.AssignedWorkDocument.PartID) async throws -> Swift.Bool
  public var isPartial: Swift.Bool {
    get
  }
  public var partIDs: [Assignables.MergeablePartsContainerPartID] {
    get
  }
  @available(iOS 18, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public func makePart(for partID: Assignables.AssignedWorkDocument.PartID) throws -> Assignables.MergeablePartData?
  public enum Error : Swift.Error {
    case otherDocumentIsNotAVariant
    case exportFailed(partIDs: [Assignables.AssignedWorkDocument.PartID])
  }
  public typealias ID = Swift.String
  public var id: Assignables.AssignedWorkDocument.ID {
    get
  }
  public var assignableDocument: Assignables.AssignableDocument {
    get
    set
  }
  public var assignees: [Assignables.AnyUserIdentity] {
    get
  }
  public var scorers: [Assignables.AnyUserIdentity] {
    get
  }
  @available(*, deprecated, message: "Use async init(id:assignableDocument:partData:)")
  public init(id: Assignables.AssignedWorkDocument.ID, assignableDocument: Assignables.AssignableDocument, partData: [Assignables.AssignedWorkDocument.PartID : Foundation.URL]) throws
  @available(iOS 17.5, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public init(id: Assignables.AssignedWorkDocument.ID, assignableDocument: Assignables.AssignableDocument, partData: [Assignables.AssignedWorkDocument.PartID : Assignables.MergeablePartData]) async throws
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AssignableDocument : Assignables.Assignable {
  @available(iOS, deprecated: 18, message: "Use makeAssignedWorkDocument() instead")
  public func assign(to userIdentity: Assignables.AnyUserIdentity) throws -> Assignables.AssignedWorkDocument
  @available(iOS 18, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public func makeAssignedWorkDocument(id: Swift.String) throws -> Assignables.AssignedWorkDocument
  @available(iOS 17.5, *)
  public func makeAssignedWorkDocument() throws -> Assignables.AssignedWorkDocument
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AssignableDocument {
  public struct QuestionBox : Assignables.AssignableDocument.Element, Swift.Identifiable {
    public typealias ID = Swift.String
    public var id: Assignables.AssignableDocument.QuestionBox.ID {
      get
      set
    }
    public typealias Document = Assignables.AssignableDocument
    public init(id: Assignables.AssignableDocument.QuestionBox.ID, pageID: Assignables.AssignableDocument.Page.ID, bounds: CoreFoundation.CGRect)
    public static func == (lhs: Assignables.AssignableDocument.QuestionBox, rhs: Assignables.AssignableDocument.QuestionBox) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var pageID: Assignables.AssignableDocument.Page.ID? {
      get
    }
    public var bounds: CoreFoundation.CGRect {
      get
      set
    }
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public protocol AssignedWorkDocumentConfiguration : Swift.Hashable {
  var manualScore: Swift.Double? { get set }
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AssignedWorkDocument {
  public typealias Configuration = Assignables.AssignedWorkDocumentConfiguration
  public var configuration: any Assignables.AssignedWorkDocumentConfiguration {
    get
    set
  }
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public protocol UserIdentity : Swift.Decodable, Swift.Encodable, Swift.Hashable, Swift.Sendable {
  var typeID: Swift.String { get }
  var stringRepresentation: Swift.String { get }
  func eraseToAnyUserIdentity() -> Assignables.AnyUserIdentity
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public enum UserIdentityFactory {
  public static var anonymous: Assignables.AnonymousUserIdentity {
    get
  }
  public static func string(_ value: Swift.String) -> Assignables.StringUserIdentity
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.UserIdentity {
  public typealias As = Assignables.UserIdentityFactory
  public func eraseToAnyUserIdentity() -> Assignables.AnyUserIdentity
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct AnonymousUserIdentity : Assignables.UserIdentity {
  public static var typeID: Swift.String {
    get
  }
  public var typeID: Swift.String {
    get
  }
  public var stringRepresentation: Swift.String {
    get
  }
  public init()
  public static func == (a: Assignables.AnonymousUserIdentity, b: Assignables.AnonymousUserIdentity) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct StringUserIdentity : Assignables.UserIdentity {
  public static var typeID: Swift.String {
    get
  }
  public var typeID: Swift.String {
    get
  }
  public var stringRepresentation: Swift.String {
    get
  }
  public var value: Swift.String
  public init(value: Swift.String)
  public static func == (a: Assignables.StringUserIdentity, b: Assignables.StringUserIdentity) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.UserIdentity {
  @discardableResult
  public func scope<R>(_ access: () throws -> R) rethrows -> R
  @discardableResult
  public func scope<R>(_ access: () async throws -> R) async rethrows -> R
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AnyUserIdentity {
  @discardableResult
  public func scope<R>(_ access: () throws -> R) rethrows -> R
  @discardableResult
  public func scope<R>(_ access: () async throws -> R) async rethrows -> R
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct AnyUserIdentity : Swift.Hashable, Swift.Codable, Assignables.UserIdentity {
  public var typeID: Swift.String {
    get
  }
  public var stringRepresentation: Swift.String {
    get
  }
  public static func == (lhs: Assignables.AnyUserIdentity, rhs: Assignables.AnyUserIdentity) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
  public init<T>(_ userIdentity: T) where T : Assignables.UserIdentity
  public enum Error : Swift.Error {
    case cannotDecode
    public static func == (a: Assignables.AnyUserIdentity.Error, b: Assignables.AnyUserIdentity.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public class UserIdentityTypeRegistry {
  public static func registerUserIdentityType<UI>(typeID: Swift.String, type: UI.Type) where UI : Assignables.UserIdentity
  @objc deinit
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public protocol DocumentElementID : Swift.Decodable, Swift.Encodable, Swift.Hashable {
  associatedtype Element : Assignables.DocumentElement
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public protocol DocumentElement : Swift.Hashable {
  associatedtype Document : Assignables.MergeableDocument
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AssignedWorkDocument {
  public struct ScoreAnnotation : Swift.Identifiable {
    public typealias ID = Swift.String
    public var id: Assignables.AssignedWorkDocument.ScoreAnnotation.ID {
      get
      set
    }
    public typealias Document = Assignables.AssignedWorkDocument
    public init(id: Assignables.AssignedWorkDocument.ScoreAnnotation.ID, pageID: Assignables.AssignedWorkDocument.Page.ID?, location: CoreFoundation.CGPoint, kind: Assignables.AssignedWorkDocument.ScoreAnnotation.Kind)
    public static func == (lhs: Assignables.AssignedWorkDocument.ScoreAnnotation, rhs: Assignables.AssignedWorkDocument.ScoreAnnotation) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public enum Kind : Swift.Int, Swift.CaseIterable, Swift.CustomDebugStringConvertible {
      case unknown
      case incorrect
      case correct
      case bonus
      public var debugDescription: Swift.String {
        get
      }
      public init?(rawValue: Swift.Int)
      @available(iOS 17.4, *)
      @available(tvOS, unavailable)
      @available(watchOS, unavailable)
      @available(macOS, unavailable)
      public typealias AllCases = [Assignables.AssignedWorkDocument.ScoreAnnotation.Kind]
      @available(iOS 17.4, *)
      @available(tvOS, unavailable)
      @available(watchOS, unavailable)
      @available(macOS, unavailable)
      public typealias RawValue = Swift.Int
      nonisolated public static var allCases: [Assignables.AssignedWorkDocument.ScoreAnnotation.Kind] {
        get
      }
      public var rawValue: Swift.Int {
        get
      }
    }
    public var pageID: Assignables.AssignedWorkDocument.Page.ID? {
      get
      set
    }
    public var location: CoreFoundation.CGPoint {
      get
      set
    }
    public var kind: Assignables.AssignedWorkDocument.ScoreAnnotation.Kind {
      get
      set
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public var scoreAnnotations: [Assignables.AssignedWorkDocument.ScoreAnnotation] {
    get
    set
  }
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AssignedWorkDocument {
  public subscript(pageID: Assignables.AssignedWorkDocument.Page.ID) -> Assignables.AssignedWorkDocument.Page? {
    get
  }
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AssignedWorkDocument {
  public subscript(scoreAnnotationID: Assignables.AssignedWorkDocument.ScoreAnnotation.ID) -> Assignables.AssignedWorkDocument.ScoreAnnotation? {
    get
    set
  }
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct AssignableDocumentView : SwiftUICore.View {
  public typealias Document = Assignables.AssignableDocument
  @_Concurrency.MainActor @preconcurrency public init(document: SwiftUICore.Binding<Assignables.AssignableDocumentView.Document>, activePartID: Assignables.MergeablePartsContainerPartID? = nil, hiddenPartIDs: [Assignables.MergeablePartsContainerPartID] = [], selectedPageID: SwiftUICore.Binding<Assignables.AssignableDocumentView.Document.Page.ID?>? = nil, selectedQuestionID: SwiftUICore.Binding<Assignables.AssignableDocumentView.Document.Question.ID?>? = nil, showsPageThumbnails: Swift.Bool = true, isStructureEditingEnabled: Swift.Bool = true)
  @available(iOS 18.1, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public init(document: SwiftUICore.Binding<Assignables.AssignableDocumentView.Document>, activePartID: Assignables.MergeablePartsContainerPartID? = nil, hiddenPartIDs: [Assignables.MergeablePartsContainerPartID] = [], selectedPageID: SwiftUICore.Binding<Assignables.AssignableDocumentView.Document.Page.ID?>? = nil, selectedQuestionID: SwiftUICore.Binding<Assignables.AssignableDocumentView.Document.Question.ID?>? = nil, showsPageThumbnails: Swift.Bool = true, isStructureEditingEnabled: Swift.Bool = true, allowsPencilDrawing: Swift.Bool = true, onMarkupActivation: @escaping (_ isMarkupActivated: Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 17.4, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s11Assignables22AssignableDocumentViewV4bodyQrvp", 0) __
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AssignableDocument {
  public subscript(pageID: Assignables.AssignableDocument.Page.ID) -> Assignables.AssignableDocument.Page? {
    get
  }
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AssignableDocument {
  public subscript(questionID: Assignables.AssignableDocument.Question.ID) -> Assignables.AssignableDocument.Question? {
    get
    set
  }
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AssignableDocument {
  public subscript(questionBoxID: Assignables.AssignableDocument.QuestionBox.ID) -> Assignables.AssignableDocument.QuestionBox? {
    get
    set
  }
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct BasicDocumentElementID<Element> : Assignables.DocumentElementID where Element : Assignables.DocumentElement {
  public static func == (a: Assignables.BasicDocumentElementID<Element>, b: Assignables.BasicDocumentElementID<Element>) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AssignedWorkDocument {
  public func computeScore() -> Swift.Double
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AssignedWorkDocument {
  public struct Page : Assignables.MergeableDocumentPage, Swift.CustomDebugStringConvertible {
    public struct ID : Assignables.DocumentElementID {
      public typealias Element = Assignables.AssignedWorkDocument.Page
      public var assignableDocumentPageID: Assignables.AssignableDocument.Page.ID {
        get
      }
      public static func == (a: Assignables.AssignedWorkDocument.Page.ID, b: Assignables.AssignedWorkDocument.Page.ID) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public var id: Assignables.AssignedWorkDocument.Page.ID {
      get
    }
    public typealias Document = Assignables.AssignedWorkDocument
    public static func == (lhs: Assignables.AssignedWorkDocument.Page, rhs: Assignables.AssignedWorkDocument.Page) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var assignableDocumentPageID: Assignables.AssignableDocument.Page.ID {
      get
    }
    @available(iOS 18, *)
    @available(macOS, unavailable)
    @available(watchOS, unavailable)
    @available(tvOS, unavailable)
    public var rotation: Foundation.Measurement<Foundation.UnitAngle> {
      get
    }
    public var debugDescription: Swift.String {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public var pagesDebugDescription: Swift.String {
    get
  }
  public var pages: [Assignables.AssignedWorkDocument.Page] {
    get
  }
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public protocol AssignableDocumentElement : Assignables.DocumentElement {
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct AssignableDocument : Swift.Identifiable {
  public static func == (lhs: Assignables.AssignableDocument, rhs: Assignables.AssignableDocument) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public enum PartIDs {
    public static let base: Assignables.MergeablePartsContainerPartID
    public static let instructionMarkup: Assignables.MergeablePartsContainerPartID
    public static let questionBoxes: Assignables.MergeablePartsContainerPartID
    public static let authors: Assignables.MergeablePartsContainerPartID
    public typealias Document = Assignables.AssignableDocument
    public static let all: [Assignables.MergeablePartsContainerPartID]
  }
  @available(*, deprecated, message: "Use merge(_:)")
  @discardableResult
  public mutating func merge(other: Assignables.AssignableDocument) throws -> Swift.Bool
  @available(*, deprecated, message: "Use merge(partData:into:)")
  @discardableResult
  public mutating func merge(partID: Assignables.AssignableDocument.PartID, partDataURL: Foundation.URL) throws -> Swift.Bool
  @available(*, deprecated, message: "Use exportParts(identifiedBy:)")
  public func export(partIDs: [Assignables.AssignableDocument.PartID]) async throws -> [Assignables.AssignableDocument.PartID : Foundation.URL]
  @available(iOS 17.5, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public func exportParts(identifiedBy partIDs: [Assignables.AssignableDocument.PartID]) async throws -> [Assignables.AssignableDocument.PartID : Assignables.MergeablePartData]
  @available(iOS 17.5, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @discardableResult
  public mutating func merge(_ other: Assignables.AssignableDocument) async throws -> Swift.Bool
  @available(iOS 17.5, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @discardableResult
  public mutating func merge(partData: Assignables.MergeablePartData, into partID: Assignables.AssignableDocument.PartID) async throws -> Swift.Bool
  public var isPartial: Swift.Bool {
    get
  }
  public var partIDs: [Assignables.AssignableDocument.PartID] {
    get
  }
  @available(iOS 18, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public func makePart(for partID: Assignables.AssignableDocument.PartID) throws -> Assignables.MergeablePartData?
  public typealias Element = Assignables.AssignableDocumentElement
  public enum Error : Swift.Error {
    case otherDocumentIsNotAVariant
    case invalidURL
    case exportFailed(partIDs: [Assignables.AssignableDocument.PartID])
  }
  public typealias ID = Swift.String
  public var id: Assignables.AssignableDocument.ID {
    get
  }
  public enum CorrectMarkType : Swift.CaseIterable, Swift.Identifiable, Swift.CustomDebugStringConvertible {
    case checkmark
    case star
    case numeric
    case unknown
    public var id: Assignables.AssignableDocument.CorrectMarkType {
      get
    }
    public var debugDescription: Swift.String {
      get
    }
    public static func == (a: Assignables.AssignableDocument.CorrectMarkType, b: Assignables.AssignableDocument.CorrectMarkType) -> Swift.Bool
    @available(iOS 17.4, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(macOS, unavailable)
    public typealias AllCases = [Assignables.AssignableDocument.CorrectMarkType]
    @available(iOS 17.4, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(macOS, unavailable)
    public typealias ID = Assignables.AssignableDocument.CorrectMarkType
    nonisolated public static var allCases: [Assignables.AssignableDocument.CorrectMarkType] {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var authors: [Assignables.AnyUserIdentity] {
    get
  }
  @available(*, deprecated, message: "Use init(pdfURL:id:) instead")
  public init(pdfURL: Foundation.URL, authors: [some UserIdentity], id: Swift.String? = nil) throws
  public init(pdfURL: Foundation.URL, id: Swift.String? = nil) throws
  @available(*, deprecated, message: "Use async init(id:partData:)")
  public init(id: Assignables.AssignableDocument.ID, partData: [Assignables.AssignableDocument.PartID : Foundation.URL]) throws
  @available(iOS 17.5, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public init(id: Assignables.AssignableDocument.ID, partData: [Assignables.AssignableDocument.PartID : Assignables.MergeablePartData]) async throws
  public func exportBaseAsPDF() async -> PDFKit.PDFDocument
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AssignableDocument {
  public func exportToPDF(visibleParts: [Assignables.MergeablePartsContainerPartID]) async -> PDFKit.PDFDocument
  public var isMultiPageDocument: Swift.Bool {
    get
  }
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AssignableDocument {
  public struct Page : Assignables.AssignableDocument.Element, Assignables.MergeableDocumentPage, Swift.CustomDebugStringConvertible {
    public struct ID : Assignables.DocumentElementID, Swift.CustomDebugStringConvertible {
      public typealias Element = Assignables.AssignableDocument.Page
      public var debugDescription: Swift.String {
        get
      }
      public static func == (a: Assignables.AssignableDocument.Page.ID, b: Assignables.AssignableDocument.Page.ID) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public var id: Assignables.AssignableDocument.Page.ID {
      get
    }
    public typealias Document = Assignables.AssignableDocument
    public static func == (lhs: Assignables.AssignableDocument.Page, rhs: Assignables.AssignableDocument.Page) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var size: CoreFoundation.CGSize {
      get
    }
    @available(iOS 18, *)
    @available(macOS, unavailable)
    @available(watchOS, unavailable)
    @available(tvOS, unavailable)
    public var rotation: Foundation.Measurement<Foundation.UnitAngle> {
      get
    }
    public var debugDescription: Swift.String {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public var pagesDebugDescription: Swift.String {
    get
  }
  public var pages: [Assignables.AssignableDocument.Page] {
    get
  }
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public protocol Assignable {
  @available(iOS, deprecated: 18, message: "Use makeAssignedWorkDocument() instead")
  func assign(to userIdentity: some UserIdentity) throws -> Assignables.AssignedWorkDocument
  @available(iOS, deprecated: 18, message: "Use makeAssignedWorkDocument() instead")
  func assign(to userIdentity: Assignables.AnyUserIdentity) throws -> Assignables.AssignedWorkDocument
  @available(iOS 18, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  func makeAssignedWorkDocument(id: Swift.String) throws -> Assignables.AssignedWorkDocument
  @available(iOS 18, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  func makeAssignedWorkDocument() throws -> Assignables.AssignedWorkDocument
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.Assignable {
  @available(iOS, deprecated: 18, message: "Use makeAssignedWorkDocument() instead")
  public func assign(to userIdentity: some UserIdentity) throws -> Assignables.AssignedWorkDocument
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public protocol AssignableDocumentConfiguration : Swift.Hashable {
  var maxScore: Swift.Double? { get set }
  var pointsPerBonusScoreMark: Swift.Double { get set }
  var correctScoreMarkType: Assignables.AssignableDocument.CorrectMarkType { get set }
  var pointsPerCorrectScoreMark: Swift.Double { get set }
  var pointsPerIncorrectScoreMark: Swift.Double { get set }
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AssignableDocument {
  public typealias Configuration = Assignables.AssignableDocumentConfiguration
  public var configuration: some Assignables.AssignableDocumentConfiguration {
    get
    set
  }
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AssignedWorkDocument {
  public func exportToPDF(visibleParts: [Assignables.MergeablePartsContainerPartID]) async -> PDFKit.PDFDocument
  public var isMultiPageDocument: Swift.Bool {
    get
  }
  public func questionThumbnails(visibleParts: [Assignables.AssignedWorkDocument.PartID]) async -> [Assignables.AssignableDocument.Question.ID : [Assignables.AssignableDocument.Question.Thumbnail]]
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AssignableDocument {
  public struct Question : Assignables.AssignableDocument.Element, Swift.Hashable {
    public typealias ID = Assignables.BasicDocumentElementID<Assignables.AssignableDocument.Question>
    public var id: Assignables.AssignableDocument.Question.ID {
      get
    }
    public typealias Document = Assignables.AssignableDocument
    public init(pageID: Assignables.AssignableDocument.Page.ID, boxes: [Assignables.AssignableDocument.QuestionBox], maxScore: Swift.Double? = nil)
    public static func == (lhs: Assignables.AssignableDocument.Question, rhs: Assignables.AssignableDocument.Question) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public struct Thumbnail {
      public struct Data {
        public var pageID: Assignables.AssignableDocument.Page.ID
        public var box: Assignables.AssignableDocument.QuestionBox
        public var image: UIKit.UIImage
      }
      public var questionID: Assignables.AssignableDocument.Question.ID
      public var data: Assignables.AssignableDocument.Question.Thumbnail.Data?
    }
    public var boxes: [Assignables.AssignableDocument.QuestionBox] {
      get
      set
    }
    public var maxScore: Swift.Double? {
      get
      set
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public var questions: [Assignables.AssignableDocument.Question] {
    get
    set
  }
  @discardableResult
  public mutating func appendQuestion(pageID: Assignables.AssignableDocument.Page.ID, rect: CoreFoundation.CGRect, maxScore: Swift.Double? = nil) -> Assignables.AssignableDocument.Question.ID
  @discardableResult
  public mutating func removeQuestion(_ questionID: Assignables.AssignableDocument.Question.ID) -> Assignables.AssignableDocument.Question?
  public func questions(on pageID: Assignables.AssignableDocument.Page.ID) -> [Assignables.AssignableDocument.Question]
  public func questionThumbnails(visibleParts: [Assignables.AssignableDocument.PartID]) async -> [Assignables.AssignableDocument.Question.ID : [Assignables.AssignableDocument.Question.Thumbnail]]
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct AssignedWorkDocumentView : SwiftUICore.View {
  public typealias Document = Assignables.AssignedWorkDocument
  @_Concurrency.MainActor @preconcurrency public init(document: SwiftUICore.Binding<Assignables.AssignedWorkDocumentView.Document>, activePartID: Assignables.MergeablePartsContainerPartID? = nil, hiddenPartIDs: [Assignables.MergeablePartsContainerPartID], selectedPageID: SwiftUICore.Binding<Assignables.AssignedWorkDocumentView.Document.Page.ID?>? = nil, selectedQuestionID: SwiftUICore.Binding<Assignables.AssignableDocument.Question.ID?>? = nil, showsPageThumbnails: Swift.Bool = true, isStructureEditingEnabled: Swift.Bool = false)
  @available(iOS 18.1, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public init(document: SwiftUICore.Binding<Assignables.AssignedWorkDocumentView.Document>, activePartID: Assignables.MergeablePartsContainerPartID? = nil, hiddenPartIDs: [Assignables.MergeablePartsContainerPartID], selectedPageID: SwiftUICore.Binding<Assignables.AssignedWorkDocumentView.Document.Page.ID?>? = nil, selectedQuestionID: SwiftUICore.Binding<Assignables.AssignableDocument.Question.ID?>? = nil, showsPageThumbnails: Swift.Bool = true, isStructureEditingEnabled: Swift.Bool = false, onMarkupActivation: @escaping (_ isMarkupActivated: Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 17.4, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s11Assignables24AssignedWorkDocumentViewV4bodyQrvp", 0) __
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct DocumentThumbnail<Document> where Document : Assignables.MergeableDocument {
  public var pageID: Document.Page.ID
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public protocol MergeableDocumentPage : Swift.Identifiable {
  associatedtype Document : Assignables.MergeableDocument
  typealias Thumbnail = Assignables.DocumentThumbnail<Self.Document>
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public protocol MergeableDocument : Assignables.MergeablePartsContainer, Swift.Identifiable {
  associatedtype Error : Swift.Error
  associatedtype Page : Assignables.MergeableDocumentPage
  var pages: [Self.Page] { get }
  func pageThumbnails(visibleParts: [Self.PartID]) async -> [Self.Page.ID : Self.Page.Thumbnail]
  func exportToPDF(visibleParts: [Self.PartID]) async -> PDFKit.PDFDocument
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.MergeableDocument where Self.Page.ID == Self.Page.Document.Page.ID {
  public func pageThumbnails(visibleParts: [Assignables.MergeablePartsContainerPartID]) async -> [Self.Page.ID : Self.Page.Thumbnail]
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AssignableDocument {
  public func computeMaxScore(defaultQuestionMaxScore: Swift.Double? = Double.zero) -> Swift.Double?
}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AssignedWorkDocument : Assignables.MergeablePartsContainer {}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AssignedWorkDocument : Assignables.MergeableDocument {}
extension Assignables.AssignableDocument : Assignables.MergeablePartsContainer {}
extension Assignables.AssignableDocument : Assignables.MergeableDocument {}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AnyUserIdentity.Error : Swift.Equatable {}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AnyUserIdentity.Error : Swift.Hashable {}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AssignedWorkDocument.ScoreAnnotation : Assignables.AssignedWorkDocumentElement {}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AssignedWorkDocument.ScoreAnnotation : Assignables.DocumentElement {}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AssignedWorkDocument.ScoreAnnotation.Kind : Swift.Equatable {}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AssignedWorkDocument.ScoreAnnotation.Kind : Swift.Hashable {}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AssignedWorkDocument.ScoreAnnotation.Kind : Swift.RawRepresentable {}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Assignables.AssignableDocumentView : Swift.Sendable {}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AssignedWorkDocument.Page : Assignables.AssignedWorkDocumentElement {}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AssignedWorkDocument.Page : Assignables.DocumentElement {}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AssignableDocument.CorrectMarkType : Swift.Equatable {}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AssignableDocument.CorrectMarkType : Swift.Hashable {}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension Assignables.AssignableDocument.Question : Swift.Identifiable {}
@available(iOS 17.4, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Assignables.AssignedWorkDocumentView : Swift.Sendable {}
