// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64e-apple-macos15.5 -target-variant arm64e-apple-ios18.5-macabi -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftCoreAudio -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 328.606 -module-name CoreAudio
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
@_exported import CoreAudio
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @available(macOS 15.0, *)
open class AudioHardwareSystem : CoreAudio.AudioHardwareObject {
  public static let shared: CoreAudio.AudioHardwareSystem
  open var devices: [CoreAudio.AudioHardwareDevice] {
    get throws
  }
  open var plugins: [CoreAudio.AudioHardwarePlugin] {
    get throws
  }
  open var boxes: [CoreAudio.AudioHardwareBox] {
    get throws
  }
  open var clocks: [CoreAudio.AudioHardwareClock] {
    get throws
  }
  open var processes: [CoreAudio.AudioHardwareProcess] {
    get throws
  }
  open var taps: [CoreAudio.AudioHardwareTap] {
    get throws
  }
  open var defaultInputDevice: CoreAudio.AudioHardwareDevice? {
    get throws
  }
  open var defaultOutputDevice: CoreAudio.AudioHardwareDevice? {
    get throws
  }
  open var defaultSoundEffectsDevice: CoreAudio.AudioHardwareDevice? {
    get throws
  }
  open var shouldMixStereoToMono: Swift.Bool {
    get throws
  }
  open var isInitializingOrExiting: Swift.Bool {
    get throws
  }
  open var isProcessInputMuted: Swift.Bool {
    get throws
  }
  open var allowsSleeping: Swift.Bool {
    get throws
  }
  open var allowsUnloading: Swift.Bool {
    get throws
  }
  open var allowsHogMode: Swift.Bool {
    get throws
  }
  open var powerHint: CoreAudio.AudioHardwarePowerHint {
    get throws
  }
  open func setDefaultInputDevice(_ device: CoreAudio.AudioHardwareDevice) throws
  open func setDefaultOutputDevice(_ device: CoreAudio.AudioHardwareDevice) throws
  open func setDefaultSoundEffectsDevice(_ device: CoreAudio.AudioHardwareDevice) throws
  open func setShouldMixStereoToMono(_ doMix: Swift.Bool) throws
  open func setIsProcessInputMuted(_ muted: Swift.Bool) throws
  open func setAllowsSleeping(_ allowed: Swift.Bool) throws
  open func setAllowsUnloading(_ allowed: Swift.Bool) throws
  open func setAllowsHogMode(_ allowed: Swift.Bool) throws
  open func setPowerHint(_ hint: CoreAudio.AudioHardwarePowerHint) throws
  open func unload() throws
  open func makeAggregateDevice(description: [Swift.String : Any]) throws -> CoreAudio.AudioHardwareAggregateDevice?
  open func destroyAggregateDevice(_ device: CoreAudio.AudioHardwareAggregateDevice) throws
  open func makeProcessTap(description: CoreAudio.CATapDescription) throws -> CoreAudio.AudioHardwareTap?
  open func destroyProcessTap(_ tap: CoreAudio.AudioHardwareTap) throws
  open func device(forUID UID: Swift.String) throws -> CoreAudio.AudioHardwareDevice?
  open func clock(forUID UID: Swift.String) throws -> CoreAudio.AudioHardwareClock?
  open func box(forUID UID: Swift.String) throws -> CoreAudio.AudioHardwareBox?
  open func tap(forUID UID: Swift.String) throws -> CoreAudio.AudioHardwareTap?
  open func plugin(forBundleID ID: Swift.String) throws -> CoreAudio.AudioHardwarePlugin?
  open func process(for PID: sys_types.pid_t) throws -> CoreAudio.AudioHardwareProcess?
  override public init(id: CoreAudio.AudioObjectID)
  @objc deinit
}
@available(macOS 15.0, *)
public func PropertyAddress(_ selector: CoreAudio.AudioObjectPropertySelector, scope: CoreAudio.AudioObjectPropertyScope = kAudioObjectPropertyScopeGlobal, element: CoreAudio.AudioObjectPropertyElement = kAudioObjectPropertyElementMain) -> CoreAudio.AudioObjectPropertyAddress
@available(macOS 15.0, *)
public protocol PropertyListenerDelegate {
  func propertiesChanged(properties: [CoreAudio.AudioObjectPropertyAddress])
}
@available(macOS 15.0, *)
public struct AudioHardwareError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(macOS 15.0, *)
public enum AudioHardwareDirection : Swift.UInt32 {
  case output
  case input
  public init?(rawValue: Swift.UInt32)
  @available(macOS 15.0, *)
  public typealias RawValue = Swift.UInt32
  public var rawValue: Swift.UInt32 {
    get
  }
}
@available(macOS 15.0, *)
extension CoreAudio.AudioObjectPropertyAddress : Swift.Hashable {
  public static func == (lhs: CoreAudio.AudioObjectPropertyAddress, rhs: CoreAudio.AudioObjectPropertyAddress) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @available(macOS 15.0, *)
open class AudioHardwareStream : CoreAudio.AudioHardwareObject {
  open var isActive: Swift.Bool {
    get throws
  }
  open var direction: CoreAudio.AudioHardwareDirection {
    get throws
  }
  open var terminalType: Swift.UInt32 {
    get throws
  }
  open var startingChannel: Swift.Int {
    get throws
  }
  open var latency: Swift.Int {
    get throws
  }
  open var virtualFormat: CoreAudioTypes.AudioStreamBasicDescription {
    get throws
  }
  open var availableVirtualFormats: [CoreAudio.AudioStreamRangedDescription] {
    get throws
  }
  open var physicalFormat: CoreAudioTypes.AudioStreamBasicDescription {
    get throws
  }
  open var availablePhysicalFormats: [CoreAudio.AudioStreamRangedDescription] {
    get throws
  }
  open func setIsActive(_ active: Swift.Bool) throws
  open func setVirtualFormat(_ format: CoreAudioTypes.AudioStreamBasicDescription) throws
  open func setPhysicalFormat(_ format: CoreAudioTypes.AudioStreamBasicDescription) throws
  override public init(id: CoreAudio.AudioObjectID)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(macOS 15.0, *)
open class AudioHardwareProcess : CoreAudio.AudioHardwareObject {
  open var pid: sys_types.pid_t {
    get throws
  }
  open var bundleID: Swift.String? {
    get throws
  }
  open var devices: [CoreAudio.AudioHardwareDevice] {
    get throws
  }
  open var isRunning: Swift.Bool {
    get throws
  }
  open var isRunningInput: Swift.Bool {
    get throws
  }
  open var isRunningOutput: Swift.Bool {
    get throws
  }
  override public init(id: CoreAudio.AudioObjectID)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(macOS 15.0, *)
open class AudioHardwareBox : CoreAudio.AudioHardwareObject {
  open var uid: Swift.String {
    get throws
  }
  open var transportType: Swift.UInt32 {
    get throws
  }
  open var hasAudio: Swift.Bool {
    get throws
  }
  open var hasVideo: Swift.Bool {
    get throws
  }
  open var hasMIDI: Swift.Bool {
    get throws
  }
  open var isProtected: Swift.Bool {
    get throws
  }
  open var enabled: Swift.Bool {
    get throws
  }
  open var devices: [CoreAudio.AudioHardwareDevice] {
    get throws
  }
  open var clocks: [CoreAudio.AudioHardwareClock] {
    get throws
  }
  open func enable() throws
  open func disable() throws
  override public init(id: CoreAudio.AudioObjectID)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(macOS 15.0, *)
open class AudioHardwareControl : CoreAudio.AudioHardwareObject {
  open var sliderValue: Swift.UInt32 {
    get throws
  }
  open var sliderRange: [Swift.UInt32] {
    get throws
  }
  open var volumeScalarValue: Swift.Float {
    get throws
  }
  open var volumeDecibelValue: Swift.Float {
    get throws
  }
  open var volumeDecibelRange: CoreAudioTypes.AudioValueRange {
    get throws
  }
  open var booleanValue: Swift.Bool {
    get throws
  }
  open var selectedItems: [Swift.UInt32] {
    get throws
  }
  open var availableItems: [Swift.UInt32] {
    get throws
  }
  open var stereoPanValue: Swift.Float {
    get throws
  }
  open var stereoPanChannels: [Swift.UInt32] {
    get throws
  }
  open func setSliderValue(_ value: Swift.UInt32) throws
  open func setVolumeScalarValue(_ value: Swift.Float) throws
  open func setVolumeDecibelValue(_ value: Swift.Float) throws
  open func setBooleanValue(_ value: Swift.Bool) throws
  open func setSelectedItems(_ items: [Swift.UInt32]) throws
  open func setStereoPanValue(_ value: Swift.Float) throws
  open func convertToDecibels(fromScalar scalar: Swift.Float) throws -> Swift.Float
  open func convertToScalar(fromDecibels decibels: Swift.Float) throws -> Swift.Float
  open func selectorItemName(fromID ID: Swift.UInt32) throws -> Swift.String
  open func selectorItemKind(fromID ID: Swift.UInt32) throws -> Swift.UInt32
  override public init(id: CoreAudio.AudioObjectID)
  @objc deinit
}
extension Swift.UnsafeBufferPointer {
  public init(_ audioBuffer: CoreAudioTypes.AudioBuffer)
}
extension Swift.UnsafeMutableBufferPointer {
  public init(_ audioBuffer: CoreAudioTypes.AudioBuffer)
}
extension CoreAudioTypes.AudioBuffer {
  public init<Element>(_ typedBuffer: Swift.UnsafeMutableBufferPointer<Element>, numberOfChannels: Swift.Int)
}
extension CoreAudioTypes.AudioBufferList {
  public static func sizeInBytes(maximumBuffers: Swift.Int) -> Swift.Int
  public static func allocate(maximumBuffers: Swift.Int) -> CoreAudio.UnsafeMutableAudioBufferListPointer
}
public struct UnsafeMutableAudioBufferListPointer {
  public init(_ p: Swift.UnsafeMutablePointer<CoreAudioTypes.AudioBufferList>)
  public init?(_ p: Swift.UnsafeMutablePointer<CoreAudioTypes.AudioBufferList>?)
  public var count: Swift.Int {
    get
    nonmutating set(newValue)
  }
  public var unsafePointer: Swift.UnsafePointer<CoreAudioTypes.AudioBufferList> {
    get
  }
  public var unsafeMutablePointer: Swift.UnsafeMutablePointer<CoreAudioTypes.AudioBufferList>
}
extension CoreAudio.UnsafeMutableAudioBufferListPointer : Swift.MutableCollection, Swift.RandomAccessCollection {
  public typealias Element = CoreAudioTypes.AudioBuffer
  public typealias Index = Swift.Int
  public typealias Indices = Swift.Range<Swift.Int>
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  @_borrowed public subscript(index: CoreAudio.UnsafeMutableAudioBufferListPointer.Index) -> CoreAudio.UnsafeMutableAudioBufferListPointer.Element {
    _read
    nonmutating _modify
  }
  public typealias Iterator = Swift.IndexingIterator<CoreAudio.UnsafeMutableAudioBufferListPointer>
  public typealias SubSequence = Swift.Slice<CoreAudio.UnsafeMutableAudioBufferListPointer>
}
extension CoreAudioTypes.AudioChannelLayout {
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public static func sizeInBytes(maximumDescriptions: Swift.Int) -> Swift.Int
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public static func allocate(maximumDescriptions: Swift.Int) -> CoreAudioTypes.AudioChannelLayout.UnsafeMutablePointer
}
extension CoreAudioTypes.AudioChannelLayout {
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public struct UnsafeMutablePointer {
    public init(_ p: Swift.UnsafeMutablePointer<CoreAudioTypes.AudioChannelLayout>)
    public init?(_ p: Swift.UnsafeMutablePointer<CoreAudioTypes.AudioChannelLayout>?)
    public var count: Swift.Int {
      get
      nonmutating set(newValue)
    }
    public var unsafePointer: Swift.UnsafePointer<CoreAudioTypes.AudioChannelLayout> {
      get
    }
    public var unsafeMutablePointer: Swift.UnsafeMutablePointer<CoreAudioTypes.AudioChannelLayout>
  }
}
@available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
extension CoreAudioTypes.AudioChannelLayout.UnsafeMutablePointer : Swift.MutableCollection, Swift.RandomAccessCollection {
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public typealias Element = CoreAudioTypes.AudioChannelDescription
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public typealias Index = Swift.Int
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public typealias Indices = Swift.Range<Swift.Int>
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public var startIndex: Swift.Int {
    get
  }
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public var endIndex: Swift.Int {
    get
  }
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  @_borrowed public subscript(index: CoreAudioTypes.AudioChannelLayout.UnsafeMutablePointer.Index) -> CoreAudioTypes.AudioChannelLayout.UnsafeMutablePointer.Element {
    _read
    nonmutating _modify
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Iterator = Swift.IndexingIterator<CoreAudioTypes.AudioChannelLayout.UnsafeMutablePointer>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias SubSequence = Swift.Slice<CoreAudioTypes.AudioChannelLayout.UnsafeMutablePointer>
}
extension CoreAudioTypes.AudioChannelLayout {
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public struct UnsafePointer {
    public init(_ p: Swift.UnsafePointer<CoreAudioTypes.AudioChannelLayout>)
    public init?(_ p: Swift.UnsafePointer<CoreAudioTypes.AudioChannelLayout>?)
    public var count: Swift.Int {
      get
    }
    public var unsafePointer: Swift.UnsafePointer<CoreAudioTypes.AudioChannelLayout>
  }
}
@available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
extension CoreAudioTypes.AudioChannelLayout.UnsafePointer : Swift.Collection, Swift.RandomAccessCollection {
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public typealias Element = CoreAudioTypes.AudioChannelDescription
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public typealias Index = Swift.Int
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public typealias Indices = Swift.Range<Swift.Int>
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public var startIndex: Swift.Int {
    get
  }
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public var endIndex: Swift.Int {
    get
  }
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  @_borrowed public subscript(index: CoreAudioTypes.AudioChannelLayout.UnsafePointer.Index) -> CoreAudioTypes.AudioChannelLayout.UnsafePointer.Element {
    _read
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Iterator = Swift.IndexingIterator<CoreAudioTypes.AudioChannelLayout.UnsafePointer>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias SubSequence = Swift.Slice<CoreAudioTypes.AudioChannelLayout.UnsafePointer>
}
@available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
public struct ManagedAudioChannelLayout {
  public init(audioChannelLayoutPointer: CoreAudioTypes.AudioChannelLayout.UnsafePointer, deallocator: @escaping (CoreAudioTypes.AudioChannelLayout.UnsafePointer) -> Swift.Void)
  public init(tag: CoreAudioTypes.AudioChannelLayoutTag)
  public init(maximumDescriptions: Swift.Int)
  public init(channelDescriptions: [CoreAudioTypes.AudioChannelDescription])
  public var tag: CoreAudioTypes.AudioChannelLayoutTag {
    get
    set(newValue)
  }
  public var bitmap: CoreAudioTypes.AudioChannelBitmap {
    get
    set(newValue)
  }
  public mutating func setAllToUnknown()
  public var channelDescriptions: CoreAudio.ManagedAudioChannelLayout.ChannelDescriptions {
    _read
    _modify
  }
  public var sizeInBytes: Swift.Int {
    get
  }
  public var numberOfChannels: Swift.Int {
    get
  }
  public func withUnsafePointer<Result>(_ body: (Swift.UnsafePointer<CoreAudioTypes.AudioChannelLayout>) throws -> Result) rethrows -> Result
  public mutating func withUnsafeMutablePointer<Result>(_ body: (Swift.UnsafeMutablePointer<CoreAudioTypes.AudioChannelLayout>) throws -> Result) rethrows -> Result
  public struct ChannelDescriptions : Swift.MutableCollection, Swift.RandomAccessCollection {
    public typealias Element = CoreAudioTypes.AudioChannelDescription
    public typealias Index = Swift.Int
    public typealias Indices = Swift.Range<Swift.Int>
    public var startIndex: Swift.Int {
      get
    }
    public var endIndex: Swift.Int {
      get
    }
    public var count: Swift.Int {
      get
    }
    public subscript(index: CoreAudio.ManagedAudioChannelLayout.ChannelDescriptions.Index) -> CoreAudio.ManagedAudioChannelLayout.ChannelDescriptions.Element {
      _read
      _modify
    }
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias Iterator = Swift.IndexingIterator<CoreAudio.ManagedAudioChannelLayout.ChannelDescriptions>
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias SubSequence = Swift.Slice<CoreAudio.ManagedAudioChannelLayout.ChannelDescriptions>
  }
}
extension CoreAudioTypes.AudioChannelDescription {
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public static func == (lhs: CoreAudioTypes.AudioChannelDescription, rhs: CoreAudioTypes.AudioChannelDescription) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
extension CoreAudio.ManagedAudioChannelLayout.ChannelDescriptions : Swift.Equatable {
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public static func == (lhs: CoreAudio.ManagedAudioChannelLayout.ChannelDescriptions, rhs: CoreAudio.ManagedAudioChannelLayout.ChannelDescriptions) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
extension CoreAudio.ManagedAudioChannelLayout : Swift.Equatable {
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public static func == (lhs: CoreAudio.ManagedAudioChannelLayout, rhs: CoreAudio.ManagedAudioChannelLayout) -> Swift.Bool
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension CoreAudio.CATapDescription {
  convenience public init(stereoMixdownOfProcesses processesIDsToIncludeInTap: [CoreAudio.AudioObjectID])
  convenience public init(monoMixdownOfProcesses processesIDsToIncludeInTap: [CoreAudio.AudioObjectID])
  convenience public init(stereoGlobalTapButExcludeProcesses processesIDsToExcludeFromTap: [CoreAudio.AudioObjectID])
  convenience public init(monoGlobalTapButExcludeProcesses processesIDsToExcludeFromTap: [CoreAudio.AudioObjectID])
  convenience public init(processes processesIDsToIncludeInTap: [CoreAudio.AudioObjectID], deviceUID: Swift.String, stream: Swift.UInt)
  convenience public init(excludingProcesses processesIDsToExcludeFromTap: [CoreAudio.AudioObjectID], deviceUID: Swift.String, stream: Swift.UInt)
  public var processes: [CoreAudio.AudioObjectID] {
    get
    set(processObjectIDs)
  }
  public var stream: Swift.UInt? {
    get
    set(streamObject)
  }
}
@_inheritsConvenienceInitializers @available(macOS 15.0, *)
open class AudioHardwareDevice : CoreAudio.AudioHardwareClock {
  open var configurationApplication: Swift.String {
    get throws
  }
  open var modelUID: Swift.String {
    get throws
  }
  open var relatedDevices: [CoreAudio.AudioHardwareDevice] {
    get throws
  }
  open var canBeDefaultInputDevice: Swift.Bool {
    get throws
  }
  open var canBeDefaultOutputDevice: Swift.Bool {
    get throws
  }
  open var canBeDefaultSoundEffectsDevice: Swift.Bool {
    get throws
  }
  open var streams: [CoreAudio.AudioHardwareStream] {
    get throws
  }
  open var inputSafetyOffset: Swift.Int {
    get throws
  }
  open var outputSafetyOffset: Swift.Int {
    get throws
  }
  open var icon: Foundation.URL? {
    get throws
  }
  open var isHidden: Swift.Bool {
    get throws
  }
  open var preferredInputChannelsForStereo: [Swift.UInt32] {
    get throws
  }
  open var preferredOutputChannelsForStereo: [Swift.UInt32] {
    get throws
  }
  open var isRunningInAProcess: Swift.Bool {
    get throws
  }
  open var hogModePID: sys_types.pid_t {
    get throws
  }
  open var bufferFrameSize: Swift.Int {
    get throws
  }
  open var bufferFrameSizeRange: CoreAudioTypes.AudioValueRange {
    get throws
  }
  open var usesVariableBufferFrameSizes: Swift.Bool {
    get throws
  }
  open var largestVariableBufferFrameSize: Swift.Int {
    get throws
  }
  open var ioCycleUsage: Swift.Float {
    get throws
  }
  open var inputStreamConfiguration: [CoreAudioTypes.AudioBuffer] {
    get throws
  }
  open var outputStreamConfiguration: [CoreAudioTypes.AudioBuffer] {
    get throws
  }
  open var actualSampleRate: Swift.Double {
    get throws
  }
  open var clock: CoreAudio.AudioHardwareClock {
    get throws
  }
  open var workgroup: os_workgroup.WorkGroup {
    get throws
  }
  open var isProcessInputMuted: Swift.Bool {
    get throws
  }
  open var isProcessOutputMuted: Swift.Bool {
    get throws
  }
  open var currentTime: CoreAudioTypes.AudioTimeStamp {
    get throws
  }
  open func setPreferredInputChannelsForStereo(_ channels: [Swift.UInt32]) throws
  open func setPreferredOutputChannelsForStereo(_ channels: [Swift.UInt32]) throws
  open func setBufferFrameSize(_ size: Swift.Int) throws
  open func setIOCycleUsage(_ usage: Swift.Float) throws
  open func setClock(_ clock: CoreAudio.AudioHardwareClock) throws
  open func setIsProcessInputMuted(_ muted: Swift.Bool) throws
  open func setIsProcessOutputMuted(_ muted: Swift.Bool) throws
  open func toggleHogMode() throws -> sys_types.pid_t
  open func translateTime(_ timestamp: CoreAudioTypes.AudioTimeStamp) throws -> CoreAudioTypes.AudioTimeStamp
  open func nearestStartTime(atTime timestamp: CoreAudioTypes.AudioTimeStamp, withFlags flags: Swift.UInt32 = 0) throws -> CoreAudioTypes.AudioTimeStamp
  open func start(IOProcID: CoreAudio.AudioDeviceIOProcID? = nil) throws
  open func start(at time: CoreAudioTypes.AudioTimeStamp, flags: Swift.UInt32 = 0, IOProcID: CoreAudio.AudioDeviceIOProcID? = nil) throws -> CoreAudioTypes.AudioTimeStamp?
  open func stop(IOProcID: CoreAudio.AudioDeviceIOProcID? = nil) throws
  override public init(id: CoreAudio.AudioObjectID)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(macOS 15.0, *)
open class AudioHardwarePlugin : CoreAudio.AudioHardwareObject {
  open var bundleID: Swift.String {
    get throws
  }
  open var devices: [CoreAudio.AudioHardwareDevice] {
    get throws
  }
  open var boxes: [CoreAudio.AudioHardwareBox] {
    get throws
  }
  open var clocks: [CoreAudio.AudioHardwareClock] {
    get throws
  }
  open func device(forUID UID: Swift.String) throws -> CoreAudio.AudioHardwareDevice?
  open func box(forUID UID: Swift.String) throws -> CoreAudio.AudioHardwareBox?
  open func clock(forUID UID: Swift.String) throws -> CoreAudio.AudioHardwareClock?
  override public init(id: CoreAudio.AudioObjectID)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(macOS 15.0, *)
open class AudioHardwareAggregateDevice : CoreAudio.AudioHardwareDevice {
  open var subdevices: [CoreAudio.AudioHardwareClock] {
    get throws
  }
  open var activeSubdevices: [CoreAudio.AudioHardwareClock] {
    get throws
  }
  open var subtaps: [CoreAudio.AudioHardwareTap] {
    get throws
  }
  open var activeSubtaps: [CoreAudio.AudioHardwareTap] {
    get throws
  }
  open var clockSource: CoreAudio.AudioHardwareObject? {
    get throws
  }
  open var composition: [Swift.String : Any] {
    get throws
  }
  open func setSubdevices(_ devices: [CoreAudio.AudioHardwareClock]) throws
  open func setSubtaps(_ taps: [CoreAudio.AudioHardwareTap]) throws
  open func setClockSource(_ object: CoreAudio.AudioHardwareObject) throws
  open func setComposition(_ composition: [Swift.String : Any]) throws
  override public init(id: CoreAudio.AudioObjectID)
  @objc deinit
}
@available(macOS 15.0, *)
open class AudioHardwareObject {
  final public let id: CoreAudio.AudioObjectID
  public var delegates: [any CoreAudio.PropertyListenerDelegate]
  open var baseClassID: CoreAudio.AudioClassID {
    get throws
  }
  open var classID: CoreAudio.AudioClassID {
    get throws
  }
  open var owner: CoreAudio.AudioHardwareObject? {
    get throws
  }
  open var name: Swift.String {
    get throws
  }
  open var modelName: Swift.String {
    get throws
  }
  open var manufacturer: Swift.String {
    get throws
  }
  open var ownedObjects: [CoreAudio.AudioHardwareObject] {
    get throws
  }
  open var isIdentifying: Swift.Bool {
    get throws
  }
  open var serialNumber: Swift.String {
    get throws
  }
  open var firmwareVersion: Swift.String {
    get throws
  }
  open var creatorBundleID: Swift.String {
    get throws
  }
  open func setName(_ name: Swift.String) throws
  open func setIsIdentifying(_ isIdentifying: Swift.Bool) throws
  open func setCreatorBundleID(_ ID: Swift.String) throws
  public init(id: CoreAudio.AudioObjectID)
  open func hasProperty(address: CoreAudio.AudioObjectPropertyAddress) -> Swift.Bool
  open func isPropertySettable(address: CoreAudio.AudioObjectPropertyAddress) throws -> Swift.Bool
  open func propertyDataSize(address: CoreAudio.AudioObjectPropertyAddress, qualifier: Foundation.Data? = nil) throws -> Swift.Int
  open func propertyData(address: CoreAudio.AudioObjectPropertyAddress, qualifier: Foundation.Data? = nil) throws -> Foundation.Data
  open func setPropertyData(address: CoreAudio.AudioObjectPropertyAddress, qualifier: Foundation.Data? = nil, data: Foundation.Data) throws
  open func setPropertyData(address: CoreAudio.AudioObjectPropertyAddress, qualifier: Foundation.Data? = nil, data: inout Foundation.Data) async throws
  open func addListener(forProperties properties: [CoreAudio.AudioObjectPropertyAddress], dispatchQueue: Dispatch.dispatch_queue_t? = nil) throws
  open func removeListener(forProperties properties: [CoreAudio.AudioObjectPropertyAddress], dispatchQueue: Dispatch.dispatch_queue_t? = nil) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @available(macOS 15.0, *)
open class AudioHardwareTap : CoreAudio.AudioHardwareObject {
  open var uid: Swift.String {
    get throws
  }
  open var description: CoreAudio.CATapDescription {
    get throws
  }
  open var format: CoreAudioTypes.AudioStreamBasicDescription {
    get throws
  }
  open func setDescription(_ description: CoreAudio.CATapDescription) throws
  override public init(id: CoreAudio.AudioObjectID)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(macOS 15.0, *)
open class AudioHardwareClock : CoreAudio.AudioHardwareObject {
  open var uid: Swift.String {
    get throws
  }
  open var transportType: Swift.UInt32 {
    get throws
  }
  open var clockDomain: Swift.UInt32 {
    get throws
  }
  open var isAlive: Swift.Bool {
    get throws
  }
  open var isRunning: Swift.Bool {
    get throws
  }
  open var inputLatency: Swift.Int {
    get throws
  }
  open var outputLatency: Swift.Int {
    get throws
  }
  open var controls: [CoreAudio.AudioHardwareControl] {
    get throws
  }
  open var nominalSampleRate: Swift.Double {
    get throws
  }
  open var availableNominalSampleRates: [CoreAudioTypes.AudioValueRange] {
    get throws
  }
  open func setNominalSampleRate(_ sampleRate: Swift.Double) throws
  override public init(id: CoreAudio.AudioObjectID)
  @objc deinit
}
@available(macOS 15.0, *)
extension CoreAudio.AudioHardwareDirection : Swift.Equatable {}
@available(macOS 15.0, *)
extension CoreAudio.AudioHardwareDirection : Swift.Hashable {}
@available(macOS 15.0, *)
extension CoreAudio.AudioHardwareDirection : Swift.RawRepresentable {}
