// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target x86_64-apple-macos15.5 -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftSpriteKit -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 1.2 -module-name SpriteKit
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
@_exported import SpriteKit
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import simd
extension SpriteKit.SKShapeNode : Swift._CustomPlaygroundQuickLookable {
  @available(*, deprecated, message: "SKShapeNode.customPlaygroundQuickLook will be removed in a future Swift version")
  @_Concurrency.MainActor @preconcurrency public var customPlaygroundQuickLook: Swift.PlaygroundQuickLook {
    get
  }
}
extension SpriteKit.SKSpriteNode : Swift._CustomPlaygroundQuickLookable {
  @available(*, deprecated, message: "SKSpriteNode.customPlaygroundQuickLook will be removed in a future Swift version")
  @_Concurrency.MainActor @preconcurrency public var customPlaygroundQuickLook: Swift.PlaygroundQuickLook {
    get
  }
}
extension SpriteKit.SKTextureAtlas : Swift._CustomPlaygroundQuickLookable {
  @available(*, deprecated, message: "SKTextureAtlas.customPlaygroundQuickLook will be removed in a future Swift version")
  public var customPlaygroundQuickLook: Swift.PlaygroundQuickLook {
    get
  }
}
extension SpriteKit.SKTexture : Swift._CustomPlaygroundQuickLookable {
  @available(*, deprecated, message: "SKTexture.customPlaygroundQuickLook will be removed in a future Swift version")
  public var customPlaygroundQuickLook: Swift.PlaygroundQuickLook {
    get
  }
}
public typealias SKColor = AppKit.NSColor
@available(iOS 10.0, macOS 10.12, tvOS 10.0, watchOS 3.0, *)
extension SpriteKit.SKWarpGeometryGrid {
  convenience public init(columns: Swift.Int, rows: Swift.Int, sourcePositions: [Swift.SIMD2<Swift.Float>] = [SIMD2<Float>](), destinationPositions: [Swift.SIMD2<Swift.Float>] = [SIMD2<Float>]())
  public func replacingBySourcePositions(positions source: [Swift.SIMD2<Swift.Float>]) -> SpriteKit.SKWarpGeometryGrid
  public func replacingByDestinationPositions(positions destination: [Swift.SIMD2<Swift.Float>]) -> SpriteKit.SKWarpGeometryGrid
}
